(function (global, factory) {
   if (typeof define === "function" && define.amd) {
      define(["exports"], factory);
   } else if (typeof exports !== "undefined") {
      factory(exports);
   } else {
      var mod = { exports: {} };
      factory(mod.exports);
      global.pdf = mod.exports;
   }
})(
   typeof globalThis !== "undefined"
      ? globalThis
      : typeof self !== "undefined"
        ? self
        : this,
   function (_exports) {
      "use strict";
      Object.defineProperty(_exports, "__esModule", { value: true });
      _exports.version =
         _exports.updateTextLayer =
         _exports.shadow =
         _exports.setLayerDimensions =
         _exports.renderTextLayer =
         _exports.normalizeUnicode =
         _exports.noContextMenu =
         _exports.isPdfFile =
         _exports.isDataScheme =
         _exports.getXfaPageViewport =
         _exports.getPdfFilenameFromUrl =
         _exports.getFilenameFromUrl =
         _exports.getDocument =
         _exports.fetchData =
         _exports.createValidAbsoluteUrl =
         _exports.build =
         _exports.XfaLayer =
         _exports.VerbosityLevel =
         _exports.Util =
         _exports.UnexpectedResponseException =
         _exports.RenderingCancelledException =
         _exports.PixelsPerInch =
         _exports.PermissionFlag =
         _exports.PasswordResponses =
         _exports.PDFWorker =
         _exports.PDFDateString =
         _exports.PDFDataRangeTransport =
         _exports.Outliner =
         _exports.OPS =
         _exports.MissingPDFException =
         _exports.InvalidPDFException =
         _exports.ImageKind =
         _exports.GlobalWorkerOptions =
         _exports.FeatureTest =
         _exports.DrawLayer =
         _exports.DOMSVGFactory =
         _exports.ColorPicker =
         _exports.CMapCompressionType =
         _exports.AnnotationMode =
         _exports.AnnotationLayer =
         _exports.AnnotationEditorUIManager =
         _exports.AnnotationEditorType =
         _exports.AnnotationEditorParamsType =
         _exports.AnnotationEditorLayer =
         _exports.AbortException =
            void 0;
      function _toSetter(t, e, n) {
         e || (e = []);
         var r = e.length++;
         return Object.defineProperty({}, "_", {
            set: function set(o) {
               ((e[r] = o), t.apply(n, e));
            },
         });
      }
      function ownKeys(e, r) {
         var t = Object.keys(e);
         if (Object.getOwnPropertySymbols) {
            var o = Object.getOwnPropertySymbols(e);
            (r &&
               (o = o.filter(function (r) {
                  return Object.getOwnPropertyDescriptor(e, r).enumerable;
               })),
               t.push.apply(t, o));
         }
         return t;
      }
      function _objectSpread(e) {
         for (var r = 1; r < arguments.length; r++) {
            var t = null != arguments[r] ? arguments[r] : {};
            r % 2
               ? ownKeys(Object(t), !0).forEach(function (r) {
                    _defineProperty(e, r, t[r]);
                 })
               : Object.getOwnPropertyDescriptors
                 ? Object.defineProperties(
                      e,
                      Object.getOwnPropertyDescriptors(t),
                   )
                 : ownKeys(Object(t)).forEach(function (r) {
                      Object.defineProperty(
                         e,
                         r,
                         Object.getOwnPropertyDescriptor(t, r),
                      );
                   });
         }
         return e;
      }
      function _regeneratorKeys(e) {
         var n = Object(e),
            r = [];
         for (var t in n) r.unshift(t);
         return function e() {
            for (; r.length; )
               if ((t = r.pop()) in n) return ((e.value = t), (e.done = !1), e);
            return ((e.done = !0), e);
         };
      }
      function _interopRequireWildcard(e, t) {
         if ("function" == typeof WeakMap)
            var r = new WeakMap(),
               n = new WeakMap();
         return (_interopRequireWildcard = function _interopRequireWildcard(
            e,
            t,
         ) {
            if (!t && e && e.__esModule) return e;
            var o,
               i,
               f = { __proto__: null, default: e };
            if (
               null === e ||
               ("object" != _typeof(e) && "function" != typeof e)
            )
               return f;
            if ((o = t ? n : r)) {
               if (o.has(e)) return o.get(e);
               o.set(e, f);
            }
            for (var _t22 in e)
               "default" !== _t22 &&
                  {}.hasOwnProperty.call(e, _t22) &&
                  ((i =
                     (o = Object.defineProperty) &&
                     Object.getOwnPropertyDescriptor(e, _t22)) &&
                  (i.get || i.set)
                     ? o(f, _t22, i)
                     : (f[_t22] = e[_t22]));
            return f;
         })(e, t);
      }
      function _classPrivateGetter(s, r, a) {
         return a(_assertClassBrand(s, r));
      }
      function _typeof(o) {
         "@babel/helpers - typeof";
         return (
            (_typeof =
               "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                  ? function (o) {
                       return typeof o;
                    }
                  : function (o) {
                       return o &&
                          "function" == typeof Symbol &&
                          o.constructor === Symbol &&
                          o !== Symbol.prototype
                          ? "symbol"
                          : typeof o;
                    }),
            _typeof(o)
         );
      }
      function _regenerator() {
         /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e,
            t,
            r = "function" == typeof Symbol ? Symbol : {},
            n = r.iterator || "@@iterator",
            o = r.toStringTag || "@@toStringTag";
         function i(r, n, o, i) {
            var c = n && n.prototype instanceof Generator ? n : Generator,
               u = Object.create(c.prototype);
            return (
               _regeneratorDefine2(
                  u,
                  "_invoke",
                  (function (r, n, o) {
                     var i,
                        c,
                        u,
                        f = 0,
                        p = o || [],
                        y = !1,
                        G = {
                           p: 0,
                           n: 0,
                           v: e,
                           a: d,
                           f: d.bind(e, 4),
                           d: function d(t, r) {
                              return ((i = t), (c = 0), (u = e), (G.n = r), a);
                           },
                        };
                     function d(r, n) {
                        for (
                           c = r, u = n, t = 0;
                           !y && f && !o && t < p.length;
                           t++
                        ) {
                           var o,
                              i = p[t],
                              d = G.p,
                              l = i[2];
                           r > 3
                              ? (o = l === n) &&
                                ((u = i[(c = i[4]) ? 5 : ((c = 3), 3)]),
                                (i[4] = i[5] = e))
                              : i[0] <= d &&
                                ((o = r < 2 && d < i[1])
                                   ? ((c = 0), (G.v = n), (G.n = i[1]))
                                   : d < l &&
                                     (o = r < 3 || i[0] > n || n > l) &&
                                     ((i[4] = r),
                                     (i[5] = n),
                                     (G.n = l),
                                     (c = 0)));
                        }
                        if (o || r > 1) return a;
                        throw ((y = !0), n);
                     }
                     return function (o, p, l) {
                        if (f > 1)
                           throw TypeError("Generator is already running");
                        for (
                           y && 1 === p && d(p, l), c = p, u = l;
                           (t = c < 2 ? e : u) || !y;

                        ) {
                           i ||
                              (c
                                 ? c < 3
                                    ? (c > 1 && (G.n = -1), d(c, u))
                                    : (G.n = u)
                                 : (G.v = u));
                           try {
                              if (((f = 2), i)) {
                                 if ((c || (o = "next"), (t = i[o]))) {
                                    if (!(t = t.call(i, u)))
                                       throw TypeError(
                                          "iterator result is not an object",
                                       );
                                    if (!t.done) return t;
                                    ((u = t.value), c < 2 && (c = 0));
                                 } else
                                    (1 === c && (t = i["return"]) && t.call(i),
                                       c < 2 &&
                                          ((u = TypeError(
                                             "The iterator does not provide a '" +
                                                o +
                                                "' method",
                                          )),
                                          (c = 1)));
                                 i = e;
                              } else if (
                                 (t = (y = G.n < 0) ? u : r.call(n, G)) !== a
                              )
                                 break;
                           } catch (t) {
                              ((i = e), (c = 1), (u = t));
                           } finally {
                              f = 1;
                           }
                        }
                        return { value: t, done: y };
                     };
                  })(r, o, i),
                  !0,
               ),
               u
            );
         }
         var a = {};
         function Generator() {}
         function GeneratorFunction() {}
         function GeneratorFunctionPrototype() {}
         t = Object.getPrototypeOf;
         var c = [][n]
               ? t(t([][n]()))
               : (_regeneratorDefine2((t = {}), n, function () {
                    return this;
                 }),
                 t),
            u =
               (GeneratorFunctionPrototype.prototype =
               Generator.prototype =
                  Object.create(c));
         function f(e) {
            return (
               Object.setPrototypeOf
                  ? Object.setPrototypeOf(e, GeneratorFunctionPrototype)
                  : ((e.__proto__ = GeneratorFunctionPrototype),
                    _regeneratorDefine2(e, o, "GeneratorFunction")),
               (e.prototype = Object.create(u)),
               e
            );
         }
         return (
            (GeneratorFunction.prototype = GeneratorFunctionPrototype),
            _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype),
            _regeneratorDefine2(
               GeneratorFunctionPrototype,
               "constructor",
               GeneratorFunction,
            ),
            (GeneratorFunction.displayName = "GeneratorFunction"),
            _regeneratorDefine2(
               GeneratorFunctionPrototype,
               o,
               "GeneratorFunction",
            ),
            _regeneratorDefine2(u),
            _regeneratorDefine2(u, o, "Generator"),
            _regeneratorDefine2(u, n, function () {
               return this;
            }),
            _regeneratorDefine2(u, "toString", function () {
               return "[object Generator]";
            }),
            (_regenerator = function _regenerator() {
               return { w: i, m: f };
            })()
         );
      }
      function _regeneratorDefine2(e, r, n, t) {
         var i = Object.defineProperty;
         try {
            i({}, "", {});
         } catch (e) {
            i = 0;
         }
         ((_regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) {
            function o(r, n) {
               _regeneratorDefine2(e, r, function (e) {
                  return this._invoke(r, n, e);
               });
            }
            r
               ? i
                  ? i(e, r, {
                       value: n,
                       enumerable: !t,
                       configurable: !t,
                       writable: !t,
                    })
                  : (e[r] = n)
               : (o("next", 0), o("throw", 1), o("return", 2));
         }),
            _regeneratorDefine2(e, r, n, t));
      }
      function asyncGeneratorStep(n, t, e, r, o, a, c) {
         try {
            var i = n[a](c),
               u = i.value;
         } catch (n) {
            return void e(n);
         }
         i.done ? t(u) : Promise.resolve(u).then(r, o);
      }
      function _asyncToGenerator(n) {
         return function () {
            var t = this,
               e = arguments;
            return new Promise(function (r, o) {
               var a = n.apply(t, e);
               function _next(n) {
                  asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
               }
               function _throw(n) {
                  asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
               }
               _next(void 0);
            });
         };
      }
      function _superPropGet(t, o, e, r) {
         var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e);
         return 2 & r && "function" == typeof p
            ? function (t) {
                 return p.apply(e, t);
              }
            : p;
      }
      function _get() {
         return (
            (_get =
               "undefined" != typeof Reflect && Reflect.get
                  ? Reflect.get.bind()
                  : function (e, t, r) {
                       var p = _superPropBase(e, t);
                       if (p) {
                          var n = Object.getOwnPropertyDescriptor(p, t);
                          return n.get
                             ? n.get.call(arguments.length < 3 ? e : r)
                             : n.value;
                       }
                    }),
            _get.apply(null, arguments)
         );
      }
      function _superPropBase(t, o) {
         for (
            ;
            !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));

         );
         return t;
      }
      function _toConsumableArray(r) {
         return (
            _arrayWithoutHoles(r) ||
            _iterableToArray(r) ||
            _unsupportedIterableToArray(r) ||
            _nonIterableSpread()
         );
      }
      function _nonIterableSpread() {
         throw new TypeError(
            "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
         );
      }
      function _iterableToArray(r) {
         if (
            ("undefined" != typeof Symbol && null != r[Symbol.iterator]) ||
            null != r["@@iterator"]
         )
            return Array.from(r);
      }
      function _arrayWithoutHoles(r) {
         if (Array.isArray(r)) return _arrayLikeToArray(r);
      }
      function _callSuper(t, o, e) {
         return (
            (o = _getPrototypeOf(o)),
            _possibleConstructorReturn(
               t,
               _isNativeReflectConstruct()
                  ? Reflect.construct(
                       o,
                       e || [],
                       _getPrototypeOf(t).constructor,
                    )
                  : o.apply(t, e),
            )
         );
      }
      function _possibleConstructorReturn(t, e) {
         if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
         if (void 0 !== e)
            throw new TypeError(
               "Derived constructors may only return object or undefined",
            );
         return _assertThisInitialized(t);
      }
      function _assertThisInitialized(e) {
         if (void 0 === e)
            throw new ReferenceError(
               "this hasn't been initialised - super() hasn't been called",
            );
         return e;
      }
      function _isNativeReflectConstruct() {
         try {
            var t = !Boolean.prototype.valueOf.call(
               Reflect.construct(Boolean, [], function () {}),
            );
         } catch (t) {}
         return (_isNativeReflectConstruct =
            function _isNativeReflectConstruct() {
               return !!t;
            })();
      }
      function _getPrototypeOf(t) {
         return (
            (_getPrototypeOf = Object.setPrototypeOf
               ? Object.getPrototypeOf.bind()
               : function (t) {
                    return t.__proto__ || Object.getPrototypeOf(t);
                 }),
            _getPrototypeOf(t)
         );
      }
      function _inherits(t, e) {
         if ("function" != typeof e && null !== e)
            throw new TypeError(
               "Super expression must either be null or a function",
            );
         ((t.prototype = Object.create(e && e.prototype, {
            constructor: { value: t, writable: !0, configurable: !0 },
         })),
            Object.defineProperty(t, "prototype", { writable: !1 }),
            e && _setPrototypeOf(t, e));
      }
      function _setPrototypeOf(t, e) {
         return (
            (_setPrototypeOf = Object.setPrototypeOf
               ? Object.setPrototypeOf.bind()
               : function (t, e) {
                    return ((t.__proto__ = e), t);
                 }),
            _setPrototypeOf(t, e)
         );
      }
      function _createForOfIteratorHelper(r, e) {
         var t =
            ("undefined" != typeof Symbol && r[Symbol.iterator]) ||
            r["@@iterator"];
         if (!t) {
            if (
               Array.isArray(r) ||
               (t = _unsupportedIterableToArray(r)) ||
               (e && r && "number" == typeof r.length)
            ) {
               t && (r = t);
               var _n2 = 0,
                  F = function F() {};
               return {
                  s: F,
                  n: function n() {
                     return _n2 >= r.length
                        ? { done: !0 }
                        : { done: !1, value: r[_n2++] };
                  },
                  e: function e(r) {
                     throw r;
                  },
                  f: F,
               };
            }
            throw new TypeError(
               "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
            );
         }
         var o,
            a = !0,
            u = !1;
         return {
            s: function s() {
               t = t.call(r);
            },
            n: function n() {
               var r = t.next();
               return ((a = r.done), r);
            },
            e: function e(r) {
               ((u = !0), (o = r));
            },
            f: function f() {
               try {
                  a || null == t["return"] || t["return"]();
               } finally {
                  if (u) throw o;
               }
            },
         };
      }
      function _readOnlyError(r) {
         throw new TypeError('"' + r + '" is read-only');
      }
      function _defineProperty(e, r, t) {
         return (
            (r = _toPropertyKey(r)) in e
               ? Object.defineProperty(e, r, {
                    value: t,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0,
                 })
               : (e[r] = t),
            e
         );
      }
      function _classPrivateMethodInitSpec(e, a) {
         (_checkPrivateRedeclaration(e, a), a.add(e));
      }
      function _classPrivateFieldInitSpec(e, t, a) {
         (_checkPrivateRedeclaration(e, t), t.set(e, a));
      }
      function _checkPrivateRedeclaration(e, t) {
         if (t.has(e))
            throw new TypeError(
               "Cannot initialize the same private elements twice on an object",
            );
      }
      function _classPrivateFieldSet(s, a, r) {
         return (s.set(_assertClassBrand(s, a), r), r);
      }
      function _classPrivateFieldGet(s, a) {
         return s.get(_assertClassBrand(s, a));
      }
      function _assertClassBrand(e, t, n) {
         if ("function" == typeof e ? e === t : e.has(t))
            return arguments.length < 3 ? t : n;
         throw new TypeError("Private element is not present on this object");
      }
      function _slicedToArray(r, e) {
         return (
            _arrayWithHoles(r) ||
            _iterableToArrayLimit(r, e) ||
            _unsupportedIterableToArray(r, e) ||
            _nonIterableRest()
         );
      }
      function _nonIterableRest() {
         throw new TypeError(
            "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
         );
      }
      function _unsupportedIterableToArray(r, a) {
         if (r) {
            if ("string" == typeof r) return _arrayLikeToArray(r, a);
            var t = {}.toString.call(r).slice(8, -1);
            return (
               "Object" === t && r.constructor && (t = r.constructor.name),
               "Map" === t || "Set" === t
                  ? Array.from(r)
                  : "Arguments" === t ||
                      /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)
                    ? _arrayLikeToArray(r, a)
                    : void 0
            );
         }
      }
      function _arrayLikeToArray(r, a) {
         (null == a || a > r.length) && (a = r.length);
         for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
         return n;
      }
      function _iterableToArrayLimit(r, l) {
         var t =
            null == r
               ? null
               : ("undefined" != typeof Symbol && r[Symbol.iterator]) ||
                 r["@@iterator"];
         if (null != t) {
            var e,
               n,
               i,
               u,
               a = [],
               f = !0,
               o = !1;
            try {
               if (((i = (t = t.call(r)).next), 0 === l)) {
                  if (Object(t) !== t) return;
                  f = !1;
               } else
                  for (
                     ;
                     !(f = (e = i.call(t)).done) &&
                     (a.push(e.value), a.length !== l);
                     f = !0
                  );
            } catch (r) {
               ((o = !0), (n = r));
            } finally {
               try {
                  if (
                     !f &&
                     null != t["return"] &&
                     ((u = t["return"]()), Object(u) !== u)
                  )
                     return;
               } finally {
                  if (o) throw n;
               }
            }
            return a;
         }
      }
      function _arrayWithHoles(r) {
         if (Array.isArray(r)) return r;
      }
      function _classCallCheck(a, n) {
         if (!(a instanceof n))
            throw new TypeError("Cannot call a class as a function");
      }
      function _defineProperties(e, r) {
         for (var t = 0; t < r.length; t++) {
            var o = r[t];
            ((o.enumerable = o.enumerable || !1),
               (o.configurable = !0),
               "value" in o && (o.writable = !0),
               Object.defineProperty(e, _toPropertyKey(o.key), o));
         }
      }
      function _createClass(e, r, t) {
         return (
            r && _defineProperties(e.prototype, r),
            t && _defineProperties(e, t),
            Object.defineProperty(e, "prototype", { writable: !1 }),
            e
         );
      }
      function _toPropertyKey(t) {
         var i = _toPrimitive(t, "string");
         return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
         if ("object" != _typeof(t) || !t) return t;
         var e = t[Symbol.toPrimitive];
         if (void 0 !== e) {
            var i = e.call(t, r || "default");
            if ("object" != _typeof(i)) return i;
            throw new TypeError("@@toPrimitive must return a primitive value.");
         }
         return ("string" === r ? String : Number)(t);
      }
      /**
       * @licstart The following is the entire license notice for the
       * JavaScript code in this page
       *
       * Copyright 2023 Mozilla Foundation
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *     http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       *
       * @licend The above is the entire license notice for the
       * JavaScript code in this page
       */ /******/ var __webpack_modules__ = {
         /***/ 976: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
               AnnotationLayer: function AnnotationLayer() {
                  return /* binding */ _AnnotationLayer;
               },
               FreeTextAnnotationElement: function FreeTextAnnotationElement() {
                  return /* binding */ _FreeTextAnnotationElement;
               },
               InkAnnotationElement: function InkAnnotationElement() {
                  return /* binding */ _InkAnnotationElement;
               },
               StampAnnotationElement: function StampAnnotationElement() {
                  return /* binding */ _StampAnnotationElement;
               },
            }); // EXTERNAL MODULE: ./src/shared/util.js
            var util = __webpack_require__(292); // EXTERNAL MODULE: ./src/display/display_utils.js
            var display_utils = __webpack_require__(419); // EXTERNAL MODULE: ./src/display/annotation_storage.js
            var annotation_storage = __webpack_require__(792); // CONCATENATED MODULE: ./src/shared/scripting_utils.js
            function makeColorComp(n) {
               return Math.floor(Math.max(0, Math.min(1, n)) * 255)
                  .toString(16)
                  .padStart(2, "0");
            }
            function scaleAndClamp(x) {
               return Math.max(0, Math.min(255, 255 * x));
            }
            var ColorConverters = /*#__PURE__*/ (function () {
               function ColorConverters() {
                  _classCallCheck(this, ColorConverters);
               }
               return _createClass(ColorConverters, null, [
                  {
                     key: "CMYK_G",
                     value: function CMYK_G(_ref) {
                        var _ref2 = _slicedToArray(_ref, 4),
                           c = _ref2[0],
                           y = _ref2[1],
                           m = _ref2[2],
                           k = _ref2[3];
                        return [
                           "G",
                           1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k),
                        ];
                     },
                  },
                  {
                     key: "G_CMYK",
                     value: function G_CMYK(_ref3) {
                        var _ref4 = _slicedToArray(_ref3, 1),
                           g = _ref4[0];
                        return ["CMYK", 0, 0, 0, 1 - g];
                     },
                  },
                  {
                     key: "G_RGB",
                     value: function G_RGB(_ref5) {
                        var _ref6 = _slicedToArray(_ref5, 1),
                           g = _ref6[0];
                        return ["RGB", g, g, g];
                     },
                  },
                  {
                     key: "G_rgb",
                     value: function G_rgb(_ref7) {
                        var _ref8 = _slicedToArray(_ref7, 1),
                           g = _ref8[0];
                        g = scaleAndClamp(g);
                        return [g, g, g];
                     },
                  },
                  {
                     key: "G_HTML",
                     value: function G_HTML(_ref9) {
                        var _ref0 = _slicedToArray(_ref9, 1),
                           g = _ref0[0];
                        var G = makeColorComp(g);
                        return "#".concat(G).concat(G).concat(G);
                     },
                  },
                  {
                     key: "RGB_G",
                     value: function RGB_G(_ref1) {
                        var _ref10 = _slicedToArray(_ref1, 3),
                           r = _ref10[0],
                           g = _ref10[1],
                           b = _ref10[2];
                        return ["G", 0.3 * r + 0.59 * g + 0.11 * b];
                     },
                  },
                  {
                     key: "RGB_rgb",
                     value: function RGB_rgb(color) {
                        return color.map(scaleAndClamp);
                     },
                  },
                  {
                     key: "RGB_HTML",
                     value: function RGB_HTML(color) {
                        return "#".concat(color.map(makeColorComp).join(""));
                     },
                  },
                  {
                     key: "T_HTML",
                     value: function T_HTML() {
                        return "#00000000";
                     },
                  },
                  {
                     key: "T_rgb",
                     value: function T_rgb() {
                        return [null];
                     },
                  },
                  {
                     key: "CMYK_RGB",
                     value: function CMYK_RGB(_ref11) {
                        var _ref12 = _slicedToArray(_ref11, 4),
                           c = _ref12[0],
                           y = _ref12[1],
                           m = _ref12[2],
                           k = _ref12[3];
                        return [
                           "RGB",
                           1 - Math.min(1, c + k),
                           1 - Math.min(1, m + k),
                           1 - Math.min(1, y + k),
                        ];
                     },
                  },
                  {
                     key: "CMYK_rgb",
                     value: function CMYK_rgb(_ref13) {
                        var _ref14 = _slicedToArray(_ref13, 4),
                           c = _ref14[0],
                           y = _ref14[1],
                           m = _ref14[2],
                           k = _ref14[3];
                        return [
                           scaleAndClamp(1 - Math.min(1, c + k)),
                           scaleAndClamp(1 - Math.min(1, m + k)),
                           scaleAndClamp(1 - Math.min(1, y + k)),
                        ];
                     },
                  },
                  {
                     key: "CMYK_HTML",
                     value: function CMYK_HTML(components) {
                        var rgb = this.CMYK_RGB(components).slice(1);
                        return this.RGB_HTML(rgb);
                     },
                  },
                  {
                     key: "RGB_CMYK",
                     value: function RGB_CMYK(_ref15) {
                        var _ref16 = _slicedToArray(_ref15, 3),
                           r = _ref16[0],
                           g = _ref16[1],
                           b = _ref16[2];
                        var c = 1 - r;
                        var m = 1 - g;
                        var y = 1 - b;
                        var k = Math.min(c, m, y);
                        return ["CMYK", c, m, y, k];
                     },
                  },
               ]);
            })(); // EXTERNAL MODULE: ./src/display/xfa_layer.js
            var xfa_layer = __webpack_require__(284); // CONCATENATED MODULE: ./src/display/annotation_layer.js
            var DEFAULT_TAB_INDEX = 1000;
            var DEFAULT_FONT_SIZE = 9;
            var GetElementsByNameSet = new WeakSet();
            function getRectDims(rect) {
               return { width: rect[2] - rect[0], height: rect[3] - rect[1] };
            }
            var AnnotationElementFactory = /*#__PURE__*/ (function () {
               function AnnotationElementFactory() {
                  _classCallCheck(this, AnnotationElementFactory);
               }
               return _createClass(AnnotationElementFactory, null, [
                  {
                     key: "create",
                     value: function create(parameters) {
                        var subtype = parameters.data.annotationType;
                        switch (subtype) {
                           case util.AnnotationType.LINK:
                              return new LinkAnnotationElement(parameters);
                           case util.AnnotationType.TEXT:
                              return new TextAnnotationElement(parameters);
                           case util.AnnotationType.WIDGET:
                              var fieldType = parameters.data.fieldType;
                              switch (fieldType) {
                                 case "Tx":
                                    return new TextWidgetAnnotationElement(
                                       parameters,
                                    );
                                 case "Btn":
                                    if (parameters.data.radioButton) {
                                       return new RadioButtonWidgetAnnotationElement(
                                          parameters,
                                       );
                                    } else if (parameters.data.checkBox) {
                                       return new CheckboxWidgetAnnotationElement(
                                          parameters,
                                       );
                                    }
                                    return new PushButtonWidgetAnnotationElement(
                                       parameters,
                                    );
                                 case "Ch":
                                    return new ChoiceWidgetAnnotationElement(
                                       parameters,
                                    );
                                 case "Sig":
                                    return new SignatureWidgetAnnotationElement(
                                       parameters,
                                    );
                              }
                              return new WidgetAnnotationElement(parameters);
                           case util.AnnotationType.POPUP:
                              return new PopupAnnotationElement(parameters);
                           case util.AnnotationType.FREETEXT:
                              return new _FreeTextAnnotationElement(parameters);
                           case util.AnnotationType.LINE:
                              return new LineAnnotationElement(parameters);
                           case util.AnnotationType.SQUARE:
                              return new SquareAnnotationElement(parameters);
                           case util.AnnotationType.CIRCLE:
                              return new CircleAnnotationElement(parameters);
                           case util.AnnotationType.POLYLINE:
                              return new PolylineAnnotationElement(parameters);
                           case util.AnnotationType.CARET:
                              return new CaretAnnotationElement(parameters);
                           case util.AnnotationType.INK:
                              return new _InkAnnotationElement(parameters);
                           case util.AnnotationType.POLYGON:
                              return new PolygonAnnotationElement(parameters);
                           case util.AnnotationType.HIGHLIGHT:
                              return new HighlightAnnotationElement(parameters);
                           case util.AnnotationType.UNDERLINE:
                              return new UnderlineAnnotationElement(parameters);
                           case util.AnnotationType.SQUIGGLY:
                              return new SquigglyAnnotationElement(parameters);
                           case util.AnnotationType.STRIKEOUT:
                              return new StrikeOutAnnotationElement(parameters);
                           case util.AnnotationType.STAMP:
                              return new _StampAnnotationElement(parameters);
                           case util.AnnotationType.FILEATTACHMENT:
                              return new FileAttachmentAnnotationElement(
                                 parameters,
                              );
                           default:
                              return new AnnotationElement(parameters);
                        }
                     },
                  },
               ]);
            })();
            var _updates = /*#__PURE__*/ new WeakMap();
            var _hasBorder = /*#__PURE__*/ new WeakMap();
            var _AnnotationElement_brand = /*#__PURE__*/ new WeakSet();
            var AnnotationElement = /*#__PURE__*/ (function () {
               function AnnotationElement(parameters) {
                  var _ref17 =
                        arguments.length > 1 && arguments[1] !== undefined
                           ? arguments[1]
                           : {},
                     _ref17$isRenderable = _ref17.isRenderable,
                     isRenderable =
                        _ref17$isRenderable === void 0
                           ? false
                           : _ref17$isRenderable,
                     _ref17$ignoreBorder = _ref17.ignoreBorder,
                     ignoreBorder =
                        _ref17$ignoreBorder === void 0
                           ? false
                           : _ref17$ignoreBorder,
                     _ref17$createQuadrila = _ref17.createQuadrilaterals,
                     createQuadrilaterals =
                        _ref17$createQuadrila === void 0
                           ? false
                           : _ref17$createQuadrila;
                  _classCallCheck(this, AnnotationElement);
                  _classPrivateMethodInitSpec(this, _AnnotationElement_brand);
                  _classPrivateFieldInitSpec(this, _updates, null);
                  _classPrivateFieldInitSpec(this, _hasBorder, false);
                  this.isRenderable = isRenderable;
                  this.data = parameters.data;
                  this.layer = parameters.layer;
                  this.linkService = parameters.linkService;
                  this.downloadManager = parameters.downloadManager;
                  this.imageResourcesPath = parameters.imageResourcesPath;
                  this.renderForms = parameters.renderForms;
                  this.svgFactory = parameters.svgFactory;
                  this.annotationStorage = parameters.annotationStorage;
                  this.enableScripting = parameters.enableScripting;
                  this.hasJSActions = parameters.hasJSActions;
                  this._fieldObjects = parameters.fieldObjects;
                  this.parent = parameters.parent;
                  if (isRenderable) {
                     this.container = this._createContainer(ignoreBorder);
                  }
                  if (createQuadrilaterals) {
                     this._createQuadrilaterals();
                  }
               }
               return _createClass(
                  AnnotationElement,
                  [
                     {
                        key: "hasPopupData",
                        get: function get() {
                           return AnnotationElement._hasPopupData(this.data);
                        },
                     },
                     {
                        key: "updateEdited",
                        value: function updateEdited(params) {
                           if (!this.container) {
                              return;
                           }
                           _classPrivateFieldGet(_updates, this) ||
                              _classPrivateFieldSet(_updates, this, {
                                 rect: this.data.rect.slice(0),
                              });
                           var rect = params.rect;
                           if (rect) {
                              _assertClassBrand(
                                 _AnnotationElement_brand,
                                 this,
                                 _setRectEdited,
                              ).call(this, rect);
                           }
                        },
                     },
                     {
                        key: "resetEdited",
                        value: function resetEdited() {
                           if (!_classPrivateFieldGet(_updates, this)) {
                              return;
                           }
                           _assertClassBrand(
                              _AnnotationElement_brand,
                              this,
                              _setRectEdited,
                           ).call(
                              this,
                              _classPrivateFieldGet(_updates, this).rect,
                           );
                           _classPrivateFieldSet(_updates, this, null);
                        },
                     },
                     {
                        key: "_createContainer",
                        value: function _createContainer(ignoreBorder) {
                           var data = this.data,
                              _this$parent = this.parent,
                              page = _this$parent.page,
                              viewport = _this$parent.viewport;
                           var container = document.createElement("section");
                           container.setAttribute(
                              "data-annotation-id",
                              data.id,
                           );
                           if (!(this instanceof WidgetAnnotationElement)) {
                              container.tabIndex = DEFAULT_TAB_INDEX;
                           }
                           var style = container.style;
                           style.zIndex = this.parent.zIndex++;
                           if (data.popupRef) {
                              container.setAttribute("aria-haspopup", "dialog");
                           }
                           if (data.alternativeText) {
                              container.title = data.alternativeText;
                           }
                           if (data.noRotate) {
                              container.classList.add("norotate");
                           }
                           if (
                              !data.rect ||
                              this instanceof PopupAnnotationElement
                           ) {
                              var _rotation2 = data.rotation;
                              if (!data.hasOwnCanvas && _rotation2 !== 0) {
                                 this.setRotation(_rotation2, container);
                              }
                              return container;
                           }
                           var _getRectDims = getRectDims(data.rect),
                              width = _getRectDims.width,
                              height = _getRectDims.height;
                           if (!ignoreBorder && data.borderStyle.width > 0) {
                              style.borderWidth = "".concat(
                                 data.borderStyle.width,
                                 "px",
                              );
                              var horizontalRadius =
                                 data.borderStyle.horizontalCornerRadius;
                              var verticalRadius =
                                 data.borderStyle.verticalCornerRadius;
                              if (horizontalRadius > 0 || verticalRadius > 0) {
                                 var radius = "calc("
                                    .concat(
                                       horizontalRadius,
                                       "px * var(--scale-factor)) / calc(",
                                    )
                                    .concat(
                                       verticalRadius,
                                       "px * var(--scale-factor))",
                                    );
                                 style.borderRadius = radius;
                              } else if (
                                 this instanceof
                                 RadioButtonWidgetAnnotationElement
                              ) {
                                 var _radius = "calc("
                                    .concat(
                                       width,
                                       "px * var(--scale-factor)) / calc(",
                                    )
                                    .concat(
                                       height,
                                       "px * var(--scale-factor))",
                                    );
                                 style.borderRadius = _radius;
                              }
                              switch (data.borderStyle.style) {
                                 case util.AnnotationBorderStyleType.SOLID:
                                    style.borderStyle = "solid";
                                    break;
                                 case util.AnnotationBorderStyleType.DASHED:
                                    style.borderStyle = "dashed";
                                    break;
                                 case util.AnnotationBorderStyleType.BEVELED:
                                    (0, util.warn)(
                                       "Unimplemented border style: beveled",
                                    );
                                    break;
                                 case util.AnnotationBorderStyleType.INSET:
                                    (0, util.warn)(
                                       "Unimplemented border style: inset",
                                    );
                                    break;
                                 case util.AnnotationBorderStyleType.UNDERLINE:
                                    style.borderBottomStyle = "solid";
                                    break;
                                 default:
                                    break;
                              }
                              var borderColor = data.borderColor || null;
                              if (borderColor) {
                                 _classPrivateFieldSet(_hasBorder, this, true);
                                 style.borderColor = util.Util.makeHexColor(
                                    borderColor[0] | 0,
                                    borderColor[1] | 0,
                                    borderColor[2] | 0,
                                 );
                              } else {
                                 style.borderWidth = 0;
                              }
                           }
                           var rect = util.Util.normalizeRect([
                              data.rect[0],
                              page.view[3] - data.rect[1] + page.view[1],
                              data.rect[2],
                              page.view[3] - data.rect[3] + page.view[1],
                           ]);
                           var _viewport$rawDims = viewport.rawDims,
                              pageWidth = _viewport$rawDims.pageWidth,
                              pageHeight = _viewport$rawDims.pageHeight,
                              pageX = _viewport$rawDims.pageX,
                              pageY = _viewport$rawDims.pageY;
                           style.left = "".concat(
                              (100 * (rect[0] - pageX)) / pageWidth,
                              "%",
                           );
                           style.top = "".concat(
                              (100 * (rect[1] - pageY)) / pageHeight,
                              "%",
                           );
                           var rotation = data.rotation;
                           if (data.hasOwnCanvas || rotation === 0) {
                              style.width = "".concat(
                                 (100 * width) / pageWidth,
                                 "%",
                              );
                              style.height = "".concat(
                                 (100 * height) / pageHeight,
                                 "%",
                              );
                           } else {
                              this.setRotation(rotation, container);
                           }
                           return container;
                        },
                     },
                     {
                        key: "setRotation",
                        value: function setRotation(angle) {
                           var container =
                              arguments.length > 1 && arguments[1] !== undefined
                                 ? arguments[1]
                                 : this.container;
                           if (!this.data.rect) {
                              return;
                           }
                           var _this$parent$viewport =
                                 this.parent.viewport.rawDims,
                              pageWidth = _this$parent$viewport.pageWidth,
                              pageHeight = _this$parent$viewport.pageHeight;
                           var _getRectDims2 = getRectDims(this.data.rect),
                              width = _getRectDims2.width,
                              height = _getRectDims2.height;
                           var elementWidth, elementHeight;
                           if (angle % 180 === 0) {
                              elementWidth = (100 * width) / pageWidth;
                              elementHeight = (100 * height) / pageHeight;
                           } else {
                              elementWidth = (100 * height) / pageWidth;
                              elementHeight = (100 * width) / pageHeight;
                           }
                           container.style.width = "".concat(elementWidth, "%");
                           container.style.height = "".concat(
                              elementHeight,
                              "%",
                           );
                           container.setAttribute(
                              "data-main-rotation",
                              (360 - angle) % 360,
                           );
                        },
                     },
                     {
                        key: "_commonActions",
                        get: function get() {
                           var _this = this;
                           var setColor = function setColor(
                              jsName,
                              styleName,
                              event,
                           ) {
                              var color = event.detail[jsName];
                              var colorType = color[0];
                              var colorArray = color.slice(1);
                              event.target.style[styleName] =
                                 ColorConverters["".concat(colorType, "_HTML")](
                                    colorArray,
                                 );
                              _this.annotationStorage.setValue(
                                 _this.data.id,
                                 _defineProperty(
                                    {},
                                    styleName,
                                    ColorConverters[
                                       "".concat(colorType, "_rgb")
                                    ](colorArray),
                                 ),
                              );
                           };
                           return (0, util.shadow)(this, "_commonActions", {
                              display: function display(event) {
                                 var display = event.detail.display;
                                 var hidden = display % 2 === 1;
                                 _this.container.style.visibility = hidden
                                    ? "hidden"
                                    : "visible";
                                 _this.annotationStorage.setValue(
                                    _this.data.id,
                                    {
                                       noView: hidden,
                                       noPrint: display === 1 || display === 2,
                                    },
                                 );
                              },
                              print: function print(event) {
                                 _this.annotationStorage.setValue(
                                    _this.data.id,
                                    {
                                       noPrint: !event.detail.print,
                                    },
                                 );
                              },
                              hidden: function hidden(event) {
                                 var hidden = event.detail.hidden;
                                 _this.container.style.visibility = hidden
                                    ? "hidden"
                                    : "visible";
                                 _this.annotationStorage.setValue(
                                    _this.data.id,
                                    {
                                       noPrint: hidden,
                                       noView: hidden,
                                    },
                                 );
                              },
                              focus: function focus(event) {
                                 setTimeout(function () {
                                    return event.target.focus({
                                       preventScroll: false,
                                    });
                                 }, 0);
                              },
                              userName: function userName(event) {
                                 event.target.title = event.detail.userName;
                              },
                              readonly: function readonly(event) {
                                 event.target.disabled = event.detail.readonly;
                              },
                              required: function required(event) {
                                 _this._setRequired(
                                    event.target,
                                    event.detail.required,
                                 );
                              },
                              bgColor: function bgColor(event) {
                                 setColor("bgColor", "backgroundColor", event);
                              },
                              fillColor: function fillColor(event) {
                                 setColor(
                                    "fillColor",
                                    "backgroundColor",
                                    event,
                                 );
                              },
                              fgColor: function fgColor(event) {
                                 setColor("fgColor", "color", event);
                              },
                              textColor: function textColor(event) {
                                 setColor("textColor", "color", event);
                              },
                              borderColor: function borderColor(event) {
                                 setColor("borderColor", "borderColor", event);
                              },
                              strokeColor: function strokeColor(event) {
                                 setColor("strokeColor", "borderColor", event);
                              },
                              rotation: function rotation(event) {
                                 var angle = event.detail.rotation;
                                 _this.setRotation(angle);
                                 _this.annotationStorage.setValue(
                                    _this.data.id,
                                    {
                                       rotation: angle,
                                    },
                                 );
                              },
                           });
                        },
                     },
                     {
                        key: "_dispatchEventFromSandbox",
                        value: function _dispatchEventFromSandbox(
                           actions,
                           jsEvent,
                        ) {
                           var commonActions = this._commonActions;
                           for (
                              var _i = 0,
                                 _Object$keys = Object.keys(jsEvent.detail);
                              _i < _Object$keys.length;
                              _i++
                           ) {
                              var name = _Object$keys[_i];
                              var action = actions[name] || commonActions[name];
                              action === null ||
                                 action === void 0 ||
                                 action(jsEvent);
                           }
                        },
                     },
                     {
                        key: "_setDefaultPropertiesFromJS",
                        value: function _setDefaultPropertiesFromJS(element) {
                           if (!this.enableScripting) {
                              return;
                           }
                           var storedData = this.annotationStorage.getRawValue(
                              this.data.id,
                           );
                           if (!storedData) {
                              return;
                           }
                           var commonActions = this._commonActions;
                           for (
                              var _i2 = 0,
                                 _Object$entries = Object.entries(storedData);
                              _i2 < _Object$entries.length;
                              _i2++
                           ) {
                              var _Object$entries$_i = _slicedToArray(
                                    _Object$entries[_i2],
                                    2,
                                 ),
                                 actionName = _Object$entries$_i[0],
                                 detail = _Object$entries$_i[1];
                              var action = commonActions[actionName];
                              if (action) {
                                 var eventProxy = {
                                    detail: _defineProperty(
                                       {},
                                       actionName,
                                       detail,
                                    ),
                                    target: element,
                                 };
                                 action(eventProxy);
                                 delete storedData[actionName];
                              }
                           }
                        },
                     },
                     {
                        key: "_createQuadrilaterals",
                        value: function _createQuadrilaterals() {
                           if (!this.container) {
                              return;
                           }
                           var quadPoints = this.data.quadPoints;
                           if (!quadPoints) {
                              return;
                           }
                           var _this$data$rect = _slicedToArray(
                                 this.data.rect,
                                 4,
                              ),
                              rectBlX = _this$data$rect[0],
                              rectBlY = _this$data$rect[1],
                              rectTrX = _this$data$rect[2],
                              rectTrY = _this$data$rect[3];
                           if (quadPoints.length === 1) {
                              var _quadPoints$ = _slicedToArray(
                                    quadPoints[0],
                                    3,
                                 ),
                                 _quadPoints$$ = _quadPoints$[1],
                                 trX = _quadPoints$$.x,
                                 trY = _quadPoints$$.y,
                                 _quadPoints$$2 = _quadPoints$[2],
                                 blX = _quadPoints$$2.x,
                                 blY = _quadPoints$$2.y;
                              if (
                                 rectTrX === trX &&
                                 rectTrY === trY &&
                                 rectBlX === blX &&
                                 rectBlY === blY
                              ) {
                                 return;
                              }
                           }
                           var style = this.container.style;
                           var svgBuffer;
                           if (_classPrivateFieldGet(_hasBorder, this)) {
                              var borderColor = style.borderColor,
                                 borderWidth = style.borderWidth;
                              style.borderWidth = 0;
                              svgBuffer = [
                                 "url('data:image/svg+xml;utf8,",
                                 '<svg xmlns="http://www.w3.org/2000/svg"',
                                 ' preserveAspectRatio="none" viewBox="0 0 1 1">',
                                 '<g fill="transparent" stroke="'
                                    .concat(borderColor, '" stroke-width="')
                                    .concat(borderWidth, '">'),
                              ];
                              this.container.classList.add("hasBorder");
                           }
                           var width = rectTrX - rectBlX;
                           var height = rectTrY - rectBlY;
                           var svgFactory = this.svgFactory;
                           var svg = svgFactory.createElement("svg");
                           svg.classList.add("quadrilateralsContainer");
                           svg.setAttribute("width", 0);
                           svg.setAttribute("height", 0);
                           var defs = svgFactory.createElement("defs");
                           svg.append(defs);
                           var clipPath = svgFactory.createElement("clipPath");
                           var id = "clippath_".concat(this.data.id);
                           clipPath.setAttribute("id", id);
                           clipPath.setAttribute(
                              "clipPathUnits",
                              "objectBoundingBox",
                           );
                           defs.append(clipPath);
                           var _iterator =
                                 _createForOfIteratorHelper(quadPoints),
                              _step;
                           try {
                              for (
                                 _iterator.s();
                                 !(_step = _iterator.n()).done;

                              ) {
                                 var _svgBuffer;
                                 var _step$value = _slicedToArray(
                                       _step.value,
                                       3,
                                    ),
                                    _step$value$ = _step$value[1],
                                    _trX = _step$value$.x,
                                    _trY = _step$value$.y,
                                    _step$value$2 = _step$value[2],
                                    _blX = _step$value$2.x,
                                    _blY = _step$value$2.y;
                                 var rect = svgFactory.createElement("rect");
                                 var x = (_blX - rectBlX) / width;
                                 var y = (rectTrY - _trY) / height;
                                 var rectWidth = (_trX - _blX) / width;
                                 var rectHeight = (_trY - _blY) / height;
                                 rect.setAttribute("x", x);
                                 rect.setAttribute("y", y);
                                 rect.setAttribute("width", rectWidth);
                                 rect.setAttribute("height", rectHeight);
                                 clipPath.append(rect);
                                 (_svgBuffer = svgBuffer) === null ||
                                    _svgBuffer === void 0 ||
                                    _svgBuffer.push(
                                       '<rect vector-effect="non-scaling-stroke" x="'
                                          .concat(x, '" y="')
                                          .concat(y, '" width="')
                                          .concat(rectWidth, '" height="')
                                          .concat(rectHeight, '"/>'),
                                    );
                              }
                           } catch (err) {
                              _iterator.e(err);
                           } finally {
                              _iterator.f();
                           }
                           if (_classPrivateFieldGet(_hasBorder, this)) {
                              svgBuffer.push("</g></svg>')");
                              style.backgroundImage = svgBuffer.join("");
                           }
                           this.container.append(svg);
                           this.container.style.clipPath = "url(#".concat(
                              id,
                              ")",
                           );
                        },
                     },
                     {
                        key: "_createPopup",
                        value: function _createPopup() {
                           var container = this.container,
                              data = this.data;
                           container.setAttribute("aria-haspopup", "dialog");
                           var popup = new PopupAnnotationElement({
                              data: {
                                 color: data.color,
                                 titleObj: data.titleObj,
                                 modificationDate: data.modificationDate,
                                 contentsObj: data.contentsObj,
                                 richText: data.richText,
                                 parentRect: data.rect,
                                 borderStyle: 0,
                                 id: "popup_".concat(data.id),
                                 rotation: data.rotation,
                              },
                              parent: this.parent,
                              elements: [this],
                           });
                           this.parent.div.append(popup.render());
                        },
                     },
                     {
                        key: "render",
                        value: function render() {
                           (0, util.unreachable)(
                              "Abstract method `AnnotationElement.render` called",
                           );
                        },
                     },
                     {
                        key: "_getElementsByName",
                        value: function _getElementsByName(name) {
                           var skipId =
                              arguments.length > 1 && arguments[1] !== undefined
                                 ? arguments[1]
                                 : null;
                           var fields = [];
                           if (this._fieldObjects) {
                              var fieldObj = this._fieldObjects[name];
                              if (fieldObj) {
                                 var _iterator2 =
                                       _createForOfIteratorHelper(fieldObj),
                                    _step2;
                                 try {
                                    for (
                                       _iterator2.s();
                                       !(_step2 = _iterator2.n()).done;

                                    ) {
                                       var _step2$value = _step2.value,
                                          page = _step2$value.page,
                                          id = _step2$value.id,
                                          exportValues =
                                             _step2$value.exportValues;
                                       if (page === -1) {
                                          continue;
                                       }
                                       if (id === skipId) {
                                          continue;
                                       }
                                       var exportValue =
                                          typeof exportValues === "string"
                                             ? exportValues
                                             : null;
                                       var domElement = document.querySelector(
                                          '[data-element-id="'.concat(id, '"]'),
                                       );
                                       if (
                                          domElement &&
                                          !GetElementsByNameSet.has(domElement)
                                       ) {
                                          (0, util.warn)(
                                             "_getElementsByName - element not allowed: ".concat(
                                                id,
                                             ),
                                          );
                                          continue;
                                       }
                                       fields.push({
                                          id: id,
                                          exportValue: exportValue,
                                          domElement: domElement,
                                       });
                                    }
                                 } catch (err) {
                                    _iterator2.e(err);
                                 } finally {
                                    _iterator2.f();
                                 }
                              }
                              return fields;
                           }
                           var _iterator3 = _createForOfIteratorHelper(
                                 document.getElementsByName(name),
                              ),
                              _step3;
                           try {
                              for (
                                 _iterator3.s();
                                 !(_step3 = _iterator3.n()).done;

                              ) {
                                 var _domElement = _step3.value;
                                 var _exportValue = _domElement.exportValue;
                                 var _id =
                                    _domElement.getAttribute("data-element-id");
                                 if (_id === skipId) {
                                    continue;
                                 }
                                 if (!GetElementsByNameSet.has(_domElement)) {
                                    continue;
                                 }
                                 fields.push({
                                    id: _id,
                                    exportValue: _exportValue,
                                    domElement: _domElement,
                                 });
                              }
                           } catch (err) {
                              _iterator3.e(err);
                           } finally {
                              _iterator3.f();
                           }
                           return fields;
                        },
                     },
                     {
                        key: "show",
                        value: function show() {
                           var _this$popup;
                           if (this.container) {
                              this.container.hidden = false;
                           }
                           (_this$popup = this.popup) === null ||
                              _this$popup === void 0 ||
                              _this$popup.maybeShow();
                        },
                     },
                     {
                        key: "hide",
                        value: function hide() {
                           var _this$popup2;
                           if (this.container) {
                              this.container.hidden = true;
                           }
                           (_this$popup2 = this.popup) === null ||
                              _this$popup2 === void 0 ||
                              _this$popup2.forceHide();
                        },
                     },
                     {
                        key: "getElementsToTriggerPopup",
                        value: function getElementsToTriggerPopup() {
                           return this.container;
                        },
                     },
                     {
                        key: "addHighlightArea",
                        value: function addHighlightArea() {
                           var triggers = this.getElementsToTriggerPopup();
                           if (Array.isArray(triggers)) {
                              var _iterator4 =
                                    _createForOfIteratorHelper(triggers),
                                 _step4;
                              try {
                                 for (
                                    _iterator4.s();
                                    !(_step4 = _iterator4.n()).done;

                                 ) {
                                    var element = _step4.value;
                                    element.classList.add("highlightArea");
                                 }
                              } catch (err) {
                                 _iterator4.e(err);
                              } finally {
                                 _iterator4.f();
                              }
                           } else {
                              triggers.classList.add("highlightArea");
                           }
                        },
                     },
                     {
                        key: "_isEditable",
                        get: function get() {
                           return false;
                        },
                     },
                     {
                        key: "_editOnDoubleClick",
                        value: function _editOnDoubleClick() {
                           var _this2 = this;
                           if (!this._isEditable) {
                              return;
                           }
                           var mode = this.annotationEditorType,
                              editId = this.data.id;
                           this.container.addEventListener(
                              "dblclick",
                              function () {
                                 var _this2$linkService$ev;
                                 (_this2$linkService$ev =
                                    _this2.linkService.eventBus) === null ||
                                    _this2$linkService$ev === void 0 ||
                                    _this2$linkService$ev.dispatch(
                                       "switchannotationeditormode",
                                       {
                                          source: _this2,
                                          mode: mode,
                                          editId: editId,
                                       },
                                    );
                              },
                           );
                        },
                     },
                  ],
                  [
                     {
                        key: "_hasPopupData",
                        value: function _hasPopupData(_ref18) {
                           var titleObj = _ref18.titleObj,
                              contentsObj = _ref18.contentsObj,
                              richText = _ref18.richText;
                           return !!(
                              (titleObj !== null &&
                                 titleObj !== void 0 &&
                                 titleObj.str) ||
                              (contentsObj !== null &&
                                 contentsObj !== void 0 &&
                                 contentsObj.str) ||
                              (richText !== null &&
                                 richText !== void 0 &&
                                 richText.str)
                           );
                        },
                     },
                  ],
               );
            })();
            function _setRectEdited(rect) {
               var style = this.container.style,
                  _this$data = this.data,
                  currentRect = _this$data.rect,
                  rotation = _this$data.rotation,
                  _this$parent$viewport2 = this.parent.viewport.rawDims,
                  pageWidth = _this$parent$viewport2.pageWidth,
                  pageHeight = _this$parent$viewport2.pageHeight,
                  pageX = _this$parent$viewport2.pageX,
                  pageY = _this$parent$viewport2.pageY;
               currentRect === null ||
                  currentRect === void 0 ||
                  currentRect.splice.apply(
                     currentRect,
                     [0, 4].concat(_toConsumableArray(rect)),
                  );
               var _getRectDims9 = getRectDims(rect),
                  width = _getRectDims9.width,
                  height = _getRectDims9.height;
               style.left = "".concat(
                  (100 * (rect[0] - pageX)) / pageWidth,
                  "%",
               );
               style.top = "".concat(
                  (100 * (pageHeight - rect[3] + pageY)) / pageHeight,
                  "%",
               );
               if (rotation === 0) {
                  style.width = "".concat((100 * width) / pageWidth, "%");
                  style.height = "".concat((100 * height) / pageHeight, "%");
               } else {
                  this.setRotation(rotation);
               }
            }
            var _LinkAnnotationElement_brand = /*#__PURE__*/ new WeakSet();
            var LinkAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement2,
            ) {
               function LinkAnnotationElement(parameters) {
                  var _this3;
                  var options =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : null;
                  _classCallCheck(this, LinkAnnotationElement);
                  _this3 = _callSuper(this, LinkAnnotationElement, [
                     parameters,
                     {
                        isRenderable: true,
                        ignoreBorder: !!(
                           options !== null &&
                           options !== void 0 &&
                           options.ignoreBorder
                        ),
                        createQuadrilaterals: true,
                     },
                  ]);
                  _classPrivateMethodInitSpec(
                     _this3,
                     _LinkAnnotationElement_brand,
                  );
                  _this3.isTooltipOnly = parameters.data.isTooltipOnly;
                  return _this3;
               }
               _inherits(LinkAnnotationElement, _AnnotationElement2);
               return _createClass(LinkAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        var data = this.data,
                           linkService = this.linkService;
                        var link = document.createElement("a");
                        link.setAttribute("data-element-id", data.id);
                        var isBound = false;
                        if (data.url) {
                           linkService.addLinkAttributes(
                              link,
                              data.url,
                              data.newWindow,
                           );
                           isBound = true;
                        } else if (data.action) {
                           this._bindNamedAction(link, data.action);
                           isBound = true;
                        } else if (data.attachment) {
                           _assertClassBrand(
                              _LinkAnnotationElement_brand,
                              this,
                              _bindAttachment,
                           ).call(
                              this,
                              link,
                              data.attachment,
                              data.attachmentDest,
                           );
                           isBound = true;
                        } else if (data.setOCGState) {
                           _assertClassBrand(
                              _LinkAnnotationElement_brand,
                              this,
                              _bindSetOCGState,
                           ).call(this, link, data.setOCGState);
                           isBound = true;
                        } else if (data.dest) {
                           this._bindLink(link, data.dest);
                           isBound = true;
                        } else {
                           if (
                              data.actions &&
                              (data.actions.Action ||
                                 data.actions["Mouse Up"] ||
                                 data.actions["Mouse Down"]) &&
                              this.enableScripting &&
                              this.hasJSActions
                           ) {
                              this._bindJSAction(link, data);
                              isBound = true;
                           }
                           if (data.resetForm) {
                              this._bindResetFormAction(link, data.resetForm);
                              isBound = true;
                           } else if (this.isTooltipOnly && !isBound) {
                              this._bindLink(link, "");
                              isBound = true;
                           }
                        }
                        this.container.classList.add("linkAnnotation");
                        if (isBound) {
                           this.container.append(link);
                        }
                        return this.container;
                     },
                  },
                  {
                     key: "_bindLink",
                     value: function _bindLink(link, destination) {
                        var _this4 = this;
                        link.href =
                           this.linkService.getDestinationHash(destination);
                        link.onclick = function () {
                           if (destination) {
                              _this4.linkService.goToDestination(destination);
                           }
                           return false;
                        };
                        if (destination || destination === "") {
                           _assertClassBrand(
                              _LinkAnnotationElement_brand,
                              this,
                              _setInternalLink,
                           ).call(this);
                        }
                     },
                  },
                  {
                     key: "_bindNamedAction",
                     value: function _bindNamedAction(link, action) {
                        var _this5 = this;
                        link.href = this.linkService.getAnchorUrl("");
                        link.onclick = function () {
                           _this5.linkService.executeNamedAction(action);
                           return false;
                        };
                        _assertClassBrand(
                           _LinkAnnotationElement_brand,
                           this,
                           _setInternalLink,
                        ).call(this);
                     },
                  },
                  {
                     key: "_bindJSAction",
                     value: function _bindJSAction(link, data) {
                        var _this6 = this;
                        link.href = this.linkService.getAnchorUrl("");
                        var map = new Map([
                           ["Action", "onclick"],
                           ["Mouse Up", "onmouseup"],
                           ["Mouse Down", "onmousedown"],
                        ]);
                        var _loop = function _loop() {
                           var name = _Object$keys2[_i3];
                           var jsName = map.get(name);
                           if (!jsName) {
                              return 1; // continue
                           }
                           link[jsName] = function () {
                              var _this6$linkService$ev;
                              (_this6$linkService$ev =
                                 _this6.linkService.eventBus) === null ||
                                 _this6$linkService$ev === void 0 ||
                                 _this6$linkService$ev.dispatch(
                                    "dispatcheventinsandbox",
                                    {
                                       source: _this6,
                                       detail: { id: data.id, name: name },
                                    },
                                 );
                              return false;
                           };
                        };
                        for (
                           var _i3 = 0,
                              _Object$keys2 = Object.keys(data.actions);
                           _i3 < _Object$keys2.length;
                           _i3++
                        ) {
                           if (_loop()) continue;
                        }
                        if (!link.onclick) {
                           link.onclick = function () {
                              return false;
                           };
                        }
                        _assertClassBrand(
                           _LinkAnnotationElement_brand,
                           this,
                           _setInternalLink,
                        ).call(this);
                     },
                  },
                  {
                     key: "_bindResetFormAction",
                     value: function _bindResetFormAction(link, resetForm) {
                        var _this7 = this;
                        var otherClickAction = link.onclick;
                        if (!otherClickAction) {
                           link.href = this.linkService.getAnchorUrl("");
                        }
                        _assertClassBrand(
                           _LinkAnnotationElement_brand,
                           this,
                           _setInternalLink,
                        ).call(this);
                        if (!this._fieldObjects) {
                           (0, util.warn)(
                              '_bindResetFormAction - "resetForm" action not supported, ' +
                                 "ensure that the `fieldObjects` parameter is provided.",
                           );
                           if (!otherClickAction) {
                              link.onclick = function () {
                                 return false;
                              };
                           }
                           return;
                        }
                        link.onclick = function () {
                           otherClickAction === null ||
                              otherClickAction === void 0 ||
                              otherClickAction();
                           var resetFormFields = resetForm.fields,
                              resetFormRefs = resetForm.refs,
                              include = resetForm.include;
                           var allFields = [];
                           if (
                              resetFormFields.length !== 0 ||
                              resetFormRefs.length !== 0
                           ) {
                              var fieldIds = new Set(resetFormRefs);
                              var _iterator5 =
                                    _createForOfIteratorHelper(resetFormFields),
                                 _step5;
                              try {
                                 for (
                                    _iterator5.s();
                                    !(_step5 = _iterator5.n()).done;

                                 ) {
                                    var fieldName = _step5.value;
                                    var _fields =
                                       _this7._fieldObjects[fieldName] || [];
                                    var _iterator7 =
                                          _createForOfIteratorHelper(_fields),
                                       _step7;
                                    try {
                                       for (
                                          _iterator7.s();
                                          !(_step7 = _iterator7.n()).done;

                                       ) {
                                          var id = _step7.value.id;
                                          fieldIds.add(id);
                                       }
                                    } catch (err) {
                                       _iterator7.e(err);
                                    } finally {
                                       _iterator7.f();
                                    }
                                 }
                              } catch (err) {
                                 _iterator5.e(err);
                              } finally {
                                 _iterator5.f();
                              }
                              for (
                                 var _i4 = 0,
                                    _Object$values = Object.values(
                                       _this7._fieldObjects,
                                    );
                                 _i4 < _Object$values.length;
                                 _i4++
                              ) {
                                 var fields = _Object$values[_i4];
                                 var _iterator6 =
                                       _createForOfIteratorHelper(fields),
                                    _step6;
                                 try {
                                    for (
                                       _iterator6.s();
                                       !(_step6 = _iterator6.n()).done;

                                    ) {
                                       var field = _step6.value;
                                       if (fieldIds.has(field.id) === include) {
                                          allFields.push(field);
                                       }
                                    }
                                 } catch (err) {
                                    _iterator6.e(err);
                                 } finally {
                                    _iterator6.f();
                                 }
                              }
                           } else {
                              for (
                                 var _i5 = 0,
                                    _Object$values2 = Object.values(
                                       _this7._fieldObjects,
                                    );
                                 _i5 < _Object$values2.length;
                                 _i5++
                              ) {
                                 var _fields2 = _Object$values2[_i5];
                                 allFields.push.apply(
                                    allFields,
                                    _toConsumableArray(_fields2),
                                 );
                              }
                           }
                           var storage = _this7.annotationStorage;
                           var allIds = [];
                           for (
                              var _i6 = 0, _allFields = allFields;
                              _i6 < _allFields.length;
                              _i6++
                           ) {
                              var _field = _allFields[_i6];
                              var _id2 = _field.id;
                              allIds.push(_id2);
                              switch (_field.type) {
                                 case "text": {
                                    var value = _field.defaultValue || "";
                                    storage.setValue(_id2, { value: value });
                                    break;
                                 }
                                 case "checkbox":
                                 case "radiobutton": {
                                    var _value2 =
                                       _field.defaultValue ===
                                       _field.exportValues;
                                    storage.setValue(_id2, { value: _value2 });
                                    break;
                                 }
                                 case "combobox":
                                 case "listbox": {
                                    var _value3 = _field.defaultValue || "";
                                    storage.setValue(_id2, { value: _value3 });
                                    break;
                                 }
                                 default:
                                    continue;
                              }
                              var domElement = document.querySelector(
                                 '[data-element-id="'.concat(_id2, '"]'),
                              );
                              if (!domElement) {
                                 continue;
                              } else if (
                                 !GetElementsByNameSet.has(domElement)
                              ) {
                                 (0, util.warn)(
                                    "_bindResetFormAction - element not allowed: ".concat(
                                       _id2,
                                    ),
                                 );
                                 continue;
                              }
                              domElement.dispatchEvent(new Event("resetform"));
                           }
                           if (_this7.enableScripting) {
                              var _this7$linkService$ev;
                              (_this7$linkService$ev =
                                 _this7.linkService.eventBus) === null ||
                                 _this7$linkService$ev === void 0 ||
                                 _this7$linkService$ev.dispatch(
                                    "dispatcheventinsandbox",
                                    {
                                       source: _this7,
                                       detail: {
                                          id: "app",
                                          ids: allIds,
                                          name: "ResetForm",
                                       },
                                    },
                                 );
                           }
                           return false;
                        };
                     },
                  },
               ]);
            })(AnnotationElement);
            function _setInternalLink() {
               this.container.setAttribute("data-internal-link", "");
            }
            function _bindAttachment(link, attachment) {
               var _this22 = this;
               var dest =
                  arguments.length > 2 && arguments[2] !== undefined
                     ? arguments[2]
                     : null;
               link.href = this.linkService.getAnchorUrl("");
               link.onclick = function () {
                  var _this22$downloadManag;
                  (_this22$downloadManag = _this22.downloadManager) === null ||
                     _this22$downloadManag === void 0 ||
                     _this22$downloadManag.openOrDownloadData(
                        attachment.content,
                        attachment.filename,
                        dest,
                     );
                  return false;
               };
               _assertClassBrand(
                  _LinkAnnotationElement_brand,
                  this,
                  _setInternalLink,
               ).call(this);
            }
            function _bindSetOCGState(link, action) {
               var _this23 = this;
               link.href = this.linkService.getAnchorUrl("");
               link.onclick = function () {
                  _this23.linkService.executeSetOCGState(action);
                  return false;
               };
               _assertClassBrand(
                  _LinkAnnotationElement_brand,
                  this,
                  _setInternalLink,
               ).call(this);
            }
            var TextAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement3,
            ) {
               function TextAnnotationElement(parameters) {
                  _classCallCheck(this, TextAnnotationElement);
                  return _callSuper(this, TextAnnotationElement, [
                     parameters,
                     { isRenderable: true },
                  ]);
               }
               _inherits(TextAnnotationElement, _AnnotationElement3);
               return _createClass(TextAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        this.container.classList.add("textAnnotation");
                        var image = document.createElement("img");
                        image.src =
                           this.imageResourcesPath +
                           "annotation-" +
                           this.data.name.toLowerCase() +
                           ".svg";
                        image.setAttribute(
                           "data-l10n-id",
                           "pdfjs-text-annotation-type",
                        );
                        image.setAttribute(
                           "data-l10n-args",
                           JSON.stringify({ type: this.data.name }),
                        );
                        if (!this.data.popupRef && this.hasPopupData) {
                           this._createPopup();
                        }
                        this.container.append(image);
                        return this.container;
                     },
                  },
               ]);
            })(AnnotationElement);
            var WidgetAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement4,
            ) {
               function WidgetAnnotationElement() {
                  _classCallCheck(this, WidgetAnnotationElement);
                  return _callSuper(this, WidgetAnnotationElement, arguments);
               }
               _inherits(WidgetAnnotationElement, _AnnotationElement4);
               return _createClass(WidgetAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        return this.container;
                     },
                  },
                  {
                     key: "showElementAndHideCanvas",
                     value: function showElementAndHideCanvas(element) {
                        if (this.data.hasOwnCanvas) {
                           var _element$previousSibl;
                           if (
                              ((_element$previousSibl =
                                 element.previousSibling) === null ||
                              _element$previousSibl === void 0
                                 ? void 0
                                 : _element$previousSibl.nodeName) === "CANVAS"
                           ) {
                              element.previousSibling.hidden = true;
                           }
                           element.hidden = false;
                        }
                     },
                  },
                  {
                     key: "_getKeyModifier",
                     value: function _getKeyModifier(event) {
                        return util.FeatureTest.platform.isMac
                           ? event.metaKey
                           : event.ctrlKey;
                     },
                  },
                  {
                     key: "_setEventListener",
                     value: function _setEventListener(
                        element,
                        elementData,
                        baseName,
                        eventName,
                        valueGetter,
                     ) {
                        var _this8 = this;
                        if (baseName.includes("mouse")) {
                           element.addEventListener(baseName, function (event) {
                              var _this8$linkService$ev;
                              (_this8$linkService$ev =
                                 _this8.linkService.eventBus) === null ||
                                 _this8$linkService$ev === void 0 ||
                                 _this8$linkService$ev.dispatch(
                                    "dispatcheventinsandbox",
                                    {
                                       source: _this8,
                                       detail: {
                                          id: _this8.data.id,
                                          name: eventName,
                                          value: valueGetter(event),
                                          shift: event.shiftKey,
                                          modifier:
                                             _this8._getKeyModifier(event),
                                       },
                                    },
                                 );
                           });
                        } else {
                           element.addEventListener(baseName, function (event) {
                              var _this8$linkService$ev2;
                              if (baseName === "blur") {
                                 if (
                                    !elementData.focused ||
                                    !event.relatedTarget
                                 ) {
                                    return;
                                 }
                                 elementData.focused = false;
                              } else if (baseName === "focus") {
                                 if (elementData.focused) {
                                    return;
                                 }
                                 elementData.focused = true;
                              }
                              if (!valueGetter) {
                                 return;
                              }
                              (_this8$linkService$ev2 =
                                 _this8.linkService.eventBus) === null ||
                                 _this8$linkService$ev2 === void 0 ||
                                 _this8$linkService$ev2.dispatch(
                                    "dispatcheventinsandbox",
                                    {
                                       source: _this8,
                                       detail: {
                                          id: _this8.data.id,
                                          name: eventName,
                                          value: valueGetter(event),
                                       },
                                    },
                                 );
                           });
                        }
                     },
                  },
                  {
                     key: "_setEventListeners",
                     value: function _setEventListeners(
                        element,
                        elementData,
                        names,
                        getter,
                     ) {
                        var _iterator8 = _createForOfIteratorHelper(names),
                           _step8;
                        try {
                           for (
                              _iterator8.s();
                              !(_step8 = _iterator8.n()).done;

                           ) {
                              var _this$data$actions;
                              var _step8$value = _slicedToArray(
                                    _step8.value,
                                    2,
                                 ),
                                 baseName = _step8$value[0],
                                 eventName = _step8$value[1];
                              if (
                                 eventName === "Action" ||
                                 ((_this$data$actions = this.data.actions) !==
                                    null &&
                                    _this$data$actions !== void 0 &&
                                    _this$data$actions[eventName])
                              ) {
                                 var _this$data$actions2, _this$data$actions3;
                                 if (
                                    eventName === "Focus" ||
                                    eventName === "Blur"
                                 ) {
                                    elementData ||
                                       (elementData = { focused: false });
                                 }
                                 this._setEventListener(
                                    element,
                                    elementData,
                                    baseName,
                                    eventName,
                                    getter,
                                 );
                                 if (
                                    eventName === "Focus" &&
                                    !(
                                       (_this$data$actions2 =
                                          this.data.actions) !== null &&
                                       _this$data$actions2 !== void 0 &&
                                       _this$data$actions2.Blur
                                    )
                                 ) {
                                    this._setEventListener(
                                       element,
                                       elementData,
                                       "blur",
                                       "Blur",
                                       null,
                                    );
                                 } else if (
                                    eventName === "Blur" &&
                                    !(
                                       (_this$data$actions3 =
                                          this.data.actions) !== null &&
                                       _this$data$actions3 !== void 0 &&
                                       _this$data$actions3.Focus
                                    )
                                 ) {
                                    this._setEventListener(
                                       element,
                                       elementData,
                                       "focus",
                                       "Focus",
                                       null,
                                    );
                                 }
                              }
                           }
                        } catch (err) {
                           _iterator8.e(err);
                        } finally {
                           _iterator8.f();
                        }
                     },
                  },
                  {
                     key: "_setBackgroundColor",
                     value: function _setBackgroundColor(element) {
                        var color = this.data.backgroundColor || null;
                        element.style.backgroundColor =
                           color === null
                              ? "transparent"
                              : util.Util.makeHexColor(
                                   color[0],
                                   color[1],
                                   color[2],
                                );
                     },
                  },
                  {
                     key: "_setTextStyle",
                     value: function _setTextStyle(element) {
                        var TEXT_ALIGNMENT = ["left", "center", "right"];
                        var fontColor =
                           this.data.defaultAppearanceData.fontColor;
                        var fontSize =
                           this.data.defaultAppearanceData.fontSize ||
                           DEFAULT_FONT_SIZE;
                        var style = element.style;
                        var computedFontSize;
                        var BORDER_SIZE = 2;
                        var roundToOneDecimal = function roundToOneDecimal(x) {
                           return Math.round(10 * x) / 10;
                        };
                        if (this.data.multiLine) {
                           var height = Math.abs(
                              this.data.rect[3] -
                                 this.data.rect[1] -
                                 BORDER_SIZE,
                           );
                           var numberOfLines =
                              Math.round(
                                 height / (util.LINE_FACTOR * fontSize),
                              ) || 1;
                           var lineHeight = height / numberOfLines;
                           computedFontSize = Math.min(
                              fontSize,
                              roundToOneDecimal(lineHeight / util.LINE_FACTOR),
                           );
                        } else {
                           var _height = Math.abs(
                              this.data.rect[3] -
                                 this.data.rect[1] -
                                 BORDER_SIZE,
                           );
                           computedFontSize = Math.min(
                              fontSize,
                              roundToOneDecimal(_height / util.LINE_FACTOR),
                           );
                        }
                        style.fontSize = "calc(".concat(
                           computedFontSize,
                           "px * var(--scale-factor))",
                        );
                        style.color = util.Util.makeHexColor(
                           fontColor[0],
                           fontColor[1],
                           fontColor[2],
                        );
                        if (this.data.textAlignment !== null) {
                           style.textAlign =
                              TEXT_ALIGNMENT[this.data.textAlignment];
                        }
                     },
                  },
                  {
                     key: "_setRequired",
                     value: function _setRequired(element, isRequired) {
                        if (isRequired) {
                           element.setAttribute("required", true);
                        } else {
                           element.removeAttribute("required");
                        }
                        element.setAttribute("aria-required", isRequired);
                     },
                  },
               ]);
            })(AnnotationElement);
            var TextWidgetAnnotationElement = /*#__PURE__*/ (function (
               _WidgetAnnotationElem,
            ) {
               function TextWidgetAnnotationElement(parameters) {
                  _classCallCheck(this, TextWidgetAnnotationElement);
                  var isRenderable =
                     parameters.renderForms ||
                     parameters.data.hasOwnCanvas ||
                     (!parameters.data.hasAppearance &&
                        !!parameters.data.fieldValue);
                  return _callSuper(this, TextWidgetAnnotationElement, [
                     parameters,
                     { isRenderable: isRenderable },
                  ]);
               }
               _inherits(TextWidgetAnnotationElement, _WidgetAnnotationElem);
               return _createClass(TextWidgetAnnotationElement, [
                  {
                     key: "setPropertyOnSiblings",
                     value: function setPropertyOnSiblings(
                        base,
                        key,
                        value,
                        keyInStorage,
                     ) {
                        var storage = this.annotationStorage;
                        var _iterator9 = _createForOfIteratorHelper(
                              this._getElementsByName(base.name, base.id),
                           ),
                           _step9;
                        try {
                           for (
                              _iterator9.s();
                              !(_step9 = _iterator9.n()).done;

                           ) {
                              var element = _step9.value;
                              if (element.domElement) {
                                 element.domElement[key] = value;
                              }
                              storage.setValue(
                                 element.id,
                                 _defineProperty({}, keyInStorage, value),
                              );
                           }
                        } catch (err) {
                           _iterator9.e(err);
                        } finally {
                           _iterator9.f();
                        }
                     },
                  },
                  {
                     key: "render",
                     value: function render() {
                        var _this9 = this;
                        var storage = this.annotationStorage;
                        var id = this.data.id;
                        this.container.classList.add("textWidgetAnnotation");
                        var element = null;
                        if (this.renderForms) {
                           var _this$data$textConten;
                           var storedData = storage.getValue(id, {
                              value: this.data.fieldValue,
                           });
                           var textContent = storedData.value || "";
                           var maxLen = storage.getValue(id, {
                              charLimit: this.data.maxLen,
                           }).charLimit;
                           if (maxLen && textContent.length > maxLen) {
                              textContent = textContent.slice(0, maxLen);
                           }
                           var fieldFormattedValues =
                              storedData.formattedValue ||
                              ((_this$data$textConten =
                                 this.data.textContent) === null ||
                              _this$data$textConten === void 0
                                 ? void 0
                                 : _this$data$textConten.join("\n")) ||
                              null;
                           if (fieldFormattedValues && this.data.comb) {
                              fieldFormattedValues =
                                 fieldFormattedValues.replaceAll(/\s+/g, "");
                           }
                           var elementData = {
                              userValue: textContent,
                              formattedValue: fieldFormattedValues,
                              lastCommittedValue: null,
                              commitKey: 1,
                              focused: false,
                           };
                           if (this.data.multiLine) {
                              element = document.createElement("textarea");
                              element.textContent =
                                 fieldFormattedValues !== null &&
                                 fieldFormattedValues !== void 0
                                    ? fieldFormattedValues
                                    : textContent;
                              if (this.data.doNotScroll) {
                                 element.style.overflowY = "hidden";
                              }
                           } else {
                              element = document.createElement("input");
                              element.type = "text";
                              element.setAttribute(
                                 "value",
                                 fieldFormattedValues !== null &&
                                    fieldFormattedValues !== void 0
                                    ? fieldFormattedValues
                                    : textContent,
                              );
                              if (this.data.doNotScroll) {
                                 element.style.overflowX = "hidden";
                              }
                           }
                           if (this.data.hasOwnCanvas) {
                              element.hidden = true;
                           }
                           GetElementsByNameSet.add(element);
                           element.setAttribute("data-element-id", id);
                           element.disabled = this.data.readOnly;
                           element.name = this.data.fieldName;
                           element.tabIndex = DEFAULT_TAB_INDEX;
                           this._setRequired(element, this.data.required);
                           if (maxLen) {
                              element.maxLength = maxLen;
                           }
                           element.addEventListener("input", function (event) {
                              storage.setValue(id, {
                                 value: event.target.value,
                              });
                              _this9.setPropertyOnSiblings(
                                 element,
                                 "value",
                                 event.target.value,
                                 "value",
                              );
                              elementData.formattedValue = null;
                           });
                           element.addEventListener(
                              "resetform",
                              function (event) {
                                 var _this9$data$defaultFi;
                                 var defaultValue =
                                    (_this9$data$defaultFi =
                                       _this9.data.defaultFieldValue) !==
                                       null && _this9$data$defaultFi !== void 0
                                       ? _this9$data$defaultFi
                                       : "";
                                 element.value = elementData.userValue =
                                    defaultValue;
                                 elementData.formattedValue = null;
                              },
                           );
                           var blurListener = function blurListener(event) {
                              var formattedValue = elementData.formattedValue;
                              if (
                                 formattedValue !== null &&
                                 formattedValue !== undefined
                              ) {
                                 event.target.value = formattedValue;
                              }
                              event.target.scrollLeft = 0;
                           };
                           if (this.enableScripting && this.hasJSActions) {
                              var _this$data$actions4;
                              element.addEventListener(
                                 "focus",
                                 function (event) {
                                    var _this9$data$actions;
                                    if (elementData.focused) {
                                       return;
                                    }
                                    var target = event.target;
                                    if (elementData.userValue) {
                                       target.value = elementData.userValue;
                                    }
                                    elementData.lastCommittedValue =
                                       target.value;
                                    elementData.commitKey = 1;
                                    if (
                                       !(
                                          (_this9$data$actions =
                                             _this9.data.actions) !== null &&
                                          _this9$data$actions !== void 0 &&
                                          _this9$data$actions.Focus
                                       )
                                    ) {
                                       elementData.focused = true;
                                    }
                                 },
                              );
                              element.addEventListener(
                                 "updatefromsandbox",
                                 function (jsEvent) {
                                    _this9.showElementAndHideCanvas(
                                       jsEvent.target,
                                    );
                                    var actions = {
                                       value: function value(event) {
                                          var _event$detail$value;
                                          elementData.userValue =
                                             (_event$detail$value =
                                                event.detail.value) !== null &&
                                             _event$detail$value !== void 0
                                                ? _event$detail$value
                                                : "";
                                          storage.setValue(id, {
                                             value: elementData.userValue.toString(),
                                          });
                                          event.target.value =
                                             elementData.userValue;
                                       },
                                       formattedValue: function formattedValue(
                                          event,
                                       ) {
                                          var formattedValue =
                                             event.detail.formattedValue;
                                          elementData.formattedValue =
                                             formattedValue;
                                          if (
                                             formattedValue !== null &&
                                             formattedValue !== undefined &&
                                             event.target !==
                                                document.activeElement
                                          ) {
                                             event.target.value =
                                                formattedValue;
                                          }
                                          storage.setValue(id, {
                                             formattedValue: formattedValue,
                                          });
                                       },
                                       selRange: function selRange(event) {
                                          var _event$target;
                                          (_event$target =
                                             event.target).setSelectionRange.apply(
                                             _event$target,
                                             _toConsumableArray(
                                                event.detail.selRange,
                                             ),
                                          );
                                       },
                                       charLimit: function charLimit(event) {
                                          var _this9$linkService$ev;
                                          var charLimit =
                                             event.detail.charLimit;
                                          var target = event.target;
                                          if (charLimit === 0) {
                                             target.removeAttribute(
                                                "maxLength",
                                             );
                                             return;
                                          }
                                          target.setAttribute(
                                             "maxLength",
                                             charLimit,
                                          );
                                          var value = elementData.userValue;
                                          if (
                                             !value ||
                                             value.length <= charLimit
                                          ) {
                                             return;
                                          }
                                          value = value.slice(0, charLimit);
                                          target.value = elementData.userValue =
                                             value;
                                          storage.setValue(id, {
                                             value: value,
                                          });
                                          (_this9$linkService$ev =
                                             _this9.linkService.eventBus) ===
                                             null ||
                                             _this9$linkService$ev === void 0 ||
                                             _this9$linkService$ev.dispatch(
                                                "dispatcheventinsandbox",
                                                {
                                                   source: _this9,
                                                   detail: {
                                                      id: id,
                                                      name: "Keystroke",
                                                      value: value,
                                                      willCommit: true,
                                                      commitKey: 1,
                                                      selStart:
                                                         target.selectionStart,
                                                      selEnd:
                                                         target.selectionEnd,
                                                   },
                                                },
                                             );
                                       },
                                    };
                                    _this9._dispatchEventFromSandbox(
                                       actions,
                                       jsEvent,
                                    );
                                 },
                              );
                              element.addEventListener(
                                 "keydown",
                                 function (event) {
                                    var _this9$linkService$ev2;
                                    elementData.commitKey = 1;
                                    var commitKey = -1;
                                    if (event.key === "Escape") {
                                       commitKey = 0;
                                    } else if (
                                       event.key === "Enter" &&
                                       !_this9.data.multiLine
                                    ) {
                                       commitKey = 2;
                                    } else if (event.key === "Tab") {
                                       elementData.commitKey = 3;
                                    }
                                    if (commitKey === -1) {
                                       return;
                                    }
                                    var value = event.target.value;
                                    if (
                                       elementData.lastCommittedValue === value
                                    ) {
                                       return;
                                    }
                                    elementData.lastCommittedValue = value;
                                    elementData.userValue = value;
                                    (_this9$linkService$ev2 =
                                       _this9.linkService.eventBus) === null ||
                                       _this9$linkService$ev2 === void 0 ||
                                       _this9$linkService$ev2.dispatch(
                                          "dispatcheventinsandbox",
                                          {
                                             source: _this9,
                                             detail: {
                                                id: id,
                                                name: "Keystroke",
                                                value: value,
                                                willCommit: true,
                                                commitKey: commitKey,
                                                selStart:
                                                   event.target.selectionStart,
                                                selEnd:
                                                   event.target.selectionEnd,
                                             },
                                          },
                                       );
                                 },
                              );
                              var _blurListener = blurListener;
                              blurListener = null;
                              element.addEventListener(
                                 "blur",
                                 function (event) {
                                    var _this9$data$actions2;
                                    if (
                                       !elementData.focused ||
                                       !event.relatedTarget
                                    ) {
                                       return;
                                    }
                                    if (
                                       !(
                                          (_this9$data$actions2 =
                                             _this9.data.actions) !== null &&
                                          _this9$data$actions2 !== void 0 &&
                                          _this9$data$actions2.Blur
                                       )
                                    ) {
                                       elementData.focused = false;
                                    }
                                    var value = event.target.value;
                                    elementData.userValue = value;
                                    if (
                                       elementData.lastCommittedValue !== value
                                    ) {
                                       var _this9$linkService$ev3;
                                       (_this9$linkService$ev3 =
                                          _this9.linkService.eventBus) ===
                                          null ||
                                          _this9$linkService$ev3 === void 0 ||
                                          _this9$linkService$ev3.dispatch(
                                             "dispatcheventinsandbox",
                                             {
                                                source: _this9,
                                                detail: {
                                                   id: id,
                                                   name: "Keystroke",
                                                   value: value,
                                                   willCommit: true,
                                                   commitKey:
                                                      elementData.commitKey,
                                                   selStart:
                                                      event.target
                                                         .selectionStart,
                                                   selEnd:
                                                      event.target.selectionEnd,
                                                },
                                             },
                                          );
                                    }
                                    _blurListener(event);
                                 },
                              );
                              if (
                                 (_this$data$actions4 = this.data.actions) !==
                                    null &&
                                 _this$data$actions4 !== void 0 &&
                                 _this$data$actions4.Keystroke
                              ) {
                                 element.addEventListener(
                                    "beforeinput",
                                    function (event) {
                                       var _this9$linkService$ev4;
                                       elementData.lastCommittedValue = null;
                                       var data = event.data,
                                          target = event.target;
                                       var value = target.value,
                                          selectionStart =
                                             target.selectionStart,
                                          selectionEnd = target.selectionEnd;
                                       var selStart = selectionStart,
                                          selEnd = selectionEnd;
                                       switch (event.inputType) {
                                          case "deleteWordBackward": {
                                             var match = value
                                                .substring(0, selectionStart)
                                                .match(/\w*[^\w]*$/);
                                             if (match) {
                                                selStart -= match[0].length;
                                             }
                                             break;
                                          }
                                          case "deleteWordForward": {
                                             var _match = value
                                                .substring(selectionStart)
                                                .match(/^[^\w]*\w*/);
                                             if (_match) {
                                                selEnd += _match[0].length;
                                             }
                                             break;
                                          }
                                          case "deleteContentBackward":
                                             if (
                                                selectionStart === selectionEnd
                                             ) {
                                                selStart -= 1;
                                             }
                                             break;
                                          case "deleteContentForward":
                                             if (
                                                selectionStart === selectionEnd
                                             ) {
                                                selEnd += 1;
                                             }
                                             break;
                                       }
                                       event.preventDefault();
                                       (_this9$linkService$ev4 =
                                          _this9.linkService.eventBus) ===
                                          null ||
                                          _this9$linkService$ev4 === void 0 ||
                                          _this9$linkService$ev4.dispatch(
                                             "dispatcheventinsandbox",
                                             {
                                                source: _this9,
                                                detail: {
                                                   id: id,
                                                   name: "Keystroke",
                                                   value: value,
                                                   change: data || "",
                                                   willCommit: false,
                                                   selStart: selStart,
                                                   selEnd: selEnd,
                                                },
                                             },
                                          );
                                    },
                                 );
                              }
                              this._setEventListeners(
                                 element,
                                 elementData,
                                 [
                                    ["focus", "Focus"],
                                    ["blur", "Blur"],
                                    ["mousedown", "Mouse Down"],
                                    ["mouseenter", "Mouse Enter"],
                                    ["mouseleave", "Mouse Exit"],
                                    ["mouseup", "Mouse Up"],
                                 ],
                                 function (event) {
                                    return event.target.value;
                                 },
                              );
                           }
                           if (blurListener) {
                              element.addEventListener("blur", blurListener);
                           }
                           if (this.data.comb) {
                              var fieldWidth =
                                 this.data.rect[2] - this.data.rect[0];
                              var combWidth = fieldWidth / maxLen;
                              element.classList.add("comb");
                              element.style.letterSpacing = "calc(".concat(
                                 combWidth,
                                 "px * var(--scale-factor) - 1ch)",
                              );
                           }
                        } else {
                           element = document.createElement("div");
                           element.textContent = this.data.fieldValue;
                           element.style.verticalAlign = "middle";
                           element.style.display = "table-cell";
                           if (this.data.hasOwnCanvas) {
                              element.hidden = true;
                           }
                        }
                        this._setTextStyle(element);
                        this._setBackgroundColor(element);
                        this._setDefaultPropertiesFromJS(element);
                        this.container.append(element);
                        return this.container;
                     },
                  },
               ]);
            })(WidgetAnnotationElement);
            var SignatureWidgetAnnotationElement = /*#__PURE__*/ (function (
               _WidgetAnnotationElem2,
            ) {
               function SignatureWidgetAnnotationElement(parameters) {
                  _classCallCheck(this, SignatureWidgetAnnotationElement);
                  return _callSuper(this, SignatureWidgetAnnotationElement, [
                     parameters,
                     { isRenderable: !!parameters.data.hasOwnCanvas },
                  ]);
               }
               _inherits(
                  SignatureWidgetAnnotationElement,
                  _WidgetAnnotationElem2,
               );
               return _createClass(SignatureWidgetAnnotationElement);
            })(WidgetAnnotationElement);
            var CheckboxWidgetAnnotationElement = /*#__PURE__*/ (function (
               _WidgetAnnotationElem3,
            ) {
               function CheckboxWidgetAnnotationElement(parameters) {
                  _classCallCheck(this, CheckboxWidgetAnnotationElement);
                  return _callSuper(this, CheckboxWidgetAnnotationElement, [
                     parameters,
                     { isRenderable: parameters.renderForms },
                  ]);
               }
               _inherits(
                  CheckboxWidgetAnnotationElement,
                  _WidgetAnnotationElem3,
               );
               return _createClass(CheckboxWidgetAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        var _this0 = this;
                        var storage = this.annotationStorage;
                        var data = this.data;
                        var id = data.id;
                        var value = storage.getValue(id, {
                           value: data.exportValue === data.fieldValue,
                        }).value;
                        if (typeof value === "string") {
                           value = value !== "Off";
                           storage.setValue(id, { value: value });
                        }
                        this.container.classList.add(
                           "buttonWidgetAnnotation",
                           "checkBox",
                        );
                        var element = document.createElement("input");
                        GetElementsByNameSet.add(element);
                        element.setAttribute("data-element-id", id);
                        element.disabled = data.readOnly;
                        this._setRequired(element, this.data.required);
                        element.type = "checkbox";
                        element.name = data.fieldName;
                        if (value) {
                           element.setAttribute("checked", true);
                        }
                        element.setAttribute("exportValue", data.exportValue);
                        element.tabIndex = DEFAULT_TAB_INDEX;
                        element.addEventListener("change", function (event) {
                           var _event$target2 = event.target,
                              name = _event$target2.name,
                              checked = _event$target2.checked;
                           var _iterator0 = _createForOfIteratorHelper(
                                 _this0._getElementsByName(name, id),
                              ),
                              _step0;
                           try {
                              for (
                                 _iterator0.s();
                                 !(_step0 = _iterator0.n()).done;

                              ) {
                                 var checkbox = _step0.value;
                                 var curChecked =
                                    checked &&
                                    checkbox.exportValue === data.exportValue;
                                 if (checkbox.domElement) {
                                    checkbox.domElement.checked = curChecked;
                                 }
                                 storage.setValue(checkbox.id, {
                                    value: curChecked,
                                 });
                              }
                           } catch (err) {
                              _iterator0.e(err);
                           } finally {
                              _iterator0.f();
                           }
                           storage.setValue(id, { value: checked });
                        });
                        element.addEventListener("resetform", function (event) {
                           var defaultValue = data.defaultFieldValue || "Off";
                           event.target.checked =
                              defaultValue === data.exportValue;
                        });
                        if (this.enableScripting && this.hasJSActions) {
                           element.addEventListener(
                              "updatefromsandbox",
                              function (jsEvent) {
                                 var actions = {
                                    value: function value(event) {
                                       event.target.checked =
                                          event.detail.value !== "Off";
                                       storage.setValue(id, {
                                          value: event.target.checked,
                                       });
                                    },
                                 };
                                 _this0._dispatchEventFromSandbox(
                                    actions,
                                    jsEvent,
                                 );
                              },
                           );
                           this._setEventListeners(
                              element,
                              null,
                              [
                                 ["change", "Validate"],
                                 ["change", "Action"],
                                 ["focus", "Focus"],
                                 ["blur", "Blur"],
                                 ["mousedown", "Mouse Down"],
                                 ["mouseenter", "Mouse Enter"],
                                 ["mouseleave", "Mouse Exit"],
                                 ["mouseup", "Mouse Up"],
                              ],
                              function (event) {
                                 return event.target.checked;
                              },
                           );
                        }
                        this._setBackgroundColor(element);
                        this._setDefaultPropertiesFromJS(element);
                        this.container.append(element);
                        return this.container;
                     },
                  },
               ]);
            })(WidgetAnnotationElement);
            var RadioButtonWidgetAnnotationElement = /*#__PURE__*/ (function (
               _WidgetAnnotationElem4,
            ) {
               function RadioButtonWidgetAnnotationElement(parameters) {
                  _classCallCheck(this, RadioButtonWidgetAnnotationElement);
                  return _callSuper(this, RadioButtonWidgetAnnotationElement, [
                     parameters,
                     { isRenderable: parameters.renderForms },
                  ]);
               }
               _inherits(
                  RadioButtonWidgetAnnotationElement,
                  _WidgetAnnotationElem4,
               );
               return _createClass(RadioButtonWidgetAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        var _this1 = this;
                        this.container.classList.add(
                           "buttonWidgetAnnotation",
                           "radioButton",
                        );
                        var storage = this.annotationStorage;
                        var data = this.data;
                        var id = data.id;
                        var value = storage.getValue(id, {
                           value: data.fieldValue === data.buttonValue,
                        }).value;
                        if (typeof value === "string") {
                           value = value !== data.buttonValue;
                           storage.setValue(id, { value: value });
                        }
                        if (value) {
                           var _iterator1 = _createForOfIteratorHelper(
                                 this._getElementsByName(data.fieldName, id),
                              ),
                              _step1;
                           try {
                              for (
                                 _iterator1.s();
                                 !(_step1 = _iterator1.n()).done;

                              ) {
                                 var radio = _step1.value;
                                 storage.setValue(radio.id, { value: false });
                              }
                           } catch (err) {
                              _iterator1.e(err);
                           } finally {
                              _iterator1.f();
                           }
                        }
                        var element = document.createElement("input");
                        GetElementsByNameSet.add(element);
                        element.setAttribute("data-element-id", id);
                        element.disabled = data.readOnly;
                        this._setRequired(element, this.data.required);
                        element.type = "radio";
                        element.name = data.fieldName;
                        if (value) {
                           element.setAttribute("checked", true);
                        }
                        element.tabIndex = DEFAULT_TAB_INDEX;
                        element.addEventListener("change", function (event) {
                           var _event$target3 = event.target,
                              name = _event$target3.name,
                              checked = _event$target3.checked;
                           var _iterator10 = _createForOfIteratorHelper(
                                 _this1._getElementsByName(name, id),
                              ),
                              _step10;
                           try {
                              for (
                                 _iterator10.s();
                                 !(_step10 = _iterator10.n()).done;

                              ) {
                                 var _radio = _step10.value;
                                 storage.setValue(_radio.id, { value: false });
                              }
                           } catch (err) {
                              _iterator10.e(err);
                           } finally {
                              _iterator10.f();
                           }
                           storage.setValue(id, { value: checked });
                        });
                        element.addEventListener("resetform", function (event) {
                           var defaultValue = data.defaultFieldValue;
                           event.target.checked =
                              defaultValue !== null &&
                              defaultValue !== undefined &&
                              defaultValue === data.buttonValue;
                        });
                        if (this.enableScripting && this.hasJSActions) {
                           var pdfButtonValue = data.buttonValue;
                           element.addEventListener(
                              "updatefromsandbox",
                              function (jsEvent) {
                                 var actions = {
                                    value: function value(event) {
                                       var checked =
                                          pdfButtonValue === event.detail.value;
                                       var _iterator11 =
                                             _createForOfIteratorHelper(
                                                _this1._getElementsByName(
                                                   event.target.name,
                                                ),
                                             ),
                                          _step11;
                                       try {
                                          for (
                                             _iterator11.s();
                                             !(_step11 = _iterator11.n()).done;

                                          ) {
                                             var _radio2 = _step11.value;
                                             var curChecked =
                                                checked && _radio2.id === id;
                                             if (_radio2.domElement) {
                                                _radio2.domElement.checked =
                                                   curChecked;
                                             }
                                             storage.setValue(_radio2.id, {
                                                value: curChecked,
                                             });
                                          }
                                       } catch (err) {
                                          _iterator11.e(err);
                                       } finally {
                                          _iterator11.f();
                                       }
                                    },
                                 };
                                 _this1._dispatchEventFromSandbox(
                                    actions,
                                    jsEvent,
                                 );
                              },
                           );
                           this._setEventListeners(
                              element,
                              null,
                              [
                                 ["change", "Validate"],
                                 ["change", "Action"],
                                 ["focus", "Focus"],
                                 ["blur", "Blur"],
                                 ["mousedown", "Mouse Down"],
                                 ["mouseenter", "Mouse Enter"],
                                 ["mouseleave", "Mouse Exit"],
                                 ["mouseup", "Mouse Up"],
                              ],
                              function (event) {
                                 return event.target.checked;
                              },
                           );
                        }
                        this._setBackgroundColor(element);
                        this._setDefaultPropertiesFromJS(element);
                        this.container.append(element);
                        return this.container;
                     },
                  },
               ]);
            })(WidgetAnnotationElement);
            var PushButtonWidgetAnnotationElement = /*#__PURE__*/ (function (
               _LinkAnnotationElemen,
            ) {
               function PushButtonWidgetAnnotationElement(parameters) {
                  _classCallCheck(this, PushButtonWidgetAnnotationElement);
                  return _callSuper(this, PushButtonWidgetAnnotationElement, [
                     parameters,
                     { ignoreBorder: parameters.data.hasAppearance },
                  ]);
               }
               _inherits(
                  PushButtonWidgetAnnotationElement,
                  _LinkAnnotationElemen,
               );
               return _createClass(PushButtonWidgetAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        var _this10 = this;
                        var container = _superPropGet(
                           PushButtonWidgetAnnotationElement,
                           "render",
                           this,
                           3,
                        )([]);
                        container.classList.add(
                           "buttonWidgetAnnotation",
                           "pushButton",
                        );
                        var linkElement = container.lastChild;
                        if (
                           this.enableScripting &&
                           this.hasJSActions &&
                           linkElement
                        ) {
                           this._setDefaultPropertiesFromJS(linkElement);
                           linkElement.addEventListener(
                              "updatefromsandbox",
                              function (jsEvent) {
                                 _this10._dispatchEventFromSandbox({}, jsEvent);
                              },
                           );
                        }
                        return container;
                     },
                  },
               ]);
            })(LinkAnnotationElement);
            var ChoiceWidgetAnnotationElement = /*#__PURE__*/ (function (
               _WidgetAnnotationElem5,
            ) {
               function ChoiceWidgetAnnotationElement(parameters) {
                  _classCallCheck(this, ChoiceWidgetAnnotationElement);
                  return _callSuper(this, ChoiceWidgetAnnotationElement, [
                     parameters,
                     { isRenderable: parameters.renderForms },
                  ]);
               }
               _inherits(ChoiceWidgetAnnotationElement, _WidgetAnnotationElem5);
               return _createClass(ChoiceWidgetAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        var _this11 = this;
                        this.container.classList.add("choiceWidgetAnnotation");
                        var storage = this.annotationStorage;
                        var id = this.data.id;
                        var storedData = storage.getValue(id, {
                           value: this.data.fieldValue,
                        });
                        var selectElement = document.createElement("select");
                        GetElementsByNameSet.add(selectElement);
                        selectElement.setAttribute("data-element-id", id);
                        selectElement.disabled = this.data.readOnly;
                        this._setRequired(selectElement, this.data.required);
                        selectElement.name = this.data.fieldName;
                        selectElement.tabIndex = DEFAULT_TAB_INDEX;
                        var addAnEmptyEntry =
                           this.data.combo && this.data.options.length > 0;
                        if (!this.data.combo) {
                           selectElement.size = this.data.options.length;
                           if (this.data.multiSelect) {
                              selectElement.multiple = true;
                           }
                        }
                        selectElement.addEventListener(
                           "resetform",
                           function (event) {
                              var defaultValue = _this11.data.defaultFieldValue;
                              var _iterator12 = _createForOfIteratorHelper(
                                    selectElement.options,
                                 ),
                                 _step12;
                              try {
                                 for (
                                    _iterator12.s();
                                    !(_step12 = _iterator12.n()).done;

                                 ) {
                                    var option = _step12.value;
                                    option.selected =
                                       option.value === defaultValue;
                                 }
                              } catch (err) {
                                 _iterator12.e(err);
                              } finally {
                                 _iterator12.f();
                              }
                           },
                        );
                        var _iterator13 = _createForOfIteratorHelper(
                              this.data.options,
                           ),
                           _step13;
                        try {
                           for (
                              _iterator13.s();
                              !(_step13 = _iterator13.n()).done;

                           ) {
                              var option = _step13.value;
                              var optionElement =
                                 document.createElement("option");
                              optionElement.textContent = option.displayValue;
                              optionElement.value = option.exportValue;
                              if (
                                 storedData.value.includes(option.exportValue)
                              ) {
                                 optionElement.setAttribute("selected", true);
                                 addAnEmptyEntry = false;
                              }
                              selectElement.append(optionElement);
                           }
                        } catch (err) {
                           _iterator13.e(err);
                        } finally {
                           _iterator13.f();
                        }
                        var _removeEmptyEntry = null;
                        if (addAnEmptyEntry) {
                           var noneOptionElement =
                              document.createElement("option");
                           noneOptionElement.value = " ";
                           noneOptionElement.setAttribute("hidden", true);
                           noneOptionElement.setAttribute("selected", true);
                           selectElement.prepend(noneOptionElement);
                           _removeEmptyEntry = function removeEmptyEntry() {
                              noneOptionElement.remove();
                              selectElement.removeEventListener(
                                 "input",
                                 _removeEmptyEntry,
                              );
                              _removeEmptyEntry = null;
                           };
                           selectElement.addEventListener(
                              "input",
                              _removeEmptyEntry,
                           );
                        }
                        var getValue = function getValue(isExport) {
                           var name = isExport ? "value" : "textContent";
                           var options = selectElement.options,
                              multiple = selectElement.multiple;
                           if (!multiple) {
                              return options.selectedIndex === -1
                                 ? null
                                 : options[options.selectedIndex][name];
                           }
                           return Array.prototype.filter
                              .call(options, function (option) {
                                 return option.selected;
                              })
                              .map(function (option) {
                                 return option[name];
                              });
                        };
                        var selectedValues = getValue(false);
                        var getItems = function getItems(event) {
                           var options = event.target.options;
                           return Array.prototype.map.call(
                              options,
                              function (option) {
                                 return {
                                    displayValue: option.textContent,
                                    exportValue: option.value,
                                 };
                              },
                           );
                        };
                        if (this.enableScripting && this.hasJSActions) {
                           selectElement.addEventListener(
                              "updatefromsandbox",
                              function (jsEvent) {
                                 var actions = {
                                    value: function value(event) {
                                       var _removeEmptyEntry2;
                                       (_removeEmptyEntry2 =
                                          _removeEmptyEntry) === null ||
                                          _removeEmptyEntry2 === void 0 ||
                                          _removeEmptyEntry2();
                                       var value = event.detail.value;
                                       var values = new Set(
                                          Array.isArray(value)
                                             ? value
                                             : [value],
                                       );
                                       var _iterator14 =
                                             _createForOfIteratorHelper(
                                                selectElement.options,
                                             ),
                                          _step14;
                                       try {
                                          for (
                                             _iterator14.s();
                                             !(_step14 = _iterator14.n()).done;

                                          ) {
                                             var option = _step14.value;
                                             option.selected = values.has(
                                                option.value,
                                             );
                                          }
                                       } catch (err) {
                                          _iterator14.e(err);
                                       } finally {
                                          _iterator14.f();
                                       }
                                       storage.setValue(id, {
                                          value: getValue(true),
                                       });
                                       selectedValues = getValue(false);
                                    },
                                    multipleSelection:
                                       function multipleSelection(event) {
                                          selectElement.multiple = true;
                                       },
                                    remove: function remove(event) {
                                       var options = selectElement.options;
                                       var index = event.detail.remove;
                                       options[index].selected = false;
                                       selectElement.remove(index);
                                       if (options.length > 0) {
                                          var i =
                                             Array.prototype.findIndex.call(
                                                options,
                                                function (option) {
                                                   return option.selected;
                                                },
                                             );
                                          if (i === -1) {
                                             options[0].selected = true;
                                          }
                                       }
                                       storage.setValue(id, {
                                          value: getValue(true),
                                          items: getItems(event),
                                       });
                                       selectedValues = getValue(false);
                                    },
                                    clear: function clear(event) {
                                       while (selectElement.length !== 0) {
                                          selectElement.remove(0);
                                       }
                                       storage.setValue(id, {
                                          value: null,
                                          items: [],
                                       });
                                       selectedValues = getValue(false);
                                    },
                                    insert: function insert(event) {
                                       var _event$detail$insert =
                                             event.detail.insert,
                                          index = _event$detail$insert.index,
                                          displayValue =
                                             _event$detail$insert.displayValue,
                                          exportValue =
                                             _event$detail$insert.exportValue;
                                       var selectChild =
                                          selectElement.children[index];
                                       var optionElement =
                                          document.createElement("option");
                                       optionElement.textContent = displayValue;
                                       optionElement.value = exportValue;
                                       if (selectChild) {
                                          selectChild.before(optionElement);
                                       } else {
                                          selectElement.append(optionElement);
                                       }
                                       storage.setValue(id, {
                                          value: getValue(true),
                                          items: getItems(event),
                                       });
                                       selectedValues = getValue(false);
                                    },
                                    items: function items(event) {
                                       var items = event.detail.items;
                                       while (selectElement.length !== 0) {
                                          selectElement.remove(0);
                                       }
                                       var _iterator15 =
                                             _createForOfIteratorHelper(items),
                                          _step15;
                                       try {
                                          for (
                                             _iterator15.s();
                                             !(_step15 = _iterator15.n()).done;

                                          ) {
                                             var item = _step15.value;
                                             var displayValue =
                                                   item.displayValue,
                                                exportValue = item.exportValue;
                                             var optionElement =
                                                document.createElement(
                                                   "option",
                                                );
                                             optionElement.textContent =
                                                displayValue;
                                             optionElement.value = exportValue;
                                             selectElement.append(
                                                optionElement,
                                             );
                                          }
                                       } catch (err) {
                                          _iterator15.e(err);
                                       } finally {
                                          _iterator15.f();
                                       }
                                       if (selectElement.options.length > 0) {
                                          selectElement.options[0].selected = true;
                                       }
                                       storage.setValue(id, {
                                          value: getValue(true),
                                          items: getItems(event),
                                       });
                                       selectedValues = getValue(false);
                                    },
                                    indices: function indices(event) {
                                       var indices = new Set(
                                          event.detail.indices,
                                       );
                                       var _iterator16 =
                                             _createForOfIteratorHelper(
                                                event.target.options,
                                             ),
                                          _step16;
                                       try {
                                          for (
                                             _iterator16.s();
                                             !(_step16 = _iterator16.n()).done;

                                          ) {
                                             var option = _step16.value;
                                             option.selected = indices.has(
                                                option.index,
                                             );
                                          }
                                       } catch (err) {
                                          _iterator16.e(err);
                                       } finally {
                                          _iterator16.f();
                                       }
                                       storage.setValue(id, {
                                          value: getValue(true),
                                       });
                                       selectedValues = getValue(false);
                                    },
                                    editable: function editable(event) {
                                       event.target.disabled =
                                          !event.detail.editable;
                                    },
                                 };
                                 _this11._dispatchEventFromSandbox(
                                    actions,
                                    jsEvent,
                                 );
                              },
                           );
                           selectElement.addEventListener(
                              "input",
                              function (event) {
                                 var _this11$linkService$e;
                                 var exportValue = getValue(true);
                                 var change = getValue(false);
                                 storage.setValue(id, { value: exportValue });
                                 event.preventDefault();
                                 (_this11$linkService$e =
                                    _this11.linkService.eventBus) === null ||
                                    _this11$linkService$e === void 0 ||
                                    _this11$linkService$e.dispatch(
                                       "dispatcheventinsandbox",
                                       {
                                          source: _this11,
                                          detail: {
                                             id: id,
                                             name: "Keystroke",
                                             value: selectedValues,
                                             change: change,
                                             changeEx: exportValue,
                                             willCommit: false,
                                             commitKey: 1,
                                             keyDown: false,
                                          },
                                       },
                                    );
                              },
                           );
                           this._setEventListeners(
                              selectElement,
                              null,
                              [
                                 ["focus", "Focus"],
                                 ["blur", "Blur"],
                                 ["mousedown", "Mouse Down"],
                                 ["mouseenter", "Mouse Enter"],
                                 ["mouseleave", "Mouse Exit"],
                                 ["mouseup", "Mouse Up"],
                                 ["input", "Action"],
                                 ["input", "Validate"],
                              ],
                              function (event) {
                                 return event.target.value;
                              },
                           );
                        } else {
                           selectElement.addEventListener(
                              "input",
                              function (event) {
                                 storage.setValue(id, {
                                    value: getValue(true),
                                 });
                              },
                           );
                        }
                        if (this.data.combo) {
                           this._setTextStyle(selectElement);
                        } else {
                        }
                        this._setBackgroundColor(selectElement);
                        this._setDefaultPropertiesFromJS(selectElement);
                        this.container.append(selectElement);
                        return this.container;
                     },
                  },
               ]);
            })(WidgetAnnotationElement);
            var PopupAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement5,
            ) {
               function PopupAnnotationElement(parameters) {
                  var _this12;
                  _classCallCheck(this, PopupAnnotationElement);
                  var data = parameters.data,
                     elements = parameters.elements;
                  _this12 = _callSuper(this, PopupAnnotationElement, [
                     parameters,
                     { isRenderable: AnnotationElement._hasPopupData(data) },
                  ]);
                  _this12.elements = elements;
                  return _this12;
               }
               _inherits(PopupAnnotationElement, _AnnotationElement5);
               return _createClass(PopupAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        this.container.classList.add("popupAnnotation");
                        var popup = new PopupElement({
                           container: this.container,
                           color: this.data.color,
                           titleObj: this.data.titleObj,
                           modificationDate: this.data.modificationDate,
                           contentsObj: this.data.contentsObj,
                           richText: this.data.richText,
                           rect: this.data.rect,
                           parentRect: this.data.parentRect || null,
                           parent: this.parent,
                           elements: this.elements,
                           open: this.data.open,
                        });
                        var elementIds = [];
                        var _iterator17 = _createForOfIteratorHelper(
                              this.elements,
                           ),
                           _step17;
                        try {
                           for (
                              _iterator17.s();
                              !(_step17 = _iterator17.n()).done;

                           ) {
                              var element = _step17.value;
                              element.popup = popup;
                              elementIds.push(element.data.id);
                              element.addHighlightArea();
                           }
                        } catch (err) {
                           _iterator17.e(err);
                        } finally {
                           _iterator17.f();
                        }
                        this.container.setAttribute(
                           "aria-controls",
                           elementIds
                              .map(function (id) {
                                 return ""
                                    .concat(util.AnnotationPrefix)
                                    .concat(id);
                              })
                              .join(","),
                        );
                        return this.container;
                     },
                  },
               ]);
            })(AnnotationElement);
            var _boundKeyDown = /*#__PURE__*/ new WeakMap();
            var _boundHide = /*#__PURE__*/ new WeakMap();
            var _boundShow = /*#__PURE__*/ new WeakMap();
            var _boundToggle = /*#__PURE__*/ new WeakMap();
            var _color = /*#__PURE__*/ new WeakMap();
            var _container = /*#__PURE__*/ new WeakMap();
            var _contentsObj = /*#__PURE__*/ new WeakMap();
            var _dateObj = /*#__PURE__*/ new WeakMap();
            var _elements = /*#__PURE__*/ new WeakMap();
            var _parent = /*#__PURE__*/ new WeakMap();
            var _parentRect = /*#__PURE__*/ new WeakMap();
            var _pinned = /*#__PURE__*/ new WeakMap();
            var _popup = /*#__PURE__*/ new WeakMap();
            var _rect = /*#__PURE__*/ new WeakMap();
            var _richText = /*#__PURE__*/ new WeakMap();
            var _titleObj = /*#__PURE__*/ new WeakMap();
            var _wasVisible = /*#__PURE__*/ new WeakMap();
            var _PopupElement_brand = /*#__PURE__*/ new WeakSet();
            var PopupElement = /*#__PURE__*/ (function () {
               function PopupElement(_ref19) {
                  var container = _ref19.container,
                     color = _ref19.color,
                     elements = _ref19.elements,
                     titleObj = _ref19.titleObj,
                     modificationDate = _ref19.modificationDate,
                     contentsObj = _ref19.contentsObj,
                     richText = _ref19.richText,
                     parent = _ref19.parent,
                     rect = _ref19.rect,
                     parentRect = _ref19.parentRect,
                     open = _ref19.open;
                  _classCallCheck(this, PopupElement);
                  _classPrivateMethodInitSpec(this, _PopupElement_brand);
                  _classPrivateFieldInitSpec(
                     this,
                     _boundKeyDown,
                     _assertClassBrand(
                        _PopupElement_brand,
                        this,
                        _keyDown,
                     ).bind(this),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundHide,
                     _assertClassBrand(_PopupElement_brand, this, _hide).bind(
                        this,
                     ),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundShow,
                     _assertClassBrand(_PopupElement_brand, this, _show).bind(
                        this,
                     ),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundToggle,
                     _assertClassBrand(_PopupElement_brand, this, _toggle).bind(
                        this,
                     ),
                  );
                  _classPrivateFieldInitSpec(this, _color, null);
                  _classPrivateFieldInitSpec(this, _container, null);
                  _classPrivateFieldInitSpec(this, _contentsObj, null);
                  _classPrivateFieldInitSpec(this, _dateObj, null);
                  _classPrivateFieldInitSpec(this, _elements, null);
                  _classPrivateFieldInitSpec(this, _parent, null);
                  _classPrivateFieldInitSpec(this, _parentRect, null);
                  _classPrivateFieldInitSpec(this, _pinned, false);
                  _classPrivateFieldInitSpec(this, _popup, null);
                  _classPrivateFieldInitSpec(this, _rect, null);
                  _classPrivateFieldInitSpec(this, _richText, null);
                  _classPrivateFieldInitSpec(this, _titleObj, null);
                  _classPrivateFieldInitSpec(this, _wasVisible, false);
                  _classPrivateFieldSet(_container, this, container);
                  _classPrivateFieldSet(_titleObj, this, titleObj);
                  _classPrivateFieldSet(_contentsObj, this, contentsObj);
                  _classPrivateFieldSet(_richText, this, richText);
                  _classPrivateFieldSet(_parent, this, parent);
                  _classPrivateFieldSet(_color, this, color);
                  _classPrivateFieldSet(_rect, this, rect);
                  _classPrivateFieldSet(_parentRect, this, parentRect);
                  _classPrivateFieldSet(_elements, this, elements);
                  _classPrivateFieldSet(
                     _dateObj,
                     this,
                     display_utils.PDFDateString.toDateObject(modificationDate),
                  );
                  this.trigger = elements.flatMap(function (e) {
                     return e.getElementsToTriggerPopup();
                  });
                  var _iterator18 = _createForOfIteratorHelper(this.trigger),
                     _step18;
                  try {
                     for (
                        _iterator18.s();
                        !(_step18 = _iterator18.n()).done;

                     ) {
                        var element = _step18.value;
                        element.addEventListener(
                           "click",
                           _classPrivateFieldGet(_boundToggle, this),
                        );
                        element.addEventListener(
                           "mouseenter",
                           _classPrivateFieldGet(_boundShow, this),
                        );
                        element.addEventListener(
                           "mouseleave",
                           _classPrivateFieldGet(_boundHide, this),
                        );
                        element.classList.add("popupTriggerArea");
                     }
                  } catch (err) {
                     _iterator18.e(err);
                  } finally {
                     _iterator18.f();
                  }
                  var _iterator19 = _createForOfIteratorHelper(elements),
                     _step19;
                  try {
                     for (
                        _iterator19.s();
                        !(_step19 = _iterator19.n()).done;

                     ) {
                        var _element$container;
                        var _element = _step19.value;
                        (_element$container = _element.container) === null ||
                           _element$container === void 0 ||
                           _element$container.addEventListener(
                              "keydown",
                              _classPrivateFieldGet(_boundKeyDown, this),
                           );
                     }
                  } catch (err) {
                     _iterator19.e(err);
                  } finally {
                     _iterator19.f();
                  }
                  _classPrivateFieldGet(_container, this).hidden = true;
                  if (open) {
                     _assertClassBrand(_PopupElement_brand, this, _toggle).call(
                        this,
                     );
                  }
               }
               return _createClass(PopupElement, [
                  {
                     key: "render",
                     value: function render() {
                        if (_classPrivateFieldGet(_popup, this)) {
                           return;
                        }
                        var _classPrivateFieldGet2 = _classPrivateFieldGet(
                              _parent,
                              this,
                           ),
                           view = _classPrivateFieldGet2.page.view,
                           _classPrivateFieldGet3 =
                              _classPrivateFieldGet2.viewport.rawDims,
                           pageWidth = _classPrivateFieldGet3.pageWidth,
                           pageHeight = _classPrivateFieldGet3.pageHeight,
                           pageX = _classPrivateFieldGet3.pageX,
                           pageY = _classPrivateFieldGet3.pageY;
                        var popup = _classPrivateFieldSet(
                           _popup,
                           this,
                           document.createElement("div"),
                        );
                        popup.className = "popup";
                        if (_classPrivateFieldGet(_color, this)) {
                           var _util$Util;
                           var baseColor = (popup.style.outlineColor =
                              (_util$Util = util.Util).makeHexColor.apply(
                                 _util$Util,
                                 _toConsumableArray(
                                    _classPrivateFieldGet(_color, this),
                                 ),
                              ));
                           if (
                              CSS.supports(
                                 "background-color",
                                 "color-mix(in srgb, red 30%, white)",
                              )
                           ) {
                              popup.style.backgroundColor =
                                 "color-mix(in srgb, ".concat(
                                    baseColor,
                                    " 30%, white)",
                                 );
                           } else {
                              var _util$Util2;
                              var BACKGROUND_ENLIGHT = 0.7;
                              popup.style.backgroundColor = (_util$Util2 =
                                 util.Util).makeHexColor.apply(
                                 _util$Util2,
                                 _toConsumableArray(
                                    _classPrivateFieldGet(_color, this).map(
                                       function (c) {
                                          return Math.floor(
                                             BACKGROUND_ENLIGHT * (255 - c) + c,
                                          );
                                       },
                                    ),
                                 ),
                              );
                           }
                        }
                        var header = document.createElement("span");
                        header.className = "header";
                        var title = document.createElement("h1");
                        header.append(title);
                        var _classPrivateFieldGet4 = _classPrivateFieldGet(
                           _titleObj,
                           this,
                        );
                        title.dir = _classPrivateFieldGet4.dir;
                        title.textContent = _classPrivateFieldGet4.str;
                        popup.append(header);
                        if (_classPrivateFieldGet(_dateObj, this)) {
                           var modificationDate =
                              document.createElement("span");
                           modificationDate.classList.add("popupDate");
                           modificationDate.setAttribute(
                              "data-l10n-id",
                              "pdfjs-annotation-date-string",
                           );
                           modificationDate.setAttribute(
                              "data-l10n-args",
                              JSON.stringify({
                                 date: _classPrivateFieldGet(
                                    _dateObj,
                                    this,
                                 ).toLocaleDateString(),
                                 time: _classPrivateFieldGet(
                                    _dateObj,
                                    this,
                                 ).toLocaleTimeString(),
                              }),
                           );
                           header.append(modificationDate);
                        }
                        var contentsObj = _classPrivateFieldGet(
                           _contentsObj,
                           this,
                        );
                        var richText = _classPrivateFieldGet(_richText, this);
                        if (
                           richText !== null &&
                           richText !== void 0 &&
                           richText.str &&
                           (!(
                              contentsObj !== null &&
                              contentsObj !== void 0 &&
                              contentsObj.str
                           ) ||
                              contentsObj.str === richText.str)
                        ) {
                           xfa_layer.XfaLayer.render({
                              xfaHtml: richText.html,
                              intent: "richText",
                              div: popup,
                           });
                           popup.lastChild.classList.add(
                              "richText",
                              "popupContent",
                           );
                        } else {
                           var contents = this._formatContents(contentsObj);
                           popup.append(contents);
                        }
                        var useParentRect = !!_classPrivateFieldGet(
                           _parentRect,
                           this,
                        );
                        var rect = useParentRect
                           ? _classPrivateFieldGet(_parentRect, this)
                           : _classPrivateFieldGet(_rect, this);
                        var _iterator20 = _createForOfIteratorHelper(
                              _classPrivateFieldGet(_elements, this),
                           ),
                           _step20;
                        try {
                           for (
                              _iterator20.s();
                              !(_step20 = _iterator20.n()).done;

                           ) {
                              var element = _step20.value;
                              if (
                                 !rect ||
                                 util.Util.intersect(
                                    element.data.rect,
                                    rect,
                                 ) !== null
                              ) {
                                 rect = element.data.rect;
                                 useParentRect = true;
                                 break;
                              }
                           }
                        } catch (err) {
                           _iterator20.e(err);
                        } finally {
                           _iterator20.f();
                        }
                        var normalizedRect = util.Util.normalizeRect([
                           rect[0],
                           view[3] - rect[1] + view[1],
                           rect[2],
                           view[3] - rect[3] + view[1],
                        ]);
                        var HORIZONTAL_SPACE_AFTER_ANNOTATION = 5;
                        var parentWidth = useParentRect
                           ? rect[2] -
                             rect[0] +
                             HORIZONTAL_SPACE_AFTER_ANNOTATION
                           : 0;
                        var popupLeft = normalizedRect[0] + parentWidth;
                        var popupTop = normalizedRect[1];
                        var _classPrivateFieldGet5 = _classPrivateFieldGet(
                              _container,
                              this,
                           ),
                           style = _classPrivateFieldGet5.style;
                        style.left = "".concat(
                           (100 * (popupLeft - pageX)) / pageWidth,
                           "%",
                        );
                        style.top = "".concat(
                           (100 * (popupTop - pageY)) / pageHeight,
                           "%",
                        );
                        _classPrivateFieldGet(_container, this).append(popup);
                     },
                  },
                  {
                     key: "_formatContents",
                     value: function _formatContents(_ref20) {
                        var str = _ref20.str,
                           dir = _ref20.dir;
                        var p = document.createElement("p");
                        p.classList.add("popupContent");
                        p.dir = dir;
                        var lines = str.split(/(?:\r\n?|\n)/);
                        for (var i = 0, ii = lines.length; i < ii; ++i) {
                           var line = lines[i];
                           p.append(document.createTextNode(line));
                           if (i < ii - 1) {
                              p.append(document.createElement("br"));
                           }
                        }
                        return p;
                     },
                  },
                  {
                     key: "forceHide",
                     value: function forceHide() {
                        _classPrivateFieldSet(
                           _wasVisible,
                           this,
                           this.isVisible,
                        );
                        if (!_classPrivateFieldGet(_wasVisible, this)) {
                           return;
                        }
                        _classPrivateFieldGet(_container, this).hidden = true;
                     },
                  },
                  {
                     key: "maybeShow",
                     value: function maybeShow() {
                        if (!_classPrivateFieldGet(_wasVisible, this)) {
                           return;
                        }
                        _classPrivateFieldSet(_wasVisible, this, false);
                        _classPrivateFieldGet(_container, this).hidden = false;
                     },
                  },
                  {
                     key: "isVisible",
                     get: function get() {
                        return (
                           _classPrivateFieldGet(_container, this).hidden ===
                           false
                        );
                     },
                  },
               ]);
            })();
            function _keyDown(event) {
               if (
                  event.altKey ||
                  event.shiftKey ||
                  event.ctrlKey ||
                  event.metaKey
               ) {
                  return;
               }
               if (
                  event.key === "Enter" ||
                  (event.key === "Escape" &&
                     _classPrivateFieldGet(_pinned, this))
               ) {
                  _assertClassBrand(_PopupElement_brand, this, _toggle).call(
                     this,
                  );
               }
            }
            function _toggle() {
               _classPrivateFieldSet(
                  _pinned,
                  this,
                  !_classPrivateFieldGet(_pinned, this),
               );
               if (_classPrivateFieldGet(_pinned, this)) {
                  _assertClassBrand(_PopupElement_brand, this, _show).call(
                     this,
                  );
                  _classPrivateFieldGet(_container, this).addEventListener(
                     "click",
                     _classPrivateFieldGet(_boundToggle, this),
                  );
                  _classPrivateFieldGet(_container, this).addEventListener(
                     "keydown",
                     _classPrivateFieldGet(_boundKeyDown, this),
                  );
               } else {
                  _assertClassBrand(_PopupElement_brand, this, _hide).call(
                     this,
                  );
                  _classPrivateFieldGet(_container, this).removeEventListener(
                     "click",
                     _classPrivateFieldGet(_boundToggle, this),
                  );
                  _classPrivateFieldGet(_container, this).removeEventListener(
                     "keydown",
                     _classPrivateFieldGet(_boundKeyDown, this),
                  );
               }
            }
            function _show() {
               if (!_classPrivateFieldGet(_popup, this)) {
                  this.render();
               }
               if (!this.isVisible) {
                  _classPrivateFieldGet(_container, this).hidden = false;
                  _classPrivateFieldGet(_container, this).style.zIndex =
                     parseInt(
                        _classPrivateFieldGet(_container, this).style.zIndex,
                     ) + 1000;
               } else if (_classPrivateFieldGet(_pinned, this)) {
                  _classPrivateFieldGet(_container, this).classList.add(
                     "focused",
                  );
               }
            }
            function _hide() {
               _classPrivateFieldGet(_container, this).classList.remove(
                  "focused",
               );
               if (_classPrivateFieldGet(_pinned, this) || !this.isVisible) {
                  return;
               }
               _classPrivateFieldGet(_container, this).hidden = true;
               _classPrivateFieldGet(_container, this).style.zIndex =
                  parseInt(
                     _classPrivateFieldGet(_container, this).style.zIndex,
                  ) - 1000;
            }
            var _FreeTextAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement6,
            ) {
               function _FreeTextAnnotationElement(parameters) {
                  var _this13;
                  _classCallCheck(this, _FreeTextAnnotationElement);
                  _this13 = _callSuper(this, _FreeTextAnnotationElement, [
                     parameters,
                     { isRenderable: true, ignoreBorder: true },
                  ]);
                  _this13.textContent = parameters.data.textContent;
                  _this13.textPosition = parameters.data.textPosition;
                  _this13.annotationEditorType =
                     util.AnnotationEditorType.FREETEXT;
                  return _this13;
               }
               _inherits(_FreeTextAnnotationElement, _AnnotationElement6);
               return _createClass(_FreeTextAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        this.container.classList.add("freeTextAnnotation");
                        if (this.textContent) {
                           var content = document.createElement("div");
                           content.classList.add("annotationTextContent");
                           content.setAttribute("role", "comment");
                           var _iterator21 = _createForOfIteratorHelper(
                                 this.textContent,
                              ),
                              _step21;
                           try {
                              for (
                                 _iterator21.s();
                                 !(_step21 = _iterator21.n()).done;

                              ) {
                                 var line = _step21.value;
                                 var lineSpan = document.createElement("span");
                                 lineSpan.textContent = line;
                                 content.append(lineSpan);
                              }
                           } catch (err) {
                              _iterator21.e(err);
                           } finally {
                              _iterator21.f();
                           }
                           this.container.append(content);
                        }
                        if (!this.data.popupRef && this.hasPopupData) {
                           this._createPopup();
                        }
                        this._editOnDoubleClick();
                        return this.container;
                     },
                  },
                  {
                     key: "_isEditable",
                     get: function get() {
                        return this.data.hasOwnCanvas;
                     },
                  },
               ]);
            })(AnnotationElement);
            var _line = /*#__PURE__*/ new WeakMap();
            var LineAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement7,
            ) {
               function LineAnnotationElement(parameters) {
                  var _this14;
                  _classCallCheck(this, LineAnnotationElement);
                  _this14 = _callSuper(this, LineAnnotationElement, [
                     parameters,
                     { isRenderable: true, ignoreBorder: true },
                  ]);
                  _classPrivateFieldInitSpec(_this14, _line, null);
                  return _this14;
               }
               _inherits(LineAnnotationElement, _AnnotationElement7);
               return _createClass(LineAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        this.container.classList.add("lineAnnotation");
                        var data = this.data;
                        var _getRectDims3 = getRectDims(data.rect),
                           width = _getRectDims3.width,
                           height = _getRectDims3.height;
                        var svg = this.svgFactory.create(width, height, true);
                        var line = _classPrivateFieldSet(
                           _line,
                           this,
                           this.svgFactory.createElement("svg:line"),
                        );
                        line.setAttribute(
                           "x1",
                           data.rect[2] - data.lineCoordinates[0],
                        );
                        line.setAttribute(
                           "y1",
                           data.rect[3] - data.lineCoordinates[1],
                        );
                        line.setAttribute(
                           "x2",
                           data.rect[2] - data.lineCoordinates[2],
                        );
                        line.setAttribute(
                           "y2",
                           data.rect[3] - data.lineCoordinates[3],
                        );
                        line.setAttribute(
                           "stroke-width",
                           data.borderStyle.width || 1,
                        );
                        line.setAttribute("stroke", "transparent");
                        line.setAttribute("fill", "transparent");
                        svg.append(line);
                        this.container.append(svg);
                        if (!data.popupRef && this.hasPopupData) {
                           this._createPopup();
                        }
                        return this.container;
                     },
                  },
                  {
                     key: "getElementsToTriggerPopup",
                     value: function getElementsToTriggerPopup() {
                        return _classPrivateFieldGet(_line, this);
                     },
                  },
                  {
                     key: "addHighlightArea",
                     value: function addHighlightArea() {
                        this.container.classList.add("highlightArea");
                     },
                  },
               ]);
            })(AnnotationElement);
            var _square = /*#__PURE__*/ new WeakMap();
            var SquareAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement8,
            ) {
               function SquareAnnotationElement(parameters) {
                  var _this15;
                  _classCallCheck(this, SquareAnnotationElement);
                  _this15 = _callSuper(this, SquareAnnotationElement, [
                     parameters,
                     { isRenderable: true, ignoreBorder: true },
                  ]);
                  _classPrivateFieldInitSpec(_this15, _square, null);
                  return _this15;
               }
               _inherits(SquareAnnotationElement, _AnnotationElement8);
               return _createClass(SquareAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        this.container.classList.add("squareAnnotation");
                        var data = this.data;
                        var _getRectDims4 = getRectDims(data.rect),
                           width = _getRectDims4.width,
                           height = _getRectDims4.height;
                        var svg = this.svgFactory.create(width, height, true);
                        var borderWidth = data.borderStyle.width;
                        var square = _classPrivateFieldSet(
                           _square,
                           this,
                           this.svgFactory.createElement("svg:rect"),
                        );
                        square.setAttribute("x", borderWidth / 2);
                        square.setAttribute("y", borderWidth / 2);
                        square.setAttribute("width", width - borderWidth);
                        square.setAttribute("height", height - borderWidth);
                        square.setAttribute("stroke-width", borderWidth || 1);
                        square.setAttribute("stroke", "transparent");
                        square.setAttribute("fill", "transparent");
                        svg.append(square);
                        this.container.append(svg);
                        if (!data.popupRef && this.hasPopupData) {
                           this._createPopup();
                        }
                        return this.container;
                     },
                  },
                  {
                     key: "getElementsToTriggerPopup",
                     value: function getElementsToTriggerPopup() {
                        return _classPrivateFieldGet(_square, this);
                     },
                  },
                  {
                     key: "addHighlightArea",
                     value: function addHighlightArea() {
                        this.container.classList.add("highlightArea");
                     },
                  },
               ]);
            })(AnnotationElement);
            var _circle = /*#__PURE__*/ new WeakMap();
            var CircleAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement9,
            ) {
               function CircleAnnotationElement(parameters) {
                  var _this16;
                  _classCallCheck(this, CircleAnnotationElement);
                  _this16 = _callSuper(this, CircleAnnotationElement, [
                     parameters,
                     { isRenderable: true, ignoreBorder: true },
                  ]);
                  _classPrivateFieldInitSpec(_this16, _circle, null);
                  return _this16;
               }
               _inherits(CircleAnnotationElement, _AnnotationElement9);
               return _createClass(CircleAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        this.container.classList.add("circleAnnotation");
                        var data = this.data;
                        var _getRectDims5 = getRectDims(data.rect),
                           width = _getRectDims5.width,
                           height = _getRectDims5.height;
                        var svg = this.svgFactory.create(width, height, true);
                        var borderWidth = data.borderStyle.width;
                        var circle = _classPrivateFieldSet(
                           _circle,
                           this,
                           this.svgFactory.createElement("svg:ellipse"),
                        );
                        circle.setAttribute("cx", width / 2);
                        circle.setAttribute("cy", height / 2);
                        circle.setAttribute("rx", width / 2 - borderWidth / 2);
                        circle.setAttribute("ry", height / 2 - borderWidth / 2);
                        circle.setAttribute("stroke-width", borderWidth || 1);
                        circle.setAttribute("stroke", "transparent");
                        circle.setAttribute("fill", "transparent");
                        svg.append(circle);
                        this.container.append(svg);
                        if (!data.popupRef && this.hasPopupData) {
                           this._createPopup();
                        }
                        return this.container;
                     },
                  },
                  {
                     key: "getElementsToTriggerPopup",
                     value: function getElementsToTriggerPopup() {
                        return _classPrivateFieldGet(_circle, this);
                     },
                  },
                  {
                     key: "addHighlightArea",
                     value: function addHighlightArea() {
                        this.container.classList.add("highlightArea");
                     },
                  },
               ]);
            })(AnnotationElement);
            var _polyline = /*#__PURE__*/ new WeakMap();
            var PolylineAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement0,
            ) {
               function PolylineAnnotationElement(parameters) {
                  var _this17;
                  _classCallCheck(this, PolylineAnnotationElement);
                  _this17 = _callSuper(this, PolylineAnnotationElement, [
                     parameters,
                     { isRenderable: true, ignoreBorder: true },
                  ]);
                  _classPrivateFieldInitSpec(_this17, _polyline, null);
                  _this17.containerClassName = "polylineAnnotation";
                  _this17.svgElementName = "svg:polyline";
                  return _this17;
               }
               _inherits(PolylineAnnotationElement, _AnnotationElement0);
               return _createClass(PolylineAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        this.container.classList.add(this.containerClassName);
                        var data = this.data;
                        var _getRectDims6 = getRectDims(data.rect),
                           width = _getRectDims6.width,
                           height = _getRectDims6.height;
                        var svg = this.svgFactory.create(width, height, true);
                        var points = [];
                        var _iterator22 = _createForOfIteratorHelper(
                              data.vertices,
                           ),
                           _step22;
                        try {
                           for (
                              _iterator22.s();
                              !(_step22 = _iterator22.n()).done;

                           ) {
                              var coordinate = _step22.value;
                              var x = coordinate.x - data.rect[0];
                              var y = data.rect[3] - coordinate.y;
                              points.push(x + "," + y);
                           }
                        } catch (err) {
                           _iterator22.e(err);
                        } finally {
                           _iterator22.f();
                        }
                        points = points.join(" ");
                        var polyline = _classPrivateFieldSet(
                           _polyline,
                           this,
                           this.svgFactory.createElement(this.svgElementName),
                        );
                        polyline.setAttribute("points", points);
                        polyline.setAttribute(
                           "stroke-width",
                           data.borderStyle.width || 1,
                        );
                        polyline.setAttribute("stroke", "transparent");
                        polyline.setAttribute("fill", "transparent");
                        svg.append(polyline);
                        this.container.append(svg);
                        if (!data.popupRef && this.hasPopupData) {
                           this._createPopup();
                        }
                        return this.container;
                     },
                  },
                  {
                     key: "getElementsToTriggerPopup",
                     value: function getElementsToTriggerPopup() {
                        return _classPrivateFieldGet(_polyline, this);
                     },
                  },
                  {
                     key: "addHighlightArea",
                     value: function addHighlightArea() {
                        this.container.classList.add("highlightArea");
                     },
                  },
               ]);
            })(AnnotationElement);
            var PolygonAnnotationElement = /*#__PURE__*/ (function (
               _PolylineAnnotationEl,
            ) {
               function PolygonAnnotationElement(parameters) {
                  var _this18;
                  _classCallCheck(this, PolygonAnnotationElement);
                  _this18 = _callSuper(this, PolygonAnnotationElement, [
                     parameters,
                  ]);
                  _this18.containerClassName = "polygonAnnotation";
                  _this18.svgElementName = "svg:polygon";
                  return _this18;
               }
               _inherits(PolygonAnnotationElement, _PolylineAnnotationEl);
               return _createClass(PolygonAnnotationElement);
            })(PolylineAnnotationElement);
            var CaretAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement1,
            ) {
               function CaretAnnotationElement(parameters) {
                  _classCallCheck(this, CaretAnnotationElement);
                  return _callSuper(this, CaretAnnotationElement, [
                     parameters,
                     { isRenderable: true, ignoreBorder: true },
                  ]);
               }
               _inherits(CaretAnnotationElement, _AnnotationElement1);
               return _createClass(CaretAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        this.container.classList.add("caretAnnotation");
                        if (!this.data.popupRef && this.hasPopupData) {
                           this._createPopup();
                        }
                        return this.container;
                     },
                  },
               ]);
            })(AnnotationElement);
            var _polylines = /*#__PURE__*/ new WeakMap();
            var _InkAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement10,
            ) {
               function _InkAnnotationElement(parameters) {
                  var _this19;
                  _classCallCheck(this, _InkAnnotationElement);
                  _this19 = _callSuper(this, _InkAnnotationElement, [
                     parameters,
                     { isRenderable: true, ignoreBorder: true },
                  ]);
                  _classPrivateFieldInitSpec(_this19, _polylines, []);
                  _this19.containerClassName = "inkAnnotation";
                  _this19.svgElementName = "svg:polyline";
                  _this19.annotationEditorType = util.AnnotationEditorType.INK;
                  return _this19;
               }
               _inherits(_InkAnnotationElement, _AnnotationElement10);
               return _createClass(_InkAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        this.container.classList.add(this.containerClassName);
                        var data = this.data;
                        var _getRectDims7 = getRectDims(data.rect),
                           width = _getRectDims7.width,
                           height = _getRectDims7.height;
                        var svg = this.svgFactory.create(width, height, true);
                        var _iterator23 = _createForOfIteratorHelper(
                              data.inkLists,
                           ),
                           _step23;
                        try {
                           for (
                              _iterator23.s();
                              !(_step23 = _iterator23.n()).done;

                           ) {
                              var inkList = _step23.value;
                              var points = [];
                              var _iterator24 =
                                    _createForOfIteratorHelper(inkList),
                                 _step24;
                              try {
                                 for (
                                    _iterator24.s();
                                    !(_step24 = _iterator24.n()).done;

                                 ) {
                                    var coordinate = _step24.value;
                                    var x = coordinate.x - data.rect[0];
                                    var y = data.rect[3] - coordinate.y;
                                    points.push("".concat(x, ",").concat(y));
                                 }
                              } catch (err) {
                                 _iterator24.e(err);
                              } finally {
                                 _iterator24.f();
                              }
                              points = points.join(" ");
                              var polyline = this.svgFactory.createElement(
                                 this.svgElementName,
                              );
                              _classPrivateFieldGet(_polylines, this).push(
                                 polyline,
                              );
                              polyline.setAttribute("points", points);
                              polyline.setAttribute(
                                 "stroke-width",
                                 data.borderStyle.width || 1,
                              );
                              polyline.setAttribute("stroke", "transparent");
                              polyline.setAttribute("fill", "transparent");
                              if (!data.popupRef && this.hasPopupData) {
                                 this._createPopup();
                              }
                              svg.append(polyline);
                           }
                        } catch (err) {
                           _iterator23.e(err);
                        } finally {
                           _iterator23.f();
                        }
                        this.container.append(svg);
                        return this.container;
                     },
                  },
                  {
                     key: "getElementsToTriggerPopup",
                     value: function getElementsToTriggerPopup() {
                        return _classPrivateFieldGet(_polylines, this);
                     },
                  },
                  {
                     key: "addHighlightArea",
                     value: function addHighlightArea() {
                        this.container.classList.add("highlightArea");
                     },
                  },
               ]);
            })(AnnotationElement);
            var HighlightAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement11,
            ) {
               function HighlightAnnotationElement(parameters) {
                  _classCallCheck(this, HighlightAnnotationElement);
                  return _callSuper(this, HighlightAnnotationElement, [
                     parameters,
                     {
                        isRenderable: true,
                        ignoreBorder: true,
                        createQuadrilaterals: true,
                     },
                  ]);
               }
               _inherits(HighlightAnnotationElement, _AnnotationElement11);
               return _createClass(HighlightAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        if (!this.data.popupRef && this.hasPopupData) {
                           this._createPopup();
                        }
                        this.container.classList.add("highlightAnnotation");
                        return this.container;
                     },
                  },
               ]);
            })(AnnotationElement);
            var UnderlineAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement12,
            ) {
               function UnderlineAnnotationElement(parameters) {
                  _classCallCheck(this, UnderlineAnnotationElement);
                  return _callSuper(this, UnderlineAnnotationElement, [
                     parameters,
                     {
                        isRenderable: true,
                        ignoreBorder: true,
                        createQuadrilaterals: true,
                     },
                  ]);
               }
               _inherits(UnderlineAnnotationElement, _AnnotationElement12);
               return _createClass(UnderlineAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        if (!this.data.popupRef && this.hasPopupData) {
                           this._createPopup();
                        }
                        this.container.classList.add("underlineAnnotation");
                        return this.container;
                     },
                  },
               ]);
            })(AnnotationElement);
            var SquigglyAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement13,
            ) {
               function SquigglyAnnotationElement(parameters) {
                  _classCallCheck(this, SquigglyAnnotationElement);
                  return _callSuper(this, SquigglyAnnotationElement, [
                     parameters,
                     {
                        isRenderable: true,
                        ignoreBorder: true,
                        createQuadrilaterals: true,
                     },
                  ]);
               }
               _inherits(SquigglyAnnotationElement, _AnnotationElement13);
               return _createClass(SquigglyAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        if (!this.data.popupRef && this.hasPopupData) {
                           this._createPopup();
                        }
                        this.container.classList.add("squigglyAnnotation");
                        return this.container;
                     },
                  },
               ]);
            })(AnnotationElement);
            var StrikeOutAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement14,
            ) {
               function StrikeOutAnnotationElement(parameters) {
                  _classCallCheck(this, StrikeOutAnnotationElement);
                  return _callSuper(this, StrikeOutAnnotationElement, [
                     parameters,
                     {
                        isRenderable: true,
                        ignoreBorder: true,
                        createQuadrilaterals: true,
                     },
                  ]);
               }
               _inherits(StrikeOutAnnotationElement, _AnnotationElement14);
               return _createClass(StrikeOutAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        if (!this.data.popupRef && this.hasPopupData) {
                           this._createPopup();
                        }
                        this.container.classList.add("strikeoutAnnotation");
                        return this.container;
                     },
                  },
               ]);
            })(AnnotationElement);
            var _StampAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement15,
            ) {
               function _StampAnnotationElement(parameters) {
                  _classCallCheck(this, _StampAnnotationElement);
                  return _callSuper(this, _StampAnnotationElement, [
                     parameters,
                     { isRenderable: true, ignoreBorder: true },
                  ]);
               }
               _inherits(_StampAnnotationElement, _AnnotationElement15);
               return _createClass(_StampAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        this.container.classList.add("stampAnnotation");
                        if (!this.data.popupRef && this.hasPopupData) {
                           this._createPopup();
                        }
                        return this.container;
                     },
                  },
               ]);
            })(AnnotationElement);
            var _trigger = /*#__PURE__*/ new WeakMap();
            var _FileAttachmentAnnotationElement_brand =
               /*#__PURE__*/ new WeakSet();
            var FileAttachmentAnnotationElement = /*#__PURE__*/ (function (
               _AnnotationElement16,
            ) {
               function FileAttachmentAnnotationElement(parameters) {
                  var _this20$linkService$e;
                  var _this20;
                  _classCallCheck(this, FileAttachmentAnnotationElement);
                  _this20 = _callSuper(this, FileAttachmentAnnotationElement, [
                     parameters,
                     { isRenderable: true },
                  ]);
                  _classPrivateMethodInitSpec(
                     _this20,
                     _FileAttachmentAnnotationElement_brand,
                  );
                  _classPrivateFieldInitSpec(_this20, _trigger, null);
                  var _this20$data$file = _this20.data.file,
                     filename = _this20$data$file.filename,
                     content = _this20$data$file.content;
                  _this20.filename = (0, display_utils.getFilenameFromUrl)(
                     filename,
                     true,
                  );
                  _this20.content = content;
                  (_this20$linkService$e = _this20.linkService.eventBus) ===
                     null ||
                     _this20$linkService$e === void 0 ||
                     _this20$linkService$e.dispatch(
                        "fileattachmentannotation",
                        {
                           source: _this20,
                           filename: filename,
                           content: content,
                        },
                     );
                  return _this20;
               }
               _inherits(FileAttachmentAnnotationElement, _AnnotationElement16);
               return _createClass(FileAttachmentAnnotationElement, [
                  {
                     key: "render",
                     value: function render() {
                        var _this21 = this;
                        this.container.classList.add(
                           "fileAttachmentAnnotation",
                        );
                        var container = this.container,
                           data = this.data;
                        var trigger;
                        if (data.hasAppearance || data.fillAlpha === 0) {
                           trigger = document.createElement("div");
                        } else {
                           trigger = document.createElement("img");
                           trigger.src = ""
                              .concat(this.imageResourcesPath, "annotation-")
                              .concat(
                                 /paperclip/i.test(data.name)
                                    ? "paperclip"
                                    : "pushpin",
                                 ".svg",
                              );
                           if (data.fillAlpha && data.fillAlpha < 1) {
                              trigger.style = "filter: opacity(".concat(
                                 Math.round(data.fillAlpha * 100),
                                 "%);",
                              );
                           }
                        }
                        trigger.addEventListener(
                           "dblclick",
                           _assertClassBrand(
                              _FileAttachmentAnnotationElement_brand,
                              this,
                              _download,
                           ).bind(this),
                        );
                        _classPrivateFieldSet(_trigger, this, trigger);
                        var isMac = util.FeatureTest.platform.isMac;
                        container.addEventListener("keydown", function (evt) {
                           if (
                              evt.key === "Enter" &&
                              (isMac ? evt.metaKey : evt.ctrlKey)
                           ) {
                              _assertClassBrand(
                                 _FileAttachmentAnnotationElement_brand,
                                 _this21,
                                 _download,
                              ).call(_this21);
                           }
                        });
                        if (!data.popupRef && this.hasPopupData) {
                           this._createPopup();
                        } else {
                           trigger.classList.add("popupTriggerArea");
                        }
                        container.append(trigger);
                        return container;
                     },
                  },
                  {
                     key: "getElementsToTriggerPopup",
                     value: function getElementsToTriggerPopup() {
                        return _classPrivateFieldGet(_trigger, this);
                     },
                  },
                  {
                     key: "addHighlightArea",
                     value: function addHighlightArea() {
                        this.container.classList.add("highlightArea");
                     },
                  },
               ]);
            })(AnnotationElement);
            function _download() {
               var _this$downloadManager;
               (_this$downloadManager = this.downloadManager) === null ||
                  _this$downloadManager === void 0 ||
                  _this$downloadManager.openOrDownloadData(
                     this.content,
                     this.filename,
                  );
            }
            var _accessibilityManager = /*#__PURE__*/ new WeakMap();
            var _annotationCanvasMap = /*#__PURE__*/ new WeakMap();
            var _editableAnnotations = /*#__PURE__*/ new WeakMap();
            var _AnnotationLayer_brand = /*#__PURE__*/ new WeakSet();
            var _AnnotationLayer = /*#__PURE__*/ (function () {
               function _AnnotationLayer(_ref21) {
                  var div = _ref21.div,
                     accessibilityManager = _ref21.accessibilityManager,
                     annotationCanvasMap = _ref21.annotationCanvasMap,
                     annotationEditorUIManager =
                        _ref21.annotationEditorUIManager,
                     page = _ref21.page,
                     viewport = _ref21.viewport;
                  _classCallCheck(this, _AnnotationLayer);
                  _classPrivateMethodInitSpec(this, _AnnotationLayer_brand);
                  _classPrivateFieldInitSpec(this, _accessibilityManager, null);
                  _classPrivateFieldInitSpec(this, _annotationCanvasMap, null);
                  _classPrivateFieldInitSpec(
                     this,
                     _editableAnnotations,
                     new Map(),
                  );
                  this.div = div;
                  _classPrivateFieldSet(
                     _accessibilityManager,
                     this,
                     accessibilityManager,
                  );
                  _classPrivateFieldSet(
                     _annotationCanvasMap,
                     this,
                     annotationCanvasMap,
                  );
                  this.page = page;
                  this.viewport = viewport;
                  this.zIndex = 0;
                  this._annotationEditorUIManager = annotationEditorUIManager;
               }
               return _createClass(_AnnotationLayer, [
                  {
                     key: "render",
                     value: (function () {
                        var _render = _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(
                              function _callee(params) {
                                 var annotations,
                                    layer,
                                    popupToElements,
                                    elementParams,
                                    _iterator25,
                                    _step25,
                                    data,
                                    isPopupAnnotation,
                                    _getRectDims8,
                                    width,
                                    height,
                                    elements,
                                    element,
                                    _elements2,
                                    rendered,
                                    _this$_annotationEdit,
                                    _t;
                                 return _regenerator().w(
                                    function (_context) {
                                       while (1)
                                          switch ((_context.p = _context.n)) {
                                             case 0:
                                                annotations =
                                                   params.annotations;
                                                layer = this.div;
                                                (0,
                                                display_utils.setLayerDimensions)(
                                                   layer,
                                                   this.viewport,
                                                );
                                                popupToElements = new Map();
                                                elementParams = {
                                                   data: null,
                                                   layer: layer,
                                                   linkService:
                                                      params.linkService,
                                                   downloadManager:
                                                      params.downloadManager,
                                                   imageResourcesPath:
                                                      params.imageResourcesPath ||
                                                      "",
                                                   renderForms:
                                                      params.renderForms !==
                                                      false,
                                                   svgFactory:
                                                      new display_utils.DOMSVGFactory(),
                                                   annotationStorage:
                                                      params.annotationStorage ||
                                                      new annotation_storage.AnnotationStorage(),
                                                   enableScripting:
                                                      params.enableScripting ===
                                                      true,
                                                   hasJSActions:
                                                      params.hasJSActions,
                                                   fieldObjects:
                                                      params.fieldObjects,
                                                   parent: this,
                                                   elements: null,
                                                };
                                                _iterator25 =
                                                   _createForOfIteratorHelper(
                                                      annotations,
                                                   );
                                                _context.p = 1;
                                                _iterator25.s();
                                             case 2:
                                                if (
                                                   (_step25 = _iterator25.n())
                                                      .done
                                                ) {
                                                   _context.n = 10;
                                                   break;
                                                }
                                                data = _step25.value;
                                                if (!data.noHTML) {
                                                   _context.n = 3;
                                                   break;
                                                }
                                                return _context.a(3, 9);
                                             case 3:
                                                isPopupAnnotation =
                                                   data.annotationType ===
                                                   util.AnnotationType.POPUP;
                                                if (isPopupAnnotation) {
                                                   _context.n = 5;
                                                   break;
                                                }
                                                ((_getRectDims8 = getRectDims(
                                                   data.rect,
                                                )),
                                                   (width =
                                                      _getRectDims8.width),
                                                   (height =
                                                      _getRectDims8.height));
                                                if (
                                                   !(width <= 0 || height <= 0)
                                                ) {
                                                   _context.n = 4;
                                                   break;
                                                }
                                                return _context.a(3, 9);
                                             case 4:
                                                _context.n = 7;
                                                break;
                                             case 5:
                                                elements = popupToElements.get(
                                                   data.id,
                                                );
                                                if (elements) {
                                                   _context.n = 6;
                                                   break;
                                                }
                                                return _context.a(3, 9);
                                             case 6:
                                                elementParams.elements =
                                                   elements;
                                             case 7:
                                                elementParams.data = data;
                                                element =
                                                   AnnotationElementFactory.create(
                                                      elementParams,
                                                   );
                                                if (element.isRenderable) {
                                                   _context.n = 8;
                                                   break;
                                                }
                                                return _context.a(3, 9);
                                             case 8:
                                                if (
                                                   !isPopupAnnotation &&
                                                   data.popupRef
                                                ) {
                                                   _elements2 =
                                                      popupToElements.get(
                                                         data.popupRef,
                                                      );
                                                   if (!_elements2) {
                                                      popupToElements.set(
                                                         data.popupRef,
                                                         [element],
                                                      );
                                                   } else {
                                                      _elements2.push(element);
                                                   }
                                                }
                                                rendered = element.render();
                                                if (data.hidden) {
                                                   rendered.style.visibility =
                                                      "hidden";
                                                }
                                                _assertClassBrand(
                                                   _AnnotationLayer_brand,
                                                   this,
                                                   _appendElement,
                                                ).call(this, rendered, data.id);
                                                if (
                                                   element.annotationEditorType >
                                                   0
                                                ) {
                                                   _classPrivateFieldGet(
                                                      _editableAnnotations,
                                                      this,
                                                   ).set(
                                                      element.data.id,
                                                      element,
                                                   );
                                                   (_this$_annotationEdit =
                                                      this
                                                         ._annotationEditorUIManager) ===
                                                      null ||
                                                      _this$_annotationEdit ===
                                                         void 0 ||
                                                      _this$_annotationEdit.renderAnnotationElement(
                                                         element,
                                                      );
                                                }
                                             case 9:
                                                _context.n = 2;
                                                break;
                                             case 10:
                                                _context.n = 12;
                                                break;
                                             case 11:
                                                _context.p = 11;
                                                _t = _context.v;
                                                _iterator25.e(_t);
                                             case 12:
                                                _context.p = 12;
                                                _iterator25.f();
                                                return _context.f(12);
                                             case 13:
                                                _assertClassBrand(
                                                   _AnnotationLayer_brand,
                                                   this,
                                                   _setAnnotationCanvasMap,
                                                ).call(this);
                                             case 14:
                                                return _context.a(2);
                                          }
                                    },
                                    _callee,
                                    this,
                                    [[1, 11, 12, 13]],
                                 );
                              },
                           ),
                        );
                        function render(_x) {
                           return _render.apply(this, arguments);
                        }
                        return render;
                     })(),
                  },
                  {
                     key: "update",
                     value: function update(_ref22) {
                        var viewport = _ref22.viewport;
                        var layer = this.div;
                        this.viewport = viewport;
                        (0, display_utils.setLayerDimensions)(layer, {
                           rotation: viewport.rotation,
                        });
                        _assertClassBrand(
                           _AnnotationLayer_brand,
                           this,
                           _setAnnotationCanvasMap,
                        ).call(this);
                        layer.hidden = false;
                     },
                  },
                  {
                     key: "getEditableAnnotations",
                     value: function getEditableAnnotations() {
                        return Array.from(
                           _classPrivateFieldGet(
                              _editableAnnotations,
                              this,
                           ).values(),
                        );
                     },
                  },
                  {
                     key: "getEditableAnnotation",
                     value: function getEditableAnnotation(id) {
                        return _classPrivateFieldGet(
                           _editableAnnotations,
                           this,
                        ).get(id);
                     },
                  },
               ]);
            })();
            /***/ function _appendElement(element, id) {
               var _classPrivateFieldGet6;
               var contentElement = element.firstChild || element;
               contentElement.id = "".concat(util.AnnotationPrefix).concat(id);
               this.div.append(element);
               (_classPrivateFieldGet6 = _classPrivateFieldGet(
                  _accessibilityManager,
                  this,
               )) === null ||
                  _classPrivateFieldGet6 === void 0 ||
                  _classPrivateFieldGet6.moveElementInDOM(
                     this.div,
                     element,
                     contentElement,
                     false,
                  );
            }
            function _setAnnotationCanvasMap() {
               if (!_classPrivateFieldGet(_annotationCanvasMap, this)) {
                  return;
               }
               var layer = this.div;
               var _iterator26 = _createForOfIteratorHelper(
                     _classPrivateFieldGet(_annotationCanvasMap, this),
                  ),
                  _step26;
               try {
                  for (_iterator26.s(); !(_step26 = _iterator26.n()).done; ) {
                     var _step26$value = _slicedToArray(_step26.value, 2),
                        id = _step26$value[0],
                        canvas = _step26$value[1];
                     var element = layer.querySelector(
                        '[data-annotation-id="'.concat(id, '"]'),
                     );
                     if (!element) {
                        continue;
                     }
                     canvas.className = "annotationContent";
                     var firstChild = element.firstChild;
                     if (!firstChild) {
                        element.append(canvas);
                     } else if (firstChild.nodeName === "CANVAS") {
                        firstChild.replaceWith(canvas);
                     } else if (
                        !firstChild.classList.contains("annotationContent")
                     ) {
                        firstChild.before(canvas);
                     } else {
                        firstChild.after(canvas);
                     }
                  }
               } catch (err) {
                  _iterator26.e(err);
               } finally {
                  _iterator26.f();
               }
               _classPrivateFieldGet(_annotationCanvasMap, this).clear();
            }
         },
         /***/ 792: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ AnnotationStorage:
                  function AnnotationStorage() {
                     return /* binding */ _AnnotationStorage;
                  },
               /* harmony export */ PrintAnnotationStorage:
                  function PrintAnnotationStorage() {
                     return /* binding */ _PrintAnnotationStorage;
                  },
               /* harmony export */ SerializableEmpty:
                  function SerializableEmpty() {
                     return /* binding */ _SerializableEmpty;
                  } /* harmony export */,
            });
            /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(292);
            /* harmony import */ var _editor_editor_js__WEBPACK_IMPORTED_MODULE_1__ =
               __webpack_require__(310);
            /* harmony import */ var _shared_murmurhash3_js__WEBPACK_IMPORTED_MODULE_2__ =
               __webpack_require__(651);
            var _SerializableEmpty = Object.freeze({
               map: null,
               hash: "",
               transfer: undefined,
            });
            var _modified = /*#__PURE__*/ new WeakMap();
            var _storage = /*#__PURE__*/ new WeakMap();
            var _AnnotationStorage_brand = /*#__PURE__*/ new WeakSet();
            var _AnnotationStorage = /*#__PURE__*/ (function () {
               function _AnnotationStorage() {
                  _classCallCheck(this, _AnnotationStorage);
                  _classPrivateMethodInitSpec(this, _AnnotationStorage_brand);
                  _classPrivateFieldInitSpec(this, _modified, false);
                  _classPrivateFieldInitSpec(this, _storage, new Map());
                  this.onSetModified = null;
                  this.onResetModified = null;
                  this.onAnnotationEditor = null;
               }
               return _createClass(_AnnotationStorage, [
                  {
                     key: "getValue",
                     value: function getValue(key, defaultValue) {
                        var value = _classPrivateFieldGet(_storage, this).get(
                           key,
                        );
                        if (value === undefined) {
                           return defaultValue;
                        }
                        return Object.assign(defaultValue, value);
                     },
                  },
                  {
                     key: "getRawValue",
                     value: function getRawValue(key) {
                        return _classPrivateFieldGet(_storage, this).get(key);
                     },
                  },
                  {
                     key: "remove",
                     value: function remove(key) {
                        _classPrivateFieldGet(_storage, this)["delete"](key);
                        if (_classPrivateFieldGet(_storage, this).size === 0) {
                           this.resetModified();
                        }
                        if (typeof this.onAnnotationEditor === "function") {
                           var _iterator27 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_storage, this).values(),
                              ),
                              _step27;
                           try {
                              for (
                                 _iterator27.s();
                                 !(_step27 = _iterator27.n()).done;

                              ) {
                                 var value = _step27.value;
                                 if (
                                    value instanceof
                                    _editor_editor_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationEditor
                                 ) {
                                    return;
                                 }
                              }
                           } catch (err) {
                              _iterator27.e(err);
                           } finally {
                              _iterator27.f();
                           }
                           this.onAnnotationEditor(null);
                        }
                     },
                  },
                  {
                     key: "setValue",
                     value: function setValue(key, value) {
                        var obj = _classPrivateFieldGet(_storage, this).get(
                           key,
                        );
                        var modified = false;
                        if (obj !== undefined) {
                           for (
                              var _i7 = 0,
                                 _Object$entries2 = Object.entries(value);
                              _i7 < _Object$entries2.length;
                              _i7++
                           ) {
                              var _Object$entries2$_i = _slicedToArray(
                                    _Object$entries2[_i7],
                                    2,
                                 ),
                                 entry = _Object$entries2$_i[0],
                                 val = _Object$entries2$_i[1];
                              if (obj[entry] !== val) {
                                 modified = true;
                                 obj[entry] = val;
                              }
                           }
                        } else {
                           modified = true;
                           _classPrivateFieldGet(_storage, this).set(
                              key,
                              value,
                           );
                        }
                        if (modified) {
                           _assertClassBrand(
                              _AnnotationStorage_brand,
                              this,
                              _setModified,
                           ).call(this);
                        }
                        if (
                           value instanceof
                              _editor_editor_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationEditor &&
                           typeof this.onAnnotationEditor === "function"
                        ) {
                           this.onAnnotationEditor(value.constructor._type);
                        }
                     },
                  },
                  {
                     key: "has",
                     value: function has(key) {
                        return _classPrivateFieldGet(_storage, this).has(key);
                     },
                  },
                  {
                     key: "getAll",
                     value: function getAll() {
                        return _classPrivateFieldGet(_storage, this).size > 0
                           ? (0,
                             _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.objectFromMap)(
                                _classPrivateFieldGet(_storage, this),
                             )
                           : null;
                     },
                  },
                  {
                     key: "setAll",
                     value: function setAll(obj) {
                        for (
                           var _i8 = 0, _Object$entries3 = Object.entries(obj);
                           _i8 < _Object$entries3.length;
                           _i8++
                        ) {
                           var _Object$entries3$_i = _slicedToArray(
                                 _Object$entries3[_i8],
                                 2,
                              ),
                              key = _Object$entries3$_i[0],
                              val = _Object$entries3$_i[1];
                           this.setValue(key, val);
                        }
                     },
                  },
                  {
                     key: "size",
                     get: function get() {
                        return _classPrivateFieldGet(_storage, this).size;
                     },
                  },
                  {
                     key: "resetModified",
                     value: function resetModified() {
                        if (_classPrivateFieldGet(_modified, this)) {
                           _classPrivateFieldSet(_modified, this, false);
                           if (typeof this.onResetModified === "function") {
                              this.onResetModified();
                           }
                        }
                     },
                  },
                  {
                     key: "print",
                     get: function get() {
                        return new _PrintAnnotationStorage(this);
                     },
                  },
                  {
                     key: "serializable",
                     get: function get() {
                        if (_classPrivateFieldGet(_storage, this).size === 0) {
                           return _SerializableEmpty;
                        }
                        var map = new Map(),
                           hash =
                              new _shared_murmurhash3_js__WEBPACK_IMPORTED_MODULE_2__.MurmurHash3_64(),
                           transfer = [];
                        var context = Object.create(null);
                        var hasBitmap = false;
                        var _iterator28 = _createForOfIteratorHelper(
                              _classPrivateFieldGet(_storage, this),
                           ),
                           _step28;
                        try {
                           for (
                              _iterator28.s();
                              !(_step28 = _iterator28.n()).done;

                           ) {
                              var _step28$value = _slicedToArray(
                                    _step28.value,
                                    2,
                                 ),
                                 key = _step28$value[0],
                                 val = _step28$value[1];
                              var serialized =
                                 val instanceof
                                 _editor_editor_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationEditor
                                    ? val.serialize(false, context)
                                    : val;
                              if (serialized) {
                                 map.set(key, serialized);
                                 hash.update(
                                    ""
                                       .concat(key, ":")
                                       .concat(JSON.stringify(serialized)),
                                 );
                                 hasBitmap || (hasBitmap = !!serialized.bitmap);
                              }
                           }
                        } catch (err) {
                           _iterator28.e(err);
                        } finally {
                           _iterator28.f();
                        }
                        if (hasBitmap) {
                           var _iterator29 = _createForOfIteratorHelper(
                                 map.values(),
                              ),
                              _step29;
                           try {
                              for (
                                 _iterator29.s();
                                 !(_step29 = _iterator29.n()).done;

                              ) {
                                 var value = _step29.value;
                                 if (value.bitmap) {
                                    transfer.push(value.bitmap);
                                 }
                              }
                           } catch (err) {
                              _iterator29.e(err);
                           } finally {
                              _iterator29.f();
                           }
                        }
                        return map.size > 0
                           ? {
                                map: map,
                                hash: hash.hexdigest(),
                                transfer: transfer,
                             }
                           : _SerializableEmpty;
                     },
                  },
                  {
                     key: "editorStats",
                     get: function get() {
                        var stats = null;
                        var typeToEditor = new Map();
                        var _iterator30 = _createForOfIteratorHelper(
                              _classPrivateFieldGet(_storage, this).values(),
                           ),
                           _step30;
                        try {
                           for (
                              _iterator30.s();
                              !(_step30 = _iterator30.n()).done;

                           ) {
                              var _stats;
                              var value = _step30.value;
                              if (
                                 !(
                                    value instanceof
                                    _editor_editor_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationEditor
                                 )
                              ) {
                                 continue;
                              }
                              var editorStats = value.telemetryFinalData;
                              if (!editorStats) {
                                 continue;
                              }
                              var type = editorStats.type;
                              if (!typeToEditor.has(type)) {
                                 typeToEditor.set(
                                    type,
                                    Object.getPrototypeOf(value).constructor,
                                 );
                              }
                              stats || (stats = Object.create(null));
                              var map =
                                 (_stats = stats)[type] ||
                                 (_stats[type] = new Map());
                              for (
                                 var _i9 = 0,
                                    _Object$entries4 =
                                       Object.entries(editorStats);
                                 _i9 < _Object$entries4.length;
                                 _i9++
                              ) {
                                 var _counters$get;
                                 var _Object$entries4$_i = _slicedToArray(
                                       _Object$entries4[_i9],
                                       2,
                                    ),
                                    key = _Object$entries4$_i[0],
                                    val = _Object$entries4$_i[1];
                                 if (key === "type") {
                                    continue;
                                 }
                                 var counters = map.get(key);
                                 if (!counters) {
                                    counters = new Map();
                                    map.set(key, counters);
                                 }
                                 var count =
                                    (_counters$get = counters.get(val)) !==
                                       null && _counters$get !== void 0
                                       ? _counters$get
                                       : 0;
                                 counters.set(val, count + 1);
                              }
                           }
                        } catch (err) {
                           _iterator30.e(err);
                        } finally {
                           _iterator30.f();
                        }
                        var _iterator31 =
                              _createForOfIteratorHelper(typeToEditor),
                           _step31;
                        try {
                           for (
                              _iterator31.s();
                              !(_step31 = _iterator31.n()).done;

                           ) {
                              var _step31$value = _slicedToArray(
                                    _step31.value,
                                    2,
                                 ),
                                 _type2 = _step31$value[0],
                                 editor = _step31$value[1];
                              stats[_type2] = editor.computeTelemetryFinalData(
                                 stats[_type2],
                              );
                           }
                        } catch (err) {
                           _iterator31.e(err);
                        } finally {
                           _iterator31.f();
                        }
                        return stats;
                     },
                  },
               ]);
            })();
            function _setModified() {
               if (!_classPrivateFieldGet(_modified, this)) {
                  _classPrivateFieldSet(_modified, this, true);
                  if (typeof this.onSetModified === "function") {
                     this.onSetModified();
                  }
               }
            }
            var _serializable = /*#__PURE__*/ new WeakMap();
            var _PrintAnnotationStorage = /*#__PURE__*/ (function (
               _AnnotationStorage3,
            ) {
               function _PrintAnnotationStorage(parent) {
                  var _this24;
                  _classCallCheck(this, _PrintAnnotationStorage);
                  _this24 = _callSuper(this, _PrintAnnotationStorage);
                  _classPrivateFieldInitSpec(_this24, _serializable, void 0);
                  var _parent$serializable = parent.serializable,
                     map = _parent$serializable.map,
                     hash = _parent$serializable.hash,
                     transfer = _parent$serializable.transfer;
                  var clone = structuredClone(
                     map,
                     transfer ? { transfer: transfer } : null,
                  );
                  _classPrivateFieldSet(_serializable, _this24, {
                     map: clone,
                     hash: hash,
                     transfer: transfer,
                  });
                  return _this24;
               }
               _inherits(_PrintAnnotationStorage, _AnnotationStorage3);
               return _createClass(_PrintAnnotationStorage, [
                  {
                     key: "print",
                     get: function get() {
                        (0,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(
                           "Should not call PrintAnnotationStorage.print",
                        );
                     },
                  },
                  {
                     key: "serializable",
                     get: function get() {
                        return _classPrivateFieldGet(_serializable, this);
                     },
                  },
               ]);
            })(_AnnotationStorage); /***/
         },
         /***/ 831: /***/ function _(
            __webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            __webpack_require__.a(
               __webpack_module__,
               /*#__PURE__*/ (function () {
                  var _ref23 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee8(
                           __webpack_handle_async_dependencies__,
                           __webpack_async_result__,
                        ) {
                           var _getDocument,
                              _fetchDocument,
                              getUrlProp,
                              getDataProp,
                              isRefProxy,
                              _shared_util_js__WEBPACK_IMPORTED_MODULE_0__,
                              _annotation_storage_js__WEBPACK_IMPORTED_MODULE_1__,
                              _display_utils_js__WEBPACK_IMPORTED_MODULE_2__,
                              _font_loader_js__WEBPACK_IMPORTED_MODULE_3__,
                              display_node_utils__WEBPACK_IMPORTED_MODULE_4__,
                              _canvas_js__WEBPACK_IMPORTED_MODULE_5__,
                              _text_layer_js__WEBPACK_IMPORTED_MODULE_6__,
                              _worker_options_js__WEBPACK_IMPORTED_MODULE_14__,
                              _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__,
                              _metadata_js__WEBPACK_IMPORTED_MODULE_8__,
                              _optional_content_config_js__WEBPACK_IMPORTED_MODULE_9__,
                              _transport_stream_js__WEBPACK_IMPORTED_MODULE_10__,
                              display_fetch_stream__WEBPACK_IMPORTED_MODULE_11__,
                              display_network__WEBPACK_IMPORTED_MODULE_12__,
                              display_node_stream__WEBPACK_IMPORTED_MODULE_13__,
                              _xfa_text_js__WEBPACK_IMPORTED_MODULE_15__,
                              __webpack_async_dependencies__,
                              _ref24,
                              _ref25,
                              DEFAULT_RANGE_CHUNK_SIZE,
                              RENDERING_CANCELLED_TIMEOUT,
                              DELAYED_CLEANUP_TIMEOUT,
                              DefaultCanvasFactory,
                              DefaultCMapReaderFactory,
                              DefaultFilterFactory,
                              DefaultStandardFontDataFactory,
                              PDFDocumentLoadingTask,
                              _docId,
                              _PDFDataRangeTransport,
                              PDFDocumentProxy,
                              _delayedCleanupTimeout,
                              _pendingCleanup,
                              _PDFPageProxy_brand,
                              PDFPageProxy,
                              _tryCleanup,
                              _abortDelayedCleanup,
                              _listeners,
                              _deferred,
                              LoopbackPort,
                              PDFWorkerUtil,
                              _worker_options_js__W,
                              _PDFWorker,
                              _get_mainThreadWorkerMessageHandler,
                              _workerPorts,
                              _methodPromises,
                              _pageCache,
                              _pagePromises,
                              _pageRefCache,
                              _passwordCapability,
                              _WorkerTransport_brand,
                              WorkerTransport,
                              _cacheSimpleMethod,
                              INITIAL_DATA,
                              _objs,
                              _PDFObjects_brand,
                              PDFObjects,
                              _ensureObj,
                              _internalRenderTask,
                              RenderTask,
                              InternalRenderTask,
                              _canvasInUse,
                              _version,
                              _build,
                              _t6,
                              _t7,
                              _t8;
                           return _regenerator().w(
                              function (_context9) {
                                 while (1)
                                    switch ((_context9.p = _context9.n)) {
                                       case 0:
                                          _context9.p = 0;
                                          _ensureObj = function _ensureObj2(
                                             objId,
                                          ) {
                                             var _classPrivateFieldGet0;
                                             return (
                                                (_classPrivateFieldGet0 =
                                                   _classPrivateFieldGet(
                                                      _objs,
                                                      this,
                                                   ))[objId] ||
                                                (_classPrivateFieldGet0[objId] =
                                                   _objectSpread(
                                                      _objectSpread(
                                                         {},
                                                         Promise.withResolvers(),
                                                      ),
                                                      {},
                                                      { data: INITIAL_DATA },
                                                   ))
                                             );
                                          };
                                          _cacheSimpleMethod =
                                             function _cacheSimpleMethod2(
                                                name,
                                             ) {
                                                var data =
                                                   arguments.length > 1 &&
                                                   arguments[1] !== undefined
                                                      ? arguments[1]
                                                      : null;
                                                var cachedPromise =
                                                   _classPrivateFieldGet(
                                                      _methodPromises,
                                                      this,
                                                   ).get(name);
                                                if (cachedPromise) {
                                                   return cachedPromise;
                                                }
                                                var promise =
                                                   this.messageHandler.sendWithPromise(
                                                      name,
                                                      data,
                                                   );
                                                _classPrivateFieldGet(
                                                   _methodPromises,
                                                   this,
                                                ).set(name, promise);
                                                return promise;
                                             };
                                          _get_mainThreadWorkerMessageHandler =
                                             function _get_mainThreadWorker(
                                                _this32,
                                             ) {
                                                try {
                                                   var _globalThis$pdfjsWork;
                                                   return (
                                                      ((_globalThis$pdfjsWork =
                                                         globalThis.pdfjsWorker) ===
                                                         null ||
                                                      _globalThis$pdfjsWork ===
                                                         void 0
                                                         ? void 0
                                                         : _globalThis$pdfjsWork.WorkerMessageHandler) ||
                                                      null
                                                   );
                                                } catch (_unused5) {
                                                   return null;
                                                }
                                             };
                                          _abortDelayedCleanup =
                                             function _abortDelayedCleanup2() {
                                                if (
                                                   _classPrivateFieldGet(
                                                      _delayedCleanupTimeout,
                                                      this,
                                                   )
                                                ) {
                                                   clearTimeout(
                                                      _classPrivateFieldGet(
                                                         _delayedCleanupTimeout,
                                                         this,
                                                      ),
                                                   );
                                                   _classPrivateFieldSet(
                                                      _delayedCleanupTimeout,
                                                      this,
                                                      null,
                                                   );
                                                }
                                             };
                                          _tryCleanup =
                                             function _tryCleanup2() {
                                                var _this42 = this;
                                                var delayed =
                                                   arguments.length > 0 &&
                                                   arguments[0] !== undefined
                                                      ? arguments[0]
                                                      : false;
                                                _assertClassBrand(
                                                   _PDFPageProxy_brand,
                                                   this,
                                                   _abortDelayedCleanup,
                                                ).call(this);
                                                if (
                                                   !_classPrivateFieldGet(
                                                      _pendingCleanup,
                                                      this,
                                                   ) ||
                                                   this.destroyed
                                                ) {
                                                   return false;
                                                }
                                                if (delayed) {
                                                   _classPrivateFieldSet(
                                                      _delayedCleanupTimeout,
                                                      this,
                                                      setTimeout(function () {
                                                         _classPrivateFieldSet(
                                                            _delayedCleanupTimeout,
                                                            _this42,
                                                            null,
                                                         );
                                                         _assertClassBrand(
                                                            _PDFPageProxy_brand,
                                                            _this42,
                                                            _tryCleanup,
                                                         ).call(_this42, false);
                                                      }, DELAYED_CLEANUP_TIMEOUT),
                                                   );
                                                   return false;
                                                }
                                                var _iterator46 =
                                                      _createForOfIteratorHelper(
                                                         this._intentStates.values(),
                                                      ),
                                                   _step46;
                                                try {
                                                   for (
                                                      _iterator46.s();
                                                      !(_step46 =
                                                         _iterator46.n()).done;

                                                   ) {
                                                      var _step46$value =
                                                            _step46.value,
                                                         renderTasks =
                                                            _step46$value.renderTasks,
                                                         operatorList =
                                                            _step46$value.operatorList;
                                                      if (
                                                         renderTasks.size > 0 ||
                                                         !operatorList.lastChunk
                                                      ) {
                                                         return false;
                                                      }
                                                   }
                                                } catch (err) {
                                                   _iterator46.e(err);
                                                } finally {
                                                   _iterator46.f();
                                                }
                                                this._intentStates.clear();
                                                this.objs.clear();
                                                _classPrivateFieldSet(
                                                   _pendingCleanup,
                                                   this,
                                                   false,
                                                );
                                                return true;
                                             };
                                          _getDocument = function _getDocument(
                                             src,
                                          ) {
                                             var _src$password, _src$length;
                                             if (
                                                typeof src === "string" ||
                                                src instanceof URL
                                             ) {
                                                src = { url: src };
                                             } else if (
                                                src instanceof ArrayBuffer ||
                                                ArrayBuffer.isView(src)
                                             ) {
                                                src = { data: src };
                                             }
                                             if (_typeof(src) !== "object") {
                                                throw new Error(
                                                   "Invalid parameter in getDocument, need parameter object.",
                                                );
                                             }
                                             if (
                                                !src.url &&
                                                !src.data &&
                                                !src.range
                                             ) {
                                                throw new Error(
                                                   "Invalid parameter object: need either .data, .range or .url",
                                                );
                                             }
                                             var task =
                                                new PDFDocumentLoadingTask();
                                             var docId = task.docId;
                                             var url = src.url
                                                ? getUrlProp(src.url)
                                                : null;
                                             var data = src.data
                                                ? getDataProp(src.data)
                                                : null;
                                             var httpHeaders =
                                                src.httpHeaders || null;
                                             var withCredentials =
                                                src.withCredentials === true;
                                             var password =
                                                (_src$password =
                                                   src.password) !== null &&
                                                _src$password !== void 0
                                                   ? _src$password
                                                   : null;
                                             var rangeTransport =
                                                src.range instanceof
                                                _PDFDataRangeTransport
                                                   ? src.range
                                                   : null;
                                             var rangeChunkSize =
                                                Number.isInteger(
                                                   src.rangeChunkSize,
                                                ) && src.rangeChunkSize > 0
                                                   ? src.rangeChunkSize
                                                   : DEFAULT_RANGE_CHUNK_SIZE;
                                             var worker =
                                                src.worker instanceof _PDFWorker
                                                   ? src.worker
                                                   : null;
                                             var verbosity = src.verbosity;
                                             var docBaseUrl =
                                                typeof src.docBaseUrl ===
                                                   "string" &&
                                                !(0,
                                                _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isDataScheme)(
                                                   src.docBaseUrl,
                                                )
                                                   ? src.docBaseUrl
                                                   : null;
                                             var cMapUrl =
                                                typeof src.cMapUrl === "string"
                                                   ? src.cMapUrl
                                                   : null;
                                             var cMapPacked =
                                                src.cMapPacked !== false;
                                             var CMapReaderFactory =
                                                src.CMapReaderFactory ||
                                                DefaultCMapReaderFactory;
                                             var standardFontDataUrl =
                                                typeof src.standardFontDataUrl ===
                                                "string"
                                                   ? src.standardFontDataUrl
                                                   : null;
                                             var StandardFontDataFactory =
                                                src.StandardFontDataFactory ||
                                                DefaultStandardFontDataFactory;
                                             var ignoreErrors =
                                                src.stopAtErrors !== true;
                                             var maxImageSize =
                                                Number.isInteger(
                                                   src.maxImageSize,
                                                ) && src.maxImageSize > -1
                                                   ? src.maxImageSize
                                                   : -1;
                                             var isEvalSupported =
                                                src.isEvalSupported !== false;
                                             var isOffscreenCanvasSupported =
                                                typeof src.isOffscreenCanvasSupported ===
                                                "boolean"
                                                   ? src.isOffscreenCanvasSupported
                                                   : !_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS;
                                             var canvasMaxAreaInBytes =
                                                Number.isInteger(
                                                   src.canvasMaxAreaInBytes,
                                                )
                                                   ? src.canvasMaxAreaInBytes
                                                   : -1;
                                             var disableFontFace =
                                                typeof src.disableFontFace ===
                                                "boolean"
                                                   ? src.disableFontFace
                                                   : _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS;
                                             var fontExtraProperties =
                                                src.fontExtraProperties ===
                                                true;
                                             var enableXfa =
                                                src.enableXfa === true;
                                             var ownerDocument =
                                                src.ownerDocument ||
                                                globalThis.document;
                                             var disableRange =
                                                src.disableRange === true;
                                             var disableStream =
                                                src.disableStream === true;
                                             var disableAutoFetch =
                                                src.disableAutoFetch === true;
                                             var pdfBug = src.pdfBug === true;
                                             var length = rangeTransport
                                                ? rangeTransport.length
                                                : (_src$length = src.length) !==
                                                       null &&
                                                    _src$length !== void 0
                                                  ? _src$length
                                                  : NaN;
                                             var useSystemFonts =
                                                typeof src.useSystemFonts ===
                                                "boolean"
                                                   ? src.useSystemFonts
                                                   : !_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS &&
                                                     !disableFontFace;
                                             var useWorkerFetch =
                                                typeof src.useWorkerFetch ===
                                                "boolean"
                                                   ? src.useWorkerFetch
                                                   : CMapReaderFactory ===
                                                        _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMCMapReaderFactory &&
                                                     StandardFontDataFactory ===
                                                        _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMStandardFontDataFactory &&
                                                     cMapUrl &&
                                                     standardFontDataUrl &&
                                                     (0,
                                                     _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isValidFetchUrl)(
                                                        cMapUrl,
                                                        document.baseURI,
                                                     ) &&
                                                     (0,
                                                     _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isValidFetchUrl)(
                                                        standardFontDataUrl,
                                                        document.baseURI,
                                                     );
                                             var canvasFactory =
                                                src.canvasFactory ||
                                                new DefaultCanvasFactory({
                                                   ownerDocument: ownerDocument,
                                                });
                                             var filterFactory =
                                                src.filterFactory ||
                                                new DefaultFilterFactory({
                                                   docId: docId,
                                                   ownerDocument: ownerDocument,
                                                });
                                             var styleElement = null;
                                             (0,
                                             _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.setVerbosityLevel)(
                                                verbosity,
                                             );
                                             var transportFactory = {
                                                canvasFactory: canvasFactory,
                                                filterFactory: filterFactory,
                                             };
                                             if (!useWorkerFetch) {
                                                transportFactory.cMapReaderFactory =
                                                   new CMapReaderFactory({
                                                      baseUrl: cMapUrl,
                                                      isCompressed: cMapPacked,
                                                   });
                                                transportFactory.standardFontDataFactory =
                                                   new StandardFontDataFactory({
                                                      baseUrl:
                                                         standardFontDataUrl,
                                                   });
                                             }
                                             if (!worker) {
                                                var workerParams = {
                                                   verbosity: verbosity,
                                                   port: _worker_options_js__WEBPACK_IMPORTED_MODULE_14__
                                                      .GlobalWorkerOptions
                                                      .workerPort,
                                                };
                                                worker = workerParams.port
                                                   ? _PDFWorker.fromPort(
                                                        workerParams,
                                                     )
                                                   : new _PDFWorker(
                                                        workerParams,
                                                     );
                                                task._worker = worker;
                                             }
                                             var fetchDocParams = {
                                                docId: docId,
                                                apiVersion: "4.2.67",
                                                data: data,
                                                password: password,
                                                disableAutoFetch:
                                                   disableAutoFetch,
                                                rangeChunkSize: rangeChunkSize,
                                                length: length,
                                                docBaseUrl: docBaseUrl,
                                                enableXfa: enableXfa,
                                                evaluatorOptions: {
                                                   maxImageSize: maxImageSize,
                                                   disableFontFace:
                                                      disableFontFace,
                                                   ignoreErrors: ignoreErrors,
                                                   isEvalSupported:
                                                      isEvalSupported,
                                                   isOffscreenCanvasSupported:
                                                      isOffscreenCanvasSupported,
                                                   canvasMaxAreaInBytes:
                                                      canvasMaxAreaInBytes,
                                                   fontExtraProperties:
                                                      fontExtraProperties,
                                                   useSystemFonts:
                                                      useSystemFonts,
                                                   cMapUrl: useWorkerFetch
                                                      ? cMapUrl
                                                      : null,
                                                   standardFontDataUrl:
                                                      useWorkerFetch
                                                         ? standardFontDataUrl
                                                         : null,
                                                },
                                             };
                                             var transportParams = {
                                                ignoreErrors: ignoreErrors,
                                                disableFontFace:
                                                   disableFontFace,
                                                fontExtraProperties:
                                                   fontExtraProperties,
                                                enableXfa: enableXfa,
                                                ownerDocument: ownerDocument,
                                                disableAutoFetch:
                                                   disableAutoFetch,
                                                pdfBug: pdfBug,
                                                styleElement: styleElement,
                                             };
                                             worker.promise
                                                .then(function () {
                                                   if (task.destroyed) {
                                                      throw new Error(
                                                         "Loading aborted",
                                                      );
                                                   }
                                                   var workerIdPromise =
                                                      _fetchDocument(
                                                         worker,
                                                         fetchDocParams,
                                                      );
                                                   var networkStreamPromise =
                                                      new Promise(function (
                                                         resolve,
                                                      ) {
                                                         var networkStream;
                                                         if (rangeTransport) {
                                                            networkStream =
                                                               new _transport_stream_js__WEBPACK_IMPORTED_MODULE_10__.PDFDataTransportStream(
                                                                  rangeTransport,
                                                                  {
                                                                     disableRange:
                                                                        disableRange,
                                                                     disableStream:
                                                                        disableStream,
                                                                  },
                                                               );
                                                         } else if (!data) {
                                                            var createPDFNetworkStream =
                                                               function createPDFNetworkStream(
                                                                  params,
                                                               ) {
                                                                  if (
                                                                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS
                                                                  ) {
                                                                     var isFetchSupported =
                                                                        function isFetchSupported() {
                                                                           return (
                                                                              typeof fetch !==
                                                                                 "undefined" &&
                                                                              typeof Response !==
                                                                                 "undefined" &&
                                                                              "body" in
                                                                                 Response.prototype
                                                                           );
                                                                        };
                                                                     return isFetchSupported() &&
                                                                        (0,
                                                                        _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isValidFetchUrl)(
                                                                           params.url,
                                                                        )
                                                                        ? new display_fetch_stream__WEBPACK_IMPORTED_MODULE_11__.PDFFetchStream(
                                                                             params,
                                                                          )
                                                                        : new display_node_stream__WEBPACK_IMPORTED_MODULE_13__.PDFNodeStream(
                                                                             params,
                                                                          );
                                                                  }
                                                                  return (0,
                                                                  _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isValidFetchUrl)(
                                                                     params.url,
                                                                  )
                                                                     ? new display_fetch_stream__WEBPACK_IMPORTED_MODULE_11__.PDFFetchStream(
                                                                          params,
                                                                       )
                                                                     : new display_network__WEBPACK_IMPORTED_MODULE_12__.PDFNetworkStream(
                                                                          params,
                                                                       );
                                                               };
                                                            networkStream =
                                                               createPDFNetworkStream(
                                                                  {
                                                                     url: url,
                                                                     length:
                                                                        length,
                                                                     httpHeaders:
                                                                        httpHeaders,
                                                                     withCredentials:
                                                                        withCredentials,
                                                                     rangeChunkSize:
                                                                        rangeChunkSize,
                                                                     disableRange:
                                                                        disableRange,
                                                                     disableStream:
                                                                        disableStream,
                                                                  },
                                                               );
                                                         }
                                                         resolve(networkStream);
                                                      });
                                                   return Promise.all([
                                                      workerIdPromise,
                                                      networkStreamPromise,
                                                   ]).then(function (_ref26) {
                                                      var _ref27 =
                                                            _slicedToArray(
                                                               _ref26,
                                                               2,
                                                            ),
                                                         workerId = _ref27[0],
                                                         networkStream =
                                                            _ref27[1];
                                                      if (task.destroyed) {
                                                         throw new Error(
                                                            "Loading aborted",
                                                         );
                                                      }
                                                      var messageHandler =
                                                         new _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__.MessageHandler(
                                                            docId,
                                                            workerId,
                                                            worker.port,
                                                         );
                                                      var transport =
                                                         new WorkerTransport(
                                                            messageHandler,
                                                            task,
                                                            networkStream,
                                                            transportParams,
                                                            transportFactory,
                                                         );
                                                      task._transport =
                                                         transport;
                                                      messageHandler.send(
                                                         "Ready",
                                                         null,
                                                      );
                                                   });
                                                })
                                                ["catch"](
                                                   task._capability.reject,
                                                );
                                             return task;
                                          };
                                          _fetchDocument =
                                             /*#__PURE__*/ (function () {
                                                var _ref28 = _asyncToGenerator(
                                                   /*#__PURE__*/ _regenerator().m(
                                                      function _callee2(
                                                         worker,
                                                         source,
                                                      ) {
                                                         var workerId;
                                                         return _regenerator().w(
                                                            function (
                                                               _context2,
                                                            ) {
                                                               while (1)
                                                                  switch (
                                                                     _context2.n
                                                                  ) {
                                                                     case 0:
                                                                        if (
                                                                           !worker.destroyed
                                                                        ) {
                                                                           _context2.n = 1;
                                                                           break;
                                                                        }
                                                                        throw new Error(
                                                                           "Worker was destroyed",
                                                                        );
                                                                     case 1:
                                                                        _context2.n = 2;
                                                                        return worker.messageHandler.sendWithPromise(
                                                                           "GetDocRequest",
                                                                           source,
                                                                           source.data
                                                                              ? [
                                                                                   source
                                                                                      .data
                                                                                      .buffer,
                                                                                ]
                                                                              : null,
                                                                        );
                                                                     case 2:
                                                                        workerId =
                                                                           _context2.v;
                                                                        if (
                                                                           !worker.destroyed
                                                                        ) {
                                                                           _context2.n = 3;
                                                                           break;
                                                                        }
                                                                        throw new Error(
                                                                           "Worker was destroyed",
                                                                        );
                                                                     case 3:
                                                                        return _context2.a(
                                                                           2,
                                                                           workerId,
                                                                        );
                                                                  }
                                                            },
                                                            _callee2,
                                                         );
                                                      },
                                                   ),
                                                );
                                                return function _fetchDocument(
                                                   _x4,
                                                   _x5,
                                                ) {
                                                   return _ref28.apply(
                                                      this,
                                                      arguments,
                                                   );
                                                };
                                             })();
                                          getUrlProp = function getUrlProp(
                                             val,
                                          ) {
                                             if (val instanceof URL) {
                                                return val.href;
                                             }
                                             try {
                                                return new URL(
                                                   val,
                                                   window.location,
                                                ).href;
                                             } catch (_unused) {
                                                if (
                                                   _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS &&
                                                   typeof val === "string"
                                                ) {
                                                   return val;
                                                }
                                             }
                                             throw new Error(
                                                "Invalid PDF url data: " +
                                                   "either string or URL-object is expected in the url property.",
                                             );
                                          };
                                          getDataProp = function getDataProp(
                                             val,
                                          ) {
                                             if (
                                                _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS &&
                                                typeof Buffer !== "undefined" &&
                                                val instanceof Buffer
                                             ) {
                                                throw new Error(
                                                   "Please provide binary data as `Uint8Array`, rather than `Buffer`.",
                                                );
                                             }
                                             if (
                                                val instanceof Uint8Array &&
                                                val.byteLength ===
                                                   val.buffer.byteLength
                                             ) {
                                                return val;
                                             }
                                             if (typeof val === "string") {
                                                return (0,
                                                _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.stringToBytes)(
                                                   val,
                                                );
                                             }
                                             if (
                                                val instanceof ArrayBuffer ||
                                                ArrayBuffer.isView(val) ||
                                                (_typeof(val) === "object" &&
                                                   !isNaN(
                                                      val === null ||
                                                         val === void 0
                                                         ? void 0
                                                         : val.length,
                                                   ))
                                             ) {
                                                return new Uint8Array(val);
                                             }
                                             throw new Error(
                                                "Invalid PDF binary data: either TypedArray, " +
                                                   "string, or array-like object is expected in the data property.",
                                             );
                                          };
                                          isRefProxy = function isRefProxy(
                                             ref,
                                          ) {
                                             return (
                                                _typeof(ref) === "object" &&
                                                Number.isInteger(
                                                   ref === null ||
                                                      ref === void 0
                                                      ? void 0
                                                      : ref.num,
                                                ) &&
                                                ref.num >= 0 &&
                                                Number.isInteger(
                                                   ref === null ||
                                                      ref === void 0
                                                      ? void 0
                                                      : ref.gen,
                                                ) &&
                                                ref.gen >= 0
                                             );
                                          };
                                          /* harmony export */ __webpack_require__.d(
                                             __webpack_exports__,
                                             {
                                                /* harmony export */ PDFDataRangeTransport:
                                                   function PDFDataRangeTransport() {
                                                      return /* binding */ _PDFDataRangeTransport;
                                                   },
                                                /* harmony export */ PDFWorker:
                                                   function PDFWorker() {
                                                      return /* binding */ _PDFWorker;
                                                   },
                                                /* harmony export */ build: function build() {
                                                   return /* binding */ _build;
                                                },
                                                /* harmony export */ getDocument:
                                                   function getDocument() {
                                                      return /* binding */ _getDocument;
                                                   },
                                                /* harmony export */ version:
                                                   function version() {
                                                      return /* binding */ _version;
                                                   } /* harmony export */,
                                             },
                                          );
                                          /* unused harmony exports DefaultCanvasFactory, DefaultCMapReaderFactory, DefaultFilterFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorkerUtil, RenderTask */ /* harmony import */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ =
                                             __webpack_require__(292);
                                          /* harmony import */ _annotation_storage_js__WEBPACK_IMPORTED_MODULE_1__ =
                                             __webpack_require__(792);
                                          /* harmony import */ _display_utils_js__WEBPACK_IMPORTED_MODULE_2__ =
                                             __webpack_require__(419);
                                          /* harmony import */ _font_loader_js__WEBPACK_IMPORTED_MODULE_3__ =
                                             __webpack_require__(10);
                                          /* harmony import */ display_node_utils__WEBPACK_IMPORTED_MODULE_4__ =
                                             __webpack_require__(573);
                                          /* harmony import */ _canvas_js__WEBPACK_IMPORTED_MODULE_5__ =
                                             __webpack_require__(923);
                                          /* harmony import */ _text_layer_js__WEBPACK_IMPORTED_MODULE_6__ =
                                             __webpack_require__(814);
                                          /* harmony import */ _worker_options_js__WEBPACK_IMPORTED_MODULE_14__ =
                                             __webpack_require__(164);
                                          /* harmony import */ _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__ =
                                             __webpack_require__(178);
                                          /* harmony import */ _metadata_js__WEBPACK_IMPORTED_MODULE_8__ =
                                             __webpack_require__(62);
                                          /* harmony import */ _optional_content_config_js__WEBPACK_IMPORTED_MODULE_9__ =
                                             __webpack_require__(626);
                                          /* harmony import */ _transport_stream_js__WEBPACK_IMPORTED_MODULE_10__ =
                                             __webpack_require__(585);
                                          /* harmony import */ display_fetch_stream__WEBPACK_IMPORTED_MODULE_11__ =
                                             __webpack_require__(94);
                                          /* harmony import */ display_network__WEBPACK_IMPORTED_MODULE_12__ =
                                             __webpack_require__(457);
                                          /* harmony import */ display_node_stream__WEBPACK_IMPORTED_MODULE_13__ =
                                             __webpack_require__(786);
                                          /* harmony import */ _xfa_text_js__WEBPACK_IMPORTED_MODULE_15__ =
                                             __webpack_require__(50);
                                          __webpack_async_dependencies__ =
                                             __webpack_handle_async_dependencies__(
                                                [
                                                   display_node_utils__WEBPACK_IMPORTED_MODULE_4__,
                                                   display_node_stream__WEBPACK_IMPORTED_MODULE_13__,
                                                ],
                                             );
                                          if (
                                             !__webpack_async_dependencies__.then
                                          ) {
                                             _context9.n = 2;
                                             break;
                                          }
                                          _context9.n = 1;
                                          return __webpack_async_dependencies__;
                                       case 1:
                                          _t7 = _context9.v;
                                          _t6 = _t7();
                                          _context9.n = 3;
                                          break;
                                       case 2:
                                          _t6 = __webpack_async_dependencies__;
                                       case 3:
                                          _ref24 = _t6;
                                          _ref25 = _slicedToArray(_ref24, 2);
                                          display_node_utils__WEBPACK_IMPORTED_MODULE_4__ =
                                             _ref25[0];
                                          display_node_stream__WEBPACK_IMPORTED_MODULE_13__ =
                                             _ref25[1];
                                          DEFAULT_RANGE_CHUNK_SIZE = 65536;
                                          RENDERING_CANCELLED_TIMEOUT = 100;
                                          DELAYED_CLEANUP_TIMEOUT = 5000;
                                          DefaultCanvasFactory =
                                             _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS
                                                ? display_node_utils__WEBPACK_IMPORTED_MODULE_4__.NodeCanvasFactory
                                                : _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMCanvasFactory;
                                          DefaultCMapReaderFactory =
                                             _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS
                                                ? display_node_utils__WEBPACK_IMPORTED_MODULE_4__.NodeCMapReaderFactory
                                                : _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMCMapReaderFactory;
                                          DefaultFilterFactory =
                                             _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS
                                                ? display_node_utils__WEBPACK_IMPORTED_MODULE_4__.NodeFilterFactory
                                                : _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMFilterFactory;
                                          DefaultStandardFontDataFactory =
                                             _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS
                                                ? display_node_utils__WEBPACK_IMPORTED_MODULE_4__.NodeStandardFontDataFactory
                                                : _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMStandardFontDataFactory;
                                          PDFDocumentLoadingTask =
                                             /*#__PURE__*/ (function () {
                                                function PDFDocumentLoadingTask() {
                                                   var _PDFDocumentLoadingTa,
                                                      _PDFDocumentLoadingTa2;
                                                   _classCallCheck(
                                                      this,
                                                      PDFDocumentLoadingTask,
                                                   );
                                                   this._capability =
                                                      Promise.withResolvers();
                                                   this._transport = null;
                                                   this._worker = null;
                                                   this.docId = "d".concat(
                                                      ((_docId._ =
                                                         ((_PDFDocumentLoadingTa =
                                                            _docId._),
                                                         (_PDFDocumentLoadingTa2 =
                                                            _PDFDocumentLoadingTa++),
                                                         _PDFDocumentLoadingTa)),
                                                      _PDFDocumentLoadingTa2),
                                                   );
                                                   this.destroyed = false;
                                                   this.onPassword = null;
                                                   this.onProgress = null;
                                                }
                                                return _createClass(
                                                   PDFDocumentLoadingTask,
                                                   [
                                                      {
                                                         key: "promise",
                                                         get: function get() {
                                                            return this
                                                               ._capability
                                                               .promise;
                                                         },
                                                      },
                                                      {
                                                         key: "destroy",
                                                         value: (function () {
                                                            var _destroy =
                                                               _asyncToGenerator(
                                                                  /*#__PURE__*/ _regenerator().m(
                                                                     function _callee3() {
                                                                        var _this$_worker,
                                                                           _this$_transport,
                                                                           _this$_worker2,
                                                                           _t2;
                                                                        return _regenerator().w(
                                                                           function (
                                                                              _context3,
                                                                           ) {
                                                                              while (
                                                                                 1
                                                                              )
                                                                                 switch (
                                                                                    (_context3.p =
                                                                                       _context3.n)
                                                                                 ) {
                                                                                    case 0:
                                                                                       this.destroyed = true;
                                                                                       _context3.p = 1;
                                                                                       if (
                                                                                          (_this$_worker =
                                                                                             this
                                                                                                ._worker) !==
                                                                                             null &&
                                                                                          _this$_worker !==
                                                                                             void 0 &&
                                                                                          _this$_worker.port
                                                                                       ) {
                                                                                          this._worker._pendingDestroy = true;
                                                                                       }
                                                                                       _context3.n = 2;
                                                                                       return (_this$_transport =
                                                                                          this
                                                                                             ._transport) ===
                                                                                          null ||
                                                                                          _this$_transport ===
                                                                                             void 0
                                                                                          ? void 0
                                                                                          : _this$_transport.destroy();
                                                                                    case 2:
                                                                                       _context3.n = 4;
                                                                                       break;
                                                                                    case 3:
                                                                                       _context3.p = 3;
                                                                                       _t2 =
                                                                                          _context3.v;
                                                                                       if (
                                                                                          (_this$_worker2 =
                                                                                             this
                                                                                                ._worker) !==
                                                                                             null &&
                                                                                          _this$_worker2 !==
                                                                                             void 0 &&
                                                                                          _this$_worker2.port
                                                                                       ) {
                                                                                          delete this
                                                                                             ._worker
                                                                                             ._pendingDestroy;
                                                                                       }
                                                                                       throw _t2;
                                                                                    case 4:
                                                                                       this._transport =
                                                                                          null;
                                                                                       if (
                                                                                          this
                                                                                             ._worker
                                                                                       ) {
                                                                                          this._worker.destroy();
                                                                                          this._worker =
                                                                                             null;
                                                                                       }
                                                                                    case 5:
                                                                                       return _context3.a(
                                                                                          2,
                                                                                       );
                                                                                 }
                                                                           },
                                                                           _callee3,
                                                                           this,
                                                                           [
                                                                              [
                                                                                 1,
                                                                                 3,
                                                                              ],
                                                                           ],
                                                                        );
                                                                     },
                                                                  ),
                                                               );
                                                            function destroy() {
                                                               return _destroy.apply(
                                                                  this,
                                                                  arguments,
                                                               );
                                                            }
                                                            return destroy;
                                                         })(),
                                                      },
                                                   ],
                                                );
                                             })();
                                          _docId = { _: 0 };
                                          _PDFDataRangeTransport =
                                             /*#__PURE__*/ (function () {
                                                function _PDFDataRangeTransport(
                                                   length,
                                                   initialData,
                                                ) {
                                                   var progressiveDone =
                                                      arguments.length > 2 &&
                                                      arguments[2] !== undefined
                                                         ? arguments[2]
                                                         : false;
                                                   var contentDispositionFilename =
                                                      arguments.length > 3 &&
                                                      arguments[3] !== undefined
                                                         ? arguments[3]
                                                         : null;
                                                   _classCallCheck(
                                                      this,
                                                      _PDFDataRangeTransport,
                                                   );
                                                   this.length = length;
                                                   this.initialData =
                                                      initialData;
                                                   this.progressiveDone =
                                                      progressiveDone;
                                                   this.contentDispositionFilename =
                                                      contentDispositionFilename;
                                                   this._rangeListeners = [];
                                                   this._progressListeners = [];
                                                   this._progressiveReadListeners =
                                                      [];
                                                   this._progressiveDoneListeners =
                                                      [];
                                                   this._readyCapability =
                                                      Promise.withResolvers();
                                                }
                                                return _createClass(
                                                   _PDFDataRangeTransport,
                                                   [
                                                      {
                                                         key: "addRangeListener",
                                                         value: function addRangeListener(
                                                            listener,
                                                         ) {
                                                            this._rangeListeners.push(
                                                               listener,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "addProgressListener",
                                                         value: function addProgressListener(
                                                            listener,
                                                         ) {
                                                            this._progressListeners.push(
                                                               listener,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "addProgressiveReadListener",
                                                         value: function addProgressiveReadListener(
                                                            listener,
                                                         ) {
                                                            this._progressiveReadListeners.push(
                                                               listener,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "addProgressiveDoneListener",
                                                         value: function addProgressiveDoneListener(
                                                            listener,
                                                         ) {
                                                            this._progressiveDoneListeners.push(
                                                               listener,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "onDataRange",
                                                         value: function onDataRange(
                                                            begin,
                                                            chunk,
                                                         ) {
                                                            var _iterator32 =
                                                                  _createForOfIteratorHelper(
                                                                     this
                                                                        ._rangeListeners,
                                                                  ),
                                                               _step32;
                                                            try {
                                                               for (
                                                                  _iterator32.s();
                                                                  !(_step32 =
                                                                     _iterator32.n())
                                                                     .done;

                                                               ) {
                                                                  var listener =
                                                                     _step32.value;
                                                                  listener(
                                                                     begin,
                                                                     chunk,
                                                                  );
                                                               }
                                                            } catch (err) {
                                                               _iterator32.e(
                                                                  err,
                                                               );
                                                            } finally {
                                                               _iterator32.f();
                                                            }
                                                         },
                                                      },
                                                      {
                                                         key: "onDataProgress",
                                                         value: function onDataProgress(
                                                            loaded,
                                                            total,
                                                         ) {
                                                            var _this25 = this;
                                                            this._readyCapability.promise.then(
                                                               function () {
                                                                  var _iterator33 =
                                                                        _createForOfIteratorHelper(
                                                                           _this25._progressListeners,
                                                                        ),
                                                                     _step33;
                                                                  try {
                                                                     for (
                                                                        _iterator33.s();
                                                                        !(_step33 =
                                                                           _iterator33.n())
                                                                           .done;

                                                                     ) {
                                                                        var listener =
                                                                           _step33.value;
                                                                        listener(
                                                                           loaded,
                                                                           total,
                                                                        );
                                                                     }
                                                                  } catch (err) {
                                                                     _iterator33.e(
                                                                        err,
                                                                     );
                                                                  } finally {
                                                                     _iterator33.f();
                                                                  }
                                                               },
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "onDataProgressiveRead",
                                                         value: function onDataProgressiveRead(
                                                            chunk,
                                                         ) {
                                                            var _this26 = this;
                                                            this._readyCapability.promise.then(
                                                               function () {
                                                                  var _iterator34 =
                                                                        _createForOfIteratorHelper(
                                                                           _this26._progressiveReadListeners,
                                                                        ),
                                                                     _step34;
                                                                  try {
                                                                     for (
                                                                        _iterator34.s();
                                                                        !(_step34 =
                                                                           _iterator34.n())
                                                                           .done;

                                                                     ) {
                                                                        var listener =
                                                                           _step34.value;
                                                                        listener(
                                                                           chunk,
                                                                        );
                                                                     }
                                                                  } catch (err) {
                                                                     _iterator34.e(
                                                                        err,
                                                                     );
                                                                  } finally {
                                                                     _iterator34.f();
                                                                  }
                                                               },
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "onDataProgressiveDone",
                                                         value: function onDataProgressiveDone() {
                                                            var _this27 = this;
                                                            this._readyCapability.promise.then(
                                                               function () {
                                                                  var _iterator35 =
                                                                        _createForOfIteratorHelper(
                                                                           _this27._progressiveDoneListeners,
                                                                        ),
                                                                     _step35;
                                                                  try {
                                                                     for (
                                                                        _iterator35.s();
                                                                        !(_step35 =
                                                                           _iterator35.n())
                                                                           .done;

                                                                     ) {
                                                                        var listener =
                                                                           _step35.value;
                                                                        listener();
                                                                     }
                                                                  } catch (err) {
                                                                     _iterator35.e(
                                                                        err,
                                                                     );
                                                                  } finally {
                                                                     _iterator35.f();
                                                                  }
                                                               },
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "transportReady",
                                                         value: function transportReady() {
                                                            this._readyCapability.resolve();
                                                         },
                                                      },
                                                      {
                                                         key: "requestDataRange",
                                                         value: function requestDataRange(
                                                            begin,
                                                            end,
                                                         ) {
                                                            (0,
                                                            _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(
                                                               "Abstract method PDFDataRangeTransport.requestDataRange",
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "abort",
                                                         value: function abort() {},
                                                      },
                                                   ],
                                                );
                                             })();
                                          PDFDocumentProxy =
                                             /*#__PURE__*/ (function () {
                                                function PDFDocumentProxy(
                                                   pdfInfo,
                                                   transport,
                                                ) {
                                                   _classCallCheck(
                                                      this,
                                                      PDFDocumentProxy,
                                                   );
                                                   this._pdfInfo = pdfInfo;
                                                   this._transport = transport;
                                                }
                                                return _createClass(
                                                   PDFDocumentProxy,
                                                   [
                                                      {
                                                         key: "annotationStorage",
                                                         get: function get() {
                                                            return this
                                                               ._transport
                                                               .annotationStorage;
                                                         },
                                                      },
                                                      {
                                                         key: "filterFactory",
                                                         get: function get() {
                                                            return this
                                                               ._transport
                                                               .filterFactory;
                                                         },
                                                      },
                                                      {
                                                         key: "numPages",
                                                         get: function get() {
                                                            return this._pdfInfo
                                                               .numPages;
                                                         },
                                                      },
                                                      {
                                                         key: "fingerprints",
                                                         get: function get() {
                                                            return this._pdfInfo
                                                               .fingerprints;
                                                         },
                                                      },
                                                      {
                                                         key: "isPureXfa",
                                                         get: function get() {
                                                            return (0,
                                                            _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                                                               this,
                                                               "isPureXfa",
                                                               !!this._transport
                                                                  ._htmlForXfa,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "allXfaHtml",
                                                         get: function get() {
                                                            return this
                                                               ._transport
                                                               ._htmlForXfa;
                                                         },
                                                      },
                                                      {
                                                         key: "getPage",
                                                         value: function getPage(
                                                            pageNumber,
                                                         ) {
                                                            return this._transport.getPage(
                                                               pageNumber,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getPageIndex",
                                                         value: function getPageIndex(
                                                            ref,
                                                         ) {
                                                            return this._transport.getPageIndex(
                                                               ref,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getDestinations",
                                                         value: function getDestinations() {
                                                            return this._transport.getDestinations();
                                                         },
                                                      },
                                                      {
                                                         key: "getDestination",
                                                         value: function getDestination(
                                                            id,
                                                         ) {
                                                            return this._transport.getDestination(
                                                               id,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getPageLabels",
                                                         value: function getPageLabels() {
                                                            return this._transport.getPageLabels();
                                                         },
                                                      },
                                                      {
                                                         key: "getPageLayout",
                                                         value: function getPageLayout() {
                                                            return this._transport.getPageLayout();
                                                         },
                                                      },
                                                      {
                                                         key: "getPageMode",
                                                         value: function getPageMode() {
                                                            return this._transport.getPageMode();
                                                         },
                                                      },
                                                      {
                                                         key: "getViewerPreferences",
                                                         value: function getViewerPreferences() {
                                                            return this._transport.getViewerPreferences();
                                                         },
                                                      },
                                                      {
                                                         key: "getOpenAction",
                                                         value: function getOpenAction() {
                                                            return this._transport.getOpenAction();
                                                         },
                                                      },
                                                      {
                                                         key: "getAttachments",
                                                         value: function getAttachments() {
                                                            return this._transport.getAttachments();
                                                         },
                                                      },
                                                      {
                                                         key: "getJSActions",
                                                         value: function getJSActions() {
                                                            return this._transport.getDocJSActions();
                                                         },
                                                      },
                                                      {
                                                         key: "getOutline",
                                                         value: function getOutline() {
                                                            return this._transport.getOutline();
                                                         },
                                                      },
                                                      {
                                                         key: "getOptionalContentConfig",
                                                         value: function getOptionalContentConfig() {
                                                            var _ref29 =
                                                                  arguments.length >
                                                                     0 &&
                                                                  arguments[0] !==
                                                                     undefined
                                                                     ? arguments[0]
                                                                     : {},
                                                               _ref29$intent =
                                                                  _ref29.intent,
                                                               intent =
                                                                  _ref29$intent ===
                                                                  void 0
                                                                     ? "display"
                                                                     : _ref29$intent;
                                                            var _this$_transport$getR =
                                                                  this._transport.getRenderingIntent(
                                                                     intent,
                                                                  ),
                                                               renderingIntent =
                                                                  _this$_transport$getR.renderingIntent;
                                                            return this._transport.getOptionalContentConfig(
                                                               renderingIntent,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getPermissions",
                                                         value: function getPermissions() {
                                                            return this._transport.getPermissions();
                                                         },
                                                      },
                                                      {
                                                         key: "getMetadata",
                                                         value: function getMetadata() {
                                                            return this._transport.getMetadata();
                                                         },
                                                      },
                                                      {
                                                         key: "getMarkInfo",
                                                         value: function getMarkInfo() {
                                                            return this._transport.getMarkInfo();
                                                         },
                                                      },
                                                      {
                                                         key: "getData",
                                                         value: function getData() {
                                                            return this._transport.getData();
                                                         },
                                                      },
                                                      {
                                                         key: "saveDocument",
                                                         value: function saveDocument() {
                                                            return this._transport.saveDocument();
                                                         },
                                                      },
                                                      {
                                                         key: "getDownloadInfo",
                                                         value: function getDownloadInfo() {
                                                            return this
                                                               ._transport
                                                               .downloadInfoCapability
                                                               .promise;
                                                         },
                                                      },
                                                      {
                                                         key: "cleanup",
                                                         value: function cleanup() {
                                                            var keepLoadedFonts =
                                                               arguments.length >
                                                                  0 &&
                                                               arguments[0] !==
                                                                  undefined
                                                                  ? arguments[0]
                                                                  : false;
                                                            return this._transport.startCleanup(
                                                               keepLoadedFonts ||
                                                                  this
                                                                     .isPureXfa,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "destroy",
                                                         value: function destroy() {
                                                            return this.loadingTask.destroy();
                                                         },
                                                      },
                                                      {
                                                         key: "cachedPageNumber",
                                                         value: function cachedPageNumber(
                                                            ref,
                                                         ) {
                                                            return this._transport.cachedPageNumber(
                                                               ref,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "loadingParams",
                                                         get: function get() {
                                                            return this
                                                               ._transport
                                                               .loadingParams;
                                                         },
                                                      },
                                                      {
                                                         key: "loadingTask",
                                                         get: function get() {
                                                            return this
                                                               ._transport
                                                               .loadingTask;
                                                         },
                                                      },
                                                      {
                                                         key: "getFieldObjects",
                                                         value: function getFieldObjects() {
                                                            return this._transport.getFieldObjects();
                                                         },
                                                      },
                                                      {
                                                         key: "hasJSActions",
                                                         value: function hasJSActions() {
                                                            return this._transport.hasJSActions();
                                                         },
                                                      },
                                                      {
                                                         key: "getCalculationOrderIds",
                                                         value: function getCalculationOrderIds() {
                                                            return this._transport.getCalculationOrderIds();
                                                         },
                                                      },
                                                   ],
                                                );
                                             })();
                                          _delayedCleanupTimeout =
                                             /*#__PURE__*/ new WeakMap();
                                          _pendingCleanup =
                                             /*#__PURE__*/ new WeakMap();
                                          _PDFPageProxy_brand =
                                             /*#__PURE__*/ new WeakSet();
                                          PDFPageProxy =
                                             /*#__PURE__*/ (function () {
                                                function PDFPageProxy(
                                                   pageIndex,
                                                   pageInfo,
                                                   transport,
                                                ) {
                                                   var pdfBug =
                                                      arguments.length > 3 &&
                                                      arguments[3] !== undefined
                                                         ? arguments[3]
                                                         : false;
                                                   _classCallCheck(
                                                      this,
                                                      PDFPageProxy,
                                                   );
                                                   _classPrivateMethodInitSpec(
                                                      this,
                                                      _PDFPageProxy_brand,
                                                   );
                                                   _classPrivateFieldInitSpec(
                                                      this,
                                                      _delayedCleanupTimeout,
                                                      null,
                                                   );
                                                   _classPrivateFieldInitSpec(
                                                      this,
                                                      _pendingCleanup,
                                                      false,
                                                   );
                                                   this._pageIndex = pageIndex;
                                                   this._pageInfo = pageInfo;
                                                   this._transport = transport;
                                                   this._stats = pdfBug
                                                      ? new _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.StatTimer()
                                                      : null;
                                                   this._pdfBug = pdfBug;
                                                   this.commonObjs =
                                                      transport.commonObjs;
                                                   this.objs = new PDFObjects();
                                                   this._maybeCleanupAfterRender = false;
                                                   this._intentStates =
                                                      new Map();
                                                   this.destroyed = false;
                                                }
                                                return _createClass(
                                                   PDFPageProxy,
                                                   [
                                                      {
                                                         key: "pageNumber",
                                                         get: function get() {
                                                            return (
                                                               this._pageIndex +
                                                               1
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "rotate",
                                                         get: function get() {
                                                            return this
                                                               ._pageInfo
                                                               .rotate;
                                                         },
                                                      },
                                                      {
                                                         key: "ref",
                                                         get: function get() {
                                                            return this
                                                               ._pageInfo.ref;
                                                         },
                                                      },
                                                      {
                                                         key: "userUnit",
                                                         get: function get() {
                                                            return this
                                                               ._pageInfo
                                                               .userUnit;
                                                         },
                                                      },
                                                      {
                                                         key: "view",
                                                         get: function get() {
                                                            return this
                                                               ._pageInfo.view;
                                                         },
                                                      },
                                                      {
                                                         key: "getViewport",
                                                         value: function getViewport() {
                                                            var _ref30 =
                                                                  arguments.length >
                                                                     0 &&
                                                                  arguments[0] !==
                                                                     undefined
                                                                     ? arguments[0]
                                                                     : {},
                                                               scale =
                                                                  _ref30.scale,
                                                               _ref30$rotation =
                                                                  _ref30.rotation,
                                                               rotation =
                                                                  _ref30$rotation ===
                                                                  void 0
                                                                     ? this
                                                                          .rotate
                                                                     : _ref30$rotation,
                                                               _ref30$offsetX =
                                                                  _ref30.offsetX,
                                                               offsetX =
                                                                  _ref30$offsetX ===
                                                                  void 0
                                                                     ? 0
                                                                     : _ref30$offsetX,
                                                               _ref30$offsetY =
                                                                  _ref30.offsetY,
                                                               offsetY =
                                                                  _ref30$offsetY ===
                                                                  void 0
                                                                     ? 0
                                                                     : _ref30$offsetY,
                                                               _ref30$dontFlip =
                                                                  _ref30.dontFlip,
                                                               dontFlip =
                                                                  _ref30$dontFlip ===
                                                                  void 0
                                                                     ? false
                                                                     : _ref30$dontFlip;
                                                            return new _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.PageViewport(
                                                               {
                                                                  viewBox:
                                                                     this.view,
                                                                  scale: scale,
                                                                  rotation:
                                                                     rotation,
                                                                  offsetX:
                                                                     offsetX,
                                                                  offsetY:
                                                                     offsetY,
                                                                  dontFlip:
                                                                     dontFlip,
                                                               },
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getAnnotations",
                                                         value: function getAnnotations() {
                                                            var _ref31 =
                                                                  arguments.length >
                                                                     0 &&
                                                                  arguments[0] !==
                                                                     undefined
                                                                     ? arguments[0]
                                                                     : {},
                                                               _ref31$intent =
                                                                  _ref31.intent,
                                                               intent =
                                                                  _ref31$intent ===
                                                                  void 0
                                                                     ? "display"
                                                                     : _ref31$intent;
                                                            var _this$_transport$getR2 =
                                                                  this._transport.getRenderingIntent(
                                                                     intent,
                                                                  ),
                                                               renderingIntent =
                                                                  _this$_transport$getR2.renderingIntent;
                                                            return this._transport.getAnnotations(
                                                               this._pageIndex,
                                                               renderingIntent,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getJSActions",
                                                         value: function getJSActions() {
                                                            return this._transport.getPageJSActions(
                                                               this._pageIndex,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "filterFactory",
                                                         get: function get() {
                                                            return this
                                                               ._transport
                                                               .filterFactory;
                                                         },
                                                      },
                                                      {
                                                         key: "isPureXfa",
                                                         get: function get() {
                                                            return (0,
                                                            _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                                                               this,
                                                               "isPureXfa",
                                                               !!this._transport
                                                                  ._htmlForXfa,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getXfa",
                                                         value: (function () {
                                                            var _getXfa =
                                                               _asyncToGenerator(
                                                                  /*#__PURE__*/ _regenerator().m(
                                                                     function _callee4() {
                                                                        var _this$_transport$_htm;
                                                                        return _regenerator().w(
                                                                           function (
                                                                              _context4,
                                                                           ) {
                                                                              while (
                                                                                 1
                                                                              )
                                                                                 switch (
                                                                                    _context4.n
                                                                                 ) {
                                                                                    case 0:
                                                                                       return _context4.a(
                                                                                          2,
                                                                                          ((_this$_transport$_htm =
                                                                                             this
                                                                                                ._transport
                                                                                                ._htmlForXfa) ===
                                                                                             null ||
                                                                                          _this$_transport$_htm ===
                                                                                             void 0
                                                                                             ? void 0
                                                                                             : _this$_transport$_htm
                                                                                                  .children[
                                                                                                  this
                                                                                                     ._pageIndex
                                                                                               ]) ||
                                                                                             null,
                                                                                       );
                                                                                 }
                                                                           },
                                                                           _callee4,
                                                                           this,
                                                                        );
                                                                     },
                                                                  ),
                                                               );
                                                            function getXfa() {
                                                               return _getXfa.apply(
                                                                  this,
                                                                  arguments,
                                                               );
                                                            }
                                                            return getXfa;
                                                         })(),
                                                      },
                                                      {
                                                         key: "render",
                                                         value: function render(
                                                            _ref32,
                                                         ) {
                                                            var _this$_stats,
                                                               _this28 = this,
                                                               _intentState;
                                                            var canvasContext =
                                                                  _ref32.canvasContext,
                                                               viewport =
                                                                  _ref32.viewport,
                                                               _ref32$intent =
                                                                  _ref32.intent,
                                                               intent =
                                                                  _ref32$intent ===
                                                                  void 0
                                                                     ? "display"
                                                                     : _ref32$intent,
                                                               _ref32$annotationMode =
                                                                  _ref32.annotationMode,
                                                               annotationMode =
                                                                  _ref32$annotationMode ===
                                                                  void 0
                                                                     ? _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                          .AnnotationMode
                                                                          .ENABLE
                                                                     : _ref32$annotationMode,
                                                               _ref32$transform =
                                                                  _ref32.transform,
                                                               transform =
                                                                  _ref32$transform ===
                                                                  void 0
                                                                     ? null
                                                                     : _ref32$transform,
                                                               _ref32$background =
                                                                  _ref32.background,
                                                               background =
                                                                  _ref32$background ===
                                                                  void 0
                                                                     ? null
                                                                     : _ref32$background,
                                                               _ref32$optionalConten =
                                                                  _ref32.optionalContentConfigPromise,
                                                               optionalContentConfigPromise =
                                                                  _ref32$optionalConten ===
                                                                  void 0
                                                                     ? null
                                                                     : _ref32$optionalConten,
                                                               _ref32$annotationCanv =
                                                                  _ref32.annotationCanvasMap,
                                                               annotationCanvasMap =
                                                                  _ref32$annotationCanv ===
                                                                  void 0
                                                                     ? null
                                                                     : _ref32$annotationCanv,
                                                               _ref32$pageColors =
                                                                  _ref32.pageColors,
                                                               pageColors =
                                                                  _ref32$pageColors ===
                                                                  void 0
                                                                     ? null
                                                                     : _ref32$pageColors,
                                                               _ref32$printAnnotatio =
                                                                  _ref32.printAnnotationStorage,
                                                               printAnnotationStorage =
                                                                  _ref32$printAnnotatio ===
                                                                  void 0
                                                                     ? null
                                                                     : _ref32$printAnnotatio;
                                                            (_this$_stats =
                                                               this._stats) ===
                                                               null ||
                                                               _this$_stats ===
                                                                  void 0 ||
                                                               _this$_stats.time(
                                                                  "Overall",
                                                               );
                                                            var intentArgs =
                                                               this._transport.getRenderingIntent(
                                                                  intent,
                                                                  annotationMode,
                                                                  printAnnotationStorage,
                                                               );
                                                            var renderingIntent =
                                                                  intentArgs.renderingIntent,
                                                               cacheKey =
                                                                  intentArgs.cacheKey;
                                                            _classPrivateFieldSet(
                                                               _pendingCleanup,
                                                               this,
                                                               false,
                                                            );
                                                            _assertClassBrand(
                                                               _PDFPageProxy_brand,
                                                               this,
                                                               _abortDelayedCleanup,
                                                            ).call(this);
                                                            optionalContentConfigPromise ||
                                                               (optionalContentConfigPromise =
                                                                  this._transport.getOptionalContentConfig(
                                                                     renderingIntent,
                                                                  ));
                                                            var intentState =
                                                               this._intentStates.get(
                                                                  cacheKey,
                                                               );
                                                            if (!intentState) {
                                                               intentState =
                                                                  Object.create(
                                                                     null,
                                                                  );
                                                               this._intentStates.set(
                                                                  cacheKey,
                                                                  intentState,
                                                               );
                                                            }
                                                            if (
                                                               intentState.streamReaderCancelTimeout
                                                            ) {
                                                               clearTimeout(
                                                                  intentState.streamReaderCancelTimeout,
                                                               );
                                                               intentState.streamReaderCancelTimeout =
                                                                  null;
                                                            }
                                                            var intentPrint =
                                                               !!(
                                                                  renderingIntent &
                                                                  _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                     .RenderingIntentFlag
                                                                     .PRINT
                                                               );
                                                            if (
                                                               !intentState.displayReadyCapability
                                                            ) {
                                                               var _this$_stats2;
                                                               intentState.displayReadyCapability =
                                                                  Promise.withResolvers();
                                                               intentState.operatorList =
                                                                  {
                                                                     fnArray:
                                                                        [],
                                                                     argsArray:
                                                                        [],
                                                                     lastChunk: false,
                                                                     separateAnnots:
                                                                        null,
                                                                  };
                                                               (_this$_stats2 =
                                                                  this
                                                                     ._stats) ===
                                                                  null ||
                                                                  _this$_stats2 ===
                                                                     void 0 ||
                                                                  _this$_stats2.time(
                                                                     "Page Request",
                                                                  );
                                                               this._pumpOperatorList(
                                                                  intentArgs,
                                                               );
                                                            }
                                                            var complete =
                                                               function complete(
                                                                  error,
                                                               ) {
                                                                  var _this28$_stats,
                                                                     _this28$_stats2;
                                                                  intentState.renderTasks[
                                                                     "delete"
                                                                  ](
                                                                     internalRenderTask,
                                                                  );
                                                                  if (
                                                                     _this28._maybeCleanupAfterRender ||
                                                                     intentPrint
                                                                  ) {
                                                                     _classPrivateFieldSet(
                                                                        _pendingCleanup,
                                                                        _this28,
                                                                        true,
                                                                     );
                                                                  }
                                                                  _assertClassBrand(
                                                                     _PDFPageProxy_brand,
                                                                     _this28,
                                                                     _tryCleanup,
                                                                  ).call(
                                                                     _this28,
                                                                     !intentPrint,
                                                                  );
                                                                  if (error) {
                                                                     internalRenderTask.capability.reject(
                                                                        error,
                                                                     );
                                                                     _this28._abortOperatorList(
                                                                        {
                                                                           intentState:
                                                                              intentState,
                                                                           reason:
                                                                              error instanceof
                                                                              Error
                                                                                 ? error
                                                                                 : new Error(
                                                                                      error,
                                                                                   ),
                                                                        },
                                                                     );
                                                                  } else {
                                                                     internalRenderTask.capability.resolve();
                                                                  }
                                                                  (_this28$_stats =
                                                                     _this28._stats) ===
                                                                     null ||
                                                                     _this28$_stats ===
                                                                        void 0 ||
                                                                     _this28$_stats.timeEnd(
                                                                        "Rendering",
                                                                     );
                                                                  (_this28$_stats2 =
                                                                     _this28._stats) ===
                                                                     null ||
                                                                     _this28$_stats2 ===
                                                                        void 0 ||
                                                                     _this28$_stats2.timeEnd(
                                                                        "Overall",
                                                                     );
                                                               };
                                                            var internalRenderTask =
                                                               new InternalRenderTask(
                                                                  {
                                                                     callback:
                                                                        complete,
                                                                     params: {
                                                                        canvasContext:
                                                                           canvasContext,
                                                                        viewport:
                                                                           viewport,
                                                                        transform:
                                                                           transform,
                                                                        background:
                                                                           background,
                                                                     },
                                                                     objs: this
                                                                        .objs,
                                                                     commonObjs:
                                                                        this
                                                                           .commonObjs,
                                                                     annotationCanvasMap:
                                                                        annotationCanvasMap,
                                                                     operatorList:
                                                                        intentState.operatorList,
                                                                     pageIndex:
                                                                        this
                                                                           ._pageIndex,
                                                                     canvasFactory:
                                                                        this
                                                                           ._transport
                                                                           .canvasFactory,
                                                                     filterFactory:
                                                                        this
                                                                           ._transport
                                                                           .filterFactory,
                                                                     useRequestAnimationFrame:
                                                                        !intentPrint,
                                                                     pdfBug:
                                                                        this
                                                                           ._pdfBug,
                                                                     pageColors:
                                                                        pageColors,
                                                                  },
                                                               );
                                                            (
                                                               (_intentState =
                                                                  intentState)
                                                                  .renderTasks ||
                                                               (_intentState.renderTasks =
                                                                  new Set())
                                                            ).add(
                                                               internalRenderTask,
                                                            );
                                                            var renderTask =
                                                               internalRenderTask.task;
                                                            Promise.all([
                                                               intentState
                                                                  .displayReadyCapability
                                                                  .promise,
                                                               optionalContentConfigPromise,
                                                            ])
                                                               .then(
                                                                  function (
                                                                     _ref33,
                                                                  ) {
                                                                     var _this28$_stats3;
                                                                     var _ref34 =
                                                                           _slicedToArray(
                                                                              _ref33,
                                                                              2,
                                                                           ),
                                                                        transparency =
                                                                           _ref34[0],
                                                                        optionalContentConfig =
                                                                           _ref34[1];
                                                                     if (
                                                                        _this28.destroyed
                                                                     ) {
                                                                        complete();
                                                                        return;
                                                                     }
                                                                     (_this28$_stats3 =
                                                                        _this28._stats) ===
                                                                        null ||
                                                                        _this28$_stats3 ===
                                                                           void 0 ||
                                                                        _this28$_stats3.time(
                                                                           "Rendering",
                                                                        );
                                                                     if (
                                                                        !(
                                                                           optionalContentConfig.renderingIntent &
                                                                           renderingIntent
                                                                        )
                                                                     ) {
                                                                        throw new Error(
                                                                           "Must use the same `intent`-argument when calling the `PDFPageProxy.render` " +
                                                                              "and `PDFDocumentProxy.getOptionalContentConfig` methods.",
                                                                        );
                                                                     }
                                                                     internalRenderTask.initializeGraphics(
                                                                        {
                                                                           transparency:
                                                                              transparency,
                                                                           optionalContentConfig:
                                                                              optionalContentConfig,
                                                                        },
                                                                     );
                                                                     internalRenderTask.operatorListChanged();
                                                                  },
                                                               )
                                                               ["catch"](
                                                                  complete,
                                                               );
                                                            return renderTask;
                                                         },
                                                      },
                                                      {
                                                         key: "getOperatorList",
                                                         value: function getOperatorList() {
                                                            var _ref35 =
                                                                  arguments.length >
                                                                     0 &&
                                                                  arguments[0] !==
                                                                     undefined
                                                                     ? arguments[0]
                                                                     : {},
                                                               _ref35$intent =
                                                                  _ref35.intent,
                                                               intent =
                                                                  _ref35$intent ===
                                                                  void 0
                                                                     ? "display"
                                                                     : _ref35$intent,
                                                               _ref35$annotationMode =
                                                                  _ref35.annotationMode,
                                                               annotationMode =
                                                                  _ref35$annotationMode ===
                                                                  void 0
                                                                     ? _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                          .AnnotationMode
                                                                          .ENABLE
                                                                     : _ref35$annotationMode,
                                                               _ref35$printAnnotatio =
                                                                  _ref35.printAnnotationStorage,
                                                               printAnnotationStorage =
                                                                  _ref35$printAnnotatio ===
                                                                  void 0
                                                                     ? null
                                                                     : _ref35$printAnnotatio;
                                                            function operatorListChanged() {
                                                               if (
                                                                  intentState
                                                                     .operatorList
                                                                     .lastChunk
                                                               ) {
                                                                  intentState.opListReadCapability.resolve(
                                                                     intentState.operatorList,
                                                                  );
                                                                  intentState.renderTasks[
                                                                     "delete"
                                                                  ](opListTask);
                                                               }
                                                            }
                                                            var intentArgs =
                                                               this._transport.getRenderingIntent(
                                                                  intent,
                                                                  annotationMode,
                                                                  printAnnotationStorage,
                                                                  true,
                                                               );
                                                            var intentState =
                                                               this._intentStates.get(
                                                                  intentArgs.cacheKey,
                                                               );
                                                            if (!intentState) {
                                                               intentState =
                                                                  Object.create(
                                                                     null,
                                                                  );
                                                               this._intentStates.set(
                                                                  intentArgs.cacheKey,
                                                                  intentState,
                                                               );
                                                            }
                                                            var opListTask;
                                                            if (
                                                               !intentState.opListReadCapability
                                                            ) {
                                                               var _intentState2,
                                                                  _this$_stats3;
                                                               opListTask =
                                                                  Object.create(
                                                                     null,
                                                                  );
                                                               opListTask.operatorListChanged =
                                                                  operatorListChanged;
                                                               intentState.opListReadCapability =
                                                                  Promise.withResolvers();
                                                               (
                                                                  (_intentState2 =
                                                                     intentState)
                                                                     .renderTasks ||
                                                                  (_intentState2.renderTasks =
                                                                     new Set())
                                                               ).add(
                                                                  opListTask,
                                                               );
                                                               intentState.operatorList =
                                                                  {
                                                                     fnArray:
                                                                        [],
                                                                     argsArray:
                                                                        [],
                                                                     lastChunk: false,
                                                                     separateAnnots:
                                                                        null,
                                                                  };
                                                               (_this$_stats3 =
                                                                  this
                                                                     ._stats) ===
                                                                  null ||
                                                                  _this$_stats3 ===
                                                                     void 0 ||
                                                                  _this$_stats3.time(
                                                                     "Page Request",
                                                                  );
                                                               this._pumpOperatorList(
                                                                  intentArgs,
                                                               );
                                                            }
                                                            return intentState
                                                               .opListReadCapability
                                                               .promise;
                                                         },
                                                      },
                                                      {
                                                         key: "streamTextContent",
                                                         value: function streamTextContent() {
                                                            var _ref36 =
                                                                  arguments.length >
                                                                     0 &&
                                                                  arguments[0] !==
                                                                     undefined
                                                                     ? arguments[0]
                                                                     : {},
                                                               _ref36$includeMarkedC =
                                                                  _ref36.includeMarkedContent,
                                                               includeMarkedContent =
                                                                  _ref36$includeMarkedC ===
                                                                  void 0
                                                                     ? false
                                                                     : _ref36$includeMarkedC,
                                                               _ref36$disableNormali =
                                                                  _ref36.disableNormalization,
                                                               disableNormalization =
                                                                  _ref36$disableNormali ===
                                                                  void 0
                                                                     ? false
                                                                     : _ref36$disableNormali;
                                                            var TEXT_CONTENT_CHUNK_SIZE = 100;
                                                            return this._transport.messageHandler.sendWithStream(
                                                               "GetTextContent",
                                                               {
                                                                  pageIndex:
                                                                     this
                                                                        ._pageIndex,
                                                                  includeMarkedContent:
                                                                     includeMarkedContent ===
                                                                     true,
                                                                  disableNormalization:
                                                                     disableNormalization ===
                                                                     true,
                                                               },
                                                               {
                                                                  highWaterMark:
                                                                     TEXT_CONTENT_CHUNK_SIZE,
                                                                  size: function size(
                                                                     textContent,
                                                                  ) {
                                                                     return textContent
                                                                        .items
                                                                        .length;
                                                                  },
                                                               },
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getTextContent",
                                                         value: function getTextContent() {
                                                            var params =
                                                               arguments.length >
                                                                  0 &&
                                                               arguments[0] !==
                                                                  undefined
                                                                  ? arguments[0]
                                                                  : {};
                                                            if (
                                                               this._transport
                                                                  ._htmlForXfa
                                                            ) {
                                                               return this.getXfa().then(
                                                                  function (
                                                                     xfa,
                                                                  ) {
                                                                     return _xfa_text_js__WEBPACK_IMPORTED_MODULE_15__.XfaText.textContent(
                                                                        xfa,
                                                                     );
                                                                  },
                                                               );
                                                            }
                                                            var readableStream =
                                                               this.streamTextContent(
                                                                  params,
                                                               );
                                                            return new Promise(
                                                               function (
                                                                  resolve,
                                                                  reject,
                                                               ) {
                                                                  function pump() {
                                                                     reader
                                                                        .read()
                                                                        .then(
                                                                           function (
                                                                              _ref37,
                                                                           ) {
                                                                              var _textContent$items;
                                                                              var value =
                                                                                    _ref37.value,
                                                                                 done =
                                                                                    _ref37.done;
                                                                              if (
                                                                                 done
                                                                              ) {
                                                                                 resolve(
                                                                                    textContent,
                                                                                 );
                                                                                 return;
                                                                              }
                                                                              Object.assign(
                                                                                 textContent.styles,
                                                                                 value.styles,
                                                                              );
                                                                              (_textContent$items =
                                                                                 textContent.items).push.apply(
                                                                                 _textContent$items,
                                                                                 _toConsumableArray(
                                                                                    value.items,
                                                                                 ),
                                                                              );
                                                                              pump();
                                                                           },
                                                                           reject,
                                                                        );
                                                                  }
                                                                  var reader =
                                                                     readableStream.getReader();
                                                                  var textContent =
                                                                     {
                                                                        items: [],
                                                                        styles:
                                                                           Object.create(
                                                                              null,
                                                                           ),
                                                                     };
                                                                  pump();
                                                               },
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getStructTree",
                                                         value: function getStructTree() {
                                                            return this._transport.getStructTree(
                                                               this._pageIndex,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "_destroy",
                                                         value: function _destroy() {
                                                            this.destroyed = true;
                                                            var waitOn = [];
                                                            var _iterator36 =
                                                                  _createForOfIteratorHelper(
                                                                     this._intentStates.values(),
                                                                  ),
                                                               _step36;
                                                            try {
                                                               for (
                                                                  _iterator36.s();
                                                                  !(_step36 =
                                                                     _iterator36.n())
                                                                     .done;

                                                               ) {
                                                                  var intentState =
                                                                     _step36.value;
                                                                  this._abortOperatorList(
                                                                     {
                                                                        intentState:
                                                                           intentState,
                                                                        reason:
                                                                           new Error(
                                                                              "Page was destroyed.",
                                                                           ),
                                                                        force: true,
                                                                     },
                                                                  );
                                                                  if (
                                                                     intentState.opListReadCapability
                                                                  ) {
                                                                     continue;
                                                                  }
                                                                  var _iterator37 =
                                                                        _createForOfIteratorHelper(
                                                                           intentState.renderTasks,
                                                                        ),
                                                                     _step37;
                                                                  try {
                                                                     for (
                                                                        _iterator37.s();
                                                                        !(_step37 =
                                                                           _iterator37.n())
                                                                           .done;

                                                                     ) {
                                                                        var internalRenderTask =
                                                                           _step37.value;
                                                                        waitOn.push(
                                                                           internalRenderTask.completed,
                                                                        );
                                                                        internalRenderTask.cancel();
                                                                     }
                                                                  } catch (err) {
                                                                     _iterator37.e(
                                                                        err,
                                                                     );
                                                                  } finally {
                                                                     _iterator37.f();
                                                                  }
                                                               }
                                                            } catch (err) {
                                                               _iterator36.e(
                                                                  err,
                                                               );
                                                            } finally {
                                                               _iterator36.f();
                                                            }
                                                            this.objs.clear();
                                                            _classPrivateFieldSet(
                                                               _pendingCleanup,
                                                               this,
                                                               false,
                                                            );
                                                            _assertClassBrand(
                                                               _PDFPageProxy_brand,
                                                               this,
                                                               _abortDelayedCleanup,
                                                            ).call(this);
                                                            return Promise.all(
                                                               waitOn,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "cleanup",
                                                         value: function cleanup() {
                                                            var resetStats =
                                                               arguments.length >
                                                                  0 &&
                                                               arguments[0] !==
                                                                  undefined
                                                                  ? arguments[0]
                                                                  : false;
                                                            _classPrivateFieldSet(
                                                               _pendingCleanup,
                                                               this,
                                                               true,
                                                            );
                                                            var success =
                                                               _assertClassBrand(
                                                                  _PDFPageProxy_brand,
                                                                  this,
                                                                  _tryCleanup,
                                                               ).call(
                                                                  this,
                                                                  false,
                                                               );
                                                            if (
                                                               resetStats &&
                                                               success
                                                            ) {
                                                               this._stats &&
                                                                  (this._stats =
                                                                     new _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.StatTimer());
                                                            }
                                                            return success;
                                                         },
                                                      },
                                                      {
                                                         key: "_startRenderPage",
                                                         value: function _startRenderPage(
                                                            transparency,
                                                            cacheKey,
                                                         ) {
                                                            var _this$_stats4,
                                                               _intentState$displayR;
                                                            var intentState =
                                                               this._intentStates.get(
                                                                  cacheKey,
                                                               );
                                                            if (!intentState) {
                                                               return;
                                                            }
                                                            (_this$_stats4 =
                                                               this._stats) ===
                                                               null ||
                                                               _this$_stats4 ===
                                                                  void 0 ||
                                                               _this$_stats4.timeEnd(
                                                                  "Page Request",
                                                               );
                                                            (_intentState$displayR =
                                                               intentState.displayReadyCapability) ===
                                                               null ||
                                                               _intentState$displayR ===
                                                                  void 0 ||
                                                               _intentState$displayR.resolve(
                                                                  transparency,
                                                               );
                                                         },
                                                      },
                                                      {
                                                         key: "_renderPageChunk",
                                                         value: function _renderPageChunk(
                                                            operatorListChunk,
                                                            intentState,
                                                         ) {
                                                            for (
                                                               var i = 0,
                                                                  ii =
                                                                     operatorListChunk.length;
                                                               i < ii;
                                                               i++
                                                            ) {
                                                               intentState.operatorList.fnArray.push(
                                                                  operatorListChunk
                                                                     .fnArray[
                                                                     i
                                                                  ],
                                                               );
                                                               intentState.operatorList.argsArray.push(
                                                                  operatorListChunk
                                                                     .argsArray[
                                                                     i
                                                                  ],
                                                               );
                                                            }
                                                            intentState.operatorList.lastChunk =
                                                               operatorListChunk.lastChunk;
                                                            intentState.operatorList.separateAnnots =
                                                               operatorListChunk.separateAnnots;
                                                            var _iterator38 =
                                                                  _createForOfIteratorHelper(
                                                                     intentState.renderTasks,
                                                                  ),
                                                               _step38;
                                                            try {
                                                               for (
                                                                  _iterator38.s();
                                                                  !(_step38 =
                                                                     _iterator38.n())
                                                                     .done;

                                                               ) {
                                                                  var internalRenderTask =
                                                                     _step38.value;
                                                                  internalRenderTask.operatorListChanged();
                                                               }
                                                            } catch (err) {
                                                               _iterator38.e(
                                                                  err,
                                                               );
                                                            } finally {
                                                               _iterator38.f();
                                                            }
                                                            if (
                                                               operatorListChunk.lastChunk
                                                            ) {
                                                               _assertClassBrand(
                                                                  _PDFPageProxy_brand,
                                                                  this,
                                                                  _tryCleanup,
                                                               ).call(
                                                                  this,
                                                                  true,
                                                               );
                                                            }
                                                         },
                                                      },
                                                      {
                                                         key: "_pumpOperatorList",
                                                         value: function _pumpOperatorList(
                                                            _ref38,
                                                         ) {
                                                            var _this29 = this;
                                                            var renderingIntent =
                                                                  _ref38.renderingIntent,
                                                               cacheKey =
                                                                  _ref38.cacheKey,
                                                               annotationStorageSerializable =
                                                                  _ref38.annotationStorageSerializable;
                                                            var map =
                                                                  annotationStorageSerializable.map,
                                                               transfer =
                                                                  annotationStorageSerializable.transfer;
                                                            var readableStream =
                                                               this._transport.messageHandler.sendWithStream(
                                                                  "GetOperatorList",
                                                                  {
                                                                     pageIndex:
                                                                        this
                                                                           ._pageIndex,
                                                                     intent:
                                                                        renderingIntent,
                                                                     cacheKey:
                                                                        cacheKey,
                                                                     annotationStorage:
                                                                        map,
                                                                  },
                                                                  transfer,
                                                               );
                                                            var reader =
                                                               readableStream.getReader();
                                                            var intentState =
                                                               this._intentStates.get(
                                                                  cacheKey,
                                                               );
                                                            intentState.streamReader =
                                                               reader;
                                                            var _pump =
                                                               function pump() {
                                                                  reader
                                                                     .read()
                                                                     .then(
                                                                        function (
                                                                           _ref39,
                                                                        ) {
                                                                           var value =
                                                                                 _ref39.value,
                                                                              done =
                                                                                 _ref39.done;
                                                                           if (
                                                                              done
                                                                           ) {
                                                                              intentState.streamReader =
                                                                                 null;
                                                                              return;
                                                                           }
                                                                           if (
                                                                              _this29
                                                                                 ._transport
                                                                                 .destroyed
                                                                           ) {
                                                                              return;
                                                                           }
                                                                           _this29._renderPageChunk(
                                                                              value,
                                                                              intentState,
                                                                           );
                                                                           _pump();
                                                                        },
                                                                        function (
                                                                           reason,
                                                                        ) {
                                                                           intentState.streamReader =
                                                                              null;
                                                                           if (
                                                                              _this29
                                                                                 ._transport
                                                                                 .destroyed
                                                                           ) {
                                                                              return;
                                                                           }
                                                                           if (
                                                                              intentState.operatorList
                                                                           ) {
                                                                              intentState.operatorList.lastChunk = true;
                                                                              var _iterator39 =
                                                                                    _createForOfIteratorHelper(
                                                                                       intentState.renderTasks,
                                                                                    ),
                                                                                 _step39;
                                                                              try {
                                                                                 for (
                                                                                    _iterator39.s();
                                                                                    !(_step39 =
                                                                                       _iterator39.n())
                                                                                       .done;

                                                                                 ) {
                                                                                    var internalRenderTask =
                                                                                       _step39.value;
                                                                                    internalRenderTask.operatorListChanged();
                                                                                 }
                                                                              } catch (err) {
                                                                                 _iterator39.e(
                                                                                    err,
                                                                                 );
                                                                              } finally {
                                                                                 _iterator39.f();
                                                                              }
                                                                              _assertClassBrand(
                                                                                 _PDFPageProxy_brand,
                                                                                 _this29,
                                                                                 _tryCleanup,
                                                                              ).call(
                                                                                 _this29,
                                                                                 true,
                                                                              );
                                                                           }
                                                                           if (
                                                                              intentState.displayReadyCapability
                                                                           ) {
                                                                              intentState.displayReadyCapability.reject(
                                                                                 reason,
                                                                              );
                                                                           } else if (
                                                                              intentState.opListReadCapability
                                                                           ) {
                                                                              intentState.opListReadCapability.reject(
                                                                                 reason,
                                                                              );
                                                                           } else {
                                                                              throw reason;
                                                                           }
                                                                        },
                                                                     );
                                                               };
                                                            _pump();
                                                         },
                                                      },
                                                      {
                                                         key: "_abortOperatorList",
                                                         value: function _abortOperatorList(
                                                            _ref40,
                                                         ) {
                                                            var _this30 = this;
                                                            var intentState =
                                                                  _ref40.intentState,
                                                               reason =
                                                                  _ref40.reason,
                                                               _ref40$force =
                                                                  _ref40.force,
                                                               force =
                                                                  _ref40$force ===
                                                                  void 0
                                                                     ? false
                                                                     : _ref40$force;
                                                            if (
                                                               !intentState.streamReader
                                                            ) {
                                                               return;
                                                            }
                                                            if (
                                                               intentState.streamReaderCancelTimeout
                                                            ) {
                                                               clearTimeout(
                                                                  intentState.streamReaderCancelTimeout,
                                                               );
                                                               intentState.streamReaderCancelTimeout =
                                                                  null;
                                                            }
                                                            if (!force) {
                                                               if (
                                                                  intentState
                                                                     .renderTasks
                                                                     .size > 0
                                                               ) {
                                                                  return;
                                                               }
                                                               if (
                                                                  reason instanceof
                                                                  _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.RenderingCancelledException
                                                               ) {
                                                                  var delay =
                                                                     RENDERING_CANCELLED_TIMEOUT;
                                                                  if (
                                                                     reason.extraDelay >
                                                                        0 &&
                                                                     reason.extraDelay <
                                                                        1000
                                                                  ) {
                                                                     delay +=
                                                                        reason.extraDelay;
                                                                  }
                                                                  intentState.streamReaderCancelTimeout =
                                                                     setTimeout(
                                                                        function () {
                                                                           intentState.streamReaderCancelTimeout =
                                                                              null;
                                                                           _this30._abortOperatorList(
                                                                              {
                                                                                 intentState:
                                                                                    intentState,
                                                                                 reason:
                                                                                    reason,
                                                                                 force: true,
                                                                              },
                                                                           );
                                                                        },
                                                                        delay,
                                                                     );
                                                                  return;
                                                               }
                                                            }
                                                            intentState.streamReader
                                                               .cancel(
                                                                  new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(
                                                                     reason.message,
                                                                  ),
                                                               )
                                                               ["catch"](
                                                                  function () {},
                                                               );
                                                            intentState.streamReader =
                                                               null;
                                                            if (
                                                               this._transport
                                                                  .destroyed
                                                            ) {
                                                               return;
                                                            }
                                                            var _iterator40 =
                                                                  _createForOfIteratorHelper(
                                                                     this
                                                                        ._intentStates,
                                                                  ),
                                                               _step40;
                                                            try {
                                                               for (
                                                                  _iterator40.s();
                                                                  !(_step40 =
                                                                     _iterator40.n())
                                                                     .done;

                                                               ) {
                                                                  var _step40$value =
                                                                        _slicedToArray(
                                                                           _step40.value,
                                                                           2,
                                                                        ),
                                                                     curCacheKey =
                                                                        _step40$value[0],
                                                                     curIntentState =
                                                                        _step40$value[1];
                                                                  if (
                                                                     curIntentState ===
                                                                     intentState
                                                                  ) {
                                                                     this._intentStates[
                                                                        "delete"
                                                                     ](
                                                                        curCacheKey,
                                                                     );
                                                                     break;
                                                                  }
                                                               }
                                                            } catch (err) {
                                                               _iterator40.e(
                                                                  err,
                                                               );
                                                            } finally {
                                                               _iterator40.f();
                                                            }
                                                            this.cleanup();
                                                         },
                                                      },
                                                      {
                                                         key: "stats",
                                                         get: function get() {
                                                            return this._stats;
                                                         },
                                                      },
                                                   ],
                                                );
                                             })();
                                          _listeners =
                                             /*#__PURE__*/ new WeakMap();
                                          _deferred =
                                             /*#__PURE__*/ new WeakMap();
                                          LoopbackPort =
                                             /*#__PURE__*/ (function () {
                                                function LoopbackPort() {
                                                   _classCallCheck(
                                                      this,
                                                      LoopbackPort,
                                                   );
                                                   _classPrivateFieldInitSpec(
                                                      this,
                                                      _listeners,
                                                      new Set(),
                                                   );
                                                   _classPrivateFieldInitSpec(
                                                      this,
                                                      _deferred,
                                                      Promise.resolve(),
                                                   );
                                                }
                                                return _createClass(
                                                   LoopbackPort,
                                                   [
                                                      {
                                                         key: "postMessage",
                                                         value: function postMessage(
                                                            obj,
                                                            transfer,
                                                         ) {
                                                            var _this31 = this;
                                                            var event = {
                                                               data: structuredClone(
                                                                  obj,
                                                                  transfer
                                                                     ? {
                                                                          transfer:
                                                                             transfer,
                                                                       }
                                                                     : null,
                                                               ),
                                                            };
                                                            _classPrivateFieldGet(
                                                               _deferred,
                                                               this,
                                                            ).then(function () {
                                                               var _iterator41 =
                                                                     _createForOfIteratorHelper(
                                                                        _classPrivateFieldGet(
                                                                           _listeners,
                                                                           _this31,
                                                                        ),
                                                                     ),
                                                                  _step41;
                                                               try {
                                                                  for (
                                                                     _iterator41.s();
                                                                     !(_step41 =
                                                                        _iterator41.n())
                                                                        .done;

                                                                  ) {
                                                                     var listener =
                                                                        _step41.value;
                                                                     listener.call(
                                                                        _this31,
                                                                        event,
                                                                     );
                                                                  }
                                                               } catch (err) {
                                                                  _iterator41.e(
                                                                     err,
                                                                  );
                                                               } finally {
                                                                  _iterator41.f();
                                                               }
                                                            });
                                                         },
                                                      },
                                                      {
                                                         key: "addEventListener",
                                                         value: function addEventListener(
                                                            name,
                                                            listener,
                                                         ) {
                                                            _classPrivateFieldGet(
                                                               _listeners,
                                                               this,
                                                            ).add(listener);
                                                         },
                                                      },
                                                      {
                                                         key: "removeEventListener",
                                                         value: function removeEventListener(
                                                            name,
                                                            listener,
                                                         ) {
                                                            _classPrivateFieldGet(
                                                               _listeners,
                                                               this,
                                                            )["delete"](
                                                               listener,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "terminate",
                                                         value: function terminate() {
                                                            _classPrivateFieldGet(
                                                               _listeners,
                                                               this,
                                                            ).clear();
                                                         },
                                                      },
                                                   ],
                                                );
                                             })();
                                          PDFWorkerUtil = {
                                             isWorkerDisabled: false,
                                             fakeWorkerId: 0,
                                          };
                                          if (
                                             _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS
                                          ) {
                                             PDFWorkerUtil.isWorkerDisabled = true;
                                             (_worker_options_js__W =
                                                _worker_options_js__WEBPACK_IMPORTED_MODULE_14__.GlobalWorkerOptions)
                                                .workerSrc ||
                                                (_worker_options_js__W.workerSrc =
                                                   "./pdf.worker.mjs");
                                          }
                                          PDFWorkerUtil.isSameOrigin =
                                             function (baseUrl, otherUrl) {
                                                var base;
                                                try {
                                                   base = new URL(baseUrl);
                                                   if (
                                                      !base.origin ||
                                                      base.origin === "null"
                                                   ) {
                                                      return false;
                                                   }
                                                } catch (_unused2) {
                                                   return false;
                                                }
                                                var other = new URL(
                                                   otherUrl,
                                                   base,
                                                );
                                                return (
                                                   base.origin === other.origin
                                                );
                                             };
                                          PDFWorkerUtil.createCDNWrapper =
                                             function (url) {
                                                var wrapper =
                                                   'await import("'.concat(
                                                      url,
                                                      '");',
                                                   );
                                                return URL.createObjectURL(
                                                   new Blob([wrapper], {
                                                      type: "text/javascript",
                                                   }),
                                                );
                                             };
                                          _PDFWorker =
                                             /*#__PURE__*/ (function () {
                                                function _PDFWorker() {
                                                   var _ref41 =
                                                         arguments.length > 0 &&
                                                         arguments[0] !==
                                                            undefined
                                                            ? arguments[0]
                                                            : {},
                                                      _ref41$name = _ref41.name,
                                                      name =
                                                         _ref41$name === void 0
                                                            ? null
                                                            : _ref41$name,
                                                      _ref41$port = _ref41.port,
                                                      port =
                                                         _ref41$port === void 0
                                                            ? null
                                                            : _ref41$port,
                                                      _ref41$verbosity =
                                                         _ref41.verbosity,
                                                      verbosity =
                                                         _ref41$verbosity ===
                                                         void 0
                                                            ? (0,
                                                              _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.getVerbosityLevel)()
                                                            : _ref41$verbosity;
                                                   _classCallCheck(
                                                      this,
                                                      _PDFWorker,
                                                   );
                                                   this.name = name;
                                                   this.destroyed = false;
                                                   this.verbosity = verbosity;
                                                   this._readyCapability =
                                                      Promise.withResolvers();
                                                   this._port = null;
                                                   this._webWorker = null;
                                                   this._messageHandler = null;
                                                   if (port) {
                                                      var _workerPorts$_;
                                                      if (
                                                         (_workerPorts$_ =
                                                            _workerPorts._) !==
                                                            null &&
                                                         _workerPorts$_ !==
                                                            void 0 &&
                                                         _workerPorts$_.has(
                                                            port,
                                                         )
                                                      ) {
                                                         throw new Error(
                                                            "Cannot use more than one PDFWorker per port.",
                                                         );
                                                      }
                                                      (
                                                         _workerPorts._ ||
                                                         (_workerPorts._ =
                                                            new WeakMap())
                                                      ).set(port, this);
                                                      this._initializeFromPort(
                                                         port,
                                                      );
                                                      return;
                                                   }
                                                   this._initialize();
                                                }
                                                return _createClass(
                                                   _PDFWorker,
                                                   [
                                                      {
                                                         key: "promise",
                                                         get: function get() {
                                                            return this
                                                               ._readyCapability
                                                               .promise;
                                                         },
                                                      },
                                                      {
                                                         key: "port",
                                                         get: function get() {
                                                            return this._port;
                                                         },
                                                      },
                                                      {
                                                         key: "messageHandler",
                                                         get: function get() {
                                                            return this
                                                               ._messageHandler;
                                                         },
                                                      },
                                                      {
                                                         key: "_initializeFromPort",
                                                         value: function _initializeFromPort(
                                                            port,
                                                         ) {
                                                            this._port = port;
                                                            this._messageHandler =
                                                               new _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__.MessageHandler(
                                                                  "main",
                                                                  "worker",
                                                                  port,
                                                               );
                                                            this._messageHandler.on(
                                                               "ready",
                                                               function () {},
                                                            );
                                                            this._readyCapability.resolve();
                                                            this._messageHandler.send(
                                                               "configure",
                                                               {
                                                                  verbosity:
                                                                     this
                                                                        .verbosity,
                                                               },
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "_initialize",
                                                         value: function _initialize() {
                                                            var _this33 = this;
                                                            if (
                                                               !PDFWorkerUtil.isWorkerDisabled &&
                                                               !_get_mainThreadWorkerMessageHandler(
                                                                  _PDFWorker,
                                                               )
                                                            ) {
                                                               var workerSrc =
                                                                  _PDFWorker.workerSrc;
                                                               try {
                                                                  if (
                                                                     !PDFWorkerUtil.isSameOrigin(
                                                                        window
                                                                           .location
                                                                           .href,
                                                                        workerSrc,
                                                                     )
                                                                  ) {
                                                                     workerSrc =
                                                                        PDFWorkerUtil.createCDNWrapper(
                                                                           new URL(
                                                                              workerSrc,
                                                                              window.location,
                                                                           )
                                                                              .href,
                                                                        );
                                                                  }
                                                                  var worker =
                                                                     new Worker(
                                                                        workerSrc,
                                                                        {
                                                                           type: "module",
                                                                        },
                                                                     );
                                                                  var messageHandler =
                                                                     new _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__.MessageHandler(
                                                                        "main",
                                                                        "worker",
                                                                        worker,
                                                                     );
                                                                  var terminateEarly =
                                                                     function terminateEarly() {
                                                                        worker.removeEventListener(
                                                                           "error",
                                                                           onWorkerError,
                                                                        );
                                                                        messageHandler.destroy();
                                                                        worker.terminate();
                                                                        if (
                                                                           _this33.destroyed
                                                                        ) {
                                                                           _this33._readyCapability.reject(
                                                                              new Error(
                                                                                 "Worker was destroyed",
                                                                              ),
                                                                           );
                                                                        } else {
                                                                           _this33._setupFakeWorker();
                                                                        }
                                                                     };
                                                                  var onWorkerError =
                                                                     function onWorkerError() {
                                                                        if (
                                                                           !_this33._webWorker
                                                                        ) {
                                                                           terminateEarly();
                                                                        }
                                                                     };
                                                                  worker.addEventListener(
                                                                     "error",
                                                                     onWorkerError,
                                                                  );
                                                                  messageHandler.on(
                                                                     "test",
                                                                     function (
                                                                        data,
                                                                     ) {
                                                                        worker.removeEventListener(
                                                                           "error",
                                                                           onWorkerError,
                                                                        );
                                                                        if (
                                                                           _this33.destroyed
                                                                        ) {
                                                                           terminateEarly();
                                                                           return;
                                                                        }
                                                                        if (
                                                                           data
                                                                        ) {
                                                                           _this33._messageHandler =
                                                                              messageHandler;
                                                                           _this33._port =
                                                                              worker;
                                                                           _this33._webWorker =
                                                                              worker;
                                                                           _this33._readyCapability.resolve();
                                                                           messageHandler.send(
                                                                              "configure",
                                                                              {
                                                                                 verbosity:
                                                                                    _this33.verbosity,
                                                                              },
                                                                           );
                                                                        } else {
                                                                           _this33._setupFakeWorker();
                                                                           messageHandler.destroy();
                                                                           worker.terminate();
                                                                        }
                                                                     },
                                                                  );
                                                                  messageHandler.on(
                                                                     "ready",
                                                                     function (
                                                                        data,
                                                                     ) {
                                                                        worker.removeEventListener(
                                                                           "error",
                                                                           onWorkerError,
                                                                        );
                                                                        if (
                                                                           _this33.destroyed
                                                                        ) {
                                                                           terminateEarly();
                                                                           return;
                                                                        }
                                                                        try {
                                                                           sendTest();
                                                                        } catch (_unused3) {
                                                                           _this33._setupFakeWorker();
                                                                        }
                                                                     },
                                                                  );
                                                                  var sendTest =
                                                                     function sendTest() {
                                                                        var testObj =
                                                                           new Uint8Array();
                                                                        messageHandler.send(
                                                                           "test",
                                                                           testObj,
                                                                           [
                                                                              testObj.buffer,
                                                                           ],
                                                                        );
                                                                     };
                                                                  sendTest();
                                                                  return;
                                                               } catch (_unused4) {
                                                                  (0,
                                                                  _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.info)(
                                                                     "The worker has been disabled.",
                                                                  );
                                                               }
                                                            }
                                                            this._setupFakeWorker();
                                                         },
                                                      },
                                                      {
                                                         key: "_setupFakeWorker",
                                                         value: function _setupFakeWorker() {
                                                            var _this34 = this;
                                                            if (
                                                               !PDFWorkerUtil.isWorkerDisabled
                                                            ) {
                                                               (0,
                                                               _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                                                                  "Setting up fake worker.",
                                                               );
                                                               PDFWorkerUtil.isWorkerDisabled = true;
                                                            }
                                                            _PDFWorker._setupFakeWorkerGlobal
                                                               .then(
                                                                  function (
                                                                     WorkerMessageHandler,
                                                                  ) {
                                                                     if (
                                                                        _this34.destroyed
                                                                     ) {
                                                                        _this34._readyCapability.reject(
                                                                           new Error(
                                                                              "Worker was destroyed",
                                                                           ),
                                                                        );
                                                                        return;
                                                                     }
                                                                     var port =
                                                                        new LoopbackPort();
                                                                     _this34._port =
                                                                        port;
                                                                     var id =
                                                                        "fake".concat(
                                                                           PDFWorkerUtil.fakeWorkerId++,
                                                                        );
                                                                     var workerHandler =
                                                                        new _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__.MessageHandler(
                                                                           id +
                                                                              "_worker",
                                                                           id,
                                                                           port,
                                                                        );
                                                                     WorkerMessageHandler.setup(
                                                                        workerHandler,
                                                                        port,
                                                                     );
                                                                     var messageHandler =
                                                                        new _shared_message_handler_js__WEBPACK_IMPORTED_MODULE_7__.MessageHandler(
                                                                           id,
                                                                           id +
                                                                              "_worker",
                                                                           port,
                                                                        );
                                                                     _this34._messageHandler =
                                                                        messageHandler;
                                                                     _this34._readyCapability.resolve();
                                                                     messageHandler.send(
                                                                        "configure",
                                                                        {
                                                                           verbosity:
                                                                              _this34.verbosity,
                                                                        },
                                                                     );
                                                                  },
                                                               )
                                                               ["catch"](
                                                                  function (
                                                                     reason,
                                                                  ) {
                                                                     _this34._readyCapability.reject(
                                                                        new Error(
                                                                           'Setting up fake worker failed: "'.concat(
                                                                              reason.message,
                                                                              '".',
                                                                           ),
                                                                        ),
                                                                     );
                                                                  },
                                                               );
                                                         },
                                                      },
                                                      {
                                                         key: "destroy",
                                                         value: function destroy() {
                                                            var _workerPorts$_2;
                                                            this.destroyed = true;
                                                            if (
                                                               this._webWorker
                                                            ) {
                                                               this._webWorker.terminate();
                                                               this._webWorker =
                                                                  null;
                                                            }
                                                            (_workerPorts$_2 =
                                                               _workerPorts._) ===
                                                               null ||
                                                               _workerPorts$_2 ===
                                                                  void 0 ||
                                                               _workerPorts$_2[
                                                                  "delete"
                                                               ](this._port);
                                                            this._port = null;
                                                            if (
                                                               this
                                                                  ._messageHandler
                                                            ) {
                                                               this._messageHandler.destroy();
                                                               this._messageHandler =
                                                                  null;
                                                            }
                                                         },
                                                      },
                                                   ],
                                                   [
                                                      {
                                                         key: "fromPort",
                                                         value: function fromPort(
                                                            params,
                                                         ) {
                                                            var _assertClassBrand$_;
                                                            if (
                                                               !(
                                                                  params !==
                                                                     null &&
                                                                  params !==
                                                                     void 0 &&
                                                                  params.port
                                                               )
                                                            ) {
                                                               throw new Error(
                                                                  "PDFWorker.fromPort - invalid method signature.",
                                                               );
                                                            }
                                                            var cachedPort =
                                                               (_assertClassBrand$_ =
                                                                  _assertClassBrand(
                                                                     _PDFWorker,
                                                                     this,
                                                                     _workerPorts,
                                                                  )._) ===
                                                                  null ||
                                                               _assertClassBrand$_ ===
                                                                  void 0
                                                                  ? void 0
                                                                  : _assertClassBrand$_.get(
                                                                       params.port,
                                                                    );
                                                            if (cachedPort) {
                                                               if (
                                                                  cachedPort._pendingDestroy
                                                               ) {
                                                                  throw new Error(
                                                                     "PDFWorker.fromPort - the worker is being destroyed.\n" +
                                                                        "Please remember to await `PDFDocumentLoadingTask.destroy()`-calls.",
                                                                  );
                                                               }
                                                               return cachedPort;
                                                            }
                                                            return new _PDFWorker(
                                                               params,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "workerSrc",
                                                         get: function get() {
                                                            if (
                                                               _worker_options_js__WEBPACK_IMPORTED_MODULE_14__
                                                                  .GlobalWorkerOptions
                                                                  .workerSrc
                                                            ) {
                                                               return _worker_options_js__WEBPACK_IMPORTED_MODULE_14__
                                                                  .GlobalWorkerOptions
                                                                  .workerSrc;
                                                            }
                                                            throw new Error(
                                                               'No "GlobalWorkerOptions.workerSrc" specified.',
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "_setupFakeWorkerGlobal",
                                                         get: function get() {
                                                            var _this35 = this;
                                                            var loader =
                                                               /*#__PURE__*/ (function () {
                                                                  var _ref42 =
                                                                     _asyncToGenerator(
                                                                        /*#__PURE__*/ _regenerator().m(
                                                                           function _callee5() {
                                                                              var worker;
                                                                              return _regenerator().w(
                                                                                 function (
                                                                                    _context5,
                                                                                 ) {
                                                                                    while (
                                                                                       1
                                                                                    )
                                                                                       switch (
                                                                                          _context5.n
                                                                                       ) {
                                                                                          case 0:
                                                                                             if (
                                                                                                !_classPrivateGetter(
                                                                                                   _PDFWorker,
                                                                                                   _this35,
                                                                                                   _get_mainThreadWorkerMessageHandler,
                                                                                                )
                                                                                             ) {
                                                                                                _context5.n = 1;
                                                                                                break;
                                                                                             }
                                                                                             return _context5.a(
                                                                                                2,
                                                                                                _classPrivateGetter(
                                                                                                   _PDFWorker,
                                                                                                   _this35,
                                                                                                   _get_mainThreadWorkerMessageHandler,
                                                                                                ),
                                                                                             );
                                                                                          case 1:
                                                                                             _context5.n = 2;
                                                                                             return (function (
                                                                                                specifier,
                                                                                             ) {
                                                                                                return new Promise(
                                                                                                   function (
                                                                                                      r,
                                                                                                   ) {
                                                                                                      return r(
                                                                                                         "".concat(
                                                                                                            specifier,
                                                                                                         ),
                                                                                                      );
                                                                                                   },
                                                                                                ).then(
                                                                                                   function (
                                                                                                      s,
                                                                                                   ) {
                                                                                                      return _interopRequireWildcard(
                                                                                                         require(
                                                                                                            s,
                                                                                                         ),
                                                                                                      );
                                                                                                   },
                                                                                                );
                                                                                             })(
                                                                                                /*webpackIgnore: true*/ _this35.workerSrc,
                                                                                             );
                                                                                          case 2:
                                                                                             worker =
                                                                                                _context5.v;
                                                                                             return _context5.a(
                                                                                                2,
                                                                                                worker.WorkerMessageHandler,
                                                                                             );
                                                                                       }
                                                                                 },
                                                                                 _callee5,
                                                                              );
                                                                           },
                                                                        ),
                                                                     );
                                                                  return function loader() {
                                                                     return _ref42.apply(
                                                                        this,
                                                                        arguments,
                                                                     );
                                                                  };
                                                               })();
                                                            return (0,
                                                            _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                                                               this,
                                                               "_setupFakeWorkerGlobal",
                                                               loader(),
                                                            );
                                                         },
                                                      },
                                                   ],
                                                );
                                             })();
                                          _workerPorts = { _: void 0 };
                                          _methodPromises =
                                             /*#__PURE__*/ new WeakMap();
                                          _pageCache =
                                             /*#__PURE__*/ new WeakMap();
                                          _pagePromises =
                                             /*#__PURE__*/ new WeakMap();
                                          _pageRefCache =
                                             /*#__PURE__*/ new WeakMap();
                                          _passwordCapability =
                                             /*#__PURE__*/ new WeakMap();
                                          _WorkerTransport_brand =
                                             /*#__PURE__*/ new WeakSet();
                                          WorkerTransport =
                                             /*#__PURE__*/ (function () {
                                                function WorkerTransport(
                                                   messageHandler,
                                                   loadingTask,
                                                   networkStream,
                                                   params,
                                                   factory,
                                                ) {
                                                   _classCallCheck(
                                                      this,
                                                      WorkerTransport,
                                                   );
                                                   _classPrivateMethodInitSpec(
                                                      this,
                                                      _WorkerTransport_brand,
                                                   );
                                                   _classPrivateFieldInitSpec(
                                                      this,
                                                      _methodPromises,
                                                      new Map(),
                                                   );
                                                   _classPrivateFieldInitSpec(
                                                      this,
                                                      _pageCache,
                                                      new Map(),
                                                   );
                                                   _classPrivateFieldInitSpec(
                                                      this,
                                                      _pagePromises,
                                                      new Map(),
                                                   );
                                                   _classPrivateFieldInitSpec(
                                                      this,
                                                      _pageRefCache,
                                                      new Map(),
                                                   );
                                                   _classPrivateFieldInitSpec(
                                                      this,
                                                      _passwordCapability,
                                                      null,
                                                   );
                                                   this.messageHandler =
                                                      messageHandler;
                                                   this.loadingTask =
                                                      loadingTask;
                                                   this.commonObjs =
                                                      new PDFObjects();
                                                   this.fontLoader =
                                                      new _font_loader_js__WEBPACK_IMPORTED_MODULE_3__.FontLoader(
                                                         {
                                                            ownerDocument:
                                                               params.ownerDocument,
                                                            styleElement:
                                                               params.styleElement,
                                                         },
                                                      );
                                                   this._params = params;
                                                   this.canvasFactory =
                                                      factory.canvasFactory;
                                                   this.filterFactory =
                                                      factory.filterFactory;
                                                   this.cMapReaderFactory =
                                                      factory.cMapReaderFactory;
                                                   this.standardFontDataFactory =
                                                      factory.standardFontDataFactory;
                                                   this.destroyed = false;
                                                   this.destroyCapability =
                                                      null;
                                                   this._networkStream =
                                                      networkStream;
                                                   this._fullReader = null;
                                                   this._lastProgress = null;
                                                   this.downloadInfoCapability =
                                                      Promise.withResolvers();
                                                   this.setupMessageHandler();
                                                }
                                                return _createClass(
                                                   WorkerTransport,
                                                   [
                                                      {
                                                         key: "annotationStorage",
                                                         get: function get() {
                                                            return (0,
                                                            _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                                                               this,
                                                               "annotationStorage",
                                                               new _annotation_storage_js__WEBPACK_IMPORTED_MODULE_1__.AnnotationStorage(),
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getRenderingIntent",
                                                         value: function getRenderingIntent(
                                                            intent,
                                                         ) {
                                                            var annotationMode =
                                                               arguments.length >
                                                                  1 &&
                                                               arguments[1] !==
                                                                  undefined
                                                                  ? arguments[1]
                                                                  : _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                       .AnnotationMode
                                                                       .ENABLE;
                                                            var printAnnotationStorage =
                                                               arguments.length >
                                                                  2 &&
                                                               arguments[2] !==
                                                                  undefined
                                                                  ? arguments[2]
                                                                  : null;
                                                            var isOpList =
                                                               arguments.length >
                                                                  3 &&
                                                               arguments[3] !==
                                                                  undefined
                                                                  ? arguments[3]
                                                                  : false;
                                                            var renderingIntent =
                                                               _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                  .RenderingIntentFlag
                                                                  .DISPLAY;
                                                            var annotationStorageSerializable =
                                                               _annotation_storage_js__WEBPACK_IMPORTED_MODULE_1__.SerializableEmpty;
                                                            switch (intent) {
                                                               case "any":
                                                                  renderingIntent =
                                                                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                        .RenderingIntentFlag
                                                                        .ANY;
                                                                  break;
                                                               case "display":
                                                                  break;
                                                               case "print":
                                                                  renderingIntent =
                                                                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                        .RenderingIntentFlag
                                                                        .PRINT;
                                                                  break;
                                                               default:
                                                                  (0,
                                                                  _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                                                                     "getRenderingIntent - invalid intent: ".concat(
                                                                        intent,
                                                                     ),
                                                                  );
                                                            }
                                                            switch (
                                                               annotationMode
                                                            ) {
                                                               case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                  .AnnotationMode
                                                                  .DISABLE:
                                                                  renderingIntent +=
                                                                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                        .RenderingIntentFlag
                                                                        .ANNOTATIONS_DISABLE;
                                                                  break;
                                                               case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                  .AnnotationMode
                                                                  .ENABLE:
                                                                  break;
                                                               case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                  .AnnotationMode
                                                                  .ENABLE_FORMS:
                                                                  renderingIntent +=
                                                                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                        .RenderingIntentFlag
                                                                        .ANNOTATIONS_FORMS;
                                                                  break;
                                                               case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                  .AnnotationMode
                                                                  .ENABLE_STORAGE:
                                                                  renderingIntent +=
                                                                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                        .RenderingIntentFlag
                                                                        .ANNOTATIONS_STORAGE;
                                                                  var annotationStorage =
                                                                     renderingIntent &
                                                                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                           .RenderingIntentFlag
                                                                           .PRINT &&
                                                                     printAnnotationStorage instanceof
                                                                        _annotation_storage_js__WEBPACK_IMPORTED_MODULE_1__.PrintAnnotationStorage
                                                                        ? printAnnotationStorage
                                                                        : this
                                                                             .annotationStorage;
                                                                  annotationStorageSerializable =
                                                                     annotationStorage.serializable;
                                                                  break;
                                                               default:
                                                                  (0,
                                                                  _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                                                                     "getRenderingIntent - invalid annotationMode: ".concat(
                                                                        annotationMode,
                                                                     ),
                                                                  );
                                                            }
                                                            if (isOpList) {
                                                               renderingIntent +=
                                                                  _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                                     .RenderingIntentFlag
                                                                     .OPLIST;
                                                            }
                                                            return {
                                                               renderingIntent:
                                                                  renderingIntent,
                                                               cacheKey: ""
                                                                  .concat(
                                                                     renderingIntent,
                                                                     "_",
                                                                  )
                                                                  .concat(
                                                                     annotationStorageSerializable.hash,
                                                                  ),
                                                               annotationStorageSerializable:
                                                                  annotationStorageSerializable,
                                                            };
                                                         },
                                                      },
                                                      {
                                                         key: "destroy",
                                                         value: function destroy() {
                                                            var _classPrivateFieldGet7,
                                                               _this36 = this;
                                                            if (
                                                               this
                                                                  .destroyCapability
                                                            ) {
                                                               return this
                                                                  .destroyCapability
                                                                  .promise;
                                                            }
                                                            this.destroyed = true;
                                                            this.destroyCapability =
                                                               Promise.withResolvers();
                                                            (_classPrivateFieldGet7 =
                                                               _classPrivateFieldGet(
                                                                  _passwordCapability,
                                                                  this,
                                                               )) === null ||
                                                               _classPrivateFieldGet7 ===
                                                                  void 0 ||
                                                               _classPrivateFieldGet7.reject(
                                                                  new Error(
                                                                     "Worker was destroyed during onPassword callback",
                                                                  ),
                                                               );
                                                            var waitOn = [];
                                                            var _iterator42 =
                                                                  _createForOfIteratorHelper(
                                                                     _classPrivateFieldGet(
                                                                        _pageCache,
                                                                        this,
                                                                     ).values(),
                                                                  ),
                                                               _step42;
                                                            try {
                                                               for (
                                                                  _iterator42.s();
                                                                  !(_step42 =
                                                                     _iterator42.n())
                                                                     .done;

                                                               ) {
                                                                  var page =
                                                                     _step42.value;
                                                                  waitOn.push(
                                                                     page._destroy(),
                                                                  );
                                                               }
                                                            } catch (err) {
                                                               _iterator42.e(
                                                                  err,
                                                               );
                                                            } finally {
                                                               _iterator42.f();
                                                            }
                                                            _classPrivateFieldGet(
                                                               _pageCache,
                                                               this,
                                                            ).clear();
                                                            _classPrivateFieldGet(
                                                               _pagePromises,
                                                               this,
                                                            ).clear();
                                                            _classPrivateFieldGet(
                                                               _pageRefCache,
                                                               this,
                                                            ).clear();
                                                            if (
                                                               this.hasOwnProperty(
                                                                  "annotationStorage",
                                                               )
                                                            ) {
                                                               this.annotationStorage.resetModified();
                                                            }
                                                            var terminated =
                                                               this.messageHandler.sendWithPromise(
                                                                  "Terminate",
                                                                  null,
                                                               );
                                                            waitOn.push(
                                                               terminated,
                                                            );
                                                            Promise.all(
                                                               waitOn,
                                                            ).then(function () {
                                                               var _this36$_networkStrea;
                                                               _this36.commonObjs.clear();
                                                               _this36.fontLoader.clear();
                                                               _classPrivateFieldGet(
                                                                  _methodPromises,
                                                                  _this36,
                                                               ).clear();
                                                               _this36.filterFactory.destroy();
                                                               (0,
                                                               _text_layer_js__WEBPACK_IMPORTED_MODULE_6__.cleanupTextLayer)();
                                                               (_this36$_networkStrea =
                                                                  _this36._networkStream) ===
                                                                  null ||
                                                                  _this36$_networkStrea ===
                                                                     void 0 ||
                                                                  _this36$_networkStrea.cancelAllRequests(
                                                                     new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(
                                                                        "Worker was terminated.",
                                                                     ),
                                                                  );
                                                               if (
                                                                  _this36.messageHandler
                                                               ) {
                                                                  _this36.messageHandler.destroy();
                                                                  _this36.messageHandler =
                                                                     null;
                                                               }
                                                               _this36.destroyCapability.resolve();
                                                            }, this.destroyCapability.reject);
                                                            return this
                                                               .destroyCapability
                                                               .promise;
                                                         },
                                                      },
                                                      {
                                                         key: "setupMessageHandler",
                                                         value: function setupMessageHandler() {
                                                            var _this37 = this;
                                                            var messageHandler =
                                                                  this
                                                                     .messageHandler,
                                                               loadingTask =
                                                                  this
                                                                     .loadingTask;
                                                            messageHandler.on(
                                                               "GetReader",
                                                               function (
                                                                  data,
                                                                  sink,
                                                               ) {
                                                                  (0,
                                                                  _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                                                                     _this37._networkStream,
                                                                     "GetReader - no `IPDFStream` instance available.",
                                                                  );
                                                                  _this37._fullReader =
                                                                     _this37._networkStream.getFullReader();
                                                                  _this37._fullReader.onProgress =
                                                                     function (
                                                                        evt,
                                                                     ) {
                                                                        _this37._lastProgress =
                                                                           {
                                                                              loaded:
                                                                                 evt.loaded,
                                                                              total: evt.total,
                                                                           };
                                                                     };
                                                                  sink.onPull =
                                                                     function () {
                                                                        _this37._fullReader
                                                                           .read()
                                                                           .then(
                                                                              function (
                                                                                 _ref43,
                                                                              ) {
                                                                                 var value =
                                                                                       _ref43.value,
                                                                                    done =
                                                                                       _ref43.done;
                                                                                 if (
                                                                                    done
                                                                                 ) {
                                                                                    sink.close();
                                                                                    return;
                                                                                 }
                                                                                 (0,
                                                                                 _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                                                                                    value instanceof
                                                                                       ArrayBuffer,
                                                                                    "GetReader - expected an ArrayBuffer.",
                                                                                 );
                                                                                 sink.enqueue(
                                                                                    new Uint8Array(
                                                                                       value,
                                                                                    ),
                                                                                    1,
                                                                                    [
                                                                                       value,
                                                                                    ],
                                                                                 );
                                                                              },
                                                                           )
                                                                           [
                                                                              "catch"
                                                                           ](
                                                                              function (
                                                                                 reason,
                                                                              ) {
                                                                                 sink.error(
                                                                                    reason,
                                                                                 );
                                                                              },
                                                                           );
                                                                     };
                                                                  sink.onCancel =
                                                                     function (
                                                                        reason,
                                                                     ) {
                                                                        _this37._fullReader.cancel(
                                                                           reason,
                                                                        );
                                                                        sink.ready[
                                                                           "catch"
                                                                        ](
                                                                           function (
                                                                              readyReason,
                                                                           ) {
                                                                              if (
                                                                                 _this37.destroyed
                                                                              ) {
                                                                                 return;
                                                                              }
                                                                              throw readyReason;
                                                                           },
                                                                        );
                                                                     };
                                                               },
                                                            );
                                                            messageHandler.on(
                                                               "ReaderHeadersReady",
                                                               function (data) {
                                                                  var headersCapability =
                                                                     Promise.withResolvers();
                                                                  var fullReader =
                                                                     _this37._fullReader;
                                                                  fullReader.headersReady.then(
                                                                     function () {
                                                                        if (
                                                                           !fullReader.isStreamingSupported ||
                                                                           !fullReader.isRangeSupported
                                                                        ) {
                                                                           if (
                                                                              _this37._lastProgress
                                                                           ) {
                                                                              var _loadingTask$onProgre;
                                                                              (_loadingTask$onProgre =
                                                                                 loadingTask.onProgress) ===
                                                                                 null ||
                                                                                 _loadingTask$onProgre ===
                                                                                    void 0 ||
                                                                                 _loadingTask$onProgre.call(
                                                                                    loadingTask,
                                                                                    _this37._lastProgress,
                                                                                 );
                                                                           }
                                                                           fullReader.onProgress =
                                                                              function (
                                                                                 evt,
                                                                              ) {
                                                                                 var _loadingTask$onProgre2;
                                                                                 (_loadingTask$onProgre2 =
                                                                                    loadingTask.onProgress) ===
                                                                                    null ||
                                                                                    _loadingTask$onProgre2 ===
                                                                                       void 0 ||
                                                                                    _loadingTask$onProgre2.call(
                                                                                       loadingTask,
                                                                                       {
                                                                                          loaded:
                                                                                             evt.loaded,
                                                                                          total: evt.total,
                                                                                       },
                                                                                    );
                                                                              };
                                                                        }
                                                                        headersCapability.resolve(
                                                                           {
                                                                              isStreamingSupported:
                                                                                 fullReader.isStreamingSupported,
                                                                              isRangeSupported:
                                                                                 fullReader.isRangeSupported,
                                                                              contentLength:
                                                                                 fullReader.contentLength,
                                                                           },
                                                                        );
                                                                     },
                                                                     headersCapability.reject,
                                                                  );
                                                                  return headersCapability.promise;
                                                               },
                                                            );
                                                            messageHandler.on(
                                                               "GetRangeReader",
                                                               function (
                                                                  data,
                                                                  sink,
                                                               ) {
                                                                  (0,
                                                                  _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                                                                     _this37._networkStream,
                                                                     "GetRangeReader - no `IPDFStream` instance available.",
                                                                  );
                                                                  var rangeReader =
                                                                     _this37._networkStream.getRangeReader(
                                                                        data.begin,
                                                                        data.end,
                                                                     );
                                                                  if (
                                                                     !rangeReader
                                                                  ) {
                                                                     sink.close();
                                                                     return;
                                                                  }
                                                                  sink.onPull =
                                                                     function () {
                                                                        rangeReader
                                                                           .read()
                                                                           .then(
                                                                              function (
                                                                                 _ref44,
                                                                              ) {
                                                                                 var value =
                                                                                       _ref44.value,
                                                                                    done =
                                                                                       _ref44.done;
                                                                                 if (
                                                                                    done
                                                                                 ) {
                                                                                    sink.close();
                                                                                    return;
                                                                                 }
                                                                                 (0,
                                                                                 _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                                                                                    value instanceof
                                                                                       ArrayBuffer,
                                                                                    "GetRangeReader - expected an ArrayBuffer.",
                                                                                 );
                                                                                 sink.enqueue(
                                                                                    new Uint8Array(
                                                                                       value,
                                                                                    ),
                                                                                    1,
                                                                                    [
                                                                                       value,
                                                                                    ],
                                                                                 );
                                                                              },
                                                                           )
                                                                           [
                                                                              "catch"
                                                                           ](
                                                                              function (
                                                                                 reason,
                                                                              ) {
                                                                                 sink.error(
                                                                                    reason,
                                                                                 );
                                                                              },
                                                                           );
                                                                     };
                                                                  sink.onCancel =
                                                                     function (
                                                                        reason,
                                                                     ) {
                                                                        rangeReader.cancel(
                                                                           reason,
                                                                        );
                                                                        sink.ready[
                                                                           "catch"
                                                                        ](
                                                                           function (
                                                                              readyReason,
                                                                           ) {
                                                                              if (
                                                                                 _this37.destroyed
                                                                              ) {
                                                                                 return;
                                                                              }
                                                                              throw readyReason;
                                                                           },
                                                                        );
                                                                     };
                                                               },
                                                            );
                                                            messageHandler.on(
                                                               "GetDoc",
                                                               function (
                                                                  _ref45,
                                                               ) {
                                                                  var pdfInfo =
                                                                     _ref45.pdfInfo;
                                                                  _this37._numPages =
                                                                     pdfInfo.numPages;
                                                                  _this37._htmlForXfa =
                                                                     pdfInfo.htmlForXfa;
                                                                  delete pdfInfo.htmlForXfa;
                                                                  loadingTask._capability.resolve(
                                                                     new PDFDocumentProxy(
                                                                        pdfInfo,
                                                                        _this37,
                                                                     ),
                                                                  );
                                                               },
                                                            );
                                                            messageHandler.on(
                                                               "DocException",
                                                               function (ex) {
                                                                  var reason;
                                                                  switch (
                                                                     ex.name
                                                                  ) {
                                                                     case "PasswordException":
                                                                        reason =
                                                                           new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PasswordException(
                                                                              ex.message,
                                                                              ex.code,
                                                                           );
                                                                        break;
                                                                     case "InvalidPDFException":
                                                                        reason =
                                                                           new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.InvalidPDFException(
                                                                              ex.message,
                                                                           );
                                                                        break;
                                                                     case "MissingPDFException":
                                                                        reason =
                                                                           new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException(
                                                                              ex.message,
                                                                           );
                                                                        break;
                                                                     case "UnexpectedResponseException":
                                                                        reason =
                                                                           new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.UnexpectedResponseException(
                                                                              ex.message,
                                                                              ex.status,
                                                                           );
                                                                        break;
                                                                     case "UnknownErrorException":
                                                                        reason =
                                                                           new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.UnknownErrorException(
                                                                              ex.message,
                                                                              ex.details,
                                                                           );
                                                                        break;
                                                                     default:
                                                                        (0,
                                                                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(
                                                                           "DocException - expected a valid Error.",
                                                                        );
                                                                  }
                                                                  loadingTask._capability.reject(
                                                                     reason,
                                                                  );
                                                               },
                                                            );
                                                            messageHandler.on(
                                                               "PasswordRequest",
                                                               function (
                                                                  exception,
                                                               ) {
                                                                  _classPrivateFieldSet(
                                                                     _passwordCapability,
                                                                     _this37,
                                                                     Promise.withResolvers(),
                                                                  );
                                                                  if (
                                                                     loadingTask.onPassword
                                                                  ) {
                                                                     var updatePassword =
                                                                        function updatePassword(
                                                                           password,
                                                                        ) {
                                                                           if (
                                                                              password instanceof
                                                                              Error
                                                                           ) {
                                                                              _classPrivateFieldGet(
                                                                                 _passwordCapability,
                                                                                 _this37,
                                                                              ).reject(
                                                                                 password,
                                                                              );
                                                                           } else {
                                                                              _classPrivateFieldGet(
                                                                                 _passwordCapability,
                                                                                 _this37,
                                                                              ).resolve(
                                                                                 {
                                                                                    password:
                                                                                       password,
                                                                                 },
                                                                              );
                                                                           }
                                                                        };
                                                                     try {
                                                                        loadingTask.onPassword(
                                                                           updatePassword,
                                                                           exception.code,
                                                                        );
                                                                     } catch (ex) {
                                                                        _classPrivateFieldGet(
                                                                           _passwordCapability,
                                                                           _this37,
                                                                        ).reject(
                                                                           ex,
                                                                        );
                                                                     }
                                                                  } else {
                                                                     _classPrivateFieldGet(
                                                                        _passwordCapability,
                                                                        _this37,
                                                                     ).reject(
                                                                        new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PasswordException(
                                                                           exception.message,
                                                                           exception.code,
                                                                        ),
                                                                     );
                                                                  }
                                                                  return _classPrivateFieldGet(
                                                                     _passwordCapability,
                                                                     _this37,
                                                                  ).promise;
                                                               },
                                                            );
                                                            messageHandler.on(
                                                               "DataLoaded",
                                                               function (data) {
                                                                  var _loadingTask$onProgre3;
                                                                  (_loadingTask$onProgre3 =
                                                                     loadingTask.onProgress) ===
                                                                     null ||
                                                                     _loadingTask$onProgre3 ===
                                                                        void 0 ||
                                                                     _loadingTask$onProgre3.call(
                                                                        loadingTask,
                                                                        {
                                                                           loaded:
                                                                              data.length,
                                                                           total: data.length,
                                                                        },
                                                                     );
                                                                  _this37.downloadInfoCapability.resolve(
                                                                     data,
                                                                  );
                                                               },
                                                            );
                                                            messageHandler.on(
                                                               "StartRenderPage",
                                                               function (data) {
                                                                  if (
                                                                     _this37.destroyed
                                                                  ) {
                                                                     return;
                                                                  }
                                                                  var page =
                                                                     _classPrivateFieldGet(
                                                                        _pageCache,
                                                                        _this37,
                                                                     ).get(
                                                                        data.pageIndex,
                                                                     );
                                                                  page._startRenderPage(
                                                                     data.transparency,
                                                                     data.cacheKey,
                                                                  );
                                                               },
                                                            );
                                                            messageHandler.on(
                                                               "commonobj",
                                                               function (
                                                                  _ref46,
                                                               ) {
                                                                  var _globalThis$FontInspe;
                                                                  var _ref47 =
                                                                        _slicedToArray(
                                                                           _ref46,
                                                                           3,
                                                                        ),
                                                                     id =
                                                                        _ref47[0],
                                                                     type =
                                                                        _ref47[1],
                                                                     exportedData =
                                                                        _ref47[2];
                                                                  if (
                                                                     _this37.destroyed
                                                                  ) {
                                                                     return null;
                                                                  }
                                                                  if (
                                                                     _this37.commonObjs.has(
                                                                        id,
                                                                     )
                                                                  ) {
                                                                     return null;
                                                                  }
                                                                  switch (
                                                                     type
                                                                  ) {
                                                                     case "Font":
                                                                        var params =
                                                                           _this37._params;
                                                                        if (
                                                                           "error" in
                                                                           exportedData
                                                                        ) {
                                                                           var exportedError =
                                                                              exportedData.error;
                                                                           (0,
                                                                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                                                                              "Error during font loading: ".concat(
                                                                                 exportedError,
                                                                              ),
                                                                           );
                                                                           _this37.commonObjs.resolve(
                                                                              id,
                                                                              exportedError,
                                                                           );
                                                                           break;
                                                                        }
                                                                        var inspectFont =
                                                                           params.pdfBug &&
                                                                           (_globalThis$FontInspe =
                                                                              globalThis.FontInspector) !==
                                                                              null &&
                                                                           _globalThis$FontInspe !==
                                                                              void 0 &&
                                                                           _globalThis$FontInspe.enabled
                                                                              ? function (
                                                                                   font,
                                                                                   url,
                                                                                ) {
                                                                                   return globalThis.FontInspector.fontAdded(
                                                                                      font,
                                                                                      url,
                                                                                   );
                                                                                }
                                                                              : null;
                                                                        var font =
                                                                           new _font_loader_js__WEBPACK_IMPORTED_MODULE_3__.FontFaceObject(
                                                                              exportedData,
                                                                              {
                                                                                 disableFontFace:
                                                                                    params.disableFontFace,
                                                                                 ignoreErrors:
                                                                                    params.ignoreErrors,
                                                                                 inspectFont:
                                                                                    inspectFont,
                                                                              },
                                                                           );
                                                                        _this37.fontLoader
                                                                           .bind(
                                                                              font,
                                                                           )
                                                                           [
                                                                              "catch"
                                                                           ](
                                                                              function () {
                                                                                 return messageHandler.sendWithPromise(
                                                                                    "FontFallback",
                                                                                    {
                                                                                       id: id,
                                                                                    },
                                                                                 );
                                                                              },
                                                                           )
                                                                           [
                                                                              "finally"
                                                                           ](
                                                                              function () {
                                                                                 if (
                                                                                    !params.fontExtraProperties &&
                                                                                    font.data
                                                                                 ) {
                                                                                    font.data =
                                                                                       null;
                                                                                 }
                                                                                 _this37.commonObjs.resolve(
                                                                                    id,
                                                                                    font,
                                                                                 );
                                                                              },
                                                                           );
                                                                        break;
                                                                     case "CopyLocalImage":
                                                                        var imageRef =
                                                                           exportedData.imageRef;
                                                                        (0,
                                                                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                                                                           imageRef,
                                                                           "The imageRef must be defined.",
                                                                        );
                                                                        var _iterator43 =
                                                                              _createForOfIteratorHelper(
                                                                                 _classPrivateFieldGet(
                                                                                    _pageCache,
                                                                                    _this37,
                                                                                 ).values(),
                                                                              ),
                                                                           _step43;
                                                                        try {
                                                                           for (
                                                                              _iterator43.s();
                                                                              !(_step43 =
                                                                                 _iterator43.n())
                                                                                 .done;

                                                                           ) {
                                                                              var pageProxy =
                                                                                 _step43.value;
                                                                              var _iterator44 =
                                                                                    _createForOfIteratorHelper(
                                                                                       pageProxy.objs,
                                                                                    ),
                                                                                 _step44;
                                                                              try {
                                                                                 for (
                                                                                    _iterator44.s();
                                                                                    !(_step44 =
                                                                                       _iterator44.n())
                                                                                       .done;

                                                                                 ) {
                                                                                    var _step44$value =
                                                                                          _slicedToArray(
                                                                                             _step44.value,
                                                                                             2,
                                                                                          ),
                                                                                       data =
                                                                                          _step44$value[1];
                                                                                    if (
                                                                                       data.ref !==
                                                                                       imageRef
                                                                                    ) {
                                                                                       continue;
                                                                                    }
                                                                                    if (
                                                                                       !data.dataLen
                                                                                    ) {
                                                                                       return null;
                                                                                    }
                                                                                    _this37.commonObjs.resolve(
                                                                                       id,
                                                                                       structuredClone(
                                                                                          data,
                                                                                       ),
                                                                                    );
                                                                                    return data.dataLen;
                                                                                 }
                                                                              } catch (err) {
                                                                                 _iterator44.e(
                                                                                    err,
                                                                                 );
                                                                              } finally {
                                                                                 _iterator44.f();
                                                                              }
                                                                           }
                                                                        } catch (err) {
                                                                           _iterator43.e(
                                                                              err,
                                                                           );
                                                                        } finally {
                                                                           _iterator43.f();
                                                                        }
                                                                        break;
                                                                     case "FontPath":
                                                                     case "Image":
                                                                     case "Pattern":
                                                                        _this37.commonObjs.resolve(
                                                                           id,
                                                                           exportedData,
                                                                        );
                                                                        break;
                                                                     default:
                                                                        throw new Error(
                                                                           "Got unknown common object type ".concat(
                                                                              type,
                                                                           ),
                                                                        );
                                                                  }
                                                                  return null;
                                                               },
                                                            );
                                                            messageHandler.on(
                                                               "obj",
                                                               function (
                                                                  _ref48,
                                                               ) {
                                                                  var _ref49 =
                                                                        _slicedToArray(
                                                                           _ref48,
                                                                           4,
                                                                        ),
                                                                     id =
                                                                        _ref49[0],
                                                                     pageIndex =
                                                                        _ref49[1],
                                                                     type =
                                                                        _ref49[2],
                                                                     imageData =
                                                                        _ref49[3];
                                                                  if (
                                                                     _this37.destroyed
                                                                  ) {
                                                                     return;
                                                                  }
                                                                  var pageProxy =
                                                                     _classPrivateFieldGet(
                                                                        _pageCache,
                                                                        _this37,
                                                                     ).get(
                                                                        pageIndex,
                                                                     );
                                                                  if (
                                                                     pageProxy.objs.has(
                                                                        id,
                                                                     )
                                                                  ) {
                                                                     return;
                                                                  }
                                                                  if (
                                                                     pageProxy
                                                                        ._intentStates
                                                                        .size ===
                                                                     0
                                                                  ) {
                                                                     var _imageData$bitmap;
                                                                     imageData ===
                                                                        null ||
                                                                        imageData ===
                                                                           void 0 ||
                                                                        (_imageData$bitmap =
                                                                           imageData.bitmap) ===
                                                                           null ||
                                                                        _imageData$bitmap ===
                                                                           void 0 ||
                                                                        _imageData$bitmap.close();
                                                                     return;
                                                                  }
                                                                  switch (
                                                                     type
                                                                  ) {
                                                                     case "Image":
                                                                        pageProxy.objs.resolve(
                                                                           id,
                                                                           imageData,
                                                                        );
                                                                        if (
                                                                           (imageData ===
                                                                              null ||
                                                                           imageData ===
                                                                              void 0
                                                                              ? void 0
                                                                              : imageData.dataLen) >
                                                                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MAX_IMAGE_SIZE_TO_CACHE
                                                                        ) {
                                                                           pageProxy._maybeCleanupAfterRender = true;
                                                                        }
                                                                        break;
                                                                     case "Pattern":
                                                                        pageProxy.objs.resolve(
                                                                           id,
                                                                           imageData,
                                                                        );
                                                                        break;
                                                                     default:
                                                                        throw new Error(
                                                                           "Got unknown object type ".concat(
                                                                              type,
                                                                           ),
                                                                        );
                                                                  }
                                                               },
                                                            );
                                                            messageHandler.on(
                                                               "DocProgress",
                                                               function (data) {
                                                                  var _loadingTask$onProgre4;
                                                                  if (
                                                                     _this37.destroyed
                                                                  ) {
                                                                     return;
                                                                  }
                                                                  (_loadingTask$onProgre4 =
                                                                     loadingTask.onProgress) ===
                                                                     null ||
                                                                     _loadingTask$onProgre4 ===
                                                                        void 0 ||
                                                                     _loadingTask$onProgre4.call(
                                                                        loadingTask,
                                                                        {
                                                                           loaded:
                                                                              data.loaded,
                                                                           total: data.total,
                                                                        },
                                                                     );
                                                               },
                                                            );
                                                            messageHandler.on(
                                                               "FetchBuiltInCMap",
                                                               function (data) {
                                                                  if (
                                                                     _this37.destroyed
                                                                  ) {
                                                                     return Promise.reject(
                                                                        new Error(
                                                                           "Worker was destroyed.",
                                                                        ),
                                                                     );
                                                                  }
                                                                  if (
                                                                     !_this37.cMapReaderFactory
                                                                  ) {
                                                                     return Promise.reject(
                                                                        new Error(
                                                                           "CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.",
                                                                        ),
                                                                     );
                                                                  }
                                                                  return _this37.cMapReaderFactory.fetch(
                                                                     data,
                                                                  );
                                                               },
                                                            );
                                                            messageHandler.on(
                                                               "FetchStandardFontData",
                                                               function (data) {
                                                                  if (
                                                                     _this37.destroyed
                                                                  ) {
                                                                     return Promise.reject(
                                                                        new Error(
                                                                           "Worker was destroyed.",
                                                                        ),
                                                                     );
                                                                  }
                                                                  if (
                                                                     !_this37.standardFontDataFactory
                                                                  ) {
                                                                     return Promise.reject(
                                                                        new Error(
                                                                           "StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.",
                                                                        ),
                                                                     );
                                                                  }
                                                                  return _this37.standardFontDataFactory.fetch(
                                                                     data,
                                                                  );
                                                               },
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getData",
                                                         value: function getData() {
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetData",
                                                               null,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "saveDocument",
                                                         value: function saveDocument() {
                                                            var _this$_fullReader$fil,
                                                               _this$_fullReader,
                                                               _this38 = this;
                                                            if (
                                                               this
                                                                  .annotationStorage
                                                                  .size <= 0
                                                            ) {
                                                               (0,
                                                               _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                                                                  "saveDocument called while `annotationStorage` is empty, " +
                                                                     "please use the getData-method instead.",
                                                               );
                                                            }
                                                            var _this$annotationStora2 =
                                                                  this
                                                                     .annotationStorage
                                                                     .serializable,
                                                               map =
                                                                  _this$annotationStora2.map,
                                                               transfer =
                                                                  _this$annotationStora2.transfer;
                                                            return this.messageHandler
                                                               .sendWithPromise(
                                                                  "SaveDocument",
                                                                  {
                                                                     isPureXfa:
                                                                        !!this
                                                                           ._htmlForXfa,
                                                                     numPages:
                                                                        this
                                                                           ._numPages,
                                                                     annotationStorage:
                                                                        map,
                                                                     filename:
                                                                        (_this$_fullReader$fil =
                                                                           (_this$_fullReader =
                                                                              this
                                                                                 ._fullReader) ===
                                                                              null ||
                                                                           _this$_fullReader ===
                                                                              void 0
                                                                              ? void 0
                                                                              : _this$_fullReader.filename) !==
                                                                           null &&
                                                                        _this$_fullReader$fil !==
                                                                           void 0
                                                                           ? _this$_fullReader$fil
                                                                           : null,
                                                                  },
                                                                  transfer,
                                                               )
                                                               ["finally"](
                                                                  function () {
                                                                     _this38.annotationStorage.resetModified();
                                                                  },
                                                               );
                                                         },
                                                      },
                                                      {
                                                         key: "getPage",
                                                         value: function getPage(
                                                            pageNumber,
                                                         ) {
                                                            var _this39 = this;
                                                            if (
                                                               !Number.isInteger(
                                                                  pageNumber,
                                                               ) ||
                                                               pageNumber <=
                                                                  0 ||
                                                               pageNumber >
                                                                  this._numPages
                                                            ) {
                                                               return Promise.reject(
                                                                  new Error(
                                                                     "Invalid page request.",
                                                                  ),
                                                               );
                                                            }
                                                            var pageIndex =
                                                                  pageNumber -
                                                                  1,
                                                               cachedPromise =
                                                                  _classPrivateFieldGet(
                                                                     _pagePromises,
                                                                     this,
                                                                  ).get(
                                                                     pageIndex,
                                                                  );
                                                            if (cachedPromise) {
                                                               return cachedPromise;
                                                            }
                                                            var promise =
                                                               this.messageHandler
                                                                  .sendWithPromise(
                                                                     "GetPage",
                                                                     {
                                                                        pageIndex:
                                                                           pageIndex,
                                                                     },
                                                                  )
                                                                  .then(
                                                                     function (
                                                                        pageInfo,
                                                                     ) {
                                                                        if (
                                                                           _this39.destroyed
                                                                        ) {
                                                                           throw new Error(
                                                                              "Transport destroyed",
                                                                           );
                                                                        }
                                                                        if (
                                                                           pageInfo.refStr
                                                                        ) {
                                                                           _classPrivateFieldGet(
                                                                              _pageRefCache,
                                                                              _this39,
                                                                           ).set(
                                                                              pageInfo.refStr,
                                                                              pageNumber,
                                                                           );
                                                                        }
                                                                        var page =
                                                                           new PDFPageProxy(
                                                                              pageIndex,
                                                                              pageInfo,
                                                                              _this39,
                                                                              _this39._params.pdfBug,
                                                                           );
                                                                        _classPrivateFieldGet(
                                                                           _pageCache,
                                                                           _this39,
                                                                        ).set(
                                                                           pageIndex,
                                                                           page,
                                                                        );
                                                                        return page;
                                                                     },
                                                                  );
                                                            _classPrivateFieldGet(
                                                               _pagePromises,
                                                               this,
                                                            ).set(
                                                               pageIndex,
                                                               promise,
                                                            );
                                                            return promise;
                                                         },
                                                      },
                                                      {
                                                         key: "getPageIndex",
                                                         value: function getPageIndex(
                                                            ref,
                                                         ) {
                                                            if (
                                                               !isRefProxy(ref)
                                                            ) {
                                                               return Promise.reject(
                                                                  new Error(
                                                                     "Invalid pageIndex request.",
                                                                  ),
                                                               );
                                                            }
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetPageIndex",
                                                               {
                                                                  num: ref.num,
                                                                  gen: ref.gen,
                                                               },
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getAnnotations",
                                                         value: function getAnnotations(
                                                            pageIndex,
                                                            intent,
                                                         ) {
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetAnnotations",
                                                               {
                                                                  pageIndex:
                                                                     pageIndex,
                                                                  intent:
                                                                     intent,
                                                               },
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getFieldObjects",
                                                         value: function getFieldObjects() {
                                                            return _assertClassBrand(
                                                               _WorkerTransport_brand,
                                                               this,
                                                               _cacheSimpleMethod,
                                                            ).call(
                                                               this,
                                                               "GetFieldObjects",
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "hasJSActions",
                                                         value: function hasJSActions() {
                                                            return _assertClassBrand(
                                                               _WorkerTransport_brand,
                                                               this,
                                                               _cacheSimpleMethod,
                                                            ).call(
                                                               this,
                                                               "HasJSActions",
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getCalculationOrderIds",
                                                         value: function getCalculationOrderIds() {
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetCalculationOrderIds",
                                                               null,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getDestinations",
                                                         value: function getDestinations() {
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetDestinations",
                                                               null,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getDestination",
                                                         value: function getDestination(
                                                            id,
                                                         ) {
                                                            if (
                                                               typeof id !==
                                                               "string"
                                                            ) {
                                                               return Promise.reject(
                                                                  new Error(
                                                                     "Invalid destination request.",
                                                                  ),
                                                               );
                                                            }
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetDestination",
                                                               { id: id },
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getPageLabels",
                                                         value: function getPageLabels() {
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetPageLabels",
                                                               null,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getPageLayout",
                                                         value: function getPageLayout() {
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetPageLayout",
                                                               null,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getPageMode",
                                                         value: function getPageMode() {
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetPageMode",
                                                               null,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getViewerPreferences",
                                                         value: function getViewerPreferences() {
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetViewerPreferences",
                                                               null,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getOpenAction",
                                                         value: function getOpenAction() {
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetOpenAction",
                                                               null,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getAttachments",
                                                         value: function getAttachments() {
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetAttachments",
                                                               null,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getDocJSActions",
                                                         value: function getDocJSActions() {
                                                            return _assertClassBrand(
                                                               _WorkerTransport_brand,
                                                               this,
                                                               _cacheSimpleMethod,
                                                            ).call(
                                                               this,
                                                               "GetDocJSActions",
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getPageJSActions",
                                                         value: function getPageJSActions(
                                                            pageIndex,
                                                         ) {
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetPageJSActions",
                                                               {
                                                                  pageIndex:
                                                                     pageIndex,
                                                               },
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getStructTree",
                                                         value: function getStructTree(
                                                            pageIndex,
                                                         ) {
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetStructTree",
                                                               {
                                                                  pageIndex:
                                                                     pageIndex,
                                                               },
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getOutline",
                                                         value: function getOutline() {
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetOutline",
                                                               null,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getOptionalContentConfig",
                                                         value: function getOptionalContentConfig(
                                                            renderingIntent,
                                                         ) {
                                                            return _assertClassBrand(
                                                               _WorkerTransport_brand,
                                                               this,
                                                               _cacheSimpleMethod,
                                                            )
                                                               .call(
                                                                  this,
                                                                  "GetOptionalContentConfig",
                                                               )
                                                               .then(
                                                                  function (
                                                                     data,
                                                                  ) {
                                                                     return new _optional_content_config_js__WEBPACK_IMPORTED_MODULE_9__.OptionalContentConfig(
                                                                        data,
                                                                        renderingIntent,
                                                                     );
                                                                  },
                                                               );
                                                         },
                                                      },
                                                      {
                                                         key: "getPermissions",
                                                         value: function getPermissions() {
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetPermissions",
                                                               null,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "getMetadata",
                                                         value: function getMetadata() {
                                                            var _this40 = this;
                                                            var name =
                                                                  "GetMetadata",
                                                               cachedPromise =
                                                                  _classPrivateFieldGet(
                                                                     _methodPromises,
                                                                     this,
                                                                  ).get(name);
                                                            if (cachedPromise) {
                                                               return cachedPromise;
                                                            }
                                                            var promise =
                                                               this.messageHandler
                                                                  .sendWithPromise(
                                                                     name,
                                                                     null,
                                                                  )
                                                                  .then(
                                                                     function (
                                                                        results,
                                                                     ) {
                                                                        var _this40$_fullReader$f,
                                                                           _this40$_fullReader,
                                                                           _this40$_fullReader$c,
                                                                           _this40$_fullReader2;
                                                                        return {
                                                                           info: results[0],
                                                                           metadata:
                                                                              results[1]
                                                                                 ? new _metadata_js__WEBPACK_IMPORTED_MODULE_8__.Metadata(
                                                                                      results[1],
                                                                                   )
                                                                                 : null,
                                                                           contentDispositionFilename:
                                                                              (_this40$_fullReader$f =
                                                                                 (_this40$_fullReader =
                                                                                    _this40._fullReader) ===
                                                                                    null ||
                                                                                 _this40$_fullReader ===
                                                                                    void 0
                                                                                    ? void 0
                                                                                    : _this40$_fullReader.filename) !==
                                                                                 null &&
                                                                              _this40$_fullReader$f !==
                                                                                 void 0
                                                                                 ? _this40$_fullReader$f
                                                                                 : null,
                                                                           contentLength:
                                                                              (_this40$_fullReader$c =
                                                                                 (_this40$_fullReader2 =
                                                                                    _this40._fullReader) ===
                                                                                    null ||
                                                                                 _this40$_fullReader2 ===
                                                                                    void 0
                                                                                    ? void 0
                                                                                    : _this40$_fullReader2.contentLength) !==
                                                                                 null &&
                                                                              _this40$_fullReader$c !==
                                                                                 void 0
                                                                                 ? _this40$_fullReader$c
                                                                                 : null,
                                                                        };
                                                                     },
                                                                  );
                                                            _classPrivateFieldGet(
                                                               _methodPromises,
                                                               this,
                                                            ).set(
                                                               name,
                                                               promise,
                                                            );
                                                            return promise;
                                                         },
                                                      },
                                                      {
                                                         key: "getMarkInfo",
                                                         value: function getMarkInfo() {
                                                            return this.messageHandler.sendWithPromise(
                                                               "GetMarkInfo",
                                                               null,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "startCleanup",
                                                         value: (function () {
                                                            var _startCleanup =
                                                               _asyncToGenerator(
                                                                  /*#__PURE__*/ _regenerator().m(
                                                                     function _callee6() {
                                                                        var keepLoadedFonts,
                                                                           _iterator45,
                                                                           _step45,
                                                                           page,
                                                                           cleanupSuccessful,
                                                                           _args6 =
                                                                              arguments,
                                                                           _t3;
                                                                        return _regenerator().w(
                                                                           function (
                                                                              _context6,
                                                                           ) {
                                                                              while (
                                                                                 1
                                                                              )
                                                                                 switch (
                                                                                    (_context6.p =
                                                                                       _context6.n)
                                                                                 ) {
                                                                                    case 0:
                                                                                       keepLoadedFonts =
                                                                                          _args6.length >
                                                                                             0 &&
                                                                                          _args6[0] !==
                                                                                             undefined
                                                                                             ? _args6[0]
                                                                                             : false;
                                                                                       if (
                                                                                          !this
                                                                                             .destroyed
                                                                                       ) {
                                                                                          _context6.n = 1;
                                                                                          break;
                                                                                       }
                                                                                       return _context6.a(
                                                                                          2,
                                                                                       );
                                                                                    case 1:
                                                                                       _context6.n = 2;
                                                                                       return this.messageHandler.sendWithPromise(
                                                                                          "Cleanup",
                                                                                          null,
                                                                                       );
                                                                                    case 2:
                                                                                       _iterator45 =
                                                                                          _createForOfIteratorHelper(
                                                                                             _classPrivateFieldGet(
                                                                                                _pageCache,
                                                                                                this,
                                                                                             ).values(),
                                                                                          );
                                                                                       _context6.p = 3;
                                                                                       _iterator45.s();
                                                                                    case 4:
                                                                                       if (
                                                                                          (_step45 =
                                                                                             _iterator45.n())
                                                                                             .done
                                                                                       ) {
                                                                                          _context6.n = 6;
                                                                                          break;
                                                                                       }
                                                                                       page =
                                                                                          _step45.value;
                                                                                       cleanupSuccessful =
                                                                                          page.cleanup();
                                                                                       if (
                                                                                          cleanupSuccessful
                                                                                       ) {
                                                                                          _context6.n = 5;
                                                                                          break;
                                                                                       }
                                                                                       throw new Error(
                                                                                          "startCleanup: Page ".concat(
                                                                                             page.pageNumber,
                                                                                             " is currently rendering.",
                                                                                          ),
                                                                                       );
                                                                                    case 5:
                                                                                       _context6.n = 4;
                                                                                       break;
                                                                                    case 6:
                                                                                       _context6.n = 8;
                                                                                       break;
                                                                                    case 7:
                                                                                       _context6.p = 7;
                                                                                       _t3 =
                                                                                          _context6.v;
                                                                                       _iterator45.e(
                                                                                          _t3,
                                                                                       );
                                                                                    case 8:
                                                                                       _context6.p = 8;
                                                                                       _iterator45.f();
                                                                                       return _context6.f(
                                                                                          8,
                                                                                       );
                                                                                    case 9:
                                                                                       this.commonObjs.clear();
                                                                                       if (
                                                                                          !keepLoadedFonts
                                                                                       ) {
                                                                                          this.fontLoader.clear();
                                                                                       }
                                                                                       _classPrivateFieldGet(
                                                                                          _methodPromises,
                                                                                          this,
                                                                                       ).clear();
                                                                                       this.filterFactory.destroy(
                                                                                          true,
                                                                                       );
                                                                                       (0,
                                                                                       _text_layer_js__WEBPACK_IMPORTED_MODULE_6__.cleanupTextLayer)();
                                                                                    case 10:
                                                                                       return _context6.a(
                                                                                          2,
                                                                                       );
                                                                                 }
                                                                           },
                                                                           _callee6,
                                                                           this,
                                                                           [
                                                                              [
                                                                                 3,
                                                                                 7,
                                                                                 8,
                                                                                 9,
                                                                              ],
                                                                           ],
                                                                        );
                                                                     },
                                                                  ),
                                                               );
                                                            function startCleanup() {
                                                               return _startCleanup.apply(
                                                                  this,
                                                                  arguments,
                                                               );
                                                            }
                                                            return startCleanup;
                                                         })(),
                                                      },
                                                      {
                                                         key: "cachedPageNumber",
                                                         value: function cachedPageNumber(
                                                            ref,
                                                         ) {
                                                            var _classPrivateFieldGet8;
                                                            if (
                                                               !isRefProxy(ref)
                                                            ) {
                                                               return null;
                                                            }
                                                            var refStr =
                                                               ref.gen === 0
                                                                  ? "".concat(
                                                                       ref.num,
                                                                       "R",
                                                                    )
                                                                  : ""
                                                                       .concat(
                                                                          ref.num,
                                                                          "R",
                                                                       )
                                                                       .concat(
                                                                          ref.gen,
                                                                       );
                                                            return (_classPrivateFieldGet8 =
                                                               _classPrivateFieldGet(
                                                                  _pageRefCache,
                                                                  this,
                                                               ).get(
                                                                  refStr,
                                                               )) !== null &&
                                                               _classPrivateFieldGet8 !==
                                                                  void 0
                                                               ? _classPrivateFieldGet8
                                                               : null;
                                                         },
                                                      },
                                                      {
                                                         key: "loadingParams",
                                                         get: function get() {
                                                            var _this$_params =
                                                                  this._params,
                                                               disableAutoFetch =
                                                                  _this$_params.disableAutoFetch,
                                                               enableXfa =
                                                                  _this$_params.enableXfa;
                                                            return (0,
                                                            _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                                                               this,
                                                               "loadingParams",
                                                               {
                                                                  disableAutoFetch:
                                                                     disableAutoFetch,
                                                                  enableXfa:
                                                                     enableXfa,
                                                               },
                                                            );
                                                         },
                                                      },
                                                   ],
                                                );
                                             })();
                                          INITIAL_DATA = Symbol("INITIAL_DATA");
                                          _objs = /*#__PURE__*/ new WeakMap();
                                          _PDFObjects_brand =
                                             /*#__PURE__*/ new WeakSet();
                                          PDFObjects =
                                             /*#__PURE__*/ (function () {
                                                function PDFObjects() {
                                                   _classCallCheck(
                                                      this,
                                                      PDFObjects,
                                                   );
                                                   _classPrivateMethodInitSpec(
                                                      this,
                                                      _PDFObjects_brand,
                                                   );
                                                   _classPrivateFieldInitSpec(
                                                      this,
                                                      _objs,
                                                      Object.create(null),
                                                   );
                                                }
                                                return _createClass(
                                                   PDFObjects,
                                                   [
                                                      {
                                                         key: "get",
                                                         value: function get(
                                                            objId,
                                                         ) {
                                                            var callback =
                                                               arguments.length >
                                                                  1 &&
                                                               arguments[1] !==
                                                                  undefined
                                                                  ? arguments[1]
                                                                  : null;
                                                            if (callback) {
                                                               var _obj =
                                                                  _assertClassBrand(
                                                                     _PDFObjects_brand,
                                                                     this,
                                                                     _ensureObj,
                                                                  ).call(
                                                                     this,
                                                                     objId,
                                                                  );
                                                               _obj.promise.then(
                                                                  function () {
                                                                     return callback(
                                                                        _obj.data,
                                                                     );
                                                                  },
                                                               );
                                                               return null;
                                                            }
                                                            var obj =
                                                               _classPrivateFieldGet(
                                                                  _objs,
                                                                  this,
                                                               )[objId];
                                                            if (
                                                               !obj ||
                                                               obj.data ===
                                                                  INITIAL_DATA
                                                            ) {
                                                               throw new Error(
                                                                  "Requesting object that isn't resolved yet ".concat(
                                                                     objId,
                                                                     ".",
                                                                  ),
                                                               );
                                                            }
                                                            return obj.data;
                                                         },
                                                      },
                                                      {
                                                         key: "has",
                                                         value: function has(
                                                            objId,
                                                         ) {
                                                            var obj =
                                                               _classPrivateFieldGet(
                                                                  _objs,
                                                                  this,
                                                               )[objId];
                                                            return (
                                                               !!obj &&
                                                               obj.data !==
                                                                  INITIAL_DATA
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "resolve",
                                                         value: function resolve(
                                                            objId,
                                                         ) {
                                                            var data =
                                                               arguments.length >
                                                                  1 &&
                                                               arguments[1] !==
                                                                  undefined
                                                                  ? arguments[1]
                                                                  : null;
                                                            var obj =
                                                               _assertClassBrand(
                                                                  _PDFObjects_brand,
                                                                  this,
                                                                  _ensureObj,
                                                               ).call(
                                                                  this,
                                                                  objId,
                                                               );
                                                            obj.data = data;
                                                            obj.resolve();
                                                         },
                                                      },
                                                      {
                                                         key: "clear",
                                                         value: function clear() {
                                                            for (var objId in _classPrivateFieldGet(
                                                               _objs,
                                                               this,
                                                            )) {
                                                               var _data$bitmap;
                                                               var data =
                                                                  _classPrivateFieldGet(
                                                                     _objs,
                                                                     this,
                                                                  )[objId].data;
                                                               data === null ||
                                                                  data ===
                                                                     void 0 ||
                                                                  (_data$bitmap =
                                                                     data.bitmap) ===
                                                                     null ||
                                                                  _data$bitmap ===
                                                                     void 0 ||
                                                                  _data$bitmap.close();
                                                            }
                                                            _classPrivateFieldSet(
                                                               _objs,
                                                               this,
                                                               Object.create(
                                                                  null,
                                                               ),
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: Symbol.iterator,
                                                         value: /*#__PURE__*/ _regenerator().m(
                                                            function value() {
                                                               var objId,
                                                                  data,
                                                                  _t4,
                                                                  _t5;
                                                               return _regenerator().w(
                                                                  function (
                                                                     _context7,
                                                                  ) {
                                                                     while (1)
                                                                        switch (
                                                                           _context7.n
                                                                        ) {
                                                                           case 0:
                                                                              _t4 =
                                                                                 _regeneratorKeys(
                                                                                    _classPrivateFieldGet(
                                                                                       _objs,
                                                                                       this,
                                                                                    ),
                                                                                 );
                                                                           case 1:
                                                                              if (
                                                                                 (_t5 =
                                                                                    _t4())
                                                                                    .done
                                                                              ) {
                                                                                 _context7.n = 4;
                                                                                 break;
                                                                              }
                                                                              objId =
                                                                                 _t5.value;
                                                                              data =
                                                                                 _classPrivateFieldGet(
                                                                                    _objs,
                                                                                    this,
                                                                                 )[
                                                                                    objId
                                                                                 ]
                                                                                    .data;
                                                                              if (
                                                                                 !(
                                                                                    data ===
                                                                                    INITIAL_DATA
                                                                                 )
                                                                              ) {
                                                                                 _context7.n = 2;
                                                                                 break;
                                                                              }
                                                                              return _context7.a(
                                                                                 3,
                                                                                 1,
                                                                              );
                                                                           case 2:
                                                                              _context7.n = 3;
                                                                              return [
                                                                                 objId,
                                                                                 data,
                                                                              ];
                                                                           case 3:
                                                                              _context7.n = 1;
                                                                              break;
                                                                           case 4:
                                                                              return _context7.a(
                                                                                 2,
                                                                              );
                                                                        }
                                                                  },
                                                                  value,
                                                                  this,
                                                               );
                                                            },
                                                         ),
                                                      },
                                                   ],
                                                );
                                             })();
                                          _internalRenderTask =
                                             /*#__PURE__*/ new WeakMap();
                                          RenderTask =
                                             /*#__PURE__*/ (function () {
                                                function RenderTask(
                                                   internalRenderTask,
                                                ) {
                                                   _classCallCheck(
                                                      this,
                                                      RenderTask,
                                                   );
                                                   _classPrivateFieldInitSpec(
                                                      this,
                                                      _internalRenderTask,
                                                      null,
                                                   );
                                                   _classPrivateFieldSet(
                                                      _internalRenderTask,
                                                      this,
                                                      internalRenderTask,
                                                   );
                                                   this.onContinue = null;
                                                }
                                                return _createClass(
                                                   RenderTask,
                                                   [
                                                      {
                                                         key: "promise",
                                                         get: function get() {
                                                            return _classPrivateFieldGet(
                                                               _internalRenderTask,
                                                               this,
                                                            ).capability
                                                               .promise;
                                                         },
                                                      },
                                                      {
                                                         key: "cancel",
                                                         value: function cancel() {
                                                            var extraDelay =
                                                               arguments.length >
                                                                  0 &&
                                                               arguments[0] !==
                                                                  undefined
                                                                  ? arguments[0]
                                                                  : 0;
                                                            _classPrivateFieldGet(
                                                               _internalRenderTask,
                                                               this,
                                                            ).cancel(
                                                               null,
                                                               extraDelay,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "separateAnnots",
                                                         get: function get() {
                                                            var separateAnnots =
                                                               _classPrivateFieldGet(
                                                                  _internalRenderTask,
                                                                  this,
                                                               ).operatorList
                                                                  .separateAnnots;
                                                            if (
                                                               !separateAnnots
                                                            ) {
                                                               return false;
                                                            }
                                                            var _classPrivateFieldGet9 =
                                                                  _classPrivateFieldGet(
                                                                     _internalRenderTask,
                                                                     this,
                                                                  ),
                                                               annotationCanvasMap =
                                                                  _classPrivateFieldGet9.annotationCanvasMap;
                                                            return (
                                                               separateAnnots.form ||
                                                               (separateAnnots.canvas &&
                                                                  (annotationCanvasMap ===
                                                                     null ||
                                                                  annotationCanvasMap ===
                                                                     void 0
                                                                     ? void 0
                                                                     : annotationCanvasMap.size) >
                                                                     0)
                                                            );
                                                         },
                                                      },
                                                   ],
                                                );
                                             })();
                                          InternalRenderTask =
                                             /*#__PURE__*/ (function () {
                                                function InternalRenderTask(
                                                   _ref50,
                                                ) {
                                                   var callback =
                                                         _ref50.callback,
                                                      params = _ref50.params,
                                                      objs = _ref50.objs,
                                                      commonObjs =
                                                         _ref50.commonObjs,
                                                      annotationCanvasMap =
                                                         _ref50.annotationCanvasMap,
                                                      operatorList =
                                                         _ref50.operatorList,
                                                      pageIndex =
                                                         _ref50.pageIndex,
                                                      canvasFactory =
                                                         _ref50.canvasFactory,
                                                      filterFactory =
                                                         _ref50.filterFactory,
                                                      _ref50$useRequestAnim =
                                                         _ref50.useRequestAnimationFrame,
                                                      useRequestAnimationFrame =
                                                         _ref50$useRequestAnim ===
                                                         void 0
                                                            ? false
                                                            : _ref50$useRequestAnim,
                                                      _ref50$pdfBug =
                                                         _ref50.pdfBug,
                                                      pdfBug =
                                                         _ref50$pdfBug ===
                                                         void 0
                                                            ? false
                                                            : _ref50$pdfBug,
                                                      _ref50$pageColors =
                                                         _ref50.pageColors,
                                                      pageColors =
                                                         _ref50$pageColors ===
                                                         void 0
                                                            ? null
                                                            : _ref50$pageColors;
                                                   _classCallCheck(
                                                      this,
                                                      InternalRenderTask,
                                                   );
                                                   this.callback = callback;
                                                   this.params = params;
                                                   this.objs = objs;
                                                   this.commonObjs = commonObjs;
                                                   this.annotationCanvasMap =
                                                      annotationCanvasMap;
                                                   this.operatorListIdx = null;
                                                   this.operatorList =
                                                      operatorList;
                                                   this._pageIndex = pageIndex;
                                                   this.canvasFactory =
                                                      canvasFactory;
                                                   this.filterFactory =
                                                      filterFactory;
                                                   this._pdfBug = pdfBug;
                                                   this.pageColors = pageColors;
                                                   this.running = false;
                                                   this.graphicsReadyCallback =
                                                      null;
                                                   this.graphicsReady = false;
                                                   this._useRequestAnimationFrame =
                                                      useRequestAnimationFrame ===
                                                         true &&
                                                      typeof window !==
                                                         "undefined";
                                                   this.cancelled = false;
                                                   this.capability =
                                                      Promise.withResolvers();
                                                   this.task = new RenderTask(
                                                      this,
                                                   );
                                                   this._cancelBound =
                                                      this.cancel.bind(this);
                                                   this._continueBound =
                                                      this._continue.bind(this);
                                                   this._scheduleNextBound =
                                                      this._scheduleNext.bind(
                                                         this,
                                                      );
                                                   this._nextBound =
                                                      this._next.bind(this);
                                                   this._canvas =
                                                      params.canvasContext.canvas;
                                                }
                                                return _createClass(
                                                   InternalRenderTask,
                                                   [
                                                      {
                                                         key: "completed",
                                                         get: function get() {
                                                            return this.capability.promise[
                                                               "catch"
                                                            ](function () {});
                                                         },
                                                      },
                                                      {
                                                         key: "initializeGraphics",
                                                         value: function initializeGraphics(
                                                            _ref51,
                                                         ) {
                                                            var _globalThis$StepperMa,
                                                               _this$graphicsReadyCa;
                                                            var _ref51$transparency =
                                                                  _ref51.transparency,
                                                               transparency =
                                                                  _ref51$transparency ===
                                                                  void 0
                                                                     ? false
                                                                     : _ref51$transparency,
                                                               optionalContentConfig =
                                                                  _ref51.optionalContentConfig;
                                                            if (
                                                               this.cancelled
                                                            ) {
                                                               return;
                                                            }
                                                            if (this._canvas) {
                                                               if (
                                                                  _canvasInUse._.has(
                                                                     this
                                                                        ._canvas,
                                                                  )
                                                               ) {
                                                                  throw new Error(
                                                                     "Cannot use the same canvas during multiple render() operations. " +
                                                                        "Use different canvas or ensure previous operations were " +
                                                                        "cancelled or completed.",
                                                                  );
                                                               }
                                                               _canvasInUse._.add(
                                                                  this._canvas,
                                                               );
                                                            }
                                                            if (
                                                               this._pdfBug &&
                                                               (_globalThis$StepperMa =
                                                                  globalThis.StepperManager) !==
                                                                  null &&
                                                               _globalThis$StepperMa !==
                                                                  void 0 &&
                                                               _globalThis$StepperMa.enabled
                                                            ) {
                                                               this.stepper =
                                                                  globalThis.StepperManager.create(
                                                                     this
                                                                        ._pageIndex,
                                                                  );
                                                               this.stepper.init(
                                                                  this
                                                                     .operatorList,
                                                               );
                                                               this.stepper.nextBreakPoint =
                                                                  this.stepper.getNextBreakPoint();
                                                            }
                                                            var _this$params =
                                                                  this.params,
                                                               canvasContext =
                                                                  _this$params.canvasContext,
                                                               viewport =
                                                                  _this$params.viewport,
                                                               transform =
                                                                  _this$params.transform,
                                                               background =
                                                                  _this$params.background;
                                                            this.gfx =
                                                               new _canvas_js__WEBPACK_IMPORTED_MODULE_5__.CanvasGraphics(
                                                                  canvasContext,
                                                                  this.commonObjs,
                                                                  this.objs,
                                                                  this.canvasFactory,
                                                                  this.filterFactory,
                                                                  {
                                                                     optionalContentConfig:
                                                                        optionalContentConfig,
                                                                  },
                                                                  this.annotationCanvasMap,
                                                                  this.pageColors,
                                                               );
                                                            this.gfx.beginDrawing(
                                                               {
                                                                  transform:
                                                                     transform,
                                                                  viewport:
                                                                     viewport,
                                                                  transparency:
                                                                     transparency,
                                                                  background:
                                                                     background,
                                                               },
                                                            );
                                                            this.operatorListIdx = 0;
                                                            this.graphicsReady = true;
                                                            (_this$graphicsReadyCa =
                                                               this
                                                                  .graphicsReadyCallback) ===
                                                               null ||
                                                               _this$graphicsReadyCa ===
                                                                  void 0 ||
                                                               _this$graphicsReadyCa.call(
                                                                  this,
                                                               );
                                                         },
                                                      },
                                                      {
                                                         key: "cancel",
                                                         value: function cancel() {
                                                            var _this$gfx;
                                                            var error =
                                                               arguments.length >
                                                                  0 &&
                                                               arguments[0] !==
                                                                  undefined
                                                                  ? arguments[0]
                                                                  : null;
                                                            var extraDelay =
                                                               arguments.length >
                                                                  1 &&
                                                               arguments[1] !==
                                                                  undefined
                                                                  ? arguments[1]
                                                                  : 0;
                                                            this.running = false;
                                                            this.cancelled = true;
                                                            (_this$gfx =
                                                               this.gfx) ===
                                                               null ||
                                                               _this$gfx ===
                                                                  void 0 ||
                                                               _this$gfx.endDrawing();
                                                            _canvasInUse._[
                                                               "delete"
                                                            ](this._canvas);
                                                            this.callback(
                                                               error ||
                                                                  new _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.RenderingCancelledException(
                                                                     "Rendering cancelled, page ".concat(
                                                                        this
                                                                           ._pageIndex +
                                                                           1,
                                                                     ),
                                                                     extraDelay,
                                                                  ),
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "operatorListChanged",
                                                         value: function operatorListChanged() {
                                                            var _this$stepper;
                                                            if (
                                                               !this
                                                                  .graphicsReady
                                                            ) {
                                                               this
                                                                  .graphicsReadyCallback ||
                                                                  (this.graphicsReadyCallback =
                                                                     this._continueBound);
                                                               return;
                                                            }
                                                            (_this$stepper =
                                                               this.stepper) ===
                                                               null ||
                                                               _this$stepper ===
                                                                  void 0 ||
                                                               _this$stepper.updateOperatorList(
                                                                  this
                                                                     .operatorList,
                                                               );
                                                            if (this.running) {
                                                               return;
                                                            }
                                                            this._continue();
                                                         },
                                                      },
                                                      {
                                                         key: "_continue",
                                                         value: function _continue() {
                                                            this.running = true;
                                                            if (
                                                               this.cancelled
                                                            ) {
                                                               return;
                                                            }
                                                            if (
                                                               this.task
                                                                  .onContinue
                                                            ) {
                                                               this.task.onContinue(
                                                                  this
                                                                     ._scheduleNextBound,
                                                               );
                                                            } else {
                                                               this._scheduleNext();
                                                            }
                                                         },
                                                      },
                                                      {
                                                         key: "_scheduleNext",
                                                         value: function _scheduleNext() {
                                                            var _this41 = this;
                                                            if (
                                                               this
                                                                  ._useRequestAnimationFrame
                                                            ) {
                                                               window.requestAnimationFrame(
                                                                  function () {
                                                                     _this41
                                                                        ._nextBound()
                                                                        [
                                                                           "catch"
                                                                        ](_this41._cancelBound);
                                                                  },
                                                               );
                                                            } else {
                                                               Promise.resolve()
                                                                  .then(
                                                                     this
                                                                        ._nextBound,
                                                                  )
                                                                  [
                                                                     "catch"
                                                                  ](this._cancelBound);
                                                            }
                                                         },
                                                      },
                                                      {
                                                         key: "_next",
                                                         value: (function () {
                                                            var _next2 =
                                                               _asyncToGenerator(
                                                                  /*#__PURE__*/ _regenerator().m(
                                                                     function _callee7() {
                                                                        return _regenerator().w(
                                                                           function (
                                                                              _context8,
                                                                           ) {
                                                                              while (
                                                                                 1
                                                                              )
                                                                                 switch (
                                                                                    _context8.n
                                                                                 ) {
                                                                                    case 0:
                                                                                       if (
                                                                                          !this
                                                                                             .cancelled
                                                                                       ) {
                                                                                          _context8.n = 1;
                                                                                          break;
                                                                                       }
                                                                                       return _context8.a(
                                                                                          2,
                                                                                       );
                                                                                    case 1:
                                                                                       this.operatorListIdx =
                                                                                          this.gfx.executeOperatorList(
                                                                                             this
                                                                                                .operatorList,
                                                                                             this
                                                                                                .operatorListIdx,
                                                                                             this
                                                                                                ._continueBound,
                                                                                             this
                                                                                                .stepper,
                                                                                          );
                                                                                       if (
                                                                                          this
                                                                                             .operatorListIdx ===
                                                                                          this
                                                                                             .operatorList
                                                                                             .argsArray
                                                                                             .length
                                                                                       ) {
                                                                                          this.running = false;
                                                                                          if (
                                                                                             this
                                                                                                .operatorList
                                                                                                .lastChunk
                                                                                          ) {
                                                                                             this.gfx.endDrawing();
                                                                                             _canvasInUse._[
                                                                                                "delete"
                                                                                             ](
                                                                                                this
                                                                                                   ._canvas,
                                                                                             );
                                                                                             this.callback();
                                                                                          }
                                                                                       }
                                                                                    case 2:
                                                                                       return _context8.a(
                                                                                          2,
                                                                                       );
                                                                                 }
                                                                           },
                                                                           _callee7,
                                                                           this,
                                                                        );
                                                                     },
                                                                  ),
                                                               );
                                                            function _next() {
                                                               return _next2.apply(
                                                                  this,
                                                                  arguments,
                                                               );
                                                            }
                                                            return _next;
                                                         })(),
                                                      },
                                                   ],
                                                );
                                             })();
                                          _canvasInUse = { _: new WeakSet() };
                                          _version = "4.2.67";
                                          _build = "49b388101";
                                          __webpack_async_result__();
                                          _context9.n = 5;
                                          break;
                                       case 4:
                                          _context9.p = 4;
                                          _t8 = _context9.v;
                                          __webpack_async_result__(_t8);
                                       case 5:
                                          return _context9.a(2);
                                    }
                              },
                              _callee8,
                              null,
                              [[0, 4]],
                           );
                        },
                     ),
                  );
                  return function (_x2, _x3) {
                     return _ref23.apply(this, arguments);
                  };
               })(),
            ); /***/
         },
         /***/ 583: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ BaseCMapReaderFactory:
                  function BaseCMapReaderFactory() {
                     return /* binding */ _BaseCMapReaderFactory;
                  },
               /* harmony export */ BaseCanvasFactory:
                  function BaseCanvasFactory() {
                     return /* binding */ _BaseCanvasFactory;
                  },
               /* harmony export */ BaseFilterFactory:
                  function BaseFilterFactory() {
                     return /* binding */ _BaseFilterFactory;
                  },
               /* harmony export */ BaseSVGFactory: function BaseSVGFactory() {
                  return /* binding */ _BaseSVGFactory;
               },
               /* harmony export */ BaseStandardFontDataFactory:
                  function BaseStandardFontDataFactory() {
                     return /* binding */ _BaseStandardFontDataFactory;
                  } /* harmony export */,
            });
            /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(292);
            var _BaseFilterFactory = /*#__PURE__*/ (function () {
               function _BaseFilterFactory() {
                  _classCallCheck(this, _BaseFilterFactory);
                  if (this.constructor === _BaseFilterFactory) {
                     (0,
                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(
                        "Cannot initialize BaseFilterFactory.",
                     );
                  }
               }
               return _createClass(_BaseFilterFactory, [
                  {
                     key: "addFilter",
                     value: function addFilter(maps) {
                        return "none";
                     },
                  },
                  {
                     key: "addHCMFilter",
                     value: function addHCMFilter(fgColor, bgColor) {
                        return "none";
                     },
                  },
                  {
                     key: "addHighlightHCMFilter",
                     value: function addHighlightHCMFilter(
                        filterName,
                        fgColor,
                        bgColor,
                        newFgColor,
                        newBgColor,
                     ) {
                        return "none";
                     },
                  },
                  {
                     key: "destroy",
                     value: function destroy() {
                        var keepHCM =
                           arguments.length > 0 && arguments[0] !== undefined
                              ? arguments[0]
                              : false;
                     },
                  },
               ]);
            })();
            var _BaseCanvasFactory = /*#__PURE__*/ (function () {
               function _BaseCanvasFactory() {
                  _classCallCheck(this, _BaseCanvasFactory);
                  if (this.constructor === _BaseCanvasFactory) {
                     (0,
                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(
                        "Cannot initialize BaseCanvasFactory.",
                     );
                  }
               }
               return _createClass(_BaseCanvasFactory, [
                  {
                     key: "create",
                     value: function create(width, height) {
                        if (width <= 0 || height <= 0) {
                           throw new Error("Invalid canvas size");
                        }
                        var canvas = this._createCanvas(width, height);
                        return {
                           canvas: canvas,
                           context: canvas.getContext("2d"),
                        };
                     },
                  },
                  {
                     key: "reset",
                     value: function reset(canvasAndContext, width, height) {
                        if (!canvasAndContext.canvas) {
                           throw new Error("Canvas is not specified");
                        }
                        if (width <= 0 || height <= 0) {
                           throw new Error("Invalid canvas size");
                        }
                        canvasAndContext.canvas.width = width;
                        canvasAndContext.canvas.height = height;
                     },
                  },
                  {
                     key: "destroy",
                     value: function destroy(canvasAndContext) {
                        if (!canvasAndContext.canvas) {
                           throw new Error("Canvas is not specified");
                        }
                        canvasAndContext.canvas.width = 0;
                        canvasAndContext.canvas.height = 0;
                        canvasAndContext.canvas = null;
                        canvasAndContext.context = null;
                     },
                  },
                  {
                     key: "_createCanvas",
                     value: function _createCanvas(width, height) {
                        (0,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(
                           "Abstract method `_createCanvas` called.",
                        );
                     },
                  },
               ]);
            })();
            var _BaseCMapReaderFactory = /*#__PURE__*/ (function () {
               function _BaseCMapReaderFactory(_ref52) {
                  var _ref52$baseUrl = _ref52.baseUrl,
                     baseUrl =
                        _ref52$baseUrl === void 0 ? null : _ref52$baseUrl,
                     _ref52$isCompressed = _ref52.isCompressed,
                     isCompressed =
                        _ref52$isCompressed === void 0
                           ? true
                           : _ref52$isCompressed;
                  _classCallCheck(this, _BaseCMapReaderFactory);
                  if (this.constructor === _BaseCMapReaderFactory) {
                     (0,
                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(
                        "Cannot initialize BaseCMapReaderFactory.",
                     );
                  }
                  this.baseUrl = baseUrl;
                  this.isCompressed = isCompressed;
               }
               return _createClass(_BaseCMapReaderFactory, [
                  {
                     key: "fetch",
                     value: (function () {
                        var _fetch = _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(
                              function _callee9(_ref53) {
                                 var _this43 = this;
                                 var name, url, compressionType;
                                 return _regenerator().w(
                                    function (_context0) {
                                       while (1)
                                          switch (_context0.n) {
                                             case 0:
                                                name = _ref53.name;
                                                if (this.baseUrl) {
                                                   _context0.n = 1;
                                                   break;
                                                }
                                                throw new Error(
                                                   'The CMap "baseUrl" parameter must be specified, ensure that ' +
                                                      'the "cMapUrl" and "cMapPacked" API parameters are provided.',
                                                );
                                             case 1:
                                                if (name) {
                                                   _context0.n = 2;
                                                   break;
                                                }
                                                throw new Error(
                                                   "CMap name must be specified.",
                                                );
                                             case 2:
                                                url =
                                                   this.baseUrl +
                                                   name +
                                                   (this.isCompressed
                                                      ? ".bcmap"
                                                      : "");
                                                compressionType = this
                                                   .isCompressed
                                                   ? _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                        .CMapCompressionType
                                                        .BINARY
                                                   : _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                                        .CMapCompressionType
                                                        .NONE;
                                                return _context0.a(
                                                   2,
                                                   this._fetchData(
                                                      url,
                                                      compressionType,
                                                   )["catch"](
                                                      function (reason) {
                                                         throw new Error(
                                                            "Unable to load "
                                                               .concat(
                                                                  _this43.isCompressed
                                                                     ? "binary "
                                                                     : "",
                                                                  "CMap at: ",
                                                               )
                                                               .concat(url),
                                                         );
                                                      },
                                                   ),
                                                );
                                          }
                                    },
                                    _callee9,
                                    this,
                                 );
                              },
                           ),
                        );
                        function fetch(_x6) {
                           return _fetch.apply(this, arguments);
                        }
                        return fetch;
                     })(),
                  },
                  {
                     key: "_fetchData",
                     value: function _fetchData(url, compressionType) {
                        (0,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(
                           "Abstract method `_fetchData` called.",
                        );
                     },
                  },
               ]);
            })();
            var _BaseStandardFontDataFactory = /*#__PURE__*/ (function () {
               function _BaseStandardFontDataFactory(_ref54) {
                  var _ref54$baseUrl = _ref54.baseUrl,
                     baseUrl =
                        _ref54$baseUrl === void 0 ? null : _ref54$baseUrl;
                  _classCallCheck(this, _BaseStandardFontDataFactory);
                  if (this.constructor === _BaseStandardFontDataFactory) {
                     (0,
                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(
                        "Cannot initialize BaseStandardFontDataFactory.",
                     );
                  }
                  this.baseUrl = baseUrl;
               }
               return _createClass(_BaseStandardFontDataFactory, [
                  {
                     key: "fetch",
                     value: (function () {
                        var _fetch2 = _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(
                              function _callee0(_ref55) {
                                 var filename, url;
                                 return _regenerator().w(
                                    function (_context1) {
                                       while (1)
                                          switch (_context1.n) {
                                             case 0:
                                                filename = _ref55.filename;
                                                if (this.baseUrl) {
                                                   _context1.n = 1;
                                                   break;
                                                }
                                                throw new Error(
                                                   'The standard font "baseUrl" parameter must be specified, ensure that ' +
                                                      'the "standardFontDataUrl" API parameter is provided.',
                                                );
                                             case 1:
                                                if (filename) {
                                                   _context1.n = 2;
                                                   break;
                                                }
                                                throw new Error(
                                                   "Font filename must be specified.",
                                                );
                                             case 2:
                                                url = ""
                                                   .concat(this.baseUrl)
                                                   .concat(filename);
                                                return _context1.a(
                                                   2,
                                                   this._fetchData(url)[
                                                      "catch"
                                                   ](function (reason) {
                                                      throw new Error(
                                                         "Unable to load font data at: ".concat(
                                                            url,
                                                         ),
                                                      );
                                                   }),
                                                );
                                          }
                                    },
                                    _callee0,
                                    this,
                                 );
                              },
                           ),
                        );
                        function fetch(_x7) {
                           return _fetch2.apply(this, arguments);
                        }
                        return fetch;
                     })(),
                  },
                  {
                     key: "_fetchData",
                     value: function _fetchData(url) {
                        (0,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(
                           "Abstract method `_fetchData` called.",
                        );
                     },
                  },
               ]);
            })();
            var _BaseSVGFactory = /*#__PURE__*/ (function () {
               function _BaseSVGFactory() {
                  _classCallCheck(this, _BaseSVGFactory);
                  if (this.constructor === _BaseSVGFactory) {
                     (0,
                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(
                        "Cannot initialize BaseSVGFactory.",
                     );
                  }
               }
               return _createClass(_BaseSVGFactory, [
                  {
                     key: "create",
                     value: function create(width, height) {
                        var skipDimensions =
                           arguments.length > 2 && arguments[2] !== undefined
                              ? arguments[2]
                              : false;
                        if (width <= 0 || height <= 0) {
                           throw new Error("Invalid SVG dimensions");
                        }
                        var svg = this._createSVG("svg:svg");
                        svg.setAttribute("version", "1.1");
                        if (!skipDimensions) {
                           svg.setAttribute("width", "".concat(width, "px"));
                           svg.setAttribute("height", "".concat(height, "px"));
                        }
                        svg.setAttribute("preserveAspectRatio", "none");
                        svg.setAttribute(
                           "viewBox",
                           "0 0 ".concat(width, " ").concat(height),
                        );
                        return svg;
                     },
                  },
                  {
                     key: "createElement",
                     value: function createElement(type) {
                        if (typeof type !== "string") {
                           throw new Error("Invalid SVG element type");
                        }
                        return this._createSVG(type);
                     },
                  },
                  {
                     key: "_createSVG",
                     value: function _createSVG(type) {
                        (0,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(
                           "Abstract method `_createSVG` called.",
                        );
                     },
                  },
               ]);
            })(); /***/
         },
         /***/ 923: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
               CanvasGraphics: function CanvasGraphics() {
                  return /* binding */ _CanvasGraphics;
               },
            }); // EXTERNAL MODULE: ./src/shared/util.js
            var util = __webpack_require__(292); // EXTERNAL MODULE: ./src/display/display_utils.js
            var display_utils = __webpack_require__(419); // CONCATENATED MODULE: ./src/display/pattern_helper.js
            var PathType = {
               FILL: "Fill",
               STROKE: "Stroke",
               SHADING: "Shading",
            };
            function applyBoundingBox(ctx, bbox) {
               if (!bbox) {
                  return;
               }
               var width = bbox[2] - bbox[0];
               var height = bbox[3] - bbox[1];
               var region = new Path2D();
               region.rect(bbox[0], bbox[1], width, height);
               ctx.clip(region);
            }
            var BaseShadingPattern = /*#__PURE__*/ (function () {
               function BaseShadingPattern() {
                  _classCallCheck(this, BaseShadingPattern);
                  if (this.constructor === BaseShadingPattern) {
                     (0, util.unreachable)(
                        "Cannot initialize BaseShadingPattern.",
                     );
                  }
               }
               return _createClass(BaseShadingPattern, [
                  {
                     key: "getPattern",
                     value: function getPattern() {
                        (0, util.unreachable)(
                           "Abstract method `getPattern` called.",
                        );
                     },
                  },
               ]);
            })();
            var RadialAxialShadingPattern = /*#__PURE__*/ (function (
               _BaseShadingPattern,
            ) {
               function RadialAxialShadingPattern(IR) {
                  var _this44;
                  _classCallCheck(this, RadialAxialShadingPattern);
                  _this44 = _callSuper(this, RadialAxialShadingPattern);
                  _this44._type = IR[1];
                  _this44._bbox = IR[2];
                  _this44._colorStops = IR[3];
                  _this44._p0 = IR[4];
                  _this44._p1 = IR[5];
                  _this44._r0 = IR[6];
                  _this44._r1 = IR[7];
                  _this44.matrix = null;
                  return _this44;
               }
               _inherits(RadialAxialShadingPattern, _BaseShadingPattern);
               return _createClass(RadialAxialShadingPattern, [
                  {
                     key: "_createGradient",
                     value: function _createGradient(ctx) {
                        var grad;
                        if (this._type === "axial") {
                           grad = ctx.createLinearGradient(
                              this._p0[0],
                              this._p0[1],
                              this._p1[0],
                              this._p1[1],
                           );
                        } else if (this._type === "radial") {
                           grad = ctx.createRadialGradient(
                              this._p0[0],
                              this._p0[1],
                              this._r0,
                              this._p1[0],
                              this._p1[1],
                              this._r1,
                           );
                        }
                        var _iterator47 = _createForOfIteratorHelper(
                              this._colorStops,
                           ),
                           _step47;
                        try {
                           for (
                              _iterator47.s();
                              !(_step47 = _iterator47.n()).done;

                           ) {
                              var colorStop = _step47.value;
                              grad.addColorStop(colorStop[0], colorStop[1]);
                           }
                        } catch (err) {
                           _iterator47.e(err);
                        } finally {
                           _iterator47.f();
                        }
                        return grad;
                     },
                  },
                  {
                     key: "getPattern",
                     value: function getPattern(ctx, owner, inverse, pathType) {
                        var pattern;
                        if (
                           pathType === PathType.STROKE ||
                           pathType === PathType.FILL
                        ) {
                           var ownerBBox =
                              owner.current.getClippedPathBoundingBox(
                                 pathType,
                                 (0, display_utils.getCurrentTransform)(ctx),
                              ) || [0, 0, 0, 0];
                           var width =
                              Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;
                           var height =
                              Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;
                           var tmpCanvas = owner.cachedCanvases.getCanvas(
                              "pattern",
                              width,
                              height,
                              true,
                           );
                           var tmpCtx = tmpCanvas.context;
                           tmpCtx.clearRect(
                              0,
                              0,
                              tmpCtx.canvas.width,
                              tmpCtx.canvas.height,
                           );
                           tmpCtx.beginPath();
                           tmpCtx.rect(
                              0,
                              0,
                              tmpCtx.canvas.width,
                              tmpCtx.canvas.height,
                           );
                           tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);
                           inverse = util.Util.transform(inverse, [
                              1,
                              0,
                              0,
                              1,
                              ownerBBox[0],
                              ownerBBox[1],
                           ]);
                           tmpCtx.transform.apply(
                              tmpCtx,
                              _toConsumableArray(owner.baseTransform),
                           );
                           if (this.matrix) {
                              tmpCtx.transform.apply(
                                 tmpCtx,
                                 _toConsumableArray(this.matrix),
                              );
                           }
                           applyBoundingBox(tmpCtx, this._bbox);
                           tmpCtx.fillStyle = this._createGradient(tmpCtx);
                           tmpCtx.fill();
                           pattern = ctx.createPattern(
                              tmpCanvas.canvas,
                              "no-repeat",
                           );
                           var domMatrix = new DOMMatrix(inverse);
                           pattern.setTransform(domMatrix);
                        } else {
                           applyBoundingBox(ctx, this._bbox);
                           pattern = this._createGradient(ctx);
                        }
                        return pattern;
                     },
                  },
               ]);
            })(BaseShadingPattern);
            function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {
               var coords = context.coords,
                  colors = context.colors;
               var bytes = data.data,
                  rowSize = data.width * 4;
               var tmp;
               if (coords[p1 + 1] > coords[p2 + 1]) {
                  tmp = p1;
                  p1 = p2;
                  p2 = tmp;
                  tmp = c1;
                  c1 = c2;
                  c2 = tmp;
               }
               if (coords[p2 + 1] > coords[p3 + 1]) {
                  tmp = p2;
                  p2 = p3;
                  p3 = tmp;
                  tmp = c2;
                  c2 = c3;
                  c3 = tmp;
               }
               if (coords[p1 + 1] > coords[p2 + 1]) {
                  tmp = p1;
                  p1 = p2;
                  p2 = tmp;
                  tmp = c1;
                  c1 = c2;
                  c2 = tmp;
               }
               var x1 = (coords[p1] + context.offsetX) * context.scaleX;
               var y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;
               var x2 = (coords[p2] + context.offsetX) * context.scaleX;
               var y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;
               var x3 = (coords[p3] + context.offsetX) * context.scaleX;
               var y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;
               if (y1 >= y3) {
                  return;
               }
               var c1r = colors[c1],
                  c1g = colors[c1 + 1],
                  c1b = colors[c1 + 2];
               var c2r = colors[c2],
                  c2g = colors[c2 + 1],
                  c2b = colors[c2 + 2];
               var c3r = colors[c3],
                  c3g = colors[c3 + 1],
                  c3b = colors[c3 + 2];
               var minY = Math.round(y1),
                  maxY = Math.round(y3);
               var xa, car, cag, cab;
               var xb, cbr, cbg, cbb;
               for (var y = minY; y <= maxY; y++) {
                  if (y < y2) {
                     var _k = y < y1 ? 0 : (y1 - y) / (y1 - y2);
                     xa = x1 - (x1 - x2) * _k;
                     car = c1r - (c1r - c2r) * _k;
                     cag = c1g - (c1g - c2g) * _k;
                     cab = c1b - (c1b - c2b) * _k;
                  } else {
                     var _k2 = void 0;
                     if (y > y3) {
                        _k2 = 1;
                     } else if (y2 === y3) {
                        _k2 = 0;
                     } else {
                        _k2 = (y2 - y) / (y2 - y3);
                     }
                     xa = x2 - (x2 - x3) * _k2;
                     car = c2r - (c2r - c3r) * _k2;
                     cag = c2g - (c2g - c3g) * _k2;
                     cab = c2b - (c2b - c3b) * _k2;
                  }
                  var k = void 0;
                  if (y < y1) {
                     k = 0;
                  } else if (y > y3) {
                     k = 1;
                  } else {
                     k = (y1 - y) / (y1 - y3);
                  }
                  xb = x1 - (x1 - x3) * k;
                  cbr = c1r - (c1r - c3r) * k;
                  cbg = c1g - (c1g - c3g) * k;
                  cbb = c1b - (c1b - c3b) * k;
                  var x1_ = Math.round(Math.min(xa, xb));
                  var x2_ = Math.round(Math.max(xa, xb));
                  var j = rowSize * y + x1_ * 4;
                  for (var x = x1_; x <= x2_; x++) {
                     k = (xa - x) / (xa - xb);
                     if (k < 0) {
                        k = 0;
                     } else if (k > 1) {
                        k = 1;
                     }
                     bytes[j++] = (car - (car - cbr) * k) | 0;
                     bytes[j++] = (cag - (cag - cbg) * k) | 0;
                     bytes[j++] = (cab - (cab - cbb) * k) | 0;
                     bytes[j++] = 255;
                  }
               }
            }
            function drawFigure(data, figure, context) {
               var ps = figure.coords;
               var cs = figure.colors;
               var i, ii;
               switch (figure.type) {
                  case "lattice":
                     var verticesPerRow = figure.verticesPerRow;
                     var rows = Math.floor(ps.length / verticesPerRow) - 1;
                     var cols = verticesPerRow - 1;
                     for (i = 0; i < rows; i++) {
                        var q = i * verticesPerRow;
                        for (var j = 0; j < cols; j++, q++) {
                           drawTriangle(
                              data,
                              context,
                              ps[q],
                              ps[q + 1],
                              ps[q + verticesPerRow],
                              cs[q],
                              cs[q + 1],
                              cs[q + verticesPerRow],
                           );
                           drawTriangle(
                              data,
                              context,
                              ps[q + verticesPerRow + 1],
                              ps[q + 1],
                              ps[q + verticesPerRow],
                              cs[q + verticesPerRow + 1],
                              cs[q + 1],
                              cs[q + verticesPerRow],
                           );
                        }
                     }
                     break;
                  case "triangles":
                     for (i = 0, ii = ps.length; i < ii; i += 3) {
                        drawTriangle(
                           data,
                           context,
                           ps[i],
                           ps[i + 1],
                           ps[i + 2],
                           cs[i],
                           cs[i + 1],
                           cs[i + 2],
                        );
                     }
                     break;
                  default:
                     throw new Error("illegal figure");
               }
            }
            var MeshShadingPattern = /*#__PURE__*/ (function (
               _BaseShadingPattern2,
            ) {
               function MeshShadingPattern(IR) {
                  var _this45;
                  _classCallCheck(this, MeshShadingPattern);
                  _this45 = _callSuper(this, MeshShadingPattern);
                  _this45._coords = IR[2];
                  _this45._colors = IR[3];
                  _this45._figures = IR[4];
                  _this45._bounds = IR[5];
                  _this45._bbox = IR[7];
                  _this45._background = IR[8];
                  _this45.matrix = null;
                  return _this45;
               }
               _inherits(MeshShadingPattern, _BaseShadingPattern2);
               return _createClass(MeshShadingPattern, [
                  {
                     key: "_createMeshCanvas",
                     value: function _createMeshCanvas(
                        combinedScale,
                        backgroundColor,
                        cachedCanvases,
                     ) {
                        var EXPECTED_SCALE = 1.1;
                        var MAX_PATTERN_SIZE = 3000;
                        var BORDER_SIZE = 2;
                        var offsetX = Math.floor(this._bounds[0]);
                        var offsetY = Math.floor(this._bounds[1]);
                        var boundsWidth = Math.ceil(this._bounds[2]) - offsetX;
                        var boundsHeight = Math.ceil(this._bounds[3]) - offsetY;
                        var width = Math.min(
                           Math.ceil(
                              Math.abs(
                                 boundsWidth *
                                    combinedScale[0] *
                                    EXPECTED_SCALE,
                              ),
                           ),
                           MAX_PATTERN_SIZE,
                        );
                        var height = Math.min(
                           Math.ceil(
                              Math.abs(
                                 boundsHeight *
                                    combinedScale[1] *
                                    EXPECTED_SCALE,
                              ),
                           ),
                           MAX_PATTERN_SIZE,
                        );
                        var scaleX = boundsWidth / width;
                        var scaleY = boundsHeight / height;
                        var context = {
                           coords: this._coords,
                           colors: this._colors,
                           offsetX: -offsetX,
                           offsetY: -offsetY,
                           scaleX: 1 / scaleX,
                           scaleY: 1 / scaleY,
                        };
                        var paddedWidth = width + BORDER_SIZE * 2;
                        var paddedHeight = height + BORDER_SIZE * 2;
                        var tmpCanvas = cachedCanvases.getCanvas(
                           "mesh",
                           paddedWidth,
                           paddedHeight,
                           false,
                        );
                        var tmpCtx = tmpCanvas.context;
                        var data = tmpCtx.createImageData(width, height);
                        if (backgroundColor) {
                           var bytes = data.data;
                           for (var i = 0, ii = bytes.length; i < ii; i += 4) {
                              bytes[i] = backgroundColor[0];
                              bytes[i + 1] = backgroundColor[1];
                              bytes[i + 2] = backgroundColor[2];
                              bytes[i + 3] = 255;
                           }
                        }
                        var _iterator48 = _createForOfIteratorHelper(
                              this._figures,
                           ),
                           _step48;
                        try {
                           for (
                              _iterator48.s();
                              !(_step48 = _iterator48.n()).done;

                           ) {
                              var figure = _step48.value;
                              drawFigure(data, figure, context);
                           }
                        } catch (err) {
                           _iterator48.e(err);
                        } finally {
                           _iterator48.f();
                        }
                        tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);
                        var canvas = tmpCanvas.canvas;
                        return {
                           canvas: canvas,
                           offsetX: offsetX - BORDER_SIZE * scaleX,
                           offsetY: offsetY - BORDER_SIZE * scaleY,
                           scaleX: scaleX,
                           scaleY: scaleY,
                        };
                     },
                  },
                  {
                     key: "getPattern",
                     value: function getPattern(ctx, owner, inverse, pathType) {
                        applyBoundingBox(ctx, this._bbox);
                        var scale;
                        if (pathType === PathType.SHADING) {
                           scale = util.Util.singularValueDecompose2dScale(
                              (0, display_utils.getCurrentTransform)(ctx),
                           );
                        } else {
                           scale = util.Util.singularValueDecompose2dScale(
                              owner.baseTransform,
                           );
                           if (this.matrix) {
                              var matrixScale =
                                 util.Util.singularValueDecompose2dScale(
                                    this.matrix,
                                 );
                              scale = [
                                 scale[0] * matrixScale[0],
                                 scale[1] * matrixScale[1],
                              ];
                           }
                        }
                        var temporaryPatternCanvas = this._createMeshCanvas(
                           scale,
                           pathType === PathType.SHADING
                              ? null
                              : this._background,
                           owner.cachedCanvases,
                        );
                        if (pathType !== PathType.SHADING) {
                           ctx.setTransform.apply(
                              ctx,
                              _toConsumableArray(owner.baseTransform),
                           );
                           if (this.matrix) {
                              ctx.transform.apply(
                                 ctx,
                                 _toConsumableArray(this.matrix),
                              );
                           }
                        }
                        ctx.translate(
                           temporaryPatternCanvas.offsetX,
                           temporaryPatternCanvas.offsetY,
                        );
                        ctx.scale(
                           temporaryPatternCanvas.scaleX,
                           temporaryPatternCanvas.scaleY,
                        );
                        return ctx.createPattern(
                           temporaryPatternCanvas.canvas,
                           "no-repeat",
                        );
                     },
                  },
               ]);
            })(BaseShadingPattern);
            var DummyShadingPattern = /*#__PURE__*/ (function (
               _BaseShadingPattern3,
            ) {
               function DummyShadingPattern() {
                  _classCallCheck(this, DummyShadingPattern);
                  return _callSuper(this, DummyShadingPattern, arguments);
               }
               _inherits(DummyShadingPattern, _BaseShadingPattern3);
               return _createClass(DummyShadingPattern, [
                  {
                     key: "getPattern",
                     value: function getPattern() {
                        return "hotpink";
                     },
                  },
               ]);
            })(BaseShadingPattern);
            function getShadingPattern(IR) {
               switch (IR[0]) {
                  case "RadialAxial":
                     return new RadialAxialShadingPattern(IR);
                  case "Mesh":
                     return new MeshShadingPattern(IR);
                  case "Dummy":
                     return new DummyShadingPattern();
               }
               throw new Error("Unknown IR type: ".concat(IR[0]));
            }
            var PaintType = { COLORED: 1, UNCOLORED: 2 };
            var TilingPattern = /*#__PURE__*/ (function () {
               function TilingPattern(
                  IR,
                  color,
                  ctx,
                  canvasGraphicsFactory,
                  baseTransform,
               ) {
                  _classCallCheck(this, TilingPattern);
                  this.operatorList = IR[2];
                  this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];
                  this.bbox = IR[4];
                  this.xstep = IR[5];
                  this.ystep = IR[6];
                  this.paintType = IR[7];
                  this.tilingType = IR[8];
                  this.color = color;
                  this.ctx = ctx;
                  this.canvasGraphicsFactory = canvasGraphicsFactory;
                  this.baseTransform = baseTransform;
               }
               return _createClass(TilingPattern, [
                  {
                     key: "createPatternCanvas",
                     value: function createPatternCanvas(owner) {
                        var operatorList = this.operatorList;
                        var bbox = this.bbox;
                        var xstep = this.xstep;
                        var ystep = this.ystep;
                        var paintType = this.paintType;
                        var tilingType = this.tilingType;
                        var color = this.color;
                        var canvasGraphicsFactory = this.canvasGraphicsFactory;
                        (0, util.info)("TilingType: " + tilingType);
                        var x0 = bbox[0],
                           y0 = bbox[1],
                           x1 = bbox[2],
                           y1 = bbox[3];
                        var matrixScale =
                           util.Util.singularValueDecompose2dScale(this.matrix);
                        var curMatrixScale =
                           util.Util.singularValueDecompose2dScale(
                              this.baseTransform,
                           );
                        var combinedScale = [
                           matrixScale[0] * curMatrixScale[0],
                           matrixScale[1] * curMatrixScale[1],
                        ];
                        var dimx = this.getSizeAndScale(
                           xstep,
                           this.ctx.canvas.width,
                           combinedScale[0],
                        );
                        var dimy = this.getSizeAndScale(
                           ystep,
                           this.ctx.canvas.height,
                           combinedScale[1],
                        );
                        var tmpCanvas = owner.cachedCanvases.getCanvas(
                           "pattern",
                           dimx.size,
                           dimy.size,
                           true,
                        );
                        var tmpCtx = tmpCanvas.context;
                        var graphics =
                           canvasGraphicsFactory.createCanvasGraphics(tmpCtx);
                        graphics.groupLevel = owner.groupLevel;
                        this.setFillAndStrokeStyleToContext(
                           graphics,
                           paintType,
                           color,
                        );
                        var adjustedX0 = x0;
                        var adjustedY0 = y0;
                        var adjustedX1 = x1;
                        var adjustedY1 = y1;
                        if (x0 < 0) {
                           adjustedX0 = 0;
                           adjustedX1 += Math.abs(x0);
                        }
                        if (y0 < 0) {
                           adjustedY0 = 0;
                           adjustedY1 += Math.abs(y0);
                        }
                        tmpCtx.translate(
                           -(dimx.scale * adjustedX0),
                           -(dimy.scale * adjustedY0),
                        );
                        graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);
                        tmpCtx.save();
                        this.clipBbox(
                           graphics,
                           adjustedX0,
                           adjustedY0,
                           adjustedX1,
                           adjustedY1,
                        );
                        graphics.baseTransform = (0,
                        display_utils.getCurrentTransform)(graphics.ctx);
                        graphics.executeOperatorList(operatorList);
                        graphics.endDrawing();
                        return {
                           canvas: tmpCanvas.canvas,
                           scaleX: dimx.scale,
                           scaleY: dimy.scale,
                           offsetX: adjustedX0,
                           offsetY: adjustedY0,
                        };
                     },
                  },
                  {
                     key: "getSizeAndScale",
                     value: function getSizeAndScale(
                        step,
                        realOutputSize,
                        scale,
                     ) {
                        step = Math.abs(step);
                        var maxSize = Math.max(
                           TilingPattern.MAX_PATTERN_SIZE,
                           realOutputSize,
                        );
                        var size = Math.ceil(step * scale);
                        if (size >= maxSize) {
                           size = maxSize;
                        } else {
                           scale = size / step;
                        }
                        return { scale: scale, size: size };
                     },
                  },
                  {
                     key: "clipBbox",
                     value: function clipBbox(graphics, x0, y0, x1, y1) {
                        var bboxWidth = x1 - x0;
                        var bboxHeight = y1 - y0;
                        graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);
                        graphics.current.updateRectMinMax(
                           (0, display_utils.getCurrentTransform)(graphics.ctx),
                           [x0, y0, x1, y1],
                        );
                        graphics.clip();
                        graphics.endPath();
                     },
                  },
                  {
                     key: "setFillAndStrokeStyleToContext",
                     value: function setFillAndStrokeStyleToContext(
                        graphics,
                        paintType,
                        color,
                     ) {
                        var context = graphics.ctx,
                           current = graphics.current;
                        switch (paintType) {
                           case PaintType.COLORED:
                              var ctx = this.ctx;
                              context.fillStyle = ctx.fillStyle;
                              context.strokeStyle = ctx.strokeStyle;
                              current.fillColor = ctx.fillStyle;
                              current.strokeColor = ctx.strokeStyle;
                              break;
                           case PaintType.UNCOLORED:
                              var cssColor = util.Util.makeHexColor(
                                 color[0],
                                 color[1],
                                 color[2],
                              );
                              context.fillStyle = cssColor;
                              context.strokeStyle = cssColor;
                              current.fillColor = cssColor;
                              current.strokeColor = cssColor;
                              break;
                           default:
                              throw new util.FormatError(
                                 "Unsupported paint type: ".concat(paintType),
                              );
                        }
                     },
                  },
                  {
                     key: "getPattern",
                     value: function getPattern(ctx, owner, inverse, pathType) {
                        var matrix = inverse;
                        if (pathType !== PathType.SHADING) {
                           matrix = util.Util.transform(
                              matrix,
                              owner.baseTransform,
                           );
                           if (this.matrix) {
                              matrix = util.Util.transform(matrix, this.matrix);
                           }
                        }
                        var temporaryPatternCanvas =
                           this.createPatternCanvas(owner);
                        var domMatrix = new DOMMatrix(matrix);
                        domMatrix = domMatrix.translate(
                           temporaryPatternCanvas.offsetX,
                           temporaryPatternCanvas.offsetY,
                        );
                        domMatrix = domMatrix.scale(
                           1 / temporaryPatternCanvas.scaleX,
                           1 / temporaryPatternCanvas.scaleY,
                        );
                        var pattern = ctx.createPattern(
                           temporaryPatternCanvas.canvas,
                           "repeat",
                        );
                        pattern.setTransform(domMatrix);
                        return pattern;
                     },
                  },
               ]);
            })();
            _defineProperty(TilingPattern, "MAX_PATTERN_SIZE", 3000); // CONCATENATED MODULE: ./src/shared/image_utils.js
            function convertToRGBA(params) {
               switch (params.kind) {
                  case ImageKind.GRAYSCALE_1BPP:
                     return convertBlackAndWhiteToRGBA(params);
                  case ImageKind.RGB_24BPP:
                     return convertRGBToRGBA(params);
               }
               return null;
            }
            function convertBlackAndWhiteToRGBA(_ref56) {
               var src = _ref56.src,
                  _ref56$srcPos = _ref56.srcPos,
                  srcPos = _ref56$srcPos === void 0 ? 0 : _ref56$srcPos,
                  dest = _ref56.dest,
                  width = _ref56.width,
                  height = _ref56.height,
                  _ref56$nonBlackColor = _ref56.nonBlackColor,
                  nonBlackColor =
                     _ref56$nonBlackColor === void 0
                        ? 0xffffffff
                        : _ref56$nonBlackColor,
                  _ref56$inverseDecode = _ref56.inverseDecode,
                  inverseDecode =
                     _ref56$inverseDecode === void 0
                        ? false
                        : _ref56$inverseDecode;
               var black = util.FeatureTest.isLittleEndian
                  ? 0xff000000
                  : 0x000000ff;
               var _ref57 = inverseDecode
                     ? [nonBlackColor, black]
                     : [black, nonBlackColor],
                  _ref58 = _slicedToArray(_ref57, 2),
                  zeroMapping = _ref58[0],
                  oneMapping = _ref58[1];
               var widthInSource = width >> 3;
               var widthRemainder = width & 7;
               var srcLength = src.length;
               dest = new Uint32Array(dest.buffer);
               var destPos = 0;
               for (var i = 0; i < height; i++) {
                  for (
                     var max = srcPos + widthInSource;
                     srcPos < max;
                     srcPos++
                  ) {
                     var _elem = srcPos < srcLength ? src[srcPos] : 255;
                     dest[destPos++] = _elem & 128 ? oneMapping : zeroMapping;
                     dest[destPos++] = _elem & 64 ? oneMapping : zeroMapping;
                     dest[destPos++] = _elem & 32 ? oneMapping : zeroMapping;
                     dest[destPos++] = _elem & 16 ? oneMapping : zeroMapping;
                     dest[destPos++] = _elem & 8 ? oneMapping : zeroMapping;
                     dest[destPos++] = _elem & 4 ? oneMapping : zeroMapping;
                     dest[destPos++] = _elem & 2 ? oneMapping : zeroMapping;
                     dest[destPos++] = _elem & 1 ? oneMapping : zeroMapping;
                  }
                  if (widthRemainder === 0) {
                     continue;
                  }
                  var elem = srcPos < srcLength ? src[srcPos++] : 255;
                  for (var j = 0; j < widthRemainder; j++) {
                     dest[destPos++] =
                        elem & (1 << (7 - j)) ? oneMapping : zeroMapping;
                  }
               }
               return { srcPos: srcPos, destPos: destPos };
            }
            function convertRGBToRGBA(_ref59) {
               var src = _ref59.src,
                  _ref59$srcPos = _ref59.srcPos,
                  srcPos = _ref59$srcPos === void 0 ? 0 : _ref59$srcPos,
                  dest = _ref59.dest,
                  _ref59$destPos = _ref59.destPos,
                  destPos = _ref59$destPos === void 0 ? 0 : _ref59$destPos,
                  width = _ref59.width,
                  height = _ref59.height;
               var i = 0;
               var len32 = src.length >> 2;
               var src32 = new Uint32Array(src.buffer, srcPos, len32);
               if (FeatureTest.isLittleEndian) {
                  for (; i < len32 - 2; i += 3, destPos += 4) {
                     var s1 = src32[i];
                     var s2 = src32[i + 1];
                     var s3 = src32[i + 2];
                     dest[destPos] = s1 | 0xff000000;
                     dest[destPos + 1] = (s1 >>> 24) | (s2 << 8) | 0xff000000;
                     dest[destPos + 2] = (s2 >>> 16) | (s3 << 16) | 0xff000000;
                     dest[destPos + 3] = (s3 >>> 8) | 0xff000000;
                  }
                  for (var j = i * 4, jj = src.length; j < jj; j += 3) {
                     dest[destPos++] =
                        src[j] |
                        (src[j + 1] << 8) |
                        (src[j + 2] << 16) |
                        0xff000000;
                  }
               } else {
                  for (; i < len32 - 2; i += 3, destPos += 4) {
                     var _s = src32[i];
                     var _s2 = src32[i + 1];
                     var _s3 = src32[i + 2];
                     dest[destPos] = _s | 0xff;
                     dest[destPos + 1] = (_s << 24) | (_s2 >>> 8) | 0xff;
                     dest[destPos + 2] = (_s2 << 16) | (_s3 >>> 16) | 0xff;
                     dest[destPos + 3] = (_s3 << 8) | 0xff;
                  }
                  for (var _j = i * 4, _jj = src.length; _j < _jj; _j += 3) {
                     dest[destPos++] =
                        (src[_j] << 24) |
                        (src[_j + 1] << 16) |
                        (src[_j + 2] << 8) |
                        0xff;
                  }
               }
               return { srcPos: srcPos, destPos: destPos };
            }
            function grayToRGBA(src, dest) {
               if (FeatureTest.isLittleEndian) {
                  for (var i = 0, ii = src.length; i < ii; i++) {
                     dest[i] = (src[i] * 0x10101) | 0xff000000;
                  }
               } else {
                  for (var _i0 = 0, _ii = src.length; _i0 < _ii; _i0++) {
                     dest[_i0] = (src[_i0] * 0x1010100) | 0x000000ff;
                  }
               }
            } // CONCATENATED MODULE: ./src/display/canvas.js
            var MIN_FONT_SIZE = 16;
            var MAX_FONT_SIZE = 100;
            var MAX_GROUP_SIZE = 4096;
            var EXECUTION_TIME = 15;
            var EXECUTION_STEPS = 10;
            var MAX_SIZE_TO_COMPILE = 1000;
            var FULL_CHUNK_HEIGHT = 16;
            function mirrorContextOperations(ctx, destCtx) {
               if (ctx._removeMirroring) {
                  throw new Error("Context is already forwarding operations.");
               }
               ctx.__originalSave = ctx.save;
               ctx.__originalRestore = ctx.restore;
               ctx.__originalRotate = ctx.rotate;
               ctx.__originalScale = ctx.scale;
               ctx.__originalTranslate = ctx.translate;
               ctx.__originalTransform = ctx.transform;
               ctx.__originalSetTransform = ctx.setTransform;
               ctx.__originalResetTransform = ctx.resetTransform;
               ctx.__originalClip = ctx.clip;
               ctx.__originalMoveTo = ctx.moveTo;
               ctx.__originalLineTo = ctx.lineTo;
               ctx.__originalBezierCurveTo = ctx.bezierCurveTo;
               ctx.__originalRect = ctx.rect;
               ctx.__originalClosePath = ctx.closePath;
               ctx.__originalBeginPath = ctx.beginPath;
               ctx._removeMirroring = function () {
                  ctx.save = ctx.__originalSave;
                  ctx.restore = ctx.__originalRestore;
                  ctx.rotate = ctx.__originalRotate;
                  ctx.scale = ctx.__originalScale;
                  ctx.translate = ctx.__originalTranslate;
                  ctx.transform = ctx.__originalTransform;
                  ctx.setTransform = ctx.__originalSetTransform;
                  ctx.resetTransform = ctx.__originalResetTransform;
                  ctx.clip = ctx.__originalClip;
                  ctx.moveTo = ctx.__originalMoveTo;
                  ctx.lineTo = ctx.__originalLineTo;
                  ctx.bezierCurveTo = ctx.__originalBezierCurveTo;
                  ctx.rect = ctx.__originalRect;
                  ctx.closePath = ctx.__originalClosePath;
                  ctx.beginPath = ctx.__originalBeginPath;
                  delete ctx._removeMirroring;
               };
               ctx.save = function ctxSave() {
                  destCtx.save();
                  this.__originalSave();
               };
               ctx.restore = function ctxRestore() {
                  destCtx.restore();
                  this.__originalRestore();
               };
               ctx.translate = function ctxTranslate(x, y) {
                  destCtx.translate(x, y);
                  this.__originalTranslate(x, y);
               };
               ctx.scale = function ctxScale(x, y) {
                  destCtx.scale(x, y);
                  this.__originalScale(x, y);
               };
               ctx.transform = function ctxTransform(a, b, c, d, e, f) {
                  destCtx.transform(a, b, c, d, e, f);
                  this.__originalTransform(a, b, c, d, e, f);
               };
               ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {
                  destCtx.setTransform(a, b, c, d, e, f);
                  this.__originalSetTransform(a, b, c, d, e, f);
               };
               ctx.resetTransform = function ctxResetTransform() {
                  destCtx.resetTransform();
                  this.__originalResetTransform();
               };
               ctx.rotate = function ctxRotate(angle) {
                  destCtx.rotate(angle);
                  this.__originalRotate(angle);
               };
               ctx.clip = function ctxRotate(rule) {
                  destCtx.clip(rule);
                  this.__originalClip(rule);
               };
               ctx.moveTo = function (x, y) {
                  destCtx.moveTo(x, y);
                  this.__originalMoveTo(x, y);
               };
               ctx.lineTo = function (x, y) {
                  destCtx.lineTo(x, y);
                  this.__originalLineTo(x, y);
               };
               ctx.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
                  destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
                  this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
               };
               ctx.rect = function (x, y, width, height) {
                  destCtx.rect(x, y, width, height);
                  this.__originalRect(x, y, width, height);
               };
               ctx.closePath = function () {
                  destCtx.closePath();
                  this.__originalClosePath();
               };
               ctx.beginPath = function () {
                  destCtx.beginPath();
                  this.__originalBeginPath();
               };
            }
            var CachedCanvases = /*#__PURE__*/ (function () {
               function CachedCanvases(canvasFactory) {
                  _classCallCheck(this, CachedCanvases);
                  this.canvasFactory = canvasFactory;
                  this.cache = Object.create(null);
               }
               return _createClass(CachedCanvases, [
                  {
                     key: "getCanvas",
                     value: function getCanvas(id, width, height) {
                        var canvasEntry;
                        if (this.cache[id] !== undefined) {
                           canvasEntry = this.cache[id];
                           this.canvasFactory.reset(canvasEntry, width, height);
                        } else {
                           canvasEntry = this.canvasFactory.create(
                              width,
                              height,
                           );
                           this.cache[id] = canvasEntry;
                        }
                        return canvasEntry;
                     },
                  },
                  {
                     key: "delete",
                     value: function _delete(id) {
                        delete this.cache[id];
                     },
                  },
                  {
                     key: "clear",
                     value: function clear() {
                        for (var id in this.cache) {
                           var canvasEntry = this.cache[id];
                           this.canvasFactory.destroy(canvasEntry);
                           delete this.cache[id];
                        }
                     },
                  },
               ]);
            })();
            function drawImageAtIntegerCoords(
               ctx,
               srcImg,
               srcX,
               srcY,
               srcW,
               srcH,
               destX,
               destY,
               destW,
               destH,
            ) {
               var _ref60 = (0, display_utils.getCurrentTransform)(ctx),
                  _ref61 = _slicedToArray(_ref60, 6),
                  a = _ref61[0],
                  b = _ref61[1],
                  c = _ref61[2],
                  d = _ref61[3],
                  tx = _ref61[4],
                  ty = _ref61[5];
               if (b === 0 && c === 0) {
                  var tlX = destX * a + tx;
                  var rTlX = Math.round(tlX);
                  var tlY = destY * d + ty;
                  var rTlY = Math.round(tlY);
                  var brX = (destX + destW) * a + tx;
                  var rWidth = Math.abs(Math.round(brX) - rTlX) || 1;
                  var brY = (destY + destH) * d + ty;
                  var rHeight = Math.abs(Math.round(brY) - rTlY) || 1;
                  ctx.setTransform(
                     Math.sign(a),
                     0,
                     0,
                     Math.sign(d),
                     rTlX,
                     rTlY,
                  );
                  ctx.drawImage(
                     srcImg,
                     srcX,
                     srcY,
                     srcW,
                     srcH,
                     0,
                     0,
                     rWidth,
                     rHeight,
                  );
                  ctx.setTransform(a, b, c, d, tx, ty);
                  return [rWidth, rHeight];
               }
               if (a === 0 && d === 0) {
                  var _tlX = destY * c + tx;
                  var _rTlX = Math.round(_tlX);
                  var _tlY = destX * b + ty;
                  var _rTlY = Math.round(_tlY);
                  var _brX = (destY + destH) * c + tx;
                  var _rWidth = Math.abs(Math.round(_brX) - _rTlX) || 1;
                  var _brY = (destX + destW) * b + ty;
                  var _rHeight = Math.abs(Math.round(_brY) - _rTlY) || 1;
                  ctx.setTransform(
                     0,
                     Math.sign(b),
                     Math.sign(c),
                     0,
                     _rTlX,
                     _rTlY,
                  );
                  ctx.drawImage(
                     srcImg,
                     srcX,
                     srcY,
                     srcW,
                     srcH,
                     0,
                     0,
                     _rHeight,
                     _rWidth,
                  );
                  ctx.setTransform(a, b, c, d, tx, ty);
                  return [_rHeight, _rWidth];
               }
               ctx.drawImage(
                  srcImg,
                  srcX,
                  srcY,
                  srcW,
                  srcH,
                  destX,
                  destY,
                  destW,
                  destH,
               );
               var scaleX = Math.hypot(a, b);
               var scaleY = Math.hypot(c, d);
               return [scaleX * destW, scaleY * destH];
            }
            function compileType3Glyph(imgData) {
               var width = imgData.width,
                  height = imgData.height;
               if (
                  width > MAX_SIZE_TO_COMPILE ||
                  height > MAX_SIZE_TO_COMPILE
               ) {
                  return null;
               }
               var POINT_TO_PROCESS_LIMIT = 1000;
               var POINT_TYPES = new Uint8Array([
                  0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0,
               ]);
               var width1 = width + 1;
               var points = new Uint8Array(width1 * (height + 1));
               var i, j, j0;
               var lineSize = (width + 7) & ~7;
               var data = new Uint8Array(lineSize * height),
                  pos = 0;
               var _iterator49 = _createForOfIteratorHelper(imgData.data),
                  _step49;
               try {
                  for (_iterator49.s(); !(_step49 = _iterator49.n()).done; ) {
                     var elem = _step49.value;
                     var mask = 128;
                     while (mask > 0) {
                        data[pos++] = elem & mask ? 0 : 255;
                        mask >>= 1;
                     }
                  }
               } catch (err) {
                  _iterator49.e(err);
               } finally {
                  _iterator49.f();
               }
               var count = 0;
               pos = 0;
               if (data[pos] !== 0) {
                  points[0] = 1;
                  ++count;
               }
               for (j = 1; j < width; j++) {
                  if (data[pos] !== data[pos + 1]) {
                     points[j] = data[pos] ? 2 : 1;
                     ++count;
                  }
                  pos++;
               }
               if (data[pos] !== 0) {
                  points[j] = 2;
                  ++count;
               }
               for (i = 1; i < height; i++) {
                  pos = i * lineSize;
                  j0 = i * width1;
                  if (data[pos - lineSize] !== data[pos]) {
                     points[j0] = data[pos] ? 1 : 8;
                     ++count;
                  }
                  var sum =
                     (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);
                  for (j = 1; j < width; j++) {
                     sum =
                        (sum >> 2) +
                        (data[pos + 1] ? 4 : 0) +
                        (data[pos - lineSize + 1] ? 8 : 0);
                     if (POINT_TYPES[sum]) {
                        points[j0 + j] = POINT_TYPES[sum];
                        ++count;
                     }
                     pos++;
                  }
                  if (data[pos - lineSize] !== data[pos]) {
                     points[j0 + j] = data[pos] ? 2 : 4;
                     ++count;
                  }
                  if (count > POINT_TO_PROCESS_LIMIT) {
                     return null;
                  }
               }
               pos = lineSize * (height - 1);
               j0 = i * width1;
               if (data[pos] !== 0) {
                  points[j0] = 8;
                  ++count;
               }
               for (j = 1; j < width; j++) {
                  if (data[pos] !== data[pos + 1]) {
                     points[j0 + j] = data[pos] ? 4 : 8;
                     ++count;
                  }
                  pos++;
               }
               if (data[pos] !== 0) {
                  points[j0 + j] = 4;
                  ++count;
               }
               if (count > POINT_TO_PROCESS_LIMIT) {
                  return null;
               }
               var steps = new Int32Array([
                  0,
                  width1,
                  -1,
                  0,
                  -width1,
                  0,
                  0,
                  0,
                  1,
               ]);
               var path = new Path2D();
               for (i = 0; count && i <= height; i++) {
                  var p = i * width1;
                  var end = p + width;
                  while (p < end && !points[p]) {
                     p++;
                  }
                  if (p === end) {
                     continue;
                  }
                  path.moveTo(p % width1, i);
                  var p0 = p;
                  var type = points[p];
                  do {
                     var step = steps[type];
                     do {
                        p += step;
                     } while (!points[p]);
                     var pp = points[p];
                     if (pp !== 5 && pp !== 10) {
                        type = pp;
                        points[p] = 0;
                     } else {
                        type = pp & ((0x33 * type) >> 4);
                        points[p] &= (type >> 2) | (type << 2);
                     }
                     path.lineTo(p % width1, (p / width1) | 0);
                     if (!points[p]) {
                        --count;
                     }
                  } while (p0 !== p);
                  --i;
               }
               data = null;
               points = null;
               var drawOutline = function drawOutline(c) {
                  c.save();
                  c.scale(1 / width, -1 / height);
                  c.translate(0, -height);
                  c.fill(path);
                  c.beginPath();
                  c.restore();
               };
               return drawOutline;
            }
            var CanvasExtraState = /*#__PURE__*/ (function () {
               function CanvasExtraState(width, height) {
                  _classCallCheck(this, CanvasExtraState);
                  this.alphaIsShape = false;
                  this.fontSize = 0;
                  this.fontSizeScale = 1;
                  this.textMatrix = util.IDENTITY_MATRIX;
                  this.textMatrixScale = 1;
                  this.fontMatrix = util.FONT_IDENTITY_MATRIX;
                  this.leading = 0;
                  this.x = 0;
                  this.y = 0;
                  this.lineX = 0;
                  this.lineY = 0;
                  this.charSpacing = 0;
                  this.wordSpacing = 0;
                  this.textHScale = 1;
                  this.textRenderingMode = util.TextRenderingMode.FILL;
                  this.textRise = 0;
                  this.fillColor = "#000000";
                  this.strokeColor = "#000000";
                  this.patternFill = false;
                  this.fillAlpha = 1;
                  this.strokeAlpha = 1;
                  this.lineWidth = 1;
                  this.activeSMask = null;
                  this.transferMaps = "none";
                  this.startNewPathAndClipBox([0, 0, width, height]);
               }
               return _createClass(CanvasExtraState, [
                  {
                     key: "clone",
                     value: function clone() {
                        var clone = Object.create(this);
                        clone.clipBox = this.clipBox.slice();
                        return clone;
                     },
                  },
                  {
                     key: "setCurrentPoint",
                     value: function setCurrentPoint(x, y) {
                        this.x = x;
                        this.y = y;
                     },
                  },
                  {
                     key: "updatePathMinMax",
                     value: function updatePathMinMax(transform, x, y) {
                        var _util$Util$applyTrans = util.Util.applyTransform(
                           [x, y],
                           transform,
                        );
                        var _util$Util$applyTrans2 = _slicedToArray(
                           _util$Util$applyTrans,
                           2,
                        );
                        x = _util$Util$applyTrans2[0];
                        y = _util$Util$applyTrans2[1];
                        this.minX = Math.min(this.minX, x);
                        this.minY = Math.min(this.minY, y);
                        this.maxX = Math.max(this.maxX, x);
                        this.maxY = Math.max(this.maxY, y);
                     },
                  },
                  {
                     key: "updateRectMinMax",
                     value: function updateRectMinMax(transform, rect) {
                        var p1 = util.Util.applyTransform(rect, transform);
                        var p2 = util.Util.applyTransform(
                           rect.slice(2),
                           transform,
                        );
                        var p3 = util.Util.applyTransform(
                           [rect[0], rect[3]],
                           transform,
                        );
                        var p4 = util.Util.applyTransform(
                           [rect[2], rect[1]],
                           transform,
                        );
                        this.minX = Math.min(
                           this.minX,
                           p1[0],
                           p2[0],
                           p3[0],
                           p4[0],
                        );
                        this.minY = Math.min(
                           this.minY,
                           p1[1],
                           p2[1],
                           p3[1],
                           p4[1],
                        );
                        this.maxX = Math.max(
                           this.maxX,
                           p1[0],
                           p2[0],
                           p3[0],
                           p4[0],
                        );
                        this.maxY = Math.max(
                           this.maxY,
                           p1[1],
                           p2[1],
                           p3[1],
                           p4[1],
                        );
                     },
                  },
                  {
                     key: "updateScalingPathMinMax",
                     value: function updateScalingPathMinMax(
                        transform,
                        minMax,
                     ) {
                        util.Util.scaleMinMax(transform, minMax);
                        this.minX = Math.min(this.minX, minMax[0]);
                        this.minY = Math.min(this.minY, minMax[1]);
                        this.maxX = Math.max(this.maxX, minMax[2]);
                        this.maxY = Math.max(this.maxY, minMax[3]);
                     },
                  },
                  {
                     key: "updateCurvePathMinMax",
                     value: function updateCurvePathMinMax(
                        transform,
                        x0,
                        y0,
                        x1,
                        y1,
                        x2,
                        y2,
                        x3,
                        y3,
                        minMax,
                     ) {
                        var box = util.Util.bezierBoundingBox(
                           x0,
                           y0,
                           x1,
                           y1,
                           x2,
                           y2,
                           x3,
                           y3,
                           minMax,
                        );
                        if (minMax) {
                           return;
                        }
                        this.updateRectMinMax(transform, box);
                     },
                  },
                  {
                     key: "getPathBoundingBox",
                     value: function getPathBoundingBox() {
                        var pathType =
                           arguments.length > 0 && arguments[0] !== undefined
                              ? arguments[0]
                              : PathType.FILL;
                        var transform =
                           arguments.length > 1 && arguments[1] !== undefined
                              ? arguments[1]
                              : null;
                        var box = [this.minX, this.minY, this.maxX, this.maxY];
                        if (pathType === PathType.STROKE) {
                           if (!transform) {
                              (0, util.unreachable)(
                                 "Stroke bounding box must include transform.",
                              );
                           }
                           var scale =
                              util.Util.singularValueDecompose2dScale(
                                 transform,
                              );
                           var xStrokePad = (scale[0] * this.lineWidth) / 2;
                           var yStrokePad = (scale[1] * this.lineWidth) / 2;
                           box[0] -= xStrokePad;
                           box[1] -= yStrokePad;
                           box[2] += xStrokePad;
                           box[3] += yStrokePad;
                        }
                        return box;
                     },
                  },
                  {
                     key: "updateClipFromPath",
                     value: function updateClipFromPath() {
                        var intersect = util.Util.intersect(
                           this.clipBox,
                           this.getPathBoundingBox(),
                        );
                        this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);
                     },
                  },
                  {
                     key: "isEmptyClip",
                     value: function isEmptyClip() {
                        return this.minX === Infinity;
                     },
                  },
                  {
                     key: "startNewPathAndClipBox",
                     value: function startNewPathAndClipBox(box) {
                        this.clipBox = box;
                        this.minX = Infinity;
                        this.minY = Infinity;
                        this.maxX = 0;
                        this.maxY = 0;
                     },
                  },
                  {
                     key: "getClippedPathBoundingBox",
                     value: function getClippedPathBoundingBox() {
                        var pathType =
                           arguments.length > 0 && arguments[0] !== undefined
                              ? arguments[0]
                              : PathType.FILL;
                        var transform =
                           arguments.length > 1 && arguments[1] !== undefined
                              ? arguments[1]
                              : null;
                        return util.Util.intersect(
                           this.clipBox,
                           this.getPathBoundingBox(pathType, transform),
                        );
                     },
                  },
               ]);
            })();
            function putBinaryImageData(ctx, imgData) {
               if (
                  typeof ImageData !== "undefined" &&
                  imgData instanceof ImageData
               ) {
                  ctx.putImageData(imgData, 0, 0);
                  return;
               }
               var height = imgData.height,
                  width = imgData.width;
               var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
               var fullChunks =
                  (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
               var totalChunks =
                  partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
               var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
               var srcPos = 0,
                  destPos;
               var src = imgData.data;
               var dest = chunkImgData.data;
               var i, j, thisChunkHeight, elemsInThisChunk;
               if (imgData.kind === util.ImageKind.GRAYSCALE_1BPP) {
                  var srcLength = src.byteLength;
                  var dest32 = new Uint32Array(
                     dest.buffer,
                     0,
                     dest.byteLength >> 2,
                  );
                  var dest32DataLength = dest32.length;
                  var fullSrcDiff = (width + 7) >> 3;
                  var white = 0xffffffff;
                  var black = util.FeatureTest.isLittleEndian
                     ? 0xff000000
                     : 0x000000ff;
                  for (i = 0; i < totalChunks; i++) {
                     thisChunkHeight =
                        i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
                     destPos = 0;
                     for (j = 0; j < thisChunkHeight; j++) {
                        var srcDiff = srcLength - srcPos;
                        var k = 0;
                        var kEnd =
                           srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;
                        var kEndUnrolled = kEnd & ~7;
                        var mask = 0;
                        var srcByte = 0;
                        for (; k < kEndUnrolled; k += 8) {
                           srcByte = src[srcPos++];
                           dest32[destPos++] = srcByte & 128 ? white : black;
                           dest32[destPos++] = srcByte & 64 ? white : black;
                           dest32[destPos++] = srcByte & 32 ? white : black;
                           dest32[destPos++] = srcByte & 16 ? white : black;
                           dest32[destPos++] = srcByte & 8 ? white : black;
                           dest32[destPos++] = srcByte & 4 ? white : black;
                           dest32[destPos++] = srcByte & 2 ? white : black;
                           dest32[destPos++] = srcByte & 1 ? white : black;
                        }
                        for (; k < kEnd; k++) {
                           if (mask === 0) {
                              srcByte = src[srcPos++];
                              mask = 128;
                           }
                           dest32[destPos++] = srcByte & mask ? white : black;
                           mask >>= 1;
                        }
                     }
                     while (destPos < dest32DataLength) {
                        dest32[destPos++] = 0;
                     }
                     ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
                  }
               } else if (imgData.kind === util.ImageKind.RGBA_32BPP) {
                  j = 0;
                  elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;
                  for (i = 0; i < fullChunks; i++) {
                     dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
                     srcPos += elemsInThisChunk;
                     ctx.putImageData(chunkImgData, 0, j);
                     j += FULL_CHUNK_HEIGHT;
                  }
                  if (i < totalChunks) {
                     elemsInThisChunk = width * partialChunkHeight * 4;
                     dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
                     ctx.putImageData(chunkImgData, 0, j);
                  }
               } else if (imgData.kind === util.ImageKind.RGB_24BPP) {
                  thisChunkHeight = FULL_CHUNK_HEIGHT;
                  elemsInThisChunk = width * thisChunkHeight;
                  for (i = 0; i < totalChunks; i++) {
                     if (i >= fullChunks) {
                        thisChunkHeight = partialChunkHeight;
                        elemsInThisChunk = width * thisChunkHeight;
                     }
                     destPos = 0;
                     for (j = elemsInThisChunk; j--; ) {
                        dest[destPos++] = src[srcPos++];
                        dest[destPos++] = src[srcPos++];
                        dest[destPos++] = src[srcPos++];
                        dest[destPos++] = 255;
                     }
                     ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
                  }
               } else {
                  throw new Error("bad image kind: ".concat(imgData.kind));
               }
            }
            function putBinaryImageMask(ctx, imgData) {
               if (imgData.bitmap) {
                  ctx.drawImage(imgData.bitmap, 0, 0);
                  return;
               }
               var height = imgData.height,
                  width = imgData.width;
               var partialChunkHeight = height % FULL_CHUNK_HEIGHT;
               var fullChunks =
                  (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
               var totalChunks =
                  partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
               var chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
               var srcPos = 0;
               var src = imgData.data;
               var dest = chunkImgData.data;
               for (var i = 0; i < totalChunks; i++) {
                  var thisChunkHeight =
                     i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
                  var _convertBlackAndWhite = convertBlackAndWhiteToRGBA({
                     src: src,
                     srcPos: srcPos,
                     dest: dest,
                     width: width,
                     height: thisChunkHeight,
                     nonBlackColor: 0,
                  });
                  srcPos = _convertBlackAndWhite.srcPos;
                  ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
               }
            }
            function copyCtxState(sourceCtx, destCtx) {
               var properties = [
                  "strokeStyle",
                  "fillStyle",
                  "fillRule",
                  "globalAlpha",
                  "lineWidth",
                  "lineCap",
                  "lineJoin",
                  "miterLimit",
                  "globalCompositeOperation",
                  "font",
                  "filter",
               ];
               for (
                  var _i1 = 0, _properties = properties;
                  _i1 < _properties.length;
                  _i1++
               ) {
                  var property = _properties[_i1];
                  if (sourceCtx[property] !== undefined) {
                     destCtx[property] = sourceCtx[property];
                  }
               }
               if (sourceCtx.setLineDash !== undefined) {
                  destCtx.setLineDash(sourceCtx.getLineDash());
                  destCtx.lineDashOffset = sourceCtx.lineDashOffset;
               }
            }
            function resetCtxToDefault(ctx) {
               ctx.strokeStyle = ctx.fillStyle = "#000000";
               ctx.fillRule = "nonzero";
               ctx.globalAlpha = 1;
               ctx.lineWidth = 1;
               ctx.lineCap = "butt";
               ctx.lineJoin = "miter";
               ctx.miterLimit = 10;
               ctx.globalCompositeOperation = "source-over";
               ctx.font = "10px sans-serif";
               if (ctx.setLineDash !== undefined) {
                  ctx.setLineDash([]);
                  ctx.lineDashOffset = 0;
               }
               if (!util.isNodeJS) {
                  var filter = ctx.filter;
                  if (filter !== "none" && filter !== "") {
                     ctx.filter = "none";
                  }
               }
            }
            function composeSMaskBackdrop(bytes, r0, g0, b0) {
               var length = bytes.length;
               for (var i = 3; i < length; i += 4) {
                  var alpha = bytes[i];
                  if (alpha === 0) {
                     bytes[i - 3] = r0;
                     bytes[i - 2] = g0;
                     bytes[i - 1] = b0;
                  } else if (alpha < 255) {
                     var alpha_ = 255 - alpha;
                     bytes[i - 3] = (bytes[i - 3] * alpha + r0 * alpha_) >> 8;
                     bytes[i - 2] = (bytes[i - 2] * alpha + g0 * alpha_) >> 8;
                     bytes[i - 1] = (bytes[i - 1] * alpha + b0 * alpha_) >> 8;
                  }
               }
            }
            function composeSMaskAlpha(maskData, layerData, transferMap) {
               var length = maskData.length;
               var scale = 1 / 255;
               for (var i = 3; i < length; i += 4) {
                  var alpha = transferMap
                     ? transferMap[maskData[i]]
                     : maskData[i];
                  layerData[i] = (layerData[i] * alpha * scale) | 0;
               }
            }
            function composeSMaskLuminosity(maskData, layerData, transferMap) {
               var length = maskData.length;
               for (var i = 3; i < length; i += 4) {
                  var y =
                     maskData[i - 3] * 77 +
                     maskData[i - 2] * 152 +
                     maskData[i - 1] * 28;
                  layerData[i] = transferMap
                     ? (layerData[i] * transferMap[y >> 8]) >> 8
                     : (layerData[i] * y) >> 16;
               }
            }
            function genericComposeSMask(
               maskCtx,
               layerCtx,
               width,
               height,
               subtype,
               backdrop,
               transferMap,
               layerOffsetX,
               layerOffsetY,
               maskOffsetX,
               maskOffsetY,
            ) {
               var hasBackdrop = !!backdrop;
               var r0 = hasBackdrop ? backdrop[0] : 0;
               var g0 = hasBackdrop ? backdrop[1] : 0;
               var b0 = hasBackdrop ? backdrop[2] : 0;
               var composeFn =
                  subtype === "Luminosity"
                     ? composeSMaskLuminosity
                     : composeSMaskAlpha;
               var PIXELS_TO_PROCESS = 1048576;
               var chunkSize = Math.min(
                  height,
                  Math.ceil(PIXELS_TO_PROCESS / width),
               );
               for (var row = 0; row < height; row += chunkSize) {
                  var chunkHeight = Math.min(chunkSize, height - row);
                  var maskData = maskCtx.getImageData(
                     layerOffsetX - maskOffsetX,
                     row + (layerOffsetY - maskOffsetY),
                     width,
                     chunkHeight,
                  );
                  var layerData = layerCtx.getImageData(
                     layerOffsetX,
                     row + layerOffsetY,
                     width,
                     chunkHeight,
                  );
                  if (hasBackdrop) {
                     composeSMaskBackdrop(maskData.data, r0, g0, b0);
                  }
                  composeFn(maskData.data, layerData.data, transferMap);
                  layerCtx.putImageData(
                     layerData,
                     layerOffsetX,
                     row + layerOffsetY,
                  );
               }
            }
            function composeSMask(ctx, smask, layerCtx, layerBox) {
               var layerOffsetX = layerBox[0];
               var layerOffsetY = layerBox[1];
               var layerWidth = layerBox[2] - layerOffsetX;
               var layerHeight = layerBox[3] - layerOffsetY;
               if (layerWidth === 0 || layerHeight === 0) {
                  return;
               }
               genericComposeSMask(
                  smask.context,
                  layerCtx,
                  layerWidth,
                  layerHeight,
                  smask.subtype,
                  smask.backdrop,
                  smask.transferMap,
                  layerOffsetX,
                  layerOffsetY,
                  smask.offsetX,
                  smask.offsetY,
               );
               ctx.save();
               ctx.globalAlpha = 1;
               ctx.globalCompositeOperation = "source-over";
               ctx.setTransform(1, 0, 0, 1, 0, 0);
               ctx.drawImage(layerCtx.canvas, 0, 0);
               ctx.restore();
            }
            function getImageSmoothingEnabled(transform, interpolate) {
               if (interpolate) {
                  return true;
               }
               var scale = util.Util.singularValueDecompose2dScale(transform);
               scale[0] = Math.fround(scale[0]);
               scale[1] = Math.fround(scale[1]);
               var actualScale = Math.fround(
                  (globalThis.devicePixelRatio || 1) *
                     display_utils.PixelsPerInch.PDF_TO_CSS_UNITS,
               );
               return scale[0] <= actualScale && scale[1] <= actualScale;
            }
            var LINE_CAP_STYLES = ["butt", "round", "square"];
            var LINE_JOIN_STYLES = ["miter", "round", "bevel"];
            var NORMAL_CLIP = {};
            var EO_CLIP = {};
            var _CanvasGraphics_brand = /*#__PURE__*/ new WeakSet();
            var _CanvasGraphics = /*#__PURE__*/ (function () {
               function _CanvasGraphics(
                  canvasCtx,
                  commonObjs,
                  objs,
                  canvasFactory,
                  filterFactory,
                  _ref62,
                  annotationCanvasMap,
                  pageColors,
               ) {
                  var optionalContentConfig = _ref62.optionalContentConfig,
                     _ref62$markedContentS = _ref62.markedContentStack,
                     markedContentStack =
                        _ref62$markedContentS === void 0
                           ? null
                           : _ref62$markedContentS;
                  _classCallCheck(this, _CanvasGraphics);
                  _classPrivateMethodInitSpec(this, _CanvasGraphics_brand);
                  this.ctx = canvasCtx;
                  this.current = new CanvasExtraState(
                     this.ctx.canvas.width,
                     this.ctx.canvas.height,
                  );
                  this.stateStack = [];
                  this.pendingClip = null;
                  this.pendingEOFill = false;
                  this.res = null;
                  this.xobjs = null;
                  this.commonObjs = commonObjs;
                  this.objs = objs;
                  this.canvasFactory = canvasFactory;
                  this.filterFactory = filterFactory;
                  this.groupStack = [];
                  this.processingType3 = null;
                  this.baseTransform = null;
                  this.baseTransformStack = [];
                  this.groupLevel = 0;
                  this.smaskStack = [];
                  this.smaskCounter = 0;
                  this.tempSMask = null;
                  this.suspendedCtx = null;
                  this.contentVisible = true;
                  this.markedContentStack = markedContentStack || [];
                  this.optionalContentConfig = optionalContentConfig;
                  this.cachedCanvases = new CachedCanvases(this.canvasFactory);
                  this.cachedPatterns = new Map();
                  this.annotationCanvasMap = annotationCanvasMap;
                  this.viewportScale = 1;
                  this.outputScaleX = 1;
                  this.outputScaleY = 1;
                  this.pageColors = pageColors;
                  this._cachedScaleForStroking = [-1, 0];
                  this._cachedGetSinglePixelWidth = null;
                  this._cachedBitmapsMap = new Map();
               }
               return _createClass(_CanvasGraphics, [
                  {
                     key: "getObject",
                     value: function getObject(data) {
                        var fallback =
                           arguments.length > 1 && arguments[1] !== undefined
                              ? arguments[1]
                              : null;
                        if (typeof data === "string") {
                           return data.startsWith("g_")
                              ? this.commonObjs.get(data)
                              : this.objs.get(data);
                        }
                        return fallback;
                     },
                  },
                  {
                     key: "beginDrawing",
                     value: function beginDrawing(_ref63) {
                        var _this$ctx3;
                        var transform = _ref63.transform,
                           viewport = _ref63.viewport,
                           _ref63$transparency = _ref63.transparency,
                           transparency =
                              _ref63$transparency === void 0
                                 ? false
                                 : _ref63$transparency,
                           _ref63$background = _ref63.background,
                           background =
                              _ref63$background === void 0
                                 ? null
                                 : _ref63$background;
                        var width = this.ctx.canvas.width;
                        var height = this.ctx.canvas.height;
                        var savedFillStyle = this.ctx.fillStyle;
                        this.ctx.fillStyle = background || "#ffffff";
                        this.ctx.fillRect(0, 0, width, height);
                        this.ctx.fillStyle = savedFillStyle;
                        if (transparency) {
                           var _this$ctx;
                           var transparentCanvas =
                              this.cachedCanvases.getCanvas(
                                 "transparent",
                                 width,
                                 height,
                              );
                           this.compositeCtx = this.ctx;
                           this.transparentCanvas = transparentCanvas.canvas;
                           this.ctx = transparentCanvas.context;
                           this.ctx.save();
                           (_this$ctx = this.ctx).transform.apply(
                              _this$ctx,
                              _toConsumableArray(
                                 (0, display_utils.getCurrentTransform)(
                                    this.compositeCtx,
                                 ),
                              ),
                           );
                        }
                        this.ctx.save();
                        resetCtxToDefault(this.ctx);
                        if (transform) {
                           var _this$ctx2;
                           (_this$ctx2 = this.ctx).transform.apply(
                              _this$ctx2,
                              _toConsumableArray(transform),
                           );
                           this.outputScaleX = transform[0];
                           this.outputScaleY = transform[0];
                        }
                        (_this$ctx3 = this.ctx).transform.apply(
                           _this$ctx3,
                           _toConsumableArray(viewport.transform),
                        );
                        this.viewportScale = viewport.scale;
                        this.baseTransform = (0,
                        display_utils.getCurrentTransform)(this.ctx);
                     },
                  },
                  {
                     key: "executeOperatorList",
                     value: function executeOperatorList(
                        operatorList,
                        executionStartIdx,
                        continueCallback,
                        stepper,
                     ) {
                        var argsArray = operatorList.argsArray;
                        var fnArray = operatorList.fnArray;
                        var i = executionStartIdx || 0;
                        var argsArrayLen = argsArray.length;
                        if (argsArrayLen === i) {
                           return i;
                        }
                        var chunkOperations =
                           argsArrayLen - i > EXECUTION_STEPS &&
                           typeof continueCallback === "function";
                        var endTime = chunkOperations
                           ? Date.now() + EXECUTION_TIME
                           : 0;
                        var steps = 0;
                        var commonObjs = this.commonObjs;
                        var objs = this.objs;
                        var fnId;
                        while (true) {
                           if (
                              stepper !== undefined &&
                              i === stepper.nextBreakPoint
                           ) {
                              stepper.breakIt(i, continueCallback);
                              return i;
                           }
                           fnId = fnArray[i];
                           if (fnId !== util.OPS.dependency) {
                              this[fnId].apply(this, argsArray[i]);
                           } else {
                              var _iterator50 = _createForOfIteratorHelper(
                                    argsArray[i],
                                 ),
                                 _step50;
                              try {
                                 for (
                                    _iterator50.s();
                                    !(_step50 = _iterator50.n()).done;

                                 ) {
                                    var depObjId = _step50.value;
                                    var objsPool = depObjId.startsWith("g_")
                                       ? commonObjs
                                       : objs;
                                    if (!objsPool.has(depObjId)) {
                                       objsPool.get(depObjId, continueCallback);
                                       return i;
                                    }
                                 }
                              } catch (err) {
                                 _iterator50.e(err);
                              } finally {
                                 _iterator50.f();
                              }
                           }
                           i++;
                           if (i === argsArrayLen) {
                              return i;
                           }
                           if (chunkOperations && ++steps > EXECUTION_STEPS) {
                              if (Date.now() > endTime) {
                                 continueCallback();
                                 return i;
                              }
                              steps = 0;
                           }
                        }
                     },
                  },
                  {
                     key: "endDrawing",
                     value: function endDrawing() {
                        _assertClassBrand(
                           _CanvasGraphics_brand,
                           this,
                           _restoreInitialState,
                        ).call(this);
                        this.cachedCanvases.clear();
                        this.cachedPatterns.clear();
                        var _iterator51 = _createForOfIteratorHelper(
                              this._cachedBitmapsMap.values(),
                           ),
                           _step51;
                        try {
                           for (
                              _iterator51.s();
                              !(_step51 = _iterator51.n()).done;

                           ) {
                              var cache = _step51.value;
                              var _iterator52 = _createForOfIteratorHelper(
                                    cache.values(),
                                 ),
                                 _step52;
                              try {
                                 for (
                                    _iterator52.s();
                                    !(_step52 = _iterator52.n()).done;

                                 ) {
                                    var canvas = _step52.value;
                                    if (
                                       typeof HTMLCanvasElement !==
                                          "undefined" &&
                                       canvas instanceof HTMLCanvasElement
                                    ) {
                                       canvas.width = canvas.height = 0;
                                    }
                                 }
                              } catch (err) {
                                 _iterator52.e(err);
                              } finally {
                                 _iterator52.f();
                              }
                              cache.clear();
                           }
                        } catch (err) {
                           _iterator51.e(err);
                        } finally {
                           _iterator51.f();
                        }
                        this._cachedBitmapsMap.clear();
                        _assertClassBrand(
                           _CanvasGraphics_brand,
                           this,
                           _drawFilter,
                        ).call(this);
                     },
                  },
                  {
                     key: "_scaleImage",
                     value: function _scaleImage(img, inverseTransform) {
                        var width = img.width;
                        var height = img.height;
                        var widthScale = Math.max(
                           Math.hypot(inverseTransform[0], inverseTransform[1]),
                           1,
                        );
                        var heightScale = Math.max(
                           Math.hypot(inverseTransform[2], inverseTransform[3]),
                           1,
                        );
                        var paintWidth = width,
                           paintHeight = height;
                        var tmpCanvasId = "prescale1";
                        var tmpCanvas, tmpCtx;
                        while (
                           (widthScale > 2 && paintWidth > 1) ||
                           (heightScale > 2 && paintHeight > 1)
                        ) {
                           var newWidth = paintWidth,
                              newHeight = paintHeight;
                           if (widthScale > 2 && paintWidth > 1) {
                              newWidth =
                                 paintWidth >= 16384
                                    ? Math.floor(paintWidth / 2) - 1 || 1
                                    : Math.ceil(paintWidth / 2);
                              widthScale /= paintWidth / newWidth;
                           }
                           if (heightScale > 2 && paintHeight > 1) {
                              newHeight =
                                 paintHeight >= 16384
                                    ? Math.floor(paintHeight / 2) - 1 || 1
                                    : Math.ceil(paintHeight) / 2;
                              heightScale /= paintHeight / newHeight;
                           }
                           tmpCanvas = this.cachedCanvases.getCanvas(
                              tmpCanvasId,
                              newWidth,
                              newHeight,
                           );
                           tmpCtx = tmpCanvas.context;
                           tmpCtx.clearRect(0, 0, newWidth, newHeight);
                           tmpCtx.drawImage(
                              img,
                              0,
                              0,
                              paintWidth,
                              paintHeight,
                              0,
                              0,
                              newWidth,
                              newHeight,
                           );
                           img = tmpCanvas.canvas;
                           paintWidth = newWidth;
                           paintHeight = newHeight;
                           tmpCanvasId =
                              tmpCanvasId === "prescale1"
                                 ? "prescale2"
                                 : "prescale1";
                        }
                        return {
                           img: img,
                           paintWidth: paintWidth,
                           paintHeight: paintHeight,
                        };
                     },
                  },
                  {
                     key: "_createMaskCanvas",
                     value: function _createMaskCanvas(img) {
                        var ctx = this.ctx;
                        var width = img.width,
                           height = img.height;
                        var fillColor = this.current.fillColor;
                        var isPatternFill = this.current.patternFill;
                        var currentTransform = (0,
                        display_utils.getCurrentTransform)(ctx);
                        var cache, cacheKey, scaled, maskCanvas;
                        if ((img.bitmap || img.data) && img.count > 1) {
                           var mainKey = img.bitmap || img.data.buffer;
                           cacheKey = JSON.stringify(
                              isPatternFill
                                 ? currentTransform
                                 : [currentTransform.slice(0, 4), fillColor],
                           );
                           cache = this._cachedBitmapsMap.get(mainKey);
                           if (!cache) {
                              cache = new Map();
                              this._cachedBitmapsMap.set(mainKey, cache);
                           }
                           var cachedImage = cache.get(cacheKey);
                           if (cachedImage && !isPatternFill) {
                              var _offsetX = Math.round(
                                 Math.min(
                                    currentTransform[0],
                                    currentTransform[2],
                                 ) + currentTransform[4],
                              );
                              var _offsetY = Math.round(
                                 Math.min(
                                    currentTransform[1],
                                    currentTransform[3],
                                 ) + currentTransform[5],
                              );
                              return {
                                 canvas: cachedImage,
                                 offsetX: _offsetX,
                                 offsetY: _offsetY,
                              };
                           }
                           scaled = cachedImage;
                        }
                        if (!scaled) {
                           maskCanvas = this.cachedCanvases.getCanvas(
                              "maskCanvas",
                              width,
                              height,
                           );
                           putBinaryImageMask(maskCanvas.context, img);
                        }
                        var maskToCanvas = util.Util.transform(
                           currentTransform,
                           [1 / width, 0, 0, -1 / height, 0, 0],
                        );
                        maskToCanvas = util.Util.transform(maskToCanvas, [
                           1,
                           0,
                           0,
                           1,
                           0,
                           -height,
                        ]);
                        var _util$Util$getAxialAl =
                              util.Util.getAxialAlignedBoundingBox(
                                 [0, 0, width, height],
                                 maskToCanvas,
                              ),
                           _util$Util$getAxialAl2 = _slicedToArray(
                              _util$Util$getAxialAl,
                              4,
                           ),
                           minX = _util$Util$getAxialAl2[0],
                           minY = _util$Util$getAxialAl2[1],
                           maxX = _util$Util$getAxialAl2[2],
                           maxY = _util$Util$getAxialAl2[3];
                        var drawnWidth = Math.round(maxX - minX) || 1;
                        var drawnHeight = Math.round(maxY - minY) || 1;
                        var fillCanvas = this.cachedCanvases.getCanvas(
                           "fillCanvas",
                           drawnWidth,
                           drawnHeight,
                        );
                        var fillCtx = fillCanvas.context;
                        var offsetX = minX;
                        var offsetY = minY;
                        fillCtx.translate(-offsetX, -offsetY);
                        fillCtx.transform.apply(
                           fillCtx,
                           _toConsumableArray(maskToCanvas),
                        );
                        if (!scaled) {
                           scaled = this._scaleImage(
                              maskCanvas.canvas,
                              (0, display_utils.getCurrentTransformInverse)(
                                 fillCtx,
                              ),
                           );
                           scaled = scaled.img;
                           if (cache && isPatternFill) {
                              cache.set(cacheKey, scaled);
                           }
                        }
                        fillCtx.imageSmoothingEnabled =
                           getImageSmoothingEnabled(
                              (0, display_utils.getCurrentTransform)(fillCtx),
                              img.interpolate,
                           );
                        drawImageAtIntegerCoords(
                           fillCtx,
                           scaled,
                           0,
                           0,
                           scaled.width,
                           scaled.height,
                           0,
                           0,
                           width,
                           height,
                        );
                        fillCtx.globalCompositeOperation = "source-in";
                        var inverse = util.Util.transform(
                           (0, display_utils.getCurrentTransformInverse)(
                              fillCtx,
                           ),
                           [1, 0, 0, 1, -offsetX, -offsetY],
                        );
                        fillCtx.fillStyle = isPatternFill
                           ? fillColor.getPattern(
                                ctx,
                                this,
                                inverse,
                                PathType.FILL,
                             )
                           : fillColor;
                        fillCtx.fillRect(0, 0, width, height);
                        if (cache && !isPatternFill) {
                           this.cachedCanvases["delete"]("fillCanvas");
                           cache.set(cacheKey, fillCanvas.canvas);
                        }
                        return {
                           canvas: fillCanvas.canvas,
                           offsetX: Math.round(offsetX),
                           offsetY: Math.round(offsetY),
                        };
                     },
                  },
                  {
                     key: "setLineWidth",
                     value: function setLineWidth(width) {
                        if (width !== this.current.lineWidth) {
                           this._cachedScaleForStroking[0] = -1;
                        }
                        this.current.lineWidth = width;
                        this.ctx.lineWidth = width;
                     },
                  },
                  {
                     key: "setLineCap",
                     value: function setLineCap(style) {
                        this.ctx.lineCap = LINE_CAP_STYLES[style];
                     },
                  },
                  {
                     key: "setLineJoin",
                     value: function setLineJoin(style) {
                        this.ctx.lineJoin = LINE_JOIN_STYLES[style];
                     },
                  },
                  {
                     key: "setMiterLimit",
                     value: function setMiterLimit(limit) {
                        this.ctx.miterLimit = limit;
                     },
                  },
                  {
                     key: "setDash",
                     value: function setDash(dashArray, dashPhase) {
                        var ctx = this.ctx;
                        if (ctx.setLineDash !== undefined) {
                           ctx.setLineDash(dashArray);
                           ctx.lineDashOffset = dashPhase;
                        }
                     },
                  },
                  {
                     key: "setRenderingIntent",
                     value: function setRenderingIntent(intent) {},
                  },
                  {
                     key: "setFlatness",
                     value: function setFlatness(flatness) {},
                  },
                  {
                     key: "setGState",
                     value: function setGState(states) {
                        var _iterator53 = _createForOfIteratorHelper(states),
                           _step53;
                        try {
                           for (
                              _iterator53.s();
                              !(_step53 = _iterator53.n()).done;

                           ) {
                              var _step53$value = _slicedToArray(
                                    _step53.value,
                                    2,
                                 ),
                                 key = _step53$value[0],
                                 value = _step53$value[1];
                              switch (key) {
                                 case "LW":
                                    this.setLineWidth(value);
                                    break;
                                 case "LC":
                                    this.setLineCap(value);
                                    break;
                                 case "LJ":
                                    this.setLineJoin(value);
                                    break;
                                 case "ML":
                                    this.setMiterLimit(value);
                                    break;
                                 case "D":
                                    this.setDash(value[0], value[1]);
                                    break;
                                 case "RI":
                                    this.setRenderingIntent(value);
                                    break;
                                 case "FL":
                                    this.setFlatness(value);
                                    break;
                                 case "Font":
                                    this.setFont(value[0], value[1]);
                                    break;
                                 case "CA":
                                    this.current.strokeAlpha = value;
                                    break;
                                 case "ca":
                                    this.current.fillAlpha = value;
                                    this.ctx.globalAlpha = value;
                                    break;
                                 case "BM":
                                    this.ctx.globalCompositeOperation = value;
                                    break;
                                 case "SMask":
                                    this.current.activeSMask = value
                                       ? this.tempSMask
                                       : null;
                                    this.tempSMask = null;
                                    this.checkSMaskState();
                                    break;
                                 case "TR":
                                    this.ctx.filter =
                                       this.current.transferMaps =
                                          this.filterFactory.addFilter(value);
                                    break;
                              }
                           }
                        } catch (err) {
                           _iterator53.e(err);
                        } finally {
                           _iterator53.f();
                        }
                     },
                  },
                  {
                     key: "inSMaskMode",
                     get: function get() {
                        return !!this.suspendedCtx;
                     },
                  },
                  {
                     key: "checkSMaskState",
                     value: function checkSMaskState() {
                        var inSMaskMode = this.inSMaskMode;
                        if (this.current.activeSMask && !inSMaskMode) {
                           this.beginSMaskMode();
                        } else if (!this.current.activeSMask && inSMaskMode) {
                           this.endSMaskMode();
                        }
                     },
                  },
                  {
                     key: "beginSMaskMode",
                     value: function beginSMaskMode() {
                        if (this.inSMaskMode) {
                           throw new Error(
                              "beginSMaskMode called while already in smask mode",
                           );
                        }
                        var drawnWidth = this.ctx.canvas.width;
                        var drawnHeight = this.ctx.canvas.height;
                        var cacheId = "smaskGroupAt" + this.groupLevel;
                        var scratchCanvas = this.cachedCanvases.getCanvas(
                           cacheId,
                           drawnWidth,
                           drawnHeight,
                        );
                        this.suspendedCtx = this.ctx;
                        this.ctx = scratchCanvas.context;
                        var ctx = this.ctx;
                        ctx.setTransform.apply(
                           ctx,
                           _toConsumableArray(
                              (0, display_utils.getCurrentTransform)(
                                 this.suspendedCtx,
                              ),
                           ),
                        );
                        copyCtxState(this.suspendedCtx, ctx);
                        mirrorContextOperations(ctx, this.suspendedCtx);
                        this.setGState([
                           ["BM", "source-over"],
                           ["ca", 1],
                           ["CA", 1],
                        ]);
                     },
                  },
                  {
                     key: "endSMaskMode",
                     value: function endSMaskMode() {
                        if (!this.inSMaskMode) {
                           throw new Error(
                              "endSMaskMode called while not in smask mode",
                           );
                        }
                        this.ctx._removeMirroring();
                        copyCtxState(this.ctx, this.suspendedCtx);
                        this.ctx = this.suspendedCtx;
                        this.suspendedCtx = null;
                     },
                  },
                  {
                     key: "compose",
                     value: function compose(dirtyBox) {
                        if (!this.current.activeSMask) {
                           return;
                        }
                        if (!dirtyBox) {
                           dirtyBox = [
                              0,
                              0,
                              this.ctx.canvas.width,
                              this.ctx.canvas.height,
                           ];
                        } else {
                           dirtyBox[0] = Math.floor(dirtyBox[0]);
                           dirtyBox[1] = Math.floor(dirtyBox[1]);
                           dirtyBox[2] = Math.ceil(dirtyBox[2]);
                           dirtyBox[3] = Math.ceil(dirtyBox[3]);
                        }
                        var smask = this.current.activeSMask;
                        var suspendedCtx = this.suspendedCtx;
                        composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);
                        this.ctx.save();
                        this.ctx.setTransform(1, 0, 0, 1, 0, 0);
                        this.ctx.clearRect(
                           0,
                           0,
                           this.ctx.canvas.width,
                           this.ctx.canvas.height,
                        );
                        this.ctx.restore();
                     },
                  },
                  {
                     key: "save",
                     value: function save() {
                        if (this.inSMaskMode) {
                           copyCtxState(this.ctx, this.suspendedCtx);
                           this.suspendedCtx.save();
                        } else {
                           this.ctx.save();
                        }
                        var old = this.current;
                        this.stateStack.push(old);
                        this.current = old.clone();
                     },
                  },
                  {
                     key: "restore",
                     value: function restore() {
                        if (this.stateStack.length === 0 && this.inSMaskMode) {
                           this.endSMaskMode();
                        }
                        if (this.stateStack.length !== 0) {
                           this.current = this.stateStack.pop();
                           if (this.inSMaskMode) {
                              this.suspendedCtx.restore();
                              copyCtxState(this.suspendedCtx, this.ctx);
                           } else {
                              this.ctx.restore();
                           }
                           this.checkSMaskState();
                           this.pendingClip = null;
                           this._cachedScaleForStroking[0] = -1;
                           this._cachedGetSinglePixelWidth = null;
                        }
                     },
                  },
                  {
                     key: "transform",
                     value: function transform(a, b, c, d, e, f) {
                        this.ctx.transform(a, b, c, d, e, f);
                        this._cachedScaleForStroking[0] = -1;
                        this._cachedGetSinglePixelWidth = null;
                     },
                  },
                  {
                     key: "constructPath",
                     value: function constructPath(ops, args, minMax) {
                        var ctx = this.ctx;
                        var current = this.current;
                        var x = current.x,
                           y = current.y;
                        var startX, startY;
                        var currentTransform = (0,
                        display_utils.getCurrentTransform)(ctx);
                        var isScalingMatrix =
                           (currentTransform[0] === 0 &&
                              currentTransform[3] === 0) ||
                           (currentTransform[1] === 0 &&
                              currentTransform[2] === 0);
                        var minMaxForBezier = isScalingMatrix
                           ? minMax.slice(0)
                           : null;
                        for (var i = 0, j = 0, ii = ops.length; i < ii; i++) {
                           switch (ops[i] | 0) {
                              case util.OPS.rectangle:
                                 x = args[j++];
                                 y = args[j++];
                                 var width = args[j++];
                                 var height = args[j++];
                                 var xw = x + width;
                                 var yh = y + height;
                                 ctx.moveTo(x, y);
                                 if (width === 0 || height === 0) {
                                    ctx.lineTo(xw, yh);
                                 } else {
                                    ctx.lineTo(xw, y);
                                    ctx.lineTo(xw, yh);
                                    ctx.lineTo(x, yh);
                                 }
                                 if (!isScalingMatrix) {
                                    current.updateRectMinMax(currentTransform, [
                                       x,
                                       y,
                                       xw,
                                       yh,
                                    ]);
                                 }
                                 ctx.closePath();
                                 break;
                              case util.OPS.moveTo:
                                 x = args[j++];
                                 y = args[j++];
                                 ctx.moveTo(x, y);
                                 if (!isScalingMatrix) {
                                    current.updatePathMinMax(
                                       currentTransform,
                                       x,
                                       y,
                                    );
                                 }
                                 break;
                              case util.OPS.lineTo:
                                 x = args[j++];
                                 y = args[j++];
                                 ctx.lineTo(x, y);
                                 if (!isScalingMatrix) {
                                    current.updatePathMinMax(
                                       currentTransform,
                                       x,
                                       y,
                                    );
                                 }
                                 break;
                              case util.OPS.curveTo:
                                 startX = x;
                                 startY = y;
                                 x = args[j + 4];
                                 y = args[j + 5];
                                 ctx.bezierCurveTo(
                                    args[j],
                                    args[j + 1],
                                    args[j + 2],
                                    args[j + 3],
                                    x,
                                    y,
                                 );
                                 current.updateCurvePathMinMax(
                                    currentTransform,
                                    startX,
                                    startY,
                                    args[j],
                                    args[j + 1],
                                    args[j + 2],
                                    args[j + 3],
                                    x,
                                    y,
                                    minMaxForBezier,
                                 );
                                 j += 6;
                                 break;
                              case util.OPS.curveTo2:
                                 startX = x;
                                 startY = y;
                                 ctx.bezierCurveTo(
                                    x,
                                    y,
                                    args[j],
                                    args[j + 1],
                                    args[j + 2],
                                    args[j + 3],
                                 );
                                 current.updateCurvePathMinMax(
                                    currentTransform,
                                    startX,
                                    startY,
                                    x,
                                    y,
                                    args[j],
                                    args[j + 1],
                                    args[j + 2],
                                    args[j + 3],
                                    minMaxForBezier,
                                 );
                                 x = args[j + 2];
                                 y = args[j + 3];
                                 j += 4;
                                 break;
                              case util.OPS.curveTo3:
                                 startX = x;
                                 startY = y;
                                 x = args[j + 2];
                                 y = args[j + 3];
                                 ctx.bezierCurveTo(
                                    args[j],
                                    args[j + 1],
                                    x,
                                    y,
                                    x,
                                    y,
                                 );
                                 current.updateCurvePathMinMax(
                                    currentTransform,
                                    startX,
                                    startY,
                                    args[j],
                                    args[j + 1],
                                    x,
                                    y,
                                    x,
                                    y,
                                    minMaxForBezier,
                                 );
                                 j += 4;
                                 break;
                              case util.OPS.closePath:
                                 ctx.closePath();
                                 break;
                           }
                        }
                        if (isScalingMatrix) {
                           current.updateScalingPathMinMax(
                              currentTransform,
                              minMaxForBezier,
                           );
                        }
                        current.setCurrentPoint(x, y);
                     },
                  },
                  {
                     key: "closePath",
                     value: function closePath() {
                        this.ctx.closePath();
                     },
                  },
                  {
                     key: "stroke",
                     value: function stroke() {
                        var consumePath =
                           arguments.length > 0 && arguments[0] !== undefined
                              ? arguments[0]
                              : true;
                        var ctx = this.ctx;
                        var strokeColor = this.current.strokeColor;
                        ctx.globalAlpha = this.current.strokeAlpha;
                        if (this.contentVisible) {
                           if (
                              _typeof(strokeColor) === "object" &&
                              strokeColor !== null &&
                              strokeColor !== void 0 &&
                              strokeColor.getPattern
                           ) {
                              ctx.save();
                              ctx.strokeStyle = strokeColor.getPattern(
                                 ctx,
                                 this,
                                 (0, display_utils.getCurrentTransformInverse)(
                                    ctx,
                                 ),
                                 PathType.STROKE,
                              );
                              this.rescaleAndStroke(false);
                              ctx.restore();
                           } else {
                              this.rescaleAndStroke(true);
                           }
                        }
                        if (consumePath) {
                           this.consumePath(
                              this.current.getClippedPathBoundingBox(),
                           );
                        }
                        ctx.globalAlpha = this.current.fillAlpha;
                     },
                  },
                  {
                     key: "closeStroke",
                     value: function closeStroke() {
                        this.closePath();
                        this.stroke();
                     },
                  },
                  {
                     key: "fill",
                     value: function fill() {
                        var consumePath =
                           arguments.length > 0 && arguments[0] !== undefined
                              ? arguments[0]
                              : true;
                        var ctx = this.ctx;
                        var fillColor = this.current.fillColor;
                        var isPatternFill = this.current.patternFill;
                        var needRestore = false;
                        if (isPatternFill) {
                           ctx.save();
                           ctx.fillStyle = fillColor.getPattern(
                              ctx,
                              this,
                              (0, display_utils.getCurrentTransformInverse)(
                                 ctx,
                              ),
                              PathType.FILL,
                           );
                           needRestore = true;
                        }
                        var intersect =
                           this.current.getClippedPathBoundingBox();
                        if (this.contentVisible && intersect !== null) {
                           if (this.pendingEOFill) {
                              ctx.fill("evenodd");
                              this.pendingEOFill = false;
                           } else {
                              ctx.fill();
                           }
                        }
                        if (needRestore) {
                           ctx.restore();
                        }
                        if (consumePath) {
                           this.consumePath(intersect);
                        }
                     },
                  },
                  {
                     key: "eoFill",
                     value: function eoFill() {
                        this.pendingEOFill = true;
                        this.fill();
                     },
                  },
                  {
                     key: "fillStroke",
                     value: function fillStroke() {
                        this.fill(false);
                        this.stroke(false);
                        this.consumePath();
                     },
                  },
                  {
                     key: "eoFillStroke",
                     value: function eoFillStroke() {
                        this.pendingEOFill = true;
                        this.fillStroke();
                     },
                  },
                  {
                     key: "closeFillStroke",
                     value: function closeFillStroke() {
                        this.closePath();
                        this.fillStroke();
                     },
                  },
                  {
                     key: "closeEOFillStroke",
                     value: function closeEOFillStroke() {
                        this.pendingEOFill = true;
                        this.closePath();
                        this.fillStroke();
                     },
                  },
                  {
                     key: "endPath",
                     value: function endPath() {
                        this.consumePath();
                     },
                  },
                  {
                     key: "clip",
                     value: function clip() {
                        this.pendingClip = NORMAL_CLIP;
                     },
                  },
                  {
                     key: "eoClip",
                     value: function eoClip() {
                        this.pendingClip = EO_CLIP;
                     },
                  },
                  {
                     key: "beginText",
                     value: function beginText() {
                        this.current.textMatrix = util.IDENTITY_MATRIX;
                        this.current.textMatrixScale = 1;
                        this.current.x = this.current.lineX = 0;
                        this.current.y = this.current.lineY = 0;
                     },
                  },
                  {
                     key: "endText",
                     value: function endText() {
                        var paths = this.pendingTextPaths;
                        var ctx = this.ctx;
                        if (paths === undefined) {
                           ctx.beginPath();
                           return;
                        }
                        ctx.save();
                        ctx.beginPath();
                        var _iterator54 = _createForOfIteratorHelper(paths),
                           _step54;
                        try {
                           for (
                              _iterator54.s();
                              !(_step54 = _iterator54.n()).done;

                           ) {
                              var path = _step54.value;
                              ctx.setTransform.apply(
                                 ctx,
                                 _toConsumableArray(path.transform),
                              );
                              ctx.translate(path.x, path.y);
                              path.addToPath(ctx, path.fontSize);
                           }
                        } catch (err) {
                           _iterator54.e(err);
                        } finally {
                           _iterator54.f();
                        }
                        ctx.restore();
                        ctx.clip();
                        ctx.beginPath();
                        delete this.pendingTextPaths;
                     },
                  },
                  {
                     key: "setCharSpacing",
                     value: function setCharSpacing(spacing) {
                        this.current.charSpacing = spacing;
                     },
                  },
                  {
                     key: "setWordSpacing",
                     value: function setWordSpacing(spacing) {
                        this.current.wordSpacing = spacing;
                     },
                  },
                  {
                     key: "setHScale",
                     value: function setHScale(scale) {
                        this.current.textHScale = scale / 100;
                     },
                  },
                  {
                     key: "setLeading",
                     value: function setLeading(leading) {
                        this.current.leading = -leading;
                     },
                  },
                  {
                     key: "setFont",
                     value: function setFont(fontRefName, size) {
                        var _fontObj$systemFontIn;
                        var fontObj = this.commonObjs.get(fontRefName);
                        var current = this.current;
                        if (!fontObj) {
                           throw new Error(
                              "Can't find font for ".concat(fontRefName),
                           );
                        }
                        current.fontMatrix =
                           fontObj.fontMatrix || util.FONT_IDENTITY_MATRIX;
                        if (
                           current.fontMatrix[0] === 0 ||
                           current.fontMatrix[3] === 0
                        ) {
                           (0, util.warn)(
                              "Invalid font matrix for font " + fontRefName,
                           );
                        }
                        if (size < 0) {
                           size = -size;
                           current.fontDirection = -1;
                        } else {
                           current.fontDirection = 1;
                        }
                        this.current.font = fontObj;
                        this.current.fontSize = size;
                        if (fontObj.isType3Font) {
                           return;
                        }
                        var name = fontObj.loadedName || "sans-serif";
                        var typeface =
                           ((_fontObj$systemFontIn = fontObj.systemFontInfo) ===
                              null || _fontObj$systemFontIn === void 0
                              ? void 0
                              : _fontObj$systemFontIn.css) ||
                           '"'.concat(name, '", ').concat(fontObj.fallbackName);
                        var bold = "normal";
                        if (fontObj.black) {
                           bold = "900";
                        } else if (fontObj.bold) {
                           bold = "bold";
                        }
                        var italic = fontObj.italic ? "italic" : "normal";
                        var browserFontSize = size;
                        if (size < MIN_FONT_SIZE) {
                           browserFontSize = MIN_FONT_SIZE;
                        } else if (size > MAX_FONT_SIZE) {
                           browserFontSize = MAX_FONT_SIZE;
                        }
                        this.current.fontSizeScale = size / browserFontSize;
                        this.ctx.font = ""
                           .concat(italic, " ")
                           .concat(bold, " ")
                           .concat(browserFontSize, "px ")
                           .concat(typeface);
                     },
                  },
                  {
                     key: "setTextRenderingMode",
                     value: function setTextRenderingMode(mode) {
                        this.current.textRenderingMode = mode;
                     },
                  },
                  {
                     key: "setTextRise",
                     value: function setTextRise(rise) {
                        this.current.textRise = rise;
                     },
                  },
                  {
                     key: "moveText",
                     value: function moveText(x, y) {
                        this.current.x = this.current.lineX += x;
                        this.current.y = this.current.lineY += y;
                     },
                  },
                  {
                     key: "setLeadingMoveText",
                     value: function setLeadingMoveText(x, y) {
                        this.setLeading(-y);
                        this.moveText(x, y);
                     },
                  },
                  {
                     key: "setTextMatrix",
                     value: function setTextMatrix(a, b, c, d, e, f) {
                        this.current.textMatrix = [a, b, c, d, e, f];
                        this.current.textMatrixScale = Math.hypot(a, b);
                        this.current.x = this.current.lineX = 0;
                        this.current.y = this.current.lineY = 0;
                     },
                  },
                  {
                     key: "nextLine",
                     value: function nextLine() {
                        this.moveText(0, this.current.leading);
                     },
                  },
                  {
                     key: "paintChar",
                     value: function paintChar(
                        character,
                        x,
                        y,
                        patternTransform,
                     ) {
                        var ctx = this.ctx;
                        var current = this.current;
                        var font = current.font;
                        var textRenderingMode = current.textRenderingMode;
                        var fontSize = current.fontSize / current.fontSizeScale;
                        var fillStrokeMode =
                           textRenderingMode &
                           util.TextRenderingMode.FILL_STROKE_MASK;
                        var isAddToPathSet = !!(
                           textRenderingMode &
                           util.TextRenderingMode.ADD_TO_PATH_FLAG
                        );
                        var patternFill =
                           current.patternFill && !font.missingFile;
                        var addToPath;
                        if (
                           font.disableFontFace ||
                           isAddToPathSet ||
                           patternFill
                        ) {
                           addToPath = font.getPathGenerator(
                              this.commonObjs,
                              character,
                           );
                        }
                        if (font.disableFontFace || patternFill) {
                           ctx.save();
                           ctx.translate(x, y);
                           ctx.beginPath();
                           addToPath(ctx, fontSize);
                           if (patternTransform) {
                              ctx.setTransform.apply(
                                 ctx,
                                 _toConsumableArray(patternTransform),
                              );
                           }
                           if (
                              fillStrokeMode === util.TextRenderingMode.FILL ||
                              fillStrokeMode ===
                                 util.TextRenderingMode.FILL_STROKE
                           ) {
                              ctx.fill();
                           }
                           if (
                              fillStrokeMode ===
                                 util.TextRenderingMode.STROKE ||
                              fillStrokeMode ===
                                 util.TextRenderingMode.FILL_STROKE
                           ) {
                              ctx.stroke();
                           }
                           ctx.restore();
                        } else {
                           if (
                              fillStrokeMode === util.TextRenderingMode.FILL ||
                              fillStrokeMode ===
                                 util.TextRenderingMode.FILL_STROKE
                           ) {
                              ctx.fillText(character, x, y);
                           }
                           if (
                              fillStrokeMode ===
                                 util.TextRenderingMode.STROKE ||
                              fillStrokeMode ===
                                 util.TextRenderingMode.FILL_STROKE
                           ) {
                              ctx.strokeText(character, x, y);
                           }
                        }
                        if (isAddToPathSet) {
                           var paths =
                              this.pendingTextPaths ||
                              (this.pendingTextPaths = []);
                           paths.push({
                              transform: (0, display_utils.getCurrentTransform)(
                                 ctx,
                              ),
                              x: x,
                              y: y,
                              fontSize: fontSize,
                              addToPath: addToPath,
                           });
                        }
                     },
                  },
                  {
                     key: "isFontSubpixelAAEnabled",
                     get: function get() {
                        var _this$cachedCanvases$ =
                              this.cachedCanvases.getCanvas(
                                 "isFontSubpixelAAEnabled",
                                 10,
                                 10,
                              ),
                           ctx = _this$cachedCanvases$.context;
                        ctx.scale(1.5, 1);
                        ctx.fillText("I", 0, 10);
                        var data = ctx.getImageData(0, 0, 10, 10).data;
                        var enabled = false;
                        for (var i = 3; i < data.length; i += 4) {
                           if (data[i] > 0 && data[i] < 255) {
                              enabled = true;
                              break;
                           }
                        }
                        return (0, util.shadow)(
                           this,
                           "isFontSubpixelAAEnabled",
                           enabled,
                        );
                     },
                  },
                  {
                     key: "showText",
                     value: function showText(glyphs) {
                        var current = this.current;
                        var font = current.font;
                        if (font.isType3Font) {
                           return this.showType3Text(glyphs);
                        }
                        var fontSize = current.fontSize;
                        if (fontSize === 0) {
                           return undefined;
                        }
                        var ctx = this.ctx;
                        var fontSizeScale = current.fontSizeScale;
                        var charSpacing = current.charSpacing;
                        var wordSpacing = current.wordSpacing;
                        var fontDirection = current.fontDirection;
                        var textHScale = current.textHScale * fontDirection;
                        var glyphsLength = glyphs.length;
                        var vertical = font.vertical;
                        var spacingDir = vertical ? 1 : -1;
                        var defaultVMetrics = font.defaultVMetrics;
                        var widthAdvanceScale =
                           fontSize * current.fontMatrix[0];
                        var simpleFillText =
                           current.textRenderingMode ===
                              util.TextRenderingMode.FILL &&
                           !font.disableFontFace &&
                           !current.patternFill;
                        ctx.save();
                        ctx.transform.apply(
                           ctx,
                           _toConsumableArray(current.textMatrix),
                        );
                        ctx.translate(current.x, current.y + current.textRise);
                        if (fontDirection > 0) {
                           ctx.scale(textHScale, -1);
                        } else {
                           ctx.scale(textHScale, 1);
                        }
                        var patternTransform;
                        if (current.patternFill) {
                           ctx.save();
                           var pattern = current.fillColor.getPattern(
                              ctx,
                              this,
                              (0, display_utils.getCurrentTransformInverse)(
                                 ctx,
                              ),
                              PathType.FILL,
                           );
                           patternTransform = (0,
                           display_utils.getCurrentTransform)(ctx);
                           ctx.restore();
                           ctx.fillStyle = pattern;
                        }
                        var lineWidth = current.lineWidth;
                        var scale = current.textMatrixScale;
                        if (scale === 0 || lineWidth === 0) {
                           var fillStrokeMode =
                              current.textRenderingMode &
                              util.TextRenderingMode.FILL_STROKE_MASK;
                           if (
                              fillStrokeMode ===
                                 util.TextRenderingMode.STROKE ||
                              fillStrokeMode ===
                                 util.TextRenderingMode.FILL_STROKE
                           ) {
                              lineWidth = this.getSinglePixelWidth();
                           }
                        } else {
                           lineWidth /= scale;
                        }
                        if (fontSizeScale !== 1.0) {
                           ctx.scale(fontSizeScale, fontSizeScale);
                           lineWidth /= fontSizeScale;
                        }
                        ctx.lineWidth = lineWidth;
                        if (font.isInvalidPDFjsFont) {
                           var chars = [];
                           var width = 0;
                           var _iterator55 = _createForOfIteratorHelper(glyphs),
                              _step55;
                           try {
                              for (
                                 _iterator55.s();
                                 !(_step55 = _iterator55.n()).done;

                              ) {
                                 var glyph = _step55.value;
                                 chars.push(glyph.unicode);
                                 width += glyph.width;
                              }
                           } catch (err) {
                              _iterator55.e(err);
                           } finally {
                              _iterator55.f();
                           }
                           ctx.fillText(chars.join(""), 0, 0);
                           current.x += width * widthAdvanceScale * textHScale;
                           ctx.restore();
                           this.compose();
                           return undefined;
                        }
                        var x = 0,
                           i;
                        for (i = 0; i < glyphsLength; ++i) {
                           var _glyph = glyphs[i];
                           if (typeof _glyph === "number") {
                              x += (spacingDir * _glyph * fontSize) / 1000;
                              continue;
                           }
                           var restoreNeeded = false;
                           var spacing =
                              (_glyph.isSpace ? wordSpacing : 0) + charSpacing;
                           var character = _glyph.fontChar;
                           var accent = _glyph.accent;
                           var scaledX = void 0,
                              scaledY = void 0;
                           var _width = _glyph.width;
                           if (vertical) {
                              var vmetric = _glyph.vmetric || defaultVMetrics;
                              var vx =
                                 -(_glyph.vmetric ? vmetric[1] : _width * 0.5) *
                                 widthAdvanceScale;
                              var vy = vmetric[2] * widthAdvanceScale;
                              _width = vmetric ? -vmetric[0] : _width;
                              scaledX = vx / fontSizeScale;
                              scaledY = (x + vy) / fontSizeScale;
                           } else {
                              scaledX = x / fontSizeScale;
                              scaledY = 0;
                           }
                           if (font.remeasure && _width > 0) {
                              var measuredWidth =
                                 ((ctx.measureText(character).width * 1000) /
                                    fontSize) *
                                 fontSizeScale;
                              if (
                                 _width < measuredWidth &&
                                 this.isFontSubpixelAAEnabled
                              ) {
                                 var characterScaleX = _width / measuredWidth;
                                 restoreNeeded = true;
                                 ctx.save();
                                 ctx.scale(characterScaleX, 1);
                                 scaledX /= characterScaleX;
                              } else if (_width !== measuredWidth) {
                                 scaledX +=
                                    (((_width - measuredWidth) / 2000) *
                                       fontSize) /
                                    fontSizeScale;
                              }
                           }
                           if (
                              this.contentVisible &&
                              (_glyph.isInFont || font.missingFile)
                           ) {
                              if (simpleFillText && !accent) {
                                 ctx.fillText(character, scaledX, scaledY);
                              } else {
                                 this.paintChar(
                                    character,
                                    scaledX,
                                    scaledY,
                                    patternTransform,
                                 );
                                 if (accent) {
                                    var scaledAccentX =
                                       scaledX +
                                       (fontSize * accent.offset.x) /
                                          fontSizeScale;
                                    var scaledAccentY =
                                       scaledY -
                                       (fontSize * accent.offset.y) /
                                          fontSizeScale;
                                    this.paintChar(
                                       accent.fontChar,
                                       scaledAccentX,
                                       scaledAccentY,
                                       patternTransform,
                                    );
                                 }
                              }
                           }
                           var charWidth = vertical
                              ? _width * widthAdvanceScale -
                                spacing * fontDirection
                              : _width * widthAdvanceScale +
                                spacing * fontDirection;
                           x += charWidth;
                           if (restoreNeeded) {
                              ctx.restore();
                           }
                        }
                        if (vertical) {
                           current.y -= x;
                        } else {
                           current.x += x * textHScale;
                        }
                        ctx.restore();
                        this.compose();
                        return undefined;
                     },
                  },
                  {
                     key: "showType3Text",
                     value: function showType3Text(glyphs) {
                        var ctx = this.ctx;
                        var current = this.current;
                        var font = current.font;
                        var fontSize = current.fontSize;
                        var fontDirection = current.fontDirection;
                        var spacingDir = font.vertical ? 1 : -1;
                        var charSpacing = current.charSpacing;
                        var wordSpacing = current.wordSpacing;
                        var textHScale = current.textHScale * fontDirection;
                        var fontMatrix =
                           current.fontMatrix || util.FONT_IDENTITY_MATRIX;
                        var glyphsLength = glyphs.length;
                        var isTextInvisible =
                           current.textRenderingMode ===
                           util.TextRenderingMode.INVISIBLE;
                        var i, glyph, width, spacingLength;
                        if (isTextInvisible || fontSize === 0) {
                           return;
                        }
                        this._cachedScaleForStroking[0] = -1;
                        this._cachedGetSinglePixelWidth = null;
                        ctx.save();
                        ctx.transform.apply(
                           ctx,
                           _toConsumableArray(current.textMatrix),
                        );
                        ctx.translate(current.x, current.y);
                        ctx.scale(textHScale, fontDirection);
                        for (i = 0; i < glyphsLength; ++i) {
                           glyph = glyphs[i];
                           if (typeof glyph === "number") {
                              spacingLength =
                                 (spacingDir * glyph * fontSize) / 1000;
                              this.ctx.translate(spacingLength, 0);
                              current.x += spacingLength * textHScale;
                              continue;
                           }
                           var spacing =
                              (glyph.isSpace ? wordSpacing : 0) + charSpacing;
                           var operatorList =
                              font.charProcOperatorList[glyph.operatorListId];
                           if (!operatorList) {
                              (0, util.warn)(
                                 'Type3 character "'.concat(
                                    glyph.operatorListId,
                                    '" is not available.',
                                 ),
                              );
                              continue;
                           }
                           if (this.contentVisible) {
                              this.processingType3 = glyph;
                              this.save();
                              ctx.scale(fontSize, fontSize);
                              ctx.transform.apply(
                                 ctx,
                                 _toConsumableArray(fontMatrix),
                              );
                              this.executeOperatorList(operatorList);
                              this.restore();
                           }
                           var transformed = util.Util.applyTransform(
                              [glyph.width, 0],
                              fontMatrix,
                           );
                           width = transformed[0] * fontSize + spacing;
                           ctx.translate(width, 0);
                           current.x += width * textHScale;
                        }
                        ctx.restore();
                        this.processingType3 = null;
                     },
                  },
                  {
                     key: "setCharWidth",
                     value: function setCharWidth(xWidth, yWidth) {},
                  },
                  {
                     key: "setCharWidthAndBounds",
                     value: function setCharWidthAndBounds(
                        xWidth,
                        yWidth,
                        llx,
                        lly,
                        urx,
                        ury,
                     ) {
                        this.ctx.rect(llx, lly, urx - llx, ury - lly);
                        this.ctx.clip();
                        this.endPath();
                     },
                  },
                  {
                     key: "getColorN_Pattern",
                     value: function getColorN_Pattern(IR) {
                        var _this46 = this;
                        var pattern;
                        if (IR[0] === "TilingPattern") {
                           var color = IR[1];
                           var baseTransform =
                              this.baseTransform ||
                              (0, display_utils.getCurrentTransform)(this.ctx);
                           var canvasGraphicsFactory = {
                              createCanvasGraphics:
                                 function createCanvasGraphics(ctx) {
                                    return new _CanvasGraphics(
                                       ctx,
                                       _this46.commonObjs,
                                       _this46.objs,
                                       _this46.canvasFactory,
                                       _this46.filterFactory,
                                       {
                                          optionalContentConfig:
                                             _this46.optionalContentConfig,
                                          markedContentStack:
                                             _this46.markedContentStack,
                                       },
                                    );
                                 },
                           };
                           pattern = new TilingPattern(
                              IR,
                              color,
                              this.ctx,
                              canvasGraphicsFactory,
                              baseTransform,
                           );
                        } else {
                           pattern = this._getPattern(IR[1], IR[2]);
                        }
                        return pattern;
                     },
                  },
                  {
                     key: "setStrokeColorN",
                     value: function setStrokeColorN() {
                        this.current.strokeColor =
                           this.getColorN_Pattern(arguments);
                     },
                  },
                  {
                     key: "setFillColorN",
                     value: function setFillColorN() {
                        this.current.fillColor =
                           this.getColorN_Pattern(arguments);
                        this.current.patternFill = true;
                     },
                  },
                  {
                     key: "setStrokeRGBColor",
                     value: function setStrokeRGBColor(r, g, b) {
                        var color = util.Util.makeHexColor(r, g, b);
                        this.ctx.strokeStyle = color;
                        this.current.strokeColor = color;
                     },
                  },
                  {
                     key: "setFillRGBColor",
                     value: function setFillRGBColor(r, g, b) {
                        var color = util.Util.makeHexColor(r, g, b);
                        this.ctx.fillStyle = color;
                        this.current.fillColor = color;
                        this.current.patternFill = false;
                     },
                  },
                  {
                     key: "_getPattern",
                     value: function _getPattern(objId) {
                        var matrix =
                           arguments.length > 1 && arguments[1] !== undefined
                              ? arguments[1]
                              : null;
                        var pattern;
                        if (this.cachedPatterns.has(objId)) {
                           pattern = this.cachedPatterns.get(objId);
                        } else {
                           pattern = getShadingPattern(this.getObject(objId));
                           this.cachedPatterns.set(objId, pattern);
                        }
                        if (matrix) {
                           pattern.matrix = matrix;
                        }
                        return pattern;
                     },
                  },
                  {
                     key: "shadingFill",
                     value: function shadingFill(objId) {
                        if (!this.contentVisible) {
                           return;
                        }
                        var ctx = this.ctx;
                        this.save();
                        var pattern = this._getPattern(objId);
                        ctx.fillStyle = pattern.getPattern(
                           ctx,
                           this,
                           (0, display_utils.getCurrentTransformInverse)(ctx),
                           PathType.SHADING,
                        );
                        var inv = (0, display_utils.getCurrentTransformInverse)(
                           ctx,
                        );
                        if (inv) {
                           var _ctx$canvas = ctx.canvas,
                              width = _ctx$canvas.width,
                              height = _ctx$canvas.height;
                           var _util$Util$getAxialAl3 =
                                 util.Util.getAxialAlignedBoundingBox(
                                    [0, 0, width, height],
                                    inv,
                                 ),
                              _util$Util$getAxialAl4 = _slicedToArray(
                                 _util$Util$getAxialAl3,
                                 4,
                              ),
                              x0 = _util$Util$getAxialAl4[0],
                              y0 = _util$Util$getAxialAl4[1],
                              x1 = _util$Util$getAxialAl4[2],
                              y1 = _util$Util$getAxialAl4[3];
                           this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);
                        } else {
                           this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
                        }
                        this.compose(this.current.getClippedPathBoundingBox());
                        this.restore();
                     },
                  },
                  {
                     key: "beginInlineImage",
                     value: function beginInlineImage() {
                        (0, util.unreachable)(
                           "Should not call beginInlineImage",
                        );
                     },
                  },
                  {
                     key: "beginImageData",
                     value: function beginImageData() {
                        (0, util.unreachable)("Should not call beginImageData");
                     },
                  },
                  {
                     key: "paintFormXObjectBegin",
                     value: function paintFormXObjectBegin(matrix, bbox) {
                        if (!this.contentVisible) {
                           return;
                        }
                        this.save();
                        this.baseTransformStack.push(this.baseTransform);
                        if (Array.isArray(matrix) && matrix.length === 6) {
                           this.transform.apply(
                              this,
                              _toConsumableArray(matrix),
                           );
                        }
                        this.baseTransform = (0,
                        display_utils.getCurrentTransform)(this.ctx);
                        if (bbox) {
                           var width = bbox[2] - bbox[0];
                           var height = bbox[3] - bbox[1];
                           this.ctx.rect(bbox[0], bbox[1], width, height);
                           this.current.updateRectMinMax(
                              (0, display_utils.getCurrentTransform)(this.ctx),
                              bbox,
                           );
                           this.clip();
                           this.endPath();
                        }
                     },
                  },
                  {
                     key: "paintFormXObjectEnd",
                     value: function paintFormXObjectEnd() {
                        if (!this.contentVisible) {
                           return;
                        }
                        this.restore();
                        this.baseTransform = this.baseTransformStack.pop();
                     },
                  },
                  {
                     key: "beginGroup",
                     value: function beginGroup(group) {
                        if (!this.contentVisible) {
                           return;
                        }
                        this.save();
                        if (this.inSMaskMode) {
                           this.endSMaskMode();
                           this.current.activeSMask = null;
                        }
                        var currentCtx = this.ctx;
                        if (!group.isolated) {
                           (0, util.info)("TODO: Support non-isolated groups.");
                        }
                        if (group.knockout) {
                           (0, util.warn)("Knockout groups not supported.");
                        }
                        var currentTransform = (0,
                        display_utils.getCurrentTransform)(currentCtx);
                        if (group.matrix) {
                           currentCtx.transform.apply(
                              currentCtx,
                              _toConsumableArray(group.matrix),
                           );
                        }
                        if (!group.bbox) {
                           throw new Error("Bounding box is required.");
                        }
                        var bounds = util.Util.getAxialAlignedBoundingBox(
                           group.bbox,
                           (0, display_utils.getCurrentTransform)(currentCtx),
                        );
                        var canvasBounds = [
                           0,
                           0,
                           currentCtx.canvas.width,
                           currentCtx.canvas.height,
                        ];
                        bounds = util.Util.intersect(bounds, canvasBounds) || [
                           0, 0, 0, 0,
                        ];
                        var offsetX = Math.floor(bounds[0]);
                        var offsetY = Math.floor(bounds[1]);
                        var drawnWidth = Math.max(
                           Math.ceil(bounds[2]) - offsetX,
                           1,
                        );
                        var drawnHeight = Math.max(
                           Math.ceil(bounds[3]) - offsetY,
                           1,
                        );
                        var scaleX = 1,
                           scaleY = 1;
                        if (drawnWidth > MAX_GROUP_SIZE) {
                           scaleX = drawnWidth / MAX_GROUP_SIZE;
                           drawnWidth = MAX_GROUP_SIZE;
                        }
                        if (drawnHeight > MAX_GROUP_SIZE) {
                           scaleY = drawnHeight / MAX_GROUP_SIZE;
                           drawnHeight = MAX_GROUP_SIZE;
                        }
                        this.current.startNewPathAndClipBox([
                           0,
                           0,
                           drawnWidth,
                           drawnHeight,
                        ]);
                        var cacheId = "groupAt" + this.groupLevel;
                        if (group.smask) {
                           cacheId += "_smask_" + (this.smaskCounter++ % 2);
                        }
                        var scratchCanvas = this.cachedCanvases.getCanvas(
                           cacheId,
                           drawnWidth,
                           drawnHeight,
                        );
                        var groupCtx = scratchCanvas.context;
                        groupCtx.scale(1 / scaleX, 1 / scaleY);
                        groupCtx.translate(-offsetX, -offsetY);
                        groupCtx.transform.apply(
                           groupCtx,
                           _toConsumableArray(currentTransform),
                        );
                        if (group.smask) {
                           this.smaskStack.push({
                              canvas: scratchCanvas.canvas,
                              context: groupCtx,
                              offsetX: offsetX,
                              offsetY: offsetY,
                              scaleX: scaleX,
                              scaleY: scaleY,
                              subtype: group.smask.subtype,
                              backdrop: group.smask.backdrop,
                              transferMap: group.smask.transferMap || null,
                              startTransformInverse: null,
                           });
                        } else {
                           currentCtx.setTransform(1, 0, 0, 1, 0, 0);
                           currentCtx.translate(offsetX, offsetY);
                           currentCtx.scale(scaleX, scaleY);
                           currentCtx.save();
                        }
                        copyCtxState(currentCtx, groupCtx);
                        this.ctx = groupCtx;
                        this.setGState([
                           ["BM", "source-over"],
                           ["ca", 1],
                           ["CA", 1],
                        ]);
                        this.groupStack.push(currentCtx);
                        this.groupLevel++;
                     },
                  },
                  {
                     key: "endGroup",
                     value: function endGroup(group) {
                        if (!this.contentVisible) {
                           return;
                        }
                        this.groupLevel--;
                        var groupCtx = this.ctx;
                        var ctx = this.groupStack.pop();
                        this.ctx = ctx;
                        this.ctx.imageSmoothingEnabled = false;
                        if (group.smask) {
                           this.tempSMask = this.smaskStack.pop();
                           this.restore();
                        } else {
                           var _this$ctx4;
                           this.ctx.restore();
                           var currentMtx = (0,
                           display_utils.getCurrentTransform)(this.ctx);
                           this.restore();
                           this.ctx.save();
                           (_this$ctx4 = this.ctx).setTransform.apply(
                              _this$ctx4,
                              _toConsumableArray(currentMtx),
                           );
                           var dirtyBox = util.Util.getAxialAlignedBoundingBox(
                              [
                                 0,
                                 0,
                                 groupCtx.canvas.width,
                                 groupCtx.canvas.height,
                              ],
                              currentMtx,
                           );
                           this.ctx.drawImage(groupCtx.canvas, 0, 0);
                           this.ctx.restore();
                           this.compose(dirtyBox);
                        }
                     },
                  },
                  {
                     key: "beginAnnotation",
                     value: function beginAnnotation(
                        id,
                        rect,
                        transform,
                        matrix,
                        hasOwnCanvas,
                     ) {
                        _assertClassBrand(
                           _CanvasGraphics_brand,
                           this,
                           _restoreInitialState,
                        ).call(this);
                        resetCtxToDefault(this.ctx);
                        this.ctx.save();
                        this.save();
                        if (this.baseTransform) {
                           var _this$ctx5;
                           (_this$ctx5 = this.ctx).setTransform.apply(
                              _this$ctx5,
                              _toConsumableArray(this.baseTransform),
                           );
                        }
                        if (Array.isArray(rect) && rect.length === 4) {
                           var width = rect[2] - rect[0];
                           var height = rect[3] - rect[1];
                           if (hasOwnCanvas && this.annotationCanvasMap) {
                              transform = transform.slice();
                              transform[4] -= rect[0];
                              transform[5] -= rect[1];
                              rect = rect.slice();
                              rect[0] = rect[1] = 0;
                              rect[2] = width;
                              rect[3] = height;
                              var _util$Util$singularVa =
                                    util.Util.singularValueDecompose2dScale(
                                       (0, display_utils.getCurrentTransform)(
                                          this.ctx,
                                       ),
                                    ),
                                 _util$Util$singularVa2 = _slicedToArray(
                                    _util$Util$singularVa,
                                    2,
                                 ),
                                 scaleX = _util$Util$singularVa2[0],
                                 scaleY = _util$Util$singularVa2[1];
                              var viewportScale = this.viewportScale;
                              var canvasWidth = Math.ceil(
                                 width * this.outputScaleX * viewportScale,
                              );
                              var canvasHeight = Math.ceil(
                                 height * this.outputScaleY * viewportScale,
                              );
                              this.annotationCanvas = this.canvasFactory.create(
                                 canvasWidth,
                                 canvasHeight,
                              );
                              var _this$annotationCanva = this.annotationCanvas,
                                 canvas = _this$annotationCanva.canvas,
                                 context = _this$annotationCanva.context;
                              this.annotationCanvasMap.set(id, canvas);
                              this.annotationCanvas.savedCtx = this.ctx;
                              this.ctx = context;
                              this.ctx.save();
                              this.ctx.setTransform(
                                 scaleX,
                                 0,
                                 0,
                                 -scaleY,
                                 0,
                                 height * scaleY,
                              );
                              resetCtxToDefault(this.ctx);
                           } else {
                              resetCtxToDefault(this.ctx);
                              this.ctx.rect(rect[0], rect[1], width, height);
                              this.ctx.clip();
                              this.endPath();
                           }
                        }
                        this.current = new CanvasExtraState(
                           this.ctx.canvas.width,
                           this.ctx.canvas.height,
                        );
                        this.transform.apply(
                           this,
                           _toConsumableArray(transform),
                        );
                        this.transform.apply(this, _toConsumableArray(matrix));
                     },
                  },
                  {
                     key: "endAnnotation",
                     value: function endAnnotation() {
                        if (this.annotationCanvas) {
                           this.ctx.restore();
                           _assertClassBrand(
                              _CanvasGraphics_brand,
                              this,
                              _drawFilter,
                           ).call(this);
                           this.ctx = this.annotationCanvas.savedCtx;
                           delete this.annotationCanvas.savedCtx;
                           delete this.annotationCanvas;
                        }
                     },
                  },
                  {
                     key: "paintImageMaskXObject",
                     value: function paintImageMaskXObject(img) {
                        if (!this.contentVisible) {
                           return;
                        }
                        var count = img.count;
                        img = this.getObject(img.data, img);
                        img.count = count;
                        var ctx = this.ctx;
                        var glyph = this.processingType3;
                        if (glyph) {
                           if (glyph.compiled === undefined) {
                              glyph.compiled = compileType3Glyph(img);
                           }
                           if (glyph.compiled) {
                              glyph.compiled(ctx);
                              return;
                           }
                        }
                        var mask = this._createMaskCanvas(img);
                        var maskCanvas = mask.canvas;
                        ctx.save();
                        ctx.setTransform(1, 0, 0, 1, 0, 0);
                        ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);
                        ctx.restore();
                        this.compose();
                     },
                  },
                  {
                     key: "paintImageMaskXObjectRepeat",
                     value: function paintImageMaskXObjectRepeat(img, scaleX) {
                        var skewX =
                           arguments.length > 2 && arguments[2] !== undefined
                              ? arguments[2]
                              : 0;
                        var skewY =
                           arguments.length > 3 && arguments[3] !== undefined
                              ? arguments[3]
                              : 0;
                        var scaleY =
                           arguments.length > 4 ? arguments[4] : undefined;
                        var positions =
                           arguments.length > 5 ? arguments[5] : undefined;
                        if (!this.contentVisible) {
                           return;
                        }
                        img = this.getObject(img.data, img);
                        var ctx = this.ctx;
                        ctx.save();
                        var currentTransform = (0,
                        display_utils.getCurrentTransform)(ctx);
                        ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);
                        var mask = this._createMaskCanvas(img);
                        ctx.setTransform(
                           1,
                           0,
                           0,
                           1,
                           mask.offsetX - currentTransform[4],
                           mask.offsetY - currentTransform[5],
                        );
                        for (var i = 0, ii = positions.length; i < ii; i += 2) {
                           var trans = util.Util.transform(currentTransform, [
                              scaleX,
                              skewX,
                              skewY,
                              scaleY,
                              positions[i],
                              positions[i + 1],
                           ]);
                           var _util$Util$applyTrans3 =
                                 util.Util.applyTransform([0, 0], trans),
                              _util$Util$applyTrans4 = _slicedToArray(
                                 _util$Util$applyTrans3,
                                 2,
                              ),
                              x = _util$Util$applyTrans4[0],
                              y = _util$Util$applyTrans4[1];
                           ctx.drawImage(mask.canvas, x, y);
                        }
                        ctx.restore();
                        this.compose();
                     },
                  },
                  {
                     key: "paintImageMaskXObjectGroup",
                     value: function paintImageMaskXObjectGroup(images) {
                        if (!this.contentVisible) {
                           return;
                        }
                        var ctx = this.ctx;
                        var fillColor = this.current.fillColor;
                        var isPatternFill = this.current.patternFill;
                        var _iterator56 = _createForOfIteratorHelper(images),
                           _step56;
                        try {
                           for (
                              _iterator56.s();
                              !(_step56 = _iterator56.n()).done;

                           ) {
                              var image = _step56.value;
                              var data = image.data,
                                 width = image.width,
                                 height = image.height,
                                 transform = image.transform;
                              var maskCanvas = this.cachedCanvases.getCanvas(
                                 "maskCanvas",
                                 width,
                                 height,
                              );
                              var maskCtx = maskCanvas.context;
                              maskCtx.save();
                              var img = this.getObject(data, image);
                              putBinaryImageMask(maskCtx, img);
                              maskCtx.globalCompositeOperation = "source-in";
                              maskCtx.fillStyle = isPatternFill
                                 ? fillColor.getPattern(
                                      maskCtx,
                                      this,
                                      (0,
                                      display_utils.getCurrentTransformInverse)(
                                         ctx,
                                      ),
                                      PathType.FILL,
                                   )
                                 : fillColor;
                              maskCtx.fillRect(0, 0, width, height);
                              maskCtx.restore();
                              ctx.save();
                              ctx.transform.apply(
                                 ctx,
                                 _toConsumableArray(transform),
                              );
                              ctx.scale(1, -1);
                              drawImageAtIntegerCoords(
                                 ctx,
                                 maskCanvas.canvas,
                                 0,
                                 0,
                                 width,
                                 height,
                                 0,
                                 -1,
                                 1,
                                 1,
                              );
                              ctx.restore();
                           }
                        } catch (err) {
                           _iterator56.e(err);
                        } finally {
                           _iterator56.f();
                        }
                        this.compose();
                     },
                  },
                  {
                     key: "paintImageXObject",
                     value: function paintImageXObject(objId) {
                        if (!this.contentVisible) {
                           return;
                        }
                        var imgData = this.getObject(objId);
                        if (!imgData) {
                           (0, util.warn)("Dependent image isn't ready yet");
                           return;
                        }
                        this.paintInlineImageXObject(imgData);
                     },
                  },
                  {
                     key: "paintImageXObjectRepeat",
                     value: function paintImageXObjectRepeat(
                        objId,
                        scaleX,
                        scaleY,
                        positions,
                     ) {
                        if (!this.contentVisible) {
                           return;
                        }
                        var imgData = this.getObject(objId);
                        if (!imgData) {
                           (0, util.warn)("Dependent image isn't ready yet");
                           return;
                        }
                        var width = imgData.width;
                        var height = imgData.height;
                        var map = [];
                        for (var i = 0, ii = positions.length; i < ii; i += 2) {
                           map.push({
                              transform: [
                                 scaleX,
                                 0,
                                 0,
                                 scaleY,
                                 positions[i],
                                 positions[i + 1],
                              ],
                              x: 0,
                              y: 0,
                              w: width,
                              h: height,
                           });
                        }
                        this.paintInlineImageXObjectGroup(imgData, map);
                     },
                  },
                  {
                     key: "applyTransferMapsToCanvas",
                     value: function applyTransferMapsToCanvas(ctx) {
                        if (this.current.transferMaps !== "none") {
                           ctx.filter = this.current.transferMaps;
                           ctx.drawImage(ctx.canvas, 0, 0);
                           ctx.filter = "none";
                        }
                        return ctx.canvas;
                     },
                  },
                  {
                     key: "applyTransferMapsToBitmap",
                     value: function applyTransferMapsToBitmap(imgData) {
                        if (this.current.transferMaps === "none") {
                           return imgData.bitmap;
                        }
                        var bitmap = imgData.bitmap,
                           width = imgData.width,
                           height = imgData.height;
                        var tmpCanvas = this.cachedCanvases.getCanvas(
                           "inlineImage",
                           width,
                           height,
                        );
                        var tmpCtx = tmpCanvas.context;
                        tmpCtx.filter = this.current.transferMaps;
                        tmpCtx.drawImage(bitmap, 0, 0);
                        tmpCtx.filter = "none";
                        return tmpCanvas.canvas;
                     },
                  },
                  {
                     key: "paintInlineImageXObject",
                     value: function paintInlineImageXObject(imgData) {
                        if (!this.contentVisible) {
                           return;
                        }
                        var width = imgData.width;
                        var height = imgData.height;
                        var ctx = this.ctx;
                        this.save();
                        if (!util.isNodeJS) {
                           var filter = ctx.filter;
                           if (filter !== "none" && filter !== "") {
                              ctx.filter = "none";
                           }
                        }
                        ctx.scale(1 / width, -1 / height);
                        var imgToPaint;
                        if (imgData.bitmap) {
                           imgToPaint = this.applyTransferMapsToBitmap(imgData);
                        } else if (
                           (typeof HTMLElement === "function" &&
                              imgData instanceof HTMLElement) ||
                           !imgData.data
                        ) {
                           imgToPaint = imgData;
                        } else {
                           var tmpCanvas = this.cachedCanvases.getCanvas(
                              "inlineImage",
                              width,
                              height,
                           );
                           var tmpCtx = tmpCanvas.context;
                           putBinaryImageData(tmpCtx, imgData);
                           imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);
                        }
                        var scaled = this._scaleImage(
                           imgToPaint,
                           (0, display_utils.getCurrentTransformInverse)(ctx),
                        );
                        ctx.imageSmoothingEnabled = getImageSmoothingEnabled(
                           (0, display_utils.getCurrentTransform)(ctx),
                           imgData.interpolate,
                        );
                        drawImageAtIntegerCoords(
                           ctx,
                           scaled.img,
                           0,
                           0,
                           scaled.paintWidth,
                           scaled.paintHeight,
                           0,
                           -height,
                           width,
                           height,
                        );
                        this.compose();
                        this.restore();
                     },
                  },
                  {
                     key: "paintInlineImageXObjectGroup",
                     value: function paintInlineImageXObjectGroup(
                        imgData,
                        map,
                     ) {
                        if (!this.contentVisible) {
                           return;
                        }
                        var ctx = this.ctx;
                        var imgToPaint;
                        if (imgData.bitmap) {
                           imgToPaint = imgData.bitmap;
                        } else {
                           var w = imgData.width;
                           var h = imgData.height;
                           var tmpCanvas = this.cachedCanvases.getCanvas(
                              "inlineImage",
                              w,
                              h,
                           );
                           var tmpCtx = tmpCanvas.context;
                           putBinaryImageData(tmpCtx, imgData);
                           imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);
                        }
                        var _iterator57 = _createForOfIteratorHelper(map),
                           _step57;
                        try {
                           for (
                              _iterator57.s();
                              !(_step57 = _iterator57.n()).done;

                           ) {
                              var entry = _step57.value;
                              ctx.save();
                              ctx.transform.apply(
                                 ctx,
                                 _toConsumableArray(entry.transform),
                              );
                              ctx.scale(1, -1);
                              drawImageAtIntegerCoords(
                                 ctx,
                                 imgToPaint,
                                 entry.x,
                                 entry.y,
                                 entry.w,
                                 entry.h,
                                 0,
                                 -1,
                                 1,
                                 1,
                              );
                              ctx.restore();
                           }
                        } catch (err) {
                           _iterator57.e(err);
                        } finally {
                           _iterator57.f();
                        }
                        this.compose();
                     },
                  },
                  {
                     key: "paintSolidColorImageMask",
                     value: function paintSolidColorImageMask() {
                        if (!this.contentVisible) {
                           return;
                        }
                        this.ctx.fillRect(0, 0, 1, 1);
                        this.compose();
                     },
                  },
                  { key: "markPoint", value: function markPoint(tag) {} },
                  {
                     key: "markPointProps",
                     value: function markPointProps(tag, properties) {},
                  },
                  {
                     key: "beginMarkedContent",
                     value: function beginMarkedContent(tag) {
                        this.markedContentStack.push({ visible: true });
                     },
                  },
                  {
                     key: "beginMarkedContentProps",
                     value: function beginMarkedContentProps(tag, properties) {
                        if (tag === "OC") {
                           this.markedContentStack.push({
                              visible:
                                 this.optionalContentConfig.isVisible(
                                    properties,
                                 ),
                           });
                        } else {
                           this.markedContentStack.push({ visible: true });
                        }
                        this.contentVisible = this.isContentVisible();
                     },
                  },
                  {
                     key: "endMarkedContent",
                     value: function endMarkedContent() {
                        this.markedContentStack.pop();
                        this.contentVisible = this.isContentVisible();
                     },
                  },
                  { key: "beginCompat", value: function beginCompat() {} },
                  { key: "endCompat", value: function endCompat() {} },
                  {
                     key: "consumePath",
                     value: function consumePath(clipBox) {
                        var isEmpty = this.current.isEmptyClip();
                        if (this.pendingClip) {
                           this.current.updateClipFromPath();
                        }
                        if (!this.pendingClip) {
                           this.compose(clipBox);
                        }
                        var ctx = this.ctx;
                        if (this.pendingClip) {
                           if (!isEmpty) {
                              if (this.pendingClip === EO_CLIP) {
                                 ctx.clip("evenodd");
                              } else {
                                 ctx.clip();
                              }
                           }
                           this.pendingClip = null;
                        }
                        this.current.startNewPathAndClipBox(
                           this.current.clipBox,
                        );
                        ctx.beginPath();
                     },
                  },
                  {
                     key: "getSinglePixelWidth",
                     value: function getSinglePixelWidth() {
                        if (!this._cachedGetSinglePixelWidth) {
                           var m = (0, display_utils.getCurrentTransform)(
                              this.ctx,
                           );
                           if (m[1] === 0 && m[2] === 0) {
                              this._cachedGetSinglePixelWidth =
                                 1 / Math.min(Math.abs(m[0]), Math.abs(m[3]));
                           } else {
                              var absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);
                              var normX = Math.hypot(m[0], m[2]);
                              var normY = Math.hypot(m[1], m[3]);
                              this._cachedGetSinglePixelWidth =
                                 Math.max(normX, normY) / absDet;
                           }
                        }
                        return this._cachedGetSinglePixelWidth;
                     },
                  },
                  {
                     key: "getScaleForStroking",
                     value: function getScaleForStroking() {
                        if (this._cachedScaleForStroking[0] === -1) {
                           var lineWidth = this.current.lineWidth;
                           var _this$ctx$getTransfor = this.ctx.getTransform(),
                              a = _this$ctx$getTransfor.a,
                              b = _this$ctx$getTransfor.b,
                              c = _this$ctx$getTransfor.c,
                              d = _this$ctx$getTransfor.d;
                           var scaleX, scaleY;
                           if (b === 0 && c === 0) {
                              var normX = Math.abs(a);
                              var normY = Math.abs(d);
                              if (normX === normY) {
                                 if (lineWidth === 0) {
                                    scaleX = scaleY = 1 / normX;
                                 } else {
                                    var scaledLineWidth = normX * lineWidth;
                                    scaleX = scaleY =
                                       scaledLineWidth < 1
                                          ? 1 / scaledLineWidth
                                          : 1;
                                 }
                              } else if (lineWidth === 0) {
                                 scaleX = 1 / normX;
                                 scaleY = 1 / normY;
                              } else {
                                 var scaledXLineWidth = normX * lineWidth;
                                 var scaledYLineWidth = normY * lineWidth;
                                 scaleX =
                                    scaledXLineWidth < 1
                                       ? 1 / scaledXLineWidth
                                       : 1;
                                 scaleY =
                                    scaledYLineWidth < 1
                                       ? 1 / scaledYLineWidth
                                       : 1;
                              }
                           } else {
                              var absDet = Math.abs(a * d - b * c);
                              var _normX = Math.hypot(a, b);
                              var _normY = Math.hypot(c, d);
                              if (lineWidth === 0) {
                                 scaleX = _normY / absDet;
                                 scaleY = _normX / absDet;
                              } else {
                                 var baseArea = lineWidth * absDet;
                                 scaleX =
                                    _normY > baseArea ? _normY / baseArea : 1;
                                 scaleY =
                                    _normX > baseArea ? _normX / baseArea : 1;
                              }
                           }
                           this._cachedScaleForStroking[0] = scaleX;
                           this._cachedScaleForStroking[1] = scaleY;
                        }
                        return this._cachedScaleForStroking;
                     },
                  },
                  {
                     key: "rescaleAndStroke",
                     value: function rescaleAndStroke(saveRestore) {
                        var ctx = this.ctx;
                        var lineWidth = this.current.lineWidth;
                        var _this$getScaleForStro = this.getScaleForStroking(),
                           _this$getScaleForStro2 = _slicedToArray(
                              _this$getScaleForStro,
                              2,
                           ),
                           scaleX = _this$getScaleForStro2[0],
                           scaleY = _this$getScaleForStro2[1];
                        ctx.lineWidth = lineWidth || 1;
                        if (scaleX === 1 && scaleY === 1) {
                           ctx.stroke();
                           return;
                        }
                        var dashes = ctx.getLineDash();
                        if (saveRestore) {
                           ctx.save();
                        }
                        ctx.scale(scaleX, scaleY);
                        if (dashes.length > 0) {
                           var scale = Math.max(scaleX, scaleY);
                           ctx.setLineDash(
                              dashes.map(function (x) {
                                 return x / scale;
                              }),
                           );
                           ctx.lineDashOffset /= scale;
                        }
                        ctx.stroke();
                        if (saveRestore) {
                           ctx.restore();
                        }
                     },
                  },
                  {
                     key: "isContentVisible",
                     value: function isContentVisible() {
                        for (
                           var i = this.markedContentStack.length - 1;
                           i >= 0;
                           i--
                        ) {
                           if (!this.markedContentStack[i].visible) {
                              return false;
                           }
                        }
                        return true;
                     },
                  },
               ]);
            })();
            function _restoreInitialState() {
               while (this.stateStack.length || this.inSMaskMode) {
                  this.restore();
               }
               this.ctx.restore();
               if (this.transparentCanvas) {
                  this.ctx = this.compositeCtx;
                  this.ctx.save();
                  this.ctx.setTransform(1, 0, 0, 1, 0, 0);
                  this.ctx.drawImage(this.transparentCanvas, 0, 0);
                  this.ctx.restore();
                  this.transparentCanvas = null;
               }
            }
            function _drawFilter() {
               if (this.pageColors) {
                  var hcmFilterId = this.filterFactory.addHCMFilter(
                     this.pageColors.foreground,
                     this.pageColors.background,
                  );
                  if (hcmFilterId !== "none") {
                     var savedFilter = this.ctx.filter;
                     this.ctx.filter = hcmFilterId;
                     this.ctx.drawImage(this.ctx.canvas, 0, 0);
                     this.ctx.filter = savedFilter;
                  }
               }
            }
            for (var op in util.OPS) {
               if (_CanvasGraphics.prototype[op] !== undefined) {
                  _CanvasGraphics.prototype[util.OPS[op]] =
                     _CanvasGraphics.prototype[op];
               }
            } /***/
         },
         /***/ 419: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            var _PixelsPerInch2;
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ DOMCMapReaderFactory:
                  function DOMCMapReaderFactory() {
                     return /* binding */ _DOMCMapReaderFactory;
                  },
               /* harmony export */ DOMCanvasFactory:
                  function DOMCanvasFactory() {
                     return /* binding */ _DOMCanvasFactory;
                  },
               /* harmony export */ DOMFilterFactory:
                  function DOMFilterFactory() {
                     return /* binding */ _DOMFilterFactory;
                  },
               /* harmony export */ DOMSVGFactory: function DOMSVGFactory() {
                  return /* binding */ _DOMSVGFactory;
               },
               /* harmony export */ DOMStandardFontDataFactory:
                  function DOMStandardFontDataFactory() {
                     return /* binding */ _DOMStandardFontDataFactory;
                  },
               /* harmony export */ PDFDateString: function PDFDateString() {
                  return /* binding */ _PDFDateString;
               },
               /* harmony export */ PageViewport: function PageViewport() {
                  return /* binding */ _PageViewport;
               },
               /* harmony export */ PixelsPerInch: function PixelsPerInch() {
                  return /* binding */ _PixelsPerInch;
               },
               /* harmony export */ RenderingCancelledException:
                  function RenderingCancelledException() {
                     return /* binding */ _RenderingCancelledException;
                  },
               /* harmony export */ StatTimer: function StatTimer() {
                  return /* binding */ _StatTimer;
               },
               /* harmony export */ fetchData: function fetchData() {
                  return /* binding */ _fetchData2;
               },
               /* harmony export */ getColorValues: function getColorValues() {
                  return /* binding */ _getColorValues;
               },
               /* harmony export */ getCurrentTransform:
                  function getCurrentTransform() {
                     return /* binding */ _getCurrentTransform;
                  },
               /* harmony export */ getCurrentTransformInverse:
                  function getCurrentTransformInverse() {
                     return /* binding */ _getCurrentTransformInverse;
                  },
               /* harmony export */ getFilenameFromUrl:
                  function getFilenameFromUrl() {
                     return /* binding */ _getFilenameFromUrl;
                  },
               /* harmony export */ getPdfFilenameFromUrl:
                  function getPdfFilenameFromUrl() {
                     return /* binding */ _getPdfFilenameFromUrl;
                  },
               /* harmony export */ getRGB: function getRGB() {
                  return /* binding */ _getRGB;
               },
               /* harmony export */ getXfaPageViewport:
                  function getXfaPageViewport() {
                     return /* binding */ _getXfaPageViewport;
                  },
               /* harmony export */ isDataScheme: function isDataScheme() {
                  return /* binding */ _isDataScheme;
               },
               /* harmony export */ isPdfFile: function isPdfFile() {
                  return /* binding */ _isPdfFile;
               },
               /* harmony export */ isValidFetchUrl:
                  function isValidFetchUrl() {
                     return /* binding */ _isValidFetchUrl;
                  },
               /* harmony export */ noContextMenu: function noContextMenu() {
                  return /* binding */ _noContextMenu;
               },
               /* harmony export */ setLayerDimensions:
                  function setLayerDimensions() {
                     return /* binding */ _setLayerDimensions;
                  } /* harmony export */,
            });
            /* unused harmony export deprecated */ /* harmony import */ var _base_factory_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(583);
            /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_1__ =
               __webpack_require__(292);
            var SVG_NS = "http://www.w3.org/2000/svg";
            var _PixelsPerInch = /*#__PURE__*/ _createClass(
               function _PixelsPerInch() {
                  _classCallCheck(this, _PixelsPerInch);
               },
            );
            _PixelsPerInch2 = _PixelsPerInch;
            _defineProperty(_PixelsPerInch, "CSS", 96.0);
            _defineProperty(_PixelsPerInch, "PDF", 72.0);
            _defineProperty(
               _PixelsPerInch,
               "PDF_TO_CSS_UNITS",
               _PixelsPerInch2.CSS / _PixelsPerInch2.PDF,
            );
            var _cache = /*#__PURE__*/ new WeakMap();
            var _defs = /*#__PURE__*/ new WeakMap();
            var _docId2 = /*#__PURE__*/ new WeakMap();
            var _document = /*#__PURE__*/ new WeakMap();
            var _hcmCache = /*#__PURE__*/ new WeakMap();
            var _id3 = /*#__PURE__*/ new WeakMap();
            var _DOMFilterFactory_brand = /*#__PURE__*/ new WeakSet();
            var _DOMFilterFactory = /*#__PURE__*/ (function (
               _base_factory_js__WEB,
            ) {
               function _DOMFilterFactory() {
                  var _this50;
                  var _ref64 =
                        arguments.length > 0 && arguments[0] !== undefined
                           ? arguments[0]
                           : {},
                     docId = _ref64.docId,
                     _ref64$ownerDocument = _ref64.ownerDocument,
                     ownerDocument =
                        _ref64$ownerDocument === void 0
                           ? globalThis.document
                           : _ref64$ownerDocument;
                  _classCallCheck(this, _DOMFilterFactory);
                  _this50 = _callSuper(this, _DOMFilterFactory);
                  _classPrivateMethodInitSpec(_this50, _DOMFilterFactory_brand);
                  _classPrivateFieldInitSpec(_this50, _cache, void 0);
                  _classPrivateFieldInitSpec(_this50, _defs, void 0);
                  _classPrivateFieldInitSpec(_this50, _docId2, void 0);
                  _classPrivateFieldInitSpec(_this50, _document, void 0);
                  _classPrivateFieldInitSpec(_this50, _hcmCache, void 0);
                  _classPrivateFieldInitSpec(_this50, _id3, 0);
                  _classPrivateFieldSet(_docId2, _this50, docId);
                  _classPrivateFieldSet(_document, _this50, ownerDocument);
                  return _this50;
               }
               _inherits(_DOMFilterFactory, _base_factory_js__WEB);
               return _createClass(_DOMFilterFactory, [
                  {
                     key: "addFilter",
                     value: function addFilter(maps) {
                        var _this$id, _this$id2;
                        if (!maps) {
                           return "none";
                        }
                        var value = _classPrivateGetter(
                           _DOMFilterFactory_brand,
                           this,
                           _get_cache,
                        ).get(maps);
                        if (value) {
                           return value;
                        }
                        var tableR, tableG, tableB, key;
                        if (maps.length === 1) {
                           var mapR = maps[0];
                           var buffer = new Array(256);
                           for (var i = 0; i < 256; i++) {
                              buffer[i] = mapR[i] / 255;
                           }
                           key = tableR = tableG = tableB = buffer.join(",");
                        } else {
                           var _maps = _slicedToArray(maps, 3),
                              _mapR = _maps[0],
                              mapG = _maps[1],
                              mapB = _maps[2];
                           var bufferR = new Array(256);
                           var bufferG = new Array(256);
                           var bufferB = new Array(256);
                           for (var _i10 = 0; _i10 < 256; _i10++) {
                              bufferR[_i10] = _mapR[_i10] / 255;
                              bufferG[_i10] = mapG[_i10] / 255;
                              bufferB[_i10] = mapB[_i10] / 255;
                           }
                           tableR = bufferR.join(",");
                           tableG = bufferG.join(",");
                           tableB = bufferB.join(",");
                           key = ""
                              .concat(tableR)
                              .concat(tableG)
                              .concat(tableB);
                        }
                        value = _classPrivateGetter(
                           _DOMFilterFactory_brand,
                           this,
                           _get_cache,
                        ).get(key);
                        if (value) {
                           _classPrivateGetter(
                              _DOMFilterFactory_brand,
                              this,
                              _get_cache,
                           ).set(maps, value);
                           return value;
                        }
                        var id = "g_"
                           .concat(
                              _classPrivateFieldGet(_docId2, this),
                              "_transfer_map_",
                           )
                           .concat(
                              (_classPrivateFieldSet(
                                 _id3,
                                 this,
                                 ((_this$id = _classPrivateFieldGet(
                                    _id3,
                                    this,
                                 )),
                                 (_this$id2 = _this$id++),
                                 _this$id),
                              ),
                              _this$id2),
                           );
                        var url = "url(#".concat(id, ")");
                        _classPrivateGetter(
                           _DOMFilterFactory_brand,
                           this,
                           _get_cache,
                        ).set(maps, url);
                        _classPrivateGetter(
                           _DOMFilterFactory_brand,
                           this,
                           _get_cache,
                        ).set(key, url);
                        var filter = _assertClassBrand(
                           _DOMFilterFactory_brand,
                           this,
                           _createFilter,
                        ).call(this, id);
                        _assertClassBrand(
                           _DOMFilterFactory_brand,
                           this,
                           _addTransferMapConversion,
                        ).call(this, tableR, tableG, tableB, filter);
                        return url;
                     },
                  },
                  {
                     key: "addHCMFilter",
                     value: function addHCMFilter(fgColor, bgColor) {
                        var _info,
                           _shared_util_js__WEBP,
                           _shared_util_js__WEBP2;
                        var key = "".concat(fgColor, "-").concat(bgColor);
                        var filterName = "base";
                        var info = _classPrivateGetter(
                           _DOMFilterFactory_brand,
                           this,
                           _get_hcmCache,
                        ).get(filterName);
                        if (
                           ((_info = info) === null || _info === void 0
                              ? void 0
                              : _info.key) === key
                        ) {
                           return info.url;
                        }
                        if (info) {
                           var _info$filter;
                           (_info$filter = info.filter) === null ||
                              _info$filter === void 0 ||
                              _info$filter.remove();
                           info.key = key;
                           info.url = "none";
                           info.filter = null;
                        } else {
                           info = { key: key, url: "none", filter: null };
                           _classPrivateGetter(
                              _DOMFilterFactory_brand,
                              this,
                              _get_hcmCache,
                           ).set(filterName, info);
                        }
                        if (!fgColor || !bgColor) {
                           return info.url;
                        }
                        var fgRGB = _assertClassBrand(
                           _DOMFilterFactory_brand,
                           this,
                           _getRGB2,
                        ).call(this, fgColor);
                        fgColor = (_shared_util_js__WEBP =
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util).makeHexColor.apply(
                           _shared_util_js__WEBP,
                           _toConsumableArray(fgRGB),
                        );
                        var bgRGB = _assertClassBrand(
                           _DOMFilterFactory_brand,
                           this,
                           _getRGB2,
                        ).call(this, bgColor);
                        bgColor = (_shared_util_js__WEBP2 =
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util).makeHexColor.apply(
                           _shared_util_js__WEBP2,
                           _toConsumableArray(bgRGB),
                        );
                        _classPrivateGetter(
                           _DOMFilterFactory_brand,
                           this,
                           _get_defs,
                        ).style.color = "";
                        if (
                           (fgColor === "#000000" && bgColor === "#ffffff") ||
                           fgColor === bgColor
                        ) {
                           return info.url;
                        }
                        var map = new Array(256);
                        for (var i = 0; i <= 255; i++) {
                           var x = i / 255;
                           map[i] =
                              x <= 0.03928
                                 ? x / 12.92
                                 : Math.pow((x + 0.055) / 1.055, 2.4);
                        }
                        var table = map.join(",");
                        var id = "g_".concat(
                           _classPrivateFieldGet(_docId2, this),
                           "_hcm_filter",
                        );
                        var filter = (info.filter = _assertClassBrand(
                           _DOMFilterFactory_brand,
                           this,
                           _createFilter,
                        ).call(this, id));
                        _assertClassBrand(
                           _DOMFilterFactory_brand,
                           this,
                           _addTransferMapConversion,
                        ).call(this, table, table, table, filter);
                        _assertClassBrand(
                           _DOMFilterFactory_brand,
                           this,
                           _addGrayConversion,
                        ).call(this, filter);
                        var getSteps = function getSteps(c, n) {
                           var start = fgRGB[c] / 255;
                           var end = bgRGB[c] / 255;
                           var arr = new Array(n + 1);
                           for (var _i11 = 0; _i11 <= n; _i11++) {
                              arr[_i11] = start + (_i11 / n) * (end - start);
                           }
                           return arr.join(",");
                        };
                        _assertClassBrand(
                           _DOMFilterFactory_brand,
                           this,
                           _addTransferMapConversion,
                        ).call(
                           this,
                           getSteps(0, 5),
                           getSteps(1, 5),
                           getSteps(2, 5),
                           filter,
                        );
                        info.url = "url(#".concat(id, ")");
                        return info.url;
                     },
                  },
                  {
                     key: "addHighlightHCMFilter",
                     value: function addHighlightHCMFilter(
                        filterName,
                        fgColor,
                        bgColor,
                        newFgColor,
                        newBgColor,
                     ) {
                        var _info2;
                        var key = ""
                           .concat(fgColor, "-")
                           .concat(bgColor, "-")
                           .concat(newFgColor, "-")
                           .concat(newBgColor);
                        var info = _classPrivateGetter(
                           _DOMFilterFactory_brand,
                           this,
                           _get_hcmCache,
                        ).get(filterName);
                        if (
                           ((_info2 = info) === null || _info2 === void 0
                              ? void 0
                              : _info2.key) === key
                        ) {
                           return info.url;
                        }
                        if (info) {
                           var _info$filter2;
                           (_info$filter2 = info.filter) === null ||
                              _info$filter2 === void 0 ||
                              _info$filter2.remove();
                           info.key = key;
                           info.url = "none";
                           info.filter = null;
                        } else {
                           info = { key: key, url: "none", filter: null };
                           _classPrivateGetter(
                              _DOMFilterFactory_brand,
                              this,
                              _get_hcmCache,
                           ).set(filterName, info);
                        }
                        if (!fgColor || !bgColor) {
                           return info.url;
                        }
                        var _map = [fgColor, bgColor].map(
                              _assertClassBrand(
                                 _DOMFilterFactory_brand,
                                 this,
                                 _getRGB2,
                              ).bind(this),
                           ),
                           _map2 = _slicedToArray(_map, 2),
                           fgRGB = _map2[0],
                           bgRGB = _map2[1];
                        var fgGray = Math.round(
                           0.2126 * fgRGB[0] +
                              0.7152 * fgRGB[1] +
                              0.0722 * fgRGB[2],
                        );
                        var bgGray = Math.round(
                           0.2126 * bgRGB[0] +
                              0.7152 * bgRGB[1] +
                              0.0722 * bgRGB[2],
                        );
                        var _map3 = [newFgColor, newBgColor].map(
                              _assertClassBrand(
                                 _DOMFilterFactory_brand,
                                 this,
                                 _getRGB2,
                              ).bind(this),
                           ),
                           _map4 = _slicedToArray(_map3, 2),
                           newFgRGB = _map4[0],
                           newBgRGB = _map4[1];
                        if (bgGray < fgGray) {
                           var _ref65 = [bgGray, fgGray, newBgRGB, newFgRGB];
                           fgGray = _ref65[0];
                           bgGray = _ref65[1];
                           newFgRGB = _ref65[2];
                           newBgRGB = _ref65[3];
                        }
                        _classPrivateGetter(
                           _DOMFilterFactory_brand,
                           this,
                           _get_defs,
                        ).style.color = "";
                        var getSteps = function getSteps(fg, bg, n) {
                           var arr = new Array(256);
                           var step = (bgGray - fgGray) / n;
                           var newStart = fg / 255;
                           var newStep = (bg - fg) / (255 * n);
                           var prev = 0;
                           for (var i = 0; i <= n; i++) {
                              var k = Math.round(fgGray + i * step);
                              var value = newStart + i * newStep;
                              for (var j = prev; j <= k; j++) {
                                 arr[j] = value;
                              }
                              prev = k + 1;
                           }
                           for (var _i12 = prev; _i12 < 256; _i12++) {
                              arr[_i12] = arr[prev - 1];
                           }
                           return arr.join(",");
                        };
                        var id = "g_"
                           .concat(
                              _classPrivateFieldGet(_docId2, this),
                              "_hcm_",
                           )
                           .concat(filterName, "_filter");
                        var filter = (info.filter = _assertClassBrand(
                           _DOMFilterFactory_brand,
                           this,
                           _createFilter,
                        ).call(this, id));
                        _assertClassBrand(
                           _DOMFilterFactory_brand,
                           this,
                           _addGrayConversion,
                        ).call(this, filter);
                        _assertClassBrand(
                           _DOMFilterFactory_brand,
                           this,
                           _addTransferMapConversion,
                        ).call(
                           this,
                           getSteps(newFgRGB[0], newBgRGB[0], 5),
                           getSteps(newFgRGB[1], newBgRGB[1], 5),
                           getSteps(newFgRGB[2], newBgRGB[2], 5),
                           filter,
                        );
                        info.url = "url(#".concat(id, ")");
                        return info.url;
                     },
                  },
                  {
                     key: "destroy",
                     value: function destroy() {
                        var keepHCM =
                           arguments.length > 0 && arguments[0] !== undefined
                              ? arguments[0]
                              : false;
                        if (
                           keepHCM &&
                           _classPrivateGetter(
                              _DOMFilterFactory_brand,
                              this,
                              _get_hcmCache,
                           ).size !== 0
                        ) {
                           return;
                        }
                        if (_classPrivateFieldGet(_defs, this)) {
                           _classPrivateFieldGet(
                              _defs,
                              this,
                           ).parentNode.parentNode.remove();
                           _classPrivateFieldSet(_defs, this, null);
                        }
                        if (_classPrivateFieldGet(_cache, this)) {
                           _classPrivateFieldGet(_cache, this).clear();
                           _classPrivateFieldSet(_cache, this, null);
                        }
                        _classPrivateFieldSet(_id3, this, 0);
                     },
                  },
               ]);
            })(_base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseFilterFactory);
            function _get_cache(_this47) {
               return (
                  _classPrivateFieldGet(_cache, _this47) ||
                  _classPrivateFieldSet(_cache, _this47, new Map())
               );
            }
            function _get_hcmCache(_this48) {
               return (
                  _classPrivateFieldGet(_hcmCache, _this48) ||
                  _classPrivateFieldSet(_hcmCache, _this48, new Map())
               );
            }
            function _get_defs(_this49) {
               if (!_classPrivateFieldGet(_defs, _this49)) {
                  var div = _classPrivateFieldGet(
                     _document,
                     _this49,
                  ).createElement("div");
                  var style = div.style;
                  style.visibility = "hidden";
                  style.contain = "strict";
                  style.width = style.height = 0;
                  style.position = "absolute";
                  style.top = style.left = 0;
                  style.zIndex = -1;
                  var svg = _classPrivateFieldGet(
                     _document,
                     _this49,
                  ).createElementNS(SVG_NS, "svg");
                  svg.setAttribute("width", 0);
                  svg.setAttribute("height", 0);
                  _classPrivateFieldSet(
                     _defs,
                     _this49,
                     _classPrivateFieldGet(_document, _this49).createElementNS(
                        SVG_NS,
                        "defs",
                     ),
                  );
                  div.append(svg);
                  svg.append(_classPrivateFieldGet(_defs, _this49));
                  _classPrivateFieldGet(_document, _this49).body.append(div);
               }
               return _classPrivateFieldGet(_defs, _this49);
            }
            function _addGrayConversion(filter) {
               var feColorMatrix = _classPrivateFieldGet(
                  _document,
                  this,
               ).createElementNS(SVG_NS, "feColorMatrix");
               feColorMatrix.setAttribute("type", "matrix");
               feColorMatrix.setAttribute(
                  "values",
                  "0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0",
               );
               filter.append(feColorMatrix);
            }
            function _createFilter(id) {
               var filter = _classPrivateFieldGet(
                  _document,
                  this,
               ).createElementNS(SVG_NS, "filter");
               filter.setAttribute("color-interpolation-filters", "sRGB");
               filter.setAttribute("id", id);
               _classPrivateGetter(
                  _DOMFilterFactory_brand,
                  this,
                  _get_defs,
               ).append(filter);
               return filter;
            }
            function _appendFeFunc(feComponentTransfer, func, table) {
               var feFunc = _classPrivateFieldGet(
                  _document,
                  this,
               ).createElementNS(SVG_NS, func);
               feFunc.setAttribute("type", "discrete");
               feFunc.setAttribute("tableValues", table);
               feComponentTransfer.append(feFunc);
            }
            function _addTransferMapConversion(rTable, gTable, bTable, filter) {
               var feComponentTransfer = _classPrivateFieldGet(
                  _document,
                  this,
               ).createElementNS(SVG_NS, "feComponentTransfer");
               filter.append(feComponentTransfer);
               _assertClassBrand(
                  _DOMFilterFactory_brand,
                  this,
                  _appendFeFunc,
               ).call(this, feComponentTransfer, "feFuncR", rTable);
               _assertClassBrand(
                  _DOMFilterFactory_brand,
                  this,
                  _appendFeFunc,
               ).call(this, feComponentTransfer, "feFuncG", gTable);
               _assertClassBrand(
                  _DOMFilterFactory_brand,
                  this,
                  _appendFeFunc,
               ).call(this, feComponentTransfer, "feFuncB", bTable);
            }
            function _getRGB2(color) {
               _classPrivateGetter(
                  _DOMFilterFactory_brand,
                  this,
                  _get_defs,
               ).style.color = color;
               return _getRGB(
                  getComputedStyle(
                     _classPrivateGetter(
                        _DOMFilterFactory_brand,
                        this,
                        _get_defs,
                     ),
                  ).getPropertyValue("color"),
               );
            }
            var _DOMCanvasFactory = /*#__PURE__*/ (function (
               _base_factory_js__WEB2,
            ) {
               function _DOMCanvasFactory() {
                  var _this51;
                  var _ref66 =
                        arguments.length > 0 && arguments[0] !== undefined
                           ? arguments[0]
                           : {},
                     _ref66$ownerDocument = _ref66.ownerDocument,
                     ownerDocument =
                        _ref66$ownerDocument === void 0
                           ? globalThis.document
                           : _ref66$ownerDocument;
                  _classCallCheck(this, _DOMCanvasFactory);
                  _this51 = _callSuper(this, _DOMCanvasFactory);
                  _this51._document = ownerDocument;
                  return _this51;
               }
               _inherits(_DOMCanvasFactory, _base_factory_js__WEB2);
               return _createClass(_DOMCanvasFactory, [
                  {
                     key: "_createCanvas",
                     value: function _createCanvas(width, height) {
                        var canvas = this._document.createElement("canvas");
                        canvas.width = width;
                        canvas.height = height;
                        return canvas;
                     },
                  },
               ]);
            })(_base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseCanvasFactory);
            function _fetchData2(_x8) {
               return _fetchData3.apply(this, arguments);
            }
            function _fetchData3() {
               _fetchData3 = _asyncToGenerator(
                  /*#__PURE__*/ _regenerator().m(function _callee1(url) {
                     var type,
                        response,
                        _args10 = arguments,
                        _t9;
                     return _regenerator().w(function (_context10) {
                        while (1)
                           switch (_context10.n) {
                              case 0:
                                 type =
                                    _args10.length > 1 &&
                                    _args10[1] !== undefined
                                       ? _args10[1]
                                       : "text";
                                 if (!_isValidFetchUrl(url, document.baseURI)) {
                                    _context10.n = 7;
                                    break;
                                 }
                                 _context10.n = 1;
                                 return fetch(url);
                              case 1:
                                 response = _context10.v;
                                 if (response.ok) {
                                    _context10.n = 2;
                                    break;
                                 }
                                 throw new Error(response.statusText);
                              case 2:
                                 _t9 = type;
                                 _context10.n =
                                    _t9 === "arraybuffer"
                                       ? 3
                                       : _t9 === "blob"
                                         ? 4
                                         : _t9 === "json"
                                           ? 5
                                           : 6;
                                 break;
                              case 3:
                                 return _context10.a(2, response.arrayBuffer());
                              case 4:
                                 return _context10.a(2, response.blob());
                              case 5:
                                 return _context10.a(2, response.json());
                              case 6:
                                 return _context10.a(2, response.text());
                              case 7:
                                 return _context10.a(
                                    2,
                                    new Promise(function (resolve, reject) {
                                       var request = new XMLHttpRequest();
                                       request.open("GET", url, true);
                                       request.responseType = type;
                                       request.onreadystatechange =
                                          function () {
                                             if (
                                                request.readyState !==
                                                XMLHttpRequest.DONE
                                             ) {
                                                return;
                                             }
                                             if (
                                                request.status === 200 ||
                                                request.status === 0
                                             ) {
                                                switch (type) {
                                                   case "arraybuffer":
                                                   case "blob":
                                                   case "json":
                                                      resolve(request.response);
                                                      return;
                                                }
                                                resolve(request.responseText);
                                                return;
                                             }
                                             reject(
                                                new Error(request.statusText),
                                             );
                                          };
                                       request.send(null);
                                    }),
                                 );
                           }
                     }, _callee1);
                  }),
               );
               return _fetchData3.apply(this, arguments);
            }
            var _DOMCMapReaderFactory = /*#__PURE__*/ (function (
               _base_factory_js__WEB3,
            ) {
               function _DOMCMapReaderFactory() {
                  _classCallCheck(this, _DOMCMapReaderFactory);
                  return _callSuper(this, _DOMCMapReaderFactory, arguments);
               }
               _inherits(_DOMCMapReaderFactory, _base_factory_js__WEB3);
               return _createClass(_DOMCMapReaderFactory, [
                  {
                     key: "_fetchData",
                     value: function _fetchData(url, compressionType) {
                        return _fetchData2(
                           url,
                           this.isCompressed ? "arraybuffer" : "text",
                        ).then(function (data) {
                           return {
                              cMapData:
                                 data instanceof ArrayBuffer
                                    ? new Uint8Array(data)
                                    : (0,
                                      _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.stringToBytes)(
                                         data,
                                      ),
                              compressionType: compressionType,
                           };
                        });
                     },
                  },
               ]);
            })(
               _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseCMapReaderFactory,
            );
            var _DOMStandardFontDataFactory = /*#__PURE__*/ (function (
               _base_factory_js__WEB4,
            ) {
               function _DOMStandardFontDataFactory() {
                  _classCallCheck(this, _DOMStandardFontDataFactory);
                  return _callSuper(
                     this,
                     _DOMStandardFontDataFactory,
                     arguments,
                  );
               }
               _inherits(_DOMStandardFontDataFactory, _base_factory_js__WEB4);
               return _createClass(_DOMStandardFontDataFactory, [
                  {
                     key: "_fetchData",
                     value: function _fetchData(url) {
                        return _fetchData2(url, "arraybuffer").then(
                           function (data) {
                              return new Uint8Array(data);
                           },
                        );
                     },
                  },
               ]);
            })(
               _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseStandardFontDataFactory,
            );
            var _DOMSVGFactory = /*#__PURE__*/ (function (
               _base_factory_js__WEB5,
            ) {
               function _DOMSVGFactory() {
                  _classCallCheck(this, _DOMSVGFactory);
                  return _callSuper(this, _DOMSVGFactory, arguments);
               }
               _inherits(_DOMSVGFactory, _base_factory_js__WEB5);
               return _createClass(_DOMSVGFactory, [
                  {
                     key: "_createSVG",
                     value: function _createSVG(type) {
                        return document.createElementNS(SVG_NS, type);
                     },
                  },
               ]);
            })(_base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseSVGFactory);
            var _PageViewport = /*#__PURE__*/ (function () {
               function _PageViewport(_ref67) {
                  var viewBox = _ref67.viewBox,
                     scale = _ref67.scale,
                     rotation = _ref67.rotation,
                     _ref67$offsetX = _ref67.offsetX,
                     offsetX = _ref67$offsetX === void 0 ? 0 : _ref67$offsetX,
                     _ref67$offsetY = _ref67.offsetY,
                     offsetY = _ref67$offsetY === void 0 ? 0 : _ref67$offsetY,
                     _ref67$dontFlip = _ref67.dontFlip,
                     dontFlip =
                        _ref67$dontFlip === void 0 ? false : _ref67$dontFlip;
                  _classCallCheck(this, _PageViewport);
                  this.viewBox = viewBox;
                  this.scale = scale;
                  this.rotation = rotation;
                  this.offsetX = offsetX;
                  this.offsetY = offsetY;
                  var centerX = (viewBox[2] + viewBox[0]) / 2;
                  var centerY = (viewBox[3] + viewBox[1]) / 2;
                  var rotateA, rotateB, rotateC, rotateD;
                  rotation %= 360;
                  if (rotation < 0) {
                     rotation += 360;
                  }
                  switch (rotation) {
                     case 180:
                        rotateA = -1;
                        rotateB = 0;
                        rotateC = 0;
                        rotateD = 1;
                        break;
                     case 90:
                        rotateA = 0;
                        rotateB = 1;
                        rotateC = 1;
                        rotateD = 0;
                        break;
                     case 270:
                        rotateA = 0;
                        rotateB = -1;
                        rotateC = -1;
                        rotateD = 0;
                        break;
                     case 0:
                        rotateA = 1;
                        rotateB = 0;
                        rotateC = 0;
                        rotateD = -1;
                        break;
                     default:
                        throw new Error(
                           "PageViewport: Invalid rotation, must be a multiple of 90 degrees.",
                        );
                  }
                  if (dontFlip) {
                     rotateC = -rotateC;
                     rotateD = -rotateD;
                  }
                  var offsetCanvasX, offsetCanvasY;
                  var width, height;
                  if (rotateA === 0) {
                     offsetCanvasX =
                        Math.abs(centerY - viewBox[1]) * scale + offsetX;
                     offsetCanvasY =
                        Math.abs(centerX - viewBox[0]) * scale + offsetY;
                     width = (viewBox[3] - viewBox[1]) * scale;
                     height = (viewBox[2] - viewBox[0]) * scale;
                  } else {
                     offsetCanvasX =
                        Math.abs(centerX - viewBox[0]) * scale + offsetX;
                     offsetCanvasY =
                        Math.abs(centerY - viewBox[1]) * scale + offsetY;
                     width = (viewBox[2] - viewBox[0]) * scale;
                     height = (viewBox[3] - viewBox[1]) * scale;
                  }
                  this.transform = [
                     rotateA * scale,
                     rotateB * scale,
                     rotateC * scale,
                     rotateD * scale,
                     offsetCanvasX -
                        rotateA * scale * centerX -
                        rotateC * scale * centerY,
                     offsetCanvasY -
                        rotateB * scale * centerX -
                        rotateD * scale * centerY,
                  ];
                  this.width = width;
                  this.height = height;
               }
               return _createClass(_PageViewport, [
                  {
                     key: "rawDims",
                     get: function get() {
                        var viewBox = this.viewBox;
                        return (0,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.shadow)(
                           this,
                           "rawDims",
                           {
                              pageWidth: viewBox[2] - viewBox[0],
                              pageHeight: viewBox[3] - viewBox[1],
                              pageX: viewBox[0],
                              pageY: viewBox[1],
                           },
                        );
                     },
                  },
                  {
                     key: "clone",
                     value: function clone() {
                        var _ref68 =
                              arguments.length > 0 && arguments[0] !== undefined
                                 ? arguments[0]
                                 : {},
                           _ref68$scale = _ref68.scale,
                           scale =
                              _ref68$scale === void 0
                                 ? this.scale
                                 : _ref68$scale,
                           _ref68$rotation = _ref68.rotation,
                           rotation =
                              _ref68$rotation === void 0
                                 ? this.rotation
                                 : _ref68$rotation,
                           _ref68$offsetX = _ref68.offsetX,
                           offsetX =
                              _ref68$offsetX === void 0
                                 ? this.offsetX
                                 : _ref68$offsetX,
                           _ref68$offsetY = _ref68.offsetY,
                           offsetY =
                              _ref68$offsetY === void 0
                                 ? this.offsetY
                                 : _ref68$offsetY,
                           _ref68$dontFlip = _ref68.dontFlip,
                           dontFlip =
                              _ref68$dontFlip === void 0
                                 ? false
                                 : _ref68$dontFlip;
                        return new _PageViewport({
                           viewBox: this.viewBox.slice(),
                           scale: scale,
                           rotation: rotation,
                           offsetX: offsetX,
                           offsetY: offsetY,
                           dontFlip: dontFlip,
                        });
                     },
                  },
                  {
                     key: "convertToViewportPoint",
                     value: function convertToViewportPoint(x, y) {
                        return _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.applyTransform(
                           [x, y],
                           this.transform,
                        );
                     },
                  },
                  {
                     key: "convertToViewportRectangle",
                     value: function convertToViewportRectangle(rect) {
                        var topLeft =
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.applyTransform(
                              [rect[0], rect[1]],
                              this.transform,
                           );
                        var bottomRight =
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.applyTransform(
                              [rect[2], rect[3]],
                              this.transform,
                           );
                        return [
                           topLeft[0],
                           topLeft[1],
                           bottomRight[0],
                           bottomRight[1],
                        ];
                     },
                  },
                  {
                     key: "convertToPdfPoint",
                     value: function convertToPdfPoint(x, y) {
                        return _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.Util.applyInverseTransform(
                           [x, y],
                           this.transform,
                        );
                     },
                  },
               ]);
            })();
            var _RenderingCancelledException = /*#__PURE__*/ (function (
               _shared_util_js__WEBP3,
            ) {
               function _RenderingCancelledException(msg) {
                  var _this52;
                  var extraDelay =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : 0;
                  _classCallCheck(this, _RenderingCancelledException);
                  _this52 = _callSuper(this, _RenderingCancelledException, [
                     msg,
                     "RenderingCancelledException",
                  ]);
                  _this52.extraDelay = extraDelay;
                  return _this52;
               }
               _inherits(_RenderingCancelledException, _shared_util_js__WEBP3);
               return _createClass(_RenderingCancelledException);
            })(_shared_util_js__WEBPACK_IMPORTED_MODULE_1__.BaseException);
            function _isDataScheme(url) {
               var ii = url.length;
               var i = 0;
               while (i < ii && url[i].trim() === "") {
                  i++;
               }
               return url.substring(i, i + 5).toLowerCase() === "data:";
            }
            function _isPdfFile(filename) {
               return typeof filename === "string" && /\.pdf$/i.test(filename);
            }
            function _getFilenameFromUrl(url) {
               var onlyStripPath =
                  arguments.length > 1 && arguments[1] !== undefined
                     ? arguments[1]
                     : false;
               if (!onlyStripPath) {
                  var _url$split = url.split(/[#?]/, 1);
                  var _url$split2 = _slicedToArray(_url$split, 1);
                  url = _url$split2[0];
               }
               return url.substring(url.lastIndexOf("/") + 1);
            }
            function _getPdfFilenameFromUrl(url) {
               var defaultFilename =
                  arguments.length > 1 && arguments[1] !== undefined
                     ? arguments[1]
                     : "document.pdf";
               if (typeof url !== "string") {
                  return defaultFilename;
               }
               if (_isDataScheme(url)) {
                  (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.warn)(
                     'getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.',
                  );
                  return defaultFilename;
               }
               var reURI =
                  /^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/;
               var reFilename = /[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i;
               var splitURI = reURI.exec(url);
               var suggestedFilename =
                  reFilename.exec(splitURI[1]) ||
                  reFilename.exec(splitURI[2]) ||
                  reFilename.exec(splitURI[3]);
               if (suggestedFilename) {
                  suggestedFilename = suggestedFilename[0];
                  if (suggestedFilename.includes("%")) {
                     try {
                        suggestedFilename = reFilename.exec(
                           decodeURIComponent(suggestedFilename),
                        )[0];
                     } catch (_unused6) {}
                  }
               }
               return suggestedFilename || defaultFilename;
            }
            var _StatTimer = /*#__PURE__*/ (function () {
               function _StatTimer() {
                  _classCallCheck(this, _StatTimer);
                  _defineProperty(this, "started", Object.create(null));
                  _defineProperty(this, "times", []);
               }
               return _createClass(_StatTimer, [
                  {
                     key: "time",
                     value: function time(name) {
                        if (name in this.started) {
                           (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.warn)(
                              "Timer is already running for ".concat(name),
                           );
                        }
                        this.started[name] = Date.now();
                     },
                  },
                  {
                     key: "timeEnd",
                     value: function timeEnd(name) {
                        if (!(name in this.started)) {
                           (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.warn)(
                              "Timer has not been started for ".concat(name),
                           );
                        }
                        this.times.push({
                           name: name,
                           start: this.started[name],
                           end: Date.now(),
                        });
                        delete this.started[name];
                     },
                  },
                  {
                     key: "toString",
                     value: function toString() {
                        var outBuf = [];
                        var longest = 0;
                        var _iterator58 = _createForOfIteratorHelper(
                              this.times,
                           ),
                           _step58;
                        try {
                           for (
                              _iterator58.s();
                              !(_step58 = _iterator58.n()).done;

                           ) {
                              var name = _step58.value.name;
                              longest = Math.max(name.length, longest);
                           }
                        } catch (err) {
                           _iterator58.e(err);
                        } finally {
                           _iterator58.f();
                        }
                        var _iterator59 = _createForOfIteratorHelper(
                              this.times,
                           ),
                           _step59;
                        try {
                           for (
                              _iterator59.s();
                              !(_step59 = _iterator59.n()).done;

                           ) {
                              var _step59$value = _step59.value,
                                 _name = _step59$value.name,
                                 start = _step59$value.start,
                                 end = _step59$value.end;
                              outBuf.push(
                                 ""
                                    .concat(_name.padEnd(longest), " ")
                                    .concat(end - start, "ms\n"),
                              );
                           }
                        } catch (err) {
                           _iterator59.e(err);
                        } finally {
                           _iterator59.f();
                        }
                        return outBuf.join("");
                     },
                  },
               ]);
            })();
            function _isValidFetchUrl(url, baseUrl) {
               try {
                  var _ref69 = baseUrl ? new URL(url, baseUrl) : new URL(url),
                     protocol = _ref69.protocol;
                  return protocol === "http:" || protocol === "https:";
               } catch (_unused7) {
                  return false;
               }
            }
            function _noContextMenu(e) {
               e.preventDefault();
            }
            function deprecated(details) {
               console.log("Deprecated API usage: " + details);
            }
            var pdfDateStringRegex;
            var _PDFDateString = /*#__PURE__*/ (function () {
               function _PDFDateString() {
                  _classCallCheck(this, _PDFDateString);
               }
               return _createClass(_PDFDateString, null, [
                  {
                     key: "toDateObject",
                     value: function toDateObject(input) {
                        if (!input || typeof input !== "string") {
                           return null;
                        }
                        pdfDateStringRegex ||
                           (pdfDateStringRegex = new RegExp(
                              "^D:" +
                                 "(\\d{4})" +
                                 "(\\d{2})?" +
                                 "(\\d{2})?" +
                                 "(\\d{2})?" +
                                 "(\\d{2})?" +
                                 "(\\d{2})?" +
                                 "([Z|+|-])?" +
                                 "(\\d{2})?" +
                                 "'?" +
                                 "(\\d{2})?" +
                                 "'?",
                           ));
                        var matches = pdfDateStringRegex.exec(input);
                        if (!matches) {
                           return null;
                        }
                        var year = parseInt(matches[1], 10);
                        var month = parseInt(matches[2], 10);
                        month = month >= 1 && month <= 12 ? month - 1 : 0;
                        var day = parseInt(matches[3], 10);
                        day = day >= 1 && day <= 31 ? day : 1;
                        var hour = parseInt(matches[4], 10);
                        hour = hour >= 0 && hour <= 23 ? hour : 0;
                        var minute = parseInt(matches[5], 10);
                        minute = minute >= 0 && minute <= 59 ? minute : 0;
                        var second = parseInt(matches[6], 10);
                        second = second >= 0 && second <= 59 ? second : 0;
                        var universalTimeRelation = matches[7] || "Z";
                        var offsetHour = parseInt(matches[8], 10);
                        offsetHour =
                           offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;
                        var offsetMinute = parseInt(matches[9], 10) || 0;
                        offsetMinute =
                           offsetMinute >= 0 && offsetMinute <= 59
                              ? offsetMinute
                              : 0;
                        if (universalTimeRelation === "-") {
                           hour += offsetHour;
                           minute += offsetMinute;
                        } else if (universalTimeRelation === "+") {
                           hour -= offsetHour;
                           minute -= offsetMinute;
                        }
                        return new Date(
                           Date.UTC(year, month, day, hour, minute, second),
                        );
                     },
                  },
               ]);
            })();
            function _getXfaPageViewport(xfaPage, _ref70) {
               var _ref70$scale = _ref70.scale,
                  scale = _ref70$scale === void 0 ? 1 : _ref70$scale,
                  _ref70$rotation = _ref70.rotation,
                  rotation = _ref70$rotation === void 0 ? 0 : _ref70$rotation;
               var _xfaPage$attributes$s = xfaPage.attributes.style,
                  width = _xfaPage$attributes$s.width,
                  height = _xfaPage$attributes$s.height;
               var viewBox = [0, 0, parseInt(width), parseInt(height)];
               return new _PageViewport({
                  viewBox: viewBox,
                  scale: scale,
                  rotation: rotation,
               });
            }
            function _getRGB(color) {
               if (color.startsWith("#")) {
                  var colorRGB = parseInt(color.slice(1), 16);
                  return [
                     (colorRGB & 0xff0000) >> 16,
                     (colorRGB & 0x00ff00) >> 8,
                     colorRGB & 0x0000ff,
                  ];
               }
               if (color.startsWith("rgb(")) {
                  return color
                     .slice(4, -1)
                     .split(",")
                     .map(function (x) {
                        return parseInt(x);
                     });
               }
               if (color.startsWith("rgba(")) {
                  return color
                     .slice(5, -1)
                     .split(",")
                     .map(function (x) {
                        return parseInt(x);
                     })
                     .slice(0, 3);
               }
               (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.warn)(
                  'Not a valid color format: "'.concat(color, '"'),
               );
               return [0, 0, 0];
            }
            function _getColorValues(colors) {
               var span = document.createElement("span");
               span.style.visibility = "hidden";
               document.body.append(span);
               var _iterator60 = _createForOfIteratorHelper(colors.keys()),
                  _step60;
               try {
                  for (_iterator60.s(); !(_step60 = _iterator60.n()).done; ) {
                     var name = _step60.value;
                     span.style.color = name;
                     var computedColor = window.getComputedStyle(span).color;
                     colors.set(name, _getRGB(computedColor));
                  }
               } catch (err) {
                  _iterator60.e(err);
               } finally {
                  _iterator60.f();
               }
               span.remove();
            }
            function _getCurrentTransform(ctx) {
               var _ctx$getTransform = ctx.getTransform(),
                  a = _ctx$getTransform.a,
                  b = _ctx$getTransform.b,
                  c = _ctx$getTransform.c,
                  d = _ctx$getTransform.d,
                  e = _ctx$getTransform.e,
                  f = _ctx$getTransform.f;
               return [a, b, c, d, e, f];
            }
            function _getCurrentTransformInverse(ctx) {
               var _ctx$getTransform$inv = ctx.getTransform().invertSelf(),
                  a = _ctx$getTransform$inv.a,
                  b = _ctx$getTransform$inv.b,
                  c = _ctx$getTransform$inv.c,
                  d = _ctx$getTransform$inv.d,
                  e = _ctx$getTransform$inv.e,
                  f = _ctx$getTransform$inv.f;
               return [a, b, c, d, e, f];
            }
            function _setLayerDimensions(div, viewport) {
               var mustFlip =
                  arguments.length > 2 && arguments[2] !== undefined
                     ? arguments[2]
                     : false;
               var mustRotate =
                  arguments.length > 3 && arguments[3] !== undefined
                     ? arguments[3]
                     : true;
               if (viewport instanceof _PageViewport) {
                  var _viewport$rawDims2 = viewport.rawDims,
                     pageWidth = _viewport$rawDims2.pageWidth,
                     pageHeight = _viewport$rawDims2.pageHeight;
                  var style = div.style;
                  var useRound =
                     _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.FeatureTest
                        .isCSSRoundSupported;
                  var w = "var(--scale-factor) * ".concat(pageWidth, "px"),
                     h = "var(--scale-factor) * ".concat(pageHeight, "px");
                  var widthStr = useRound
                        ? "round(".concat(w, ", 1px)")
                        : "calc(".concat(w, ")"),
                     heightStr = useRound
                        ? "round(".concat(h, ", 1px)")
                        : "calc(".concat(h, ")");
                  if (!mustFlip || viewport.rotation % 180 === 0) {
                     style.width = widthStr;
                     style.height = heightStr;
                  } else {
                     style.width = heightStr;
                     style.height = widthStr;
                  }
               }
               if (mustRotate) {
                  div.setAttribute("data-main-rotation", viewport.rotation);
               }
            } /***/
         },
         /***/ 47: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            var _DrawLayer2;
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ DrawLayer: function DrawLayer() {
                  return /* binding */ _DrawLayer;
               } /* harmony export */,
            });
            /* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(419);
            /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_1__ =
               __webpack_require__(292);
            var _parent2 = /*#__PURE__*/ new WeakMap();
            var _id4 = /*#__PURE__*/ new WeakMap();
            var _mapping = /*#__PURE__*/ new WeakMap();
            var _toUpdate = /*#__PURE__*/ new WeakMap();
            var _DrawLayer_brand = /*#__PURE__*/ new WeakSet();
            var _DrawLayer = /*#__PURE__*/ (function () {
               function _DrawLayer(_ref71) {
                  var pageIndex = _ref71.pageIndex;
                  _classCallCheck(this, _DrawLayer);
                  _classPrivateMethodInitSpec(this, _DrawLayer_brand);
                  _classPrivateFieldInitSpec(this, _parent2, null);
                  _classPrivateFieldInitSpec(this, _id4, 0);
                  _classPrivateFieldInitSpec(this, _mapping, new Map());
                  _classPrivateFieldInitSpec(this, _toUpdate, new Map());
                  this.pageIndex = pageIndex;
               }
               return _createClass(
                  _DrawLayer,
                  [
                     {
                        key: "setParent",
                        value: function setParent(parent) {
                           if (!_classPrivateFieldGet(_parent2, this)) {
                              _classPrivateFieldSet(_parent2, this, parent);
                              return;
                           }
                           if (
                              _classPrivateFieldGet(_parent2, this) !== parent
                           ) {
                              if (
                                 _classPrivateFieldGet(_mapping, this).size > 0
                              ) {
                                 var _iterator61 = _createForOfIteratorHelper(
                                       _classPrivateFieldGet(
                                          _mapping,
                                          this,
                                       ).values(),
                                    ),
                                    _step61;
                                 try {
                                    for (
                                       _iterator61.s();
                                       !(_step61 = _iterator61.n()).done;

                                    ) {
                                       var root = _step61.value;
                                       root.remove();
                                       parent.append(root);
                                    }
                                 } catch (err) {
                                    _iterator61.e(err);
                                 } finally {
                                    _iterator61.f();
                                 }
                              }
                              _classPrivateFieldSet(_parent2, this, parent);
                           }
                        },
                     },
                     {
                        key: "highlight",
                        value: function highlight(outlines, color, opacity) {
                           var _this$id3, _this$id4;
                           var isPathUpdatable =
                              arguments.length > 3 && arguments[3] !== undefined
                                 ? arguments[3]
                                 : false;
                           var id =
                              (_classPrivateFieldSet(
                                 _id4,
                                 this,
                                 ((_this$id3 = _classPrivateFieldGet(
                                    _id4,
                                    this,
                                 )),
                                 (_this$id4 = _this$id3++),
                                 _this$id3),
                              ),
                              _this$id4);
                           var root = _assertClassBrand(
                              _DrawLayer_brand,
                              this,
                              _createSVG2,
                           ).call(this, outlines.box);
                           root.classList.add("highlight");
                           if (outlines.free) {
                              root.classList.add("free");
                           }
                           var defs =
                              _DrawLayer._svgFactory.createElement("defs");
                           root.append(defs);
                           var path =
                              _DrawLayer._svgFactory.createElement("path");
                           defs.append(path);
                           var pathId = "path_p"
                              .concat(this.pageIndex, "_")
                              .concat(id);
                           path.setAttribute("id", pathId);
                           path.setAttribute("d", outlines.toSVGPath());
                           if (isPathUpdatable) {
                              _classPrivateFieldGet(_toUpdate, this).set(
                                 id,
                                 path,
                              );
                           }
                           var clipPathId = _assertClassBrand(
                              _DrawLayer_brand,
                              this,
                              _createClipPath,
                           ).call(this, defs, pathId);
                           var use =
                              _DrawLayer._svgFactory.createElement("use");
                           root.append(use);
                           root.setAttribute("fill", color);
                           root.setAttribute("fill-opacity", opacity);
                           use.setAttribute("href", "#".concat(pathId));
                           _classPrivateFieldGet(_mapping, this).set(id, root);
                           return {
                              id: id,
                              clipPathId: "url(#".concat(clipPathId, ")"),
                           };
                        },
                     },
                     {
                        key: "highlightOutline",
                        value: function highlightOutline(outlines) {
                           var _this$id5, _this$id6;
                           var id =
                              (_classPrivateFieldSet(
                                 _id4,
                                 this,
                                 ((_this$id5 = _classPrivateFieldGet(
                                    _id4,
                                    this,
                                 )),
                                 (_this$id6 = _this$id5++),
                                 _this$id5),
                              ),
                              _this$id6);
                           var root = _assertClassBrand(
                              _DrawLayer_brand,
                              this,
                              _createSVG2,
                           ).call(this, outlines.box);
                           root.classList.add("highlightOutline");
                           var defs =
                              _DrawLayer._svgFactory.createElement("defs");
                           root.append(defs);
                           var path =
                              _DrawLayer._svgFactory.createElement("path");
                           defs.append(path);
                           var pathId = "path_p"
                              .concat(this.pageIndex, "_")
                              .concat(id);
                           path.setAttribute("id", pathId);
                           path.setAttribute("d", outlines.toSVGPath());
                           path.setAttribute(
                              "vector-effect",
                              "non-scaling-stroke",
                           );
                           var maskId;
                           if (outlines.free) {
                              root.classList.add("free");
                              var mask =
                                 _DrawLayer._svgFactory.createElement("mask");
                              defs.append(mask);
                              maskId = "mask_p"
                                 .concat(this.pageIndex, "_")
                                 .concat(id);
                              mask.setAttribute("id", maskId);
                              mask.setAttribute(
                                 "maskUnits",
                                 "objectBoundingBox",
                              );
                              var rect =
                                 _DrawLayer._svgFactory.createElement("rect");
                              mask.append(rect);
                              rect.setAttribute("width", "1");
                              rect.setAttribute("height", "1");
                              rect.setAttribute("fill", "white");
                              var use =
                                 _DrawLayer._svgFactory.createElement("use");
                              mask.append(use);
                              use.setAttribute("href", "#".concat(pathId));
                              use.setAttribute("stroke", "none");
                              use.setAttribute("fill", "black");
                              use.setAttribute("fill-rule", "nonzero");
                              use.classList.add("mask");
                           }
                           var use1 =
                              _DrawLayer._svgFactory.createElement("use");
                           root.append(use1);
                           use1.setAttribute("href", "#".concat(pathId));
                           if (maskId) {
                              use1.setAttribute(
                                 "mask",
                                 "url(#".concat(maskId, ")"),
                              );
                           }
                           var use2 = use1.cloneNode();
                           root.append(use2);
                           use1.classList.add("mainOutline");
                           use2.classList.add("secondaryOutline");
                           _classPrivateFieldGet(_mapping, this).set(id, root);
                           return id;
                        },
                     },
                     {
                        key: "finalizeLine",
                        value: function finalizeLine(id, line) {
                           var path = _classPrivateFieldGet(
                              _toUpdate,
                              this,
                           ).get(id);
                           _classPrivateFieldGet(_toUpdate, this)["delete"](id);
                           this.updateBox(id, line.box);
                           path.setAttribute("d", line.toSVGPath());
                        },
                     },
                     {
                        key: "updateLine",
                        value: function updateLine(id, line) {
                           var root = _classPrivateFieldGet(_mapping, this).get(
                              id,
                           );
                           var defs = root.firstChild;
                           var path = defs.firstChild;
                           path.setAttribute("d", line.toSVGPath());
                        },
                     },
                     {
                        key: "removeFreeHighlight",
                        value: function removeFreeHighlight(id) {
                           this.remove(id);
                           _classPrivateFieldGet(_toUpdate, this)["delete"](id);
                        },
                     },
                     {
                        key: "updatePath",
                        value: function updatePath(id, line) {
                           _classPrivateFieldGet(_toUpdate, this)
                              .get(id)
                              .setAttribute("d", line.toSVGPath());
                        },
                     },
                     {
                        key: "updateBox",
                        value: function updateBox(id, box) {
                           _setBox.call(
                              _DrawLayer,
                              _classPrivateFieldGet(_mapping, this).get(id),
                              box,
                           );
                        },
                     },
                     {
                        key: "show",
                        value: function show(id, visible) {
                           _classPrivateFieldGet(_mapping, this)
                              .get(id)
                              .classList.toggle("hidden", !visible);
                        },
                     },
                     {
                        key: "rotate",
                        value: function rotate(id, angle) {
                           _classPrivateFieldGet(_mapping, this)
                              .get(id)
                              .setAttribute("data-main-rotation", angle);
                        },
                     },
                     {
                        key: "changeColor",
                        value: function changeColor(id, color) {
                           _classPrivateFieldGet(_mapping, this)
                              .get(id)
                              .setAttribute("fill", color);
                        },
                     },
                     {
                        key: "changeOpacity",
                        value: function changeOpacity(id, opacity) {
                           _classPrivateFieldGet(_mapping, this)
                              .get(id)
                              .setAttribute("fill-opacity", opacity);
                        },
                     },
                     {
                        key: "addClass",
                        value: function addClass(id, className) {
                           _classPrivateFieldGet(_mapping, this)
                              .get(id)
                              .classList.add(className);
                        },
                     },
                     {
                        key: "removeClass",
                        value: function removeClass(id, className) {
                           _classPrivateFieldGet(_mapping, this)
                              .get(id)
                              .classList.remove(className);
                        },
                     },
                     {
                        key: "remove",
                        value: function remove(id) {
                           if (_classPrivateFieldGet(_parent2, this) === null) {
                              return;
                           }
                           _classPrivateFieldGet(_mapping, this)
                              .get(id)
                              .remove();
                           _classPrivateFieldGet(_mapping, this)["delete"](id);
                        },
                     },
                     {
                        key: "destroy",
                        value: function destroy() {
                           _classPrivateFieldSet(_parent2, this, null);
                           var _iterator62 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_mapping, this).values(),
                              ),
                              _step62;
                           try {
                              for (
                                 _iterator62.s();
                                 !(_step62 = _iterator62.n()).done;

                              ) {
                                 var root = _step62.value;
                                 root.remove();
                              }
                           } catch (err) {
                              _iterator62.e(err);
                           } finally {
                              _iterator62.f();
                           }
                           _classPrivateFieldGet(_mapping, this).clear();
                        },
                     },
                  ],
                  [
                     {
                        key: "_svgFactory",
                        get: function get() {
                           return (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_1__.shadow)(
                              this,
                              "_svgFactory",
                              new _display_utils_js__WEBPACK_IMPORTED_MODULE_0__.DOMSVGFactory(),
                           );
                        },
                     },
                  ],
               );
            })();
            /***/ _DrawLayer2 = _DrawLayer;
            function _setBox(element) {
               var _ref72 =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : {},
                  _ref72$x = _ref72.x,
                  x = _ref72$x === void 0 ? 0 : _ref72$x,
                  _ref72$y = _ref72.y,
                  y = _ref72$y === void 0 ? 0 : _ref72$y,
                  _ref72$width = _ref72.width,
                  width = _ref72$width === void 0 ? 1 : _ref72$width,
                  _ref72$height = _ref72.height,
                  height = _ref72$height === void 0 ? 1 : _ref72$height;
               var style = element.style;
               style.top = "".concat(100 * y, "%");
               style.left = "".concat(100 * x, "%");
               style.width = "".concat(100 * width, "%");
               style.height = "".concat(100 * height, "%");
            }
            function _createSVG2(box) {
               var svg = _DrawLayer2._svgFactory.create(1, 1, true);
               _classPrivateFieldGet(_parent2, this).append(svg);
               svg.setAttribute("aria-hidden", true);
               _setBox.call(_DrawLayer2, svg, box);
               return svg;
            }
            function _createClipPath(defs, pathId) {
               var clipPath = _DrawLayer2._svgFactory.createElement("clipPath");
               defs.append(clipPath);
               var clipPathId = "clip_".concat(pathId);
               clipPath.setAttribute("id", clipPathId);
               clipPath.setAttribute("clipPathUnits", "objectBoundingBox");
               var clipPathUse = _DrawLayer2._svgFactory.createElement("use");
               clipPath.append(clipPathUse);
               clipPathUse.setAttribute("href", "#".concat(pathId));
               clipPathUse.classList.add("clip");
               return clipPathId;
            }
         },
         /***/ 731: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            var _FreeTextEditor, _HighlightEditor, _InkEditor, _StampEditor; // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
               AnnotationEditorLayer: function AnnotationEditorLayer() {
                  return /* binding */ _AnnotationEditorLayer;
               },
            }); // EXTERNAL MODULE: ./src/shared/util.js
            var util = __webpack_require__(292); // EXTERNAL MODULE: ./src/display/editor/editor.js + 1 modules
            var editor_editor = __webpack_require__(310); // EXTERNAL MODULE: ./src/display/editor/tools.js
            var tools = __webpack_require__(830); // EXTERNAL MODULE: ./src/display/annotation_layer.js + 1 modules
            var annotation_layer = __webpack_require__(976); // CONCATENATED MODULE: ./src/display/editor/freetext.js
            var EOL_PATTERN = /\r\n?|\n/g;
            var _boundEditorDivBlur = /*#__PURE__*/ new WeakMap();
            var _boundEditorDivFocus = /*#__PURE__*/ new WeakMap();
            var _boundEditorDivInput = /*#__PURE__*/ new WeakMap();
            var _boundEditorDivKeydown = /*#__PURE__*/ new WeakMap();
            var _boundEditorDivPaste = /*#__PURE__*/ new WeakMap();
            var _color2 = /*#__PURE__*/ new WeakMap();
            var _content = /*#__PURE__*/ new WeakMap();
            var _editorDivId = /*#__PURE__*/ new WeakMap();
            var _fontSize = /*#__PURE__*/ new WeakMap();
            var _initialData = /*#__PURE__*/ new WeakMap();
            var _FreeTextEditor_brand = /*#__PURE__*/ new WeakSet();
            var FreeTextEditor = /*#__PURE__*/ (function (
               _editor_editor$Annota,
            ) {
               function FreeTextEditor(params) {
                  var _this53;
                  _classCallCheck(this, FreeTextEditor);
                  _this53 = _callSuper(this, FreeTextEditor, [
                     _objectSpread(
                        _objectSpread({}, params),
                        {},
                        { name: "freeTextEditor" },
                     ),
                  ]);
                  _classPrivateMethodInitSpec(_this53, _FreeTextEditor_brand);
                  _classPrivateFieldInitSpec(
                     _this53,
                     _boundEditorDivBlur,
                     _this53.editorDivBlur.bind(_this53),
                  );
                  _classPrivateFieldInitSpec(
                     _this53,
                     _boundEditorDivFocus,
                     _this53.editorDivFocus.bind(_this53),
                  );
                  _classPrivateFieldInitSpec(
                     _this53,
                     _boundEditorDivInput,
                     _this53.editorDivInput.bind(_this53),
                  );
                  _classPrivateFieldInitSpec(
                     _this53,
                     _boundEditorDivKeydown,
                     _this53.editorDivKeydown.bind(_this53),
                  );
                  _classPrivateFieldInitSpec(
                     _this53,
                     _boundEditorDivPaste,
                     _this53.editorDivPaste.bind(_this53),
                  );
                  _classPrivateFieldInitSpec(_this53, _color2, void 0);
                  _classPrivateFieldInitSpec(_this53, _content, "");
                  _classPrivateFieldInitSpec(
                     _this53,
                     _editorDivId,
                     "".concat(_this53.id, "-editor"),
                  );
                  _classPrivateFieldInitSpec(_this53, _fontSize, void 0);
                  _classPrivateFieldInitSpec(_this53, _initialData, null);
                  _classPrivateFieldSet(
                     _color2,
                     _this53,
                     params.color ||
                        FreeTextEditor._defaultColor ||
                        editor_editor.AnnotationEditor._defaultLineColor,
                  );
                  _classPrivateFieldSet(
                     _fontSize,
                     _this53,
                     params.fontSize || FreeTextEditor._defaultFontSize,
                  );
                  return _this53;
               }
               _inherits(FreeTextEditor, _editor_editor$Annota);
               return _createClass(
                  FreeTextEditor,
                  [
                     {
                        key: "updateParams",
                        value: function updateParams(type, value) {
                           switch (type) {
                              case util.AnnotationEditorParamsType
                                 .FREETEXT_SIZE:
                                 _assertClassBrand(
                                    _FreeTextEditor_brand,
                                    this,
                                    _updateFontSize,
                                 ).call(this, value);
                                 break;
                              case util.AnnotationEditorParamsType
                                 .FREETEXT_COLOR:
                                 _assertClassBrand(
                                    _FreeTextEditor_brand,
                                    this,
                                    _updateColor,
                                 ).call(this, value);
                                 break;
                           }
                        },
                     },
                     {
                        key: "propertiesToUpdate",
                        get: function get() {
                           return [
                              [
                                 util.AnnotationEditorParamsType.FREETEXT_SIZE,
                                 _classPrivateFieldGet(_fontSize, this),
                              ],
                              [
                                 util.AnnotationEditorParamsType.FREETEXT_COLOR,
                                 _classPrivateFieldGet(_color2, this),
                              ],
                           ];
                        },
                     },
                     {
                        key: "_translateEmpty",
                        value: function _translateEmpty(x, y) {
                           this._uiManager.translateSelectedEditors(x, y, true);
                        },
                     },
                     {
                        key: "getInitialTranslation",
                        value: function getInitialTranslation() {
                           var scale = this.parentScale;
                           return [
                              -FreeTextEditor._internalPadding * scale,
                              -(
                                 FreeTextEditor._internalPadding +
                                 _classPrivateFieldGet(_fontSize, this)
                              ) * scale,
                           ];
                        },
                     },
                     {
                        key: "rebuild",
                        value: function rebuild() {
                           if (!this.parent) {
                              return;
                           }
                           _superPropGet(
                              FreeTextEditor,
                              "rebuild",
                              this,
                              3,
                           )([]);
                           if (this.div === null) {
                              return;
                           }
                           if (!this.isAttachedToDOM) {
                              this.parent.add(this);
                           }
                        },
                     },
                     {
                        key: "enableEditMode",
                        value: function enableEditMode() {
                           if (this.isInEditMode()) {
                              return;
                           }
                           this.parent.setEditingState(false);
                           this.parent.updateToolbar(
                              util.AnnotationEditorType.FREETEXT,
                           );
                           _superPropGet(
                              FreeTextEditor,
                              "enableEditMode",
                              this,
                              3,
                           )([]);
                           this.overlayDiv.classList.remove("enabled");
                           this.editorDiv.contentEditable = true;
                           this._isDraggable = false;
                           this.div.removeAttribute("aria-activedescendant");
                           this.editorDiv.addEventListener(
                              "keydown",
                              _classPrivateFieldGet(
                                 _boundEditorDivKeydown,
                                 this,
                              ),
                           );
                           this.editorDiv.addEventListener(
                              "focus",
                              _classPrivateFieldGet(_boundEditorDivFocus, this),
                           );
                           this.editorDiv.addEventListener(
                              "blur",
                              _classPrivateFieldGet(_boundEditorDivBlur, this),
                           );
                           this.editorDiv.addEventListener(
                              "input",
                              _classPrivateFieldGet(_boundEditorDivInput, this),
                           );
                           this.editorDiv.addEventListener(
                              "paste",
                              _classPrivateFieldGet(_boundEditorDivPaste, this),
                           );
                        },
                     },
                     {
                        key: "disableEditMode",
                        value: function disableEditMode() {
                           if (!this.isInEditMode()) {
                              return;
                           }
                           this.parent.setEditingState(true);
                           _superPropGet(
                              FreeTextEditor,
                              "disableEditMode",
                              this,
                              3,
                           )([]);
                           this.overlayDiv.classList.add("enabled");
                           this.editorDiv.contentEditable = false;
                           this.div.setAttribute(
                              "aria-activedescendant",
                              _classPrivateFieldGet(_editorDivId, this),
                           );
                           this._isDraggable = true;
                           this.editorDiv.removeEventListener(
                              "keydown",
                              _classPrivateFieldGet(
                                 _boundEditorDivKeydown,
                                 this,
                              ),
                           );
                           this.editorDiv.removeEventListener(
                              "focus",
                              _classPrivateFieldGet(_boundEditorDivFocus, this),
                           );
                           this.editorDiv.removeEventListener(
                              "blur",
                              _classPrivateFieldGet(_boundEditorDivBlur, this),
                           );
                           this.editorDiv.removeEventListener(
                              "input",
                              _classPrivateFieldGet(_boundEditorDivInput, this),
                           );
                           this.editorDiv.removeEventListener(
                              "paste",
                              _classPrivateFieldGet(_boundEditorDivPaste, this),
                           );
                           this.div.focus({ preventScroll: true });
                           this.isEditing = false;
                           this.parent.div.classList.add("freetextEditing");
                        },
                     },
                     {
                        key: "focusin",
                        value: function focusin(event) {
                           if (!this._focusEventsAllowed) {
                              return;
                           }
                           _superPropGet(
                              FreeTextEditor,
                              "focusin",
                              this,
                              3,
                           )([event]);
                           if (event.target !== this.editorDiv) {
                              this.editorDiv.focus();
                           }
                        },
                     },
                     {
                        key: "onceAdded",
                        value: function onceAdded() {
                           var _this$_initialOptions;
                           if (this.width) {
                              return;
                           }
                           this.enableEditMode();
                           this.editorDiv.focus();
                           if (
                              (_this$_initialOptions = this._initialOptions) !==
                                 null &&
                              _this$_initialOptions !== void 0 &&
                              _this$_initialOptions.isCentered
                           ) {
                              this.center();
                           }
                           this._initialOptions = null;
                        },
                     },
                     {
                        key: "isEmpty",
                        value: function isEmpty() {
                           return (
                              !this.editorDiv ||
                              this.editorDiv.innerText.trim() === ""
                           );
                        },
                     },
                     {
                        key: "remove",
                        value: function remove() {
                           this.isEditing = false;
                           if (this.parent) {
                              this.parent.setEditingState(true);
                              this.parent.div.classList.add("freetextEditing");
                           }
                           _superPropGet(FreeTextEditor, "remove", this, 3)([]);
                        },
                     },
                     {
                        key: "commit",
                        value: function commit() {
                           var _this54 = this;
                           if (!this.isInEditMode()) {
                              return;
                           }
                           _superPropGet(FreeTextEditor, "commit", this, 3)([]);
                           this.disableEditMode();
                           var savedText = _classPrivateFieldGet(
                              _content,
                              this,
                           );
                           var newText = _classPrivateFieldSet(
                              _content,
                              this,
                              _assertClassBrand(
                                 _FreeTextEditor_brand,
                                 this,
                                 _extractText,
                              )
                                 .call(this)
                                 .trimEnd(),
                           );
                           if (savedText === newText) {
                              return;
                           }
                           var setText = function setText(text) {
                              _classPrivateFieldSet(_content, _this54, text);
                              if (!text) {
                                 _this54.remove();
                                 return;
                              }
                              _assertClassBrand(
                                 _FreeTextEditor_brand,
                                 _this54,
                                 _setContent,
                              ).call(_this54);
                              _this54._uiManager.rebuild(_this54);
                              _assertClassBrand(
                                 _FreeTextEditor_brand,
                                 _this54,
                                 _setEditorDimensions,
                              ).call(_this54);
                           };
                           this.addCommands({
                              cmd: function cmd() {
                                 setText(newText);
                              },
                              undo: function undo() {
                                 setText(savedText);
                              },
                              mustExec: false,
                           });
                           _assertClassBrand(
                              _FreeTextEditor_brand,
                              this,
                              _setEditorDimensions,
                           ).call(this);
                        },
                     },
                     {
                        key: "shouldGetKeyboardEvents",
                        value: function shouldGetKeyboardEvents() {
                           return this.isInEditMode();
                        },
                     },
                     {
                        key: "enterInEditMode",
                        value: function enterInEditMode() {
                           this.enableEditMode();
                           this.editorDiv.focus();
                        },
                     },
                     {
                        key: "dblclick",
                        value: function dblclick(event) {
                           this.enterInEditMode();
                        },
                     },
                     {
                        key: "keydown",
                        value: function keydown(event) {
                           if (
                              event.target === this.div &&
                              event.key === "Enter"
                           ) {
                              this.enterInEditMode();
                              event.preventDefault();
                           }
                        },
                     },
                     {
                        key: "editorDivKeydown",
                        value: function editorDivKeydown(event) {
                           FreeTextEditor._keyboardManager.exec(this, event);
                        },
                     },
                     {
                        key: "editorDivFocus",
                        value: function editorDivFocus(event) {
                           this.isEditing = true;
                        },
                     },
                     {
                        key: "editorDivBlur",
                        value: function editorDivBlur(event) {
                           this.isEditing = false;
                        },
                     },
                     {
                        key: "editorDivInput",
                        value: function editorDivInput(event) {
                           this.parent.div.classList.toggle(
                              "freetextEditing",
                              this.isEmpty(),
                           );
                        },
                     },
                     {
                        key: "disableEditing",
                        value: function disableEditing() {
                           this.editorDiv.setAttribute("role", "comment");
                           this.editorDiv.removeAttribute("aria-multiline");
                        },
                     },
                     {
                        key: "enableEditing",
                        value: function enableEditing() {
                           this.editorDiv.setAttribute("role", "textbox");
                           this.editorDiv.setAttribute("aria-multiline", true);
                        },
                     },
                     {
                        key: "render",
                        value: function render() {
                           var _this55 = this;
                           if (this.div) {
                              return this.div;
                           }
                           var baseX, baseY;
                           if (this.width) {
                              baseX = this.x;
                              baseY = this.y;
                           }
                           _superPropGet(FreeTextEditor, "render", this, 3)([]);
                           this.editorDiv = document.createElement("div");
                           this.editorDiv.className = "internal";
                           this.editorDiv.setAttribute(
                              "id",
                              _classPrivateFieldGet(_editorDivId, this),
                           );
                           this.editorDiv.setAttribute(
                              "data-l10n-id",
                              "pdfjs-free-text",
                           );
                           this.enableEditing();
                           editor_editor.AnnotationEditor._l10nPromise
                              .get("pdfjs-free-text-default-content")
                              .then(function (msg) {
                                 var _this55$editorDiv;
                                 return (_this55$editorDiv =
                                    _this55.editorDiv) === null ||
                                    _this55$editorDiv === void 0
                                    ? void 0
                                    : _this55$editorDiv.setAttribute(
                                         "default-content",
                                         msg,
                                      );
                              });
                           this.editorDiv.contentEditable = true;
                           var style = this.editorDiv.style;
                           style.fontSize = "calc(".concat(
                              _classPrivateFieldGet(_fontSize, this),
                              "px * var(--scale-factor))",
                           );
                           style.color = _classPrivateFieldGet(_color2, this);
                           this.div.append(this.editorDiv);
                           this.overlayDiv = document.createElement("div");
                           this.overlayDiv.classList.add("overlay", "enabled");
                           this.div.append(this.overlayDiv);
                           (0, tools.bindEvents)(this, this.div, [
                              "dblclick",
                              "keydown",
                           ]);
                           if (this.width) {
                              var _this$parentDimension = _slicedToArray(
                                    this.parentDimensions,
                                    2,
                                 ),
                                 parentWidth = _this$parentDimension[0],
                                 parentHeight = _this$parentDimension[1];
                              if (this.annotationElementId) {
                                 var _classPrivateFieldGet1 =
                                       _classPrivateFieldGet(
                                          _initialData,
                                          this,
                                       ),
                                    position = _classPrivateFieldGet1.position;
                                 var _this$getInitialTrans =
                                       this.getInitialTranslation(),
                                    _this$getInitialTrans2 = _slicedToArray(
                                       _this$getInitialTrans,
                                       2,
                                    ),
                                    tx = _this$getInitialTrans2[0],
                                    ty = _this$getInitialTrans2[1];
                                 var _this$pageTranslation =
                                    this.pageTranslationToScreen(tx, ty);
                                 var _this$pageTranslation2 = _slicedToArray(
                                    _this$pageTranslation,
                                    2,
                                 );
                                 tx = _this$pageTranslation2[0];
                                 ty = _this$pageTranslation2[1];
                                 var _this$pageDimensions = _slicedToArray(
                                       this.pageDimensions,
                                       2,
                                    ),
                                    pageWidth = _this$pageDimensions[0],
                                    pageHeight = _this$pageDimensions[1];
                                 var _this$pageTranslation3 = _slicedToArray(
                                       this.pageTranslation,
                                       2,
                                    ),
                                    pageX = _this$pageTranslation3[0],
                                    pageY = _this$pageTranslation3[1];
                                 var posX, posY;
                                 switch (this.rotation) {
                                    case 0:
                                       posX =
                                          baseX +
                                          (position[0] - pageX) / pageWidth;
                                       posY =
                                          baseY +
                                          this.height -
                                          (position[1] - pageY) / pageHeight;
                                       break;
                                    case 90:
                                       posX =
                                          baseX +
                                          (position[0] - pageX) / pageWidth;
                                       posY =
                                          baseY -
                                          (position[1] - pageY) / pageHeight;
                                       var _ref73 = [ty, -tx];
                                       tx = _ref73[0];
                                       ty = _ref73[1];
                                       break;
                                    case 180:
                                       posX =
                                          baseX -
                                          this.width +
                                          (position[0] - pageX) / pageWidth;
                                       posY =
                                          baseY -
                                          (position[1] - pageY) / pageHeight;
                                       var _ref74 = [-tx, -ty];
                                       tx = _ref74[0];
                                       ty = _ref74[1];
                                       break;
                                    case 270:
                                       posX =
                                          baseX +
                                          (position[0] -
                                             pageX -
                                             this.height * pageHeight) /
                                             pageWidth;
                                       posY =
                                          baseY +
                                          (position[1] -
                                             pageY -
                                             this.width * pageWidth) /
                                             pageHeight;
                                       var _ref75 = [-ty, tx];
                                       tx = _ref75[0];
                                       ty = _ref75[1];
                                       break;
                                 }
                                 this.setAt(
                                    posX * parentWidth,
                                    posY * parentHeight,
                                    tx,
                                    ty,
                                 );
                              } else {
                                 this.setAt(
                                    baseX * parentWidth,
                                    baseY * parentHeight,
                                    this.width * parentWidth,
                                    this.height * parentHeight,
                                 );
                              }
                              _assertClassBrand(
                                 _FreeTextEditor_brand,
                                 this,
                                 _setContent,
                              ).call(this);
                              this._isDraggable = true;
                              this.editorDiv.contentEditable = false;
                           } else {
                              this._isDraggable = false;
                              this.editorDiv.contentEditable = true;
                           }
                           return this.div;
                        },
                     },
                     {
                        key: "editorDivPaste",
                        value: function editorDivPaste(event) {
                           var clipboardData =
                              event.clipboardData || window.clipboardData;
                           var types = clipboardData.types;
                           if (
                              types.length === 1 &&
                              types[0] === "text/plain"
                           ) {
                              return;
                           }
                           event.preventDefault();
                           var paste = _deserializeContent
                              .call(
                                 FreeTextEditor,
                                 clipboardData.getData("text") || "",
                              )
                              .replaceAll(EOL_PATTERN, "\n");
                           if (!paste) {
                              return;
                           }
                           var selection = window.getSelection();
                           if (!selection.rangeCount) {
                              return;
                           }
                           this.editorDiv.normalize();
                           selection.deleteFromDocument();
                           var range = selection.getRangeAt(0);
                           if (!paste.includes("\n")) {
                              range.insertNode(document.createTextNode(paste));
                              this.editorDiv.normalize();
                              selection.collapseToStart();
                              return;
                           }
                           var startContainer = range.startContainer,
                              startOffset = range.startOffset;
                           var bufferBefore = [];
                           var bufferAfter = [];
                           if (startContainer.nodeType === Node.TEXT_NODE) {
                              var parent = startContainer.parentElement;
                              bufferAfter.push(
                                 startContainer.nodeValue
                                    .slice(startOffset)
                                    .replaceAll(EOL_PATTERN, ""),
                              );
                              if (parent !== this.editorDiv) {
                                 var buffer = bufferBefore;
                                 var _iterator63 = _createForOfIteratorHelper(
                                       this.editorDiv.childNodes,
                                    ),
                                    _step63;
                                 try {
                                    for (
                                       _iterator63.s();
                                       !(_step63 = _iterator63.n()).done;

                                    ) {
                                       var child = _step63.value;
                                       if (child === parent) {
                                          buffer = bufferAfter;
                                          continue;
                                       }
                                       buffer.push(
                                          _getNodeContent.call(
                                             FreeTextEditor,
                                             child,
                                          ),
                                       );
                                    }
                                 } catch (err) {
                                    _iterator63.e(err);
                                 } finally {
                                    _iterator63.f();
                                 }
                              }
                              bufferBefore.push(
                                 startContainer.nodeValue
                                    .slice(0, startOffset)
                                    .replaceAll(EOL_PATTERN, ""),
                              );
                           } else if (startContainer === this.editorDiv) {
                              var _buffer = bufferBefore;
                              var i = 0;
                              var _iterator64 = _createForOfIteratorHelper(
                                    this.editorDiv.childNodes,
                                 ),
                                 _step64;
                              try {
                                 for (
                                    _iterator64.s();
                                    !(_step64 = _iterator64.n()).done;

                                 ) {
                                    var _child = _step64.value;
                                    if (i++ === startOffset) {
                                       _buffer = bufferAfter;
                                    }
                                    _buffer.push(
                                       _getNodeContent.call(
                                          FreeTextEditor,
                                          _child,
                                       ),
                                    );
                                 }
                              } catch (err) {
                                 _iterator64.e(err);
                              } finally {
                                 _iterator64.f();
                              }
                           }
                           _classPrivateFieldSet(
                              _content,
                              this,
                              ""
                                 .concat(bufferBefore.join("\n"))
                                 .concat(paste)
                                 .concat(bufferAfter.join("\n")),
                           );
                           _assertClassBrand(
                              _FreeTextEditor_brand,
                              this,
                              _setContent,
                           ).call(this);
                           var newRange = new Range();
                           var beforeLength = bufferBefore.reduce(function (
                              acc,
                              line,
                           ) {
                              return acc + line.length;
                           }, 0);
                           var _iterator65 = _createForOfIteratorHelper(
                                 this.editorDiv.childNodes,
                              ),
                              _step65;
                           try {
                              for (
                                 _iterator65.s();
                                 !(_step65 = _iterator65.n()).done;

                              ) {
                                 var firstChild = _step65.value.firstChild;
                                 if (firstChild.nodeType === Node.TEXT_NODE) {
                                    var length = firstChild.nodeValue.length;
                                    if (beforeLength <= length) {
                                       newRange.setStart(
                                          firstChild,
                                          beforeLength,
                                       );
                                       newRange.setEnd(
                                          firstChild,
                                          beforeLength,
                                       );
                                       break;
                                    }
                                    beforeLength -= length;
                                 }
                              }
                           } catch (err) {
                              _iterator65.e(err);
                           } finally {
                              _iterator65.f();
                           }
                           selection.removeAllRanges();
                           selection.addRange(newRange);
                        },
                     },
                     {
                        key: "contentDiv",
                        get: function get() {
                           return this.editorDiv;
                        },
                     },
                     {
                        key: "serialize",
                        value: function serialize() {
                           var isForCopying =
                              arguments.length > 0 && arguments[0] !== undefined
                                 ? arguments[0]
                                 : false;
                           if (this.isEmpty()) {
                              return null;
                           }
                           if (this.deleted) {
                              return {
                                 pageIndex: this.pageIndex,
                                 id: this.annotationElementId,
                                 deleted: true,
                              };
                           }
                           var padding =
                              FreeTextEditor._internalPadding *
                              this.parentScale;
                           var rect = this.getRect(padding, padding);
                           var color =
                              editor_editor.AnnotationEditor._colorManager.convert(
                                 this.isAttachedToDOM
                                    ? getComputedStyle(this.editorDiv).color
                                    : _classPrivateFieldGet(_color2, this),
                              );
                           var serialized = {
                              annotationType:
                                 util.AnnotationEditorType.FREETEXT,
                              color: color,
                              fontSize: _classPrivateFieldGet(_fontSize, this),
                              value: _assertClassBrand(
                                 _FreeTextEditor_brand,
                                 this,
                                 _serializeContent,
                              ).call(this),
                              pageIndex: this.pageIndex,
                              rect: rect,
                              rotation: this.rotation,
                              structTreeParentId: this._structTreeParentId,
                           };
                           if (isForCopying) {
                              return serialized;
                           }
                           if (
                              this.annotationElementId &&
                              !_assertClassBrand(
                                 _FreeTextEditor_brand,
                                 this,
                                 _hasElementChanged,
                              ).call(this, serialized)
                           ) {
                              return null;
                           }
                           serialized.id = this.annotationElementId;
                           return serialized;
                        },
                     },
                     {
                        key: "renderAnnotationElement",
                        value: function renderAnnotationElement(annotation) {
                           var content = _superPropGet(
                              FreeTextEditor,
                              "renderAnnotationElement",
                              this,
                              3,
                           )([annotation]);
                           if (this.deleted) {
                              return content;
                           }
                           var style = content.style;
                           style.fontSize = "calc(".concat(
                              _classPrivateFieldGet(_fontSize, this),
                              "px * var(--scale-factor))",
                           );
                           style.color = _classPrivateFieldGet(_color2, this);
                           content.replaceChildren();
                           var _iterator66 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_content, this).split(
                                    "\n",
                                 ),
                              ),
                              _step66;
                           try {
                              for (
                                 _iterator66.s();
                                 !(_step66 = _iterator66.n()).done;

                              ) {
                                 var line = _step66.value;
                                 var div = document.createElement("div");
                                 div.append(
                                    line
                                       ? document.createTextNode(line)
                                       : document.createElement("br"),
                                 );
                                 content.append(div);
                              }
                           } catch (err) {
                              _iterator66.e(err);
                           } finally {
                              _iterator66.f();
                           }
                           var padding =
                              FreeTextEditor._internalPadding *
                              this.parentScale;
                           annotation.updateEdited({
                              rect: this.getRect(padding, padding),
                           });
                           return content;
                        },
                     },
                     {
                        key: "resetAnnotationElement",
                        value: function resetAnnotationElement(annotation) {
                           _superPropGet(
                              FreeTextEditor,
                              "resetAnnotationElement",
                              this,
                              3,
                           )([annotation]);
                           annotation.resetEdited();
                        },
                     },
                  ],
                  [
                     {
                        key: "_keyboardManager",
                        get: function get() {
                           var proto = FreeTextEditor.prototype;
                           var arrowChecker = function arrowChecker(self) {
                              return self.isEmpty();
                           };
                           var small =
                              tools.AnnotationEditorUIManager.TRANSLATE_SMALL;
                           var big =
                              tools.AnnotationEditorUIManager.TRANSLATE_BIG;
                           return (0, util.shadow)(
                              this,
                              "_keyboardManager",
                              new tools.KeyboardManager([
                                 [
                                    [
                                       "ctrl+s",
                                       "mac+meta+s",
                                       "ctrl+p",
                                       "mac+meta+p",
                                    ],
                                    proto.commitOrRemove,
                                    { bubbles: true },
                                 ],
                                 [
                                    [
                                       "ctrl+Enter",
                                       "mac+meta+Enter",
                                       "Escape",
                                       "mac+Escape",
                                    ],
                                    proto.commitOrRemove,
                                 ],
                                 [
                                    ["ArrowLeft", "mac+ArrowLeft"],
                                    proto._translateEmpty,
                                    {
                                       args: [-small, 0],
                                       checker: arrowChecker,
                                    },
                                 ],
                                 [
                                    ["ctrl+ArrowLeft", "mac+shift+ArrowLeft"],
                                    proto._translateEmpty,
                                    { args: [-big, 0], checker: arrowChecker },
                                 ],
                                 [
                                    ["ArrowRight", "mac+ArrowRight"],
                                    proto._translateEmpty,
                                    { args: [small, 0], checker: arrowChecker },
                                 ],
                                 [
                                    ["ctrl+ArrowRight", "mac+shift+ArrowRight"],
                                    proto._translateEmpty,
                                    { args: [big, 0], checker: arrowChecker },
                                 ],
                                 [
                                    ["ArrowUp", "mac+ArrowUp"],
                                    proto._translateEmpty,
                                    {
                                       args: [0, -small],
                                       checker: arrowChecker,
                                    },
                                 ],
                                 [
                                    ["ctrl+ArrowUp", "mac+shift+ArrowUp"],
                                    proto._translateEmpty,
                                    { args: [0, -big], checker: arrowChecker },
                                 ],
                                 [
                                    ["ArrowDown", "mac+ArrowDown"],
                                    proto._translateEmpty,
                                    { args: [0, small], checker: arrowChecker },
                                 ],
                                 [
                                    ["ctrl+ArrowDown", "mac+shift+ArrowDown"],
                                    proto._translateEmpty,
                                    { args: [0, big], checker: arrowChecker },
                                 ],
                              ]),
                           );
                        },
                     },
                     {
                        key: "initialize",
                        value: function initialize(l10n, uiManager) {
                           editor_editor.AnnotationEditor.initialize(
                              l10n,
                              uiManager,
                              {
                                 strings: ["pdfjs-free-text-default-content"],
                              },
                           );
                           var style = getComputedStyle(
                              document.documentElement,
                           );
                           this._internalPadding = parseFloat(
                              style.getPropertyValue("--freetext-padding"),
                           );
                        },
                     },
                     {
                        key: "updateDefaultParams",
                        value: function updateDefaultParams(type, value) {
                           switch (type) {
                              case util.AnnotationEditorParamsType
                                 .FREETEXT_SIZE:
                                 FreeTextEditor._defaultFontSize = value;
                                 break;
                              case util.AnnotationEditorParamsType
                                 .FREETEXT_COLOR:
                                 FreeTextEditor._defaultColor = value;
                                 break;
                           }
                        },
                     },
                     {
                        key: "defaultPropertiesToUpdate",
                        get: function get() {
                           return [
                              [
                                 util.AnnotationEditorParamsType.FREETEXT_SIZE,
                                 FreeTextEditor._defaultFontSize,
                              ],
                              [
                                 util.AnnotationEditorParamsType.FREETEXT_COLOR,
                                 FreeTextEditor._defaultColor ||
                                    editor_editor.AnnotationEditor
                                       ._defaultLineColor,
                              ],
                           ];
                        },
                     },
                     {
                        key: "deserialize",
                        value: function deserialize(data, parent, uiManager) {
                           var _util$Util3;
                           var initialData = null;
                           if (
                              data instanceof
                              annotation_layer.FreeTextAnnotationElement
                           ) {
                              var _data = data,
                                 _data$data = _data.data,
                                 _data$data$defaultApp =
                                    _data$data.defaultAppearanceData,
                                 fontSize = _data$data$defaultApp.fontSize,
                                 fontColor = _data$data$defaultApp.fontColor,
                                 rect = _data$data.rect,
                                 rotation = _data$data.rotation,
                                 id = _data$data.id,
                                 textContent = _data.textContent,
                                 textPosition = _data.textPosition,
                                 pageNumber = _data.parent.page.pageNumber;
                              if (!textContent || textContent.length === 0) {
                                 return null;
                              }
                              initialData = data = {
                                 annotationType:
                                    util.AnnotationEditorType.FREETEXT,
                                 color: Array.from(fontColor),
                                 fontSize: fontSize,
                                 value: textContent.join("\n"),
                                 position: textPosition,
                                 pageIndex: pageNumber - 1,
                                 rect: rect.slice(0),
                                 rotation: rotation,
                                 id: id,
                                 deleted: false,
                              };
                           }
                           var editor = _superPropGet(
                              FreeTextEditor,
                              "deserialize",
                              this,
                              2,
                           )([data, parent, uiManager]);
                           _classPrivateFieldSet(
                              _fontSize,
                              editor,
                              data.fontSize,
                           );
                           _classPrivateFieldSet(
                              _color2,
                              editor,
                              (_util$Util3 = util.Util).makeHexColor.apply(
                                 _util$Util3,
                                 _toConsumableArray(data.color),
                              ),
                           );
                           _classPrivateFieldSet(
                              _content,
                              editor,
                              _deserializeContent.call(
                                 FreeTextEditor,
                                 data.value,
                              ),
                           );
                           editor.annotationElementId = data.id || null;
                           _classPrivateFieldSet(
                              _initialData,
                              editor,
                              initialData,
                           );
                           return editor;
                        },
                     },
                  ],
               );
            })(editor_editor.AnnotationEditor); // EXTERNAL MODULE: ./src/display/editor/outliner.js
            _FreeTextEditor = FreeTextEditor;
            function _updateFontSize(fontSize) {
               var _this62 = this;
               var setFontsize = function setFontsize(size) {
                  _this62.editorDiv.style.fontSize = "calc(".concat(
                     size,
                     "px * var(--scale-factor))",
                  );
                  _this62.translate(
                     0,
                     -(size - _classPrivateFieldGet(_fontSize, _this62)) *
                        _this62.parentScale,
                  );
                  _classPrivateFieldSet(_fontSize, _this62, size);
                  _assertClassBrand(
                     _FreeTextEditor_brand,
                     _this62,
                     _setEditorDimensions,
                  ).call(_this62);
               };
               var savedFontsize = _classPrivateFieldGet(_fontSize, this);
               this.addCommands({
                  cmd: setFontsize.bind(this, fontSize),
                  undo: setFontsize.bind(this, savedFontsize),
                  post: this._uiManager.updateUI.bind(this._uiManager, this),
                  mustExec: true,
                  type: util.AnnotationEditorParamsType.FREETEXT_SIZE,
                  overwriteIfSameType: true,
                  keepUndo: true,
               });
            }
            function _updateColor(color) {
               var _this63 = this;
               var setColor = function setColor(col) {
                  _classPrivateFieldSet(
                     _color2,
                     _this63,
                     (_this63.editorDiv.style.color = col),
                  );
               };
               var savedColor = _classPrivateFieldGet(_color2, this);
               this.addCommands({
                  cmd: setColor.bind(this, color),
                  undo: setColor.bind(this, savedColor),
                  post: this._uiManager.updateUI.bind(this._uiManager, this),
                  mustExec: true,
                  type: util.AnnotationEditorParamsType.FREETEXT_COLOR,
                  overwriteIfSameType: true,
                  keepUndo: true,
               });
            }
            function _extractText() {
               var buffer = [];
               this.editorDiv.normalize();
               var _iterator79 = _createForOfIteratorHelper(
                     this.editorDiv.childNodes,
                  ),
                  _step79;
               try {
                  for (_iterator79.s(); !(_step79 = _iterator79.n()).done; ) {
                     var child = _step79.value;
                     buffer.push(_getNodeContent.call(_FreeTextEditor, child));
                  }
               } catch (err) {
                  _iterator79.e(err);
               } finally {
                  _iterator79.f();
               }
               return buffer.join("\n");
            }
            function _setEditorDimensions() {
               var _this$parentDimension7 = _slicedToArray(
                     this.parentDimensions,
                     2,
                  ),
                  parentWidth = _this$parentDimension7[0],
                  parentHeight = _this$parentDimension7[1];
               var rect;
               if (this.isAttachedToDOM) {
                  rect = this.div.getBoundingClientRect();
               } else {
                  var currentLayer = this.currentLayer,
                     div = this.div;
                  var savedDisplay = div.style.display;
                  var savedVisibility = div.classList.contains("hidden");
                  div.classList.remove("hidden");
                  div.style.display = "hidden";
                  currentLayer.div.append(this.div);
                  rect = div.getBoundingClientRect();
                  div.remove();
                  div.style.display = savedDisplay;
                  div.classList.toggle("hidden", savedVisibility);
               }
               if (this.rotation % 180 === this.parentRotation % 180) {
                  this.width = rect.width / parentWidth;
                  this.height = rect.height / parentHeight;
               } else {
                  this.width = rect.height / parentWidth;
                  this.height = rect.width / parentHeight;
               }
               this.fixAndSetPosition();
            }
            function _getNodeContent(node) {
               return (
                  node.nodeType === Node.TEXT_NODE
                     ? node.nodeValue
                     : node.innerText
               ).replaceAll(EOL_PATTERN, "");
            }
            function _setContent() {
               this.editorDiv.replaceChildren();
               if (!_classPrivateFieldGet(_content, this)) {
                  return;
               }
               var _iterator80 = _createForOfIteratorHelper(
                     _classPrivateFieldGet(_content, this).split("\n"),
                  ),
                  _step80;
               try {
                  for (_iterator80.s(); !(_step80 = _iterator80.n()).done; ) {
                     var line = _step80.value;
                     var div = document.createElement("div");
                     div.append(
                        line
                           ? document.createTextNode(line)
                           : document.createElement("br"),
                     );
                     this.editorDiv.append(div);
                  }
               } catch (err) {
                  _iterator80.e(err);
               } finally {
                  _iterator80.f();
               }
            }
            function _serializeContent() {
               return _classPrivateFieldGet(_content, this).replaceAll(
                  "\xa0",
                  " ",
               );
            }
            function _deserializeContent(content) {
               return content.replaceAll(" ", "\xa0");
            }
            function _hasElementChanged(serialized) {
               var _classPrivateFieldGet21 = _classPrivateFieldGet(
                     _initialData,
                     this,
                  ),
                  value = _classPrivateFieldGet21.value,
                  fontSize = _classPrivateFieldGet21.fontSize,
                  color = _classPrivateFieldGet21.color,
                  pageIndex = _classPrivateFieldGet21.pageIndex;
               return (
                  this._hasBeenMoved ||
                  serialized.value !== value ||
                  serialized.fontSize !== fontSize ||
                  serialized.color.some(function (c, i) {
                     return c !== color[i];
                  }) ||
                  serialized.pageIndex !== pageIndex
               );
            }
            _defineProperty(FreeTextEditor, "_freeTextDefaultContent", "");
            _defineProperty(FreeTextEditor, "_internalPadding", 0);
            _defineProperty(FreeTextEditor, "_defaultColor", null);
            _defineProperty(FreeTextEditor, "_defaultFontSize", 10);
            _defineProperty(FreeTextEditor, "_type", "freetext");
            _defineProperty(
               FreeTextEditor,
               "_editorType",
               util.AnnotationEditorType.FREETEXT,
            );
            var editor_outliner = __webpack_require__(61); // EXTERNAL MODULE: ./src/display/editor/color_picker.js
            var color_picker = __webpack_require__(259); // EXTERNAL MODULE: ./src/display/display_utils.js
            var display_utils = __webpack_require__(419); // CONCATENATED MODULE: ./src/display/editor/highlight.js
            var _anchorNode = /*#__PURE__*/ new WeakMap();
            var _anchorOffset = /*#__PURE__*/ new WeakMap();
            var _boxes = /*#__PURE__*/ new WeakMap();
            var _clipPathId = /*#__PURE__*/ new WeakMap();
            var _colorPicker = /*#__PURE__*/ new WeakMap();
            var _focusOutlines = /*#__PURE__*/ new WeakMap();
            var _focusNode = /*#__PURE__*/ new WeakMap();
            var _focusOffset = /*#__PURE__*/ new WeakMap();
            var _highlightDiv = /*#__PURE__*/ new WeakMap();
            var _highlightOutlines = /*#__PURE__*/ new WeakMap();
            var _id5 = /*#__PURE__*/ new WeakMap();
            var _isFreeHighlight = /*#__PURE__*/ new WeakMap();
            var _boundKeydown = /*#__PURE__*/ new WeakMap();
            var _lastPoint = /*#__PURE__*/ new WeakMap();
            var _opacity = /*#__PURE__*/ new WeakMap();
            var _outlineId = /*#__PURE__*/ new WeakMap();
            var _text = /*#__PURE__*/ new WeakMap();
            var _thickness = /*#__PURE__*/ new WeakMap();
            var _methodOfCreation = /*#__PURE__*/ new WeakMap();
            var _HighlightEditor_brand = /*#__PURE__*/ new WeakSet();
            var HighlightEditor = /*#__PURE__*/ (function (
               _editor_editor$Annota2,
            ) {
               function HighlightEditor(params) {
                  var _this56;
                  _classCallCheck(this, HighlightEditor);
                  _this56 = _callSuper(this, HighlightEditor, [
                     _objectSpread(
                        _objectSpread({}, params),
                        {},
                        { name: "highlightEditor" },
                     ),
                  ]);
                  _classPrivateMethodInitSpec(_this56, _HighlightEditor_brand);
                  _classPrivateFieldInitSpec(_this56, _anchorNode, null);
                  _classPrivateFieldInitSpec(_this56, _anchorOffset, 0);
                  _classPrivateFieldInitSpec(_this56, _boxes, void 0);
                  _classPrivateFieldInitSpec(_this56, _clipPathId, null);
                  _classPrivateFieldInitSpec(_this56, _colorPicker, null);
                  _classPrivateFieldInitSpec(_this56, _focusOutlines, null);
                  _classPrivateFieldInitSpec(_this56, _focusNode, null);
                  _classPrivateFieldInitSpec(_this56, _focusOffset, 0);
                  _classPrivateFieldInitSpec(_this56, _highlightDiv, null);
                  _classPrivateFieldInitSpec(_this56, _highlightOutlines, null);
                  _classPrivateFieldInitSpec(_this56, _id5, null);
                  _classPrivateFieldInitSpec(_this56, _isFreeHighlight, false);
                  _classPrivateFieldInitSpec(
                     _this56,
                     _boundKeydown,
                     _assertClassBrand(
                        _HighlightEditor_brand,
                        _this56,
                        _keydown,
                     ).bind(_this56),
                  );
                  _classPrivateFieldInitSpec(_this56, _lastPoint, null);
                  _classPrivateFieldInitSpec(_this56, _opacity, void 0);
                  _classPrivateFieldInitSpec(_this56, _outlineId, null);
                  _classPrivateFieldInitSpec(_this56, _text, "");
                  _classPrivateFieldInitSpec(_this56, _thickness, void 0);
                  _classPrivateFieldInitSpec(_this56, _methodOfCreation, "");
                  _this56.color = params.color || HighlightEditor._defaultColor;
                  _classPrivateFieldSet(
                     _thickness,
                     _this56,
                     params.thickness || HighlightEditor._defaultThickness,
                  );
                  _classPrivateFieldSet(
                     _opacity,
                     _this56,
                     params.opacity || HighlightEditor._defaultOpacity,
                  );
                  _classPrivateFieldSet(_boxes, _this56, params.boxes || null);
                  _classPrivateFieldSet(
                     _methodOfCreation,
                     _this56,
                     params.methodOfCreation || "",
                  );
                  _classPrivateFieldSet(_text, _this56, params.text || "");
                  _this56._isDraggable = false;
                  if (params.highlightId > -1) {
                     _classPrivateFieldSet(_isFreeHighlight, _this56, true);
                     _assertClassBrand(
                        _HighlightEditor_brand,
                        _this56,
                        _createFreeOutlines,
                     ).call(_this56, params);
                     _assertClassBrand(
                        _HighlightEditor_brand,
                        _this56,
                        _addToDrawLayer,
                     ).call(_this56);
                  } else {
                     _classPrivateFieldSet(
                        _anchorNode,
                        _this56,
                        params.anchorNode,
                     );
                     _classPrivateFieldSet(
                        _anchorOffset,
                        _this56,
                        params.anchorOffset,
                     );
                     _classPrivateFieldSet(
                        _focusNode,
                        _this56,
                        params.focusNode,
                     );
                     _classPrivateFieldSet(
                        _focusOffset,
                        _this56,
                        params.focusOffset,
                     );
                     _assertClassBrand(
                        _HighlightEditor_brand,
                        _this56,
                        _createOutlines,
                     ).call(_this56);
                     _assertClassBrand(
                        _HighlightEditor_brand,
                        _this56,
                        _addToDrawLayer,
                     ).call(_this56);
                     _this56.rotate(_this56.rotation);
                  }
                  return _this56;
               }
               _inherits(HighlightEditor, _editor_editor$Annota2);
               return _createClass(
                  HighlightEditor,
                  [
                     {
                        key: "telemetryInitialData",
                        get: function get() {
                           return {
                              action: "added",
                              type: _classPrivateFieldGet(
                                 _isFreeHighlight,
                                 this,
                              )
                                 ? "free_highlight"
                                 : "highlight",
                              color: this._uiManager.highlightColorNames.get(
                                 this.color,
                              ),
                              thickness: _classPrivateFieldGet(
                                 _thickness,
                                 this,
                              ),
                              methodOfCreation: _classPrivateFieldGet(
                                 _methodOfCreation,
                                 this,
                              ),
                           };
                        },
                     },
                     {
                        key: "telemetryFinalData",
                        get: function get() {
                           return {
                              type: "highlight",
                              color: this._uiManager.highlightColorNames.get(
                                 this.color,
                              ),
                           };
                        },
                     },
                     {
                        key: "translateInPage",
                        value: function translateInPage(x, y) {},
                     },
                     {
                        key: "toolbarPosition",
                        get: function get() {
                           return _classPrivateFieldGet(_lastPoint, this);
                        },
                     },
                     {
                        key: "updateParams",
                        value: function updateParams(type, value) {
                           switch (type) {
                              case util.AnnotationEditorParamsType
                                 .HIGHLIGHT_COLOR:
                                 _assertClassBrand(
                                    _HighlightEditor_brand,
                                    this,
                                    _updateColor2,
                                 ).call(this, value);
                                 break;
                              case util.AnnotationEditorParamsType
                                 .HIGHLIGHT_THICKNESS:
                                 _assertClassBrand(
                                    _HighlightEditor_brand,
                                    this,
                                    _updateThickness,
                                 ).call(this, value);
                                 break;
                           }
                        },
                     },
                     {
                        key: "propertiesToUpdate",
                        get: function get() {
                           return [
                              [
                                 util.AnnotationEditorParamsType
                                    .HIGHLIGHT_COLOR,
                                 this.color || HighlightEditor._defaultColor,
                              ],
                              [
                                 util.AnnotationEditorParamsType
                                    .HIGHLIGHT_THICKNESS,
                                 _classPrivateFieldGet(_thickness, this) ||
                                    HighlightEditor._defaultThickness,
                              ],
                              [
                                 util.AnnotationEditorParamsType.HIGHLIGHT_FREE,
                                 _classPrivateFieldGet(_isFreeHighlight, this),
                              ],
                           ];
                        },
                     },
                     {
                        key: "addEditToolbar",
                        value: (function () {
                           var _addEditToolbar = _asyncToGenerator(
                              /*#__PURE__*/ _regenerator().m(
                                 function _callee10() {
                                    var toolbar;
                                    return _regenerator().w(
                                       function (_context11) {
                                          while (1)
                                             switch (_context11.n) {
                                                case 0:
                                                   _context11.n = 1;
                                                   return _superPropGet(
                                                      HighlightEditor,
                                                      "addEditToolbar",
                                                      this,
                                                      3,
                                                   )([]);
                                                case 1:
                                                   toolbar = _context11.v;
                                                   if (toolbar) {
                                                      _context11.n = 2;
                                                      break;
                                                   }
                                                   return _context11.a(2, null);
                                                case 2:
                                                   if (
                                                      this._uiManager
                                                         .highlightColors
                                                   ) {
                                                      _classPrivateFieldSet(
                                                         _colorPicker,
                                                         this,
                                                         new color_picker.ColorPicker(
                                                            {
                                                               editor: this,
                                                            },
                                                         ),
                                                      );
                                                      toolbar.addColorPicker(
                                                         _classPrivateFieldGet(
                                                            _colorPicker,
                                                            this,
                                                         ),
                                                      );
                                                   }
                                                   return _context11.a(
                                                      2,
                                                      toolbar,
                                                   );
                                             }
                                       },
                                       _callee10,
                                       this,
                                    );
                                 },
                              ),
                           );
                           function addEditToolbar() {
                              return _addEditToolbar.apply(this, arguments);
                           }
                           return addEditToolbar;
                        })(),
                     },
                     {
                        key: "disableEditing",
                        value: function disableEditing() {
                           _superPropGet(
                              HighlightEditor,
                              "disableEditing",
                              this,
                              3,
                           )([]);
                           this.div.classList.toggle("disabled", true);
                        },
                     },
                     {
                        key: "enableEditing",
                        value: function enableEditing() {
                           _superPropGet(
                              HighlightEditor,
                              "enableEditing",
                              this,
                              3,
                           )([]);
                           this.div.classList.toggle("disabled", false);
                        },
                     },
                     {
                        key: "fixAndSetPosition",
                        value: function fixAndSetPosition() {
                           return _superPropGet(
                              HighlightEditor,
                              "fixAndSetPosition",
                              this,
                              3,
                           )([
                              _assertClassBrand(
                                 _HighlightEditor_brand,
                                 this,
                                 _getRotation,
                              ).call(this),
                           ]);
                        },
                     },
                     {
                        key: "getBaseTranslation",
                        value: function getBaseTranslation() {
                           return [0, 0];
                        },
                     },
                     {
                        key: "getRect",
                        value: function getRect(tx, ty) {
                           return _superPropGet(
                              HighlightEditor,
                              "getRect",
                              this,
                              3,
                           )([
                              tx,
                              ty,
                              _assertClassBrand(
                                 _HighlightEditor_brand,
                                 this,
                                 _getRotation,
                              ).call(this),
                           ]);
                        },
                     },
                     {
                        key: "onceAdded",
                        value: function onceAdded() {
                           this.parent.addUndoableEditor(this);
                           this.div.focus();
                        },
                     },
                     {
                        key: "remove",
                        value: function remove() {
                           _assertClassBrand(
                              _HighlightEditor_brand,
                              this,
                              _cleanDrawLayer,
                           ).call(this);
                           this._reportTelemetry({ action: "deleted" });
                           _superPropGet(
                              HighlightEditor,
                              "remove",
                              this,
                              3,
                           )([]);
                        },
                     },
                     {
                        key: "rebuild",
                        value: function rebuild() {
                           if (!this.parent) {
                              return;
                           }
                           _superPropGet(
                              HighlightEditor,
                              "rebuild",
                              this,
                              3,
                           )([]);
                           if (this.div === null) {
                              return;
                           }
                           _assertClassBrand(
                              _HighlightEditor_brand,
                              this,
                              _addToDrawLayer,
                           ).call(this);
                           if (!this.isAttachedToDOM) {
                              this.parent.add(this);
                           }
                        },
                     },
                     {
                        key: "setParent",
                        value: function setParent(parent) {
                           var mustBeSelected = false;
                           if (this.parent && !parent) {
                              _assertClassBrand(
                                 _HighlightEditor_brand,
                                 this,
                                 _cleanDrawLayer,
                              ).call(this);
                           } else if (parent) {
                              var _this$div;
                              _assertClassBrand(
                                 _HighlightEditor_brand,
                                 this,
                                 _addToDrawLayer,
                              ).call(this, parent);
                              mustBeSelected =
                                 !this.parent &&
                                 ((_this$div = this.div) === null ||
                                 _this$div === void 0
                                    ? void 0
                                    : _this$div.classList.contains(
                                         "selectedEditor",
                                      ));
                           }
                           _superPropGet(
                              HighlightEditor,
                              "setParent",
                              this,
                              3,
                           )([parent]);
                           this.show(this._isVisible);
                           if (mustBeSelected) {
                              this.select();
                           }
                        },
                     },
                     {
                        key: "rotate",
                        value: function rotate(angle) {
                           var drawLayer = this.parent.drawLayer;
                           var box;
                           if (_classPrivateFieldGet(_isFreeHighlight, this)) {
                              angle = (angle - this.rotation + 360) % 360;
                              box = _rotateBbox.call(
                                 HighlightEditor,
                                 _classPrivateFieldGet(_highlightOutlines, this)
                                    .box,
                                 angle,
                              );
                           } else {
                              box = _rotateBbox.call(
                                 HighlightEditor,
                                 this,
                                 angle,
                              );
                           }
                           drawLayer.rotate(
                              _classPrivateFieldGet(_id5, this),
                              angle,
                           );
                           drawLayer.rotate(
                              _classPrivateFieldGet(_outlineId, this),
                              angle,
                           );
                           drawLayer.updateBox(
                              _classPrivateFieldGet(_id5, this),
                              box,
                           );
                           drawLayer.updateBox(
                              _classPrivateFieldGet(_outlineId, this),
                              _rotateBbox.call(
                                 HighlightEditor,
                                 _classPrivateFieldGet(_focusOutlines, this)
                                    .box,
                                 angle,
                              ),
                           );
                        },
                     },
                     {
                        key: "render",
                        value: function render() {
                           if (this.div) {
                              return this.div;
                           }
                           var div = _superPropGet(
                              HighlightEditor,
                              "render",
                              this,
                              3,
                           )([]);
                           if (_classPrivateFieldGet(_text, this)) {
                              div.setAttribute(
                                 "aria-label",
                                 _classPrivateFieldGet(_text, this),
                              );
                              div.setAttribute("role", "mark");
                           }
                           if (_classPrivateFieldGet(_isFreeHighlight, this)) {
                              div.classList.add("free");
                           } else {
                              this.div.addEventListener(
                                 "keydown",
                                 _classPrivateFieldGet(_boundKeydown, this),
                              );
                           }
                           var highlightDiv = _classPrivateFieldSet(
                              _highlightDiv,
                              this,
                              document.createElement("div"),
                           );
                           div.append(highlightDiv);
                           highlightDiv.setAttribute("aria-hidden", "true");
                           highlightDiv.className = "internal";
                           highlightDiv.style.clipPath = _classPrivateFieldGet(
                              _clipPathId,
                              this,
                           );
                           var _this$parentDimension2 = _slicedToArray(
                                 this.parentDimensions,
                                 2,
                              ),
                              parentWidth = _this$parentDimension2[0],
                              parentHeight = _this$parentDimension2[1];
                           this.setDims(
                              this.width * parentWidth,
                              this.height * parentHeight,
                           );
                           (0, tools.bindEvents)(
                              this,
                              _classPrivateFieldGet(_highlightDiv, this),
                              ["pointerover", "pointerleave"],
                           );
                           this.enableEditing();
                           return div;
                        },
                     },
                     {
                        key: "pointerover",
                        value: function pointerover() {
                           this.parent.drawLayer.addClass(
                              _classPrivateFieldGet(_outlineId, this),
                              "hovered",
                           );
                        },
                     },
                     {
                        key: "pointerleave",
                        value: function pointerleave() {
                           this.parent.drawLayer.removeClass(
                              _classPrivateFieldGet(_outlineId, this),
                              "hovered",
                           );
                        },
                     },
                     {
                        key: "_moveCaret",
                        value: function _moveCaret(direction) {
                           this.parent.unselect(this);
                           switch (direction) {
                              case 0:
                              case 2:
                                 _assertClassBrand(
                                    _HighlightEditor_brand,
                                    this,
                                    _setCaret,
                                 ).call(this, true);
                                 break;
                              case 1:
                              case 3:
                                 _assertClassBrand(
                                    _HighlightEditor_brand,
                                    this,
                                    _setCaret,
                                 ).call(this, false);
                                 break;
                           }
                        },
                     },
                     {
                        key: "select",
                        value: function select() {
                           var _this$parent2, _this$parent3;
                           _superPropGet(
                              HighlightEditor,
                              "select",
                              this,
                              3,
                           )([]);
                           if (!_classPrivateFieldGet(_outlineId, this)) {
                              return;
                           }
                           (_this$parent2 = this.parent) === null ||
                              _this$parent2 === void 0 ||
                              _this$parent2.drawLayer.removeClass(
                                 _classPrivateFieldGet(_outlineId, this),
                                 "hovered",
                              );
                           (_this$parent3 = this.parent) === null ||
                              _this$parent3 === void 0 ||
                              _this$parent3.drawLayer.addClass(
                                 _classPrivateFieldGet(_outlineId, this),
                                 "selected",
                              );
                        },
                     },
                     {
                        key: "unselect",
                        value: function unselect() {
                           var _this$parent4;
                           _superPropGet(
                              HighlightEditor,
                              "unselect",
                              this,
                              3,
                           )([]);
                           if (!_classPrivateFieldGet(_outlineId, this)) {
                              return;
                           }
                           (_this$parent4 = this.parent) === null ||
                              _this$parent4 === void 0 ||
                              _this$parent4.drawLayer.removeClass(
                                 _classPrivateFieldGet(_outlineId, this),
                                 "selected",
                              );
                           if (!_classPrivateFieldGet(_isFreeHighlight, this)) {
                              _assertClassBrand(
                                 _HighlightEditor_brand,
                                 this,
                                 _setCaret,
                              ).call(this, false);
                           }
                        },
                     },
                     {
                        key: "_mustFixPosition",
                        get: function get() {
                           return !_classPrivateFieldGet(
                              _isFreeHighlight,
                              this,
                           );
                        },
                     },
                     {
                        key: "show",
                        value: function show() {
                           var visible =
                              arguments.length > 0 && arguments[0] !== undefined
                                 ? arguments[0]
                                 : this._isVisible;
                           _superPropGet(
                              HighlightEditor,
                              "show",
                              this,
                              3,
                           )([visible]);
                           if (this.parent) {
                              this.parent.drawLayer.show(
                                 _classPrivateFieldGet(_id5, this),
                                 visible,
                              );
                              this.parent.drawLayer.show(
                                 _classPrivateFieldGet(_outlineId, this),
                                 visible,
                              );
                           }
                        },
                     },
                     {
                        key: "serialize",
                        value: function serialize() {
                           var isForCopying =
                              arguments.length > 0 && arguments[0] !== undefined
                                 ? arguments[0]
                                 : false;
                           if (this.isEmpty() || isForCopying) {
                              return null;
                           }
                           var rect = this.getRect(0, 0);
                           var color =
                              editor_editor.AnnotationEditor._colorManager.convert(
                                 this.color,
                              );
                           return {
                              annotationType:
                                 util.AnnotationEditorType.HIGHLIGHT,
                              color: color,
                              opacity: _classPrivateFieldGet(_opacity, this),
                              thickness: _classPrivateFieldGet(
                                 _thickness,
                                 this,
                              ),
                              quadPoints: _assertClassBrand(
                                 _HighlightEditor_brand,
                                 this,
                                 _serializeBoxes,
                              ).call(this),
                              outlines: _assertClassBrand(
                                 _HighlightEditor_brand,
                                 this,
                                 _serializeOutlines,
                              ).call(this, rect),
                              pageIndex: this.pageIndex,
                              rect: rect,
                              rotation: _assertClassBrand(
                                 _HighlightEditor_brand,
                                 this,
                                 _getRotation,
                              ).call(this),
                              structTreeParentId: this._structTreeParentId,
                           };
                        },
                     },
                  ],
                  [
                     {
                        key: "_keyboardManager",
                        get: function get() {
                           var proto = HighlightEditor.prototype;
                           return (0, util.shadow)(
                              this,
                              "_keyboardManager",
                              new tools.KeyboardManager([
                                 [
                                    ["ArrowLeft", "mac+ArrowLeft"],
                                    proto._moveCaret,
                                    { args: [0] },
                                 ],
                                 [
                                    ["ArrowRight", "mac+ArrowRight"],
                                    proto._moveCaret,
                                    { args: [1] },
                                 ],
                                 [
                                    ["ArrowUp", "mac+ArrowUp"],
                                    proto._moveCaret,
                                    { args: [2] },
                                 ],
                                 [
                                    ["ArrowDown", "mac+ArrowDown"],
                                    proto._moveCaret,
                                    { args: [3] },
                                 ],
                              ]),
                           );
                        },
                     },
                     {
                        key: "computeTelemetryFinalData",
                        value: function computeTelemetryFinalData(data) {
                           return { numberOfColors: data.get("color").size };
                        },
                     },
                     {
                        key: "initialize",
                        value: function initialize(l10n, uiManager) {
                           var _uiManager$highlightC;
                           editor_editor.AnnotationEditor.initialize(
                              l10n,
                              uiManager,
                           );
                           HighlightEditor._defaultColor ||
                              (HighlightEditor._defaultColor =
                                 ((_uiManager$highlightC =
                                    uiManager.highlightColors) === null ||
                                 _uiManager$highlightC === void 0
                                    ? void 0
                                    : _uiManager$highlightC.values().next()
                                         .value) || "#fff066");
                        },
                     },
                     {
                        key: "updateDefaultParams",
                        value: function updateDefaultParams(type, value) {
                           switch (type) {
                              case util.AnnotationEditorParamsType
                                 .HIGHLIGHT_DEFAULT_COLOR:
                                 HighlightEditor._defaultColor = value;
                                 break;
                              case util.AnnotationEditorParamsType
                                 .HIGHLIGHT_THICKNESS:
                                 HighlightEditor._defaultThickness = value;
                                 break;
                           }
                        },
                     },
                     {
                        key: "defaultPropertiesToUpdate",
                        get: function get() {
                           return [
                              [
                                 util.AnnotationEditorParamsType
                                    .HIGHLIGHT_DEFAULT_COLOR,
                                 HighlightEditor._defaultColor,
                              ],
                              [
                                 util.AnnotationEditorParamsType
                                    .HIGHLIGHT_THICKNESS,
                                 HighlightEditor._defaultThickness,
                              ],
                           ];
                        },
                     },
                     {
                        key: "startHighlighting",
                        value: function startHighlighting(
                           parent,
                           isLTR,
                           _ref76,
                        ) {
                           var _this57 = this;
                           var textLayer = _ref76.target,
                              x = _ref76.x,
                              y = _ref76.y;
                           var _textLayer$getBoundin =
                                 textLayer.getBoundingClientRect(),
                              layerX = _textLayer$getBoundin.x,
                              layerY = _textLayer$getBoundin.y,
                              parentWidth = _textLayer$getBoundin.width,
                              parentHeight = _textLayer$getBoundin.height;
                           var pointerMove = function pointerMove(e) {
                              _assertClassBrand(
                                 HighlightEditor,
                                 _this57,
                                 _highlightMove,
                              ).call(_this57, parent, e);
                           };
                           var pointerDownOptions = {
                              capture: true,
                              passive: false,
                           };
                           var pointerDown = function pointerDown(e) {
                              e.preventDefault();
                              e.stopPropagation();
                           };
                           var _pointerUpCallback = function pointerUpCallback(
                              e,
                           ) {
                              textLayer.removeEventListener(
                                 "pointermove",
                                 pointerMove,
                              );
                              window.removeEventListener(
                                 "blur",
                                 _pointerUpCallback,
                              );
                              window.removeEventListener(
                                 "pointerup",
                                 _pointerUpCallback,
                              );
                              window.removeEventListener(
                                 "pointerdown",
                                 pointerDown,
                                 pointerDownOptions,
                              );
                              window.removeEventListener(
                                 "contextmenu",
                                 display_utils.noContextMenu,
                              );
                              _assertClassBrand(
                                 HighlightEditor,
                                 _this57,
                                 _endHighlight,
                              ).call(_this57, parent, e);
                           };
                           window.addEventListener("blur", _pointerUpCallback);
                           window.addEventListener(
                              "pointerup",
                              _pointerUpCallback,
                           );
                           window.addEventListener(
                              "pointerdown",
                              pointerDown,
                              pointerDownOptions,
                           );
                           window.addEventListener(
                              "contextmenu",
                              display_utils.noContextMenu,
                           );
                           textLayer.addEventListener(
                              "pointermove",
                              pointerMove,
                           );
                           this._freeHighlight =
                              new editor_outliner.FreeOutliner(
                                 { x: x, y: y },
                                 [layerX, layerY, parentWidth, parentHeight],
                                 parent.scale,
                                 this._defaultThickness / 2,
                                 isLTR,
                                 0.001,
                              );
                           var _parent$drawLayer$hig =
                              parent.drawLayer.highlight(
                                 this._freeHighlight,
                                 this._defaultColor,
                                 this._defaultOpacity,
                                 true,
                              );
                           this._freeHighlightId = _parent$drawLayer$hig.id;
                           this._freeHighlightClipId =
                              _parent$drawLayer$hig.clipPathId;
                        },
                     },
                     {
                        key: "deserialize",
                        value: function deserialize(data, parent, uiManager) {
                           var _util$Util4;
                           var editor = _superPropGet(
                              HighlightEditor,
                              "deserialize",
                              this,
                              2,
                           )([data, parent, uiManager]);
                           var _data$rect = _slicedToArray(data.rect, 4),
                              blX = _data$rect[0],
                              blY = _data$rect[1],
                              trX = _data$rect[2],
                              trY = _data$rect[3],
                              color = data.color,
                              quadPoints = data.quadPoints;
                           editor.color = (_util$Util4 =
                              util.Util).makeHexColor.apply(
                              _util$Util4,
                              _toConsumableArray(color),
                           );
                           _classPrivateFieldSet(
                              _opacity,
                              editor,
                              data.opacity,
                           );
                           var _editor$pageDimension = _slicedToArray(
                                 editor.pageDimensions,
                                 2,
                              ),
                              pageWidth = _editor$pageDimension[0],
                              pageHeight = _editor$pageDimension[1];
                           editor.width = (trX - blX) / pageWidth;
                           editor.height = (trY - blY) / pageHeight;
                           var boxes = _classPrivateFieldSet(
                              _boxes,
                              editor,
                              [],
                           );
                           for (var i = 0; i < quadPoints.length; i += 8) {
                              boxes.push({
                                 x: (quadPoints[4] - trX) / pageWidth,
                                 y:
                                    (trY - (1 - quadPoints[i + 5])) /
                                    pageHeight,
                                 width:
                                    (quadPoints[i + 2] - quadPoints[i]) /
                                    pageWidth,
                                 height:
                                    (quadPoints[i + 5] - quadPoints[i + 1]) /
                                    pageHeight,
                              });
                           }
                           _assertClassBrand(
                              _HighlightEditor_brand,
                              editor,
                              _createOutlines,
                           ).call(editor);
                           return editor;
                        },
                     },
                     {
                        key: "canCreateNewEmptyEditor",
                        value: function canCreateNewEmptyEditor() {
                           return false;
                        },
                     },
                  ],
               );
            })(editor_editor.AnnotationEditor);
            _HighlightEditor = HighlightEditor;
            function _createOutlines() {
               var outliner = new editor_outliner.Outliner(
                  _classPrivateFieldGet(_boxes, this),
                  0.001,
               );
               _classPrivateFieldSet(
                  _highlightOutlines,
                  this,
                  outliner.getOutlines(),
               );
               var _classPrivateFieldGet22 = _classPrivateFieldGet(
                  _highlightOutlines,
                  this,
               ).box;
               this.x = _classPrivateFieldGet22.x;
               this.y = _classPrivateFieldGet22.y;
               this.width = _classPrivateFieldGet22.width;
               this.height = _classPrivateFieldGet22.height;
               var outlinerForOutline = new editor_outliner.Outliner(
                  _classPrivateFieldGet(_boxes, this),
                  0.0025,
                  0.001,
                  this._uiManager.direction === "ltr",
               );
               _classPrivateFieldSet(
                  _focusOutlines,
                  this,
                  outlinerForOutline.getOutlines(),
               );
               var lastPoint = _classPrivateFieldGet(_focusOutlines, this).box
                  .lastPoint;
               _classPrivateFieldSet(_lastPoint, this, [
                  (lastPoint[0] - this.x) / this.width,
                  (lastPoint[1] - this.y) / this.height,
               ]);
            }
            function _createFreeOutlines(_ref80) {
               var highlightOutlines = _ref80.highlightOutlines,
                  highlightId = _ref80.highlightId,
                  clipPathId = _ref80.clipPathId;
               _classPrivateFieldSet(
                  _highlightOutlines,
                  this,
                  highlightOutlines,
               );
               var extraThickness = 1.5;
               _classPrivateFieldSet(
                  _focusOutlines,
                  this,
                  highlightOutlines.getNewOutline(
                     _classPrivateFieldGet(_thickness, this) / 2 +
                        extraThickness,
                     0.0025,
                  ),
               );
               if (highlightId >= 0) {
                  _classPrivateFieldSet(_id5, this, highlightId);
                  _classPrivateFieldSet(_clipPathId, this, clipPathId);
                  this.parent.drawLayer.finalizeLine(
                     highlightId,
                     highlightOutlines,
                  );
                  _classPrivateFieldSet(
                     _outlineId,
                     this,
                     this.parent.drawLayer.highlightOutline(
                        _classPrivateFieldGet(_focusOutlines, this),
                     ),
                  );
               } else if (this.parent) {
                  var angle = this.parent.viewport.rotation;
                  this.parent.drawLayer.updateLine(
                     _classPrivateFieldGet(_id5, this),
                     highlightOutlines,
                  );
                  this.parent.drawLayer.updateBox(
                     _classPrivateFieldGet(_id5, this),
                     _rotateBbox.call(
                        _HighlightEditor,
                        _classPrivateFieldGet(_highlightOutlines, this).box,
                        (angle - this.rotation + 360) % 360,
                     ),
                  );
                  this.parent.drawLayer.updateLine(
                     _classPrivateFieldGet(_outlineId, this),
                     _classPrivateFieldGet(_focusOutlines, this),
                  );
                  this.parent.drawLayer.updateBox(
                     _classPrivateFieldGet(_outlineId, this),
                     _rotateBbox.call(
                        _HighlightEditor,
                        _classPrivateFieldGet(_focusOutlines, this).box,
                        angle,
                     ),
                  );
               }
               var _highlightOutlines$bo = highlightOutlines.box,
                  x = _highlightOutlines$bo.x,
                  y = _highlightOutlines$bo.y,
                  width = _highlightOutlines$bo.width,
                  height = _highlightOutlines$bo.height;
               switch (this.rotation) {
                  case 0:
                     this.x = x;
                     this.y = y;
                     this.width = width;
                     this.height = height;
                     break;
                  case 90: {
                     var _this$parentDimension8 = _slicedToArray(
                           this.parentDimensions,
                           2,
                        ),
                        pageWidth = _this$parentDimension8[0],
                        pageHeight = _this$parentDimension8[1];
                     this.x = y;
                     this.y = 1 - x;
                     this.width = (width * pageHeight) / pageWidth;
                     this.height = (height * pageWidth) / pageHeight;
                     break;
                  }
                  case 180:
                     this.x = 1 - x;
                     this.y = 1 - y;
                     this.width = width;
                     this.height = height;
                     break;
                  case 270: {
                     var _this$parentDimension9 = _slicedToArray(
                           this.parentDimensions,
                           2,
                        ),
                        _pageWidth = _this$parentDimension9[0],
                        _pageHeight = _this$parentDimension9[1];
                     this.x = 1 - y;
                     this.y = x;
                     this.width = (width * _pageHeight) / _pageWidth;
                     this.height = (height * _pageWidth) / _pageHeight;
                     break;
                  }
               }
               var lastPoint = _classPrivateFieldGet(_focusOutlines, this).box
                  .lastPoint;
               _classPrivateFieldSet(_lastPoint, this, [
                  (lastPoint[0] - x) / width,
                  (lastPoint[1] - y) / height,
               ]);
            }
            function _updateColor2(color) {
               var _this64 = this;
               var setColor = function setColor(col) {
                  var _this64$parent, _classPrivateFieldGet23;
                  _this64.color = col;
                  (_this64$parent = _this64.parent) === null ||
                     _this64$parent === void 0 ||
                     _this64$parent.drawLayer.changeColor(
                        _classPrivateFieldGet(_id5, _this64),
                        col,
                     );
                  (_classPrivateFieldGet23 = _classPrivateFieldGet(
                     _colorPicker,
                     _this64,
                  )) === null ||
                     _classPrivateFieldGet23 === void 0 ||
                     _classPrivateFieldGet23.updateColor(col);
               };
               var savedColor = this.color;
               this.addCommands({
                  cmd: setColor.bind(this, color),
                  undo: setColor.bind(this, savedColor),
                  post: this._uiManager.updateUI.bind(this._uiManager, this),
                  mustExec: true,
                  type: util.AnnotationEditorParamsType.HIGHLIGHT_COLOR,
                  overwriteIfSameType: true,
                  keepUndo: true,
               });
               this._reportTelemetry(
                  {
                     action: "color_changed",
                     color: this._uiManager.highlightColorNames.get(color),
                  },
                  true,
               );
            }
            function _updateThickness(thickness) {
               var _this65 = this;
               var savedThickness = _classPrivateFieldGet(_thickness, this);
               var setThickness = function setThickness(th) {
                  _classPrivateFieldSet(_thickness, _this65, th);
                  _assertClassBrand(
                     _HighlightEditor_brand,
                     _this65,
                     _changeThickness,
                  ).call(_this65, th);
               };
               this.addCommands({
                  cmd: setThickness.bind(this, thickness),
                  undo: setThickness.bind(this, savedThickness),
                  post: this._uiManager.updateUI.bind(this._uiManager, this),
                  mustExec: true,
                  type: util.AnnotationEditorParamsType.INK_THICKNESS,
                  overwriteIfSameType: true,
                  keepUndo: true,
               });
               this._reportTelemetry(
                  { action: "thickness_changed", thickness: thickness },
                  true,
               );
            }
            function _changeThickness(thickness) {
               if (!_classPrivateFieldGet(_isFreeHighlight, this)) {
                  return;
               }
               _assertClassBrand(
                  _HighlightEditor_brand,
                  this,
                  _createFreeOutlines,
               ).call(this, {
                  highlightOutlines: _classPrivateFieldGet(
                     _highlightOutlines,
                     this,
                  ).getNewOutline(thickness / 2),
               });
               this.fixAndSetPosition();
               var _this$parentDimension0 = _slicedToArray(
                     this.parentDimensions,
                     2,
                  ),
                  parentWidth = _this$parentDimension0[0],
                  parentHeight = _this$parentDimension0[1];
               this.setDims(
                  this.width * parentWidth,
                  this.height * parentHeight,
               );
            }
            function _cleanDrawLayer() {
               if (_classPrivateFieldGet(_id5, this) === null || !this.parent) {
                  return;
               }
               this.parent.drawLayer.remove(_classPrivateFieldGet(_id5, this));
               _classPrivateFieldSet(_id5, this, null);
               this.parent.drawLayer.remove(
                  _classPrivateFieldGet(_outlineId, this),
               );
               _classPrivateFieldSet(_outlineId, this, null);
            }
            function _addToDrawLayer() {
               var parent =
                  arguments.length > 0 && arguments[0] !== undefined
                     ? arguments[0]
                     : this.parent;
               if (_classPrivateFieldGet(_id5, this) !== null) {
                  return;
               }
               var _parent$drawLayer$hig2 = parent.drawLayer.highlight(
                  _classPrivateFieldGet(_highlightOutlines, this),
                  this.color,
                  _classPrivateFieldGet(_opacity, this),
               );
               _toSetter(_classPrivateFieldSet, [_id5, this])._ =
                  _parent$drawLayer$hig2.id;
               _toSetter(_classPrivateFieldSet, [_clipPathId, this])._ =
                  _parent$drawLayer$hig2.clipPathId;
               _classPrivateFieldSet(
                  _outlineId,
                  this,
                  parent.drawLayer.highlightOutline(
                     _classPrivateFieldGet(_focusOutlines, this),
                  ),
               );
               if (_classPrivateFieldGet(_highlightDiv, this)) {
                  _classPrivateFieldGet(_highlightDiv, this).style.clipPath =
                     _classPrivateFieldGet(_clipPathId, this);
               }
            }
            function _rotateBbox(_ref81, angle) {
               var x = _ref81.x,
                  y = _ref81.y,
                  width = _ref81.width,
                  height = _ref81.height;
               switch (angle) {
                  case 90:
                     return {
                        x: 1 - y - height,
                        y: x,
                        width: height,
                        height: width,
                     };
                  case 180:
                     return {
                        x: 1 - x - width,
                        y: 1 - y - height,
                        width: width,
                        height: height,
                     };
                  case 270:
                     return {
                        x: y,
                        y: 1 - x - width,
                        width: height,
                        height: width,
                     };
               }
               return { x: x, y: y, width: width, height: height };
            }
            function _keydown(event) {
               _HighlightEditor._keyboardManager.exec(this, event);
            }
            function _setCaret(start) {
               if (!_classPrivateFieldGet(_anchorNode, this)) {
                  return;
               }
               var selection = window.getSelection();
               if (start) {
                  selection.setPosition(
                     _classPrivateFieldGet(_anchorNode, this),
                     _classPrivateFieldGet(_anchorOffset, this),
                  );
               } else {
                  selection.setPosition(
                     _classPrivateFieldGet(_focusNode, this),
                     _classPrivateFieldGet(_focusOffset, this),
                  );
               }
            }
            function _getRotation() {
               return _classPrivateFieldGet(_isFreeHighlight, this)
                  ? this.rotation
                  : 0;
            }
            function _serializeBoxes() {
               if (_classPrivateFieldGet(_isFreeHighlight, this)) {
                  return null;
               }
               var _this$pageDimensions2 = _slicedToArray(
                     this.pageDimensions,
                     2,
                  ),
                  pageWidth = _this$pageDimensions2[0],
                  pageHeight = _this$pageDimensions2[1];
               var boxes = _classPrivateFieldGet(_boxes, this);
               var quadPoints = new Array(boxes.length * 8);
               var i = 0;
               var _iterator81 = _createForOfIteratorHelper(boxes),
                  _step81;
               try {
                  for (_iterator81.s(); !(_step81 = _iterator81.n()).done; ) {
                     var _step81$value = _step81.value,
                        x = _step81$value.x,
                        y = _step81$value.y,
                        width = _step81$value.width,
                        height = _step81$value.height;
                     var sx = x * pageWidth;
                     var sy = (1 - y - height) * pageHeight;
                     quadPoints[i] = quadPoints[i + 4] = sx;
                     quadPoints[i + 1] = quadPoints[i + 3] = sy;
                     quadPoints[i + 2] = quadPoints[i + 6] =
                        sx + width * pageWidth;
                     quadPoints[i + 5] = quadPoints[i + 7] =
                        sy + height * pageHeight;
                     i += 8;
                  }
               } catch (err) {
                  _iterator81.e(err);
               } finally {
                  _iterator81.f();
               }
               return quadPoints;
            }
            function _serializeOutlines(rect) {
               return _classPrivateFieldGet(_highlightOutlines, this).serialize(
                  rect,
                  _assertClassBrand(
                     _HighlightEditor_brand,
                     this,
                     _getRotation,
                  ).call(this),
               );
            }
            function _highlightMove(parent, event) {
               if (this._freeHighlight.add(event)) {
                  parent.drawLayer.updatePath(
                     this._freeHighlightId,
                     this._freeHighlight,
                  );
               }
            }
            function _endHighlight(parent, event) {
               if (!this._freeHighlight.isEmpty()) {
                  parent.createAndAddNewEditor(event, false, {
                     highlightId: this._freeHighlightId,
                     highlightOutlines: this._freeHighlight.getOutlines(),
                     clipPathId: this._freeHighlightClipId,
                     methodOfCreation: "main_toolbar",
                  });
               } else {
                  parent.drawLayer.removeFreeHighlight(this._freeHighlightId);
               }
               this._freeHighlightId = -1;
               this._freeHighlight = null;
               this._freeHighlightClipId = "";
            }
            _defineProperty(HighlightEditor, "_defaultColor", null);
            _defineProperty(HighlightEditor, "_defaultOpacity", 1);
            _defineProperty(HighlightEditor, "_defaultThickness", 12);
            _defineProperty(HighlightEditor, "_l10nPromise", void 0);
            _defineProperty(HighlightEditor, "_type", "highlight");
            _defineProperty(
               HighlightEditor,
               "_editorType",
               util.AnnotationEditorType.HIGHLIGHT,
            );
            _defineProperty(HighlightEditor, "_freeHighlightId", -1);
            _defineProperty(HighlightEditor, "_freeHighlight", null);
            _defineProperty(HighlightEditor, "_freeHighlightClipId", ""); // CONCATENATED MODULE: ./src/display/editor/ink.js
            var _baseHeight = /*#__PURE__*/ new WeakMap();
            var _baseWidth = /*#__PURE__*/ new WeakMap();
            var _boundCanvasPointermove = /*#__PURE__*/ new WeakMap();
            var _boundCanvasPointerleave = /*#__PURE__*/ new WeakMap();
            var _boundCanvasPointerup = /*#__PURE__*/ new WeakMap();
            var _boundCanvasPointerdown = /*#__PURE__*/ new WeakMap();
            var _canvasContextMenuTimeoutId = /*#__PURE__*/ new WeakMap();
            var _currentPath2D = /*#__PURE__*/ new WeakMap();
            var _disableEditing = /*#__PURE__*/ new WeakMap();
            var _hasSomethingToDraw = /*#__PURE__*/ new WeakMap();
            var _isCanvasInitialized = /*#__PURE__*/ new WeakMap();
            var _observer = /*#__PURE__*/ new WeakMap();
            var _realWidth = /*#__PURE__*/ new WeakMap();
            var _realHeight = /*#__PURE__*/ new WeakMap();
            var _requestFrameCallback = /*#__PURE__*/ new WeakMap();
            var _InkEditor_brand = /*#__PURE__*/ new WeakSet();
            var InkEditor = /*#__PURE__*/ (function (_editor_editor$Annota3) {
               function InkEditor(params) {
                  var _this58;
                  _classCallCheck(this, InkEditor);
                  _this58 = _callSuper(this, InkEditor, [
                     _objectSpread(
                        _objectSpread({}, params),
                        {},
                        { name: "inkEditor" },
                     ),
                  ]);
                  _classPrivateMethodInitSpec(_this58, _InkEditor_brand);
                  _classPrivateFieldInitSpec(_this58, _baseHeight, 0);
                  _classPrivateFieldInitSpec(_this58, _baseWidth, 0);
                  _classPrivateFieldInitSpec(
                     _this58,
                     _boundCanvasPointermove,
                     _this58.canvasPointermove.bind(_this58),
                  );
                  _classPrivateFieldInitSpec(
                     _this58,
                     _boundCanvasPointerleave,
                     _this58.canvasPointerleave.bind(_this58),
                  );
                  _classPrivateFieldInitSpec(
                     _this58,
                     _boundCanvasPointerup,
                     _this58.canvasPointerup.bind(_this58),
                  );
                  _classPrivateFieldInitSpec(
                     _this58,
                     _boundCanvasPointerdown,
                     _this58.canvasPointerdown.bind(_this58),
                  );
                  _classPrivateFieldInitSpec(
                     _this58,
                     _canvasContextMenuTimeoutId,
                     null,
                  );
                  _classPrivateFieldInitSpec(
                     _this58,
                     _currentPath2D,
                     new Path2D(),
                  );
                  _classPrivateFieldInitSpec(_this58, _disableEditing, false);
                  _classPrivateFieldInitSpec(
                     _this58,
                     _hasSomethingToDraw,
                     false,
                  );
                  _classPrivateFieldInitSpec(
                     _this58,
                     _isCanvasInitialized,
                     false,
                  );
                  _classPrivateFieldInitSpec(_this58, _observer, null);
                  _classPrivateFieldInitSpec(_this58, _realWidth, 0);
                  _classPrivateFieldInitSpec(_this58, _realHeight, 0);
                  _classPrivateFieldInitSpec(
                     _this58,
                     _requestFrameCallback,
                     null,
                  );
                  _this58.color = params.color || null;
                  _this58.thickness = params.thickness || null;
                  _this58.opacity = params.opacity || null;
                  _this58.paths = [];
                  _this58.bezierPath2D = [];
                  _this58.allRawPaths = [];
                  _this58.currentPath = [];
                  _this58.scaleFactor = 1;
                  _this58.translationX = _this58.translationY = 0;
                  _this58.x = 0;
                  _this58.y = 0;
                  _this58._willKeepAspectRatio = true;
                  return _this58;
               }
               _inherits(InkEditor, _editor_editor$Annota3);
               return _createClass(
                  InkEditor,
                  [
                     {
                        key: "updateParams",
                        value: function updateParams(type, value) {
                           switch (type) {
                              case util.AnnotationEditorParamsType
                                 .INK_THICKNESS:
                                 _assertClassBrand(
                                    _InkEditor_brand,
                                    this,
                                    _updateThickness2,
                                 ).call(this, value);
                                 break;
                              case util.AnnotationEditorParamsType.INK_COLOR:
                                 _assertClassBrand(
                                    _InkEditor_brand,
                                    this,
                                    _updateColor3,
                                 ).call(this, value);
                                 break;
                              case util.AnnotationEditorParamsType.INK_OPACITY:
                                 _assertClassBrand(
                                    _InkEditor_brand,
                                    this,
                                    _updateOpacity,
                                 ).call(this, value);
                                 break;
                           }
                        },
                     },
                     {
                        key: "propertiesToUpdate",
                        get: function get() {
                           var _this$opacity;
                           return [
                              [
                                 util.AnnotationEditorParamsType.INK_THICKNESS,
                                 this.thickness || InkEditor._defaultThickness,
                              ],
                              [
                                 util.AnnotationEditorParamsType.INK_COLOR,
                                 this.color ||
                                    InkEditor._defaultColor ||
                                    editor_editor.AnnotationEditor
                                       ._defaultLineColor,
                              ],
                              [
                                 util.AnnotationEditorParamsType.INK_OPACITY,
                                 Math.round(
                                    100 *
                                       ((_this$opacity = this.opacity) !==
                                          null && _this$opacity !== void 0
                                          ? _this$opacity
                                          : InkEditor._defaultOpacity),
                                 ),
                              ],
                           ];
                        },
                     },
                     {
                        key: "rebuild",
                        value: function rebuild() {
                           if (!this.parent) {
                              return;
                           }
                           _superPropGet(InkEditor, "rebuild", this, 3)([]);
                           if (this.div === null) {
                              return;
                           }
                           if (!this.canvas) {
                              _assertClassBrand(
                                 _InkEditor_brand,
                                 this,
                                 _createCanvas2,
                              ).call(this);
                              _assertClassBrand(
                                 _InkEditor_brand,
                                 this,
                                 _createObserver,
                              ).call(this);
                           }
                           if (!this.isAttachedToDOM) {
                              this.parent.add(this);
                              _assertClassBrand(
                                 _InkEditor_brand,
                                 this,
                                 _setCanvasDims,
                              ).call(this);
                           }
                           _assertClassBrand(
                              _InkEditor_brand,
                              this,
                              _fitToContent,
                           ).call(this);
                        },
                     },
                     {
                        key: "remove",
                        value: function remove() {
                           if (this.canvas === null) {
                              return;
                           }
                           if (!this.isEmpty()) {
                              this.commit();
                           }
                           this.canvas.width = this.canvas.height = 0;
                           this.canvas.remove();
                           this.canvas = null;
                           if (
                              _classPrivateFieldGet(
                                 _canvasContextMenuTimeoutId,
                                 this,
                              )
                           ) {
                              clearTimeout(
                                 _classPrivateFieldGet(
                                    _canvasContextMenuTimeoutId,
                                    this,
                                 ),
                              );
                              _classPrivateFieldSet(
                                 _canvasContextMenuTimeoutId,
                                 this,
                                 null,
                              );
                           }
                           _classPrivateFieldGet(_observer, this).disconnect();
                           _classPrivateFieldSet(_observer, this, null);
                           _superPropGet(InkEditor, "remove", this, 3)([]);
                        },
                     },
                     {
                        key: "setParent",
                        value: function setParent(parent) {
                           if (!this.parent && parent) {
                              this._uiManager.removeShouldRescale(this);
                           } else if (this.parent && parent === null) {
                              this._uiManager.addShouldRescale(this);
                           }
                           _superPropGet(
                              InkEditor,
                              "setParent",
                              this,
                              3,
                           )([parent]);
                        },
                     },
                     {
                        key: "onScaleChanging",
                        value: function onScaleChanging() {
                           var _this$parentDimension3 = _slicedToArray(
                                 this.parentDimensions,
                                 2,
                              ),
                              parentWidth = _this$parentDimension3[0],
                              parentHeight = _this$parentDimension3[1];
                           var width = this.width * parentWidth;
                           var height = this.height * parentHeight;
                           this.setDimensions(width, height);
                        },
                     },
                     {
                        key: "enableEditMode",
                        value: function enableEditMode() {
                           if (
                              _classPrivateFieldGet(_disableEditing, this) ||
                              this.canvas === null
                           ) {
                              return;
                           }
                           _superPropGet(
                              InkEditor,
                              "enableEditMode",
                              this,
                              3,
                           )([]);
                           this._isDraggable = false;
                           this.canvas.addEventListener(
                              "pointerdown",
                              _classPrivateFieldGet(
                                 _boundCanvasPointerdown,
                                 this,
                              ),
                           );
                        },
                     },
                     {
                        key: "disableEditMode",
                        value: function disableEditMode() {
                           if (!this.isInEditMode() || this.canvas === null) {
                              return;
                           }
                           _superPropGet(
                              InkEditor,
                              "disableEditMode",
                              this,
                              3,
                           )([]);
                           this._isDraggable = !this.isEmpty();
                           this.div.classList.remove("editing");
                           this.canvas.removeEventListener(
                              "pointerdown",
                              _classPrivateFieldGet(
                                 _boundCanvasPointerdown,
                                 this,
                              ),
                           );
                        },
                     },
                     {
                        key: "onceAdded",
                        value: function onceAdded() {
                           this._isDraggable = !this.isEmpty();
                        },
                     },
                     {
                        key: "isEmpty",
                        value: function isEmpty() {
                           return (
                              this.paths.length === 0 ||
                              (this.paths.length === 1 &&
                                 this.paths[0].length === 0)
                           );
                        },
                     },
                     {
                        key: "commit",
                        value: function commit() {
                           if (_classPrivateFieldGet(_disableEditing, this)) {
                              return;
                           }
                           _superPropGet(InkEditor, "commit", this, 3)([]);
                           this.isEditing = false;
                           this.disableEditMode();
                           this.setInForeground();
                           _classPrivateFieldSet(_disableEditing, this, true);
                           this.div.classList.add("disabled");
                           _assertClassBrand(
                              _InkEditor_brand,
                              this,
                              _fitToContent,
                           ).call(this, true);
                           this.select();
                           this.parent.addInkEditorIfNeeded(true);
                           this.moveInDOM();
                           this.div.focus({ preventScroll: true });
                        },
                     },
                     {
                        key: "focusin",
                        value: function focusin(event) {
                           if (!this._focusEventsAllowed) {
                              return;
                           }
                           _superPropGet(
                              InkEditor,
                              "focusin",
                              this,
                              3,
                           )([event]);
                           this.enableEditMode();
                        },
                     },
                     {
                        key: "canvasPointerdown",
                        value: function canvasPointerdown(event) {
                           if (
                              event.button !== 0 ||
                              !this.isInEditMode() ||
                              _classPrivateFieldGet(_disableEditing, this)
                           ) {
                              return;
                           }
                           this.setInForeground();
                           event.preventDefault();
                           if (!this.div.contains(document.activeElement)) {
                              this.div.focus({ preventScroll: true });
                           }
                           _assertClassBrand(
                              _InkEditor_brand,
                              this,
                              _startDrawing,
                           ).call(this, event.offsetX, event.offsetY);
                        },
                     },
                     {
                        key: "canvasPointermove",
                        value: function canvasPointermove(event) {
                           event.preventDefault();
                           _assertClassBrand(
                              _InkEditor_brand,
                              this,
                              _draw,
                           ).call(this, event.offsetX, event.offsetY);
                        },
                     },
                     {
                        key: "canvasPointerup",
                        value: function canvasPointerup(event) {
                           event.preventDefault();
                           _assertClassBrand(
                              _InkEditor_brand,
                              this,
                              _endDrawing,
                           ).call(this, event);
                        },
                     },
                     {
                        key: "canvasPointerleave",
                        value: function canvasPointerleave(event) {
                           _assertClassBrand(
                              _InkEditor_brand,
                              this,
                              _endDrawing,
                           ).call(this, event);
                        },
                     },
                     {
                        key: "isResizable",
                        get: function get() {
                           return (
                              !this.isEmpty() &&
                              _classPrivateFieldGet(_disableEditing, this)
                           );
                        },
                     },
                     {
                        key: "render",
                        value: function render() {
                           if (this.div) {
                              return this.div;
                           }
                           var baseX, baseY;
                           if (this.width) {
                              baseX = this.x;
                              baseY = this.y;
                           }
                           _superPropGet(InkEditor, "render", this, 3)([]);
                           this.div.setAttribute("data-l10n-id", "pdfjs-ink");
                           var _assertClassBrand$cal = _assertClassBrand(
                                 _InkEditor_brand,
                                 this,
                                 _getInitialBBox,
                              ).call(this),
                              _assertClassBrand$cal2 = _slicedToArray(
                                 _assertClassBrand$cal,
                                 4,
                              ),
                              x = _assertClassBrand$cal2[0],
                              y = _assertClassBrand$cal2[1],
                              w = _assertClassBrand$cal2[2],
                              h = _assertClassBrand$cal2[3];
                           this.setAt(x, y, 0, 0);
                           this.setDims(w, h);
                           _assertClassBrand(
                              _InkEditor_brand,
                              this,
                              _createCanvas2,
                           ).call(this);
                           if (this.width) {
                              var _this$parentDimension4 = _slicedToArray(
                                    this.parentDimensions,
                                    2,
                                 ),
                                 parentWidth = _this$parentDimension4[0],
                                 parentHeight = _this$parentDimension4[1];
                              this.setAspectRatio(
                                 this.width * parentWidth,
                                 this.height * parentHeight,
                              );
                              this.setAt(
                                 baseX * parentWidth,
                                 baseY * parentHeight,
                                 this.width * parentWidth,
                                 this.height * parentHeight,
                              );
                              _classPrivateFieldSet(
                                 _isCanvasInitialized,
                                 this,
                                 true,
                              );
                              _assertClassBrand(
                                 _InkEditor_brand,
                                 this,
                                 _setCanvasDims,
                              ).call(this);
                              this.setDims(
                                 this.width * parentWidth,
                                 this.height * parentHeight,
                              );
                              _assertClassBrand(
                                 _InkEditor_brand,
                                 this,
                                 _redraw,
                              ).call(this);
                              this.div.classList.add("disabled");
                           } else {
                              this.div.classList.add("editing");
                              this.enableEditMode();
                           }
                           _assertClassBrand(
                              _InkEditor_brand,
                              this,
                              _createObserver,
                           ).call(this);
                           return this.div;
                        },
                     },
                     {
                        key: "setDimensions",
                        value: function setDimensions(width, height) {
                           var roundedWidth = Math.round(width);
                           var roundedHeight = Math.round(height);
                           if (
                              _classPrivateFieldGet(_realWidth, this) ===
                                 roundedWidth &&
                              _classPrivateFieldGet(_realHeight, this) ===
                                 roundedHeight
                           ) {
                              return;
                           }
                           _classPrivateFieldSet(
                              _realWidth,
                              this,
                              roundedWidth,
                           );
                           _classPrivateFieldSet(
                              _realHeight,
                              this,
                              roundedHeight,
                           );
                           this.canvas.style.visibility = "hidden";
                           var _this$parentDimension5 = _slicedToArray(
                                 this.parentDimensions,
                                 2,
                              ),
                              parentWidth = _this$parentDimension5[0],
                              parentHeight = _this$parentDimension5[1];
                           this.width = width / parentWidth;
                           this.height = height / parentHeight;
                           this.fixAndSetPosition();
                           if (_classPrivateFieldGet(_disableEditing, this)) {
                              _assertClassBrand(
                                 _InkEditor_brand,
                                 this,
                                 _setScaleFactor,
                              ).call(this, width, height);
                           }
                           _assertClassBrand(
                              _InkEditor_brand,
                              this,
                              _setCanvasDims,
                           ).call(this);
                           _assertClassBrand(
                              _InkEditor_brand,
                              this,
                              _redraw,
                           ).call(this);
                           this.canvas.style.visibility = "visible";
                           this.fixDims();
                        },
                     },
                     {
                        key: "serialize",
                        value: function serialize() {
                           if (this.isEmpty()) {
                              return null;
                           }
                           var rect = this.getRect(0, 0);
                           var color =
                              editor_editor.AnnotationEditor._colorManager.convert(
                                 this.ctx.strokeStyle,
                              );
                           return {
                              annotationType: util.AnnotationEditorType.INK,
                              color: color,
                              thickness: this.thickness,
                              opacity: this.opacity,
                              paths: _assertClassBrand(
                                 _InkEditor_brand,
                                 this,
                                 _serializePaths,
                              ).call(
                                 this,
                                 this.scaleFactor / this.parentScale,
                                 this.translationX,
                                 this.translationY,
                                 rect,
                              ),
                              pageIndex: this.pageIndex,
                              rect: rect,
                              rotation: this.rotation,
                              structTreeParentId: this._structTreeParentId,
                           };
                        },
                     },
                  ],
                  [
                     {
                        key: "initialize",
                        value: function initialize(l10n, uiManager) {
                           editor_editor.AnnotationEditor.initialize(
                              l10n,
                              uiManager,
                           );
                        },
                     },
                     {
                        key: "updateDefaultParams",
                        value: function updateDefaultParams(type, value) {
                           switch (type) {
                              case util.AnnotationEditorParamsType
                                 .INK_THICKNESS:
                                 InkEditor._defaultThickness = value;
                                 break;
                              case util.AnnotationEditorParamsType.INK_COLOR:
                                 InkEditor._defaultColor = value;
                                 break;
                              case util.AnnotationEditorParamsType.INK_OPACITY:
                                 InkEditor._defaultOpacity = value / 100;
                                 break;
                           }
                        },
                     },
                     {
                        key: "defaultPropertiesToUpdate",
                        get: function get() {
                           return [
                              [
                                 util.AnnotationEditorParamsType.INK_THICKNESS,
                                 InkEditor._defaultThickness,
                              ],
                              [
                                 util.AnnotationEditorParamsType.INK_COLOR,
                                 InkEditor._defaultColor ||
                                    editor_editor.AnnotationEditor
                                       ._defaultLineColor,
                              ],
                              [
                                 util.AnnotationEditorParamsType.INK_OPACITY,
                                 Math.round(InkEditor._defaultOpacity * 100),
                              ],
                           ];
                        },
                     },
                     {
                        key: "deserialize",
                        value: function deserialize(data, parent, uiManager) {
                           var _util$Util5;
                           if (
                              data instanceof
                              annotation_layer.InkAnnotationElement
                           ) {
                              return null;
                           }
                           var editor = _superPropGet(
                              InkEditor,
                              "deserialize",
                              this,
                              2,
                           )([data, parent, uiManager]);
                           editor.thickness = data.thickness;
                           editor.color = (_util$Util5 =
                              util.Util).makeHexColor.apply(
                              _util$Util5,
                              _toConsumableArray(data.color),
                           );
                           editor.opacity = data.opacity;
                           var _editor$pageDimension2 = _slicedToArray(
                                 editor.pageDimensions,
                                 2,
                              ),
                              pageWidth = _editor$pageDimension2[0],
                              pageHeight = _editor$pageDimension2[1];
                           var width = editor.width * pageWidth;
                           var height = editor.height * pageHeight;
                           var scaleFactor = editor.parentScale;
                           var padding = data.thickness / 2;
                           _classPrivateFieldSet(_disableEditing, editor, true);
                           _classPrivateFieldSet(
                              _realWidth,
                              editor,
                              Math.round(width),
                           );
                           _classPrivateFieldSet(
                              _realHeight,
                              editor,
                              Math.round(height),
                           );
                           var paths = data.paths,
                              rect = data.rect,
                              rotation = data.rotation;
                           var _iterator67 = _createForOfIteratorHelper(paths),
                              _step67;
                           try {
                              for (
                                 _iterator67.s();
                                 !(_step67 = _iterator67.n()).done;

                              ) {
                                 var bezier = _step67.value.bezier;
                                 bezier = _fromPDFCoordinates.call(
                                    InkEditor,
                                    bezier,
                                    rect,
                                    rotation,
                                 );
                                 var path = [];
                                 editor.paths.push(path);
                                 var p0 = scaleFactor * (bezier[0] - padding);
                                 var p1 = scaleFactor * (bezier[1] - padding);
                                 for (
                                    var i = 2, ii = bezier.length;
                                    i < ii;
                                    i += 6
                                 ) {
                                    var p10 =
                                       scaleFactor * (bezier[i] - padding);
                                    var p11 =
                                       scaleFactor * (bezier[i + 1] - padding);
                                    var p20 =
                                       scaleFactor * (bezier[i + 2] - padding);
                                    var p21 =
                                       scaleFactor * (bezier[i + 3] - padding);
                                    var p30 =
                                       scaleFactor * (bezier[i + 4] - padding);
                                    var p31 =
                                       scaleFactor * (bezier[i + 5] - padding);
                                    path.push([
                                       [p0, p1],
                                       [p10, p11],
                                       [p20, p21],
                                       [p30, p31],
                                    ]);
                                    p0 = p30;
                                    p1 = p31;
                                 }
                                 var path2D = _assertClassBrand(
                                    InkEditor,
                                    this,
                                    _buildPath2D,
                                 ).call(this, path);
                                 editor.bezierPath2D.push(path2D);
                              }
                           } catch (err) {
                              _iterator67.e(err);
                           } finally {
                              _iterator67.f();
                           }
                           var bbox = _assertClassBrand(
                              _InkEditor_brand,
                              editor,
                              _getBbox,
                           ).call(editor);
                           _classPrivateFieldSet(
                              _baseWidth,
                              editor,
                              Math.max(
                                 editor_editor.AnnotationEditor.MIN_SIZE,
                                 bbox[2] - bbox[0],
                              ),
                           );
                           _classPrivateFieldSet(
                              _baseHeight,
                              editor,
                              Math.max(
                                 editor_editor.AnnotationEditor.MIN_SIZE,
                                 bbox[3] - bbox[1],
                              ),
                           );
                           _assertClassBrand(
                              _InkEditor_brand,
                              editor,
                              _setScaleFactor,
                           ).call(editor, width, height);
                           return editor;
                        },
                     },
                  ],
               );
            })(editor_editor.AnnotationEditor);
            _InkEditor = InkEditor;
            function _updateThickness2(thickness) {
               var _this66 = this;
               var setThickness = function setThickness(th) {
                  _this66.thickness = th;
                  _assertClassBrand(
                     _InkEditor_brand,
                     _this66,
                     _fitToContent,
                  ).call(_this66);
               };
               var savedThickness = this.thickness;
               this.addCommands({
                  cmd: setThickness.bind(this, thickness),
                  undo: setThickness.bind(this, savedThickness),
                  post: this._uiManager.updateUI.bind(this._uiManager, this),
                  mustExec: true,
                  type: util.AnnotationEditorParamsType.INK_THICKNESS,
                  overwriteIfSameType: true,
                  keepUndo: true,
               });
            }
            function _updateColor3(color) {
               var _this67 = this;
               var setColor = function setColor(col) {
                  _this67.color = col;
                  _assertClassBrand(_InkEditor_brand, _this67, _redraw).call(
                     _this67,
                  );
               };
               var savedColor = this.color;
               this.addCommands({
                  cmd: setColor.bind(this, color),
                  undo: setColor.bind(this, savedColor),
                  post: this._uiManager.updateUI.bind(this._uiManager, this),
                  mustExec: true,
                  type: util.AnnotationEditorParamsType.INK_COLOR,
                  overwriteIfSameType: true,
                  keepUndo: true,
               });
            }
            function _updateOpacity(opacity) {
               var _this68 = this;
               var setOpacity = function setOpacity(op) {
                  _this68.opacity = op;
                  _assertClassBrand(_InkEditor_brand, _this68, _redraw).call(
                     _this68,
                  );
               };
               opacity /= 100;
               var savedOpacity = this.opacity;
               this.addCommands({
                  cmd: setOpacity.bind(this, opacity),
                  undo: setOpacity.bind(this, savedOpacity),
                  post: this._uiManager.updateUI.bind(this._uiManager, this),
                  mustExec: true,
                  type: util.AnnotationEditorParamsType.INK_OPACITY,
                  overwriteIfSameType: true,
                  keepUndo: true,
               });
            }
            function _getInitialBBox() {
               var parentRotation = this.parentRotation,
                  _this$parentDimension1 = _slicedToArray(
                     this.parentDimensions,
                     2,
                  ),
                  width = _this$parentDimension1[0],
                  height = _this$parentDimension1[1];
               switch (parentRotation) {
                  case 90:
                     return [0, height, height, width];
                  case 180:
                     return [width, height, width, height];
                  case 270:
                     return [width, 0, height, width];
                  default:
                     return [0, 0, width, height];
               }
            }
            function _setStroke() {
               var ctx = this.ctx,
                  color = this.color,
                  opacity = this.opacity,
                  thickness = this.thickness,
                  parentScale = this.parentScale,
                  scaleFactor = this.scaleFactor;
               ctx.lineWidth = (thickness * parentScale) / scaleFactor;
               ctx.lineCap = "round";
               ctx.lineJoin = "round";
               ctx.miterLimit = 10;
               ctx.strokeStyle = ""
                  .concat(color)
                  .concat((0, tools.opacityToHex)(opacity));
            }
            function _startDrawing(x, y) {
               var _this69 = this;
               this.canvas.addEventListener(
                  "contextmenu",
                  display_utils.noContextMenu,
               );
               this.canvas.addEventListener(
                  "pointerleave",
                  _classPrivateFieldGet(_boundCanvasPointerleave, this),
               );
               this.canvas.addEventListener(
                  "pointermove",
                  _classPrivateFieldGet(_boundCanvasPointermove, this),
               );
               this.canvas.addEventListener(
                  "pointerup",
                  _classPrivateFieldGet(_boundCanvasPointerup, this),
               );
               this.canvas.removeEventListener(
                  "pointerdown",
                  _classPrivateFieldGet(_boundCanvasPointerdown, this),
               );
               this.isEditing = true;
               if (!_classPrivateFieldGet(_isCanvasInitialized, this)) {
                  var _this$opacity2;
                  _classPrivateFieldSet(_isCanvasInitialized, this, true);
                  _assertClassBrand(
                     _InkEditor_brand,
                     this,
                     _setCanvasDims,
                  ).call(this);
                  this.thickness ||
                     (this.thickness = _InkEditor._defaultThickness);
                  this.color ||
                     (this.color =
                        _InkEditor._defaultColor ||
                        editor_editor.AnnotationEditor._defaultLineColor);
                  (_this$opacity2 = this.opacity) !== null &&
                  _this$opacity2 !== void 0
                     ? _this$opacity2
                     : (this.opacity = _InkEditor._defaultOpacity);
               }
               this.currentPath.push([x, y]);
               _classPrivateFieldSet(_hasSomethingToDraw, this, false);
               _assertClassBrand(_InkEditor_brand, this, _setStroke).call(this);
               _classPrivateFieldSet(_requestFrameCallback, this, function () {
                  _assertClassBrand(
                     _InkEditor_brand,
                     _this69,
                     _drawPoints,
                  ).call(_this69);
                  if (_classPrivateFieldGet(_requestFrameCallback, _this69)) {
                     window.requestAnimationFrame(
                        _classPrivateFieldGet(_requestFrameCallback, _this69),
                     );
                  }
               });
               window.requestAnimationFrame(
                  _classPrivateFieldGet(_requestFrameCallback, this),
               );
            }
            function _draw(x, y) {
               var _assertClassBrand2;
               var _this$currentPath$at = this.currentPath.at(-1),
                  _this$currentPath$at2 = _slicedToArray(
                     _this$currentPath$at,
                     2,
                  ),
                  lastX = _this$currentPath$at2[0],
                  lastY = _this$currentPath$at2[1];
               if (this.currentPath.length > 1 && x === lastX && y === lastY) {
                  return;
               }
               var currentPath = this.currentPath;
               var path2D = _classPrivateFieldGet(_currentPath2D, this);
               currentPath.push([x, y]);
               _classPrivateFieldSet(_hasSomethingToDraw, this, true);
               if (currentPath.length <= 2) {
                  var _path2D;
                  (_path2D = path2D).moveTo.apply(
                     _path2D,
                     _toConsumableArray(currentPath[0]),
                  );
                  path2D.lineTo(x, y);
                  return;
               }
               if (currentPath.length === 3) {
                  var _path2D2;
                  _classPrivateFieldSet(
                     _currentPath2D,
                     this,
                     (path2D = new Path2D()),
                  );
                  (_path2D2 = path2D).moveTo.apply(
                     _path2D2,
                     _toConsumableArray(currentPath[0]),
                  );
               }
               (_assertClassBrand2 = _assertClassBrand(
                  _InkEditor_brand,
                  this,
                  _makeBezierCurve,
               )).call.apply(
                  _assertClassBrand2,
                  [this, path2D].concat(
                     _toConsumableArray(currentPath.at(-3)),
                     _toConsumableArray(currentPath.at(-2)),
                     [x, y],
                  ),
               );
            }
            function _endPath() {
               var _classPrivateFieldGet24;
               if (this.currentPath.length === 0) {
                  return;
               }
               var lastPoint = this.currentPath.at(-1);
               (_classPrivateFieldGet24 = _classPrivateFieldGet(
                  _currentPath2D,
                  this,
               )).lineTo.apply(
                  _classPrivateFieldGet24,
                  _toConsumableArray(lastPoint),
               );
            }
            function _stopDrawing(x, y) {
               var _this70 = this;
               _classPrivateFieldSet(_requestFrameCallback, this, null);
               x = Math.min(Math.max(x, 0), this.canvas.width);
               y = Math.min(Math.max(y, 0), this.canvas.height);
               _assertClassBrand(_InkEditor_brand, this, _draw).call(
                  this,
                  x,
                  y,
               );
               _assertClassBrand(_InkEditor_brand, this, _endPath).call(this);
               var bezier;
               if (this.currentPath.length !== 1) {
                  bezier = _assertClassBrand(
                     _InkEditor_brand,
                     this,
                     _generateBezierPoints,
                  ).call(this);
               } else {
                  var xy = [x, y];
                  bezier = [[xy, xy.slice(), xy.slice(), xy]];
               }
               var path2D = _classPrivateFieldGet(_currentPath2D, this);
               var currentPath = this.currentPath;
               this.currentPath = [];
               _classPrivateFieldSet(_currentPath2D, this, new Path2D());
               var cmd = function cmd() {
                  _this70.allRawPaths.push(currentPath);
                  _this70.paths.push(bezier);
                  _this70.bezierPath2D.push(path2D);
                  _this70._uiManager.rebuild(_this70);
               };
               var undo = function undo() {
                  _this70.allRawPaths.pop();
                  _this70.paths.pop();
                  _this70.bezierPath2D.pop();
                  if (_this70.paths.length === 0) {
                     _this70.remove();
                  } else {
                     if (!_this70.canvas) {
                        _assertClassBrand(
                           _InkEditor_brand,
                           _this70,
                           _createCanvas2,
                        ).call(_this70);
                        _assertClassBrand(
                           _InkEditor_brand,
                           _this70,
                           _createObserver,
                        ).call(_this70);
                     }
                     _assertClassBrand(
                        _InkEditor_brand,
                        _this70,
                        _fitToContent,
                     ).call(_this70);
                  }
               };
               this.addCommands({ cmd: cmd, undo: undo, mustExec: true });
            }
            function _drawPoints() {
               if (!_classPrivateFieldGet(_hasSomethingToDraw, this)) {
                  return;
               }
               _classPrivateFieldSet(_hasSomethingToDraw, this, false);
               var thickness = Math.ceil(this.thickness * this.parentScale);
               var lastPoints = this.currentPath.slice(-3);
               var x = lastPoints.map(function (xy) {
                  return xy[0];
               });
               var y = lastPoints.map(function (xy) {
                  return xy[1];
               });
               var xMin =
                  Math.min.apply(Math, _toConsumableArray(x)) - thickness;
               var xMax =
                  Math.max.apply(Math, _toConsumableArray(x)) + thickness;
               var yMin =
                  Math.min.apply(Math, _toConsumableArray(y)) - thickness;
               var yMax =
                  Math.max.apply(Math, _toConsumableArray(y)) + thickness;
               var ctx = this.ctx;
               ctx.save();
               ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
               var _iterator82 = _createForOfIteratorHelper(this.bezierPath2D),
                  _step82;
               try {
                  for (_iterator82.s(); !(_step82 = _iterator82.n()).done; ) {
                     var path = _step82.value;
                     ctx.stroke(path);
                  }
               } catch (err) {
                  _iterator82.e(err);
               } finally {
                  _iterator82.f();
               }
               ctx.stroke(_classPrivateFieldGet(_currentPath2D, this));
               ctx.restore();
            }
            function _makeBezierCurve(path2D, x0, y0, x1, y1, x2, y2) {
               var prevX = (x0 + x1) / 2;
               var prevY = (y0 + y1) / 2;
               var x3 = (x1 + x2) / 2;
               var y3 = (y1 + y2) / 2;
               path2D.bezierCurveTo(
                  prevX + (2 * (x1 - prevX)) / 3,
                  prevY + (2 * (y1 - prevY)) / 3,
                  x3 + (2 * (x1 - x3)) / 3,
                  y3 + (2 * (y1 - y3)) / 3,
                  x3,
                  y3,
               );
            }
            function _generateBezierPoints() {
               var path = this.currentPath;
               if (path.length <= 2) {
                  return [[path[0], path[0], path.at(-1), path.at(-1)]];
               }
               var bezierPoints = [];
               var i;
               var _path$ = _slicedToArray(path[0], 2),
                  x0 = _path$[0],
                  y0 = _path$[1];
               for (i = 1; i < path.length - 2; i++) {
                  var _path$i = _slicedToArray(path[i], 2),
                     _x9 = _path$i[0],
                     _y = _path$i[1];
                  var _path = _slicedToArray(path[i + 1], 2),
                     _x0 = _path[0],
                     _y2 = _path[1];
                  var x3 = (_x9 + _x0) / 2;
                  var y3 = (_y + _y2) / 2;
                  var _control = [
                     x0 + (2 * (_x9 - x0)) / 3,
                     y0 + (2 * (_y - y0)) / 3,
                  ];
                  var _control2 = [
                     x3 + (2 * (_x9 - x3)) / 3,
                     y3 + (2 * (_y - y3)) / 3,
                  ];
                  bezierPoints.push([[x0, y0], _control, _control2, [x3, y3]]);
                  x0 = x3;
                  y0 = y3;
               }
               var _path$i2 = _slicedToArray(path[i], 2),
                  x1 = _path$i2[0],
                  y1 = _path$i2[1];
               var _path2 = _slicedToArray(path[i + 1], 2),
                  x2 = _path2[0],
                  y2 = _path2[1];
               var control1 = [
                  x0 + (2 * (x1 - x0)) / 3,
                  y0 + (2 * (y1 - y0)) / 3,
               ];
               var control2 = [
                  x2 + (2 * (x1 - x2)) / 3,
                  y2 + (2 * (y1 - y2)) / 3,
               ];
               bezierPoints.push([[x0, y0], control1, control2, [x2, y2]]);
               return bezierPoints;
            }
            function _redraw() {
               if (this.isEmpty()) {
                  _assertClassBrand(
                     _InkEditor_brand,
                     this,
                     _updateTransform,
                  ).call(this);
                  return;
               }
               _assertClassBrand(_InkEditor_brand, this, _setStroke).call(this);
               var canvas = this.canvas,
                  ctx = this.ctx;
               ctx.setTransform(1, 0, 0, 1, 0, 0);
               ctx.clearRect(0, 0, canvas.width, canvas.height);
               _assertClassBrand(_InkEditor_brand, this, _updateTransform).call(
                  this,
               );
               var _iterator83 = _createForOfIteratorHelper(this.bezierPath2D),
                  _step83;
               try {
                  for (_iterator83.s(); !(_step83 = _iterator83.n()).done; ) {
                     var path = _step83.value;
                     ctx.stroke(path);
                  }
               } catch (err) {
                  _iterator83.e(err);
               } finally {
                  _iterator83.f();
               }
            }
            function _endDrawing(event) {
               var _this71 = this;
               this.canvas.removeEventListener(
                  "pointerleave",
                  _classPrivateFieldGet(_boundCanvasPointerleave, this),
               );
               this.canvas.removeEventListener(
                  "pointermove",
                  _classPrivateFieldGet(_boundCanvasPointermove, this),
               );
               this.canvas.removeEventListener(
                  "pointerup",
                  _classPrivateFieldGet(_boundCanvasPointerup, this),
               );
               this.canvas.addEventListener(
                  "pointerdown",
                  _classPrivateFieldGet(_boundCanvasPointerdown, this),
               );
               if (_classPrivateFieldGet(_canvasContextMenuTimeoutId, this)) {
                  clearTimeout(
                     _classPrivateFieldGet(_canvasContextMenuTimeoutId, this),
                  );
               }
               _classPrivateFieldSet(
                  _canvasContextMenuTimeoutId,
                  this,
                  setTimeout(function () {
                     _classPrivateFieldSet(
                        _canvasContextMenuTimeoutId,
                        _this71,
                        null,
                     );
                     _this71.canvas.removeEventListener(
                        "contextmenu",
                        display_utils.noContextMenu,
                     );
                  }, 10),
               );
               _assertClassBrand(_InkEditor_brand, this, _stopDrawing).call(
                  this,
                  event.offsetX,
                  event.offsetY,
               );
               this.addToAnnotationStorage();
               this.setInBackground();
            }
            function _createCanvas2() {
               this.canvas = document.createElement("canvas");
               this.canvas.width = this.canvas.height = 0;
               this.canvas.className = "inkEditorCanvas";
               this.canvas.setAttribute("data-l10n-id", "pdfjs-ink-canvas");
               this.div.append(this.canvas);
               this.ctx = this.canvas.getContext("2d");
            }
            function _createObserver() {
               var _this72 = this;
               _classPrivateFieldSet(
                  _observer,
                  this,
                  new ResizeObserver(function (entries) {
                     var rect = entries[0].contentRect;
                     if (rect.width && rect.height) {
                        _this72.setDimensions(rect.width, rect.height);
                     }
                  }),
               );
               _classPrivateFieldGet(_observer, this).observe(this.div);
            }
            function _setCanvasDims() {
               if (!_classPrivateFieldGet(_isCanvasInitialized, this)) {
                  return;
               }
               var _this$parentDimension10 = _slicedToArray(
                     this.parentDimensions,
                     2,
                  ),
                  parentWidth = _this$parentDimension10[0],
                  parentHeight = _this$parentDimension10[1];
               this.canvas.width = Math.ceil(this.width * parentWidth);
               this.canvas.height = Math.ceil(this.height * parentHeight);
               _assertClassBrand(_InkEditor_brand, this, _updateTransform).call(
                  this,
               );
            }
            function _setScaleFactor(width, height) {
               var padding = _assertClassBrand(
                  _InkEditor_brand,
                  this,
                  _getPadding,
               ).call(this);
               var scaleFactorW =
                  (width - padding) / _classPrivateFieldGet(_baseWidth, this);
               var scaleFactorH =
                  (height - padding) / _classPrivateFieldGet(_baseHeight, this);
               this.scaleFactor = Math.min(scaleFactorW, scaleFactorH);
            }
            function _updateTransform() {
               var padding =
                  _assertClassBrand(_InkEditor_brand, this, _getPadding).call(
                     this,
                  ) / 2;
               this.ctx.setTransform(
                  this.scaleFactor,
                  0,
                  0,
                  this.scaleFactor,
                  this.translationX * this.scaleFactor + padding,
                  this.translationY * this.scaleFactor + padding,
               );
            }
            function _buildPath2D(bezier) {
               var path2D = new Path2D();
               for (var i = 0, ii = bezier.length; i < ii; i++) {
                  var _bezier$i = _slicedToArray(bezier[i], 4),
                     first = _bezier$i[0],
                     control1 = _bezier$i[1],
                     control2 = _bezier$i[2],
                     second = _bezier$i[3];
                  if (i === 0) {
                     path2D.moveTo.apply(path2D, _toConsumableArray(first));
                  }
                  path2D.bezierCurveTo(
                     control1[0],
                     control1[1],
                     control2[0],
                     control2[1],
                     second[0],
                     second[1],
                  );
               }
               return path2D;
            }
            function _toPDFCoordinates(points, rect, rotation) {
               var _rect2 = _slicedToArray(rect, 4),
                  blX = _rect2[0],
                  blY = _rect2[1],
                  trX = _rect2[2],
                  trY = _rect2[3];
               switch (rotation) {
                  case 0:
                     for (var i = 0, ii = points.length; i < ii; i += 2) {
                        points[i] += blX;
                        points[i + 1] = trY - points[i + 1];
                     }
                     break;
                  case 90:
                     for (
                        var _i13 = 0, _ii2 = points.length;
                        _i13 < _ii2;
                        _i13 += 2
                     ) {
                        var x = points[_i13];
                        points[_i13] = points[_i13 + 1] + blX;
                        points[_i13 + 1] = x + blY;
                     }
                     break;
                  case 180:
                     for (
                        var _i14 = 0, _ii3 = points.length;
                        _i14 < _ii3;
                        _i14 += 2
                     ) {
                        points[_i14] = trX - points[_i14];
                        points[_i14 + 1] += blY;
                     }
                     break;
                  case 270:
                     for (
                        var _i15 = 0, _ii4 = points.length;
                        _i15 < _ii4;
                        _i15 += 2
                     ) {
                        var _x1 = points[_i15];
                        points[_i15] = trX - points[_i15 + 1];
                        points[_i15 + 1] = trY - _x1;
                     }
                     break;
                  default:
                     throw new Error("Invalid rotation");
               }
               return points;
            }
            function _fromPDFCoordinates(points, rect, rotation) {
               var _rect3 = _slicedToArray(rect, 4),
                  blX = _rect3[0],
                  blY = _rect3[1],
                  trX = _rect3[2],
                  trY = _rect3[3];
               switch (rotation) {
                  case 0:
                     for (var i = 0, ii = points.length; i < ii; i += 2) {
                        points[i] -= blX;
                        points[i + 1] = trY - points[i + 1];
                     }
                     break;
                  case 90:
                     for (
                        var _i16 = 0, _ii5 = points.length;
                        _i16 < _ii5;
                        _i16 += 2
                     ) {
                        var x = points[_i16];
                        points[_i16] = points[_i16 + 1] - blY;
                        points[_i16 + 1] = x - blX;
                     }
                     break;
                  case 180:
                     for (
                        var _i17 = 0, _ii6 = points.length;
                        _i17 < _ii6;
                        _i17 += 2
                     ) {
                        points[_i17] = trX - points[_i17];
                        points[_i17 + 1] -= blY;
                     }
                     break;
                  case 270:
                     for (
                        var _i18 = 0, _ii7 = points.length;
                        _i18 < _ii7;
                        _i18 += 2
                     ) {
                        var _x10 = points[_i18];
                        points[_i18] = trY - points[_i18 + 1];
                        points[_i18 + 1] = trX - _x10;
                     }
                     break;
                  default:
                     throw new Error("Invalid rotation");
               }
               return points;
            }
            function _serializePaths(s, tx, ty, rect) {
               var paths = [];
               var padding = this.thickness / 2;
               var shiftX = s * tx + padding;
               var shiftY = s * ty + padding;
               var _iterator84 = _createForOfIteratorHelper(this.paths),
                  _step84;
               try {
                  for (_iterator84.s(); !(_step84 = _iterator84.n()).done; ) {
                     var bezier = _step84.value;
                     var buffer = [];
                     var points = [];
                     for (var j = 0, jj = bezier.length; j < jj; j++) {
                        var _bezier$j = _slicedToArray(bezier[j], 4),
                           first = _bezier$j[0],
                           control1 = _bezier$j[1],
                           control2 = _bezier$j[2],
                           second = _bezier$j[3];
                        if (
                           first[0] === second[0] &&
                           first[1] === second[1] &&
                           jj === 1
                        ) {
                           var p0 = s * first[0] + shiftX;
                           var p1 = s * first[1] + shiftY;
                           buffer.push(p0, p1);
                           points.push(p0, p1);
                           break;
                        }
                        var p10 = s * first[0] + shiftX;
                        var p11 = s * first[1] + shiftY;
                        var p20 = s * control1[0] + shiftX;
                        var p21 = s * control1[1] + shiftY;
                        var p30 = s * control2[0] + shiftX;
                        var p31 = s * control2[1] + shiftY;
                        var p40 = s * second[0] + shiftX;
                        var p41 = s * second[1] + shiftY;
                        if (j === 0) {
                           buffer.push(p10, p11);
                           points.push(p10, p11);
                        }
                        buffer.push(p20, p21, p30, p31, p40, p41);
                        points.push(p20, p21);
                        if (j === jj - 1) {
                           points.push(p40, p41);
                        }
                     }
                     paths.push({
                        bezier: _toPDFCoordinates.call(
                           _InkEditor,
                           buffer,
                           rect,
                           this.rotation,
                        ),
                        points: _toPDFCoordinates.call(
                           _InkEditor,
                           points,
                           rect,
                           this.rotation,
                        ),
                     });
                  }
               } catch (err) {
                  _iterator84.e(err);
               } finally {
                  _iterator84.f();
               }
               return paths;
            }
            function _getBbox() {
               var xMin = Infinity;
               var xMax = -Infinity;
               var yMin = Infinity;
               var yMax = -Infinity;
               var _iterator85 = _createForOfIteratorHelper(this.paths),
                  _step85;
               try {
                  for (_iterator85.s(); !(_step85 = _iterator85.n()).done; ) {
                     var path = _step85.value;
                     var _iterator86 = _createForOfIteratorHelper(path),
                        _step86;
                     try {
                        for (
                           _iterator86.s();
                           !(_step86 = _iterator86.n()).done;

                        ) {
                           var _util$Util6;
                           var _step86$value = _slicedToArray(_step86.value, 4),
                              first = _step86$value[0],
                              control1 = _step86$value[1],
                              control2 = _step86$value[2],
                              second = _step86$value[3];
                           var bbox = (_util$Util6 =
                              util.Util).bezierBoundingBox.apply(
                              _util$Util6,
                              _toConsumableArray(first).concat(
                                 _toConsumableArray(control1),
                                 _toConsumableArray(control2),
                                 _toConsumableArray(second),
                              ),
                           );
                           xMin = Math.min(xMin, bbox[0]);
                           yMin = Math.min(yMin, bbox[1]);
                           xMax = Math.max(xMax, bbox[2]);
                           yMax = Math.max(yMax, bbox[3]);
                        }
                     } catch (err) {
                        _iterator86.e(err);
                     } finally {
                        _iterator86.f();
                     }
                  }
               } catch (err) {
                  _iterator85.e(err);
               } finally {
                  _iterator85.f();
               }
               return [xMin, yMin, xMax, yMax];
            }
            function _getPadding() {
               return _classPrivateFieldGet(_disableEditing, this)
                  ? Math.ceil(this.thickness * this.parentScale)
                  : 0;
            }
            function _fitToContent() {
               var firstTime =
                  arguments.length > 0 && arguments[0] !== undefined
                     ? arguments[0]
                     : false;
               if (this.isEmpty()) {
                  return;
               }
               if (!_classPrivateFieldGet(_disableEditing, this)) {
                  _assertClassBrand(_InkEditor_brand, this, _redraw).call(this);
                  return;
               }
               var bbox = _assertClassBrand(
                  _InkEditor_brand,
                  this,
                  _getBbox,
               ).call(this);
               var padding = _assertClassBrand(
                  _InkEditor_brand,
                  this,
                  _getPadding,
               ).call(this);
               _classPrivateFieldSet(
                  _baseWidth,
                  this,
                  Math.max(
                     editor_editor.AnnotationEditor.MIN_SIZE,
                     bbox[2] - bbox[0],
                  ),
               );
               _classPrivateFieldSet(
                  _baseHeight,
                  this,
                  Math.max(
                     editor_editor.AnnotationEditor.MIN_SIZE,
                     bbox[3] - bbox[1],
                  ),
               );
               var width = Math.ceil(
                  padding +
                     _classPrivateFieldGet(_baseWidth, this) * this.scaleFactor,
               );
               var height = Math.ceil(
                  padding +
                     _classPrivateFieldGet(_baseHeight, this) *
                        this.scaleFactor,
               );
               var _this$parentDimension11 = _slicedToArray(
                     this.parentDimensions,
                     2,
                  ),
                  parentWidth = _this$parentDimension11[0],
                  parentHeight = _this$parentDimension11[1];
               this.width = width / parentWidth;
               this.height = height / parentHeight;
               this.setAspectRatio(width, height);
               var prevTranslationX = this.translationX;
               var prevTranslationY = this.translationY;
               this.translationX = -bbox[0];
               this.translationY = -bbox[1];
               _assertClassBrand(_InkEditor_brand, this, _setCanvasDims).call(
                  this,
               );
               _assertClassBrand(_InkEditor_brand, this, _redraw).call(this);
               _classPrivateFieldSet(_realWidth, this, width);
               _classPrivateFieldSet(_realHeight, this, height);
               this.setDims(width, height);
               var unscaledPadding = firstTime
                  ? padding / this.scaleFactor / 2
                  : 0;
               this.translate(
                  prevTranslationX - this.translationX - unscaledPadding,
                  prevTranslationY - this.translationY - unscaledPadding,
               );
            }
            _defineProperty(InkEditor, "_defaultColor", null);
            _defineProperty(InkEditor, "_defaultOpacity", 1);
            _defineProperty(InkEditor, "_defaultThickness", 1);
            _defineProperty(InkEditor, "_type", "ink");
            _defineProperty(
               InkEditor,
               "_editorType",
               util.AnnotationEditorType.INK,
            ); // CONCATENATED MODULE: ./src/display/editor/stamp.js
            var _bitmap = /*#__PURE__*/ new WeakMap();
            var _bitmapId = /*#__PURE__*/ new WeakMap();
            var _bitmapPromise = /*#__PURE__*/ new WeakMap();
            var _bitmapUrl = /*#__PURE__*/ new WeakMap();
            var _bitmapFile = /*#__PURE__*/ new WeakMap();
            var _bitmapFileName = /*#__PURE__*/ new WeakMap();
            var _canvas = /*#__PURE__*/ new WeakMap();
            var _observer2 = /*#__PURE__*/ new WeakMap();
            var _resizeTimeoutId = /*#__PURE__*/ new WeakMap();
            var _isSvg = /*#__PURE__*/ new WeakMap();
            var _hasBeenAddedInUndoStack = /*#__PURE__*/ new WeakMap();
            var _StampEditor_brand = /*#__PURE__*/ new WeakSet();
            var StampEditor = /*#__PURE__*/ (function (_editor_editor$Annota4) {
               function StampEditor(params) {
                  var _this59;
                  _classCallCheck(this, StampEditor);
                  _this59 = _callSuper(this, StampEditor, [
                     _objectSpread(
                        _objectSpread({}, params),
                        {},
                        { name: "stampEditor" },
                     ),
                  ]);
                  _classPrivateMethodInitSpec(_this59, _StampEditor_brand);
                  _classPrivateFieldInitSpec(_this59, _bitmap, null);
                  _classPrivateFieldInitSpec(_this59, _bitmapId, null);
                  _classPrivateFieldInitSpec(_this59, _bitmapPromise, null);
                  _classPrivateFieldInitSpec(_this59, _bitmapUrl, null);
                  _classPrivateFieldInitSpec(_this59, _bitmapFile, null);
                  _classPrivateFieldInitSpec(_this59, _bitmapFileName, "");
                  _classPrivateFieldInitSpec(_this59, _canvas, null);
                  _classPrivateFieldInitSpec(_this59, _observer2, null);
                  _classPrivateFieldInitSpec(_this59, _resizeTimeoutId, null);
                  _classPrivateFieldInitSpec(_this59, _isSvg, false);
                  _classPrivateFieldInitSpec(
                     _this59,
                     _hasBeenAddedInUndoStack,
                     false,
                  );
                  _classPrivateFieldSet(_bitmapUrl, _this59, params.bitmapUrl);
                  _classPrivateFieldSet(
                     _bitmapFile,
                     _this59,
                     params.bitmapFile,
                  );
                  return _this59;
               }
               _inherits(StampEditor, _editor_editor$Annota4);
               return _createClass(
                  StampEditor,
                  [
                     {
                        key: "remove",
                        value: function remove() {
                           if (_classPrivateFieldGet(_bitmapId, this)) {
                              var _classPrivateFieldGet10,
                                 _classPrivateFieldGet11;
                              _classPrivateFieldSet(_bitmap, this, null);
                              this._uiManager.imageManager.deleteId(
                                 _classPrivateFieldGet(_bitmapId, this),
                              );
                              (_classPrivateFieldGet10 = _classPrivateFieldGet(
                                 _canvas,
                                 this,
                              )) === null ||
                                 _classPrivateFieldGet10 === void 0 ||
                                 _classPrivateFieldGet10.remove();
                              _classPrivateFieldSet(_canvas, this, null);
                              (_classPrivateFieldGet11 = _classPrivateFieldGet(
                                 _observer2,
                                 this,
                              )) === null ||
                                 _classPrivateFieldGet11 === void 0 ||
                                 _classPrivateFieldGet11.disconnect();
                              _classPrivateFieldSet(_observer2, this, null);
                              if (
                                 _classPrivateFieldGet(_resizeTimeoutId, this)
                              ) {
                                 clearTimeout(
                                    _classPrivateFieldGet(
                                       _resizeTimeoutId,
                                       this,
                                    ),
                                 );
                                 _classPrivateFieldSet(
                                    _resizeTimeoutId,
                                    this,
                                    null,
                                 );
                              }
                           }
                           _superPropGet(StampEditor, "remove", this, 3)([]);
                        },
                     },
                     {
                        key: "rebuild",
                        value: function rebuild() {
                           if (!this.parent) {
                              if (_classPrivateFieldGet(_bitmapId, this)) {
                                 _assertClassBrand(
                                    _StampEditor_brand,
                                    this,
                                    _getBitmap,
                                 ).call(this);
                              }
                              return;
                           }
                           _superPropGet(StampEditor, "rebuild", this, 3)([]);
                           if (this.div === null) {
                              return;
                           }
                           if (
                              _classPrivateFieldGet(_bitmapId, this) &&
                              _classPrivateFieldGet(_canvas, this) === null
                           ) {
                              _assertClassBrand(
                                 _StampEditor_brand,
                                 this,
                                 _getBitmap,
                              ).call(this);
                           }
                           if (!this.isAttachedToDOM) {
                              this.parent.add(this);
                           }
                        },
                     },
                     {
                        key: "onceAdded",
                        value: function onceAdded() {
                           this._isDraggable = true;
                           this.div.focus();
                        },
                     },
                     {
                        key: "isEmpty",
                        value: function isEmpty() {
                           return !(
                              _classPrivateFieldGet(_bitmapPromise, this) ||
                              _classPrivateFieldGet(_bitmap, this) ||
                              _classPrivateFieldGet(_bitmapUrl, this) ||
                              _classPrivateFieldGet(_bitmapFile, this) ||
                              _classPrivateFieldGet(_bitmapId, this)
                           );
                        },
                     },
                     {
                        key: "isResizable",
                        get: function get() {
                           return true;
                        },
                     },
                     {
                        key: "render",
                        value: function render() {
                           if (this.div) {
                              return this.div;
                           }
                           var baseX, baseY;
                           if (this.width) {
                              baseX = this.x;
                              baseY = this.y;
                           }
                           _superPropGet(StampEditor, "render", this, 3)([]);
                           this.div.hidden = true;
                           this.addAltTextButton();
                           if (_classPrivateFieldGet(_bitmap, this)) {
                              _assertClassBrand(
                                 _StampEditor_brand,
                                 this,
                                 _createCanvas3,
                              ).call(this);
                           } else {
                              _assertClassBrand(
                                 _StampEditor_brand,
                                 this,
                                 _getBitmap,
                              ).call(this);
                           }
                           if (this.width) {
                              var _this$parentDimension6 = _slicedToArray(
                                    this.parentDimensions,
                                    2,
                                 ),
                                 parentWidth = _this$parentDimension6[0],
                                 parentHeight = _this$parentDimension6[1];
                              this.setAt(
                                 baseX * parentWidth,
                                 baseY * parentHeight,
                                 this.width * parentWidth,
                                 this.height * parentHeight,
                              );
                           }
                           return this.div;
                        },
                     },
                     {
                        key: "getImageForAltText",
                        value: function getImageForAltText() {
                           return _classPrivateFieldGet(_canvas, this);
                        },
                     },
                     {
                        key: "serialize",
                        value: function serialize() {
                           var isForCopying =
                              arguments.length > 0 && arguments[0] !== undefined
                                 ? arguments[0]
                                 : false;
                           var context =
                              arguments.length > 1 && arguments[1] !== undefined
                                 ? arguments[1]
                                 : null;
                           if (this.isEmpty()) {
                              return null;
                           }
                           var serialized = {
                              annotationType: util.AnnotationEditorType.STAMP,
                              bitmapId: _classPrivateFieldGet(_bitmapId, this),
                              pageIndex: this.pageIndex,
                              rect: this.getRect(0, 0),
                              rotation: this.rotation,
                              isSvg: _classPrivateFieldGet(_isSvg, this),
                              structTreeParentId: this._structTreeParentId,
                           };
                           if (isForCopying) {
                              serialized.bitmapUrl = _assertClassBrand(
                                 _StampEditor_brand,
                                 this,
                                 _serializeBitmap,
                              ).call(this, true);
                              serialized.accessibilityData = this.altTextData;
                              return serialized;
                           }
                           var _this$altTextData = this.altTextData,
                              decorative = _this$altTextData.decorative,
                              altText = _this$altTextData.altText;
                           if (!decorative && altText) {
                              serialized.accessibilityData = {
                                 type: "Figure",
                                 alt: altText,
                              };
                           }
                           if (context === null) {
                              return serialized;
                           }
                           context.stamps || (context.stamps = new Map());
                           var area = _classPrivateFieldGet(_isSvg, this)
                              ? (serialized.rect[2] - serialized.rect[0]) *
                                (serialized.rect[3] - serialized.rect[1])
                              : null;
                           if (
                              !context.stamps.has(
                                 _classPrivateFieldGet(_bitmapId, this),
                              )
                           ) {
                              context.stamps.set(
                                 _classPrivateFieldGet(_bitmapId, this),
                                 {
                                    area: area,
                                    serialized: serialized,
                                 },
                              );
                              serialized.bitmap = _assertClassBrand(
                                 _StampEditor_brand,
                                 this,
                                 _serializeBitmap,
                              ).call(this, false);
                           } else if (_classPrivateFieldGet(_isSvg, this)) {
                              var prevData = context.stamps.get(
                                 _classPrivateFieldGet(_bitmapId, this),
                              );
                              if (area > prevData.area) {
                                 prevData.area = area;
                                 prevData.serialized.bitmap.close();
                                 prevData.serialized.bitmap = _assertClassBrand(
                                    _StampEditor_brand,
                                    this,
                                    _serializeBitmap,
                                 ).call(this, false);
                              }
                           }
                           return serialized;
                        },
                     },
                  ],
                  [
                     {
                        key: "initialize",
                        value: function initialize(l10n, uiManager) {
                           editor_editor.AnnotationEditor.initialize(
                              l10n,
                              uiManager,
                           );
                        },
                     },
                     {
                        key: "supportedTypes",
                        get: function get() {
                           var types = [
                              "apng",
                              "avif",
                              "bmp",
                              "gif",
                              "jpeg",
                              "png",
                              "svg+xml",
                              "webp",
                              "x-icon",
                           ];
                           return (0, util.shadow)(
                              this,
                              "supportedTypes",
                              types.map(function (type) {
                                 return "image/".concat(type);
                              }),
                           );
                        },
                     },
                     {
                        key: "supportedTypesStr",
                        get: function get() {
                           return (0, util.shadow)(
                              this,
                              "supportedTypesStr",
                              this.supportedTypes.join(","),
                           );
                        },
                     },
                     {
                        key: "isHandlingMimeForPasting",
                        value: function isHandlingMimeForPasting(mime) {
                           return this.supportedTypes.includes(mime);
                        },
                     },
                     {
                        key: "paste",
                        value: function paste(item, parent) {
                           parent.pasteEditor(util.AnnotationEditorType.STAMP, {
                              bitmapFile: item.getAsFile(),
                           });
                        },
                     },
                     {
                        key: "deserialize",
                        value: function deserialize(data, parent, uiManager) {
                           if (
                              data instanceof
                              annotation_layer.StampAnnotationElement
                           ) {
                              return null;
                           }
                           var editor = _superPropGet(
                              StampEditor,
                              "deserialize",
                              this,
                              2,
                           )([data, parent, uiManager]);
                           var rect = data.rect,
                              bitmapUrl = data.bitmapUrl,
                              bitmapId = data.bitmapId,
                              isSvg = data.isSvg,
                              accessibilityData = data.accessibilityData;
                           if (
                              bitmapId &&
                              uiManager.imageManager.isValidId(bitmapId)
                           ) {
                              _classPrivateFieldSet(
                                 _bitmapId,
                                 editor,
                                 bitmapId,
                              );
                           } else {
                              _classPrivateFieldSet(
                                 _bitmapUrl,
                                 editor,
                                 bitmapUrl,
                              );
                           }
                           _classPrivateFieldSet(_isSvg, editor, isSvg);
                           var _editor$pageDimension3 = _slicedToArray(
                                 editor.pageDimensions,
                                 2,
                              ),
                              parentWidth = _editor$pageDimension3[0],
                              parentHeight = _editor$pageDimension3[1];
                           editor.width = (rect[2] - rect[0]) / parentWidth;
                           editor.height = (rect[3] - rect[1]) / parentHeight;
                           if (accessibilityData) {
                              editor.altTextData = accessibilityData;
                           }
                           return editor;
                        },
                     },
                  ],
               );
            })(editor_editor.AnnotationEditor);
            _StampEditor = StampEditor;
            function _getBitmapFetched(data) {
               var fromId =
                  arguments.length > 1 && arguments[1] !== undefined
                     ? arguments[1]
                     : false;
               if (!data) {
                  this.remove();
                  return;
               }
               _classPrivateFieldSet(_bitmap, this, data.bitmap);
               if (!fromId) {
                  _classPrivateFieldSet(_bitmapId, this, data.id);
                  _classPrivateFieldSet(_isSvg, this, data.isSvg);
               }
               if (data.file) {
                  _classPrivateFieldSet(_bitmapFileName, this, data.file.name);
               }
               _assertClassBrand(_StampEditor_brand, this, _createCanvas3).call(
                  this,
               );
            }
            function _getBitmapDone() {
               _classPrivateFieldSet(_bitmapPromise, this, null);
               this._uiManager.enableWaiting(false);
               if (_classPrivateFieldGet(_canvas, this)) {
                  this.div.focus();
               }
            }
            function _getBitmap() {
               var _this73 = this;
               if (_classPrivateFieldGet(_bitmapId, this)) {
                  this._uiManager.enableWaiting(true);
                  this._uiManager.imageManager
                     .getFromId(_classPrivateFieldGet(_bitmapId, this))
                     .then(function (data) {
                        return _assertClassBrand(
                           _StampEditor_brand,
                           _this73,
                           _getBitmapFetched,
                        ).call(_this73, data, true);
                     })
                     ["finally"](function () {
                        return _assertClassBrand(
                           _StampEditor_brand,
                           _this73,
                           _getBitmapDone,
                        ).call(_this73);
                     });
                  return;
               }
               if (_classPrivateFieldGet(_bitmapUrl, this)) {
                  var url = _classPrivateFieldGet(_bitmapUrl, this);
                  _classPrivateFieldSet(_bitmapUrl, this, null);
                  this._uiManager.enableWaiting(true);
                  _classPrivateFieldSet(
                     _bitmapPromise,
                     this,
                     this._uiManager.imageManager
                        .getFromUrl(url)
                        .then(function (data) {
                           return _assertClassBrand(
                              _StampEditor_brand,
                              _this73,
                              _getBitmapFetched,
                           ).call(_this73, data);
                        })
                        ["finally"](function () {
                           return _assertClassBrand(
                              _StampEditor_brand,
                              _this73,
                              _getBitmapDone,
                           ).call(_this73);
                        }),
                  );
                  return;
               }
               if (_classPrivateFieldGet(_bitmapFile, this)) {
                  var file = _classPrivateFieldGet(_bitmapFile, this);
                  _classPrivateFieldSet(_bitmapFile, this, null);
                  this._uiManager.enableWaiting(true);
                  _classPrivateFieldSet(
                     _bitmapPromise,
                     this,
                     this._uiManager.imageManager
                        .getFromFile(file)
                        .then(function (data) {
                           return _assertClassBrand(
                              _StampEditor_brand,
                              _this73,
                              _getBitmapFetched,
                           ).call(_this73, data);
                        })
                        ["finally"](function () {
                           return _assertClassBrand(
                              _StampEditor_brand,
                              _this73,
                              _getBitmapDone,
                           ).call(_this73);
                        }),
                  );
                  return;
               }
               var input = document.createElement("input");
               input.type = "file";
               input.accept = _StampEditor.supportedTypesStr;
               _classPrivateFieldSet(
                  _bitmapPromise,
                  this,
                  new Promise(function (resolve) {
                     input.addEventListener(
                        "change",
                        /*#__PURE__*/ _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(function _callee11() {
                              var data;
                              return _regenerator().w(function (_context12) {
                                 while (1)
                                    switch (_context12.n) {
                                       case 0:
                                          if (
                                             !(
                                                !input.files ||
                                                input.files.length === 0
                                             )
                                          ) {
                                             _context12.n = 1;
                                             break;
                                          }
                                          _this73.remove();
                                          _context12.n = 3;
                                          break;
                                       case 1:
                                          _this73._uiManager.enableWaiting(
                                             true,
                                          );
                                          _context12.n = 2;
                                          return _this73._uiManager.imageManager.getFromFile(
                                             input.files[0],
                                          );
                                       case 2:
                                          data = _context12.v;
                                          _assertClassBrand(
                                             _StampEditor_brand,
                                             _this73,
                                             _getBitmapFetched,
                                          ).call(_this73, data);
                                       case 3:
                                          resolve();
                                       case 4:
                                          return _context12.a(2);
                                    }
                              }, _callee11);
                           }),
                        ),
                     );
                     input.addEventListener("cancel", function () {
                        _this73.remove();
                        resolve();
                     });
                  })["finally"](function () {
                     return _assertClassBrand(
                        _StampEditor_brand,
                        _this73,
                        _getBitmapDone,
                     ).call(_this73);
                  }),
               );
               input.click();
            }
            function _createCanvas3() {
               var div = this.div;
               var _classPrivateFieldGet25 = _classPrivateFieldGet(
                     _bitmap,
                     this,
                  ),
                  width = _classPrivateFieldGet25.width,
                  height = _classPrivateFieldGet25.height;
               var _this$pageDimensions3 = _slicedToArray(
                     this.pageDimensions,
                     2,
                  ),
                  pageWidth = _this$pageDimensions3[0],
                  pageHeight = _this$pageDimensions3[1];
               var MAX_RATIO = 0.75;
               if (this.width) {
                  width = this.width * pageWidth;
                  height = this.height * pageHeight;
               } else if (
                  width > MAX_RATIO * pageWidth ||
                  height > MAX_RATIO * pageHeight
               ) {
                  var factor = Math.min(
                     (MAX_RATIO * pageWidth) / width,
                     (MAX_RATIO * pageHeight) / height,
                  );
                  width *= factor;
                  height *= factor;
               }
               var _this$parentDimension12 = _slicedToArray(
                     this.parentDimensions,
                     2,
                  ),
                  parentWidth = _this$parentDimension12[0],
                  parentHeight = _this$parentDimension12[1];
               this.setDims(
                  (width * parentWidth) / pageWidth,
                  (height * parentHeight) / pageHeight,
               );
               this._uiManager.enableWaiting(false);
               var canvas = _classPrivateFieldSet(
                  _canvas,
                  this,
                  document.createElement("canvas"),
               );
               div.append(canvas);
               div.hidden = false;
               _assertClassBrand(_StampEditor_brand, this, _drawBitmap).call(
                  this,
                  width,
                  height,
               );
               _assertClassBrand(
                  _StampEditor_brand,
                  this,
                  _createObserver2,
               ).call(this);
               if (!_classPrivateFieldGet(_hasBeenAddedInUndoStack, this)) {
                  this.parent.addUndoableEditor(this);
                  _classPrivateFieldSet(_hasBeenAddedInUndoStack, this, true);
               }
               this._reportTelemetry({ action: "inserted_image" });
               if (_classPrivateFieldGet(_bitmapFileName, this)) {
                  canvas.setAttribute(
                     "aria-label",
                     _classPrivateFieldGet(_bitmapFileName, this),
                  );
               }
            }
            function _setDimensions(width, height) {
               var _this$_initialOptions2,
                  _this74 = this;
               var _this$parentDimension13 = _slicedToArray(
                     this.parentDimensions,
                     2,
                  ),
                  parentWidth = _this$parentDimension13[0],
                  parentHeight = _this$parentDimension13[1];
               this.width = width / parentWidth;
               this.height = height / parentHeight;
               this.setDims(width, height);
               if (
                  (_this$_initialOptions2 = this._initialOptions) !== null &&
                  _this$_initialOptions2 !== void 0 &&
                  _this$_initialOptions2.isCentered
               ) {
                  this.center();
               } else {
                  this.fixAndSetPosition();
               }
               this._initialOptions = null;
               if (_classPrivateFieldGet(_resizeTimeoutId, this) !== null) {
                  clearTimeout(_classPrivateFieldGet(_resizeTimeoutId, this));
               }
               var TIME_TO_WAIT = 200;
               _classPrivateFieldSet(
                  _resizeTimeoutId,
                  this,
                  setTimeout(function () {
                     _classPrivateFieldSet(_resizeTimeoutId, _this74, null);
                     _assertClassBrand(
                        _StampEditor_brand,
                        _this74,
                        _drawBitmap,
                     ).call(_this74, width, height);
                  }, TIME_TO_WAIT),
               );
            }
            function _scaleBitmap(width, height) {
               var _classPrivateFieldGet26 = _classPrivateFieldGet(
                     _bitmap,
                     this,
                  ),
                  bitmapWidth = _classPrivateFieldGet26.width,
                  bitmapHeight = _classPrivateFieldGet26.height;
               var newWidth = bitmapWidth;
               var newHeight = bitmapHeight;
               var bitmap = _classPrivateFieldGet(_bitmap, this);
               while (newWidth > 2 * width || newHeight > 2 * height) {
                  var prevWidth = newWidth;
                  var prevHeight = newHeight;
                  if (newWidth > 2 * width) {
                     newWidth =
                        newWidth >= 16384
                           ? Math.floor(newWidth / 2) - 1
                           : Math.ceil(newWidth / 2);
                  }
                  if (newHeight > 2 * height) {
                     newHeight =
                        newHeight >= 16384
                           ? Math.floor(newHeight / 2) - 1
                           : Math.ceil(newHeight / 2);
                  }
                  var offscreen = new OffscreenCanvas(newWidth, newHeight);
                  var ctx = offscreen.getContext("2d");
                  ctx.drawImage(
                     bitmap,
                     0,
                     0,
                     prevWidth,
                     prevHeight,
                     0,
                     0,
                     newWidth,
                     newHeight,
                  );
                  bitmap = offscreen.transferToImageBitmap();
               }
               return bitmap;
            }
            function _drawBitmap(width, height) {
               var _this75 = this;
               width = Math.ceil(width);
               height = Math.ceil(height);
               var canvas = _classPrivateFieldGet(_canvas, this);
               if (
                  !canvas ||
                  (canvas.width === width && canvas.height === height)
               ) {
                  return;
               }
               canvas.width = width;
               canvas.height = height;
               var bitmap = _classPrivateFieldGet(_isSvg, this)
                  ? _classPrivateFieldGet(_bitmap, this)
                  : _assertClassBrand(
                       _StampEditor_brand,
                       this,
                       _scaleBitmap,
                    ).call(this, width, height);
               if (this._uiManager.hasMLManager && !this.hasAltText()) {
                  var offscreen = new OffscreenCanvas(width, height);
                  var _ctx = offscreen.getContext("2d");
                  _ctx.drawImage(
                     bitmap,
                     0,
                     0,
                     bitmap.width,
                     bitmap.height,
                     0,
                     0,
                     width,
                     height,
                  );
                  offscreen.convertToBlob().then(function (blob) {
                     var fileReader = new FileReader();
                     fileReader.onload = function () {
                        var url = fileReader.result;
                        _this75._uiManager
                           .mlGuess({
                              service: "image-to-text",
                              request: { imageData: url },
                           })
                           .then(function (response) {
                              var altText =
                                 (response === null || response === void 0
                                    ? void 0
                                    : response.output) || "";
                              if (
                                 _this75.parent &&
                                 altText &&
                                 !_this75.hasAltText()
                              ) {
                                 _this75.altTextData = {
                                    altText: altText,
                                    decorative: false,
                                 };
                              }
                           });
                     };
                     fileReader.readAsDataURL(blob);
                  });
               }
               var ctx = canvas.getContext("2d");
               ctx.filter = this._uiManager.hcmFilter;
               ctx.drawImage(
                  bitmap,
                  0,
                  0,
                  bitmap.width,
                  bitmap.height,
                  0,
                  0,
                  width,
                  height,
               );
            }
            function _serializeBitmap(toUrl) {
               if (toUrl) {
                  if (_classPrivateFieldGet(_isSvg, this)) {
                     var url = this._uiManager.imageManager.getSvgUrl(
                        _classPrivateFieldGet(_bitmapId, this),
                     );
                     if (url) {
                        return url;
                     }
                  }
                  var canvas = document.createElement("canvas");
                  var _classPrivateFieldGet27 = _classPrivateFieldGet(
                     _bitmap,
                     this,
                  );
                  canvas.width = _classPrivateFieldGet27.width;
                  canvas.height = _classPrivateFieldGet27.height;
                  var ctx = canvas.getContext("2d");
                  ctx.drawImage(_classPrivateFieldGet(_bitmap, this), 0, 0);
                  return canvas.toDataURL();
               }
               if (_classPrivateFieldGet(_isSvg, this)) {
                  var _this$pageDimensions4 = _slicedToArray(
                        this.pageDimensions,
                        2,
                     ),
                     pageWidth = _this$pageDimensions4[0],
                     pageHeight = _this$pageDimensions4[1];
                  var width = Math.round(
                     this.width *
                        pageWidth *
                        display_utils.PixelsPerInch.PDF_TO_CSS_UNITS,
                  );
                  var height = Math.round(
                     this.height *
                        pageHeight *
                        display_utils.PixelsPerInch.PDF_TO_CSS_UNITS,
                  );
                  var offscreen = new OffscreenCanvas(width, height);
                  var _ctx2 = offscreen.getContext("2d");
                  _ctx2.drawImage(
                     _classPrivateFieldGet(_bitmap, this),
                     0,
                     0,
                     _classPrivateFieldGet(_bitmap, this).width,
                     _classPrivateFieldGet(_bitmap, this).height,
                     0,
                     0,
                     width,
                     height,
                  );
                  return offscreen.transferToImageBitmap();
               }
               return structuredClone(_classPrivateFieldGet(_bitmap, this));
            }
            function _createObserver2() {
               var _this76 = this;
               _classPrivateFieldSet(
                  _observer2,
                  this,
                  new ResizeObserver(function (entries) {
                     var rect = entries[0].contentRect;
                     if (rect.width && rect.height) {
                        _assertClassBrand(
                           _StampEditor_brand,
                           _this76,
                           _setDimensions,
                        ).call(_this76, rect.width, rect.height);
                     }
                  }),
               );
               _classPrivateFieldGet(_observer2, this).observe(this.div);
            }
            _defineProperty(StampEditor, "_type", "stamp");
            _defineProperty(
               StampEditor,
               "_editorType",
               util.AnnotationEditorType.STAMP,
            ); // CONCATENATED MODULE: ./src/display/editor/annotation_editor_layer.js
            var _accessibilityManager2 = /*#__PURE__*/ new WeakMap();
            var _allowClick = /*#__PURE__*/ new WeakMap();
            var _annotationLayer = /*#__PURE__*/ new WeakMap();
            var _boundPointerup = /*#__PURE__*/ new WeakMap();
            var _boundPointerdown = /*#__PURE__*/ new WeakMap();
            var _boundTextLayerPointerDown = /*#__PURE__*/ new WeakMap();
            var _editorFocusTimeoutId = /*#__PURE__*/ new WeakMap();
            var _editors = /*#__PURE__*/ new WeakMap();
            var _hadPointerDown = /*#__PURE__*/ new WeakMap();
            var _isCleaningUp = /*#__PURE__*/ new WeakMap();
            var _isDisabling = /*#__PURE__*/ new WeakMap();
            var _textLayer = /*#__PURE__*/ new WeakMap();
            var _uiManager2 = /*#__PURE__*/ new WeakMap();
            var _AnnotationEditorLayer_brand = /*#__PURE__*/ new WeakSet();
            var _AnnotationEditorLayer = /*#__PURE__*/ (function () {
               function _AnnotationEditorLayer(_ref77) {
                  var uiManager = _ref77.uiManager,
                     pageIndex = _ref77.pageIndex,
                     div = _ref77.div,
                     accessibilityManager = _ref77.accessibilityManager,
                     annotationLayer = _ref77.annotationLayer,
                     drawLayer = _ref77.drawLayer,
                     textLayer = _ref77.textLayer,
                     viewport = _ref77.viewport,
                     l10n = _ref77.l10n;
                  _classCallCheck(this, _AnnotationEditorLayer);
                  _classPrivateMethodInitSpec(
                     this,
                     _AnnotationEditorLayer_brand,
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _accessibilityManager2,
                     void 0,
                  );
                  _classPrivateFieldInitSpec(this, _allowClick, false);
                  _classPrivateFieldInitSpec(this, _annotationLayer, null);
                  _classPrivateFieldInitSpec(this, _boundPointerup, null);
                  _classPrivateFieldInitSpec(this, _boundPointerdown, null);
                  _classPrivateFieldInitSpec(
                     this,
                     _boundTextLayerPointerDown,
                     null,
                  );
                  _classPrivateFieldInitSpec(this, _editorFocusTimeoutId, null);
                  _classPrivateFieldInitSpec(this, _editors, new Map());
                  _classPrivateFieldInitSpec(this, _hadPointerDown, false);
                  _classPrivateFieldInitSpec(this, _isCleaningUp, false);
                  _classPrivateFieldInitSpec(this, _isDisabling, false);
                  _classPrivateFieldInitSpec(this, _textLayer, null);
                  _classPrivateFieldInitSpec(this, _uiManager2, void 0);
                  var editorTypes = _toConsumableArray(_editorTypes._.values());
                  if (!_AnnotationEditorLayer._initialized) {
                     _AnnotationEditorLayer._initialized = true;
                     var _iterator68 = _createForOfIteratorHelper(editorTypes),
                        _step68;
                     try {
                        for (
                           _iterator68.s();
                           !(_step68 = _iterator68.n()).done;

                        ) {
                           var editorType = _step68.value;
                           editorType.initialize(l10n, uiManager);
                        }
                     } catch (err) {
                        _iterator68.e(err);
                     } finally {
                        _iterator68.f();
                     }
                  }
                  uiManager.registerEditorTypes(editorTypes);
                  _classPrivateFieldSet(_uiManager2, this, uiManager);
                  this.pageIndex = pageIndex;
                  this.div = div;
                  _classPrivateFieldSet(
                     _accessibilityManager2,
                     this,
                     accessibilityManager,
                  );
                  _classPrivateFieldSet(
                     _annotationLayer,
                     this,
                     annotationLayer,
                  );
                  this.viewport = viewport;
                  _classPrivateFieldSet(_textLayer, this, textLayer);
                  this.drawLayer = drawLayer;
                  _classPrivateFieldGet(_uiManager2, this).addLayer(this);
               }
               return _createClass(_AnnotationEditorLayer, [
                  {
                     key: "isEmpty",
                     get: function get() {
                        return _classPrivateFieldGet(_editors, this).size === 0;
                     },
                  },
                  {
                     key: "isInvisible",
                     get: function get() {
                        return (
                           this.isEmpty &&
                           _classPrivateFieldGet(
                              _uiManager2,
                              this,
                           ).getMode() === util.AnnotationEditorType.NONE
                        );
                     },
                  },
                  {
                     key: "updateToolbar",
                     value: function updateToolbar(mode) {
                        _classPrivateFieldGet(_uiManager2, this).updateToolbar(
                           mode,
                        );
                     },
                  },
                  {
                     key: "updateMode",
                     value: function updateMode() {
                        var mode =
                           arguments.length > 0 && arguments[0] !== undefined
                              ? arguments[0]
                              : _classPrivateFieldGet(
                                   _uiManager2,
                                   this,
                                ).getMode();
                        _assertClassBrand(
                           _AnnotationEditorLayer_brand,
                           this,
                           _cleanup,
                        ).call(this);
                        switch (mode) {
                           case util.AnnotationEditorType.NONE:
                              this.disableTextSelection();
                              this.togglePointerEvents(false);
                              this.toggleAnnotationLayerPointerEvents(true);
                              this.disableClick();
                              return;
                           case util.AnnotationEditorType.INK:
                              this.addInkEditorIfNeeded(false);
                              this.disableTextSelection();
                              this.togglePointerEvents(true);
                              this.disableClick();
                              break;
                           case util.AnnotationEditorType.HIGHLIGHT:
                              this.enableTextSelection();
                              this.togglePointerEvents(false);
                              this.disableClick();
                              break;
                           default:
                              this.disableTextSelection();
                              this.togglePointerEvents(true);
                              this.enableClick();
                        }
                        this.toggleAnnotationLayerPointerEvents(false);
                        var classList = this.div.classList;
                        var _iterator69 = _createForOfIteratorHelper(
                              _editorTypes._.values(),
                           ),
                           _step69;
                        try {
                           for (
                              _iterator69.s();
                              !(_step69 = _iterator69.n()).done;

                           ) {
                              var editorType = _step69.value;
                              classList.toggle(
                                 "".concat(editorType._type, "Editing"),
                                 mode === editorType._editorType,
                              );
                           }
                        } catch (err) {
                           _iterator69.e(err);
                        } finally {
                           _iterator69.f();
                        }
                        this.div.hidden = false;
                     },
                  },
                  {
                     key: "hasTextLayer",
                     value: function hasTextLayer(textLayer) {
                        var _classPrivateFieldGet12;
                        return (
                           textLayer ===
                           ((_classPrivateFieldGet12 = _classPrivateFieldGet(
                              _textLayer,
                              this,
                           )) === null || _classPrivateFieldGet12 === void 0
                              ? void 0
                              : _classPrivateFieldGet12.div)
                        );
                     },
                  },
                  {
                     key: "addInkEditorIfNeeded",
                     value: function addInkEditorIfNeeded(isCommitting) {
                        if (
                           _classPrivateFieldGet(
                              _uiManager2,
                              this,
                           ).getMode() !== util.AnnotationEditorType.INK
                        ) {
                           return;
                        }
                        if (!isCommitting) {
                           var _iterator70 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_editors, this).values(),
                              ),
                              _step70;
                           try {
                              for (
                                 _iterator70.s();
                                 !(_step70 = _iterator70.n()).done;

                              ) {
                                 var _editor = _step70.value;
                                 if (_editor.isEmpty()) {
                                    _editor.setInBackground();
                                    return;
                                 }
                              }
                           } catch (err) {
                              _iterator70.e(err);
                           } finally {
                              _iterator70.f();
                           }
                        }
                        var editor = this.createAndAddNewEditor(
                           { offsetX: 0, offsetY: 0 },
                           false,
                        );
                        editor.setInBackground();
                     },
                  },
                  {
                     key: "setEditingState",
                     value: function setEditingState(isEditing) {
                        _classPrivateFieldGet(
                           _uiManager2,
                           this,
                        ).setEditingState(isEditing);
                     },
                  },
                  {
                     key: "addCommands",
                     value: function addCommands(params) {
                        _classPrivateFieldGet(_uiManager2, this).addCommands(
                           params,
                        );
                     },
                  },
                  {
                     key: "togglePointerEvents",
                     value: function togglePointerEvents() {
                        var enabled =
                           arguments.length > 0 && arguments[0] !== undefined
                              ? arguments[0]
                              : false;
                        this.div.classList.toggle("disabled", !enabled);
                     },
                  },
                  {
                     key: "toggleAnnotationLayerPointerEvents",
                     value: function toggleAnnotationLayerPointerEvents() {
                        var _classPrivateFieldGet13;
                        var enabled =
                           arguments.length > 0 && arguments[0] !== undefined
                              ? arguments[0]
                              : false;
                        (_classPrivateFieldGet13 = _classPrivateFieldGet(
                           _annotationLayer,
                           this,
                        )) === null ||
                           _classPrivateFieldGet13 === void 0 ||
                           _classPrivateFieldGet13.div.classList.toggle(
                              "disabled",
                              !enabled,
                           );
                     },
                  },
                  {
                     key: "enable",
                     value: function enable() {
                        this.div.tabIndex = 0;
                        this.togglePointerEvents(true);
                        var annotationElementIds = new Set();
                        var _iterator71 = _createForOfIteratorHelper(
                              _classPrivateFieldGet(_editors, this).values(),
                           ),
                           _step71;
                        try {
                           for (
                              _iterator71.s();
                              !(_step71 = _iterator71.n()).done;

                           ) {
                              var editor = _step71.value;
                              editor.enableEditing();
                              editor.show(true);
                              if (editor.annotationElementId) {
                                 _classPrivateFieldGet(
                                    _uiManager2,
                                    this,
                                 ).removeChangedExistingAnnotation(editor);
                                 annotationElementIds.add(
                                    editor.annotationElementId,
                                 );
                              }
                           }
                        } catch (err) {
                           _iterator71.e(err);
                        } finally {
                           _iterator71.f();
                        }
                        if (!_classPrivateFieldGet(_annotationLayer, this)) {
                           return;
                        }
                        var editables = _classPrivateFieldGet(
                           _annotationLayer,
                           this,
                        ).getEditableAnnotations();
                        var _iterator72 = _createForOfIteratorHelper(editables),
                           _step72;
                        try {
                           for (
                              _iterator72.s();
                              !(_step72 = _iterator72.n()).done;

                           ) {
                              var editable = _step72.value;
                              editable.hide();
                              if (
                                 _classPrivateFieldGet(
                                    _uiManager2,
                                    this,
                                 ).isDeletedAnnotationElement(editable.data.id)
                              ) {
                                 continue;
                              }
                              if (annotationElementIds.has(editable.data.id)) {
                                 continue;
                              }
                              var _editor2 = this.deserialize(editable);
                              if (!_editor2) {
                                 continue;
                              }
                              this.addOrRebuild(_editor2);
                              _editor2.enableEditing();
                           }
                        } catch (err) {
                           _iterator72.e(err);
                        } finally {
                           _iterator72.f();
                        }
                     },
                  },
                  {
                     key: "disable",
                     value: function disable() {
                        _classPrivateFieldSet(_isDisabling, this, true);
                        this.div.tabIndex = -1;
                        this.togglePointerEvents(false);
                        var changedAnnotations = new Map();
                        var resetAnnotations = new Map();
                        var _iterator73 = _createForOfIteratorHelper(
                              _classPrivateFieldGet(_editors, this).values(),
                           ),
                           _step73;
                        try {
                           for (
                              _iterator73.s();
                              !(_step73 = _iterator73.n()).done;

                           ) {
                              var _this$getEditableAnno;
                              var _editor3 = _step73.value;
                              _editor3.disableEditing();
                              if (!_editor3.annotationElementId) {
                                 continue;
                              }
                              if (_editor3.serialize() !== null) {
                                 changedAnnotations.set(
                                    _editor3.annotationElementId,
                                    _editor3,
                                 );
                                 continue;
                              } else {
                                 resetAnnotations.set(
                                    _editor3.annotationElementId,
                                    _editor3,
                                 );
                              }
                              (_this$getEditableAnno =
                                 this.getEditableAnnotation(
                                    _editor3.annotationElementId,
                                 )) === null ||
                                 _this$getEditableAnno === void 0 ||
                                 _this$getEditableAnno.show();
                              _editor3.remove();
                           }
                        } catch (err) {
                           _iterator73.e(err);
                        } finally {
                           _iterator73.f();
                        }
                        if (_classPrivateFieldGet(_annotationLayer, this)) {
                           var editables = _classPrivateFieldGet(
                              _annotationLayer,
                              this,
                           ).getEditableAnnotations();
                           var _iterator74 =
                                 _createForOfIteratorHelper(editables),
                              _step74;
                           try {
                              for (
                                 _iterator74.s();
                                 !(_step74 = _iterator74.n()).done;

                              ) {
                                 var editable = _step74.value;
                                 var id = editable.data.id;
                                 if (
                                    _classPrivateFieldGet(
                                       _uiManager2,
                                       this,
                                    ).isDeletedAnnotationElement(id)
                                 ) {
                                    continue;
                                 }
                                 var editor = resetAnnotations.get(id);
                                 if (editor) {
                                    editor.resetAnnotationElement(editable);
                                    editor.show(false);
                                    editable.show();
                                    continue;
                                 }
                                 editor = changedAnnotations.get(id);
                                 if (editor) {
                                    _classPrivateFieldGet(
                                       _uiManager2,
                                       this,
                                    ).addChangedExistingAnnotation(editor);
                                    editor.renderAnnotationElement(editable);
                                    editor.show(false);
                                 }
                                 editable.show();
                              }
                           } catch (err) {
                              _iterator74.e(err);
                           } finally {
                              _iterator74.f();
                           }
                        }
                        _assertClassBrand(
                           _AnnotationEditorLayer_brand,
                           this,
                           _cleanup,
                        ).call(this);
                        if (this.isEmpty) {
                           this.div.hidden = true;
                        }
                        var classList = this.div.classList;
                        var _iterator75 = _createForOfIteratorHelper(
                              _editorTypes._.values(),
                           ),
                           _step75;
                        try {
                           for (
                              _iterator75.s();
                              !(_step75 = _iterator75.n()).done;

                           ) {
                              var editorType = _step75.value;
                              classList.remove(
                                 "".concat(editorType._type, "Editing"),
                              );
                           }
                        } catch (err) {
                           _iterator75.e(err);
                        } finally {
                           _iterator75.f();
                        }
                        this.disableTextSelection();
                        this.toggleAnnotationLayerPointerEvents(true);
                        _classPrivateFieldSet(_isDisabling, this, false);
                     },
                  },
                  {
                     key: "getEditableAnnotation",
                     value: function getEditableAnnotation(id) {
                        var _classPrivateFieldGet14;
                        return (
                           ((_classPrivateFieldGet14 = _classPrivateFieldGet(
                              _annotationLayer,
                              this,
                           )) === null || _classPrivateFieldGet14 === void 0
                              ? void 0
                              : _classPrivateFieldGet14.getEditableAnnotation(
                                   id,
                                )) || null
                        );
                     },
                  },
                  {
                     key: "setActiveEditor",
                     value: function setActiveEditor(editor) {
                        var currentActive = _classPrivateFieldGet(
                           _uiManager2,
                           this,
                        ).getActive();
                        if (currentActive === editor) {
                           return;
                        }
                        _classPrivateFieldGet(
                           _uiManager2,
                           this,
                        ).setActiveEditor(editor);
                     },
                  },
                  {
                     key: "enableTextSelection",
                     value: function enableTextSelection() {
                        var _classPrivateFieldGet15;
                        this.div.tabIndex = -1;
                        if (
                           (_classPrivateFieldGet15 = _classPrivateFieldGet(
                              _textLayer,
                              this,
                           )) !== null &&
                           _classPrivateFieldGet15 !== void 0 &&
                           _classPrivateFieldGet15.div &&
                           !_classPrivateFieldGet(
                              _boundTextLayerPointerDown,
                              this,
                           )
                        ) {
                           _classPrivateFieldSet(
                              _boundTextLayerPointerDown,
                              this,
                              _assertClassBrand(
                                 _AnnotationEditorLayer_brand,
                                 this,
                                 _textLayerPointerDown,
                              ).bind(this),
                           );
                           _classPrivateFieldGet(
                              _textLayer,
                              this,
                           ).div.addEventListener(
                              "pointerdown",
                              _classPrivateFieldGet(
                                 _boundTextLayerPointerDown,
                                 this,
                              ),
                           );
                           _classPrivateFieldGet(
                              _textLayer,
                              this,
                           ).div.classList.add("highlighting");
                        }
                     },
                  },
                  {
                     key: "disableTextSelection",
                     value: function disableTextSelection() {
                        var _classPrivateFieldGet16;
                        this.div.tabIndex = 0;
                        if (
                           (_classPrivateFieldGet16 = _classPrivateFieldGet(
                              _textLayer,
                              this,
                           )) !== null &&
                           _classPrivateFieldGet16 !== void 0 &&
                           _classPrivateFieldGet16.div &&
                           _classPrivateFieldGet(
                              _boundTextLayerPointerDown,
                              this,
                           )
                        ) {
                           _classPrivateFieldGet(
                              _textLayer,
                              this,
                           ).div.removeEventListener(
                              "pointerdown",
                              _classPrivateFieldGet(
                                 _boundTextLayerPointerDown,
                                 this,
                              ),
                           );
                           _classPrivateFieldSet(
                              _boundTextLayerPointerDown,
                              this,
                              null,
                           );
                           _classPrivateFieldGet(
                              _textLayer,
                              this,
                           ).div.classList.remove("highlighting");
                        }
                     },
                  },
                  {
                     key: "enableClick",
                     value: function enableClick() {
                        if (_classPrivateFieldGet(_boundPointerdown, this)) {
                           return;
                        }
                        _classPrivateFieldSet(
                           _boundPointerdown,
                           this,
                           this.pointerdown.bind(this),
                        );
                        _classPrivateFieldSet(
                           _boundPointerup,
                           this,
                           this.pointerup.bind(this),
                        );
                        this.div.addEventListener(
                           "pointerdown",
                           _classPrivateFieldGet(_boundPointerdown, this),
                        );
                        this.div.addEventListener(
                           "pointerup",
                           _classPrivateFieldGet(_boundPointerup, this),
                        );
                     },
                  },
                  {
                     key: "disableClick",
                     value: function disableClick() {
                        if (!_classPrivateFieldGet(_boundPointerdown, this)) {
                           return;
                        }
                        this.div.removeEventListener(
                           "pointerdown",
                           _classPrivateFieldGet(_boundPointerdown, this),
                        );
                        this.div.removeEventListener(
                           "pointerup",
                           _classPrivateFieldGet(_boundPointerup, this),
                        );
                        _classPrivateFieldSet(_boundPointerdown, this, null);
                        _classPrivateFieldSet(_boundPointerup, this, null);
                     },
                  },
                  {
                     key: "attach",
                     value: function attach(editor) {
                        _classPrivateFieldGet(_editors, this).set(
                           editor.id,
                           editor,
                        );
                        var annotationElementId = editor.annotationElementId;
                        if (
                           annotationElementId &&
                           _classPrivateFieldGet(
                              _uiManager2,
                              this,
                           ).isDeletedAnnotationElement(annotationElementId)
                        ) {
                           _classPrivateFieldGet(
                              _uiManager2,
                              this,
                           ).removeDeletedAnnotationElement(editor);
                        }
                     },
                  },
                  {
                     key: "detach",
                     value: function detach(editor) {
                        var _classPrivateFieldGet17;
                        _classPrivateFieldGet(_editors, this)["delete"](
                           editor.id,
                        );
                        (_classPrivateFieldGet17 = _classPrivateFieldGet(
                           _accessibilityManager2,
                           this,
                        )) === null ||
                           _classPrivateFieldGet17 === void 0 ||
                           _classPrivateFieldGet17.removePointerInTextLayer(
                              editor.contentDiv,
                           );
                        if (
                           !_classPrivateFieldGet(_isDisabling, this) &&
                           editor.annotationElementId
                        ) {
                           _classPrivateFieldGet(
                              _uiManager2,
                              this,
                           ).addDeletedAnnotationElement(editor);
                        }
                     },
                  },
                  {
                     key: "remove",
                     value: function remove(editor) {
                        this.detach(editor);
                        _classPrivateFieldGet(_uiManager2, this).removeEditor(
                           editor,
                        );
                        editor.div.remove();
                        editor.isAttachedToDOM = false;
                        if (!_classPrivateFieldGet(_isCleaningUp, this)) {
                           this.addInkEditorIfNeeded(false);
                        }
                     },
                  },
                  {
                     key: "changeParent",
                     value: function changeParent(editor) {
                        var _editor$parent;
                        if (editor.parent === this) {
                           return;
                        }
                        if (editor.parent && editor.annotationElementId) {
                           _classPrivateFieldGet(
                              _uiManager2,
                              this,
                           ).addDeletedAnnotationElement(
                              editor.annotationElementId,
                           );
                           editor_editor.AnnotationEditor.deleteAnnotationElement(
                              editor,
                           );
                           editor.annotationElementId = null;
                        }
                        this.attach(editor);
                        (_editor$parent = editor.parent) === null ||
                           _editor$parent === void 0 ||
                           _editor$parent.detach(editor);
                        editor.setParent(this);
                        if (editor.div && editor.isAttachedToDOM) {
                           editor.div.remove();
                           this.div.append(editor.div);
                        }
                     },
                  },
                  {
                     key: "add",
                     value: function add(editor) {
                        if (editor.parent === this && editor.isAttachedToDOM) {
                           return;
                        }
                        this.changeParent(editor);
                        _classPrivateFieldGet(_uiManager2, this).addEditor(
                           editor,
                        );
                        this.attach(editor);
                        if (!editor.isAttachedToDOM) {
                           var div = editor.render();
                           this.div.append(div);
                           editor.isAttachedToDOM = true;
                        }
                        editor.fixAndSetPosition();
                        editor.onceAdded();
                        _classPrivateFieldGet(
                           _uiManager2,
                           this,
                        ).addToAnnotationStorage(editor);
                        editor._reportTelemetry(editor.telemetryInitialData);
                     },
                  },
                  {
                     key: "moveEditorInDOM",
                     value: function moveEditorInDOM(editor) {
                        var _this61 = this,
                           _classPrivateFieldGet18;
                        if (!editor.isAttachedToDOM) {
                           return;
                        }
                        var _document2 = document,
                           activeElement = _document2.activeElement;
                        if (
                           editor.div.contains(activeElement) &&
                           !_classPrivateFieldGet(_editorFocusTimeoutId, this)
                        ) {
                           editor._focusEventsAllowed = false;
                           _classPrivateFieldSet(
                              _editorFocusTimeoutId,
                              this,
                              setTimeout(function () {
                                 _classPrivateFieldSet(
                                    _editorFocusTimeoutId,
                                    _this61,
                                    null,
                                 );
                                 if (
                                    !editor.div.contains(document.activeElement)
                                 ) {
                                    editor.div.addEventListener(
                                       "focusin",
                                       function () {
                                          editor._focusEventsAllowed = true;
                                       },
                                       { once: true },
                                    );
                                    activeElement.focus();
                                 } else {
                                    editor._focusEventsAllowed = true;
                                 }
                              }, 0),
                           );
                        }
                        editor._structTreeParentId =
                           (_classPrivateFieldGet18 = _classPrivateFieldGet(
                              _accessibilityManager2,
                              this,
                           )) === null || _classPrivateFieldGet18 === void 0
                              ? void 0
                              : _classPrivateFieldGet18.moveElementInDOM(
                                   this.div,
                                   editor.div,
                                   editor.contentDiv,
                                   true,
                                );
                     },
                  },
                  {
                     key: "addOrRebuild",
                     value: function addOrRebuild(editor) {
                        if (editor.needsToBeRebuilt()) {
                           editor.parent || (editor.parent = this);
                           editor.rebuild();
                           editor.show();
                        } else {
                           this.add(editor);
                        }
                     },
                  },
                  {
                     key: "addUndoableEditor",
                     value: function addUndoableEditor(editor) {
                        var cmd = function cmd() {
                           return editor._uiManager.rebuild(editor);
                        };
                        var undo = function undo() {
                           editor.remove();
                        };
                        this.addCommands({
                           cmd: cmd,
                           undo: undo,
                           mustExec: false,
                        });
                     },
                  },
                  {
                     key: "getNextId",
                     value: function getNextId() {
                        return _classPrivateFieldGet(_uiManager2, this).getId();
                     },
                  },
                  {
                     key: "canCreateNewEmptyEditor",
                     value: function canCreateNewEmptyEditor() {
                        var _classPrivateGetter2;
                        return (_classPrivateGetter2 = _classPrivateGetter(
                           _AnnotationEditorLayer_brand,
                           this,
                           _get_currentEditorType,
                        )) === null || _classPrivateGetter2 === void 0
                           ? void 0
                           : _classPrivateGetter2.canCreateNewEmptyEditor();
                     },
                  },
                  {
                     key: "pasteEditor",
                     value: function pasteEditor(mode, params) {
                        _classPrivateFieldGet(_uiManager2, this).updateToolbar(
                           mode,
                        );
                        _classPrivateFieldGet(_uiManager2, this).updateMode(
                           mode,
                        );
                        var _assertClassBrand$cal3 = _assertClassBrand(
                              _AnnotationEditorLayer_brand,
                              this,
                              _getCenterPoint,
                           ).call(this),
                           offsetX = _assertClassBrand$cal3.offsetX,
                           offsetY = _assertClassBrand$cal3.offsetY;
                        var id = this.getNextId();
                        var editor = _assertClassBrand(
                           _AnnotationEditorLayer_brand,
                           this,
                           _createNewEditor,
                        ).call(
                           this,
                           _objectSpread(
                              {
                                 parent: this,
                                 id: id,
                                 x: offsetX,
                                 y: offsetY,
                                 uiManager: _classPrivateFieldGet(
                                    _uiManager2,
                                    this,
                                 ),
                                 isCentered: true,
                              },
                              params,
                           ),
                        );
                        if (editor) {
                           this.add(editor);
                        }
                     },
                  },
                  {
                     key: "deserialize",
                     value: function deserialize(data) {
                        var _editorTypes$_$get, _data$annotationType;
                        return (
                           ((_editorTypes$_$get = _editorTypes._.get(
                              (_data$annotationType = data.annotationType) !==
                                 null && _data$annotationType !== void 0
                                 ? _data$annotationType
                                 : data.annotationEditorType,
                           )) === null || _editorTypes$_$get === void 0
                              ? void 0
                              : _editorTypes$_$get.deserialize(
                                   data,
                                   this,
                                   _classPrivateFieldGet(_uiManager2, this),
                                )) || null
                        );
                     },
                  },
                  {
                     key: "createAndAddNewEditor",
                     value: function createAndAddNewEditor(event, isCentered) {
                        var data =
                           arguments.length > 2 && arguments[2] !== undefined
                              ? arguments[2]
                              : {};
                        var id = this.getNextId();
                        var editor = _assertClassBrand(
                           _AnnotationEditorLayer_brand,
                           this,
                           _createNewEditor,
                        ).call(
                           this,
                           _objectSpread(
                              {
                                 parent: this,
                                 id: id,
                                 x: event.offsetX,
                                 y: event.offsetY,
                                 uiManager: _classPrivateFieldGet(
                                    _uiManager2,
                                    this,
                                 ),
                                 isCentered: isCentered,
                              },
                              data,
                           ),
                        );
                        if (editor) {
                           this.add(editor);
                        }
                        return editor;
                     },
                  },
                  {
                     key: "addNewEditor",
                     value: function addNewEditor() {
                        this.createAndAddNewEditor(
                           _assertClassBrand(
                              _AnnotationEditorLayer_brand,
                              this,
                              _getCenterPoint,
                           ).call(this),
                           true,
                        );
                     },
                  },
                  {
                     key: "setSelected",
                     value: function setSelected(editor) {
                        _classPrivateFieldGet(_uiManager2, this).setSelected(
                           editor,
                        );
                     },
                  },
                  {
                     key: "toggleSelected",
                     value: function toggleSelected(editor) {
                        _classPrivateFieldGet(_uiManager2, this).toggleSelected(
                           editor,
                        );
                     },
                  },
                  {
                     key: "isSelected",
                     value: function isSelected(editor) {
                        return _classPrivateFieldGet(
                           _uiManager2,
                           this,
                        ).isSelected(editor);
                     },
                  },
                  {
                     key: "unselect",
                     value: function unselect(editor) {
                        _classPrivateFieldGet(_uiManager2, this).unselect(
                           editor,
                        );
                     },
                  },
                  {
                     key: "pointerup",
                     value: function pointerup(event) {
                        var isMac = util.FeatureTest.platform.isMac;
                        if (event.button !== 0 || (event.ctrlKey && isMac)) {
                           return;
                        }
                        if (event.target !== this.div) {
                           return;
                        }
                        if (!_classPrivateFieldGet(_hadPointerDown, this)) {
                           return;
                        }
                        _classPrivateFieldSet(_hadPointerDown, this, false);
                        if (!_classPrivateFieldGet(_allowClick, this)) {
                           _classPrivateFieldSet(_allowClick, this, true);
                           return;
                        }
                        if (
                           _classPrivateFieldGet(
                              _uiManager2,
                              this,
                           ).getMode() === util.AnnotationEditorType.STAMP
                        ) {
                           _classPrivateFieldGet(
                              _uiManager2,
                              this,
                           ).unselectAll();
                           return;
                        }
                        this.createAndAddNewEditor(event, false);
                     },
                  },
                  {
                     key: "pointerdown",
                     value: function pointerdown(event) {
                        if (
                           _classPrivateFieldGet(
                              _uiManager2,
                              this,
                           ).getMode() === util.AnnotationEditorType.HIGHLIGHT
                        ) {
                           this.enableTextSelection();
                        }
                        if (_classPrivateFieldGet(_hadPointerDown, this)) {
                           _classPrivateFieldSet(_hadPointerDown, this, false);
                           return;
                        }
                        var isMac = util.FeatureTest.platform.isMac;
                        if (event.button !== 0 || (event.ctrlKey && isMac)) {
                           return;
                        }
                        if (event.target !== this.div) {
                           return;
                        }
                        _classPrivateFieldSet(_hadPointerDown, this, true);
                        var editor = _classPrivateFieldGet(
                           _uiManager2,
                           this,
                        ).getActive();
                        _classPrivateFieldSet(
                           _allowClick,
                           this,
                           !editor || editor.isEmpty(),
                        );
                     },
                  },
                  {
                     key: "findNewParent",
                     value: function findNewParent(editor, x, y) {
                        var layer = _classPrivateFieldGet(
                           _uiManager2,
                           this,
                        ).findParent(x, y);
                        if (layer === null || layer === this) {
                           return false;
                        }
                        layer.changeParent(editor);
                        return true;
                     },
                  },
                  {
                     key: "destroy",
                     value: function destroy() {
                        var _classPrivateFieldGet19;
                        if (
                           ((_classPrivateFieldGet19 = _classPrivateFieldGet(
                              _uiManager2,
                              this,
                           ).getActive()) === null ||
                           _classPrivateFieldGet19 === void 0
                              ? void 0
                              : _classPrivateFieldGet19.parent) === this
                        ) {
                           _classPrivateFieldGet(
                              _uiManager2,
                              this,
                           ).commitOrRemove();
                           _classPrivateFieldGet(
                              _uiManager2,
                              this,
                           ).setActiveEditor(null);
                        }
                        if (
                           _classPrivateFieldGet(_editorFocusTimeoutId, this)
                        ) {
                           clearTimeout(
                              _classPrivateFieldGet(
                                 _editorFocusTimeoutId,
                                 this,
                              ),
                           );
                           _classPrivateFieldSet(
                              _editorFocusTimeoutId,
                              this,
                              null,
                           );
                        }
                        var _iterator76 = _createForOfIteratorHelper(
                              _classPrivateFieldGet(_editors, this).values(),
                           ),
                           _step76;
                        try {
                           for (
                              _iterator76.s();
                              !(_step76 = _iterator76.n()).done;

                           ) {
                              var _classPrivateFieldGet20;
                              var editor = _step76.value;
                              (_classPrivateFieldGet20 = _classPrivateFieldGet(
                                 _accessibilityManager2,
                                 this,
                              )) === null ||
                                 _classPrivateFieldGet20 === void 0 ||
                                 _classPrivateFieldGet20.removePointerInTextLayer(
                                    editor.contentDiv,
                                 );
                              editor.setParent(null);
                              editor.isAttachedToDOM = false;
                              editor.div.remove();
                           }
                        } catch (err) {
                           _iterator76.e(err);
                        } finally {
                           _iterator76.f();
                        }
                        this.div = null;
                        _classPrivateFieldGet(_editors, this).clear();
                        _classPrivateFieldGet(_uiManager2, this).removeLayer(
                           this,
                        );
                     },
                  },
                  {
                     key: "render",
                     value: function render(_ref78) {
                        var viewport = _ref78.viewport;
                        this.viewport = viewport;
                        (0, display_utils.setLayerDimensions)(
                           this.div,
                           viewport,
                        );
                        var _iterator77 = _createForOfIteratorHelper(
                              _classPrivateFieldGet(
                                 _uiManager2,
                                 this,
                              ).getEditors(this.pageIndex),
                           ),
                           _step77;
                        try {
                           for (
                              _iterator77.s();
                              !(_step77 = _iterator77.n()).done;

                           ) {
                              var editor = _step77.value;
                              this.add(editor);
                              editor.rebuild();
                           }
                        } catch (err) {
                           _iterator77.e(err);
                        } finally {
                           _iterator77.f();
                        }
                        this.updateMode();
                     },
                  },
                  {
                     key: "update",
                     value: function update(_ref79) {
                        var viewport = _ref79.viewport;
                        _classPrivateFieldGet(
                           _uiManager2,
                           this,
                        ).commitOrRemove();
                        _assertClassBrand(
                           _AnnotationEditorLayer_brand,
                           this,
                           _cleanup,
                        ).call(this);
                        var oldRotation = this.viewport.rotation;
                        var rotation = viewport.rotation;
                        this.viewport = viewport;
                        (0, display_utils.setLayerDimensions)(this.div, {
                           rotation: rotation,
                        });
                        if (oldRotation !== rotation) {
                           var _iterator78 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_editors, this).values(),
                              ),
                              _step78;
                           try {
                              for (
                                 _iterator78.s();
                                 !(_step78 = _iterator78.n()).done;

                              ) {
                                 var editor = _step78.value;
                                 editor.rotate(rotation);
                              }
                           } catch (err) {
                              _iterator78.e(err);
                           } finally {
                              _iterator78.f();
                           }
                        }
                        this.addInkEditorIfNeeded(false);
                     },
                  },
                  {
                     key: "pageDimensions",
                     get: function get() {
                        var _this$viewport$rawDim = this.viewport.rawDims,
                           pageWidth = _this$viewport$rawDim.pageWidth,
                           pageHeight = _this$viewport$rawDim.pageHeight;
                        return [pageWidth, pageHeight];
                     },
                  },
                  {
                     key: "scale",
                     get: function get() {
                        return _classPrivateFieldGet(_uiManager2, this)
                           .viewParameters.realScale;
                     },
                  },
               ]);
            })();
            /***/ function _textLayerPointerDown(event) {
               var _this77 = this;
               _classPrivateFieldGet(_uiManager2, this).unselectAll();
               if (
                  event.target === _classPrivateFieldGet(_textLayer, this).div
               ) {
                  var isMac = util.FeatureTest.platform.isMac;
                  if (event.button !== 0 || (event.ctrlKey && isMac)) {
                     return;
                  }
                  _classPrivateFieldGet(_uiManager2, this).showAllEditors(
                     "highlight",
                     true,
                     true,
                  );
                  _classPrivateFieldGet(_textLayer, this).div.classList.add(
                     "free",
                  );
                  HighlightEditor.startHighlighting(
                     this,
                     _classPrivateFieldGet(_uiManager2, this).direction ===
                        "ltr",
                     event,
                  );
                  _classPrivateFieldGet(_textLayer, this).div.addEventListener(
                     "pointerup",
                     function () {
                        _classPrivateFieldGet(
                           _textLayer,
                           _this77,
                        ).div.classList.remove("free");
                     },
                     { once: true },
                  );
                  event.preventDefault();
               }
            }
            function _get_currentEditorType(_this60) {
               return _editorTypes._.get(
                  _classPrivateFieldGet(_uiManager2, _this60).getMode(),
               );
            }
            function _createNewEditor(params) {
               var editorType = _classPrivateGetter(
                  _AnnotationEditorLayer_brand,
                  this,
                  _get_currentEditorType,
               );
               return editorType
                  ? new editorType.prototype.constructor(params)
                  : null;
            }
            function _getCenterPoint() {
               var _this$div$getBounding = this.div.getBoundingClientRect(),
                  x = _this$div$getBounding.x,
                  y = _this$div$getBounding.y,
                  width = _this$div$getBounding.width,
                  height = _this$div$getBounding.height;
               var tlX = Math.max(0, x);
               var tlY = Math.max(0, y);
               var brX = Math.min(window.innerWidth, x + width);
               var brY = Math.min(window.innerHeight, y + height);
               var centerX = (tlX + brX) / 2 - x;
               var centerY = (tlY + brY) / 2 - y;
               var _ref83 =
                     this.viewport.rotation % 180 === 0
                        ? [centerX, centerY]
                        : [centerY, centerX],
                  _ref84 = _slicedToArray(_ref83, 2),
                  offsetX = _ref84[0],
                  offsetY = _ref84[1];
               return { offsetX: offsetX, offsetY: offsetY };
            }
            function _cleanup() {
               _classPrivateFieldSet(_isCleaningUp, this, true);
               var _iterator87 = _createForOfIteratorHelper(
                     _classPrivateFieldGet(_editors, this).values(),
                  ),
                  _step87;
               try {
                  for (_iterator87.s(); !(_step87 = _iterator87.n()).done; ) {
                     var editor = _step87.value;
                     if (editor.isEmpty()) {
                        editor.remove();
                     }
                  }
               } catch (err) {
                  _iterator87.e(err);
               } finally {
                  _iterator87.f();
               }
               _classPrivateFieldSet(_isCleaningUp, this, false);
            }
            _defineProperty(_AnnotationEditorLayer, "_initialized", false);
            var _editorTypes = {
               _: new Map(
                  [FreeTextEditor, InkEditor, StampEditor, HighlightEditor].map(
                     function (type) {
                        return [type._editorType, type];
                     },
                  ),
               ),
            };
         },
         /***/ 259: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            var _ColorPicker2;
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ ColorPicker: function ColorPicker() {
                  return /* binding */ _ColorPicker;
               } /* harmony export */,
            });
            /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(292);
            /* harmony import */ var _tools_js__WEBPACK_IMPORTED_MODULE_1__ =
               __webpack_require__(830);
            /* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_2__ =
               __webpack_require__(419);
            var _boundKeyDown2 = /*#__PURE__*/ new WeakMap();
            var _boundPointerDown = /*#__PURE__*/ new WeakMap();
            var _button = /*#__PURE__*/ new WeakMap();
            var _buttonSwatch = /*#__PURE__*/ new WeakMap();
            var _defaultColor = /*#__PURE__*/ new WeakMap();
            var _dropdown = /*#__PURE__*/ new WeakMap();
            var _dropdownWasFromKeyboard = /*#__PURE__*/ new WeakMap();
            var _isMainColorPicker = /*#__PURE__*/ new WeakMap();
            var _editor4 = /*#__PURE__*/ new WeakMap();
            var _eventBus = /*#__PURE__*/ new WeakMap();
            var _uiManager3 = /*#__PURE__*/ new WeakMap();
            var _type3 = /*#__PURE__*/ new WeakMap();
            var _ColorPicker_brand = /*#__PURE__*/ new WeakSet();
            var _ColorPicker = /*#__PURE__*/ (function () {
               function _ColorPicker(_ref85) {
                  var _classPrivateFieldGet28;
                  var _ref85$editor = _ref85.editor,
                     editor = _ref85$editor === void 0 ? null : _ref85$editor,
                     _ref85$uiManager = _ref85.uiManager,
                     uiManager =
                        _ref85$uiManager === void 0 ? null : _ref85$uiManager;
                  _classCallCheck(this, _ColorPicker);
                  _classPrivateMethodInitSpec(this, _ColorPicker_brand);
                  _classPrivateFieldInitSpec(
                     this,
                     _boundKeyDown2,
                     _assertClassBrand(
                        _ColorPicker_brand,
                        this,
                        _keyDown2,
                     ).bind(this),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundPointerDown,
                     _assertClassBrand(
                        _ColorPicker_brand,
                        this,
                        _pointerDown,
                     ).bind(this),
                  );
                  _classPrivateFieldInitSpec(this, _button, null);
                  _classPrivateFieldInitSpec(this, _buttonSwatch, null);
                  _classPrivateFieldInitSpec(this, _defaultColor, void 0);
                  _classPrivateFieldInitSpec(this, _dropdown, null);
                  _classPrivateFieldInitSpec(
                     this,
                     _dropdownWasFromKeyboard,
                     false,
                  );
                  _classPrivateFieldInitSpec(this, _isMainColorPicker, false);
                  _classPrivateFieldInitSpec(this, _editor4, null);
                  _classPrivateFieldInitSpec(this, _eventBus, void 0);
                  _classPrivateFieldInitSpec(this, _uiManager3, null);
                  _classPrivateFieldInitSpec(this, _type3, void 0);
                  if (editor) {
                     _classPrivateFieldSet(_isMainColorPicker, this, false);
                     _classPrivateFieldSet(
                        _type3,
                        this,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                           .AnnotationEditorParamsType.HIGHLIGHT_COLOR,
                     );
                     _classPrivateFieldSet(_editor4, this, editor);
                  } else {
                     _classPrivateFieldSet(_isMainColorPicker, this, true);
                     _classPrivateFieldSet(
                        _type3,
                        this,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                           .AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR,
                     );
                  }
                  _classPrivateFieldSet(
                     _uiManager3,
                     this,
                     (editor === null || editor === void 0
                        ? void 0
                        : editor._uiManager) || uiManager,
                  );
                  _classPrivateFieldSet(
                     _eventBus,
                     this,
                     _classPrivateFieldGet(_uiManager3, this)._eventBus,
                  );
                  _classPrivateFieldSet(
                     _defaultColor,
                     this,
                     (editor === null || editor === void 0
                        ? void 0
                        : editor.color) ||
                        ((_classPrivateFieldGet28 = _classPrivateFieldGet(
                           _uiManager3,
                           this,
                        )) === null || _classPrivateFieldGet28 === void 0
                           ? void 0
                           : _classPrivateFieldGet28.highlightColors
                                .values()
                                .next().value) ||
                        "#FFFF98",
                  );
               }
               return _createClass(
                  _ColorPicker,
                  [
                     {
                        key: "renderButton",
                        value: function renderButton() {
                           var button = _classPrivateFieldSet(
                              _button,
                              this,
                              document.createElement("button"),
                           );
                           button.className = "colorPicker";
                           button.tabIndex = "0";
                           button.setAttribute(
                              "data-l10n-id",
                              "pdfjs-editor-colorpicker-button",
                           );
                           button.setAttribute("aria-haspopup", true);
                           button.addEventListener(
                              "click",
                              _assertClassBrand(
                                 _ColorPicker_brand,
                                 this,
                                 _openDropdown,
                              ).bind(this),
                           );
                           button.addEventListener(
                              "keydown",
                              _classPrivateFieldGet(_boundKeyDown2, this),
                           );
                           var swatch = _classPrivateFieldSet(
                              _buttonSwatch,
                              this,
                              document.createElement("span"),
                           );
                           swatch.className = "swatch";
                           swatch.setAttribute("aria-hidden", true);
                           swatch.style.backgroundColor = _classPrivateFieldGet(
                              _defaultColor,
                              this,
                           );
                           button.append(swatch);
                           return button;
                        },
                     },
                     {
                        key: "renderMainDropdown",
                        value: function renderMainDropdown() {
                           var dropdown = _classPrivateFieldSet(
                              _dropdown,
                              this,
                              _assertClassBrand(
                                 _ColorPicker_brand,
                                 this,
                                 _getDropdownRoot,
                              ).call(this),
                           );
                           dropdown.setAttribute(
                              "aria-orientation",
                              "horizontal",
                           );
                           dropdown.setAttribute(
                              "aria-labelledby",
                              "highlightColorPickerLabel",
                           );
                           return dropdown;
                        },
                     },
                     {
                        key: "_colorSelectFromKeyboard",
                        value: function _colorSelectFromKeyboard(event) {
                           if (
                              event.target ===
                              _classPrivateFieldGet(_button, this)
                           ) {
                              _assertClassBrand(
                                 _ColorPicker_brand,
                                 this,
                                 _openDropdown,
                              ).call(this, event);
                              return;
                           }
                           var color = event.target.getAttribute("data-color");
                           if (!color) {
                              return;
                           }
                           _assertClassBrand(
                              _ColorPicker_brand,
                              this,
                              _colorSelect,
                           ).call(this, color, event);
                        },
                     },
                     {
                        key: "_moveToNext",
                        value: function _moveToNext(event) {
                           var _event$target$nextSib;
                           if (
                              !_classPrivateGetter(
                                 _ColorPicker_brand,
                                 this,
                                 _get_isDropdownVisible,
                              )
                           ) {
                              _assertClassBrand(
                                 _ColorPicker_brand,
                                 this,
                                 _openDropdown,
                              ).call(this, event);
                              return;
                           }
                           if (
                              event.target ===
                              _classPrivateFieldGet(_button, this)
                           ) {
                              var _classPrivateFieldGet29;
                              (_classPrivateFieldGet29 = _classPrivateFieldGet(
                                 _dropdown,
                                 this,
                              ).firstChild) === null ||
                                 _classPrivateFieldGet29 === void 0 ||
                                 _classPrivateFieldGet29.focus();
                              return;
                           }
                           (_event$target$nextSib =
                              event.target.nextSibling) === null ||
                              _event$target$nextSib === void 0 ||
                              _event$target$nextSib.focus();
                        },
                     },
                     {
                        key: "_moveToPrevious",
                        value: function _moveToPrevious(event) {
                           var _classPrivateFieldGet30, _event$target$previou;
                           if (
                              event.target ===
                                 ((_classPrivateFieldGet30 =
                                    _classPrivateFieldGet(_dropdown, this)) ===
                                    null || _classPrivateFieldGet30 === void 0
                                    ? void 0
                                    : _classPrivateFieldGet30.firstChild) ||
                              event.target ===
                                 _classPrivateFieldGet(_button, this)
                           ) {
                              if (
                                 _classPrivateGetter(
                                    _ColorPicker_brand,
                                    this,
                                    _get_isDropdownVisible,
                                 )
                              ) {
                                 this._hideDropdownFromKeyboard();
                              }
                              return;
                           }
                           if (
                              !_classPrivateGetter(
                                 _ColorPicker_brand,
                                 this,
                                 _get_isDropdownVisible,
                              )
                           ) {
                              _assertClassBrand(
                                 _ColorPicker_brand,
                                 this,
                                 _openDropdown,
                              ).call(this, event);
                           }
                           (_event$target$previou =
                              event.target.previousSibling) === null ||
                              _event$target$previou === void 0 ||
                              _event$target$previou.focus();
                        },
                     },
                     {
                        key: "_moveToBeginning",
                        value: function _moveToBeginning(event) {
                           var _classPrivateFieldGet31;
                           if (
                              !_classPrivateGetter(
                                 _ColorPicker_brand,
                                 this,
                                 _get_isDropdownVisible,
                              )
                           ) {
                              _assertClassBrand(
                                 _ColorPicker_brand,
                                 this,
                                 _openDropdown,
                              ).call(this, event);
                              return;
                           }
                           (_classPrivateFieldGet31 = _classPrivateFieldGet(
                              _dropdown,
                              this,
                           ).firstChild) === null ||
                              _classPrivateFieldGet31 === void 0 ||
                              _classPrivateFieldGet31.focus();
                        },
                     },
                     {
                        key: "_moveToEnd",
                        value: function _moveToEnd(event) {
                           var _classPrivateFieldGet32;
                           if (
                              !_classPrivateGetter(
                                 _ColorPicker_brand,
                                 this,
                                 _get_isDropdownVisible,
                              )
                           ) {
                              _assertClassBrand(
                                 _ColorPicker_brand,
                                 this,
                                 _openDropdown,
                              ).call(this, event);
                              return;
                           }
                           (_classPrivateFieldGet32 = _classPrivateFieldGet(
                              _dropdown,
                              this,
                           ).lastChild) === null ||
                              _classPrivateFieldGet32 === void 0 ||
                              _classPrivateFieldGet32.focus();
                        },
                     },
                     {
                        key: "hideDropdown",
                        value: function hideDropdown() {
                           var _classPrivateFieldGet33;
                           (_classPrivateFieldGet33 = _classPrivateFieldGet(
                              _dropdown,
                              this,
                           )) === null ||
                              _classPrivateFieldGet33 === void 0 ||
                              _classPrivateFieldGet33.classList.add("hidden");
                           window.removeEventListener(
                              "pointerdown",
                              _classPrivateFieldGet(_boundPointerDown, this),
                           );
                        },
                     },
                     {
                        key: "_hideDropdownFromKeyboard",
                        value: function _hideDropdownFromKeyboard() {
                           if (
                              _classPrivateFieldGet(_isMainColorPicker, this)
                           ) {
                              return;
                           }
                           if (
                              !_classPrivateGetter(
                                 _ColorPicker_brand,
                                 this,
                                 _get_isDropdownVisible,
                              )
                           ) {
                              var _classPrivateFieldGet34;
                              (_classPrivateFieldGet34 = _classPrivateFieldGet(
                                 _editor4,
                                 this,
                              )) === null ||
                                 _classPrivateFieldGet34 === void 0 ||
                                 _classPrivateFieldGet34.unselect();
                              return;
                           }
                           this.hideDropdown();
                           _classPrivateFieldGet(_button, this).focus({
                              preventScroll: true,
                              focusVisible: _classPrivateFieldGet(
                                 _dropdownWasFromKeyboard,
                                 this,
                              ),
                           });
                        },
                     },
                     {
                        key: "updateColor",
                        value: function updateColor(color) {
                           if (_classPrivateFieldGet(_buttonSwatch, this)) {
                              _classPrivateFieldGet(
                                 _buttonSwatch,
                                 this,
                              ).style.backgroundColor = color;
                           }
                           if (!_classPrivateFieldGet(_dropdown, this)) {
                              return;
                           }
                           var i = _classPrivateFieldGet(
                              _uiManager3,
                              this,
                           ).highlightColors.values();
                           var _iterator88 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_dropdown, this)
                                    .children,
                              ),
                              _step88;
                           try {
                              for (
                                 _iterator88.s();
                                 !(_step88 = _iterator88.n()).done;

                              ) {
                                 var child = _step88.value;
                                 child.setAttribute(
                                    "aria-selected",
                                    i.next().value === color,
                                 );
                              }
                           } catch (err) {
                              _iterator88.e(err);
                           } finally {
                              _iterator88.f();
                           }
                        },
                     },
                     {
                        key: "destroy",
                        value: function destroy() {
                           var _classPrivateFieldGet35, _classPrivateFieldGet36;
                           (_classPrivateFieldGet35 = _classPrivateFieldGet(
                              _button,
                              this,
                           )) === null ||
                              _classPrivateFieldGet35 === void 0 ||
                              _classPrivateFieldGet35.remove();
                           _classPrivateFieldSet(_button, this, null);
                           _classPrivateFieldSet(_buttonSwatch, this, null);
                           (_classPrivateFieldGet36 = _classPrivateFieldGet(
                              _dropdown,
                              this,
                           )) === null ||
                              _classPrivateFieldGet36 === void 0 ||
                              _classPrivateFieldGet36.remove();
                           _classPrivateFieldSet(_dropdown, this, null);
                        },
                     },
                  ],
                  [
                     {
                        key: "_keyboardManager",
                        get: function get() {
                           return (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                              this,
                              "_keyboardManager",
                              new _tools_js__WEBPACK_IMPORTED_MODULE_1__.KeyboardManager(
                                 [
                                    [
                                       ["Escape", "mac+Escape"],
                                       _ColorPicker.prototype
                                          ._hideDropdownFromKeyboard,
                                    ],
                                    [
                                       [" ", "mac+ "],
                                       _ColorPicker.prototype
                                          ._colorSelectFromKeyboard,
                                    ],
                                    [
                                       [
                                          "ArrowDown",
                                          "ArrowRight",
                                          "mac+ArrowDown",
                                          "mac+ArrowRight",
                                       ],
                                       _ColorPicker.prototype._moveToNext,
                                    ],
                                    [
                                       [
                                          "ArrowUp",
                                          "ArrowLeft",
                                          "mac+ArrowUp",
                                          "mac+ArrowLeft",
                                       ],
                                       _ColorPicker.prototype._moveToPrevious,
                                    ],
                                    [
                                       ["Home", "mac+Home"],
                                       _ColorPicker.prototype._moveToBeginning,
                                    ],
                                    [
                                       ["End", "mac+End"],
                                       _ColorPicker.prototype._moveToEnd,
                                    ],
                                 ],
                              ),
                           );
                        },
                     },
                  ],
               );
            })();
            /***/ _ColorPicker2 = _ColorPicker;
            function _getDropdownRoot() {
               var div = document.createElement("div");
               div.addEventListener(
                  "contextmenu",
                  _display_utils_js__WEBPACK_IMPORTED_MODULE_2__.noContextMenu,
               );
               div.className = "dropdown";
               div.role = "listbox";
               div.setAttribute("aria-multiselectable", false);
               div.setAttribute("aria-orientation", "vertical");
               div.setAttribute(
                  "data-l10n-id",
                  "pdfjs-editor-colorpicker-dropdown",
               );
               var _iterator89 = _createForOfIteratorHelper(
                     _classPrivateFieldGet(_uiManager3, this).highlightColors,
                  ),
                  _step89;
               try {
                  for (_iterator89.s(); !(_step89 = _iterator89.n()).done; ) {
                     var _step89$value = _slicedToArray(_step89.value, 2),
                        name = _step89$value[0],
                        color = _step89$value[1];
                     var button = document.createElement("button");
                     button.tabIndex = "0";
                     button.role = "option";
                     button.setAttribute("data-color", color);
                     button.title = name;
                     button.setAttribute(
                        "data-l10n-id",
                        "pdfjs-editor-colorpicker-".concat(name),
                     );
                     var swatch = document.createElement("span");
                     button.append(swatch);
                     swatch.className = "swatch";
                     swatch.style.backgroundColor = color;
                     button.setAttribute(
                        "aria-selected",
                        color === _classPrivateFieldGet(_defaultColor, this),
                     );
                     button.addEventListener(
                        "click",
                        _assertClassBrand(
                           _ColorPicker_brand,
                           this,
                           _colorSelect,
                        ).bind(this, color),
                     );
                     div.append(button);
                  }
               } catch (err) {
                  _iterator89.e(err);
               } finally {
                  _iterator89.f();
               }
               div.addEventListener(
                  "keydown",
                  _classPrivateFieldGet(_boundKeyDown2, this),
               );
               return div;
            }
            function _colorSelect(color, event) {
               event.stopPropagation();
               _classPrivateFieldGet(_eventBus, this).dispatch(
                  "switchannotationeditorparams",
                  {
                     source: this,
                     type: _classPrivateFieldGet(_type3, this),
                     value: color,
                  },
               );
            }
            function _keyDown2(event) {
               _ColorPicker2._keyboardManager.exec(this, event);
            }
            function _openDropdown(event) {
               if (
                  _classPrivateGetter(
                     _ColorPicker_brand,
                     this,
                     _get_isDropdownVisible,
                  )
               ) {
                  this.hideDropdown();
                  return;
               }
               _classPrivateFieldSet(
                  _dropdownWasFromKeyboard,
                  this,
                  event.detail === 0,
               );
               window.addEventListener(
                  "pointerdown",
                  _classPrivateFieldGet(_boundPointerDown, this),
               );
               if (_classPrivateFieldGet(_dropdown, this)) {
                  _classPrivateFieldGet(_dropdown, this).classList.remove(
                     "hidden",
                  );
                  return;
               }
               var root = _classPrivateFieldSet(
                  _dropdown,
                  this,
                  _assertClassBrand(
                     _ColorPicker_brand,
                     this,
                     _getDropdownRoot,
                  ).call(this),
               );
               _classPrivateFieldGet(_button, this).append(root);
            }
            function _pointerDown(event) {
               var _classPrivateFieldGet37;
               if (
                  (_classPrivateFieldGet37 = _classPrivateFieldGet(
                     _dropdown,
                     this,
                  )) !== null &&
                  _classPrivateFieldGet37 !== void 0 &&
                  _classPrivateFieldGet37.contains(event.target)
               ) {
                  return;
               }
               this.hideDropdown();
            }
            function _get_isDropdownVisible(_this78) {
               return (
                  _classPrivateFieldGet(_dropdown, _this78) &&
                  !_classPrivateFieldGet(_dropdown, _this78).classList.contains(
                     "hidden",
                  )
               );
            }
         },
         /***/ 310: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            var _AltText, _AnnotationEditor2; // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
               AnnotationEditor: function AnnotationEditor() {
                  return /* binding */ _AnnotationEditor;
               },
            }); // EXTERNAL MODULE: ./src/display/editor/tools.js
            var tools = __webpack_require__(830); // EXTERNAL MODULE: ./src/shared/util.js
            var util = __webpack_require__(292); // EXTERNAL MODULE: ./src/display/display_utils.js
            var display_utils = __webpack_require__(419); // CONCATENATED MODULE: ./src/display/editor/alt_text.js
            var _altText = /*#__PURE__*/ new WeakMap();
            var _altTextDecorative = /*#__PURE__*/ new WeakMap();
            var _altTextButton = /*#__PURE__*/ new WeakMap();
            var _altTextTooltip = /*#__PURE__*/ new WeakMap();
            var _altTextTooltipTimeout = /*#__PURE__*/ new WeakMap();
            var _altTextWasFromKeyBoard = /*#__PURE__*/ new WeakMap();
            var _editor5 = /*#__PURE__*/ new WeakMap();
            var _AltText_brand = /*#__PURE__*/ new WeakSet();
            var AltText = /*#__PURE__*/ (function () {
               function AltText(editor) {
                  _classCallCheck(this, AltText);
                  _classPrivateMethodInitSpec(this, _AltText_brand);
                  _classPrivateFieldInitSpec(this, _altText, "");
                  _classPrivateFieldInitSpec(this, _altTextDecorative, false);
                  _classPrivateFieldInitSpec(this, _altTextButton, null);
                  _classPrivateFieldInitSpec(this, _altTextTooltip, null);
                  _classPrivateFieldInitSpec(
                     this,
                     _altTextTooltipTimeout,
                     null,
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _altTextWasFromKeyBoard,
                     false,
                  );
                  _classPrivateFieldInitSpec(this, _editor5, null);
                  _classPrivateFieldSet(_editor5, this, editor);
               }
               return _createClass(
                  AltText,
                  [
                     {
                        key: "render",
                        value: (function () {
                           var _render2 = _asyncToGenerator(
                              /*#__PURE__*/ _regenerator().m(
                                 function _callee12() {
                                    var _this79 = this;
                                    var altText, msg, onClick;
                                    return _regenerator().w(
                                       function (_context13) {
                                          while (1)
                                             switch (_context13.n) {
                                                case 0:
                                                   altText =
                                                      _classPrivateFieldSet(
                                                         _altTextButton,
                                                         this,
                                                         document.createElement(
                                                            "button",
                                                         ),
                                                      );
                                                   altText.className =
                                                      "altText";
                                                   _context13.n = 1;
                                                   return AltText._l10nPromise.get(
                                                      "pdfjs-editor-alt-text-button-label",
                                                   );
                                                case 1:
                                                   msg = _context13.v;
                                                   altText.textContent = msg;
                                                   altText.setAttribute(
                                                      "aria-label",
                                                      msg,
                                                   );
                                                   altText.tabIndex = "0";
                                                   altText.addEventListener(
                                                      "contextmenu",
                                                      display_utils.noContextMenu,
                                                   );
                                                   altText.addEventListener(
                                                      "pointerdown",
                                                      function (event) {
                                                         return event.stopPropagation();
                                                      },
                                                   );
                                                   onClick = function onClick(
                                                      event,
                                                   ) {
                                                      event.preventDefault();
                                                      _classPrivateFieldGet(
                                                         _editor5,
                                                         _this79,
                                                      )._uiManager.editAltText(
                                                         _classPrivateFieldGet(
                                                            _editor5,
                                                            _this79,
                                                         ),
                                                      );
                                                   };
                                                   altText.addEventListener(
                                                      "click",
                                                      onClick,
                                                      {
                                                         capture: true,
                                                      },
                                                   );
                                                   altText.addEventListener(
                                                      "keydown",
                                                      function (event) {
                                                         if (
                                                            event.target ===
                                                               altText &&
                                                            event.key ===
                                                               "Enter"
                                                         ) {
                                                            _classPrivateFieldSet(
                                                               _altTextWasFromKeyBoard,
                                                               _this79,
                                                               true,
                                                            );
                                                            onClick(event);
                                                         }
                                                      },
                                                   );
                                                   _context13.n = 2;
                                                   return _assertClassBrand(
                                                      _AltText_brand,
                                                      this,
                                                      _setState,
                                                   ).call(this);
                                                case 2:
                                                   return _context13.a(
                                                      2,
                                                      altText,
                                                   );
                                             }
                                       },
                                       _callee12,
                                       this,
                                    );
                                 },
                              ),
                           );
                           function render() {
                              return _render2.apply(this, arguments);
                           }
                           return render;
                        })(),
                     },
                     {
                        key: "finish",
                        value: function finish() {
                           if (!_classPrivateFieldGet(_altTextButton, this)) {
                              return;
                           }
                           _classPrivateFieldGet(_altTextButton, this).focus({
                              focusVisible: _classPrivateFieldGet(
                                 _altTextWasFromKeyBoard,
                                 this,
                              ),
                           });
                           _classPrivateFieldSet(
                              _altTextWasFromKeyBoard,
                              this,
                              false,
                           );
                        },
                     },
                     {
                        key: "isEmpty",
                        value: function isEmpty() {
                           return (
                              !_classPrivateFieldGet(_altText, this) &&
                              !_classPrivateFieldGet(_altTextDecorative, this)
                           );
                        },
                     },
                     {
                        key: "data",
                        get: function get() {
                           return {
                              altText: _classPrivateFieldGet(_altText, this),
                              decorative: _classPrivateFieldGet(
                                 _altTextDecorative,
                                 this,
                              ),
                           };
                        },
                        set: function set(_ref86) {
                           var altText = _ref86.altText,
                              decorative = _ref86.decorative;
                           if (
                              _classPrivateFieldGet(_altText, this) ===
                                 altText &&
                              _classPrivateFieldGet(
                                 _altTextDecorative,
                                 this,
                              ) === decorative
                           ) {
                              return;
                           }
                           _classPrivateFieldSet(_altText, this, altText);
                           _classPrivateFieldSet(
                              _altTextDecorative,
                              this,
                              decorative,
                           );
                           _assertClassBrand(
                              _AltText_brand,
                              this,
                              _setState,
                           ).call(this);
                        },
                     },
                     {
                        key: "toggle",
                        value: function toggle() {
                           var enabled =
                              arguments.length > 0 && arguments[0] !== undefined
                                 ? arguments[0]
                                 : false;
                           if (!_classPrivateFieldGet(_altTextButton, this)) {
                              return;
                           }
                           if (
                              !enabled &&
                              _classPrivateFieldGet(
                                 _altTextTooltipTimeout,
                                 this,
                              )
                           ) {
                              clearTimeout(
                                 _classPrivateFieldGet(
                                    _altTextTooltipTimeout,
                                    this,
                                 ),
                              );
                              _classPrivateFieldSet(
                                 _altTextTooltipTimeout,
                                 this,
                                 null,
                              );
                           }
                           _classPrivateFieldGet(
                              _altTextButton,
                              this,
                           ).disabled = !enabled;
                        },
                     },
                     {
                        key: "destroy",
                        value: function destroy() {
                           var _classPrivateFieldGet38;
                           (_classPrivateFieldGet38 = _classPrivateFieldGet(
                              _altTextButton,
                              this,
                           )) === null ||
                              _classPrivateFieldGet38 === void 0 ||
                              _classPrivateFieldGet38.remove();
                           _classPrivateFieldSet(_altTextButton, this, null);
                           _classPrivateFieldSet(_altTextTooltip, this, null);
                        },
                     },
                  ],
                  [
                     {
                        key: "initialize",
                        value: function initialize(l10nPromise) {
                           AltText._l10nPromise ||
                              (AltText._l10nPromise = l10nPromise);
                        },
                     },
                  ],
               );
            })(); // EXTERNAL MODULE: ./src/display/editor/toolbar.js
            _AltText = AltText;
            function _setState() {
               return _setState2.apply(this, arguments);
            }
            function _setState2() {
               _setState2 = _asyncToGenerator(
                  /*#__PURE__*/ _regenerator().m(function _callee15() {
                     var _this88 = this;
                     var button,
                        _classPrivateFieldGet50,
                        tooltip,
                        id,
                        DELAY_TO_SHOW_TOOLTIP,
                        element,
                        _t10;
                     return _regenerator().w(
                        function (_context16) {
                           while (1)
                              switch (_context16.n) {
                                 case 0:
                                    button = _classPrivateFieldGet(
                                       _altTextButton,
                                       this,
                                    );
                                    if (button) {
                                       _context16.n = 1;
                                       break;
                                    }
                                    return _context16.a(2);
                                 case 1:
                                    if (
                                       !(
                                          !_classPrivateFieldGet(
                                             _altText,
                                             this,
                                          ) &&
                                          !_classPrivateFieldGet(
                                             _altTextDecorative,
                                             this,
                                          )
                                       )
                                    ) {
                                       _context16.n = 2;
                                       break;
                                    }
                                    button.classList.remove("done");
                                    (_classPrivateFieldGet50 =
                                       _classPrivateFieldGet(
                                          _altTextTooltip,
                                          this,
                                       )) === null ||
                                       _classPrivateFieldGet50 === void 0 ||
                                       _classPrivateFieldGet50.remove();
                                    return _context16.a(2);
                                 case 2:
                                    button.classList.add("done");
                                    _AltText._l10nPromise
                                       .get(
                                          "pdfjs-editor-alt-text-edit-button-label",
                                       )
                                       .then(function (msg) {
                                          button.setAttribute(
                                             "aria-label",
                                             msg,
                                          );
                                       });
                                    tooltip = _classPrivateFieldGet(
                                       _altTextTooltip,
                                       this,
                                    );
                                    if (!tooltip) {
                                       _classPrivateFieldSet(
                                          _altTextTooltip,
                                          this,
                                          (tooltip =
                                             document.createElement("span")),
                                       );
                                       tooltip.className = "tooltip";
                                       tooltip.setAttribute("role", "tooltip");
                                       id = tooltip.id =
                                          "alt-text-tooltip-".concat(
                                             _classPrivateFieldGet(
                                                _editor5,
                                                this,
                                             ).id,
                                          );
                                       button.setAttribute(
                                          "aria-describedby",
                                          id,
                                       );
                                       DELAY_TO_SHOW_TOOLTIP = 100;
                                       button.addEventListener(
                                          "mouseenter",
                                          function () {
                                             _classPrivateFieldSet(
                                                _altTextTooltipTimeout,
                                                _this88,
                                                setTimeout(function () {
                                                   _classPrivateFieldSet(
                                                      _altTextTooltipTimeout,
                                                      _this88,
                                                      null,
                                                   );
                                                   _classPrivateFieldGet(
                                                      _altTextTooltip,
                                                      _this88,
                                                   ).classList.add("show");
                                                   _classPrivateFieldGet(
                                                      _editor5,
                                                      _this88,
                                                   )._reportTelemetry({
                                                      action:
                                                         "alt_text_tooltip",
                                                   });
                                                }, DELAY_TO_SHOW_TOOLTIP),
                                             );
                                          },
                                       );
                                       button.addEventListener(
                                          "mouseleave",
                                          function () {
                                             var _classPrivateFieldGet51;
                                             if (
                                                _classPrivateFieldGet(
                                                   _altTextTooltipTimeout,
                                                   _this88,
                                                )
                                             ) {
                                                clearTimeout(
                                                   _classPrivateFieldGet(
                                                      _altTextTooltipTimeout,
                                                      _this88,
                                                   ),
                                                );
                                                _classPrivateFieldSet(
                                                   _altTextTooltipTimeout,
                                                   _this88,
                                                   null,
                                                );
                                             }
                                             (_classPrivateFieldGet51 =
                                                _classPrivateFieldGet(
                                                   _altTextTooltip,
                                                   _this88,
                                                )) === null ||
                                                _classPrivateFieldGet51 ===
                                                   void 0 ||
                                                _classPrivateFieldGet51.classList.remove(
                                                   "show",
                                                );
                                          },
                                       );
                                    }
                                    if (
                                       !_classPrivateFieldGet(
                                          _altTextDecorative,
                                          this,
                                       )
                                    ) {
                                       _context16.n = 4;
                                       break;
                                    }
                                    _context16.n = 3;
                                    return _AltText._l10nPromise.get(
                                       "pdfjs-editor-alt-text-decorative-tooltip",
                                    );
                                 case 3:
                                    _t10 = _context16.v;
                                    _context16.n = 5;
                                    break;
                                 case 4:
                                    _t10 = _classPrivateFieldGet(
                                       _altText,
                                       this,
                                    );
                                 case 5:
                                    tooltip.innerText = _t10;
                                    if (!tooltip.parentNode) {
                                       button.append(tooltip);
                                    }
                                    element = _classPrivateFieldGet(
                                       _editor5,
                                       this,
                                    ).getImageForAltText();
                                    element === null ||
                                       element === void 0 ||
                                       element.setAttribute(
                                          "aria-describedby",
                                          tooltip.id,
                                       );
                                 case 6:
                                    return _context16.a(2);
                              }
                        },
                        _callee15,
                        this,
                     );
                  }),
               );
               return _setState2.apply(this, arguments);
            }
            _defineProperty(AltText, "_l10nPromise", null);
            var toolbar = __webpack_require__(362); // CONCATENATED MODULE: ./src/display/editor/editor.js
            var _allResizerDivs = /*#__PURE__*/ new WeakMap();
            var _altText2 = /*#__PURE__*/ new WeakMap();
            var _disabled = /*#__PURE__*/ new WeakMap();
            var _keepAspectRatio = /*#__PURE__*/ new WeakMap();
            var _resizersDiv = /*#__PURE__*/ new WeakMap();
            var _savedDimensions = /*#__PURE__*/ new WeakMap();
            var _boundFocusin = /*#__PURE__*/ new WeakMap();
            var _boundFocusout = /*#__PURE__*/ new WeakMap();
            var _editToolbar = /*#__PURE__*/ new WeakMap();
            var _focusedResizerName = /*#__PURE__*/ new WeakMap();
            var _hasBeenClicked = /*#__PURE__*/ new WeakMap();
            var _initialPosition = /*#__PURE__*/ new WeakMap();
            var _isEditing = /*#__PURE__*/ new WeakMap();
            var _isInEditMode = /*#__PURE__*/ new WeakMap();
            var _isResizerEnabledForKeyboard = /*#__PURE__*/ new WeakMap();
            var _moveInDOMTimeout = /*#__PURE__*/ new WeakMap();
            var _prevDragX = /*#__PURE__*/ new WeakMap();
            var _prevDragY = /*#__PURE__*/ new WeakMap();
            var _telemetryTimeouts = /*#__PURE__*/ new WeakMap();
            var _isDraggable = /*#__PURE__*/ new WeakMap();
            var _zIndex = /*#__PURE__*/ new WeakMap();
            var _AnnotationEditor_brand = /*#__PURE__*/ new WeakSet();
            var _AnnotationEditor = /*#__PURE__*/ (function () {
               function _AnnotationEditor(parameters) {
                  _classCallCheck(this, _AnnotationEditor);
                  _classPrivateMethodInitSpec(this, _AnnotationEditor_brand);
                  _classPrivateFieldInitSpec(this, _allResizerDivs, null);
                  _classPrivateFieldInitSpec(this, _altText2, null);
                  _classPrivateFieldInitSpec(this, _disabled, false);
                  _classPrivateFieldInitSpec(this, _keepAspectRatio, false);
                  _classPrivateFieldInitSpec(this, _resizersDiv, null);
                  _classPrivateFieldInitSpec(this, _savedDimensions, null);
                  _classPrivateFieldInitSpec(
                     this,
                     _boundFocusin,
                     this.focusin.bind(this),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundFocusout,
                     this.focusout.bind(this),
                  );
                  _classPrivateFieldInitSpec(this, _editToolbar, null);
                  _classPrivateFieldInitSpec(this, _focusedResizerName, "");
                  _classPrivateFieldInitSpec(this, _hasBeenClicked, false);
                  _classPrivateFieldInitSpec(this, _initialPosition, null);
                  _classPrivateFieldInitSpec(this, _isEditing, false);
                  _classPrivateFieldInitSpec(this, _isInEditMode, false);
                  _classPrivateFieldInitSpec(
                     this,
                     _isResizerEnabledForKeyboard,
                     false,
                  );
                  _classPrivateFieldInitSpec(this, _moveInDOMTimeout, null);
                  _classPrivateFieldInitSpec(this, _prevDragX, 0);
                  _classPrivateFieldInitSpec(this, _prevDragY, 0);
                  _classPrivateFieldInitSpec(this, _telemetryTimeouts, null);
                  _defineProperty(this, "_initialOptions", Object.create(null));
                  _defineProperty(this, "_isVisible", true);
                  _defineProperty(this, "_uiManager", null);
                  _defineProperty(this, "_focusEventsAllowed", true);
                  _defineProperty(this, "_l10nPromise", null);
                  _classPrivateFieldInitSpec(this, _isDraggable, false);
                  _classPrivateFieldInitSpec(
                     this,
                     _zIndex,
                     _AnnotationEditor._zIndex++,
                  );
                  if (this.constructor === _AnnotationEditor) {
                     (0, util.unreachable)(
                        "Cannot initialize AnnotationEditor.",
                     );
                  }
                  this.parent = parameters.parent;
                  this.id = parameters.id;
                  this.width = this.height = null;
                  this.pageIndex = parameters.parent.pageIndex;
                  this.name = parameters.name;
                  this.div = null;
                  this._uiManager = parameters.uiManager;
                  this.annotationElementId = null;
                  this._willKeepAspectRatio = false;
                  this._initialOptions.isCentered = parameters.isCentered;
                  this._structTreeParentId = null;
                  var _this$parent$viewport3 = this.parent.viewport,
                     _rotation3 = _this$parent$viewport3.rotation,
                     _this$parent$viewport4 = _this$parent$viewport3.rawDims,
                     _pageWidth2 = _this$parent$viewport4.pageWidth,
                     _pageHeight2 = _this$parent$viewport4.pageHeight,
                     pageX = _this$parent$viewport4.pageX,
                     pageY = _this$parent$viewport4.pageY;
                  this.rotation = _rotation3;
                  this.pageRotation =
                     (360 +
                        _rotation3 -
                        this._uiManager.viewParameters.rotation) %
                     360;
                  this.pageDimensions = [_pageWidth2, _pageHeight2];
                  this.pageTranslation = [pageX, pageY];
                  var _this$parentDimension14 = _slicedToArray(
                        this.parentDimensions,
                        2,
                     ),
                     _width2 = _this$parentDimension14[0],
                     _height2 = _this$parentDimension14[1];
                  this.x = parameters.x / _width2;
                  this.y = parameters.y / _height2;
                  this.isAttachedToDOM = false;
                  this.deleted = false;
               }
               return _createClass(
                  _AnnotationEditor,
                  [
                     {
                        key: "editorType",
                        get: function get() {
                           return Object.getPrototypeOf(this).constructor._type;
                        },
                     },
                     {
                        key: "propertiesToUpdate",
                        get: function get() {
                           return [];
                        },
                     },
                     {
                        key: "_isDraggable",
                        get: function get() {
                           return _classPrivateFieldGet(_isDraggable, this);
                        },
                        set: function set(value) {
                           var _this$div2;
                           _classPrivateFieldSet(_isDraggable, this, value);
                           (_this$div2 = this.div) === null ||
                              _this$div2 === void 0 ||
                              _this$div2.classList.toggle("draggable", value);
                        },
                     },
                     {
                        key: "isEnterHandled",
                        get: function get() {
                           return true;
                        },
                     },
                     {
                        key: "center",
                        value: function center() {
                           var _this$pageDimensions5 = _slicedToArray(
                                 this.pageDimensions,
                                 2,
                              ),
                              pageWidth = _this$pageDimensions5[0],
                              pageHeight = _this$pageDimensions5[1];
                           switch (this.parentRotation) {
                              case 90:
                                 this.x -=
                                    (this.height * pageHeight) /
                                    (pageWidth * 2);
                                 this.y +=
                                    (this.width * pageWidth) / (pageHeight * 2);
                                 break;
                              case 180:
                                 this.x += this.width / 2;
                                 this.y += this.height / 2;
                                 break;
                              case 270:
                                 this.x +=
                                    (this.height * pageHeight) /
                                    (pageWidth * 2);
                                 this.y -=
                                    (this.width * pageWidth) / (pageHeight * 2);
                                 break;
                              default:
                                 this.x -= this.width / 2;
                                 this.y -= this.height / 2;
                                 break;
                           }
                           this.fixAndSetPosition();
                        },
                     },
                     {
                        key: "addCommands",
                        value: function addCommands(params) {
                           this._uiManager.addCommands(params);
                        },
                     },
                     {
                        key: "currentLayer",
                        get: function get() {
                           return this._uiManager.currentLayer;
                        },
                     },
                     {
                        key: "setInBackground",
                        value: function setInBackground() {
                           this.div.style.zIndex = 0;
                        },
                     },
                     {
                        key: "setInForeground",
                        value: function setInForeground() {
                           this.div.style.zIndex = _classPrivateFieldGet(
                              _zIndex,
                              this,
                           );
                        },
                     },
                     {
                        key: "setParent",
                        value: function setParent(parent) {
                           if (parent !== null) {
                              this.pageIndex = parent.pageIndex;
                              this.pageDimensions = parent.pageDimensions;
                           } else {
                              _assertClassBrand(
                                 _AnnotationEditor_brand,
                                 this,
                                 _stopResizing,
                              ).call(this);
                           }
                           this.parent = parent;
                        },
                     },
                     {
                        key: "focusin",
                        value: function focusin(event) {
                           if (!this._focusEventsAllowed) {
                              return;
                           }
                           if (!_classPrivateFieldGet(_hasBeenClicked, this)) {
                              this.parent.setSelected(this);
                           } else {
                              _classPrivateFieldSet(
                                 _hasBeenClicked,
                                 this,
                                 false,
                              );
                           }
                        },
                     },
                     {
                        key: "focusout",
                        value: function focusout(event) {
                           var _this$parent5;
                           if (!this._focusEventsAllowed) {
                              return;
                           }
                           if (!this.isAttachedToDOM) {
                              return;
                           }
                           var target = event.relatedTarget;
                           if (
                              target !== null &&
                              target !== void 0 &&
                              target.closest("#".concat(this.id))
                           ) {
                              return;
                           }
                           event.preventDefault();
                           if (
                              !(
                                 (_this$parent5 = this.parent) !== null &&
                                 _this$parent5 !== void 0 &&
                                 _this$parent5.isMultipleSelection
                              )
                           ) {
                              this.commitOrRemove();
                           }
                        },
                     },
                     {
                        key: "commitOrRemove",
                        value: function commitOrRemove() {
                           if (this.isEmpty()) {
                              this.remove();
                           } else {
                              this.commit();
                           }
                        },
                     },
                     {
                        key: "commit",
                        value: function commit() {
                           this.addToAnnotationStorage();
                        },
                     },
                     {
                        key: "addToAnnotationStorage",
                        value: function addToAnnotationStorage() {
                           this._uiManager.addToAnnotationStorage(this);
                        },
                     },
                     {
                        key: "setAt",
                        value: function setAt(x, y, tx, ty) {
                           var _this$parentDimension15 = _slicedToArray(
                                 this.parentDimensions,
                                 2,
                              ),
                              width = _this$parentDimension15[0],
                              height = _this$parentDimension15[1];
                           var _this$screenToPageTra =
                              this.screenToPageTranslation(tx, ty);
                           var _this$screenToPageTra2 = _slicedToArray(
                              _this$screenToPageTra,
                              2,
                           );
                           tx = _this$screenToPageTra2[0];
                           ty = _this$screenToPageTra2[1];
                           this.x = (x + tx) / width;
                           this.y = (y + ty) / height;
                           this.fixAndSetPosition();
                        },
                     },
                     {
                        key: "translate",
                        value: function translate(x, y) {
                           _assertClassBrand(
                              _AnnotationEditor_brand,
                              this,
                              _translate,
                           ).call(this, this.parentDimensions, x, y);
                        },
                     },
                     {
                        key: "translateInPage",
                        value: function translateInPage(x, y) {
                           _classPrivateFieldGet(_initialPosition, this) ||
                              _classPrivateFieldSet(_initialPosition, this, [
                                 this.x,
                                 this.y,
                              ]);
                           _assertClassBrand(
                              _AnnotationEditor_brand,
                              this,
                              _translate,
                           ).call(this, this.pageDimensions, x, y);
                           this.div.scrollIntoView({ block: "nearest" });
                        },
                     },
                     {
                        key: "drag",
                        value: function drag(tx, ty) {
                           _classPrivateFieldGet(_initialPosition, this) ||
                              _classPrivateFieldSet(_initialPosition, this, [
                                 this.x,
                                 this.y,
                              ]);
                           var _this$parentDimension16 = _slicedToArray(
                                 this.parentDimensions,
                                 2,
                              ),
                              parentWidth = _this$parentDimension16[0],
                              parentHeight = _this$parentDimension16[1];
                           this.x += tx / parentWidth;
                           this.y += ty / parentHeight;
                           if (
                              this.parent &&
                              (this.x < 0 ||
                                 this.x > 1 ||
                                 this.y < 0 ||
                                 this.y > 1)
                           ) {
                              var _this$div$getBounding2 =
                                    this.div.getBoundingClientRect(),
                                 _x11 = _this$div$getBounding2.x,
                                 _y3 = _this$div$getBounding2.y;
                              if (this.parent.findNewParent(this, _x11, _y3)) {
                                 this.x -= Math.floor(this.x);
                                 this.y -= Math.floor(this.y);
                              }
                           }
                           var x = this.x,
                              y = this.y;
                           var _this$getBaseTranslat =
                                 this.getBaseTranslation(),
                              _this$getBaseTranslat2 = _slicedToArray(
                                 _this$getBaseTranslat,
                                 2,
                              ),
                              bx = _this$getBaseTranslat2[0],
                              by = _this$getBaseTranslat2[1];
                           x += bx;
                           y += by;
                           this.div.style.left = "".concat(
                              (100 * x).toFixed(2),
                              "%",
                           );
                           this.div.style.top = "".concat(
                              (100 * y).toFixed(2),
                              "%",
                           );
                           this.div.scrollIntoView({ block: "nearest" });
                        },
                     },
                     {
                        key: "_hasBeenMoved",
                        get: function get() {
                           return (
                              !!_classPrivateFieldGet(_initialPosition, this) &&
                              (_classPrivateFieldGet(
                                 _initialPosition,
                                 this,
                              )[0] !== this.x ||
                                 _classPrivateFieldGet(
                                    _initialPosition,
                                    this,
                                 )[1] !== this.y)
                           );
                        },
                     },
                     {
                        key: "getBaseTranslation",
                        value: function getBaseTranslation() {
                           var _this$parentDimension17 = _slicedToArray(
                                 this.parentDimensions,
                                 2,
                              ),
                              parentWidth = _this$parentDimension17[0],
                              parentHeight = _this$parentDimension17[1];
                           var _borderLineWidth =
                              _AnnotationEditor._borderLineWidth;
                           var x = _borderLineWidth / parentWidth;
                           var y = _borderLineWidth / parentHeight;
                           switch (this.rotation) {
                              case 90:
                                 return [-x, y];
                              case 180:
                                 return [x, y];
                              case 270:
                                 return [x, -y];
                              default:
                                 return [-x, -y];
                           }
                        },
                     },
                     {
                        key: "_mustFixPosition",
                        get: function get() {
                           return true;
                        },
                     },
                     {
                        key: "fixAndSetPosition",
                        value: function fixAndSetPosition() {
                           var rotation =
                              arguments.length > 0 && arguments[0] !== undefined
                                 ? arguments[0]
                                 : this.rotation;
                           var _this$pageDimensions6 = _slicedToArray(
                                 this.pageDimensions,
                                 2,
                              ),
                              pageWidth = _this$pageDimensions6[0],
                              pageHeight = _this$pageDimensions6[1];
                           var x = this.x,
                              y = this.y,
                              width = this.width,
                              height = this.height;
                           width *= pageWidth;
                           height *= pageHeight;
                           x *= pageWidth;
                           y *= pageHeight;
                           if (this._mustFixPosition) {
                              switch (rotation) {
                                 case 0:
                                    x = Math.max(
                                       0,
                                       Math.min(pageWidth - width, x),
                                    );
                                    y = Math.max(
                                       0,
                                       Math.min(pageHeight - height, y),
                                    );
                                    break;
                                 case 90:
                                    x = Math.max(
                                       0,
                                       Math.min(pageWidth - height, x),
                                    );
                                    y = Math.min(
                                       pageHeight,
                                       Math.max(width, y),
                                    );
                                    break;
                                 case 180:
                                    x = Math.min(pageWidth, Math.max(width, x));
                                    y = Math.min(
                                       pageHeight,
                                       Math.max(height, y),
                                    );
                                    break;
                                 case 270:
                                    x = Math.min(
                                       pageWidth,
                                       Math.max(height, x),
                                    );
                                    y = Math.max(
                                       0,
                                       Math.min(pageHeight - width, y),
                                    );
                                    break;
                              }
                           }
                           this.x = x /= pageWidth;
                           this.y = y /= pageHeight;
                           var _this$getBaseTranslat3 =
                                 this.getBaseTranslation(),
                              _this$getBaseTranslat4 = _slicedToArray(
                                 _this$getBaseTranslat3,
                                 2,
                              ),
                              bx = _this$getBaseTranslat4[0],
                              by = _this$getBaseTranslat4[1];
                           x += bx;
                           y += by;
                           var style = this.div.style;
                           style.left = "".concat((100 * x).toFixed(2), "%");
                           style.top = "".concat((100 * y).toFixed(2), "%");
                           this.moveInDOM();
                        },
                     },
                     {
                        key: "screenToPageTranslation",
                        value: function screenToPageTranslation(x, y) {
                           return _rotatePoint.call(
                              _AnnotationEditor,
                              x,
                              y,
                              this.parentRotation,
                           );
                        },
                     },
                     {
                        key: "pageTranslationToScreen",
                        value: function pageTranslationToScreen(x, y) {
                           return _rotatePoint.call(
                              _AnnotationEditor,
                              x,
                              y,
                              360 - this.parentRotation,
                           );
                        },
                     },
                     {
                        key: "parentScale",
                        get: function get() {
                           return this._uiManager.viewParameters.realScale;
                        },
                     },
                     {
                        key: "parentRotation",
                        get: function get() {
                           return (
                              (this._uiManager.viewParameters.rotation +
                                 this.pageRotation) %
                              360
                           );
                        },
                     },
                     {
                        key: "parentDimensions",
                        get: function get() {
                           var parentScale = this.parentScale,
                              _this$pageDimensions7 = _slicedToArray(
                                 this.pageDimensions,
                                 2,
                              ),
                              pageWidth = _this$pageDimensions7[0],
                              pageHeight = _this$pageDimensions7[1];
                           var scaledWidth = pageWidth * parentScale;
                           var scaledHeight = pageHeight * parentScale;
                           return util.FeatureTest.isCSSRoundSupported
                              ? [
                                   Math.round(scaledWidth),
                                   Math.round(scaledHeight),
                                ]
                              : [scaledWidth, scaledHeight];
                        },
                     },
                     {
                        key: "setDims",
                        value: function setDims(width, height) {
                           var _this$parentDimension18 = _slicedToArray(
                                 this.parentDimensions,
                                 2,
                              ),
                              parentWidth = _this$parentDimension18[0],
                              parentHeight = _this$parentDimension18[1];
                           this.div.style.width = "".concat(
                              ((100 * width) / parentWidth).toFixed(2),
                              "%",
                           );
                           if (!_classPrivateFieldGet(_keepAspectRatio, this)) {
                              this.div.style.height = "".concat(
                                 ((100 * height) / parentHeight).toFixed(2),
                                 "%",
                              );
                           }
                        },
                     },
                     {
                        key: "fixDims",
                        value: function fixDims() {
                           var style = this.div.style;
                           var height = style.height,
                              width = style.width;
                           var widthPercent = width.endsWith("%");
                           var heightPercent =
                              !_classPrivateFieldGet(_keepAspectRatio, this) &&
                              height.endsWith("%");
                           if (widthPercent && heightPercent) {
                              return;
                           }
                           var _this$parentDimension19 = _slicedToArray(
                                 this.parentDimensions,
                                 2,
                              ),
                              parentWidth = _this$parentDimension19[0],
                              parentHeight = _this$parentDimension19[1];
                           if (!widthPercent) {
                              style.width = "".concat(
                                 (
                                    (100 * parseFloat(width)) /
                                    parentWidth
                                 ).toFixed(2),
                                 "%",
                              );
                           }
                           if (
                              !_classPrivateFieldGet(_keepAspectRatio, this) &&
                              !heightPercent
                           ) {
                              style.height = "".concat(
                                 (
                                    (100 * parseFloat(height)) /
                                    parentHeight
                                 ).toFixed(2),
                                 "%",
                              );
                           }
                        },
                     },
                     {
                        key: "getInitialTranslation",
                        value: function getInitialTranslation() {
                           return [0, 0];
                        },
                     },
                     {
                        key: "altTextFinish",
                        value: function altTextFinish() {
                           var _classPrivateFieldGet39;
                           (_classPrivateFieldGet39 = _classPrivateFieldGet(
                              _altText2,
                              this,
                           )) === null ||
                              _classPrivateFieldGet39 === void 0 ||
                              _classPrivateFieldGet39.finish();
                        },
                     },
                     {
                        key: "addEditToolbar",
                        value: (function () {
                           var _addEditToolbar2 = _asyncToGenerator(
                              /*#__PURE__*/ _regenerator().m(
                                 function _callee13() {
                                    var _t0, _t1;
                                    return _regenerator().w(
                                       function (_context14) {
                                          while (1)
                                             switch (_context14.n) {
                                                case 0:
                                                   if (
                                                      !(
                                                         _classPrivateFieldGet(
                                                            _editToolbar,
                                                            this,
                                                         ) ||
                                                         _classPrivateFieldGet(
                                                            _isInEditMode,
                                                            this,
                                                         )
                                                      )
                                                   ) {
                                                      _context14.n = 1;
                                                      break;
                                                   }
                                                   return _context14.a(
                                                      2,
                                                      _classPrivateFieldGet(
                                                         _editToolbar,
                                                         this,
                                                      ),
                                                   );
                                                case 1:
                                                   _classPrivateFieldSet(
                                                      _editToolbar,
                                                      this,
                                                      new toolbar.EditorToolbar(
                                                         this,
                                                      ),
                                                   );
                                                   this.div.append(
                                                      _classPrivateFieldGet(
                                                         _editToolbar,
                                                         this,
                                                      ).render(),
                                                   );
                                                   if (
                                                      !_classPrivateFieldGet(
                                                         _altText2,
                                                         this,
                                                      )
                                                   ) {
                                                      _context14.n = 3;
                                                      break;
                                                   }
                                                   _t0 = _classPrivateFieldGet(
                                                      _editToolbar,
                                                      this,
                                                   );
                                                   _context14.n = 2;
                                                   return _classPrivateFieldGet(
                                                      _altText2,
                                                      this,
                                                   ).render();
                                                case 2:
                                                   _t1 = _context14.v;
                                                   _t0.addAltTextButton.call(
                                                      _t0,
                                                      _t1,
                                                   );
                                                case 3:
                                                   return _context14.a(
                                                      2,
                                                      _classPrivateFieldGet(
                                                         _editToolbar,
                                                         this,
                                                      ),
                                                   );
                                             }
                                       },
                                       _callee13,
                                       this,
                                    );
                                 },
                              ),
                           );
                           function addEditToolbar() {
                              return _addEditToolbar2.apply(this, arguments);
                           }
                           return addEditToolbar;
                        })(),
                     },
                     {
                        key: "removeEditToolbar",
                        value: function removeEditToolbar() {
                           var _classPrivateFieldGet40;
                           if (!_classPrivateFieldGet(_editToolbar, this)) {
                              return;
                           }
                           _classPrivateFieldGet(_editToolbar, this).remove();
                           _classPrivateFieldSet(_editToolbar, this, null);
                           (_classPrivateFieldGet40 = _classPrivateFieldGet(
                              _altText2,
                              this,
                           )) === null ||
                              _classPrivateFieldGet40 === void 0 ||
                              _classPrivateFieldGet40.destroy();
                        },
                     },
                     {
                        key: "getClientDimensions",
                        value: function getClientDimensions() {
                           return this.div.getBoundingClientRect();
                        },
                     },
                     {
                        key: "addAltTextButton",
                        value: (function () {
                           var _addAltTextButton = _asyncToGenerator(
                              /*#__PURE__*/ _regenerator().m(
                                 function _callee14() {
                                    return _regenerator().w(
                                       function (_context15) {
                                          while (1)
                                             switch (_context15.n) {
                                                case 0:
                                                   if (
                                                      !_classPrivateFieldGet(
                                                         _altText2,
                                                         this,
                                                      )
                                                   ) {
                                                      _context15.n = 1;
                                                      break;
                                                   }
                                                   return _context15.a(2);
                                                case 1:
                                                   AltText.initialize(
                                                      _AnnotationEditor._l10nPromise,
                                                   );
                                                   _classPrivateFieldSet(
                                                      _altText2,
                                                      this,
                                                      new AltText(this),
                                                   );
                                                   _context15.n = 2;
                                                   return this.addEditToolbar();
                                                case 2:
                                                   return _context15.a(2);
                                             }
                                       },
                                       _callee14,
                                       this,
                                    );
                                 },
                              ),
                           );
                           function addAltTextButton() {
                              return _addAltTextButton.apply(this, arguments);
                           }
                           return addAltTextButton;
                        })(),
                     },
                     {
                        key: "altTextData",
                        get: function get() {
                           var _classPrivateFieldGet41;
                           return (_classPrivateFieldGet41 =
                              _classPrivateFieldGet(_altText2, this)) ===
                              null || _classPrivateFieldGet41 === void 0
                              ? void 0
                              : _classPrivateFieldGet41.data;
                        },
                        set: function set(data) {
                           if (!_classPrivateFieldGet(_altText2, this)) {
                              return;
                           }
                           _classPrivateFieldGet(_altText2, this).data = data;
                        },
                     },
                     {
                        key: "hasAltText",
                        value: function hasAltText() {
                           var _classPrivateFieldGet42;
                           return !(
                              (_classPrivateFieldGet42 = _classPrivateFieldGet(
                                 _altText2,
                                 this,
                              )) !== null &&
                              _classPrivateFieldGet42 !== void 0 &&
                              _classPrivateFieldGet42.isEmpty()
                           );
                        },
                     },
                     {
                        key: "render",
                        value: function render() {
                           this.div = document.createElement("div");
                           this.div.setAttribute(
                              "data-editor-rotation",
                              (360 - this.rotation) % 360,
                           );
                           this.div.className = this.name;
                           this.div.setAttribute("id", this.id);
                           this.div.tabIndex = _classPrivateFieldGet(
                              _disabled,
                              this,
                           )
                              ? -1
                              : 0;
                           if (!this._isVisible) {
                              this.div.classList.add("hidden");
                           }
                           this.setInForeground();
                           this.div.addEventListener(
                              "focusin",
                              _classPrivateFieldGet(_boundFocusin, this),
                           );
                           this.div.addEventListener(
                              "focusout",
                              _classPrivateFieldGet(_boundFocusout, this),
                           );
                           var _this$parentDimension20 = _slicedToArray(
                                 this.parentDimensions,
                                 2,
                              ),
                              parentWidth = _this$parentDimension20[0],
                              parentHeight = _this$parentDimension20[1];
                           if (this.parentRotation % 180 !== 0) {
                              this.div.style.maxWidth = "".concat(
                                 ((100 * parentHeight) / parentWidth).toFixed(
                                    2,
                                 ),
                                 "%",
                              );
                              this.div.style.maxHeight = "".concat(
                                 ((100 * parentWidth) / parentHeight).toFixed(
                                    2,
                                 ),
                                 "%",
                              );
                           }
                           var _this$getInitialTrans3 =
                                 this.getInitialTranslation(),
                              _this$getInitialTrans4 = _slicedToArray(
                                 _this$getInitialTrans3,
                                 2,
                              ),
                              tx = _this$getInitialTrans4[0],
                              ty = _this$getInitialTrans4[1];
                           this.translate(tx, ty);
                           (0, tools.bindEvents)(this, this.div, [
                              "pointerdown",
                           ]);
                           return this.div;
                        },
                     },
                     {
                        key: "pointerdown",
                        value: function pointerdown(event) {
                           var isMac = util.FeatureTest.platform.isMac;
                           if (event.button !== 0 || (event.ctrlKey && isMac)) {
                              event.preventDefault();
                              return;
                           }
                           _classPrivateFieldSet(_hasBeenClicked, this, true);
                           if (this._isDraggable) {
                              _assertClassBrand(
                                 _AnnotationEditor_brand,
                                 this,
                                 _setUpDragSession,
                              ).call(this, event);
                              return;
                           }
                           _assertClassBrand(
                              _AnnotationEditor_brand,
                              this,
                              _selectOnPointerEvent,
                           ).call(this, event);
                        },
                     },
                     {
                        key: "moveInDOM",
                        value: function moveInDOM() {
                           var _this80 = this;
                           if (_classPrivateFieldGet(_moveInDOMTimeout, this)) {
                              clearTimeout(
                                 _classPrivateFieldGet(_moveInDOMTimeout, this),
                              );
                           }
                           _classPrivateFieldSet(
                              _moveInDOMTimeout,
                              this,
                              setTimeout(function () {
                                 var _this80$parent;
                                 _classPrivateFieldSet(
                                    _moveInDOMTimeout,
                                    _this80,
                                    null,
                                 );
                                 (_this80$parent = _this80.parent) === null ||
                                    _this80$parent === void 0 ||
                                    _this80$parent.moveEditorInDOM(_this80);
                              }, 0),
                           );
                        },
                     },
                     {
                        key: "_setParentAndPosition",
                        value: function _setParentAndPosition(parent, x, y) {
                           parent.changeParent(this);
                           this.x = x;
                           this.y = y;
                           this.fixAndSetPosition();
                        },
                     },
                     {
                        key: "getRect",
                        value: function getRect(tx, ty) {
                           var rotation =
                              arguments.length > 2 && arguments[2] !== undefined
                                 ? arguments[2]
                                 : this.rotation;
                           var scale = this.parentScale;
                           var _this$pageDimensions8 = _slicedToArray(
                                 this.pageDimensions,
                                 2,
                              ),
                              pageWidth = _this$pageDimensions8[0],
                              pageHeight = _this$pageDimensions8[1];
                           var _this$pageTranslation4 = _slicedToArray(
                                 this.pageTranslation,
                                 2,
                              ),
                              pageX = _this$pageTranslation4[0],
                              pageY = _this$pageTranslation4[1];
                           var shiftX = tx / scale;
                           var shiftY = ty / scale;
                           var x = this.x * pageWidth;
                           var y = this.y * pageHeight;
                           var width = this.width * pageWidth;
                           var height = this.height * pageHeight;
                           switch (rotation) {
                              case 0:
                                 return [
                                    x + shiftX + pageX,
                                    pageHeight - y - shiftY - height + pageY,
                                    x + shiftX + width + pageX,
                                    pageHeight - y - shiftY + pageY,
                                 ];
                              case 90:
                                 return [
                                    x + shiftY + pageX,
                                    pageHeight - y + shiftX + pageY,
                                    x + shiftY + height + pageX,
                                    pageHeight - y + shiftX + width + pageY,
                                 ];
                              case 180:
                                 return [
                                    x - shiftX - width + pageX,
                                    pageHeight - y + shiftY + pageY,
                                    x - shiftX + pageX,
                                    pageHeight - y + shiftY + height + pageY,
                                 ];
                              case 270:
                                 return [
                                    x - shiftY - height + pageX,
                                    pageHeight - y - shiftX - width + pageY,
                                    x - shiftY + pageX,
                                    pageHeight - y - shiftX + pageY,
                                 ];
                              default:
                                 throw new Error("Invalid rotation");
                           }
                        },
                     },
                     {
                        key: "getRectInCurrentCoords",
                        value: function getRectInCurrentCoords(
                           rect,
                           pageHeight,
                        ) {
                           var _rect4 = _slicedToArray(rect, 4),
                              x1 = _rect4[0],
                              y1 = _rect4[1],
                              x2 = _rect4[2],
                              y2 = _rect4[3];
                           var width = x2 - x1;
                           var height = y2 - y1;
                           switch (this.rotation) {
                              case 0:
                                 return [x1, pageHeight - y2, width, height];
                              case 90:
                                 return [x1, pageHeight - y1, height, width];
                              case 180:
                                 return [x2, pageHeight - y1, width, height];
                              case 270:
                                 return [x2, pageHeight - y2, height, width];
                              default:
                                 throw new Error("Invalid rotation");
                           }
                        },
                     },
                     { key: "onceAdded", value: function onceAdded() {} },
                     {
                        key: "isEmpty",
                        value: function isEmpty() {
                           return false;
                        },
                     },
                     {
                        key: "enableEditMode",
                        value: function enableEditMode() {
                           _classPrivateFieldSet(_isInEditMode, this, true);
                        },
                     },
                     {
                        key: "disableEditMode",
                        value: function disableEditMode() {
                           _classPrivateFieldSet(_isInEditMode, this, false);
                        },
                     },
                     {
                        key: "isInEditMode",
                        value: function isInEditMode() {
                           return _classPrivateFieldGet(_isInEditMode, this);
                        },
                     },
                     {
                        key: "shouldGetKeyboardEvents",
                        value: function shouldGetKeyboardEvents() {
                           return _classPrivateFieldGet(
                              _isResizerEnabledForKeyboard,
                              this,
                           );
                        },
                     },
                     {
                        key: "needsToBeRebuilt",
                        value: function needsToBeRebuilt() {
                           return this.div && !this.isAttachedToDOM;
                        },
                     },
                     {
                        key: "rebuild",
                        value: function rebuild() {
                           var _this$div3, _this$div4;
                           (_this$div3 = this.div) === null ||
                              _this$div3 === void 0 ||
                              _this$div3.addEventListener(
                                 "focusin",
                                 _classPrivateFieldGet(_boundFocusin, this),
                              );
                           (_this$div4 = this.div) === null ||
                              _this$div4 === void 0 ||
                              _this$div4.addEventListener(
                                 "focusout",
                                 _classPrivateFieldGet(_boundFocusout, this),
                              );
                        },
                     },
                     { key: "rotate", value: function rotate(_angle) {} },
                     {
                        key: "serialize",
                        value: function serialize() {
                           var isForCopying =
                              arguments.length > 0 && arguments[0] !== undefined
                                 ? arguments[0]
                                 : false;
                           var context =
                              arguments.length > 1 && arguments[1] !== undefined
                                 ? arguments[1]
                                 : null;
                           (0, util.unreachable)(
                              "An editor must be serializable",
                           );
                        },
                     },
                     {
                        key: "hasBeenModified",
                        get: function get() {
                           return (
                              !!this.annotationElementId &&
                              (this.deleted || this.serialize() !== null)
                           );
                        },
                     },
                     {
                        key: "remove",
                        value: function remove() {
                           this.div.removeEventListener(
                              "focusin",
                              _classPrivateFieldGet(_boundFocusin, this),
                           );
                           this.div.removeEventListener(
                              "focusout",
                              _classPrivateFieldGet(_boundFocusout, this),
                           );
                           if (!this.isEmpty()) {
                              this.commit();
                           }
                           if (this.parent) {
                              this.parent.remove(this);
                           } else {
                              this._uiManager.removeEditor(this);
                           }
                           if (_classPrivateFieldGet(_moveInDOMTimeout, this)) {
                              clearTimeout(
                                 _classPrivateFieldGet(_moveInDOMTimeout, this),
                              );
                              _classPrivateFieldSet(
                                 _moveInDOMTimeout,
                                 this,
                                 null,
                              );
                           }
                           _assertClassBrand(
                              _AnnotationEditor_brand,
                              this,
                              _stopResizing,
                           ).call(this);
                           this.removeEditToolbar();
                           if (
                              _classPrivateFieldGet(_telemetryTimeouts, this)
                           ) {
                              var _iterator90 = _createForOfIteratorHelper(
                                    _classPrivateFieldGet(
                                       _telemetryTimeouts,
                                       this,
                                    ).values(),
                                 ),
                                 _step90;
                              try {
                                 for (
                                    _iterator90.s();
                                    !(_step90 = _iterator90.n()).done;

                                 ) {
                                    var timeout = _step90.value;
                                    clearTimeout(timeout);
                                 }
                              } catch (err) {
                                 _iterator90.e(err);
                              } finally {
                                 _iterator90.f();
                              }
                              _classPrivateFieldSet(
                                 _telemetryTimeouts,
                                 this,
                                 null,
                              );
                           }
                           this.parent = null;
                        },
                     },
                     {
                        key: "isResizable",
                        get: function get() {
                           return false;
                        },
                     },
                     {
                        key: "makeResizable",
                        value: function makeResizable() {
                           if (this.isResizable) {
                              _assertClassBrand(
                                 _AnnotationEditor_brand,
                                 this,
                                 _createResizers,
                              ).call(this);
                              _classPrivateFieldGet(
                                 _resizersDiv,
                                 this,
                              ).classList.remove("hidden");
                              (0, tools.bindEvents)(this, this.div, [
                                 "keydown",
                              ]);
                           }
                        },
                     },
                     {
                        key: "toolbarPosition",
                        get: function get() {
                           return null;
                        },
                     },
                     {
                        key: "keydown",
                        value: function keydown(event) {
                           var _this81 = this;
                           if (
                              !this.isResizable ||
                              event.target !== this.div ||
                              event.key !== "Enter"
                           ) {
                              return;
                           }
                           this._uiManager.setSelected(this);
                           _classPrivateFieldSet(_savedDimensions, this, {
                              savedX: this.x,
                              savedY: this.y,
                              savedWidth: this.width,
                              savedHeight: this.height,
                           });
                           var children = _classPrivateFieldGet(
                              _resizersDiv,
                              this,
                           ).children;
                           if (!_classPrivateFieldGet(_allResizerDivs, this)) {
                              _classPrivateFieldSet(
                                 _allResizerDivs,
                                 this,
                                 Array.from(children),
                              );
                              var boundResizerKeydown = _assertClassBrand(
                                 _AnnotationEditor_brand,
                                 this,
                                 _resizerKeydown,
                              ).bind(this);
                              var boundResizerBlur = _assertClassBrand(
                                 _AnnotationEditor_brand,
                                 this,
                                 _resizerBlur,
                              ).bind(this);
                              var _iterator91 = _createForOfIteratorHelper(
                                    _classPrivateFieldGet(
                                       _allResizerDivs,
                                       this,
                                    ),
                                 ),
                                 _step91;
                              try {
                                 var _loop2 = function _loop2() {
                                    var div = _step91.value;
                                    var name =
                                       div.getAttribute("data-resizer-name");
                                    div.setAttribute("role", "spinbutton");
                                    div.addEventListener(
                                       "keydown",
                                       boundResizerKeydown,
                                    );
                                    div.addEventListener(
                                       "blur",
                                       boundResizerBlur,
                                    );
                                    div.addEventListener(
                                       "focus",
                                       _assertClassBrand(
                                          _AnnotationEditor_brand,
                                          _this81,
                                          _resizerFocus,
                                       ).bind(_this81, name),
                                    );
                                    _AnnotationEditor._l10nPromise
                                       .get(
                                          "pdfjs-editor-resizer-label-".concat(
                                             name,
                                          ),
                                       )
                                       .then(function (msg) {
                                          return div.setAttribute(
                                             "aria-label",
                                             msg,
                                          );
                                       });
                                 };
                                 for (
                                    _iterator91.s();
                                    !(_step91 = _iterator91.n()).done;

                                 ) {
                                    _loop2();
                                 }
                              } catch (err) {
                                 _iterator91.e(err);
                              } finally {
                                 _iterator91.f();
                              }
                           }
                           var first = _classPrivateFieldGet(
                              _allResizerDivs,
                              this,
                           )[0];
                           var firstPosition = 0;
                           var _iterator92 =
                                 _createForOfIteratorHelper(children),
                              _step92;
                           try {
                              for (
                                 _iterator92.s();
                                 !(_step92 = _iterator92.n()).done;

                              ) {
                                 var div = _step92.value;
                                 if (div === first) {
                                    break;
                                 }
                                 firstPosition++;
                              }
                           } catch (err) {
                              _iterator92.e(err);
                           } finally {
                              _iterator92.f();
                           }
                           var nextFirstPosition =
                              (((360 - this.rotation + this.parentRotation) %
                                 360) /
                                 90) *
                              (_classPrivateFieldGet(_allResizerDivs, this)
                                 .length /
                                 4);
                           if (nextFirstPosition !== firstPosition) {
                              if (nextFirstPosition < firstPosition) {
                                 for (
                                    var _i19 = 0;
                                    _i19 < firstPosition - nextFirstPosition;
                                    _i19++
                                 ) {
                                    _classPrivateFieldGet(
                                       _resizersDiv,
                                       this,
                                    ).append(
                                       _classPrivateFieldGet(_resizersDiv, this)
                                          .firstChild,
                                    );
                                 }
                              } else if (nextFirstPosition > firstPosition) {
                                 for (
                                    var _i20 = 0;
                                    _i20 < nextFirstPosition - firstPosition;
                                    _i20++
                                 ) {
                                    _classPrivateFieldGet(
                                       _resizersDiv,
                                       this,
                                    ).firstChild.before(
                                       _classPrivateFieldGet(_resizersDiv, this)
                                          .lastChild,
                                    );
                                 }
                              }
                              var i = 0;
                              var _iterator93 =
                                    _createForOfIteratorHelper(children),
                                 _step93;
                              try {
                                 var _loop3 = function _loop3() {
                                    var child = _step93.value;
                                    var div = _classPrivateFieldGet(
                                       _allResizerDivs,
                                       _this81,
                                    )[i++];
                                    var name =
                                       div.getAttribute("data-resizer-name");
                                    _AnnotationEditor._l10nPromise
                                       .get(
                                          "pdfjs-editor-resizer-label-".concat(
                                             name,
                                          ),
                                       )
                                       .then(function (msg) {
                                          return child.setAttribute(
                                             "aria-label",
                                             msg,
                                          );
                                       });
                                 };
                                 for (
                                    _iterator93.s();
                                    !(_step93 = _iterator93.n()).done;

                                 ) {
                                    _loop3();
                                 }
                              } catch (err) {
                                 _iterator93.e(err);
                              } finally {
                                 _iterator93.f();
                              }
                           }
                           _assertClassBrand(
                              _AnnotationEditor_brand,
                              this,
                              _setResizerTabIndex,
                           ).call(this, 0);
                           _classPrivateFieldSet(
                              _isResizerEnabledForKeyboard,
                              this,
                              true,
                           );
                           _classPrivateFieldGet(
                              _resizersDiv,
                              this,
                           ).firstChild.focus({
                              focusVisible: true,
                           });
                           event.preventDefault();
                           event.stopImmediatePropagation();
                        },
                     },
                     {
                        key: "_resizeWithKeyboard",
                        value: function _resizeWithKeyboard(x, y) {
                           if (
                              !_classPrivateFieldGet(
                                 _isResizerEnabledForKeyboard,
                                 this,
                              )
                           ) {
                              return;
                           }
                           _assertClassBrand(
                              _AnnotationEditor_brand,
                              this,
                              _resizerPointermove,
                           ).call(
                              this,
                              _classPrivateFieldGet(_focusedResizerName, this),
                              { movementX: x, movementY: y },
                           );
                        },
                     },
                     {
                        key: "_stopResizingWithKeyboard",
                        value: function _stopResizingWithKeyboard() {
                           _assertClassBrand(
                              _AnnotationEditor_brand,
                              this,
                              _stopResizing,
                           ).call(this);
                           this.div.focus();
                        },
                     },
                     {
                        key: "select",
                        value: function select() {
                           var _this$div5,
                              _this82 = this,
                              _classPrivateFieldGet44;
                           this.makeResizable();
                           (_this$div5 = this.div) === null ||
                              _this$div5 === void 0 ||
                              _this$div5.classList.add("selectedEditor");
                           if (!_classPrivateFieldGet(_editToolbar, this)) {
                              this.addEditToolbar().then(function () {
                                 var _this82$div;
                                 if (
                                    (_this82$div = _this82.div) !== null &&
                                    _this82$div !== void 0 &&
                                    _this82$div.classList.contains(
                                       "selectedEditor",
                                    )
                                 ) {
                                    var _classPrivateFieldGet43;
                                    (_classPrivateFieldGet43 =
                                       _classPrivateFieldGet(
                                          _editToolbar,
                                          _this82,
                                       )) === null ||
                                       _classPrivateFieldGet43 === void 0 ||
                                       _classPrivateFieldGet43.show();
                                 }
                              });
                              return;
                           }
                           (_classPrivateFieldGet44 = _classPrivateFieldGet(
                              _editToolbar,
                              this,
                           )) === null ||
                              _classPrivateFieldGet44 === void 0 ||
                              _classPrivateFieldGet44.show();
                        },
                     },
                     {
                        key: "unselect",
                        value: function unselect() {
                           var _classPrivateFieldGet45,
                              _this$div6,
                              _this$div7,
                              _classPrivateFieldGet46;
                           (_classPrivateFieldGet45 = _classPrivateFieldGet(
                              _resizersDiv,
                              this,
                           )) === null ||
                              _classPrivateFieldGet45 === void 0 ||
                              _classPrivateFieldGet45.classList.add("hidden");
                           (_this$div6 = this.div) === null ||
                              _this$div6 === void 0 ||
                              _this$div6.classList.remove("selectedEditor");
                           if (
                              (_this$div7 = this.div) !== null &&
                              _this$div7 !== void 0 &&
                              _this$div7.contains(document.activeElement)
                           ) {
                              this._uiManager.currentLayer.div.focus({
                                 preventScroll: true,
                              });
                           }
                           (_classPrivateFieldGet46 = _classPrivateFieldGet(
                              _editToolbar,
                              this,
                           )) === null ||
                              _classPrivateFieldGet46 === void 0 ||
                              _classPrivateFieldGet46.hide();
                        },
                     },
                     {
                        key: "updateParams",
                        value: function updateParams(type, value) {},
                     },
                     {
                        key: "disableEditing",
                        value: function disableEditing() {},
                     },
                     {
                        key: "enableEditing",
                        value: function enableEditing() {},
                     },
                     {
                        key: "enterInEditMode",
                        value: function enterInEditMode() {},
                     },
                     {
                        key: "getImageForAltText",
                        value: function getImageForAltText() {
                           return null;
                        },
                     },
                     {
                        key: "contentDiv",
                        get: function get() {
                           return this.div;
                        },
                     },
                     {
                        key: "isEditing",
                        get: function get() {
                           return _classPrivateFieldGet(_isEditing, this);
                        },
                        set: function set(value) {
                           _classPrivateFieldSet(_isEditing, this, value);
                           if (!this.parent) {
                              return;
                           }
                           if (value) {
                              this.parent.setSelected(this);
                              this.parent.setActiveEditor(this);
                           } else {
                              this.parent.setActiveEditor(null);
                           }
                        },
                     },
                     {
                        key: "setAspectRatio",
                        value: function setAspectRatio(width, height) {
                           _classPrivateFieldSet(_keepAspectRatio, this, true);
                           var aspectRatio = width / height;
                           var style = this.div.style;
                           style.aspectRatio = aspectRatio;
                           style.height = "auto";
                        },
                     },
                     {
                        key: "telemetryInitialData",
                        get: function get() {
                           return { action: "added" };
                        },
                     },
                     {
                        key: "telemetryFinalData",
                        get: function get() {
                           return null;
                        },
                     },
                     {
                        key: "_reportTelemetry",
                        value: function _reportTelemetry(data) {
                           var _this83 = this;
                           var mustWait =
                              arguments.length > 1 && arguments[1] !== undefined
                                 ? arguments[1]
                                 : false;
                           if (mustWait) {
                              _classPrivateFieldGet(_telemetryTimeouts, this) ||
                                 _classPrivateFieldSet(
                                    _telemetryTimeouts,
                                    this,
                                    new Map(),
                                 );
                              var action = data.action;
                              var timeout = _classPrivateFieldGet(
                                 _telemetryTimeouts,
                                 this,
                              ).get(action);
                              if (timeout) {
                                 clearTimeout(timeout);
                              }
                              timeout = setTimeout(function () {
                                 _this83._reportTelemetry(data);
                                 _classPrivateFieldGet(
                                    _telemetryTimeouts,
                                    _this83,
                                 )["delete"](action);
                                 if (
                                    _classPrivateFieldGet(
                                       _telemetryTimeouts,
                                       _this83,
                                    ).size === 0
                                 ) {
                                    _classPrivateFieldSet(
                                       _telemetryTimeouts,
                                       _this83,
                                       null,
                                    );
                                 }
                              }, _AnnotationEditor._telemetryTimeout);
                              _classPrivateFieldGet(
                                 _telemetryTimeouts,
                                 this,
                              ).set(action, timeout);
                              return;
                           }
                           data.type || (data.type = this.editorType);
                           this._uiManager._eventBus.dispatch(
                              "reporttelemetry",
                              {
                                 source: this,
                                 details: { type: "editing", data: data },
                              },
                           );
                        },
                     },
                     {
                        key: "show",
                        value: function show() {
                           var visible =
                              arguments.length > 0 && arguments[0] !== undefined
                                 ? arguments[0]
                                 : this._isVisible;
                           this.div.classList.toggle("hidden", !visible);
                           this._isVisible = visible;
                        },
                     },
                     {
                        key: "enable",
                        value: function enable() {
                           if (this.div) {
                              this.div.tabIndex = 0;
                           }
                           _classPrivateFieldSet(_disabled, this, false);
                        },
                     },
                     {
                        key: "disable",
                        value: function disable() {
                           if (this.div) {
                              this.div.tabIndex = -1;
                           }
                           _classPrivateFieldSet(_disabled, this, true);
                        },
                     },
                     {
                        key: "renderAnnotationElement",
                        value: function renderAnnotationElement(annotation) {
                           var content =
                              annotation.container.querySelector(
                                 ".annotationContent",
                              );
                           if (!content) {
                              content = document.createElement("div");
                              content.classList.add(
                                 "annotationContent",
                                 this.editorType,
                              );
                              annotation.container.prepend(content);
                           } else if (content.nodeName === "CANVAS") {
                              var canvas = content;
                              content = document.createElement("div");
                              content.classList.add(
                                 "annotationContent",
                                 this.editorType,
                              );
                              canvas.before(content);
                           }
                           return content;
                        },
                     },
                     {
                        key: "resetAnnotationElement",
                        value: function resetAnnotationElement(annotation) {
                           var firstChild = annotation.container.firstChild;
                           if (
                              firstChild.nodeName === "DIV" &&
                              firstChild.classList.contains("annotationContent")
                           ) {
                              firstChild.remove();
                           }
                        },
                     },
                  ],
                  [
                     {
                        key: "_resizerKeyboardManager",
                        get: function get() {
                           var resize =
                              _AnnotationEditor.prototype._resizeWithKeyboard;
                           var small =
                              tools.AnnotationEditorUIManager.TRANSLATE_SMALL;
                           var big =
                              tools.AnnotationEditorUIManager.TRANSLATE_BIG;
                           return (0, util.shadow)(
                              this,
                              "_resizerKeyboardManager",
                              new tools.KeyboardManager([
                                 [
                                    ["ArrowLeft", "mac+ArrowLeft"],
                                    resize,
                                    { args: [-small, 0] },
                                 ],
                                 [
                                    ["ctrl+ArrowLeft", "mac+shift+ArrowLeft"],
                                    resize,
                                    { args: [-big, 0] },
                                 ],
                                 [
                                    ["ArrowRight", "mac+ArrowRight"],
                                    resize,
                                    { args: [small, 0] },
                                 ],
                                 [
                                    ["ctrl+ArrowRight", "mac+shift+ArrowRight"],
                                    resize,
                                    { args: [big, 0] },
                                 ],
                                 [
                                    ["ArrowUp", "mac+ArrowUp"],
                                    resize,
                                    { args: [0, -small] },
                                 ],
                                 [
                                    ["ctrl+ArrowUp", "mac+shift+ArrowUp"],
                                    resize,
                                    { args: [0, -big] },
                                 ],
                                 [
                                    ["ArrowDown", "mac+ArrowDown"],
                                    resize,
                                    { args: [0, small] },
                                 ],
                                 [
                                    ["ctrl+ArrowDown", "mac+shift+ArrowDown"],
                                    resize,
                                    { args: [0, big] },
                                 ],
                                 [
                                    ["Escape", "mac+Escape"],
                                    _AnnotationEditor.prototype
                                       ._stopResizingWithKeyboard,
                                 ],
                              ]),
                           );
                        },
                     },
                     {
                        key: "_defaultLineColor",
                        get: function get() {
                           return (0, util.shadow)(
                              this,
                              "_defaultLineColor",
                              this._colorManager.getHexCode("CanvasText"),
                           );
                        },
                     },
                     {
                        key: "deleteAnnotationElement",
                        value: function deleteAnnotationElement(editor) {
                           var fakeEditor = new FakeEditor({
                              id: editor.parent.getNextId(),
                              parent: editor.parent,
                              uiManager: editor._uiManager,
                           });
                           fakeEditor.annotationElementId =
                              editor.annotationElementId;
                           fakeEditor.deleted = true;
                           fakeEditor._uiManager.addToAnnotationStorage(
                              fakeEditor,
                           );
                        },
                     },
                     {
                        key: "initialize",
                        value: function initialize(l10n, _uiManager, options) {
                           _AnnotationEditor._l10nPromise ||
                              (_AnnotationEditor._l10nPromise = new Map(
                                 [
                                    "pdfjs-editor-alt-text-button-label",
                                    "pdfjs-editor-alt-text-edit-button-label",
                                    "pdfjs-editor-alt-text-decorative-tooltip",
                                    "pdfjs-editor-resizer-label-topLeft",
                                    "pdfjs-editor-resizer-label-topMiddle",
                                    "pdfjs-editor-resizer-label-topRight",
                                    "pdfjs-editor-resizer-label-middleRight",
                                    "pdfjs-editor-resizer-label-bottomRight",
                                    "pdfjs-editor-resizer-label-bottomMiddle",
                                    "pdfjs-editor-resizer-label-bottomLeft",
                                    "pdfjs-editor-resizer-label-middleLeft",
                                 ].map(function (str) {
                                    return [
                                       str,
                                       l10n.get(
                                          str.replaceAll(
                                             /([A-Z])/g,
                                             function (c) {
                                                return "-".concat(
                                                   c.toLowerCase(),
                                                );
                                             },
                                          ),
                                       ),
                                    ];
                                 }),
                              ));
                           if (
                              options !== null &&
                              options !== void 0 &&
                              options.strings
                           ) {
                              var _iterator94 = _createForOfIteratorHelper(
                                    options.strings,
                                 ),
                                 _step94;
                              try {
                                 for (
                                    _iterator94.s();
                                    !(_step94 = _iterator94.n()).done;

                                 ) {
                                    var str = _step94.value;
                                    _AnnotationEditor._l10nPromise.set(
                                       str,
                                       l10n.get(str),
                                    );
                                 }
                              } catch (err) {
                                 _iterator94.e(err);
                              } finally {
                                 _iterator94.f();
                              }
                           }
                           if (_AnnotationEditor._borderLineWidth !== -1) {
                              return;
                           }
                           var style = getComputedStyle(
                              document.documentElement,
                           );
                           _AnnotationEditor._borderLineWidth =
                              parseFloat(
                                 style.getPropertyValue("--outline-width"),
                              ) || 0;
                        },
                     },
                     {
                        key: "updateDefaultParams",
                        value: function updateDefaultParams(_type, _value) {},
                     },
                     {
                        key: "defaultPropertiesToUpdate",
                        get: function get() {
                           return [];
                        },
                     },
                     {
                        key: "isHandlingMimeForPasting",
                        value: function isHandlingMimeForPasting(mime) {
                           return false;
                        },
                     },
                     {
                        key: "paste",
                        value: function paste(item, parent) {
                           (0, util.unreachable)("Not implemented");
                        },
                     },
                     {
                        key: "deserialize",
                        value: function deserialize(data, parent, uiManager) {
                           var editor = new this.prototype.constructor({
                              parent: parent,
                              id: parent.getNextId(),
                              uiManager: uiManager,
                           });
                           editor.rotation = data.rotation;
                           var _editor$pageDimension4 = _slicedToArray(
                                 editor.pageDimensions,
                                 2,
                              ),
                              pageWidth = _editor$pageDimension4[0],
                              pageHeight = _editor$pageDimension4[1];
                           var _editor$getRectInCurr =
                                 editor.getRectInCurrentCoords(
                                    data.rect,
                                    pageHeight,
                                 ),
                              _editor$getRectInCurr2 = _slicedToArray(
                                 _editor$getRectInCurr,
                                 4,
                              ),
                              x = _editor$getRectInCurr2[0],
                              y = _editor$getRectInCurr2[1],
                              width = _editor$getRectInCurr2[2],
                              height = _editor$getRectInCurr2[3];
                           editor.x = x / pageWidth;
                           editor.y = y / pageHeight;
                           editor.width = width / pageWidth;
                           editor.height = height / pageHeight;
                           return editor;
                        },
                     },
                     {
                        key: "MIN_SIZE",
                        get: function get() {
                           return 16;
                        },
                     },
                     {
                        key: "canCreateNewEmptyEditor",
                        value: function canCreateNewEmptyEditor() {
                           return true;
                        },
                     },
                  ],
               );
            })();
            _AnnotationEditor2 = _AnnotationEditor;
            function _translate(_ref87, x, y) {
               var _ref88 = _slicedToArray(_ref87, 2),
                  width = _ref88[0],
                  height = _ref88[1];
               var _this$screenToPageTra3 = this.screenToPageTranslation(x, y);
               var _this$screenToPageTra4 = _slicedToArray(
                  _this$screenToPageTra3,
                  2,
               );
               x = _this$screenToPageTra4[0];
               y = _this$screenToPageTra4[1];
               this.x += x / width;
               this.y += y / height;
               this.fixAndSetPosition();
            }
            function _rotatePoint(x, y, angle) {
               switch (angle) {
                  case 90:
                     return [y, -x];
                  case 180:
                     return [-x, -y];
                  case 270:
                     return [-y, x];
                  default:
                     return [x, y];
               }
            }
            function _getRotationMatrix(rotation) {
               switch (rotation) {
                  case 90: {
                     var _this$pageDimensions9 = _slicedToArray(
                           this.pageDimensions,
                           2,
                        ),
                        pageWidth = _this$pageDimensions9[0],
                        pageHeight = _this$pageDimensions9[1];
                     return [
                        0,
                        -pageWidth / pageHeight,
                        pageHeight / pageWidth,
                        0,
                     ];
                  }
                  case 180:
                     return [-1, 0, 0, -1];
                  case 270: {
                     var _this$pageDimensions0 = _slicedToArray(
                           this.pageDimensions,
                           2,
                        ),
                        _pageWidth3 = _this$pageDimensions0[0],
                        _pageHeight3 = _this$pageDimensions0[1];
                     return [
                        0,
                        _pageWidth3 / _pageHeight3,
                        -_pageHeight3 / _pageWidth3,
                        0,
                     ];
                  }
                  default:
                     return [1, 0, 0, 1];
               }
            }
            function _createResizers() {
               if (_classPrivateFieldGet(_resizersDiv, this)) {
                  return;
               }
               _classPrivateFieldSet(
                  _resizersDiv,
                  this,
                  document.createElement("div"),
               );
               _classPrivateFieldGet(_resizersDiv, this).classList.add(
                  "resizers",
               );
               var classes = this._willKeepAspectRatio
                  ? ["topLeft", "topRight", "bottomRight", "bottomLeft"]
                  : [
                       "topLeft",
                       "topMiddle",
                       "topRight",
                       "middleRight",
                       "bottomRight",
                       "bottomMiddle",
                       "bottomLeft",
                       "middleLeft",
                    ];
               for (
                  var _i21 = 0, _classes = classes;
                  _i21 < _classes.length;
                  _i21++
               ) {
                  var name = _classes[_i21];
                  var div = document.createElement("div");
                  _classPrivateFieldGet(_resizersDiv, this).append(div);
                  div.classList.add("resizer", name);
                  div.setAttribute("data-resizer-name", name);
                  div.addEventListener(
                     "pointerdown",
                     _assertClassBrand(
                        _AnnotationEditor_brand,
                        this,
                        _resizerPointerdown,
                     ).bind(this, name),
                  );
                  div.addEventListener(
                     "contextmenu",
                     display_utils.noContextMenu,
                  );
                  div.tabIndex = -1;
               }
               this.div.prepend(_classPrivateFieldGet(_resizersDiv, this));
            }
            function _resizerPointerdown(name, event) {
               var _classPrivateFieldGet47,
                  _this85 = this;
               event.preventDefault();
               var isMac = util.FeatureTest.platform.isMac;
               if (event.button !== 0 || (event.ctrlKey && isMac)) {
                  return;
               }
               (_classPrivateFieldGet47 = _classPrivateFieldGet(
                  _altText2,
                  this,
               )) === null ||
                  _classPrivateFieldGet47 === void 0 ||
                  _classPrivateFieldGet47.toggle(false);
               var boundResizerPointermove = _assertClassBrand(
                  _AnnotationEditor_brand,
                  this,
                  _resizerPointermove,
               ).bind(this, name);
               var savedDraggable = this._isDraggable;
               this._isDraggable = false;
               var pointerMoveOptions = { passive: true, capture: true };
               this.parent.togglePointerEvents(false);
               window.addEventListener(
                  "pointermove",
                  boundResizerPointermove,
                  pointerMoveOptions,
               );
               window.addEventListener(
                  "contextmenu",
                  display_utils.noContextMenu,
               );
               var savedX = this.x;
               var savedY = this.y;
               var savedWidth = this.width;
               var savedHeight = this.height;
               var savedParentCursor = this.parent.div.style.cursor;
               var savedCursor = this.div.style.cursor;
               this.div.style.cursor = this.parent.div.style.cursor =
                  window.getComputedStyle(event.target).cursor;
               var _pointerUpCallback2 = function pointerUpCallback() {
                  var _classPrivateFieldGet48;
                  _this85.parent.togglePointerEvents(true);
                  (_classPrivateFieldGet48 = _classPrivateFieldGet(
                     _altText2,
                     _this85,
                  )) === null ||
                     _classPrivateFieldGet48 === void 0 ||
                     _classPrivateFieldGet48.toggle(true);
                  _this85._isDraggable = savedDraggable;
                  window.removeEventListener("pointerup", _pointerUpCallback2);
                  window.removeEventListener("blur", _pointerUpCallback2);
                  window.removeEventListener(
                     "pointermove",
                     boundResizerPointermove,
                     pointerMoveOptions,
                  );
                  window.removeEventListener(
                     "contextmenu",
                     display_utils.noContextMenu,
                  );
                  _this85.parent.div.style.cursor = savedParentCursor;
                  _this85.div.style.cursor = savedCursor;
                  _assertClassBrand(
                     _AnnotationEditor_brand,
                     _this85,
                     _addResizeToUndoStack,
                  ).call(_this85, savedX, savedY, savedWidth, savedHeight);
               };
               window.addEventListener("pointerup", _pointerUpCallback2);
               window.addEventListener("blur", _pointerUpCallback2);
            }
            function _addResizeToUndoStack(
               savedX,
               savedY,
               savedWidth,
               savedHeight,
            ) {
               var _this86 = this;
               var newX = this.x;
               var newY = this.y;
               var newWidth = this.width;
               var newHeight = this.height;
               if (
                  newX === savedX &&
                  newY === savedY &&
                  newWidth === savedWidth &&
                  newHeight === savedHeight
               ) {
                  return;
               }
               this.addCommands({
                  cmd: function cmd() {
                     _this86.width = newWidth;
                     _this86.height = newHeight;
                     _this86.x = newX;
                     _this86.y = newY;
                     var _this86$parentDimensi = _slicedToArray(
                           _this86.parentDimensions,
                           2,
                        ),
                        parentWidth = _this86$parentDimensi[0],
                        parentHeight = _this86$parentDimensi[1];
                     _this86.setDims(
                        parentWidth * newWidth,
                        parentHeight * newHeight,
                     );
                     _this86.fixAndSetPosition();
                  },
                  undo: function undo() {
                     _this86.width = savedWidth;
                     _this86.height = savedHeight;
                     _this86.x = savedX;
                     _this86.y = savedY;
                     var _this86$parentDimensi2 = _slicedToArray(
                           _this86.parentDimensions,
                           2,
                        ),
                        parentWidth = _this86$parentDimensi2[0],
                        parentHeight = _this86$parentDimensi2[1];
                     _this86.setDims(
                        parentWidth * savedWidth,
                        parentHeight * savedHeight,
                     );
                     _this86.fixAndSetPosition();
                  },
                  mustExec: true,
               });
            }
            function _resizerPointermove(name, event) {
               var _this$parentDimension21 = _slicedToArray(
                     this.parentDimensions,
                     2,
                  ),
                  parentWidth = _this$parentDimension21[0],
                  parentHeight = _this$parentDimension21[1];
               var savedX = this.x;
               var savedY = this.y;
               var savedWidth = this.width;
               var savedHeight = this.height;
               var minWidth = _AnnotationEditor2.MIN_SIZE / parentWidth;
               var minHeight = _AnnotationEditor2.MIN_SIZE / parentHeight;
               var round = function round(x) {
                  return Math.round(x * 10000) / 10000;
               };
               var rotationMatrix = _assertClassBrand(
                  _AnnotationEditor_brand,
                  this,
                  _getRotationMatrix,
               ).call(this, this.rotation);
               var transf = function transf(x, y) {
                  return [
                     rotationMatrix[0] * x + rotationMatrix[2] * y,
                     rotationMatrix[1] * x + rotationMatrix[3] * y,
                  ];
               };
               var invRotationMatrix = _assertClassBrand(
                  _AnnotationEditor_brand,
                  this,
                  _getRotationMatrix,
               ).call(this, 360 - this.rotation);
               var invTransf = function invTransf(x, y) {
                  return [
                     invRotationMatrix[0] * x + invRotationMatrix[2] * y,
                     invRotationMatrix[1] * x + invRotationMatrix[3] * y,
                  ];
               };
               var getPoint;
               var getOpposite;
               var isDiagonal = false;
               var isHorizontal = false;
               switch (name) {
                  case "topLeft":
                     isDiagonal = true;
                     getPoint = function getPoint(w, h) {
                        return [0, 0];
                     };
                     getOpposite = function getOpposite(w, h) {
                        return [w, h];
                     };
                     break;
                  case "topMiddle":
                     getPoint = function getPoint(w, h) {
                        return [w / 2, 0];
                     };
                     getOpposite = function getOpposite(w, h) {
                        return [w / 2, h];
                     };
                     break;
                  case "topRight":
                     isDiagonal = true;
                     getPoint = function getPoint(w, h) {
                        return [w, 0];
                     };
                     getOpposite = function getOpposite(w, h) {
                        return [0, h];
                     };
                     break;
                  case "middleRight":
                     isHorizontal = true;
                     getPoint = function getPoint(w, h) {
                        return [w, h / 2];
                     };
                     getOpposite = function getOpposite(w, h) {
                        return [0, h / 2];
                     };
                     break;
                  case "bottomRight":
                     isDiagonal = true;
                     getPoint = function getPoint(w, h) {
                        return [w, h];
                     };
                     getOpposite = function getOpposite(w, h) {
                        return [0, 0];
                     };
                     break;
                  case "bottomMiddle":
                     getPoint = function getPoint(w, h) {
                        return [w / 2, h];
                     };
                     getOpposite = function getOpposite(w, h) {
                        return [w / 2, 0];
                     };
                     break;
                  case "bottomLeft":
                     isDiagonal = true;
                     getPoint = function getPoint(w, h) {
                        return [0, h];
                     };
                     getOpposite = function getOpposite(w, h) {
                        return [w, 0];
                     };
                     break;
                  case "middleLeft":
                     isHorizontal = true;
                     getPoint = function getPoint(w, h) {
                        return [0, h / 2];
                     };
                     getOpposite = function getOpposite(w, h) {
                        return [w, h / 2];
                     };
                     break;
               }
               var point = getPoint(savedWidth, savedHeight);
               var oppositePoint = getOpposite(savedWidth, savedHeight);
               var transfOppositePoint = transf.apply(
                  void 0,
                  _toConsumableArray(oppositePoint),
               );
               var oppositeX = round(savedX + transfOppositePoint[0]);
               var oppositeY = round(savedY + transfOppositePoint[1]);
               var ratioX = 1;
               var ratioY = 1;
               var _this$screenToPageTra5 = this.screenToPageTranslation(
                     event.movementX,
                     event.movementY,
                  ),
                  _this$screenToPageTra6 = _slicedToArray(
                     _this$screenToPageTra5,
                     2,
                  ),
                  deltaX = _this$screenToPageTra6[0],
                  deltaY = _this$screenToPageTra6[1];
               var _invTransf = invTransf(
                  deltaX / parentWidth,
                  deltaY / parentHeight,
               );
               var _invTransf2 = _slicedToArray(_invTransf, 2);
               deltaX = _invTransf2[0];
               deltaY = _invTransf2[1];
               if (isDiagonal) {
                  var oldDiag = Math.hypot(savedWidth, savedHeight);
                  ratioX = ratioY = Math.max(
                     Math.min(
                        Math.hypot(
                           oppositePoint[0] - point[0] - deltaX,
                           oppositePoint[1] - point[1] - deltaY,
                        ) / oldDiag,
                        1 / savedWidth,
                        1 / savedHeight,
                     ),
                     minWidth / savedWidth,
                     minHeight / savedHeight,
                  );
               } else if (isHorizontal) {
                  ratioX =
                     Math.max(
                        minWidth,
                        Math.min(
                           1,
                           Math.abs(oppositePoint[0] - point[0] - deltaX),
                        ),
                     ) / savedWidth;
               } else {
                  ratioY =
                     Math.max(
                        minHeight,
                        Math.min(
                           1,
                           Math.abs(oppositePoint[1] - point[1] - deltaY),
                        ),
                     ) / savedHeight;
               }
               var newWidth = round(savedWidth * ratioX);
               var newHeight = round(savedHeight * ratioY);
               transfOppositePoint = transf.apply(
                  void 0,
                  _toConsumableArray(getOpposite(newWidth, newHeight)),
               );
               var newX = oppositeX - transfOppositePoint[0];
               var newY = oppositeY - transfOppositePoint[1];
               this.width = newWidth;
               this.height = newHeight;
               this.x = newX;
               this.y = newY;
               this.setDims(parentWidth * newWidth, parentHeight * newHeight);
               this.fixAndSetPosition();
            }
            function _selectOnPointerEvent(event) {
               var isMac = util.FeatureTest.platform.isMac;
               if (
                  (event.ctrlKey && !isMac) ||
                  event.shiftKey ||
                  (event.metaKey && isMac)
               ) {
                  this.parent.toggleSelected(this);
               } else {
                  this.parent.setSelected(this);
               }
            }
            function _setUpDragSession(event) {
               var _this87 = this;
               var isSelected = this._uiManager.isSelected(this);
               this._uiManager.setUpDragSession();
               var pointerMoveOptions, pointerMoveCallback;
               if (isSelected) {
                  this.div.classList.add("moving");
                  pointerMoveOptions = { passive: true, capture: true };
                  _classPrivateFieldSet(_prevDragX, this, event.clientX);
                  _classPrivateFieldSet(_prevDragY, this, event.clientY);
                  pointerMoveCallback = function pointerMoveCallback(e) {
                     var x = e.clientX,
                        y = e.clientY;
                     var _this87$screenToPageT =
                           _this87.screenToPageTranslation(
                              x - _classPrivateFieldGet(_prevDragX, _this87),
                              y - _classPrivateFieldGet(_prevDragY, _this87),
                           ),
                        _this87$screenToPageT2 = _slicedToArray(
                           _this87$screenToPageT,
                           2,
                        ),
                        tx = _this87$screenToPageT2[0],
                        ty = _this87$screenToPageT2[1];
                     _classPrivateFieldSet(_prevDragX, _this87, x);
                     _classPrivateFieldSet(_prevDragY, _this87, y);
                     _this87._uiManager.dragSelectedEditors(tx, ty);
                  };
                  window.addEventListener(
                     "pointermove",
                     pointerMoveCallback,
                     pointerMoveOptions,
                  );
               }
               var _pointerUpCallback3 = function pointerUpCallback() {
                  window.removeEventListener("pointerup", _pointerUpCallback3);
                  window.removeEventListener("blur", _pointerUpCallback3);
                  if (isSelected) {
                     _this87.div.classList.remove("moving");
                     window.removeEventListener(
                        "pointermove",
                        pointerMoveCallback,
                        pointerMoveOptions,
                     );
                  }
                  _classPrivateFieldSet(_hasBeenClicked, _this87, false);
                  if (!_this87._uiManager.endDragSession()) {
                     _assertClassBrand(
                        _AnnotationEditor_brand,
                        _this87,
                        _selectOnPointerEvent,
                     ).call(_this87, event);
                  }
               };
               window.addEventListener("pointerup", _pointerUpCallback3);
               window.addEventListener("blur", _pointerUpCallback3);
            }
            function _resizerKeydown(event) {
               _AnnotationEditor2._resizerKeyboardManager.exec(this, event);
            }
            function _resizerBlur(event) {
               var _event$relatedTarget;
               if (
                  _classPrivateFieldGet(_isResizerEnabledForKeyboard, this) &&
                  ((_event$relatedTarget = event.relatedTarget) === null ||
                  _event$relatedTarget === void 0
                     ? void 0
                     : _event$relatedTarget.parentNode) !==
                     _classPrivateFieldGet(_resizersDiv, this)
               ) {
                  _assertClassBrand(
                     _AnnotationEditor_brand,
                     this,
                     _stopResizing,
                  ).call(this);
               }
            }
            function _resizerFocus(name) {
               _classPrivateFieldSet(
                  _focusedResizerName,
                  this,
                  _classPrivateFieldGet(_isResizerEnabledForKeyboard, this)
                     ? name
                     : "",
               );
            }
            function _setResizerTabIndex(value) {
               if (!_classPrivateFieldGet(_allResizerDivs, this)) {
                  return;
               }
               var _iterator95 = _createForOfIteratorHelper(
                     _classPrivateFieldGet(_allResizerDivs, this),
                  ),
                  _step95;
               try {
                  for (_iterator95.s(); !(_step95 = _iterator95.n()).done; ) {
                     var div = _step95.value;
                     div.tabIndex = value;
                  }
               } catch (err) {
                  _iterator95.e(err);
               } finally {
                  _iterator95.f();
               }
            }
            function _stopResizing() {
               _classPrivateFieldSet(_isResizerEnabledForKeyboard, this, false);
               _assertClassBrand(
                  _AnnotationEditor_brand,
                  this,
                  _setResizerTabIndex,
               ).call(this, -1);
               if (_classPrivateFieldGet(_savedDimensions, this)) {
                  var _classPrivateFieldGet49 = _classPrivateFieldGet(
                        _savedDimensions,
                        this,
                     ),
                     savedX = _classPrivateFieldGet49.savedX,
                     savedY = _classPrivateFieldGet49.savedY,
                     savedWidth = _classPrivateFieldGet49.savedWidth,
                     savedHeight = _classPrivateFieldGet49.savedHeight;
                  _assertClassBrand(
                     _AnnotationEditor_brand,
                     this,
                     _addResizeToUndoStack,
                  ).call(this, savedX, savedY, savedWidth, savedHeight);
                  _classPrivateFieldSet(_savedDimensions, this, null);
               }
            }
            _defineProperty(_AnnotationEditor, "_borderLineWidth", -1);
            _defineProperty(
               _AnnotationEditor,
               "_colorManager",
               new tools.ColorManager(),
            );
            _defineProperty(_AnnotationEditor, "_zIndex", 1);
            _defineProperty(_AnnotationEditor, "_telemetryTimeout", 1000);
            var FakeEditor = /*#__PURE__*/ (function (_AnnotationEditor3) {
               function FakeEditor(params) {
                  var _this84;
                  _classCallCheck(this, FakeEditor);
                  _this84 = _callSuper(this, FakeEditor, [params]);
                  _this84.annotationElementId = params.annotationElementId;
                  _this84.deleted = true;
                  return _this84;
               }
               _inherits(FakeEditor, _AnnotationEditor3);
               return _createClass(FakeEditor, [
                  {
                     key: "serialize",
                     value: function serialize() {
                        return {
                           id: this.annotationElementId,
                           deleted: true,
                           pageIndex: this.pageIndex,
                        };
                     },
                  },
               ]);
            })(_AnnotationEditor); /***/
         },
         /***/ 61: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ FreeOutliner: function FreeOutliner() {
                  return /* binding */ _FreeOutliner;
               },
               /* harmony export */ Outliner: function Outliner() {
                  return /* binding */ _Outliner;
               } /* harmony export */,
            });
            /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(292);
            var _box = /*#__PURE__*/ new WeakMap();
            var _verticalEdges = /*#__PURE__*/ new WeakMap();
            var _intervals = /*#__PURE__*/ new WeakMap();
            var _Outliner_brand = /*#__PURE__*/ new WeakSet();
            var _Outliner = /*#__PURE__*/ (function () {
               function _Outliner(boxes) {
                  var borderWidth =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : 0;
                  var innerMargin =
                     arguments.length > 2 && arguments[2] !== undefined
                        ? arguments[2]
                        : 0;
                  var isLTR =
                     arguments.length > 3 && arguments[3] !== undefined
                        ? arguments[3]
                        : true;
                  _classCallCheck(this, _Outliner);
                  _classPrivateMethodInitSpec(this, _Outliner_brand);
                  _classPrivateFieldInitSpec(this, _box, void 0);
                  _classPrivateFieldInitSpec(this, _verticalEdges, []);
                  _classPrivateFieldInitSpec(this, _intervals, []);
                  var minX = Infinity;
                  var maxX = -Infinity;
                  var minY = Infinity;
                  var maxY = -Infinity;
                  var NUMBER_OF_DIGITS = 4;
                  var EPSILON = Math.pow(10, -NUMBER_OF_DIGITS);
                  var _iterator96 = _createForOfIteratorHelper(boxes),
                     _step96;
                  try {
                     for (
                        _iterator96.s();
                        !(_step96 = _iterator96.n()).done;

                     ) {
                        var _step96$value = _step96.value,
                           x = _step96$value.x,
                           y = _step96$value.y,
                           width = _step96$value.width,
                           height = _step96$value.height;
                        var x1 =
                           Math.floor((x - borderWidth) / EPSILON) * EPSILON;
                        var x2 =
                           Math.ceil((x + width + borderWidth) / EPSILON) *
                           EPSILON;
                        var y1 =
                           Math.floor((y - borderWidth) / EPSILON) * EPSILON;
                        var y2 =
                           Math.ceil((y + height + borderWidth) / EPSILON) *
                           EPSILON;
                        var left = [x1, y1, y2, true];
                        var right = [x2, y1, y2, false];
                        _classPrivateFieldGet(_verticalEdges, this).push(
                           left,
                           right,
                        );
                        minX = Math.min(minX, x1);
                        maxX = Math.max(maxX, x2);
                        minY = Math.min(minY, y1);
                        maxY = Math.max(maxY, y2);
                     }
                  } catch (err) {
                     _iterator96.e(err);
                  } finally {
                     _iterator96.f();
                  }
                  var bboxWidth = maxX - minX + 2 * innerMargin;
                  var bboxHeight = maxY - minY + 2 * innerMargin;
                  var shiftedMinX = minX - innerMargin;
                  var shiftedMinY = minY - innerMargin;
                  var lastEdge = _classPrivateFieldGet(_verticalEdges, this).at(
                     isLTR ? -1 : -2,
                  );
                  var lastPoint = [lastEdge[0], lastEdge[2]];
                  var _iterator97 = _createForOfIteratorHelper(
                        _classPrivateFieldGet(_verticalEdges, this),
                     ),
                     _step97;
                  try {
                     for (
                        _iterator97.s();
                        !(_step97 = _iterator97.n()).done;

                     ) {
                        var edge = _step97.value;
                        var _edge = _slicedToArray(edge, 3),
                           _x12 = _edge[0],
                           _y4 = _edge[1],
                           _y5 = _edge[2];
                        edge[0] = (_x12 - shiftedMinX) / bboxWidth;
                        edge[1] = (_y4 - shiftedMinY) / bboxHeight;
                        edge[2] = (_y5 - shiftedMinY) / bboxHeight;
                     }
                  } catch (err) {
                     _iterator97.e(err);
                  } finally {
                     _iterator97.f();
                  }
                  _classPrivateFieldSet(_box, this, {
                     x: shiftedMinX,
                     y: shiftedMinY,
                     width: bboxWidth,
                     height: bboxHeight,
                     lastPoint: lastPoint,
                  });
               }
               return _createClass(_Outliner, [
                  {
                     key: "getOutlines",
                     value: function getOutlines() {
                        _classPrivateFieldGet(_verticalEdges, this).sort(
                           function (a, b) {
                              return a[0] - b[0] || a[1] - b[1] || a[2] - b[2];
                           },
                        );
                        var outlineVerticalEdges = [];
                        var _iterator98 = _createForOfIteratorHelper(
                              _classPrivateFieldGet(_verticalEdges, this),
                           ),
                           _step98;
                        try {
                           for (
                              _iterator98.s();
                              !(_step98 = _iterator98.n()).done;

                           ) {
                              var edge = _step98.value;
                              if (edge[3]) {
                                 outlineVerticalEdges.push.apply(
                                    outlineVerticalEdges,
                                    _toConsumableArray(
                                       _assertClassBrand(
                                          _Outliner_brand,
                                          this,
                                          _breakEdge,
                                       ).call(this, edge),
                                    ),
                                 );
                                 _assertClassBrand(
                                    _Outliner_brand,
                                    this,
                                    _insert,
                                 ).call(this, edge);
                              } else {
                                 _assertClassBrand(
                                    _Outliner_brand,
                                    this,
                                    _remove,
                                 ).call(this, edge);
                                 outlineVerticalEdges.push.apply(
                                    outlineVerticalEdges,
                                    _toConsumableArray(
                                       _assertClassBrand(
                                          _Outliner_brand,
                                          this,
                                          _breakEdge,
                                       ).call(this, edge),
                                    ),
                                 );
                              }
                           }
                        } catch (err) {
                           _iterator98.e(err);
                        } finally {
                           _iterator98.f();
                        }
                        return _assertClassBrand(
                           _Outliner_brand,
                           this,
                           _getOutlines,
                        ).call(this, outlineVerticalEdges);
                     },
                  },
               ]);
            })();
            function _getOutlines(outlineVerticalEdges) {
               var edges = [];
               var allEdges = new Set();
               var _iterator101 =
                     _createForOfIteratorHelper(outlineVerticalEdges),
                  _step101;
               try {
                  for (
                     _iterator101.s();
                     !(_step101 = _iterator101.n()).done;

                  ) {
                     var _edge5 = _step101.value;
                     var _edge6 = _slicedToArray(_edge5, 3),
                        _x15 = _edge6[0],
                        _y8 = _edge6[1],
                        _y9 = _edge6[2];
                     edges.push([_x15, _y8, _edge5], [_x15, _y9, _edge5]);
                  }
               } catch (err) {
                  _iterator101.e(err);
               } finally {
                  _iterator101.f();
               }
               edges.sort(function (a, b) {
                  return a[1] - b[1] || a[0] - b[0];
               });
               for (var i = 0, ii = edges.length; i < ii; i += 2) {
                  var edge1 = edges[i][2];
                  var edge2 = edges[i + 1][2];
                  edge1.push(edge2);
                  edge2.push(edge1);
                  allEdges.add(edge1);
                  allEdges.add(edge2);
               }
               var outlines = [];
               var outline;
               while (allEdges.size > 0) {
                  var edge = allEdges.values().next().value;
                  var _edge2 = _slicedToArray(edge, 5),
                     x = _edge2[0],
                     y1 = _edge2[1],
                     y2 = _edge2[2],
                     _edge3 = _edge2[3],
                     _edge4 = _edge2[4];
                  allEdges["delete"](edge);
                  var lastPointX = x;
                  var lastPointY = y1;
                  outline = [x, y2];
                  outlines.push(outline);
                  while (true) {
                     var e = void 0;
                     if (allEdges.has(_edge3)) {
                        e = _edge3;
                     } else if (allEdges.has(_edge4)) {
                        e = _edge4;
                     } else {
                        break;
                     }
                     allEdges["delete"](e);
                     var _e = e;
                     var _e2 = _slicedToArray(_e, 5);
                     x = _e2[0];
                     y1 = _e2[1];
                     y2 = _e2[2];
                     _edge3 = _e2[3];
                     _edge4 = _e2[4];
                     if (lastPointX !== x) {
                        outline.push(
                           lastPointX,
                           lastPointY,
                           x,
                           lastPointY === y1 ? y1 : y2,
                        );
                        lastPointX = x;
                     }
                     lastPointY = lastPointY === y1 ? y2 : y1;
                  }
                  outline.push(lastPointX, lastPointY);
               }
               return new HighlightOutline(
                  outlines,
                  _classPrivateFieldGet(_box, this),
               );
            }
            function _binarySearch(y) {
               var array = _classPrivateFieldGet(_intervals, this);
               var start = 0;
               var end = array.length - 1;
               while (start <= end) {
                  var middle = (start + end) >> 1;
                  var y1 = array[middle][0];
                  if (y1 === y) {
                     return middle;
                  }
                  if (y1 < y) {
                     start = middle + 1;
                  } else {
                     end = middle - 1;
                  }
               }
               return end + 1;
            }
            function _insert(_ref95) {
               var _ref96 = _slicedToArray(_ref95, 3),
                  y1 = _ref96[1],
                  y2 = _ref96[2];
               var index = _assertClassBrand(
                  _Outliner_brand,
                  this,
                  _binarySearch,
               ).call(this, y1);
               _classPrivateFieldGet(_intervals, this).splice(index, 0, [
                  y1,
                  y2,
               ]);
            }
            function _remove(_ref97) {
               var _ref98 = _slicedToArray(_ref97, 3),
                  y1 = _ref98[1],
                  y2 = _ref98[2];
               var index = _assertClassBrand(
                  _Outliner_brand,
                  this,
                  _binarySearch,
               ).call(this, y1);
               for (
                  var i = index;
                  i < _classPrivateFieldGet(_intervals, this).length;
                  i++
               ) {
                  var _classPrivateFieldGet75 = _slicedToArray(
                        _classPrivateFieldGet(_intervals, this)[i],
                        2,
                     ),
                     start = _classPrivateFieldGet75[0],
                     end = _classPrivateFieldGet75[1];
                  if (start !== y1) {
                     break;
                  }
                  if (start === y1 && end === y2) {
                     _classPrivateFieldGet(_intervals, this).splice(i, 1);
                     return;
                  }
               }
               for (var _i26 = index - 1; _i26 >= 0; _i26--) {
                  var _classPrivateFieldGet76 = _slicedToArray(
                        _classPrivateFieldGet(_intervals, this)[_i26],
                        2,
                     ),
                     _start = _classPrivateFieldGet76[0],
                     _end = _classPrivateFieldGet76[1];
                  if (_start !== y1) {
                     break;
                  }
                  if (_start === y1 && _end === y2) {
                     _classPrivateFieldGet(_intervals, this).splice(_i26, 1);
                     return;
                  }
               }
            }
            function _breakEdge(edge) {
               var _edge7 = _slicedToArray(edge, 3),
                  x = _edge7[0],
                  y1 = _edge7[1],
                  y2 = _edge7[2];
               var results = [[x, y1, y2]];
               var index = _assertClassBrand(
                  _Outliner_brand,
                  this,
                  _binarySearch,
               ).call(this, y2);
               for (var i = 0; i < index; i++) {
                  var _classPrivateFieldGet77 = _slicedToArray(
                        _classPrivateFieldGet(_intervals, this)[i],
                        2,
                     ),
                     start = _classPrivateFieldGet77[0],
                     end = _classPrivateFieldGet77[1];
                  for (var j = 0, jj = results.length; j < jj; j++) {
                     var _results$j = _slicedToArray(results[j], 3),
                        y3 = _results$j[1],
                        y4 = _results$j[2];
                     if (end <= y3 || y4 <= start) {
                        continue;
                     }
                     if (y3 >= start) {
                        if (y4 > end) {
                           results[j][1] = end;
                        } else {
                           if (jj === 1) {
                              return [];
                           }
                           results.splice(j, 1);
                           j--;
                           jj--;
                        }
                        continue;
                     }
                     results[j][2] = start;
                     if (y4 > end) {
                        results.push([x, end, y4]);
                     }
                  }
               }
               return results;
            }
            var Outline = /*#__PURE__*/ (function () {
               function Outline() {
                  _classCallCheck(this, Outline);
               }
               return _createClass(Outline, [
                  {
                     key: "toSVGPath",
                     value: function toSVGPath() {
                        throw new Error(
                           "Abstract method `toSVGPath` must be implemented.",
                        );
                     },
                  },
                  {
                     key: "box",
                     get: function get() {
                        throw new Error(
                           "Abstract getter `box` must be implemented.",
                        );
                     },
                  },
                  {
                     key: "serialize",
                     value: function serialize(_bbox, _rotation) {
                        throw new Error(
                           "Abstract method `serialize` must be implemented.",
                        );
                     },
                  },
                  {
                     key: "free",
                     get: function get() {
                        return this instanceof FreeHighlightOutline;
                     },
                  },
               ]);
            })();
            var _box2 = /*#__PURE__*/ new WeakMap();
            var _outlines = /*#__PURE__*/ new WeakMap();
            var HighlightOutline = /*#__PURE__*/ (function (_Outline) {
               function HighlightOutline(outlines, box) {
                  var _this89;
                  _classCallCheck(this, HighlightOutline);
                  _this89 = _callSuper(this, HighlightOutline);
                  _classPrivateFieldInitSpec(_this89, _box2, void 0);
                  _classPrivateFieldInitSpec(_this89, _outlines, void 0);
                  _classPrivateFieldSet(_outlines, _this89, outlines);
                  _classPrivateFieldSet(_box2, _this89, box);
                  return _this89;
               }
               _inherits(HighlightOutline, _Outline);
               return _createClass(HighlightOutline, [
                  {
                     key: "toSVGPath",
                     value: function toSVGPath() {
                        var buffer = [];
                        var _iterator99 = _createForOfIteratorHelper(
                              _classPrivateFieldGet(_outlines, this),
                           ),
                           _step99;
                        try {
                           for (
                              _iterator99.s();
                              !(_step99 = _iterator99.n()).done;

                           ) {
                              var polygon = _step99.value;
                              var _polygon = _slicedToArray(polygon, 2),
                                 prevX = _polygon[0],
                                 prevY = _polygon[1];
                              buffer.push("M".concat(prevX, " ").concat(prevY));
                              for (var i = 2; i < polygon.length; i += 2) {
                                 var x = polygon[i];
                                 var y = polygon[i + 1];
                                 if (x === prevX) {
                                    buffer.push("V".concat(y));
                                    prevY = y;
                                 } else if (y === prevY) {
                                    buffer.push("H".concat(x));
                                    prevX = x;
                                 }
                              }
                              buffer.push("Z");
                           }
                        } catch (err) {
                           _iterator99.e(err);
                        } finally {
                           _iterator99.f();
                        }
                        return buffer.join(" ");
                     },
                  },
                  {
                     key: "serialize",
                     value: function serialize(_ref89, _rotation) {
                        var _ref90 = _slicedToArray(_ref89, 4),
                           blX = _ref90[0],
                           blY = _ref90[1],
                           trX = _ref90[2],
                           trY = _ref90[3];
                        var outlines = [];
                        var width = trX - blX;
                        var height = trY - blY;
                        var _iterator100 = _createForOfIteratorHelper(
                              _classPrivateFieldGet(_outlines, this),
                           ),
                           _step100;
                        try {
                           for (
                              _iterator100.s();
                              !(_step100 = _iterator100.n()).done;

                           ) {
                              var outline = _step100.value;
                              var points = new Array(outline.length);
                              for (var i = 0; i < outline.length; i += 2) {
                                 points[i] = blX + outline[i] * width;
                                 points[i + 1] = trY - outline[i + 1] * height;
                              }
                              outlines.push(points);
                           }
                        } catch (err) {
                           _iterator100.e(err);
                        } finally {
                           _iterator100.f();
                        }
                        return outlines;
                     },
                  },
                  {
                     key: "box",
                     get: function get() {
                        return _classPrivateFieldGet(_box2, this);
                     },
                  },
               ]);
            })(Outline);
            var _box3 = /*#__PURE__*/ new WeakMap();
            var _bottom = /*#__PURE__*/ new WeakMap();
            var _innerMargin = /*#__PURE__*/ new WeakMap();
            var _isLTR = /*#__PURE__*/ new WeakMap();
            var _top = /*#__PURE__*/ new WeakMap();
            var _last = /*#__PURE__*/ new WeakMap();
            var _lastX = /*#__PURE__*/ new WeakMap();
            var _lastY = /*#__PURE__*/ new WeakMap();
            var _min = /*#__PURE__*/ new WeakMap();
            var _min_dist = /*#__PURE__*/ new WeakMap();
            var _scaleFactor = /*#__PURE__*/ new WeakMap();
            var _thickness2 = /*#__PURE__*/ new WeakMap();
            var _points = /*#__PURE__*/ new WeakMap();
            var _FreeOutliner_brand = /*#__PURE__*/ new WeakSet();
            var _FreeOutliner = /*#__PURE__*/ (function () {
               function _FreeOutliner(
                  _ref91,
                  box,
                  scaleFactor,
                  thickness,
                  isLTR,
               ) {
                  var _x13 = _ref91.x,
                     _y6 = _ref91.y;
                  var innerMargin =
                     arguments.length > 5 && arguments[5] !== undefined
                        ? arguments[5]
                        : 0;
                  _classCallCheck(this, _FreeOutliner);
                  _classPrivateMethodInitSpec(this, _FreeOutliner_brand);
                  _classPrivateFieldInitSpec(this, _box3, void 0);
                  _classPrivateFieldInitSpec(this, _bottom, []);
                  _classPrivateFieldInitSpec(this, _innerMargin, void 0);
                  _classPrivateFieldInitSpec(this, _isLTR, void 0);
                  _classPrivateFieldInitSpec(this, _top, []);
                  _classPrivateFieldInitSpec(this, _last, new Float64Array(18));
                  _classPrivateFieldInitSpec(this, _lastX, void 0);
                  _classPrivateFieldInitSpec(this, _lastY, void 0);
                  _classPrivateFieldInitSpec(this, _min, void 0);
                  _classPrivateFieldInitSpec(this, _min_dist, void 0);
                  _classPrivateFieldInitSpec(this, _scaleFactor, void 0);
                  _classPrivateFieldInitSpec(this, _thickness2, void 0);
                  _classPrivateFieldInitSpec(this, _points, []);
                  _classPrivateFieldSet(_box3, this, box);
                  _classPrivateFieldSet(
                     _thickness2,
                     this,
                     thickness * scaleFactor,
                  );
                  _classPrivateFieldSet(_isLTR, this, isLTR);
                  _classPrivateFieldGet(_last, this).set(
                     [NaN, NaN, NaN, NaN, _x13, _y6],
                     6,
                  );
                  _classPrivateFieldSet(_innerMargin, this, innerMargin);
                  _classPrivateFieldSet(
                     _min_dist,
                     this,
                     _MIN_DIST._ * scaleFactor,
                  );
                  _classPrivateFieldSet(_min, this, _MIN._ * scaleFactor);
                  _classPrivateFieldSet(_scaleFactor, this, scaleFactor);
                  _classPrivateFieldGet(_points, this).push(_x13, _y6);
               }
               return _createClass(_FreeOutliner, [
                  {
                     key: "free",
                     get: function get() {
                        return true;
                     },
                  },
                  {
                     key: "isEmpty",
                     value: function isEmpty() {
                        return isNaN(_classPrivateFieldGet(_last, this)[8]);
                     },
                  },
                  {
                     key: "add",
                     value: function add(_ref92) {
                        var _classPrivateFieldGet56;
                        var x = _ref92.x,
                           y = _ref92.y;
                        _classPrivateFieldSet(_lastX, this, x);
                        _classPrivateFieldSet(_lastY, this, y);
                        var _classPrivateFieldGet52 = _classPrivateFieldGet(
                              _box3,
                              this,
                           ),
                           _classPrivateFieldGet53 = _slicedToArray(
                              _classPrivateFieldGet52,
                              4,
                           ),
                           layerX = _classPrivateFieldGet53[0],
                           layerY = _classPrivateFieldGet53[1],
                           layerWidth = _classPrivateFieldGet53[2],
                           layerHeight = _classPrivateFieldGet53[3];
                        var _classPrivateFieldGet54 = _classPrivateFieldGet(
                              _last,
                              this,
                           ).subarray(8, 12),
                           _classPrivateFieldGet55 = _slicedToArray(
                              _classPrivateFieldGet54,
                              4,
                           ),
                           x1 = _classPrivateFieldGet55[0],
                           y1 = _classPrivateFieldGet55[1],
                           x2 = _classPrivateFieldGet55[2],
                           y2 = _classPrivateFieldGet55[3];
                        var diffX = x - x2;
                        var diffY = y - y2;
                        var d = Math.hypot(diffX, diffY);
                        if (d < _classPrivateFieldGet(_min, this)) {
                           return false;
                        }
                        var diffD = d - _classPrivateFieldGet(_min_dist, this);
                        var K = diffD / d;
                        var shiftX = K * diffX;
                        var shiftY = K * diffY;
                        var x0 = x1;
                        var y0 = y1;
                        x1 = x2;
                        y1 = y2;
                        x2 += shiftX;
                        y2 += shiftY;
                        (_classPrivateFieldGet56 = _classPrivateFieldGet(
                           _points,
                           this,
                        )) === null ||
                           _classPrivateFieldGet56 === void 0 ||
                           _classPrivateFieldGet56.push(x, y);
                        var nX = -shiftY / diffD;
                        var nY = shiftX / diffD;
                        var thX = nX * _classPrivateFieldGet(_thickness2, this);
                        var thY = nY * _classPrivateFieldGet(_thickness2, this);
                        _classPrivateFieldGet(_last, this).set(
                           _classPrivateFieldGet(_last, this).subarray(2, 8),
                           0,
                        );
                        _classPrivateFieldGet(_last, this).set(
                           [x2 + thX, y2 + thY],
                           4,
                        );
                        _classPrivateFieldGet(_last, this).set(
                           _classPrivateFieldGet(_last, this).subarray(14, 18),
                           12,
                        );
                        _classPrivateFieldGet(_last, this).set(
                           [x2 - thX, y2 - thY],
                           16,
                        );
                        if (isNaN(_classPrivateFieldGet(_last, this)[6])) {
                           if (_classPrivateFieldGet(_top, this).length === 0) {
                              _classPrivateFieldGet(_last, this).set(
                                 [x1 + thX, y1 + thY],
                                 2,
                              );
                              _classPrivateFieldGet(_top, this).push(
                                 NaN,
                                 NaN,
                                 NaN,
                                 NaN,
                                 (x1 + thX - layerX) / layerWidth,
                                 (y1 + thY - layerY) / layerHeight,
                              );
                              _classPrivateFieldGet(_last, this).set(
                                 [x1 - thX, y1 - thY],
                                 14,
                              );
                              _classPrivateFieldGet(_bottom, this).push(
                                 NaN,
                                 NaN,
                                 NaN,
                                 NaN,
                                 (x1 - thX - layerX) / layerWidth,
                                 (y1 - thY - layerY) / layerHeight,
                              );
                           }
                           _classPrivateFieldGet(_last, this).set(
                              [x0, y0, x1, y1, x2, y2],
                              6,
                           );
                           return !this.isEmpty();
                        }
                        _classPrivateFieldGet(_last, this).set(
                           [x0, y0, x1, y1, x2, y2],
                           6,
                        );
                        var angle = Math.abs(
                           Math.atan2(y0 - y1, x0 - x1) -
                              Math.atan2(shiftY, shiftX),
                        );
                        if (angle < Math.PI / 2) {
                           var _classPrivateFieldGet57 = _classPrivateFieldGet(
                              _last,
                              this,
                           ).subarray(2, 6);
                           var _classPrivateFieldGet58 = _slicedToArray(
                              _classPrivateFieldGet57,
                              4,
                           );
                           x1 = _classPrivateFieldGet58[0];
                           y1 = _classPrivateFieldGet58[1];
                           x2 = _classPrivateFieldGet58[2];
                           y2 = _classPrivateFieldGet58[3];
                           _classPrivateFieldGet(_top, this).push(
                              NaN,
                              NaN,
                              NaN,
                              NaN,
                              ((x1 + x2) / 2 - layerX) / layerWidth,
                              ((y1 + y2) / 2 - layerY) / layerHeight,
                           );
                           var _classPrivateFieldGet59 = _classPrivateFieldGet(
                              _last,
                              this,
                           ).subarray(14, 18);
                           var _classPrivateFieldGet60 = _slicedToArray(
                              _classPrivateFieldGet59,
                              4,
                           );
                           x1 = _classPrivateFieldGet60[0];
                           y1 = _classPrivateFieldGet60[1];
                           x0 = _classPrivateFieldGet60[2];
                           y0 = _classPrivateFieldGet60[3];
                           _classPrivateFieldGet(_bottom, this).push(
                              NaN,
                              NaN,
                              NaN,
                              NaN,
                              ((x0 + x1) / 2 - layerX) / layerWidth,
                              ((y0 + y1) / 2 - layerY) / layerHeight,
                           );
                           return true;
                        }
                        var _classPrivateFieldGet61 = _classPrivateFieldGet(
                           _last,
                           this,
                        ).subarray(0, 6);
                        var _classPrivateFieldGet62 = _slicedToArray(
                           _classPrivateFieldGet61,
                           6,
                        );
                        x0 = _classPrivateFieldGet62[0];
                        y0 = _classPrivateFieldGet62[1];
                        x1 = _classPrivateFieldGet62[2];
                        y1 = _classPrivateFieldGet62[3];
                        x2 = _classPrivateFieldGet62[4];
                        y2 = _classPrivateFieldGet62[5];
                        _classPrivateFieldGet(_top, this).push(
                           ((x0 + 5 * x1) / 6 - layerX) / layerWidth,
                           ((y0 + 5 * y1) / 6 - layerY) / layerHeight,
                           ((5 * x1 + x2) / 6 - layerX) / layerWidth,
                           ((5 * y1 + y2) / 6 - layerY) / layerHeight,
                           ((x1 + x2) / 2 - layerX) / layerWidth,
                           ((y1 + y2) / 2 - layerY) / layerHeight,
                        );
                        var _classPrivateFieldGet63 = _classPrivateFieldGet(
                           _last,
                           this,
                        ).subarray(12, 18);
                        var _classPrivateFieldGet64 = _slicedToArray(
                           _classPrivateFieldGet63,
                           6,
                        );
                        x2 = _classPrivateFieldGet64[0];
                        y2 = _classPrivateFieldGet64[1];
                        x1 = _classPrivateFieldGet64[2];
                        y1 = _classPrivateFieldGet64[3];
                        x0 = _classPrivateFieldGet64[4];
                        y0 = _classPrivateFieldGet64[5];
                        _classPrivateFieldGet(_bottom, this).push(
                           ((x0 + 5 * x1) / 6 - layerX) / layerWidth,
                           ((y0 + 5 * y1) / 6 - layerY) / layerHeight,
                           ((5 * x1 + x2) / 6 - layerX) / layerWidth,
                           ((5 * y1 + y2) / 6 - layerY) / layerHeight,
                           ((x1 + x2) / 2 - layerX) / layerWidth,
                           ((y1 + y2) / 2 - layerY) / layerHeight,
                        );
                        return true;
                     },
                  },
                  {
                     key: "toSVGPath",
                     value: function toSVGPath() {
                        if (this.isEmpty()) {
                           return "";
                        }
                        var top = _classPrivateFieldGet(_top, this);
                        var bottom = _classPrivateFieldGet(_bottom, this);
                        var lastTop = _classPrivateFieldGet(
                           _last,
                           this,
                        ).subarray(4, 6);
                        var lastBottom = _classPrivateFieldGet(
                           _last,
                           this,
                        ).subarray(16, 18);
                        var _classPrivateFieldGet65 = _classPrivateFieldGet(
                              _box3,
                              this,
                           ),
                           _classPrivateFieldGet66 = _slicedToArray(
                              _classPrivateFieldGet65,
                              4,
                           ),
                           x = _classPrivateFieldGet66[0],
                           y = _classPrivateFieldGet66[1],
                           width = _classPrivateFieldGet66[2],
                           height = _classPrivateFieldGet66[3];
                        var _assertClassBrand$cal4 = _assertClassBrand(
                              _FreeOutliner_brand,
                              this,
                              _getLastCoords,
                           ).call(this),
                           _assertClassBrand$cal5 = _slicedToArray(
                              _assertClassBrand$cal4,
                              4,
                           ),
                           lastTopX = _assertClassBrand$cal5[0],
                           lastTopY = _assertClassBrand$cal5[1],
                           lastBottomX = _assertClassBrand$cal5[2],
                           lastBottomY = _assertClassBrand$cal5[3];
                        if (
                           isNaN(_classPrivateFieldGet(_last, this)[6]) &&
                           !this.isEmpty()
                        ) {
                           return "M"
                              .concat(
                                 (_classPrivateFieldGet(_last, this)[2] - x) /
                                    width,
                                 " ",
                              )
                              .concat(
                                 (_classPrivateFieldGet(_last, this)[3] - y) /
                                    height,
                                 " L",
                              )
                              .concat(
                                 (_classPrivateFieldGet(_last, this)[4] - x) /
                                    width,
                                 " ",
                              )
                              .concat(
                                 (_classPrivateFieldGet(_last, this)[5] - y) /
                                    height,
                                 " L",
                              )
                              .concat(lastTopX, " ")
                              .concat(lastTopY, " L")
                              .concat(lastBottomX, " ")
                              .concat(lastBottomY, " L")
                              .concat(
                                 (_classPrivateFieldGet(_last, this)[16] - x) /
                                    width,
                                 " ",
                              )
                              .concat(
                                 (_classPrivateFieldGet(_last, this)[17] - y) /
                                    height,
                                 " L",
                              )
                              .concat(
                                 (_classPrivateFieldGet(_last, this)[14] - x) /
                                    width,
                                 " ",
                              )
                              .concat(
                                 (_classPrivateFieldGet(_last, this)[15] - y) /
                                    height,
                                 " Z",
                              );
                        }
                        var buffer = [];
                        buffer.push("M".concat(top[4], " ").concat(top[5]));
                        for (var i = 6; i < top.length; i += 6) {
                           if (isNaN(top[i])) {
                              buffer.push(
                                 "L".concat(top[i + 4], " ").concat(top[i + 5]),
                              );
                           } else {
                              buffer.push(
                                 "C"
                                    .concat(top[i], " ")
                                    .concat(top[i + 1], " ")
                                    .concat(top[i + 2], " ")
                                    .concat(top[i + 3], " ")
                                    .concat(top[i + 4], " ")
                                    .concat(top[i + 5]),
                              );
                           }
                        }
                        buffer.push(
                           "L"
                              .concat((lastTop[0] - x) / width, " ")
                              .concat((lastTop[1] - y) / height, " L")
                              .concat(lastTopX, " ")
                              .concat(lastTopY, " L")
                              .concat(lastBottomX, " ")
                              .concat(lastBottomY, " L")
                              .concat((lastBottom[0] - x) / width, " ")
                              .concat((lastBottom[1] - y) / height),
                        );
                        for (
                           var _i22 = bottom.length - 6;
                           _i22 >= 6;
                           _i22 -= 6
                        ) {
                           if (isNaN(bottom[_i22])) {
                              buffer.push(
                                 "L"
                                    .concat(bottom[_i22 + 4], " ")
                                    .concat(bottom[_i22 + 5]),
                              );
                           } else {
                              buffer.push(
                                 "C"
                                    .concat(bottom[_i22], " ")
                                    .concat(bottom[_i22 + 1], " ")
                                    .concat(bottom[_i22 + 2], " ")
                                    .concat(bottom[_i22 + 3], " ")
                                    .concat(bottom[_i22 + 4], " ")
                                    .concat(bottom[_i22 + 5]),
                              );
                           }
                        }
                        buffer.push(
                           "L".concat(bottom[4], " ").concat(bottom[5], " Z"),
                        );
                        return buffer.join(" ");
                     },
                  },
                  {
                     key: "getOutlines",
                     value: function getOutlines() {
                        var _classPrivateFieldGet69, _classPrivateFieldGet70;
                        var top = _classPrivateFieldGet(_top, this);
                        var bottom = _classPrivateFieldGet(_bottom, this);
                        var last = _classPrivateFieldGet(_last, this);
                        var lastTop = last.subarray(4, 6);
                        var lastBottom = last.subarray(16, 18);
                        var _classPrivateFieldGet67 = _classPrivateFieldGet(
                              _box3,
                              this,
                           ),
                           _classPrivateFieldGet68 = _slicedToArray(
                              _classPrivateFieldGet67,
                              4,
                           ),
                           layerX = _classPrivateFieldGet68[0],
                           layerY = _classPrivateFieldGet68[1],
                           layerWidth = _classPrivateFieldGet68[2],
                           layerHeight = _classPrivateFieldGet68[3];
                        var points = new Float64Array(
                           ((_classPrivateFieldGet69 =
                              (_classPrivateFieldGet70 = _classPrivateFieldGet(
                                 _points,
                                 this,
                              )) === null || _classPrivateFieldGet70 === void 0
                                 ? void 0
                                 : _classPrivateFieldGet70.length) !== null &&
                           _classPrivateFieldGet69 !== void 0
                              ? _classPrivateFieldGet69
                              : 0) + 2,
                        );
                        for (
                           var i = 0, ii = points.length - 2;
                           i < ii;
                           i += 2
                        ) {
                           points[i] =
                              (_classPrivateFieldGet(_points, this)[i] -
                                 layerX) /
                              layerWidth;
                           points[i + 1] =
                              (_classPrivateFieldGet(_points, this)[i + 1] -
                                 layerY) /
                              layerHeight;
                        }
                        points[points.length - 2] =
                           (_classPrivateFieldGet(_lastX, this) - layerX) /
                           layerWidth;
                        points[points.length - 1] =
                           (_classPrivateFieldGet(_lastY, this) - layerY) /
                           layerHeight;
                        var _assertClassBrand$cal6 = _assertClassBrand(
                              _FreeOutliner_brand,
                              this,
                              _getLastCoords,
                           ).call(this),
                           _assertClassBrand$cal7 = _slicedToArray(
                              _assertClassBrand$cal6,
                              4,
                           ),
                           lastTopX = _assertClassBrand$cal7[0],
                           lastTopY = _assertClassBrand$cal7[1],
                           lastBottomX = _assertClassBrand$cal7[2],
                           lastBottomY = _assertClassBrand$cal7[3];
                        if (isNaN(last[6]) && !this.isEmpty()) {
                           var _outline = new Float64Array(36);
                           _outline.set(
                              [
                                 NaN,
                                 NaN,
                                 NaN,
                                 NaN,
                                 (last[2] - layerX) / layerWidth,
                                 (last[3] - layerY) / layerHeight,
                                 NaN,
                                 NaN,
                                 NaN,
                                 NaN,
                                 (last[4] - layerX) / layerWidth,
                                 (last[5] - layerY) / layerHeight,
                                 NaN,
                                 NaN,
                                 NaN,
                                 NaN,
                                 lastTopX,
                                 lastTopY,
                                 NaN,
                                 NaN,
                                 NaN,
                                 NaN,
                                 lastBottomX,
                                 lastBottomY,
                                 NaN,
                                 NaN,
                                 NaN,
                                 NaN,
                                 (last[16] - layerX) / layerWidth,
                                 (last[17] - layerY) / layerHeight,
                                 NaN,
                                 NaN,
                                 NaN,
                                 NaN,
                                 (last[14] - layerX) / layerWidth,
                                 (last[15] - layerY) / layerHeight,
                              ],
                              0,
                           );
                           return new FreeHighlightOutline(
                              _outline,
                              points,
                              _classPrivateFieldGet(_box3, this),
                              _classPrivateFieldGet(_scaleFactor, this),
                              _classPrivateFieldGet(_innerMargin, this),
                              _classPrivateFieldGet(_isLTR, this),
                           );
                        }
                        var outline = new Float64Array(
                           _classPrivateFieldGet(_top, this).length +
                              24 +
                              _classPrivateFieldGet(_bottom, this).length,
                        );
                        var N = top.length;
                        for (var _i23 = 0; _i23 < N; _i23 += 2) {
                           if (isNaN(top[_i23])) {
                              outline[_i23] = outline[_i23 + 1] = NaN;
                              continue;
                           }
                           outline[_i23] = top[_i23];
                           outline[_i23 + 1] = top[_i23 + 1];
                        }
                        outline.set(
                           [
                              NaN,
                              NaN,
                              NaN,
                              NaN,
                              (lastTop[0] - layerX) / layerWidth,
                              (lastTop[1] - layerY) / layerHeight,
                              NaN,
                              NaN,
                              NaN,
                              NaN,
                              lastTopX,
                              lastTopY,
                              NaN,
                              NaN,
                              NaN,
                              NaN,
                              lastBottomX,
                              lastBottomY,
                              NaN,
                              NaN,
                              NaN,
                              NaN,
                              (lastBottom[0] - layerX) / layerWidth,
                              (lastBottom[1] - layerY) / layerHeight,
                           ],
                           N,
                        );
                        N += 24;
                        for (
                           var _i24 = bottom.length - 6;
                           _i24 >= 6;
                           _i24 -= 6
                        ) {
                           for (var j = 0; j < 6; j += 2) {
                              if (isNaN(bottom[_i24 + j])) {
                                 outline[N] = outline[N + 1] = NaN;
                                 N += 2;
                                 continue;
                              }
                              outline[N] = bottom[_i24 + j];
                              outline[N + 1] = bottom[_i24 + j + 1];
                              N += 2;
                           }
                        }
                        outline.set(
                           [NaN, NaN, NaN, NaN, bottom[4], bottom[5]],
                           N,
                        );
                        return new FreeHighlightOutline(
                           outline,
                           points,
                           _classPrivateFieldGet(_box3, this),
                           _classPrivateFieldGet(_scaleFactor, this),
                           _classPrivateFieldGet(_innerMargin, this),
                           _classPrivateFieldGet(_isLTR, this),
                        );
                     },
                  },
               ]);
            })();
            function _getLastCoords() {
               var lastTop = _classPrivateFieldGet(_last, this).subarray(4, 6);
               var lastBottom = _classPrivateFieldGet(_last, this).subarray(
                  16,
                  18,
               );
               var _classPrivateFieldGet78 = _classPrivateFieldGet(_box3, this),
                  _classPrivateFieldGet79 = _slicedToArray(
                     _classPrivateFieldGet78,
                     4,
                  ),
                  x = _classPrivateFieldGet79[0],
                  y = _classPrivateFieldGet79[1],
                  width = _classPrivateFieldGet79[2],
                  height = _classPrivateFieldGet79[3];
               return [
                  (_classPrivateFieldGet(_lastX, this) +
                     (lastTop[0] - lastBottom[0]) / 2 -
                     x) /
                     width,
                  (_classPrivateFieldGet(_lastY, this) +
                     (lastTop[1] - lastBottom[1]) / 2 -
                     y) /
                     height,
                  (_classPrivateFieldGet(_lastX, this) +
                     (lastBottom[0] - lastTop[0]) / 2 -
                     x) /
                     width,
                  (_classPrivateFieldGet(_lastY, this) +
                     (lastBottom[1] - lastTop[1]) / 2 -
                     y) /
                     height,
               ];
            }
            var _MIN_DIST = { _: 8 };
            var _MIN_DIFF = { _: 2 };
            var _MIN = { _: _MIN_DIST._ + _MIN_DIFF._ };
            var _box4 = /*#__PURE__*/ new WeakMap();
            var _bbox2 = /*#__PURE__*/ new WeakMap();
            var _innerMargin2 = /*#__PURE__*/ new WeakMap();
            var _isLTR2 = /*#__PURE__*/ new WeakMap();
            var _points2 = /*#__PURE__*/ new WeakMap();
            var _scaleFactor2 = /*#__PURE__*/ new WeakMap();
            var _outline2 = /*#__PURE__*/ new WeakMap();
            var _FreeHighlightOutline_brand = /*#__PURE__*/ new WeakSet();
            var FreeHighlightOutline = /*#__PURE__*/ (function (_Outline2) {
               function FreeHighlightOutline(
                  _outline3,
                  points,
                  box,
                  scaleFactor,
                  innerMargin,
                  _isLTR3,
               ) {
                  var _this90;
                  _classCallCheck(this, FreeHighlightOutline);
                  _this90 = _callSuper(this, FreeHighlightOutline);
                  _classPrivateMethodInitSpec(
                     _this90,
                     _FreeHighlightOutline_brand,
                  );
                  _classPrivateFieldInitSpec(_this90, _box4, void 0);
                  _classPrivateFieldInitSpec(_this90, _bbox2, null);
                  _classPrivateFieldInitSpec(_this90, _innerMargin2, void 0);
                  _classPrivateFieldInitSpec(_this90, _isLTR2, void 0);
                  _classPrivateFieldInitSpec(_this90, _points2, void 0);
                  _classPrivateFieldInitSpec(_this90, _scaleFactor2, void 0);
                  _classPrivateFieldInitSpec(_this90, _outline2, void 0);
                  _classPrivateFieldSet(_outline2, _this90, _outline3);
                  _classPrivateFieldSet(_points2, _this90, points);
                  _classPrivateFieldSet(_box4, _this90, box);
                  _classPrivateFieldSet(_scaleFactor2, _this90, scaleFactor);
                  _classPrivateFieldSet(_innerMargin2, _this90, innerMargin);
                  _classPrivateFieldSet(_isLTR2, _this90, _isLTR3);
                  _assertClassBrand(
                     _FreeHighlightOutline_brand,
                     _this90,
                     _computeMinMax,
                  ).call(_this90, _isLTR3);
                  var _classPrivateFieldGet71 = _classPrivateFieldGet(
                        _bbox2,
                        _this90,
                     ),
                     _x14 = _classPrivateFieldGet71.x,
                     _y7 = _classPrivateFieldGet71.y,
                     _width3 = _classPrivateFieldGet71.width,
                     _height3 = _classPrivateFieldGet71.height;
                  for (var i = 0, ii = _outline3.length; i < ii; i += 2) {
                     _outline3[i] = (_outline3[i] - _x14) / _width3;
                     _outline3[i + 1] = (_outline3[i + 1] - _y7) / _height3;
                  }
                  for (
                     var _i25 = 0, _ii8 = points.length;
                     _i25 < _ii8;
                     _i25 += 2
                  ) {
                     points[_i25] = (points[_i25] - _x14) / _width3;
                     points[_i25 + 1] = (points[_i25 + 1] - _y7) / _height3;
                  }
                  return _this90;
               }
               _inherits(FreeHighlightOutline, _Outline2);
               return _createClass(FreeHighlightOutline, [
                  {
                     key: "toSVGPath",
                     value: function toSVGPath() {
                        var buffer = [
                           "M"
                              .concat(
                                 _classPrivateFieldGet(_outline2, this)[4],
                                 " ",
                              )
                              .concat(
                                 _classPrivateFieldGet(_outline2, this)[5],
                              ),
                        ];
                        for (
                           var i = 6,
                              ii = _classPrivateFieldGet(
                                 _outline2,
                                 this,
                              ).length;
                           i < ii;
                           i += 6
                        ) {
                           if (
                              isNaN(_classPrivateFieldGet(_outline2, this)[i])
                           ) {
                              buffer.push(
                                 "L"
                                    .concat(
                                       _classPrivateFieldGet(_outline2, this)[
                                          i + 4
                                       ],
                                       " ",
                                    )
                                    .concat(
                                       _classPrivateFieldGet(_outline2, this)[
                                          i + 5
                                       ],
                                    ),
                              );
                              continue;
                           }
                           buffer.push(
                              "C"
                                 .concat(
                                    _classPrivateFieldGet(_outline2, this)[i],
                                    " ",
                                 )
                                 .concat(
                                    _classPrivateFieldGet(_outline2, this)[
                                       i + 1
                                    ],
                                    " ",
                                 )
                                 .concat(
                                    _classPrivateFieldGet(_outline2, this)[
                                       i + 2
                                    ],
                                    " ",
                                 )
                                 .concat(
                                    _classPrivateFieldGet(_outline2, this)[
                                       i + 3
                                    ],
                                    " ",
                                 )
                                 .concat(
                                    _classPrivateFieldGet(_outline2, this)[
                                       i + 4
                                    ],
                                    " ",
                                 )
                                 .concat(
                                    _classPrivateFieldGet(_outline2, this)[
                                       i + 5
                                    ],
                                 ),
                           );
                        }
                        buffer.push("Z");
                        return buffer.join(" ");
                     },
                  },
                  {
                     key: "serialize",
                     value: function serialize(_ref93, rotation) {
                        var _ref94 = _slicedToArray(_ref93, 4),
                           blX = _ref94[0],
                           blY = _ref94[1],
                           trX = _ref94[2],
                           trY = _ref94[3];
                        var width = trX - blX;
                        var height = trY - blY;
                        var outline;
                        var points;
                        switch (rotation) {
                           case 0:
                              outline = _assertClassBrand(
                                 _FreeHighlightOutline_brand,
                                 this,
                                 _rescale,
                              ).call(
                                 this,
                                 _classPrivateFieldGet(_outline2, this),
                                 blX,
                                 trY,
                                 width,
                                 -height,
                              );
                              points = _assertClassBrand(
                                 _FreeHighlightOutline_brand,
                                 this,
                                 _rescale,
                              ).call(
                                 this,
                                 _classPrivateFieldGet(_points2, this),
                                 blX,
                                 trY,
                                 width,
                                 -height,
                              );
                              break;
                           case 90:
                              outline = _assertClassBrand(
                                 _FreeHighlightOutline_brand,
                                 this,
                                 _rescaleAndSwap,
                              ).call(
                                 this,
                                 _classPrivateFieldGet(_outline2, this),
                                 blX,
                                 blY,
                                 width,
                                 height,
                              );
                              points = _assertClassBrand(
                                 _FreeHighlightOutline_brand,
                                 this,
                                 _rescaleAndSwap,
                              ).call(
                                 this,
                                 _classPrivateFieldGet(_points2, this),
                                 blX,
                                 blY,
                                 width,
                                 height,
                              );
                              break;
                           case 180:
                              outline = _assertClassBrand(
                                 _FreeHighlightOutline_brand,
                                 this,
                                 _rescale,
                              ).call(
                                 this,
                                 _classPrivateFieldGet(_outline2, this),
                                 trX,
                                 blY,
                                 -width,
                                 height,
                              );
                              points = _assertClassBrand(
                                 _FreeHighlightOutline_brand,
                                 this,
                                 _rescale,
                              ).call(
                                 this,
                                 _classPrivateFieldGet(_points2, this),
                                 trX,
                                 blY,
                                 -width,
                                 height,
                              );
                              break;
                           case 270:
                              outline = _assertClassBrand(
                                 _FreeHighlightOutline_brand,
                                 this,
                                 _rescaleAndSwap,
                              ).call(
                                 this,
                                 _classPrivateFieldGet(_outline2, this),
                                 trX,
                                 trY,
                                 -width,
                                 -height,
                              );
                              points = _assertClassBrand(
                                 _FreeHighlightOutline_brand,
                                 this,
                                 _rescaleAndSwap,
                              ).call(
                                 this,
                                 _classPrivateFieldGet(_points2, this),
                                 trX,
                                 trY,
                                 -width,
                                 -height,
                              );
                              break;
                        }
                        return {
                           outline: Array.from(outline),
                           points: [Array.from(points)],
                        };
                     },
                  },
                  {
                     key: "box",
                     get: function get() {
                        return _classPrivateFieldGet(_bbox2, this);
                     },
                  },
                  {
                     key: "getNewOutline",
                     value: function getNewOutline(thickness, innerMargin) {
                        var _classPrivateFieldGet72 = _classPrivateFieldGet(
                              _bbox2,
                              this,
                           ),
                           x = _classPrivateFieldGet72.x,
                           y = _classPrivateFieldGet72.y,
                           width = _classPrivateFieldGet72.width,
                           height = _classPrivateFieldGet72.height;
                        var _classPrivateFieldGet73 = _classPrivateFieldGet(
                              _box4,
                              this,
                           ),
                           _classPrivateFieldGet74 = _slicedToArray(
                              _classPrivateFieldGet73,
                              4,
                           ),
                           layerX = _classPrivateFieldGet74[0],
                           layerY = _classPrivateFieldGet74[1],
                           layerWidth = _classPrivateFieldGet74[2],
                           layerHeight = _classPrivateFieldGet74[3];
                        var sx = width * layerWidth;
                        var sy = height * layerHeight;
                        var tx = x * layerWidth + layerX;
                        var ty = y * layerHeight + layerY;
                        var outliner = new _FreeOutliner(
                           {
                              x:
                                 _classPrivateFieldGet(_points2, this)[0] * sx +
                                 tx,
                              y:
                                 _classPrivateFieldGet(_points2, this)[1] * sy +
                                 ty,
                           },
                           _classPrivateFieldGet(_box4, this),
                           _classPrivateFieldGet(_scaleFactor2, this),
                           thickness,
                           _classPrivateFieldGet(_isLTR2, this),
                           innerMargin !== null && innerMargin !== void 0
                              ? innerMargin
                              : _classPrivateFieldGet(_innerMargin2, this),
                        );
                        for (
                           var i = 2;
                           i < _classPrivateFieldGet(_points2, this).length;
                           i += 2
                        ) {
                           outliner.add({
                              x:
                                 _classPrivateFieldGet(_points2, this)[i] * sx +
                                 tx,
                              y:
                                 _classPrivateFieldGet(_points2, this)[i + 1] *
                                    sy +
                                 ty,
                           });
                        }
                        return outliner.getOutlines();
                     },
                  },
               ]);
            })(Outline);
            /***/ function _rescale(src, tx, ty, sx, sy) {
               var dest = new Float64Array(src.length);
               for (var i = 0, ii = src.length; i < ii; i += 2) {
                  dest[i] = tx + src[i] * sx;
                  dest[i + 1] = ty + src[i + 1] * sy;
               }
               return dest;
            }
            function _rescaleAndSwap(src, tx, ty, sx, sy) {
               var dest = new Float64Array(src.length);
               for (var i = 0, ii = src.length; i < ii; i += 2) {
                  dest[i] = tx + src[i + 1] * sx;
                  dest[i + 1] = ty + src[i] * sy;
               }
               return dest;
            }
            function _computeMinMax(isLTR) {
               var outline = _classPrivateFieldGet(_outline2, this);
               var lastX = outline[4];
               var lastY = outline[5];
               var minX = lastX;
               var minY = lastY;
               var maxX = lastX;
               var maxY = lastY;
               var lastPointX = lastX;
               var lastPointY = lastY;
               var ltrCallback = isLTR ? Math.max : Math.min;
               for (var i = 6, ii = outline.length; i < ii; i += 6) {
                  if (isNaN(outline[i])) {
                     minX = Math.min(minX, outline[i + 4]);
                     minY = Math.min(minY, outline[i + 5]);
                     maxX = Math.max(maxX, outline[i + 4]);
                     maxY = Math.max(maxY, outline[i + 5]);
                     if (lastPointY < outline[i + 5]) {
                        lastPointX = outline[i + 4];
                        lastPointY = outline[i + 5];
                     } else if (lastPointY === outline[i + 5]) {
                        lastPointX = ltrCallback(lastPointX, outline[i + 4]);
                     }
                  } else {
                     var _shared_util_js__WEBP4;
                     var bbox = (_shared_util_js__WEBP4 =
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.Util).bezierBoundingBox.apply(
                        _shared_util_js__WEBP4,
                        [lastX, lastY].concat(
                           _toConsumableArray(outline.slice(i, i + 6)),
                        ),
                     );
                     minX = Math.min(minX, bbox[0]);
                     minY = Math.min(minY, bbox[1]);
                     maxX = Math.max(maxX, bbox[2]);
                     maxY = Math.max(maxY, bbox[3]);
                     if (lastPointY < bbox[3]) {
                        lastPointX = bbox[2];
                        lastPointY = bbox[3];
                     } else if (lastPointY === bbox[3]) {
                        lastPointX = ltrCallback(lastPointX, bbox[2]);
                     }
                  }
                  lastX = outline[i + 4];
                  lastY = outline[i + 5];
               }
               var x = minX - _classPrivateFieldGet(_innerMargin2, this),
                  y = minY - _classPrivateFieldGet(_innerMargin2, this),
                  width =
                     maxX -
                     minX +
                     2 * _classPrivateFieldGet(_innerMargin2, this),
                  height =
                     maxY -
                     minY +
                     2 * _classPrivateFieldGet(_innerMargin2, this);
               _classPrivateFieldSet(_bbox2, this, {
                  x: x,
                  y: y,
                  width: width,
                  height: height,
                  lastPoint: [lastPointX, lastPointY],
               });
            }
         },
         /***/ 362: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ EditorToolbar: function EditorToolbar() {
                  return /* binding */ _EditorToolbar;
               },
               /* harmony export */ HighlightToolbar:
                  function HighlightToolbar() {
                     return /* binding */ _HighlightToolbar;
                  } /* harmony export */,
            });
            /* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(419);
            var _toolbar = /*#__PURE__*/ new WeakMap();
            var _colorPicker2 = /*#__PURE__*/ new WeakMap();
            var _editor6 = /*#__PURE__*/ new WeakMap();
            var _buttons = /*#__PURE__*/ new WeakMap();
            var _EditorToolbar_brand = /*#__PURE__*/ new WeakSet();
            var _EditorToolbar = /*#__PURE__*/ (function () {
               function _EditorToolbar(editor) {
                  _classCallCheck(this, _EditorToolbar);
                  _classPrivateMethodInitSpec(this, _EditorToolbar_brand);
                  _classPrivateFieldInitSpec(this, _toolbar, null);
                  _classPrivateFieldInitSpec(this, _colorPicker2, null);
                  _classPrivateFieldInitSpec(this, _editor6, void 0);
                  _classPrivateFieldInitSpec(this, _buttons, null);
                  _classPrivateFieldSet(_editor6, this, editor);
               }
               return _createClass(_EditorToolbar, [
                  {
                     key: "render",
                     value: function render() {
                        var editToolbar = _classPrivateFieldSet(
                           _toolbar,
                           this,
                           document.createElement("div"),
                        );
                        editToolbar.className = "editToolbar";
                        editToolbar.setAttribute("role", "toolbar");
                        editToolbar.addEventListener(
                           "contextmenu",
                           _display_utils_js__WEBPACK_IMPORTED_MODULE_0__.noContextMenu,
                        );
                        editToolbar.addEventListener(
                           "pointerdown",
                           _pointerDown2,
                        );
                        var buttons = _classPrivateFieldSet(
                           _buttons,
                           this,
                           document.createElement("div"),
                        );
                        buttons.className = "buttons";
                        editToolbar.append(buttons);
                        var position = _classPrivateFieldGet(
                           _editor6,
                           this,
                        ).toolbarPosition;
                        if (position) {
                           var style = editToolbar.style;
                           var x =
                              _classPrivateFieldGet(_editor6, this)._uiManager
                                 .direction === "ltr"
                                 ? 1 - position[0]
                                 : position[0];
                           style.insetInlineEnd = "".concat(100 * x, "%");
                           style.top = "calc(".concat(
                              100 * position[1],
                              "% + var(--editor-toolbar-vert-offset))",
                           );
                        }
                        _assertClassBrand(
                           _EditorToolbar_brand,
                           this,
                           _addDeleteButton,
                        ).call(this);
                        return editToolbar;
                     },
                  },
                  {
                     key: "hide",
                     value: function hide() {
                        var _classPrivateFieldGet80;
                        _classPrivateFieldGet(_toolbar, this).classList.add(
                           "hidden",
                        );
                        (_classPrivateFieldGet80 = _classPrivateFieldGet(
                           _colorPicker2,
                           this,
                        )) === null ||
                           _classPrivateFieldGet80 === void 0 ||
                           _classPrivateFieldGet80.hideDropdown();
                     },
                  },
                  {
                     key: "show",
                     value: function show() {
                        _classPrivateFieldGet(_toolbar, this).classList.remove(
                           "hidden",
                        );
                     },
                  },
                  {
                     key: "addAltTextButton",
                     value: function addAltTextButton(button) {
                        _assertClassBrand(
                           _EditorToolbar_brand,
                           this,
                           _addListenersToElement,
                        ).call(this, button);
                        _classPrivateFieldGet(_buttons, this).prepend(
                           button,
                           _classPrivateGetter(
                              _EditorToolbar_brand,
                              this,
                              _get_divider,
                           ),
                        );
                     },
                  },
                  {
                     key: "addColorPicker",
                     value: function addColorPicker(colorPicker) {
                        _classPrivateFieldSet(_colorPicker2, this, colorPicker);
                        var button = colorPicker.renderButton();
                        _assertClassBrand(
                           _EditorToolbar_brand,
                           this,
                           _addListenersToElement,
                        ).call(this, button);
                        _classPrivateFieldGet(_buttons, this).prepend(
                           button,
                           _classPrivateGetter(
                              _EditorToolbar_brand,
                              this,
                              _get_divider,
                           ),
                        );
                     },
                  },
                  {
                     key: "remove",
                     value: function remove() {
                        var _classPrivateFieldGet81;
                        _classPrivateFieldGet(_toolbar, this).remove();
                        (_classPrivateFieldGet81 = _classPrivateFieldGet(
                           _colorPicker2,
                           this,
                        )) === null ||
                           _classPrivateFieldGet81 === void 0 ||
                           _classPrivateFieldGet81.destroy();
                        _classPrivateFieldSet(_colorPicker2, this, null);
                     },
                  },
               ]);
            })();
            function _pointerDown2(e) {
               e.stopPropagation();
            }
            function _focusIn(e) {
               _classPrivateFieldGet(_editor6, this)._focusEventsAllowed =
                  false;
               e.preventDefault();
               e.stopPropagation();
            }
            function _focusOut(e) {
               _classPrivateFieldGet(_editor6, this)._focusEventsAllowed = true;
               e.preventDefault();
               e.stopPropagation();
            }
            function _addListenersToElement(element) {
               element.addEventListener(
                  "focusin",
                  _assertClassBrand(_EditorToolbar_brand, this, _focusIn).bind(
                     this,
                  ),
                  { capture: true },
               );
               element.addEventListener(
                  "focusout",
                  _assertClassBrand(_EditorToolbar_brand, this, _focusOut).bind(
                     this,
                  ),
                  { capture: true },
               );
               element.addEventListener(
                  "contextmenu",
                  _display_utils_js__WEBPACK_IMPORTED_MODULE_0__.noContextMenu,
               );
            }
            function _addDeleteButton() {
               var _this92 = this;
               var button = document.createElement("button");
               button.className = "delete";
               button.tabIndex = 0;
               button.setAttribute(
                  "data-l10n-id",
                  "pdfjs-editor-remove-".concat(
                     _classPrivateFieldGet(_editor6, this).editorType,
                     "-button",
                  ),
               );
               _assertClassBrand(
                  _EditorToolbar_brand,
                  this,
                  _addListenersToElement,
               ).call(this, button);
               button.addEventListener("click", function (e) {
                  _classPrivateFieldGet(_editor6, _this92)._uiManager[
                     "delete"
                  ]();
               });
               _classPrivateFieldGet(_buttons, this).append(button);
            }
            function _get_divider(_this91) {
               var divider = document.createElement("div");
               divider.className = "divider";
               return divider;
            }
            var _buttons2 = /*#__PURE__*/ new WeakMap();
            var _toolbar2 = /*#__PURE__*/ new WeakMap();
            var _uiManager4 = /*#__PURE__*/ new WeakMap();
            var _HighlightToolbar_brand = /*#__PURE__*/ new WeakSet();
            var _HighlightToolbar = /*#__PURE__*/ (function () {
               function _HighlightToolbar(uiManager) {
                  _classCallCheck(this, _HighlightToolbar);
                  _classPrivateMethodInitSpec(this, _HighlightToolbar_brand);
                  _classPrivateFieldInitSpec(this, _buttons2, null);
                  _classPrivateFieldInitSpec(this, _toolbar2, null);
                  _classPrivateFieldInitSpec(this, _uiManager4, void 0);
                  _classPrivateFieldSet(_uiManager4, this, uiManager);
               }
               return _createClass(_HighlightToolbar, [
                  {
                     key: "show",
                     value: function show(parent, boxes, isLTR) {
                        var _assertClassBrand$cal8 = _assertClassBrand(
                              _HighlightToolbar_brand,
                              this,
                              _getLastPoint,
                           ).call(this, boxes, isLTR),
                           _assertClassBrand$cal9 = _slicedToArray(
                              _assertClassBrand$cal8,
                              2,
                           ),
                           x = _assertClassBrand$cal9[0],
                           y = _assertClassBrand$cal9[1];
                        var _ref99 =
                              _classPrivateFieldGet(_toolbar2, this) ||
                              _classPrivateFieldSet(
                                 _toolbar2,
                                 this,
                                 _assertClassBrand(
                                    _HighlightToolbar_brand,
                                    this,
                                    _render3,
                                 ).call(this),
                              ),
                           style = _ref99.style;
                        parent.append(_classPrivateFieldGet(_toolbar2, this));
                        style.insetInlineEnd = "".concat(100 * x, "%");
                        style.top = "calc(".concat(
                           100 * y,
                           "% + var(--editor-toolbar-vert-offset))",
                        );
                     },
                  },
                  {
                     key: "hide",
                     value: function hide() {
                        _classPrivateFieldGet(_toolbar2, this).remove();
                     },
                  },
               ]);
            })();
            /***/ function _render3() {
               var editToolbar = _classPrivateFieldSet(
                  _toolbar2,
                  this,
                  document.createElement("div"),
               );
               editToolbar.className = "editToolbar";
               editToolbar.setAttribute("role", "toolbar");
               editToolbar.addEventListener(
                  "contextmenu",
                  _display_utils_js__WEBPACK_IMPORTED_MODULE_0__.noContextMenu,
               );
               var buttons = _classPrivateFieldSet(
                  _buttons2,
                  this,
                  document.createElement("div"),
               );
               buttons.className = "buttons";
               editToolbar.append(buttons);
               _assertClassBrand(
                  _HighlightToolbar_brand,
                  this,
                  _addHighlightButton,
               ).call(this);
               return editToolbar;
            }
            function _getLastPoint(boxes, isLTR) {
               var lastY = 0;
               var lastX = 0;
               var _iterator102 = _createForOfIteratorHelper(boxes),
                  _step102;
               try {
                  for (
                     _iterator102.s();
                     !(_step102 = _iterator102.n()).done;

                  ) {
                     var box = _step102.value;
                     var y = box.y + box.height;
                     if (y < lastY) {
                        continue;
                     }
                     var x = box.x + (isLTR ? box.width : 0);
                     if (y > lastY) {
                        lastX = x;
                        lastY = y;
                        continue;
                     }
                     if (isLTR) {
                        if (x > lastX) {
                           lastX = x;
                        }
                     } else if (x < lastX) {
                        lastX = x;
                     }
                  }
               } catch (err) {
                  _iterator102.e(err);
               } finally {
                  _iterator102.f();
               }
               return [isLTR ? 1 - lastX : lastX, lastY];
            }
            function _addHighlightButton() {
               var _this93 = this;
               var button = document.createElement("button");
               button.className = "highlightButton";
               button.tabIndex = 0;
               button.setAttribute(
                  "data-l10n-id",
                  "pdfjs-highlight-floating-button1",
               );
               var span = document.createElement("span");
               button.append(span);
               span.className = "visuallyHidden";
               span.setAttribute(
                  "data-l10n-id",
                  "pdfjs-highlight-floating-button-label",
               );
               button.addEventListener(
                  "contextmenu",
                  _display_utils_js__WEBPACK_IMPORTED_MODULE_0__.noContextMenu,
               );
               button.addEventListener("click", function () {
                  _classPrivateFieldGet(
                     _uiManager4,
                     _this93,
                  ).highlightSelection("floating_button");
               });
               _classPrivateFieldGet(_buttons2, this).append(button);
            }
         },
         /***/ 830: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            var _ImageManager;
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ AnnotationEditorUIManager:
                  function AnnotationEditorUIManager() {
                     return /* binding */ _AnnotationEditorUIManager;
                  },
               /* harmony export */ ColorManager: function ColorManager() {
                  return /* binding */ _ColorManager;
               },
               /* harmony export */ KeyboardManager:
                  function KeyboardManager() {
                     return /* binding */ _KeyboardManager;
                  },
               /* harmony export */ bindEvents: function bindEvents() {
                  return /* binding */ _bindEvents;
               },
               /* harmony export */ opacityToHex: function opacityToHex() {
                  return /* binding */ _opacityToHex;
               } /* harmony export */,
            });
            /* unused harmony export CommandManager */ /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(292);
            /* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_1__ =
               __webpack_require__(419);
            /* harmony import */ var _toolbar_js__WEBPACK_IMPORTED_MODULE_2__ =
               __webpack_require__(362);
            function _bindEvents(obj, element, names) {
               var _iterator103 = _createForOfIteratorHelper(names),
                  _step103;
               try {
                  for (
                     _iterator103.s();
                     !(_step103 = _iterator103.n()).done;

                  ) {
                     var name = _step103.value;
                     element.addEventListener(name, obj[name].bind(obj));
                  }
               } catch (err) {
                  _iterator103.e(err);
               } finally {
                  _iterator103.f();
               }
            }
            function _opacityToHex(opacity) {
               return Math.round(Math.min(255, Math.max(1, 255 * opacity)))
                  .toString(16)
                  .padStart(2, "0");
            }
            var _id6 = /*#__PURE__*/ new WeakMap();
            var IdManager = /*#__PURE__*/ (function () {
               function IdManager() {
                  _classCallCheck(this, IdManager);
                  _classPrivateFieldInitSpec(this, _id6, 0);
               }
               return _createClass(IdManager, [
                  {
                     key: "id",
                     get: function get() {
                        var _this$id7, _this$id8;
                        return ""
                           .concat(
                              _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorPrefix,
                           )
                           .concat(
                              (_classPrivateFieldSet(
                                 _id6,
                                 this,
                                 ((_this$id7 = _classPrivateFieldGet(
                                    _id6,
                                    this,
                                 )),
                                 (_this$id8 = _this$id7++),
                                 _this$id7),
                              ),
                              _this$id8),
                           );
                     },
                  },
               ]);
            })();
            var _baseId = /*#__PURE__*/ new WeakMap();
            var _id7 = /*#__PURE__*/ new WeakMap();
            var _cache2 = /*#__PURE__*/ new WeakMap();
            var _ImageManager_brand = /*#__PURE__*/ new WeakSet();
            var ImageManager = /*#__PURE__*/ (function () {
               function ImageManager() {
                  _classCallCheck(this, ImageManager);
                  _classPrivateMethodInitSpec(this, _ImageManager_brand);
                  _classPrivateFieldInitSpec(
                     this,
                     _baseId,
                     (0,
                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.getUuid)(),
                  );
                  _classPrivateFieldInitSpec(this, _id7, 0);
                  _classPrivateFieldInitSpec(this, _cache2, null);
               }
               return _createClass(
                  ImageManager,
                  [
                     {
                        key: "getFromFile",
                        value: (function () {
                           var _getFromFile = _asyncToGenerator(
                              /*#__PURE__*/ _regenerator().m(
                                 function _callee16(file) {
                                    var lastModified, name, size, type;
                                    return _regenerator().w(
                                       function (_context17) {
                                          while (1)
                                             switch (_context17.n) {
                                                case 0:
                                                   ((lastModified =
                                                      file.lastModified),
                                                      (name = file.name),
                                                      (size = file.size),
                                                      (type = file.type));
                                                   return _context17.a(
                                                      2,
                                                      _assertClassBrand(
                                                         _ImageManager_brand,
                                                         this,
                                                         _get2,
                                                      ).call(
                                                         this,
                                                         ""
                                                            .concat(
                                                               lastModified,
                                                               "_",
                                                            )
                                                            .concat(name, "_")
                                                            .concat(size, "_")
                                                            .concat(type),
                                                         file,
                                                      ),
                                                   );
                                             }
                                       },
                                       _callee16,
                                       this,
                                    );
                                 },
                              ),
                           );
                           function getFromFile(_x16) {
                              return _getFromFile.apply(this, arguments);
                           }
                           return getFromFile;
                        })(),
                     },
                     {
                        key: "getFromUrl",
                        value: (function () {
                           var _getFromUrl = _asyncToGenerator(
                              /*#__PURE__*/ _regenerator().m(
                                 function _callee17(url) {
                                    return _regenerator().w(
                                       function (_context18) {
                                          while (1)
                                             switch (_context18.n) {
                                                case 0:
                                                   return _context18.a(
                                                      2,
                                                      _assertClassBrand(
                                                         _ImageManager_brand,
                                                         this,
                                                         _get2,
                                                      ).call(this, url, url),
                                                   );
                                             }
                                       },
                                       _callee17,
                                       this,
                                    );
                                 },
                              ),
                           );
                           function getFromUrl(_x17) {
                              return _getFromUrl.apply(this, arguments);
                           }
                           return getFromUrl;
                        })(),
                     },
                     {
                        key: "getFromId",
                        value: (function () {
                           var _getFromId = _asyncToGenerator(
                              /*#__PURE__*/ _regenerator().m(
                                 function _callee18(id) {
                                    var data;
                                    return _regenerator().w(
                                       function (_context19) {
                                          while (1)
                                             switch (_context19.n) {
                                                case 0:
                                                   _classPrivateFieldGet(
                                                      _cache2,
                                                      this,
                                                   ) ||
                                                      _classPrivateFieldSet(
                                                         _cache2,
                                                         this,
                                                         new Map(),
                                                      );
                                                   data = _classPrivateFieldGet(
                                                      _cache2,
                                                      this,
                                                   ).get(id);
                                                   if (data) {
                                                      _context19.n = 1;
                                                      break;
                                                   }
                                                   return _context19.a(2, null);
                                                case 1:
                                                   if (!data.bitmap) {
                                                      _context19.n = 2;
                                                      break;
                                                   }
                                                   data.refCounter += 1;
                                                   return _context19.a(2, data);
                                                case 2:
                                                   if (!data.file) {
                                                      _context19.n = 3;
                                                      break;
                                                   }
                                                   return _context19.a(
                                                      2,
                                                      this.getFromFile(
                                                         data.file,
                                                      ),
                                                   );
                                                case 3:
                                                   return _context19.a(
                                                      2,
                                                      this.getFromUrl(data.url),
                                                   );
                                             }
                                       },
                                       _callee18,
                                       this,
                                    );
                                 },
                              ),
                           );
                           function getFromId(_x18) {
                              return _getFromId.apply(this, arguments);
                           }
                           return getFromId;
                        })(),
                     },
                     {
                        key: "getSvgUrl",
                        value: function getSvgUrl(id) {
                           var data = _classPrivateFieldGet(_cache2, this).get(
                              id,
                           );
                           if (
                              !(data !== null && data !== void 0 && data.isSvg)
                           ) {
                              return null;
                           }
                           return data.svgUrl;
                        },
                     },
                     {
                        key: "deleteId",
                        value: function deleteId(id) {
                           _classPrivateFieldGet(_cache2, this) ||
                              _classPrivateFieldSet(_cache2, this, new Map());
                           var data = _classPrivateFieldGet(_cache2, this).get(
                              id,
                           );
                           if (!data) {
                              return;
                           }
                           data.refCounter -= 1;
                           if (data.refCounter !== 0) {
                              return;
                           }
                           data.bitmap = null;
                        },
                     },
                     {
                        key: "isValidId",
                        value: function isValidId(id) {
                           return id.startsWith(
                              "image_".concat(
                                 _classPrivateFieldGet(_baseId, this),
                                 "_",
                              ),
                           );
                        },
                     },
                  ],
                  [
                     {
                        key: "_isSVGFittingCanvas",
                        get: function get() {
                           var svg =
                              'data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>';
                           var canvas = new OffscreenCanvas(1, 3);
                           var ctx = canvas.getContext("2d");
                           var image = new Image();
                           image.src = svg;
                           var promise = image.decode().then(function () {
                              ctx.drawImage(image, 0, 0, 1, 1, 0, 0, 1, 3);
                              return (
                                 new Uint32Array(
                                    ctx.getImageData(0, 0, 1, 1).data.buffer,
                                 )[0] === 0
                              );
                           });
                           return (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                              this,
                              "_isSVGFittingCanvas",
                              promise,
                           );
                        },
                     },
                  ],
               );
            })();
            _ImageManager = ImageManager;
            function _get2(_x20, _x21) {
               return _get3.apply(this, arguments);
            }
            function _get3() {
               _get3 = _asyncToGenerator(
                  /*#__PURE__*/ _regenerator().m(
                     function _callee21(key, rawData) {
                        var _data2;
                        var data,
                           _this$id9,
                           _this$id0,
                           image,
                           mustRemoveAspectRatioPromise,
                           fileReader,
                           imageElement,
                           imagePromise,
                           _t12;
                        return _regenerator().w(
                           function (_context22) {
                              while (1)
                                 switch ((_context22.p = _context22.n)) {
                                    case 0:
                                       _classPrivateFieldGet(_cache2, this) ||
                                          _classPrivateFieldSet(
                                             _cache2,
                                             this,
                                             new Map(),
                                          );
                                       data = _classPrivateFieldGet(
                                          _cache2,
                                          this,
                                       ).get(key);
                                       if (!(data === null)) {
                                          _context22.n = 1;
                                          break;
                                       }
                                       return _context22.a(2, null);
                                    case 1:
                                       if (
                                          !(
                                             (_data2 = data) !== null &&
                                             _data2 !== void 0 &&
                                             _data2.bitmap
                                          )
                                       ) {
                                          _context22.n = 2;
                                          break;
                                       }
                                       data.refCounter += 1;
                                       return _context22.a(2, data);
                                    case 2:
                                       _context22.p = 2;
                                       data ||
                                          (data = {
                                             bitmap: null,
                                             id: "image_"
                                                .concat(
                                                   _classPrivateFieldGet(
                                                      _baseId,
                                                      this,
                                                   ),
                                                   "_",
                                                )
                                                .concat(
                                                   (_classPrivateFieldSet(
                                                      _id7,
                                                      this,
                                                      ((_this$id9 =
                                                         _classPrivateFieldGet(
                                                            _id7,
                                                            this,
                                                         )),
                                                      (_this$id0 = _this$id9++),
                                                      _this$id9),
                                                   ),
                                                   _this$id0),
                                                ),
                                             refCounter: 0,
                                             isSvg: false,
                                          });
                                       if (!(typeof rawData === "string")) {
                                          _context22.n = 4;
                                          break;
                                       }
                                       data.url = rawData;
                                       _context22.n = 3;
                                       return (0,
                                       _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.fetchData)(
                                          rawData,
                                          "blob",
                                       );
                                    case 3:
                                       image = _context22.v;
                                       _context22.n = 5;
                                       break;
                                    case 4:
                                       image = data.file = rawData;
                                    case 5:
                                       if (!(image.type === "image/svg+xml")) {
                                          _context22.n = 7;
                                          break;
                                       }
                                       mustRemoveAspectRatioPromise =
                                          _ImageManager._isSVGFittingCanvas;
                                       fileReader = new FileReader();
                                       imageElement = new Image();
                                       imagePromise = new Promise(function (
                                          resolve,
                                          reject,
                                       ) {
                                          imageElement.onload = function () {
                                             data.bitmap = imageElement;
                                             data.isSvg = true;
                                             resolve();
                                          };
                                          fileReader.onload =
                                             /*#__PURE__*/ _asyncToGenerator(
                                                /*#__PURE__*/ _regenerator().m(
                                                   function _callee20() {
                                                      var url, _t11;
                                                      return _regenerator().w(
                                                         function (_context21) {
                                                            while (1)
                                                               switch (
                                                                  _context21.n
                                                               ) {
                                                                  case 0:
                                                                     url =
                                                                        data.svgUrl =
                                                                           fileReader.result;
                                                                     _context21.n = 1;
                                                                     return mustRemoveAspectRatioPromise;
                                                                  case 1:
                                                                     if (
                                                                        !_context21.v
                                                                     ) {
                                                                        _context21.n = 2;
                                                                        break;
                                                                     }
                                                                     _t11 =
                                                                        "".concat(
                                                                           url,
                                                                           "#svgView(preserveAspectRatio(none))",
                                                                        );
                                                                     _context21.n = 3;
                                                                     break;
                                                                  case 2:
                                                                     _t11 = url;
                                                                  case 3:
                                                                     imageElement.src =
                                                                        _t11;
                                                                  case 4:
                                                                     return _context21.a(
                                                                        2,
                                                                     );
                                                               }
                                                         },
                                                         _callee20,
                                                      );
                                                   },
                                                ),
                                             );
                                          imageElement.onerror =
                                             fileReader.onerror = reject;
                                       });
                                       fileReader.readAsDataURL(image);
                                       _context22.n = 6;
                                       return imagePromise;
                                    case 6:
                                       _context22.n = 9;
                                       break;
                                    case 7:
                                       _context22.n = 8;
                                       return createImageBitmap(image);
                                    case 8:
                                       data.bitmap = _context22.v;
                                    case 9:
                                       data.refCounter = 1;
                                       _context22.n = 11;
                                       break;
                                    case 10:
                                       _context22.p = 10;
                                       _t12 = _context22.v;
                                       console.error(_t12);
                                       data = null;
                                    case 11:
                                       _classPrivateFieldGet(_cache2, this).set(
                                          key,
                                          data,
                                       );
                                       if (data) {
                                          _classPrivateFieldGet(
                                             _cache2,
                                             this,
                                          ).set(data.id, data);
                                       }
                                       return _context22.a(2, data);
                                 }
                           },
                           _callee21,
                           this,
                           [[2, 10]],
                        );
                     },
                  ),
               );
               return _get3.apply(this, arguments);
            }
            var _commands = /*#__PURE__*/ new WeakMap();
            var _locked = /*#__PURE__*/ new WeakMap();
            var _maxSize = /*#__PURE__*/ new WeakMap();
            var _position = /*#__PURE__*/ new WeakMap();
            var CommandManager = /*#__PURE__*/ (function () {
               function CommandManager() {
                  var maxSize =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : 128;
                  _classCallCheck(this, CommandManager);
                  _classPrivateFieldInitSpec(this, _commands, []);
                  _classPrivateFieldInitSpec(this, _locked, false);
                  _classPrivateFieldInitSpec(this, _maxSize, void 0);
                  _classPrivateFieldInitSpec(this, _position, -1);
                  _classPrivateFieldSet(_maxSize, this, maxSize);
               }
               return _createClass(CommandManager, [
                  {
                     key: "add",
                     value: function add(_ref100) {
                        var cmd = _ref100.cmd,
                           undo = _ref100.undo,
                           post = _ref100.post,
                           mustExec = _ref100.mustExec,
                           _ref100$type = _ref100.type,
                           type = _ref100$type === void 0 ? NaN : _ref100$type,
                           _ref100$overwriteIfSa = _ref100.overwriteIfSameType,
                           overwriteIfSameType =
                              _ref100$overwriteIfSa === void 0
                                 ? false
                                 : _ref100$overwriteIfSa,
                           _ref100$keepUndo = _ref100.keepUndo,
                           keepUndo =
                              _ref100$keepUndo === void 0
                                 ? false
                                 : _ref100$keepUndo;
                        if (mustExec) {
                           cmd();
                        }
                        if (_classPrivateFieldGet(_locked, this)) {
                           return;
                        }
                        var save = {
                           cmd: cmd,
                           undo: undo,
                           post: post,
                           type: type,
                        };
                        if (_classPrivateFieldGet(_position, this) === -1) {
                           if (
                              _classPrivateFieldGet(_commands, this).length > 0
                           ) {
                              _classPrivateFieldGet(_commands, this).length = 0;
                           }
                           _classPrivateFieldSet(_position, this, 0);
                           _classPrivateFieldGet(_commands, this).push(save);
                           return;
                        }
                        if (
                           overwriteIfSameType &&
                           _classPrivateFieldGet(_commands, this)[
                              _classPrivateFieldGet(_position, this)
                           ].type === type
                        ) {
                           if (keepUndo) {
                              save.undo = _classPrivateFieldGet(
                                 _commands,
                                 this,
                              )[_classPrivateFieldGet(_position, this)].undo;
                           }
                           _classPrivateFieldGet(_commands, this)[
                              _classPrivateFieldGet(_position, this)
                           ] = save;
                           return;
                        }
                        var next = _classPrivateFieldGet(_position, this) + 1;
                        if (next === _classPrivateFieldGet(_maxSize, this)) {
                           _classPrivateFieldGet(_commands, this).splice(0, 1);
                        } else {
                           _classPrivateFieldSet(_position, this, next);
                           if (
                              next <
                              _classPrivateFieldGet(_commands, this).length
                           ) {
                              _classPrivateFieldGet(_commands, this).splice(
                                 next,
                              );
                           }
                        }
                        _classPrivateFieldGet(_commands, this).push(save);
                     },
                  },
                  {
                     key: "undo",
                     value: function undo() {
                        if (_classPrivateFieldGet(_position, this) === -1) {
                           return;
                        }
                        _classPrivateFieldSet(_locked, this, true);
                        var _classPrivateFieldGet82 = _classPrivateFieldGet(
                              _commands,
                              this,
                           )[_classPrivateFieldGet(_position, this)],
                           undo = _classPrivateFieldGet82.undo,
                           post = _classPrivateFieldGet82.post;
                        undo();
                        post === null || post === void 0 || post();
                        _classPrivateFieldSet(_locked, this, false);
                        _classPrivateFieldSet(
                           _position,
                           this,
                           _classPrivateFieldGet(_position, this) - 1,
                        );
                     },
                  },
                  {
                     key: "redo",
                     value: function redo() {
                        if (
                           _classPrivateFieldGet(_position, this) <
                           _classPrivateFieldGet(_commands, this).length - 1
                        ) {
                           _classPrivateFieldSet(
                              _position,
                              this,
                              _classPrivateFieldGet(_position, this) + 1,
                           );
                           _classPrivateFieldSet(_locked, this, true);
                           var _classPrivateFieldGet83 = _classPrivateFieldGet(
                                 _commands,
                                 this,
                              )[_classPrivateFieldGet(_position, this)],
                              cmd = _classPrivateFieldGet83.cmd,
                              post = _classPrivateFieldGet83.post;
                           cmd();
                           post === null || post === void 0 || post();
                           _classPrivateFieldSet(_locked, this, false);
                        }
                     },
                  },
                  {
                     key: "hasSomethingToUndo",
                     value: function hasSomethingToUndo() {
                        return _classPrivateFieldGet(_position, this) !== -1;
                     },
                  },
                  {
                     key: "hasSomethingToRedo",
                     value: function hasSomethingToRedo() {
                        return (
                           _classPrivateFieldGet(_position, this) <
                           _classPrivateFieldGet(_commands, this).length - 1
                        );
                     },
                  },
                  {
                     key: "destroy",
                     value: function destroy() {
                        _classPrivateFieldSet(_commands, this, null);
                     },
                  },
               ]);
            })();
            var _KeyboardManager_brand = /*#__PURE__*/ new WeakSet();
            var _KeyboardManager = /*#__PURE__*/ (function () {
               function _KeyboardManager(callbacks) {
                  _classCallCheck(this, _KeyboardManager);
                  _classPrivateMethodInitSpec(this, _KeyboardManager_brand);
                  this.buffer = [];
                  this.callbacks = new Map();
                  this.allKeys = new Set();
                  var isMac =
                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.FeatureTest
                        .platform.isMac;
                  var _iterator104 = _createForOfIteratorHelper(callbacks),
                     _step104;
                  try {
                     for (
                        _iterator104.s();
                        !(_step104 = _iterator104.n()).done;

                     ) {
                        var _step104$value = _slicedToArray(_step104.value, 3),
                           keys = _step104$value[0],
                           callback = _step104$value[1],
                           _step104$value$ = _step104$value[2],
                           options =
                              _step104$value$ === void 0 ? {} : _step104$value$;
                        var _iterator105 = _createForOfIteratorHelper(keys),
                           _step105;
                        try {
                           for (
                              _iterator105.s();
                              !(_step105 = _iterator105.n()).done;

                           ) {
                              var key = _step105.value;
                              var isMacKey = key.startsWith("mac+");
                              if (isMac && isMacKey) {
                                 this.callbacks.set(key.slice(4), {
                                    callback: callback,
                                    options: options,
                                 });
                                 this.allKeys.add(key.split("+").at(-1));
                              } else if (!isMac && !isMacKey) {
                                 this.callbacks.set(key, {
                                    callback: callback,
                                    options: options,
                                 });
                                 this.allKeys.add(key.split("+").at(-1));
                              }
                           }
                        } catch (err) {
                           _iterator105.e(err);
                        } finally {
                           _iterator105.f();
                        }
                     }
                  } catch (err) {
                     _iterator104.e(err);
                  } finally {
                     _iterator104.f();
                  }
               }
               return _createClass(_KeyboardManager, [
                  {
                     key: "exec",
                     value: function exec(self, event) {
                        if (!this.allKeys.has(event.key)) {
                           return;
                        }
                        var info = this.callbacks.get(
                           _assertClassBrand(
                              _KeyboardManager_brand,
                              this,
                              _serialize,
                           ).call(this, event),
                        );
                        if (!info) {
                           return;
                        }
                        var callback = info.callback,
                           _info$options = info.options,
                           _info$options$bubbles = _info$options.bubbles,
                           bubbles =
                              _info$options$bubbles === void 0
                                 ? false
                                 : _info$options$bubbles,
                           _info$options$args = _info$options.args,
                           args =
                              _info$options$args === void 0
                                 ? []
                                 : _info$options$args,
                           _info$options$checker = _info$options.checker,
                           checker =
                              _info$options$checker === void 0
                                 ? null
                                 : _info$options$checker;
                        if (checker && !checker(self, event)) {
                           return;
                        }
                        callback.bind.apply(
                           callback,
                           [self].concat(_toConsumableArray(args), [event]),
                        )();
                        if (!bubbles) {
                           event.stopPropagation();
                           event.preventDefault();
                        }
                     },
                  },
               ]);
            })();
            function _serialize(event) {
               if (event.altKey) {
                  this.buffer.push("alt");
               }
               if (event.ctrlKey) {
                  this.buffer.push("ctrl");
               }
               if (event.metaKey) {
                  this.buffer.push("meta");
               }
               if (event.shiftKey) {
                  this.buffer.push("shift");
               }
               this.buffer.push(event.key);
               var str = this.buffer.join("+");
               this.buffer.length = 0;
               return str;
            }
            var _ColorManager = /*#__PURE__*/ (function () {
               function _ColorManager() {
                  _classCallCheck(this, _ColorManager);
               }
               return _createClass(_ColorManager, [
                  {
                     key: "_colors",
                     get: function get() {
                        var colors = new Map([
                           ["CanvasText", null],
                           ["Canvas", null],
                        ]);
                        (0,
                        _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.getColorValues)(
                           colors,
                        );
                        return (0,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                           this,
                           "_colors",
                           colors,
                        );
                     },
                  },
                  {
                     key: "convert",
                     value: function convert(color) {
                        var rgb = (0,
                        _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.getRGB)(
                           color,
                        );
                        if (
                           !window.matchMedia("(forced-colors: active)").matches
                        ) {
                           return rgb;
                        }
                        var _iterator106 = _createForOfIteratorHelper(
                              this._colors,
                           ),
                           _step106;
                        try {
                           for (
                              _iterator106.s();
                              !(_step106 = _iterator106.n()).done;

                           ) {
                              var _step106$value = _slicedToArray(
                                    _step106.value,
                                    2,
                                 ),
                                 name = _step106$value[0],
                                 RGB = _step106$value[1];
                              if (
                                 RGB.every(function (x, i) {
                                    return x === rgb[i];
                                 })
                              ) {
                                 return _ColorManager._colorsMapping.get(name);
                              }
                           }
                        } catch (err) {
                           _iterator106.e(err);
                        } finally {
                           _iterator106.f();
                        }
                        return rgb;
                     },
                  },
                  {
                     key: "getHexCode",
                     value: function getHexCode(name) {
                        var _shared_util_js__WEBP5;
                        var rgb = this._colors.get(name);
                        if (!rgb) {
                           return name;
                        }
                        return (_shared_util_js__WEBP5 =
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.Util).makeHexColor.apply(
                           _shared_util_js__WEBP5,
                           _toConsumableArray(rgb),
                        );
                     },
                  },
               ]);
            })();
            _defineProperty(
               _ColorManager,
               "_colorsMapping",
               new Map([
                  ["CanvasText", [0, 0, 0]],
                  ["Canvas", [255, 255, 255]],
               ]),
            );
            var _activeEditor = /*#__PURE__*/ new WeakMap();
            var _allEditors = /*#__PURE__*/ new WeakMap();
            var _allLayers = /*#__PURE__*/ new WeakMap();
            var _altTextManager = /*#__PURE__*/ new WeakMap();
            var _annotationStorage = /*#__PURE__*/ new WeakMap();
            var _changedExistingAnnotations = /*#__PURE__*/ new WeakMap();
            var _commandManager = /*#__PURE__*/ new WeakMap();
            var _currentPageIndex = /*#__PURE__*/ new WeakMap();
            var _deletedAnnotationsElementIds = /*#__PURE__*/ new WeakMap();
            var _draggingEditors = /*#__PURE__*/ new WeakMap();
            var _editorTypes2 = /*#__PURE__*/ new WeakMap();
            var _editorsToRescale = /*#__PURE__*/ new WeakMap();
            var _enableHighlightFloatingButton = /*#__PURE__*/ new WeakMap();
            var _filterFactory = /*#__PURE__*/ new WeakMap();
            var _focusMainContainerTimeoutId = /*#__PURE__*/ new WeakMap();
            var _highlightColors = /*#__PURE__*/ new WeakMap();
            var _highlightWhenShiftUp = /*#__PURE__*/ new WeakMap();
            var _highlightToolbar = /*#__PURE__*/ new WeakMap();
            var _idManager = /*#__PURE__*/ new WeakMap();
            var _isEnabled = /*#__PURE__*/ new WeakMap();
            var _isWaiting = /*#__PURE__*/ new WeakMap();
            var _lastActiveElement = /*#__PURE__*/ new WeakMap();
            var _mainHighlightColorPicker = /*#__PURE__*/ new WeakMap();
            var _mlManager = /*#__PURE__*/ new WeakMap();
            var _mode = /*#__PURE__*/ new WeakMap();
            var _selectedEditors = /*#__PURE__*/ new WeakMap();
            var _selectedTextNode = /*#__PURE__*/ new WeakMap();
            var _pageColors = /*#__PURE__*/ new WeakMap();
            var _showAllStates = /*#__PURE__*/ new WeakMap();
            var _boundBlur = /*#__PURE__*/ new WeakMap();
            var _boundFocus = /*#__PURE__*/ new WeakMap();
            var _boundCopy = /*#__PURE__*/ new WeakMap();
            var _boundCut = /*#__PURE__*/ new WeakMap();
            var _boundPaste = /*#__PURE__*/ new WeakMap();
            var _boundKeydown2 = /*#__PURE__*/ new WeakMap();
            var _boundKeyup = /*#__PURE__*/ new WeakMap();
            var _boundOnEditingAction = /*#__PURE__*/ new WeakMap();
            var _boundOnPageChanging = /*#__PURE__*/ new WeakMap();
            var _boundOnScaleChanging = /*#__PURE__*/ new WeakMap();
            var _boundSelectionChange = /*#__PURE__*/ new WeakMap();
            var _boundOnRotationChanging = /*#__PURE__*/ new WeakMap();
            var _previousStates = /*#__PURE__*/ new WeakMap();
            var _translation = /*#__PURE__*/ new WeakMap();
            var _translationTimeoutId = /*#__PURE__*/ new WeakMap();
            var _container2 = /*#__PURE__*/ new WeakMap();
            var _viewer = /*#__PURE__*/ new WeakMap();
            var _AnnotationEditorUIManager_brand = /*#__PURE__*/ new WeakSet();
            var _AnnotationEditorUIManager = /*#__PURE__*/ (function () {
               function _AnnotationEditorUIManager(
                  container,
                  viewer,
                  altTextManager,
                  eventBus,
                  pdfDocument,
                  pageColors,
                  highlightColors,
                  enableHighlightFloatingButton,
                  mlManager,
               ) {
                  _classCallCheck(this, _AnnotationEditorUIManager);
                  _classPrivateMethodInitSpec(
                     this,
                     _AnnotationEditorUIManager_brand,
                  );
                  _classPrivateFieldInitSpec(this, _activeEditor, null);
                  _classPrivateFieldInitSpec(this, _allEditors, new Map());
                  _classPrivateFieldInitSpec(this, _allLayers, new Map());
                  _classPrivateFieldInitSpec(this, _altTextManager, null);
                  _classPrivateFieldInitSpec(this, _annotationStorage, null);
                  _classPrivateFieldInitSpec(
                     this,
                     _changedExistingAnnotations,
                     null,
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _commandManager,
                     new CommandManager(),
                  );
                  _classPrivateFieldInitSpec(this, _currentPageIndex, 0);
                  _classPrivateFieldInitSpec(
                     this,
                     _deletedAnnotationsElementIds,
                     new Set(),
                  );
                  _classPrivateFieldInitSpec(this, _draggingEditors, null);
                  _classPrivateFieldInitSpec(this, _editorTypes2, null);
                  _classPrivateFieldInitSpec(
                     this,
                     _editorsToRescale,
                     new Set(),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _enableHighlightFloatingButton,
                     false,
                  );
                  _classPrivateFieldInitSpec(this, _filterFactory, null);
                  _classPrivateFieldInitSpec(
                     this,
                     _focusMainContainerTimeoutId,
                     null,
                  );
                  _classPrivateFieldInitSpec(this, _highlightColors, null);
                  _classPrivateFieldInitSpec(
                     this,
                     _highlightWhenShiftUp,
                     false,
                  );
                  _classPrivateFieldInitSpec(this, _highlightToolbar, null);
                  _classPrivateFieldInitSpec(this, _idManager, new IdManager());
                  _classPrivateFieldInitSpec(this, _isEnabled, false);
                  _classPrivateFieldInitSpec(this, _isWaiting, false);
                  _classPrivateFieldInitSpec(this, _lastActiveElement, null);
                  _classPrivateFieldInitSpec(
                     this,
                     _mainHighlightColorPicker,
                     null,
                  );
                  _classPrivateFieldInitSpec(this, _mlManager, null);
                  _classPrivateFieldInitSpec(
                     this,
                     _mode,
                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                        .AnnotationEditorType.NONE,
                  );
                  _classPrivateFieldInitSpec(this, _selectedEditors, new Set());
                  _classPrivateFieldInitSpec(this, _selectedTextNode, null);
                  _classPrivateFieldInitSpec(this, _pageColors, null);
                  _classPrivateFieldInitSpec(this, _showAllStates, null);
                  _classPrivateFieldInitSpec(
                     this,
                     _boundBlur,
                     this.blur.bind(this),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundFocus,
                     this.focus.bind(this),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundCopy,
                     this.copy.bind(this),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundCut,
                     this.cut.bind(this),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundPaste,
                     this.paste.bind(this),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundKeydown2,
                     this.keydown.bind(this),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundKeyup,
                     this.keyup.bind(this),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundOnEditingAction,
                     this.onEditingAction.bind(this),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundOnPageChanging,
                     this.onPageChanging.bind(this),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundOnScaleChanging,
                     this.onScaleChanging.bind(this),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundSelectionChange,
                     _assertClassBrand(
                        _AnnotationEditorUIManager_brand,
                        this,
                        _selectionChange,
                     ).bind(this),
                  );
                  _classPrivateFieldInitSpec(
                     this,
                     _boundOnRotationChanging,
                     this.onRotationChanging.bind(this),
                  );
                  _classPrivateFieldInitSpec(this, _previousStates, {
                     isEditing: false,
                     isEmpty: true,
                     hasSomethingToUndo: false,
                     hasSomethingToRedo: false,
                     hasSelectedEditor: false,
                     hasSelectedText: false,
                  });
                  _classPrivateFieldInitSpec(this, _translation, [0, 0]);
                  _classPrivateFieldInitSpec(this, _translationTimeoutId, null);
                  _classPrivateFieldInitSpec(this, _container2, null);
                  _classPrivateFieldInitSpec(this, _viewer, null);
                  _classPrivateFieldSet(_container2, this, container);
                  _classPrivateFieldSet(_viewer, this, viewer);
                  _classPrivateFieldSet(_altTextManager, this, altTextManager);
                  this._eventBus = eventBus;
                  this._eventBus._on(
                     "editingaction",
                     _classPrivateFieldGet(_boundOnEditingAction, this),
                  );
                  this._eventBus._on(
                     "pagechanging",
                     _classPrivateFieldGet(_boundOnPageChanging, this),
                  );
                  this._eventBus._on(
                     "scalechanging",
                     _classPrivateFieldGet(_boundOnScaleChanging, this),
                  );
                  this._eventBus._on(
                     "rotationchanging",
                     _classPrivateFieldGet(_boundOnRotationChanging, this),
                  );
                  _assertClassBrand(
                     _AnnotationEditorUIManager_brand,
                     this,
                     _addSelectionListener,
                  ).call(this);
                  _assertClassBrand(
                     _AnnotationEditorUIManager_brand,
                     this,
                     _addKeyboardManager,
                  ).call(this);
                  _classPrivateFieldSet(
                     _annotationStorage,
                     this,
                     pdfDocument.annotationStorage,
                  );
                  _classPrivateFieldSet(
                     _filterFactory,
                     this,
                     pdfDocument.filterFactory,
                  );
                  _classPrivateFieldSet(_pageColors, this, pageColors);
                  _classPrivateFieldSet(
                     _highlightColors,
                     this,
                     highlightColors || null,
                  );
                  _classPrivateFieldSet(
                     _enableHighlightFloatingButton,
                     this,
                     enableHighlightFloatingButton,
                  );
                  _classPrivateFieldSet(_mlManager, this, mlManager || null);
                  this.viewParameters = {
                     realScale:
                        _display_utils_js__WEBPACK_IMPORTED_MODULE_1__
                           .PixelsPerInch.PDF_TO_CSS_UNITS,
                     rotation: 0,
                  };
                  this.isShiftKeyDown = false;
               }
               return _createClass(
                  _AnnotationEditorUIManager,
                  [
                     {
                        key: "destroy",
                        value: function destroy() {
                           var _classPrivateFieldGet84, _classPrivateFieldGet85;
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _removeKeyboardManager,
                           ).call(this);
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _removeFocusManager,
                           ).call(this);
                           this._eventBus._off(
                              "editingaction",
                              _classPrivateFieldGet(
                                 _boundOnEditingAction,
                                 this,
                              ),
                           );
                           this._eventBus._off(
                              "pagechanging",
                              _classPrivateFieldGet(_boundOnPageChanging, this),
                           );
                           this._eventBus._off(
                              "scalechanging",
                              _classPrivateFieldGet(
                                 _boundOnScaleChanging,
                                 this,
                              ),
                           );
                           this._eventBus._off(
                              "rotationchanging",
                              _classPrivateFieldGet(
                                 _boundOnRotationChanging,
                                 this,
                              ),
                           );
                           var _iterator107 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(
                                    _allLayers,
                                    this,
                                 ).values(),
                              ),
                              _step107;
                           try {
                              for (
                                 _iterator107.s();
                                 !(_step107 = _iterator107.n()).done;

                              ) {
                                 var layer = _step107.value;
                                 layer.destroy();
                              }
                           } catch (err) {
                              _iterator107.e(err);
                           } finally {
                              _iterator107.f();
                           }
                           _classPrivateFieldGet(_allLayers, this).clear();
                           _classPrivateFieldGet(_allEditors, this).clear();
                           _classPrivateFieldGet(
                              _editorsToRescale,
                              this,
                           ).clear();
                           _classPrivateFieldSet(_activeEditor, this, null);
                           _classPrivateFieldGet(
                              _selectedEditors,
                              this,
                           ).clear();
                           _classPrivateFieldGet(
                              _commandManager,
                              this,
                           ).destroy();
                           (_classPrivateFieldGet84 = _classPrivateFieldGet(
                              _altTextManager,
                              this,
                           )) === null ||
                              _classPrivateFieldGet84 === void 0 ||
                              _classPrivateFieldGet84.destroy();
                           (_classPrivateFieldGet85 = _classPrivateFieldGet(
                              _highlightToolbar,
                              this,
                           )) === null ||
                              _classPrivateFieldGet85 === void 0 ||
                              _classPrivateFieldGet85.hide();
                           _classPrivateFieldSet(_highlightToolbar, this, null);
                           if (
                              _classPrivateFieldGet(
                                 _focusMainContainerTimeoutId,
                                 this,
                              )
                           ) {
                              clearTimeout(
                                 _classPrivateFieldGet(
                                    _focusMainContainerTimeoutId,
                                    this,
                                 ),
                              );
                              _classPrivateFieldSet(
                                 _focusMainContainerTimeoutId,
                                 this,
                                 null,
                              );
                           }
                           if (
                              _classPrivateFieldGet(_translationTimeoutId, this)
                           ) {
                              clearTimeout(
                                 _classPrivateFieldGet(
                                    _translationTimeoutId,
                                    this,
                                 ),
                              );
                              _classPrivateFieldSet(
                                 _translationTimeoutId,
                                 this,
                                 null,
                              );
                           }
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _removeSelectionListener,
                           ).call(this);
                        },
                     },
                     {
                        key: "mlGuess",
                        value: (function () {
                           var _mlGuess = _asyncToGenerator(
                              /*#__PURE__*/ _regenerator().m(
                                 function _callee19(data) {
                                    var _classPrivateFieldGet86;
                                    return _regenerator().w(
                                       function (_context20) {
                                          while (1)
                                             switch (_context20.n) {
                                                case 0:
                                                   return _context20.a(
                                                      2,
                                                      ((_classPrivateFieldGet86 =
                                                         _classPrivateFieldGet(
                                                            _mlManager,
                                                            this,
                                                         )) === null ||
                                                      _classPrivateFieldGet86 ===
                                                         void 0
                                                         ? void 0
                                                         : _classPrivateFieldGet86.guess(
                                                              data,
                                                           )) || null,
                                                   );
                                             }
                                       },
                                       _callee19,
                                       this,
                                    );
                                 },
                              ),
                           );
                           function mlGuess(_x19) {
                              return _mlGuess.apply(this, arguments);
                           }
                           return mlGuess;
                        })(),
                     },
                     {
                        key: "hasMLManager",
                        get: function get() {
                           return !!_classPrivateFieldGet(_mlManager, this);
                        },
                     },
                     {
                        key: "hcmFilter",
                        get: function get() {
                           return (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                              this,
                              "hcmFilter",
                              _classPrivateFieldGet(_pageColors, this)
                                 ? _classPrivateFieldGet(
                                      _filterFactory,
                                      this,
                                   ).addHCMFilter(
                                      _classPrivateFieldGet(_pageColors, this)
                                         .foreground,
                                      _classPrivateFieldGet(_pageColors, this)
                                         .background,
                                   )
                                 : "none",
                           );
                        },
                     },
                     {
                        key: "direction",
                        get: function get() {
                           return (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                              this,
                              "direction",
                              getComputedStyle(
                                 _classPrivateFieldGet(_container2, this),
                              ).direction,
                           );
                        },
                     },
                     {
                        key: "highlightColors",
                        get: function get() {
                           return (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                              this,
                              "highlightColors",
                              _classPrivateFieldGet(_highlightColors, this)
                                 ? new Map(
                                      _classPrivateFieldGet(
                                         _highlightColors,
                                         this,
                                      )
                                         .split(",")
                                         .map(function (pair) {
                                            return pair
                                               .split("=")
                                               .map(function (x) {
                                                  return x.trim();
                                               });
                                         }),
                                   )
                                 : null,
                           );
                        },
                     },
                     {
                        key: "highlightColorNames",
                        get: function get() {
                           return (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                              this,
                              "highlightColorNames",
                              this.highlightColors
                                 ? new Map(
                                      Array.from(
                                         this.highlightColors,
                                         function (e) {
                                            return e.reverse();
                                         },
                                      ),
                                   )
                                 : null,
                           );
                        },
                     },
                     {
                        key: "setMainHighlightColorPicker",
                        value: function setMainHighlightColorPicker(
                           colorPicker,
                        ) {
                           _classPrivateFieldSet(
                              _mainHighlightColorPicker,
                              this,
                              colorPicker,
                           );
                        },
                     },
                     {
                        key: "editAltText",
                        value: function editAltText(editor) {
                           var _classPrivateFieldGet87;
                           (_classPrivateFieldGet87 = _classPrivateFieldGet(
                              _altTextManager,
                              this,
                           )) === null ||
                              _classPrivateFieldGet87 === void 0 ||
                              _classPrivateFieldGet87.editAltText(this, editor);
                        },
                     },
                     {
                        key: "onPageChanging",
                        value: function onPageChanging(_ref101) {
                           var pageNumber = _ref101.pageNumber;
                           _classPrivateFieldSet(
                              _currentPageIndex,
                              this,
                              pageNumber - 1,
                           );
                        },
                     },
                     {
                        key: "focusMainContainer",
                        value: function focusMainContainer() {
                           _classPrivateFieldGet(_container2, this).focus();
                        },
                     },
                     {
                        key: "findParent",
                        value: function findParent(x, y) {
                           var _iterator108 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(
                                    _allLayers,
                                    this,
                                 ).values(),
                              ),
                              _step108;
                           try {
                              for (
                                 _iterator108.s();
                                 !(_step108 = _iterator108.n()).done;

                              ) {
                                 var layer = _step108.value;
                                 var _layer$div$getBoundin =
                                       layer.div.getBoundingClientRect(),
                                    layerX = _layer$div$getBoundin.x,
                                    layerY = _layer$div$getBoundin.y,
                                    width = _layer$div$getBoundin.width,
                                    height = _layer$div$getBoundin.height;
                                 if (
                                    x >= layerX &&
                                    x <= layerX + width &&
                                    y >= layerY &&
                                    y <= layerY + height
                                 ) {
                                    return layer;
                                 }
                              }
                           } catch (err) {
                              _iterator108.e(err);
                           } finally {
                              _iterator108.f();
                           }
                           return null;
                        },
                     },
                     {
                        key: "disableUserSelect",
                        value: function disableUserSelect() {
                           var value =
                              arguments.length > 0 && arguments[0] !== undefined
                                 ? arguments[0]
                                 : false;
                           _classPrivateFieldGet(
                              _viewer,
                              this,
                           ).classList.toggle("noUserSelect", value);
                        },
                     },
                     {
                        key: "addShouldRescale",
                        value: function addShouldRescale(editor) {
                           _classPrivateFieldGet(_editorsToRescale, this).add(
                              editor,
                           );
                        },
                     },
                     {
                        key: "removeShouldRescale",
                        value: function removeShouldRescale(editor) {
                           _classPrivateFieldGet(_editorsToRescale, this)[
                              "delete"
                           ](editor);
                        },
                     },
                     {
                        key: "onScaleChanging",
                        value: function onScaleChanging(_ref102) {
                           var scale = _ref102.scale;
                           this.commitOrRemove();
                           this.viewParameters.realScale =
                              scale *
                              _display_utils_js__WEBPACK_IMPORTED_MODULE_1__
                                 .PixelsPerInch.PDF_TO_CSS_UNITS;
                           var _iterator109 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_editorsToRescale, this),
                              ),
                              _step109;
                           try {
                              for (
                                 _iterator109.s();
                                 !(_step109 = _iterator109.n()).done;

                              ) {
                                 var editor = _step109.value;
                                 editor.onScaleChanging();
                              }
                           } catch (err) {
                              _iterator109.e(err);
                           } finally {
                              _iterator109.f();
                           }
                        },
                     },
                     {
                        key: "onRotationChanging",
                        value: function onRotationChanging(_ref103) {
                           var pagesRotation = _ref103.pagesRotation;
                           this.commitOrRemove();
                           this.viewParameters.rotation = pagesRotation;
                        },
                     },
                     {
                        key: "highlightSelection",
                        value: function highlightSelection() {
                           var methodOfCreation =
                              arguments.length > 0 && arguments[0] !== undefined
                                 ? arguments[0]
                                 : "";
                           var selection = document.getSelection();
                           if (!selection || selection.isCollapsed) {
                              return;
                           }
                           var anchorNode = selection.anchorNode,
                              anchorOffset = selection.anchorOffset,
                              focusNode = selection.focusNode,
                              focusOffset = selection.focusOffset;
                           var text = selection.toString();
                           var anchorElement = _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _getAnchorElementForSelection,
                           ).call(this, selection);
                           var textLayer = anchorElement.closest(".textLayer");
                           var boxes = this.getSelectionBoxes(textLayer);
                           if (!boxes) {
                              return;
                           }
                           selection.empty();
                           if (
                              _classPrivateFieldGet(_mode, this) ===
                              _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                 .AnnotationEditorType.NONE
                           ) {
                              this._eventBus.dispatch(
                                 "showannotationeditorui",
                                 {
                                    source: this,
                                    mode: _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                       .AnnotationEditorType.HIGHLIGHT,
                                 },
                              );
                              this.showAllEditors("highlight", true, true);
                           }
                           var _iterator110 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(
                                    _allLayers,
                                    this,
                                 ).values(),
                              ),
                              _step110;
                           try {
                              for (
                                 _iterator110.s();
                                 !(_step110 = _iterator110.n()).done;

                              ) {
                                 var layer = _step110.value;
                                 if (layer.hasTextLayer(textLayer)) {
                                    layer.createAndAddNewEditor(
                                       { x: 0, y: 0 },
                                       false,
                                       {
                                          methodOfCreation: methodOfCreation,
                                          boxes: boxes,
                                          anchorNode: anchorNode,
                                          anchorOffset: anchorOffset,
                                          focusNode: focusNode,
                                          focusOffset: focusOffset,
                                          text: text,
                                       },
                                    );
                                    break;
                                 }
                              }
                           } catch (err) {
                              _iterator110.e(err);
                           } finally {
                              _iterator110.f();
                           }
                        },
                     },
                     {
                        key: "addToAnnotationStorage",
                        value: function addToAnnotationStorage(editor) {
                           if (
                              !editor.isEmpty() &&
                              _classPrivateFieldGet(_annotationStorage, this) &&
                              !_classPrivateFieldGet(
                                 _annotationStorage,
                                 this,
                              ).has(editor.id)
                           ) {
                              _classPrivateFieldGet(
                                 _annotationStorage,
                                 this,
                              ).setValue(editor.id, editor);
                           }
                        },
                     },
                     {
                        key: "blur",
                        value: function blur() {
                           this.isShiftKeyDown = false;
                           if (
                              _classPrivateFieldGet(_highlightWhenShiftUp, this)
                           ) {
                              _classPrivateFieldSet(
                                 _highlightWhenShiftUp,
                                 this,
                                 false,
                              );
                              _assertClassBrand(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _onSelectEnd,
                              ).call(this, "main_toolbar");
                           }
                           if (!this.hasSelection) {
                              return;
                           }
                           var _document3 = document,
                              activeElement = _document3.activeElement;
                           var _iterator111 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_selectedEditors, this),
                              ),
                              _step111;
                           try {
                              for (
                                 _iterator111.s();
                                 !(_step111 = _iterator111.n()).done;

                              ) {
                                 var editor = _step111.value;
                                 if (editor.div.contains(activeElement)) {
                                    _classPrivateFieldSet(
                                       _lastActiveElement,
                                       this,
                                       [editor, activeElement],
                                    );
                                    editor._focusEventsAllowed = false;
                                    break;
                                 }
                              }
                           } catch (err) {
                              _iterator111.e(err);
                           } finally {
                              _iterator111.f();
                           }
                        },
                     },
                     {
                        key: "focus",
                        value: function focus() {
                           if (
                              !_classPrivateFieldGet(_lastActiveElement, this)
                           ) {
                              return;
                           }
                           var _classPrivateFieldGet88 = _classPrivateFieldGet(
                                 _lastActiveElement,
                                 this,
                              ),
                              _classPrivateFieldGet89 = _slicedToArray(
                                 _classPrivateFieldGet88,
                                 2,
                              ),
                              lastEditor = _classPrivateFieldGet89[0],
                              lastActiveElement = _classPrivateFieldGet89[1];
                           _classPrivateFieldSet(
                              _lastActiveElement,
                              this,
                              null,
                           );
                           lastActiveElement.addEventListener(
                              "focusin",
                              function () {
                                 lastEditor._focusEventsAllowed = true;
                              },
                              { once: true },
                           );
                           lastActiveElement.focus();
                        },
                     },
                     {
                        key: "addEditListeners",
                        value: function addEditListeners() {
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _addKeyboardManager,
                           ).call(this);
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _addCopyPasteListeners,
                           ).call(this);
                        },
                     },
                     {
                        key: "removeEditListeners",
                        value: function removeEditListeners() {
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _removeKeyboardManager,
                           ).call(this);
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _removeCopyPasteListeners,
                           ).call(this);
                        },
                     },
                     {
                        key: "copy",
                        value: function copy(event) {
                           var _classPrivateFieldGet90;
                           event.preventDefault();
                           (_classPrivateFieldGet90 = _classPrivateFieldGet(
                              _activeEditor,
                              this,
                           )) === null ||
                              _classPrivateFieldGet90 === void 0 ||
                              _classPrivateFieldGet90.commitOrRemove();
                           if (!this.hasSelection) {
                              return;
                           }
                           var editors = [];
                           var _iterator112 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_selectedEditors, this),
                              ),
                              _step112;
                           try {
                              for (
                                 _iterator112.s();
                                 !(_step112 = _iterator112.n()).done;

                              ) {
                                 var editor = _step112.value;
                                 var serialized = editor.serialize(true);
                                 if (serialized) {
                                    editors.push(serialized);
                                 }
                              }
                           } catch (err) {
                              _iterator112.e(err);
                           } finally {
                              _iterator112.f();
                           }
                           if (editors.length === 0) {
                              return;
                           }
                           event.clipboardData.setData(
                              "application/pdfjs",
                              JSON.stringify(editors),
                           );
                        },
                     },
                     {
                        key: "cut",
                        value: function cut(event) {
                           this.copy(event);
                           this["delete"]();
                        },
                     },
                     {
                        key: "paste",
                        value: function paste(event) {
                           var _this95 = this;
                           event.preventDefault();
                           var clipboardData = event.clipboardData;
                           var _iterator113 = _createForOfIteratorHelper(
                                 clipboardData.items,
                              ),
                              _step113;
                           try {
                              for (
                                 _iterator113.s();
                                 !(_step113 = _iterator113.n()).done;

                              ) {
                                 var item = _step113.value;
                                 var _iterator115 = _createForOfIteratorHelper(
                                       _classPrivateFieldGet(
                                          _editorTypes2,
                                          this,
                                       ),
                                    ),
                                    _step115;
                                 try {
                                    for (
                                       _iterator115.s();
                                       !(_step115 = _iterator115.n()).done;

                                    ) {
                                       var editorType = _step115.value;
                                       if (
                                          editorType.isHandlingMimeForPasting(
                                             item.type,
                                          )
                                       ) {
                                          editorType.paste(
                                             item,
                                             this.currentLayer,
                                          );
                                          return;
                                       }
                                    }
                                 } catch (err) {
                                    _iterator115.e(err);
                                 } finally {
                                    _iterator115.f();
                                 }
                              }
                           } catch (err) {
                              _iterator113.e(err);
                           } finally {
                              _iterator113.f();
                           }
                           var data =
                              clipboardData.getData("application/pdfjs");
                           if (!data) {
                              return;
                           }
                           try {
                              data = JSON.parse(data);
                           } catch (ex) {
                              (0,
                              _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                                 'paste: "'.concat(ex.message, '".'),
                              );
                              return;
                           }
                           if (!Array.isArray(data)) {
                              return;
                           }
                           this.unselectAll();
                           var layer = this.currentLayer;
                           try {
                              var newEditors = [];
                              var _iterator114 =
                                    _createForOfIteratorHelper(data),
                                 _step114;
                              try {
                                 for (
                                    _iterator114.s();
                                    !(_step114 = _iterator114.n()).done;

                                 ) {
                                    var editor = _step114.value;
                                    var deserializedEditor =
                                       layer.deserialize(editor);
                                    if (!deserializedEditor) {
                                       return;
                                    }
                                    newEditors.push(deserializedEditor);
                                 }
                              } catch (err) {
                                 _iterator114.e(err);
                              } finally {
                                 _iterator114.f();
                              }
                              var cmd = function cmd() {
                                 for (
                                    var _i27 = 0, _newEditors = newEditors;
                                    _i27 < _newEditors.length;
                                    _i27++
                                 ) {
                                    var editor = _newEditors[_i27];
                                    _assertClassBrand(
                                       _AnnotationEditorUIManager_brand,
                                       _this95,
                                       _addEditorToLayer,
                                    ).call(_this95, editor);
                                 }
                                 _assertClassBrand(
                                    _AnnotationEditorUIManager_brand,
                                    _this95,
                                    _selectEditors,
                                 ).call(_this95, newEditors);
                              };
                              var undo = function undo() {
                                 for (
                                    var _i28 = 0, _newEditors2 = newEditors;
                                    _i28 < _newEditors2.length;
                                    _i28++
                                 ) {
                                    var editor = _newEditors2[_i28];
                                    editor.remove();
                                 }
                              };
                              this.addCommands({
                                 cmd: cmd,
                                 undo: undo,
                                 mustExec: true,
                              });
                           } catch (ex) {
                              (0,
                              _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                                 'paste: "'.concat(ex.message, '".'),
                              );
                           }
                        },
                     },
                     {
                        key: "keydown",
                        value: function keydown(event) {
                           if (!this.isShiftKeyDown && event.key === "Shift") {
                              this.isShiftKeyDown = true;
                           }
                           if (
                              _classPrivateFieldGet(_mode, this) !==
                                 _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                    .AnnotationEditorType.NONE &&
                              !this.isEditorHandlingKeyboard
                           ) {
                              _AnnotationEditorUIManager._keyboardManager.exec(
                                 this,
                                 event,
                              );
                           }
                        },
                     },
                     {
                        key: "keyup",
                        value: function keyup(event) {
                           if (this.isShiftKeyDown && event.key === "Shift") {
                              this.isShiftKeyDown = false;
                              if (
                                 _classPrivateFieldGet(
                                    _highlightWhenShiftUp,
                                    this,
                                 )
                              ) {
                                 _classPrivateFieldSet(
                                    _highlightWhenShiftUp,
                                    this,
                                    false,
                                 );
                                 _assertClassBrand(
                                    _AnnotationEditorUIManager_brand,
                                    this,
                                    _onSelectEnd,
                                 ).call(this, "main_toolbar");
                              }
                           }
                        },
                     },
                     {
                        key: "onEditingAction",
                        value: function onEditingAction(_ref104) {
                           var name = _ref104.name;
                           switch (name) {
                              case "undo":
                              case "redo":
                              case "delete":
                              case "selectAll":
                                 this[name]();
                                 break;
                              case "highlightSelection":
                                 this.highlightSelection("context_menu");
                                 break;
                           }
                        },
                     },
                     {
                        key: "setEditingState",
                        value: function setEditingState(isEditing) {
                           if (isEditing) {
                              _assertClassBrand(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _addFocusManager,
                              ).call(this);
                              _assertClassBrand(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _addCopyPasteListeners,
                              ).call(this);
                              _assertClassBrand(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _dispatchUpdateStates,
                              ).call(this, {
                                 isEditing:
                                    _classPrivateFieldGet(_mode, this) !==
                                    _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                       .AnnotationEditorType.NONE,
                                 isEmpty: _assertClassBrand(
                                    _AnnotationEditorUIManager_brand,
                                    this,
                                    _isEmpty,
                                 ).call(this),
                                 hasSomethingToUndo: _classPrivateFieldGet(
                                    _commandManager,
                                    this,
                                 ).hasSomethingToUndo(),
                                 hasSomethingToRedo: _classPrivateFieldGet(
                                    _commandManager,
                                    this,
                                 ).hasSomethingToRedo(),
                                 hasSelectedEditor: false,
                              });
                           } else {
                              _assertClassBrand(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _removeFocusManager,
                              ).call(this);
                              _assertClassBrand(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _removeCopyPasteListeners,
                              ).call(this);
                              _assertClassBrand(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _dispatchUpdateStates,
                              ).call(this, { isEditing: false });
                              this.disableUserSelect(false);
                           }
                        },
                     },
                     {
                        key: "registerEditorTypes",
                        value: function registerEditorTypes(types) {
                           if (_classPrivateFieldGet(_editorTypes2, this)) {
                              return;
                           }
                           _classPrivateFieldSet(_editorTypes2, this, types);
                           var _iterator116 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_editorTypes2, this),
                              ),
                              _step116;
                           try {
                              for (
                                 _iterator116.s();
                                 !(_step116 = _iterator116.n()).done;

                              ) {
                                 var editorType = _step116.value;
                                 _assertClassBrand(
                                    _AnnotationEditorUIManager_brand,
                                    this,
                                    _dispatchUpdateUI,
                                 ).call(
                                    this,
                                    editorType.defaultPropertiesToUpdate,
                                 );
                              }
                           } catch (err) {
                              _iterator116.e(err);
                           } finally {
                              _iterator116.f();
                           }
                        },
                     },
                     {
                        key: "getId",
                        value: function getId() {
                           return _classPrivateFieldGet(_idManager, this).id;
                        },
                     },
                     {
                        key: "currentLayer",
                        get: function get() {
                           return _classPrivateFieldGet(_allLayers, this).get(
                              _classPrivateFieldGet(_currentPageIndex, this),
                           );
                        },
                     },
                     {
                        key: "getLayer",
                        value: function getLayer(pageIndex) {
                           return _classPrivateFieldGet(_allLayers, this).get(
                              pageIndex,
                           );
                        },
                     },
                     {
                        key: "currentPageIndex",
                        get: function get() {
                           return _classPrivateFieldGet(
                              _currentPageIndex,
                              this,
                           );
                        },
                     },
                     {
                        key: "addLayer",
                        value: function addLayer(layer) {
                           _classPrivateFieldGet(_allLayers, this).set(
                              layer.pageIndex,
                              layer,
                           );
                           if (_classPrivateFieldGet(_isEnabled, this)) {
                              layer.enable();
                           } else {
                              layer.disable();
                           }
                        },
                     },
                     {
                        key: "removeLayer",
                        value: function removeLayer(layer) {
                           _classPrivateFieldGet(_allLayers, this)["delete"](
                              layer.pageIndex,
                           );
                        },
                     },
                     {
                        key: "updateMode",
                        value: function updateMode(mode) {
                           var editId =
                              arguments.length > 1 && arguments[1] !== undefined
                                 ? arguments[1]
                                 : null;
                           var isFromKeyboard =
                              arguments.length > 2 && arguments[2] !== undefined
                                 ? arguments[2]
                                 : false;
                           if (_classPrivateFieldGet(_mode, this) === mode) {
                              return;
                           }
                           _classPrivateFieldSet(_mode, this, mode);
                           if (
                              mode ===
                              _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                 .AnnotationEditorType.NONE
                           ) {
                              this.setEditingState(false);
                              _assertClassBrand(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _disableAll,
                              ).call(this);
                              return;
                           }
                           this.setEditingState(true);
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _enableAll,
                           ).call(this);
                           this.unselectAll();
                           var _iterator117 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(
                                    _allLayers,
                                    this,
                                 ).values(),
                              ),
                              _step117;
                           try {
                              for (
                                 _iterator117.s();
                                 !(_step117 = _iterator117.n()).done;

                              ) {
                                 var layer = _step117.value;
                                 layer.updateMode(mode);
                              }
                           } catch (err) {
                              _iterator117.e(err);
                           } finally {
                              _iterator117.f();
                           }
                           if (!editId && isFromKeyboard) {
                              this.addNewEditorFromKeyboard();
                              return;
                           }
                           if (!editId) {
                              return;
                           }
                           var _iterator118 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(
                                    _allEditors,
                                    this,
                                 ).values(),
                              ),
                              _step118;
                           try {
                              for (
                                 _iterator118.s();
                                 !(_step118 = _iterator118.n()).done;

                              ) {
                                 var editor = _step118.value;
                                 if (editor.annotationElementId === editId) {
                                    this.setSelected(editor);
                                    editor.enterInEditMode();
                                    break;
                                 }
                              }
                           } catch (err) {
                              _iterator118.e(err);
                           } finally {
                              _iterator118.f();
                           }
                        },
                     },
                     {
                        key: "addNewEditorFromKeyboard",
                        value: function addNewEditorFromKeyboard() {
                           if (this.currentLayer.canCreateNewEmptyEditor()) {
                              this.currentLayer.addNewEditor();
                           }
                        },
                     },
                     {
                        key: "updateToolbar",
                        value: function updateToolbar(mode) {
                           if (mode === _classPrivateFieldGet(_mode, this)) {
                              return;
                           }
                           this._eventBus.dispatch(
                              "switchannotationeditormode",
                              {
                                 source: this,
                                 mode: mode,
                              },
                           );
                        },
                     },
                     {
                        key: "updateParams",
                        value: function updateParams(type, value) {
                           var _classPrivateFieldGet91;
                           if (!_classPrivateFieldGet(_editorTypes2, this)) {
                              return;
                           }
                           switch (type) {
                              case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                 .AnnotationEditorParamsType.CREATE:
                                 this.currentLayer.addNewEditor();
                                 return;
                              case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                 .AnnotationEditorParamsType
                                 .HIGHLIGHT_DEFAULT_COLOR:
                                 (_classPrivateFieldGet91 =
                                    _classPrivateFieldGet(
                                       _mainHighlightColorPicker,
                                       this,
                                    )) === null ||
                                    _classPrivateFieldGet91 === void 0 ||
                                    _classPrivateFieldGet91.updateColor(value);
                                 break;
                              case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                 .AnnotationEditorParamsType.HIGHLIGHT_SHOW_ALL:
                                 this._eventBus.dispatch("reporttelemetry", {
                                    source: this,
                                    details: {
                                       type: "editing",
                                       data: {
                                          type: "highlight",
                                          action: "toggle_visibility",
                                       },
                                    },
                                 });
                                 (
                                    _classPrivateFieldGet(
                                       _showAllStates,
                                       this,
                                    ) ||
                                    _classPrivateFieldSet(
                                       _showAllStates,
                                       this,
                                       new Map(),
                                    )
                                 ).set(type, value);
                                 this.showAllEditors("highlight", value);
                                 break;
                           }
                           var _iterator119 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_selectedEditors, this),
                              ),
                              _step119;
                           try {
                              for (
                                 _iterator119.s();
                                 !(_step119 = _iterator119.n()).done;

                              ) {
                                 var editor = _step119.value;
                                 editor.updateParams(type, value);
                              }
                           } catch (err) {
                              _iterator119.e(err);
                           } finally {
                              _iterator119.f();
                           }
                           var _iterator120 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_editorTypes2, this),
                              ),
                              _step120;
                           try {
                              for (
                                 _iterator120.s();
                                 !(_step120 = _iterator120.n()).done;

                              ) {
                                 var editorType = _step120.value;
                                 editorType.updateDefaultParams(type, value);
                              }
                           } catch (err) {
                              _iterator120.e(err);
                           } finally {
                              _iterator120.f();
                           }
                        },
                     },
                     {
                        key: "showAllEditors",
                        value: function showAllEditors(type, visible) {
                           var _classPrivateFieldGet92, _classPrivateFieldGet93;
                           var updateButton =
                              arguments.length > 2 && arguments[2] !== undefined
                                 ? arguments[2]
                                 : false;
                           var _iterator121 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(
                                    _allEditors,
                                    this,
                                 ).values(),
                              ),
                              _step121;
                           try {
                              for (
                                 _iterator121.s();
                                 !(_step121 = _iterator121.n()).done;

                              ) {
                                 var editor = _step121.value;
                                 if (editor.editorType === type) {
                                    editor.show(visible);
                                 }
                              }
                           } catch (err) {
                              _iterator121.e(err);
                           } finally {
                              _iterator121.f();
                           }
                           var state =
                              (_classPrivateFieldGet92 =
                                 (_classPrivateFieldGet93 =
                                    _classPrivateFieldGet(
                                       _showAllStates,
                                       this,
                                    )) === null ||
                                 _classPrivateFieldGet93 === void 0
                                    ? void 0
                                    : _classPrivateFieldGet93.get(
                                         _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                            .AnnotationEditorParamsType
                                            .HIGHLIGHT_SHOW_ALL,
                                      )) !== null &&
                              _classPrivateFieldGet92 !== void 0
                                 ? _classPrivateFieldGet92
                                 : true;
                           if (state !== visible) {
                              _assertClassBrand(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _dispatchUpdateUI,
                              ).call(this, [
                                 [
                                    _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                       .AnnotationEditorParamsType
                                       .HIGHLIGHT_SHOW_ALL,
                                    visible,
                                 ],
                              ]);
                           }
                        },
                     },
                     {
                        key: "enableWaiting",
                        value: function enableWaiting() {
                           var mustWait =
                              arguments.length > 0 && arguments[0] !== undefined
                                 ? arguments[0]
                                 : false;
                           if (
                              _classPrivateFieldGet(_isWaiting, this) ===
                              mustWait
                           ) {
                              return;
                           }
                           _classPrivateFieldSet(_isWaiting, this, mustWait);
                           var _iterator122 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(
                                    _allLayers,
                                    this,
                                 ).values(),
                              ),
                              _step122;
                           try {
                              for (
                                 _iterator122.s();
                                 !(_step122 = _iterator122.n()).done;

                              ) {
                                 var layer = _step122.value;
                                 if (mustWait) {
                                    layer.disableClick();
                                 } else {
                                    layer.enableClick();
                                 }
                                 layer.div.classList.toggle(
                                    "waiting",
                                    mustWait,
                                 );
                              }
                           } catch (err) {
                              _iterator122.e(err);
                           } finally {
                              _iterator122.f();
                           }
                        },
                     },
                     {
                        key: "getEditors",
                        value: function getEditors(pageIndex) {
                           var editors = [];
                           var _iterator123 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(
                                    _allEditors,
                                    this,
                                 ).values(),
                              ),
                              _step123;
                           try {
                              for (
                                 _iterator123.s();
                                 !(_step123 = _iterator123.n()).done;

                              ) {
                                 var editor = _step123.value;
                                 if (editor.pageIndex === pageIndex) {
                                    editors.push(editor);
                                 }
                              }
                           } catch (err) {
                              _iterator123.e(err);
                           } finally {
                              _iterator123.f();
                           }
                           return editors;
                        },
                     },
                     {
                        key: "getEditor",
                        value: function getEditor(id) {
                           return _classPrivateFieldGet(_allEditors, this).get(
                              id,
                           );
                        },
                     },
                     {
                        key: "addEditor",
                        value: function addEditor(editor) {
                           _classPrivateFieldGet(_allEditors, this).set(
                              editor.id,
                              editor,
                           );
                        },
                     },
                     {
                        key: "removeEditor",
                        value: function removeEditor(editor) {
                           var _this96 = this;
                           if (editor.div.contains(document.activeElement)) {
                              if (
                                 _classPrivateFieldGet(
                                    _focusMainContainerTimeoutId,
                                    this,
                                 )
                              ) {
                                 clearTimeout(
                                    _classPrivateFieldGet(
                                       _focusMainContainerTimeoutId,
                                       this,
                                    ),
                                 );
                              }
                              _classPrivateFieldSet(
                                 _focusMainContainerTimeoutId,
                                 this,
                                 setTimeout(function () {
                                    _this96.focusMainContainer();
                                    _classPrivateFieldSet(
                                       _focusMainContainerTimeoutId,
                                       _this96,
                                       null,
                                    );
                                 }, 0),
                              );
                           }
                           _classPrivateFieldGet(_allEditors, this)["delete"](
                              editor.id,
                           );
                           this.unselect(editor);
                           if (
                              !editor.annotationElementId ||
                              !_classPrivateFieldGet(
                                 _deletedAnnotationsElementIds,
                                 this,
                              ).has(editor.annotationElementId)
                           ) {
                              var _classPrivateFieldGet94;
                              (_classPrivateFieldGet94 = _classPrivateFieldGet(
                                 _annotationStorage,
                                 this,
                              )) === null ||
                                 _classPrivateFieldGet94 === void 0 ||
                                 _classPrivateFieldGet94.remove(editor.id);
                           }
                        },
                     },
                     {
                        key: "addDeletedAnnotationElement",
                        value: function addDeletedAnnotationElement(editor) {
                           _classPrivateFieldGet(
                              _deletedAnnotationsElementIds,
                              this,
                           ).add(editor.annotationElementId);
                           this.addChangedExistingAnnotation(editor);
                           editor.deleted = true;
                        },
                     },
                     {
                        key: "isDeletedAnnotationElement",
                        value: function isDeletedAnnotationElement(
                           annotationElementId,
                        ) {
                           return _classPrivateFieldGet(
                              _deletedAnnotationsElementIds,
                              this,
                           ).has(annotationElementId);
                        },
                     },
                     {
                        key: "removeDeletedAnnotationElement",
                        value: function removeDeletedAnnotationElement(editor) {
                           _classPrivateFieldGet(
                              _deletedAnnotationsElementIds,
                              this,
                           )["delete"](editor.annotationElementId);
                           this.removeChangedExistingAnnotation(editor);
                           editor.deleted = false;
                        },
                     },
                     {
                        key: "setActiveEditor",
                        value: function setActiveEditor(editor) {
                           if (
                              _classPrivateFieldGet(_activeEditor, this) ===
                              editor
                           ) {
                              return;
                           }
                           _classPrivateFieldSet(_activeEditor, this, editor);
                           if (editor) {
                              _assertClassBrand(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _dispatchUpdateUI,
                              ).call(this, editor.propertiesToUpdate);
                           }
                        },
                     },
                     {
                        key: "updateUI",
                        value: function updateUI(editor) {
                           if (
                              _classPrivateGetter(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _get_lastSelectedEditor,
                              ) === editor
                           ) {
                              _assertClassBrand(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _dispatchUpdateUI,
                              ).call(this, editor.propertiesToUpdate);
                           }
                        },
                     },
                     {
                        key: "toggleSelected",
                        value: function toggleSelected(editor) {
                           if (
                              _classPrivateFieldGet(_selectedEditors, this).has(
                                 editor,
                              )
                           ) {
                              _classPrivateFieldGet(_selectedEditors, this)[
                                 "delete"
                              ](editor);
                              editor.unselect();
                              _assertClassBrand(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _dispatchUpdateStates,
                              ).call(this, {
                                 hasSelectedEditor: this.hasSelection,
                              });
                              return;
                           }
                           _classPrivateFieldGet(_selectedEditors, this).add(
                              editor,
                           );
                           editor.select();
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _dispatchUpdateUI,
                           ).call(this, editor.propertiesToUpdate);
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _dispatchUpdateStates,
                           ).call(this, { hasSelectedEditor: true });
                        },
                     },
                     {
                        key: "setSelected",
                        value: function setSelected(editor) {
                           var _iterator124 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_selectedEditors, this),
                              ),
                              _step124;
                           try {
                              for (
                                 _iterator124.s();
                                 !(_step124 = _iterator124.n()).done;

                              ) {
                                 var ed = _step124.value;
                                 if (ed !== editor) {
                                    ed.unselect();
                                 }
                              }
                           } catch (err) {
                              _iterator124.e(err);
                           } finally {
                              _iterator124.f();
                           }
                           _classPrivateFieldGet(
                              _selectedEditors,
                              this,
                           ).clear();
                           _classPrivateFieldGet(_selectedEditors, this).add(
                              editor,
                           );
                           editor.select();
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _dispatchUpdateUI,
                           ).call(this, editor.propertiesToUpdate);
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _dispatchUpdateStates,
                           ).call(this, { hasSelectedEditor: true });
                        },
                     },
                     {
                        key: "isSelected",
                        value: function isSelected(editor) {
                           return _classPrivateFieldGet(
                              _selectedEditors,
                              this,
                           ).has(editor);
                        },
                     },
                     {
                        key: "firstSelectedEditor",
                        get: function get() {
                           return _classPrivateFieldGet(_selectedEditors, this)
                              .values()
                              .next().value;
                        },
                     },
                     {
                        key: "unselect",
                        value: function unselect(editor) {
                           editor.unselect();
                           _classPrivateFieldGet(_selectedEditors, this)[
                              "delete"
                           ](editor);
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _dispatchUpdateStates,
                           ).call(this, {
                              hasSelectedEditor: this.hasSelection,
                           });
                        },
                     },
                     {
                        key: "hasSelection",
                        get: function get() {
                           return (
                              _classPrivateFieldGet(_selectedEditors, this)
                                 .size !== 0
                           );
                        },
                     },
                     {
                        key: "isEnterHandled",
                        get: function get() {
                           return (
                              _classPrivateFieldGet(_selectedEditors, this)
                                 .size === 1 &&
                              this.firstSelectedEditor.isEnterHandled
                           );
                        },
                     },
                     {
                        key: "undo",
                        value: function undo() {
                           _classPrivateFieldGet(_commandManager, this).undo();
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _dispatchUpdateStates,
                           ).call(this, {
                              hasSomethingToUndo: _classPrivateFieldGet(
                                 _commandManager,
                                 this,
                              ).hasSomethingToUndo(),
                              hasSomethingToRedo: true,
                              isEmpty: _assertClassBrand(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _isEmpty,
                              ).call(this),
                           });
                        },
                     },
                     {
                        key: "redo",
                        value: function redo() {
                           _classPrivateFieldGet(_commandManager, this).redo();
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _dispatchUpdateStates,
                           ).call(this, {
                              hasSomethingToUndo: true,
                              hasSomethingToRedo: _classPrivateFieldGet(
                                 _commandManager,
                                 this,
                              ).hasSomethingToRedo(),
                              isEmpty: _assertClassBrand(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _isEmpty,
                              ).call(this),
                           });
                        },
                     },
                     {
                        key: "addCommands",
                        value: function addCommands(params) {
                           _classPrivateFieldGet(_commandManager, this).add(
                              params,
                           );
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _dispatchUpdateStates,
                           ).call(this, {
                              hasSomethingToUndo: true,
                              hasSomethingToRedo: false,
                              isEmpty: _assertClassBrand(
                                 _AnnotationEditorUIManager_brand,
                                 this,
                                 _isEmpty,
                              ).call(this),
                           });
                        },
                     },
                     {
                        key: "delete",
                        value: function _delete() {
                           var _this97 = this;
                           this.commitOrRemove();
                           if (!this.hasSelection) {
                              return;
                           }
                           var editors = _toConsumableArray(
                              _classPrivateFieldGet(_selectedEditors, this),
                           );
                           var cmd = function cmd() {
                              var _iterator125 =
                                    _createForOfIteratorHelper(editors),
                                 _step125;
                              try {
                                 for (
                                    _iterator125.s();
                                    !(_step125 = _iterator125.n()).done;

                                 ) {
                                    var editor = _step125.value;
                                    editor.remove();
                                 }
                              } catch (err) {
                                 _iterator125.e(err);
                              } finally {
                                 _iterator125.f();
                              }
                           };
                           var undo = function undo() {
                              var _iterator126 =
                                    _createForOfIteratorHelper(editors),
                                 _step126;
                              try {
                                 for (
                                    _iterator126.s();
                                    !(_step126 = _iterator126.n()).done;

                                 ) {
                                    var editor = _step126.value;
                                    _assertClassBrand(
                                       _AnnotationEditorUIManager_brand,
                                       _this97,
                                       _addEditorToLayer,
                                    ).call(_this97, editor);
                                 }
                              } catch (err) {
                                 _iterator126.e(err);
                              } finally {
                                 _iterator126.f();
                              }
                           };
                           this.addCommands({
                              cmd: cmd,
                              undo: undo,
                              mustExec: true,
                           });
                        },
                     },
                     {
                        key: "commitOrRemove",
                        value: function commitOrRemove() {
                           var _classPrivateFieldGet95;
                           (_classPrivateFieldGet95 = _classPrivateFieldGet(
                              _activeEditor,
                              this,
                           )) === null ||
                              _classPrivateFieldGet95 === void 0 ||
                              _classPrivateFieldGet95.commitOrRemove();
                        },
                     },
                     {
                        key: "hasSomethingToControl",
                        value: function hasSomethingToControl() {
                           return (
                              _classPrivateFieldGet(_activeEditor, this) ||
                              this.hasSelection
                           );
                        },
                     },
                     {
                        key: "selectAll",
                        value: function selectAll() {
                           var _iterator127 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_selectedEditors, this),
                              ),
                              _step127;
                           try {
                              for (
                                 _iterator127.s();
                                 !(_step127 = _iterator127.n()).done;

                              ) {
                                 var editor = _step127.value;
                                 editor.commit();
                              }
                           } catch (err) {
                              _iterator127.e(err);
                           } finally {
                              _iterator127.f();
                           }
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _selectEditors,
                           ).call(
                              this,
                              _classPrivateFieldGet(_allEditors, this).values(),
                           );
                        },
                     },
                     {
                        key: "unselectAll",
                        value: function unselectAll() {
                           if (_classPrivateFieldGet(_activeEditor, this)) {
                              _classPrivateFieldGet(
                                 _activeEditor,
                                 this,
                              ).commitOrRemove();
                              if (
                                 _classPrivateFieldGet(_mode, this) !==
                                 _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                    .AnnotationEditorType.NONE
                              ) {
                                 return;
                              }
                           }
                           if (!this.hasSelection) {
                              return;
                           }
                           var _iterator128 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_selectedEditors, this),
                              ),
                              _step128;
                           try {
                              for (
                                 _iterator128.s();
                                 !(_step128 = _iterator128.n()).done;

                              ) {
                                 var editor = _step128.value;
                                 editor.unselect();
                              }
                           } catch (err) {
                              _iterator128.e(err);
                           } finally {
                              _iterator128.f();
                           }
                           _classPrivateFieldGet(
                              _selectedEditors,
                              this,
                           ).clear();
                           _assertClassBrand(
                              _AnnotationEditorUIManager_brand,
                              this,
                              _dispatchUpdateStates,
                           ).call(this, { hasSelectedEditor: false });
                        },
                     },
                     {
                        key: "translateSelectedEditors",
                        value: function translateSelectedEditors(x, y) {
                           var _this98 = this;
                           var noCommit =
                              arguments.length > 2 && arguments[2] !== undefined
                                 ? arguments[2]
                                 : false;
                           if (!noCommit) {
                              this.commitOrRemove();
                           }
                           if (!this.hasSelection) {
                              return;
                           }
                           _classPrivateFieldGet(_translation, this)[0] += x;
                           _classPrivateFieldGet(_translation, this)[1] += y;
                           var _classPrivateFieldGet96 = _classPrivateFieldGet(
                                 _translation,
                                 this,
                              ),
                              _classPrivateFieldGet97 = _slicedToArray(
                                 _classPrivateFieldGet96,
                                 2,
                              ),
                              totalX = _classPrivateFieldGet97[0],
                              totalY = _classPrivateFieldGet97[1];
                           var editors = _toConsumableArray(
                              _classPrivateFieldGet(_selectedEditors, this),
                           );
                           var TIME_TO_WAIT = 1000;
                           if (
                              _classPrivateFieldGet(_translationTimeoutId, this)
                           ) {
                              clearTimeout(
                                 _classPrivateFieldGet(
                                    _translationTimeoutId,
                                    this,
                                 ),
                              );
                           }
                           _classPrivateFieldSet(
                              _translationTimeoutId,
                              this,
                              setTimeout(function () {
                                 _classPrivateFieldSet(
                                    _translationTimeoutId,
                                    _this98,
                                    null,
                                 );
                                 _classPrivateFieldGet(
                                    _translation,
                                    _this98,
                                 )[0] = _classPrivateFieldGet(
                                    _translation,
                                    _this98,
                                 )[1] = 0;
                                 _this98.addCommands({
                                    cmd: function cmd() {
                                       var _iterator129 =
                                             _createForOfIteratorHelper(
                                                editors,
                                             ),
                                          _step129;
                                       try {
                                          for (
                                             _iterator129.s();
                                             !(_step129 = _iterator129.n())
                                                .done;

                                          ) {
                                             var editor = _step129.value;
                                             if (
                                                _classPrivateFieldGet(
                                                   _allEditors,
                                                   _this98,
                                                ).has(editor.id)
                                             ) {
                                                editor.translateInPage(
                                                   totalX,
                                                   totalY,
                                                );
                                             }
                                          }
                                       } catch (err) {
                                          _iterator129.e(err);
                                       } finally {
                                          _iterator129.f();
                                       }
                                    },
                                    undo: function undo() {
                                       var _iterator130 =
                                             _createForOfIteratorHelper(
                                                editors,
                                             ),
                                          _step130;
                                       try {
                                          for (
                                             _iterator130.s();
                                             !(_step130 = _iterator130.n())
                                                .done;

                                          ) {
                                             var editor = _step130.value;
                                             if (
                                                _classPrivateFieldGet(
                                                   _allEditors,
                                                   _this98,
                                                ).has(editor.id)
                                             ) {
                                                editor.translateInPage(
                                                   -totalX,
                                                   -totalY,
                                                );
                                             }
                                          }
                                       } catch (err) {
                                          _iterator130.e(err);
                                       } finally {
                                          _iterator130.f();
                                       }
                                    },
                                    mustExec: false,
                                 });
                              }, TIME_TO_WAIT),
                           );
                           var _iterator131 =
                                 _createForOfIteratorHelper(editors),
                              _step131;
                           try {
                              for (
                                 _iterator131.s();
                                 !(_step131 = _iterator131.n()).done;

                              ) {
                                 var editor = _step131.value;
                                 editor.translateInPage(x, y);
                              }
                           } catch (err) {
                              _iterator131.e(err);
                           } finally {
                              _iterator131.f();
                           }
                        },
                     },
                     {
                        key: "setUpDragSession",
                        value: function setUpDragSession() {
                           if (!this.hasSelection) {
                              return;
                           }
                           this.disableUserSelect(true);
                           _classPrivateFieldSet(
                              _draggingEditors,
                              this,
                              new Map(),
                           );
                           var _iterator132 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(_selectedEditors, this),
                              ),
                              _step132;
                           try {
                              for (
                                 _iterator132.s();
                                 !(_step132 = _iterator132.n()).done;

                              ) {
                                 var editor = _step132.value;
                                 _classPrivateFieldGet(
                                    _draggingEditors,
                                    this,
                                 ).set(editor, {
                                    savedX: editor.x,
                                    savedY: editor.y,
                                    savedPageIndex: editor.pageIndex,
                                    newX: 0,
                                    newY: 0,
                                    newPageIndex: -1,
                                 });
                              }
                           } catch (err) {
                              _iterator132.e(err);
                           } finally {
                              _iterator132.f();
                           }
                        },
                     },
                     {
                        key: "endDragSession",
                        value: function endDragSession() {
                           var _this99 = this;
                           if (!_classPrivateFieldGet(_draggingEditors, this)) {
                              return false;
                           }
                           this.disableUserSelect(false);
                           var map = _classPrivateFieldGet(
                              _draggingEditors,
                              this,
                           );
                           _classPrivateFieldSet(_draggingEditors, this, null);
                           var mustBeAddedInUndoStack = false;
                           var _iterator133 = _createForOfIteratorHelper(map),
                              _step133;
                           try {
                              for (
                                 _iterator133.s();
                                 !(_step133 = _iterator133.n()).done;

                              ) {
                                 var _step133$value = _slicedToArray(
                                       _step133.value,
                                       2,
                                    ),
                                    _step133$value$ = _step133$value[0],
                                    x = _step133$value$.x,
                                    y = _step133$value$.y,
                                    pageIndex = _step133$value$.pageIndex,
                                    value = _step133$value[1];
                                 value.newX = x;
                                 value.newY = y;
                                 value.newPageIndex = pageIndex;
                                 mustBeAddedInUndoStack ||
                                    (mustBeAddedInUndoStack =
                                       x !== value.savedX ||
                                       y !== value.savedY ||
                                       pageIndex !== value.savedPageIndex);
                              }
                           } catch (err) {
                              _iterator133.e(err);
                           } finally {
                              _iterator133.f();
                           }
                           if (!mustBeAddedInUndoStack) {
                              return false;
                           }
                           var move = function move(editor, x, y, pageIndex) {
                              if (
                                 _classPrivateFieldGet(
                                    _allEditors,
                                    _this99,
                                 ).has(editor.id)
                              ) {
                                 var parent = _classPrivateFieldGet(
                                    _allLayers,
                                    _this99,
                                 ).get(pageIndex);
                                 if (parent) {
                                    editor._setParentAndPosition(parent, x, y);
                                 } else {
                                    editor.pageIndex = pageIndex;
                                    editor.x = x;
                                    editor.y = y;
                                 }
                              }
                           };
                           this.addCommands({
                              cmd: function cmd() {
                                 var _iterator134 =
                                       _createForOfIteratorHelper(map),
                                    _step134;
                                 try {
                                    for (
                                       _iterator134.s();
                                       !(_step134 = _iterator134.n()).done;

                                    ) {
                                       var _step134$value = _slicedToArray(
                                             _step134.value,
                                             2,
                                          ),
                                          editor = _step134$value[0],
                                          _step134$value$ = _step134$value[1],
                                          newX = _step134$value$.newX,
                                          newY = _step134$value$.newY,
                                          newPageIndex =
                                             _step134$value$.newPageIndex;
                                       move(editor, newX, newY, newPageIndex);
                                    }
                                 } catch (err) {
                                    _iterator134.e(err);
                                 } finally {
                                    _iterator134.f();
                                 }
                              },
                              undo: function undo() {
                                 var _iterator135 =
                                       _createForOfIteratorHelper(map),
                                    _step135;
                                 try {
                                    for (
                                       _iterator135.s();
                                       !(_step135 = _iterator135.n()).done;

                                    ) {
                                       var _step135$value = _slicedToArray(
                                             _step135.value,
                                             2,
                                          ),
                                          editor = _step135$value[0],
                                          _step135$value$ = _step135$value[1],
                                          savedX = _step135$value$.savedX,
                                          savedY = _step135$value$.savedY,
                                          savedPageIndex =
                                             _step135$value$.savedPageIndex;
                                       move(
                                          editor,
                                          savedX,
                                          savedY,
                                          savedPageIndex,
                                       );
                                    }
                                 } catch (err) {
                                    _iterator135.e(err);
                                 } finally {
                                    _iterator135.f();
                                 }
                              },
                              mustExec: true,
                           });
                           return true;
                        },
                     },
                     {
                        key: "dragSelectedEditors",
                        value: function dragSelectedEditors(tx, ty) {
                           if (!_classPrivateFieldGet(_draggingEditors, this)) {
                              return;
                           }
                           var _iterator136 = _createForOfIteratorHelper(
                                 _classPrivateFieldGet(
                                    _draggingEditors,
                                    this,
                                 ).keys(),
                              ),
                              _step136;
                           try {
                              for (
                                 _iterator136.s();
                                 !(_step136 = _iterator136.n()).done;

                              ) {
                                 var editor = _step136.value;
                                 editor.drag(tx, ty);
                              }
                           } catch (err) {
                              _iterator136.e(err);
                           } finally {
                              _iterator136.f();
                           }
                        },
                     },
                     {
                        key: "rebuild",
                        value: function rebuild(editor) {
                           if (editor.parent === null) {
                              var parent = this.getLayer(editor.pageIndex);
                              if (parent) {
                                 parent.changeParent(editor);
                                 parent.addOrRebuild(editor);
                              } else {
                                 this.addEditor(editor);
                                 this.addToAnnotationStorage(editor);
                                 editor.rebuild();
                              }
                           } else {
                              editor.parent.addOrRebuild(editor);
                           }
                        },
                     },
                     {
                        key: "isEditorHandlingKeyboard",
                        get: function get() {
                           var _this$getActive;
                           return (
                              ((_this$getActive = this.getActive()) === null ||
                              _this$getActive === void 0
                                 ? void 0
                                 : _this$getActive.shouldGetKeyboardEvents()) ||
                              (_classPrivateFieldGet(_selectedEditors, this)
                                 .size === 1 &&
                                 this.firstSelectedEditor.shouldGetKeyboardEvents())
                           );
                        },
                     },
                     {
                        key: "isActive",
                        value: function isActive(editor) {
                           return (
                              _classPrivateFieldGet(_activeEditor, this) ===
                              editor
                           );
                        },
                     },
                     {
                        key: "getActive",
                        value: function getActive() {
                           return _classPrivateFieldGet(_activeEditor, this);
                        },
                     },
                     {
                        key: "getMode",
                        value: function getMode() {
                           return _classPrivateFieldGet(_mode, this);
                        },
                     },
                     {
                        key: "imageManager",
                        get: function get() {
                           return (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                              this,
                              "imageManager",
                              new ImageManager(),
                           );
                        },
                     },
                     {
                        key: "getSelectionBoxes",
                        value: function getSelectionBoxes(textLayer) {
                           if (!textLayer) {
                              return null;
                           }
                           var selection = document.getSelection();
                           for (
                              var i = 0, ii = selection.rangeCount;
                              i < ii;
                              i++
                           ) {
                              if (
                                 !textLayer.contains(
                                    selection.getRangeAt(i)
                                       .commonAncestorContainer,
                                 )
                              ) {
                                 return null;
                              }
                           }
                           var _textLayer$getBoundin2 =
                                 textLayer.getBoundingClientRect(),
                              layerX = _textLayer$getBoundin2.x,
                              layerY = _textLayer$getBoundin2.y,
                              parentWidth = _textLayer$getBoundin2.width,
                              parentHeight = _textLayer$getBoundin2.height;
                           var rotator;
                           switch (
                              textLayer.getAttribute("data-main-rotation")
                           ) {
                              case "90":
                                 rotator = function rotator(x, y, w, h) {
                                    return {
                                       x: (y - layerY) / parentHeight,
                                       y: 1 - (x + w - layerX) / parentWidth,
                                       width: h / parentHeight,
                                       height: w / parentWidth,
                                    };
                                 };
                                 break;
                              case "180":
                                 rotator = function rotator(x, y, w, h) {
                                    return {
                                       x: 1 - (x + w - layerX) / parentWidth,
                                       y: 1 - (y + h - layerY) / parentHeight,
                                       width: w / parentWidth,
                                       height: h / parentHeight,
                                    };
                                 };
                                 break;
                              case "270":
                                 rotator = function rotator(x, y, w, h) {
                                    return {
                                       x: 1 - (y + h - layerY) / parentHeight,
                                       y: (x - layerX) / parentWidth,
                                       width: h / parentHeight,
                                       height: w / parentWidth,
                                    };
                                 };
                                 break;
                              default:
                                 rotator = function rotator(x, y, w, h) {
                                    return {
                                       x: (x - layerX) / parentWidth,
                                       y: (y - layerY) / parentHeight,
                                       width: w / parentWidth,
                                       height: h / parentHeight,
                                    };
                                 };
                                 break;
                           }
                           var boxes = [];
                           for (
                              var _i29 = 0, _ii9 = selection.rangeCount;
                              _i29 < _ii9;
                              _i29++
                           ) {
                              var range = selection.getRangeAt(_i29);
                              if (range.collapsed) {
                                 continue;
                              }
                              var _iterator137 = _createForOfIteratorHelper(
                                    range.getClientRects(),
                                 ),
                                 _step137;
                              try {
                                 for (
                                    _iterator137.s();
                                    !(_step137 = _iterator137.n()).done;

                                 ) {
                                    var _step137$value = _step137.value,
                                       x = _step137$value.x,
                                       y = _step137$value.y,
                                       width = _step137$value.width,
                                       height = _step137$value.height;
                                    if (width === 0 || height === 0) {
                                       continue;
                                    }
                                    boxes.push(rotator(x, y, width, height));
                                 }
                              } catch (err) {
                                 _iterator137.e(err);
                              } finally {
                                 _iterator137.f();
                              }
                           }
                           return boxes.length === 0 ? null : boxes;
                        },
                     },
                     {
                        key: "addChangedExistingAnnotation",
                        value: function addChangedExistingAnnotation(_ref105) {
                           var annotationElementId =
                                 _ref105.annotationElementId,
                              id = _ref105.id;
                           (
                              _classPrivateFieldGet(
                                 _changedExistingAnnotations,
                                 this,
                              ) ||
                              _classPrivateFieldSet(
                                 _changedExistingAnnotations,
                                 this,
                                 new Map(),
                              )
                           ).set(annotationElementId, id);
                        },
                     },
                     {
                        key: "removeChangedExistingAnnotation",
                        value: function removeChangedExistingAnnotation(
                           _ref106,
                        ) {
                           var _classPrivateFieldGet98;
                           var annotationElementId =
                              _ref106.annotationElementId;
                           (_classPrivateFieldGet98 = _classPrivateFieldGet(
                              _changedExistingAnnotations,
                              this,
                           )) === null ||
                              _classPrivateFieldGet98 === void 0 ||
                              _classPrivateFieldGet98["delete"](
                                 annotationElementId,
                              );
                        },
                     },
                     {
                        key: "renderAnnotationElement",
                        value: function renderAnnotationElement(annotation) {
                           var _classPrivateFieldGet99;
                           var editorId =
                              (_classPrivateFieldGet99 = _classPrivateFieldGet(
                                 _changedExistingAnnotations,
                                 this,
                              )) === null || _classPrivateFieldGet99 === void 0
                                 ? void 0
                                 : _classPrivateFieldGet99.get(
                                      annotation.data.id,
                                   );
                           if (!editorId) {
                              return;
                           }
                           var editor = _classPrivateFieldGet(
                              _annotationStorage,
                              this,
                           ).getRawValue(editorId);
                           if (!editor) {
                              return;
                           }
                           if (
                              _classPrivateFieldGet(_mode, this) ===
                                 _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                    .AnnotationEditorType.NONE &&
                              !editor.hasBeenModified
                           ) {
                              return;
                           }
                           editor.renderAnnotationElement(annotation);
                        },
                     },
                  ],
                  [
                     {
                        key: "_keyboardManager",
                        get: function get() {
                           var proto = _AnnotationEditorUIManager.prototype;
                           var arrowChecker = function arrowChecker(self) {
                              return (
                                 _classPrivateFieldGet(
                                    _container2,
                                    self,
                                 ).contains(document.activeElement) &&
                                 document.activeElement.tagName !== "BUTTON" &&
                                 self.hasSomethingToControl()
                              );
                           };
                           var textInputChecker = function textInputChecker(
                              _self,
                              _ref107,
                           ) {
                              var el = _ref107.target;
                              if (el instanceof HTMLInputElement) {
                                 var type = el.type;
                                 return type !== "text" && type !== "number";
                              }
                              return true;
                           };
                           var small = this.TRANSLATE_SMALL;
                           var big = this.TRANSLATE_BIG;
                           return (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                              this,
                              "_keyboardManager",
                              new _KeyboardManager([
                                 [
                                    ["ctrl+a", "mac+meta+a"],
                                    proto.selectAll,
                                    { checker: textInputChecker },
                                 ],
                                 [
                                    ["ctrl+z", "mac+meta+z"],
                                    proto.undo,
                                    { checker: textInputChecker },
                                 ],
                                 [
                                    [
                                       "ctrl+y",
                                       "ctrl+shift+z",
                                       "mac+meta+shift+z",
                                       "ctrl+shift+Z",
                                       "mac+meta+shift+Z",
                                    ],
                                    proto.redo,
                                    { checker: textInputChecker },
                                 ],
                                 [
                                    [
                                       "Backspace",
                                       "alt+Backspace",
                                       "ctrl+Backspace",
                                       "shift+Backspace",
                                       "mac+Backspace",
                                       "mac+alt+Backspace",
                                       "mac+ctrl+Backspace",
                                       "Delete",
                                       "ctrl+Delete",
                                       "shift+Delete",
                                       "mac+Delete",
                                    ],
                                    proto["delete"],
                                    { checker: textInputChecker },
                                 ],
                                 [
                                    ["Enter", "mac+Enter"],
                                    proto.addNewEditorFromKeyboard,
                                    {
                                       checker: function checker(
                                          self,
                                          _ref108,
                                       ) {
                                          var el = _ref108.target;
                                          return (
                                             !(
                                                el instanceof HTMLButtonElement
                                             ) &&
                                             _classPrivateFieldGet(
                                                _container2,
                                                self,
                                             ).contains(el) &&
                                             !self.isEnterHandled
                                          );
                                       },
                                    },
                                 ],
                                 [
                                    [" ", "mac+ "],
                                    proto.addNewEditorFromKeyboard,
                                    {
                                       checker: function checker(
                                          self,
                                          _ref109,
                                       ) {
                                          var el = _ref109.target;
                                          return (
                                             !(
                                                el instanceof HTMLButtonElement
                                             ) &&
                                             _classPrivateFieldGet(
                                                _container2,
                                                self,
                                             ).contains(document.activeElement)
                                          );
                                       },
                                    },
                                 ],
                                 [["Escape", "mac+Escape"], proto.unselectAll],
                                 [
                                    ["ArrowLeft", "mac+ArrowLeft"],
                                    proto.translateSelectedEditors,
                                    {
                                       args: [-small, 0],
                                       checker: arrowChecker,
                                    },
                                 ],
                                 [
                                    ["ctrl+ArrowLeft", "mac+shift+ArrowLeft"],
                                    proto.translateSelectedEditors,
                                    { args: [-big, 0], checker: arrowChecker },
                                 ],
                                 [
                                    ["ArrowRight", "mac+ArrowRight"],
                                    proto.translateSelectedEditors,
                                    { args: [small, 0], checker: arrowChecker },
                                 ],
                                 [
                                    ["ctrl+ArrowRight", "mac+shift+ArrowRight"],
                                    proto.translateSelectedEditors,
                                    { args: [big, 0], checker: arrowChecker },
                                 ],
                                 [
                                    ["ArrowUp", "mac+ArrowUp"],
                                    proto.translateSelectedEditors,
                                    {
                                       args: [0, -small],
                                       checker: arrowChecker,
                                    },
                                 ],
                                 [
                                    ["ctrl+ArrowUp", "mac+shift+ArrowUp"],
                                    proto.translateSelectedEditors,
                                    { args: [0, -big], checker: arrowChecker },
                                 ],
                                 [
                                    ["ArrowDown", "mac+ArrowDown"],
                                    proto.translateSelectedEditors,
                                    { args: [0, small], checker: arrowChecker },
                                 ],
                                 [
                                    ["ctrl+ArrowDown", "mac+shift+ArrowDown"],
                                    proto.translateSelectedEditors,
                                    { args: [0, big], checker: arrowChecker },
                                 ],
                              ]),
                           );
                        },
                     },
                  ],
               );
            })();
            /***/ function _getAnchorElementForSelection(_ref110) {
               var anchorNode = _ref110.anchorNode;
               return anchorNode.nodeType === Node.TEXT_NODE
                  ? anchorNode.parentElement
                  : anchorNode;
            }
            function _displayHighlightToolbar() {
               var selection = document.getSelection();
               if (!selection || selection.isCollapsed) {
                  return;
               }
               var anchorElement = _assertClassBrand(
                  _AnnotationEditorUIManager_brand,
                  this,
                  _getAnchorElementForSelection,
               ).call(this, selection);
               var textLayer = anchorElement.closest(".textLayer");
               var boxes = this.getSelectionBoxes(textLayer);
               if (!boxes) {
                  return;
               }
               _classPrivateFieldGet(_highlightToolbar, this) ||
                  _classPrivateFieldSet(
                     _highlightToolbar,
                     this,
                     new _toolbar_js__WEBPACK_IMPORTED_MODULE_2__.HighlightToolbar(
                        this,
                     ),
                  );
               _classPrivateFieldGet(_highlightToolbar, this).show(
                  textLayer,
                  boxes,
                  this.direction === "ltr",
               );
            }
            function _selectionChange() {
               var _classPrivateFieldGet102,
                  _this100 = this;
               var selection = document.getSelection();
               if (!selection || selection.isCollapsed) {
                  if (_classPrivateFieldGet(_selectedTextNode, this)) {
                     var _classPrivateFieldGet100;
                     (_classPrivateFieldGet100 = _classPrivateFieldGet(
                        _highlightToolbar,
                        this,
                     )) === null ||
                        _classPrivateFieldGet100 === void 0 ||
                        _classPrivateFieldGet100.hide();
                     _classPrivateFieldSet(_selectedTextNode, this, null);
                     _assertClassBrand(
                        _AnnotationEditorUIManager_brand,
                        this,
                        _dispatchUpdateStates,
                     ).call(this, { hasSelectedText: false });
                  }
                  return;
               }
               var anchorNode = selection.anchorNode;
               if (
                  anchorNode === _classPrivateFieldGet(_selectedTextNode, this)
               ) {
                  return;
               }
               var anchorElement = _assertClassBrand(
                  _AnnotationEditorUIManager_brand,
                  this,
                  _getAnchorElementForSelection,
               ).call(this, selection);
               var textLayer = anchorElement.closest(".textLayer");
               if (!textLayer) {
                  if (_classPrivateFieldGet(_selectedTextNode, this)) {
                     var _classPrivateFieldGet101;
                     (_classPrivateFieldGet101 = _classPrivateFieldGet(
                        _highlightToolbar,
                        this,
                     )) === null ||
                        _classPrivateFieldGet101 === void 0 ||
                        _classPrivateFieldGet101.hide();
                     _classPrivateFieldSet(_selectedTextNode, this, null);
                     _assertClassBrand(
                        _AnnotationEditorUIManager_brand,
                        this,
                        _dispatchUpdateStates,
                     ).call(this, { hasSelectedText: false });
                  }
                  return;
               }
               (_classPrivateFieldGet102 = _classPrivateFieldGet(
                  _highlightToolbar,
                  this,
               )) === null ||
                  _classPrivateFieldGet102 === void 0 ||
                  _classPrivateFieldGet102.hide();
               _classPrivateFieldSet(_selectedTextNode, this, anchorNode);
               _assertClassBrand(
                  _AnnotationEditorUIManager_brand,
                  this,
                  _dispatchUpdateStates,
               ).call(this, { hasSelectedText: true });
               if (
                  _classPrivateFieldGet(_mode, this) !==
                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                        .AnnotationEditorType.HIGHLIGHT &&
                  _classPrivateFieldGet(_mode, this) !==
                     _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                        .AnnotationEditorType.NONE
               ) {
                  return;
               }
               if (
                  _classPrivateFieldGet(_mode, this) ===
                  _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                     .AnnotationEditorType.HIGHLIGHT
               ) {
                  this.showAllEditors("highlight", true, true);
               }
               _classPrivateFieldSet(
                  _highlightWhenShiftUp,
                  this,
                  this.isShiftKeyDown,
               );
               if (!this.isShiftKeyDown) {
                  var _pointerup = function pointerup(e) {
                     if (e.type === "pointerup" && e.button !== 0) {
                        return;
                     }
                     window.removeEventListener("pointerup", _pointerup);
                     window.removeEventListener("blur", _pointerup);
                     if (e.type === "pointerup") {
                        _assertClassBrand(
                           _AnnotationEditorUIManager_brand,
                           _this100,
                           _onSelectEnd,
                        ).call(_this100, "main_toolbar");
                     }
                  };
                  window.addEventListener("pointerup", _pointerup);
                  window.addEventListener("blur", _pointerup);
               }
            }
            function _onSelectEnd() {
               var methodOfCreation =
                  arguments.length > 0 && arguments[0] !== undefined
                     ? arguments[0]
                     : "";
               if (
                  _classPrivateFieldGet(_mode, this) ===
                  _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                     .AnnotationEditorType.HIGHLIGHT
               ) {
                  this.highlightSelection(methodOfCreation);
               } else if (
                  _classPrivateFieldGet(_enableHighlightFloatingButton, this)
               ) {
                  _assertClassBrand(
                     _AnnotationEditorUIManager_brand,
                     this,
                     _displayHighlightToolbar,
                  ).call(this);
               }
            }
            function _addSelectionListener() {
               document.addEventListener(
                  "selectionchange",
                  _classPrivateFieldGet(_boundSelectionChange, this),
               );
            }
            function _removeSelectionListener() {
               document.removeEventListener(
                  "selectionchange",
                  _classPrivateFieldGet(_boundSelectionChange, this),
               );
            }
            function _addFocusManager() {
               window.addEventListener(
                  "focus",
                  _classPrivateFieldGet(_boundFocus, this),
               );
               window.addEventListener(
                  "blur",
                  _classPrivateFieldGet(_boundBlur, this),
               );
            }
            function _removeFocusManager() {
               window.removeEventListener(
                  "focus",
                  _classPrivateFieldGet(_boundFocus, this),
               );
               window.removeEventListener(
                  "blur",
                  _classPrivateFieldGet(_boundBlur, this),
               );
            }
            function _addKeyboardManager() {
               window.addEventListener(
                  "keydown",
                  _classPrivateFieldGet(_boundKeydown2, this),
               );
               window.addEventListener(
                  "keyup",
                  _classPrivateFieldGet(_boundKeyup, this),
               );
            }
            function _removeKeyboardManager() {
               window.removeEventListener(
                  "keydown",
                  _classPrivateFieldGet(_boundKeydown2, this),
               );
               window.removeEventListener(
                  "keyup",
                  _classPrivateFieldGet(_boundKeyup, this),
               );
            }
            function _addCopyPasteListeners() {
               document.addEventListener(
                  "copy",
                  _classPrivateFieldGet(_boundCopy, this),
               );
               document.addEventListener(
                  "cut",
                  _classPrivateFieldGet(_boundCut, this),
               );
               document.addEventListener(
                  "paste",
                  _classPrivateFieldGet(_boundPaste, this),
               );
            }
            function _removeCopyPasteListeners() {
               document.removeEventListener(
                  "copy",
                  _classPrivateFieldGet(_boundCopy, this),
               );
               document.removeEventListener(
                  "cut",
                  _classPrivateFieldGet(_boundCut, this),
               );
               document.removeEventListener(
                  "paste",
                  _classPrivateFieldGet(_boundPaste, this),
               );
            }
            function _dispatchUpdateStates(details) {
               var _this101 = this;
               var hasChanged = Object.entries(details).some(
                  function (_ref111) {
                     var _ref112 = _slicedToArray(_ref111, 2),
                        key = _ref112[0],
                        value = _ref112[1];
                     return (
                        _classPrivateFieldGet(_previousStates, _this101)[
                           key
                        ] !== value
                     );
                  },
               );
               if (hasChanged) {
                  this._eventBus.dispatch("annotationeditorstateschanged", {
                     source: this,
                     details: Object.assign(
                        _classPrivateFieldGet(_previousStates, this),
                        details,
                     ),
                  });
                  if (
                     _classPrivateFieldGet(_mode, this) ===
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                           .AnnotationEditorType.HIGHLIGHT &&
                     details.hasSelectedEditor === false
                  ) {
                     _assertClassBrand(
                        _AnnotationEditorUIManager_brand,
                        this,
                        _dispatchUpdateUI,
                     ).call(this, [
                        [
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                              .AnnotationEditorParamsType.HIGHLIGHT_FREE,
                           true,
                        ],
                     ]);
                  }
               }
            }
            function _dispatchUpdateUI(details) {
               this._eventBus.dispatch("annotationeditorparamschanged", {
                  source: this,
                  details: details,
               });
            }
            function _enableAll() {
               if (!_classPrivateFieldGet(_isEnabled, this)) {
                  _classPrivateFieldSet(_isEnabled, this, true);
                  var _iterator138 = _createForOfIteratorHelper(
                        _classPrivateFieldGet(_allLayers, this).values(),
                     ),
                     _step138;
                  try {
                     for (
                        _iterator138.s();
                        !(_step138 = _iterator138.n()).done;

                     ) {
                        var layer = _step138.value;
                        layer.enable();
                     }
                  } catch (err) {
                     _iterator138.e(err);
                  } finally {
                     _iterator138.f();
                  }
                  var _iterator139 = _createForOfIteratorHelper(
                        _classPrivateFieldGet(_allEditors, this).values(),
                     ),
                     _step139;
                  try {
                     for (
                        _iterator139.s();
                        !(_step139 = _iterator139.n()).done;

                     ) {
                        var editor = _step139.value;
                        editor.enable();
                     }
                  } catch (err) {
                     _iterator139.e(err);
                  } finally {
                     _iterator139.f();
                  }
               }
            }
            function _disableAll() {
               this.unselectAll();
               if (_classPrivateFieldGet(_isEnabled, this)) {
                  _classPrivateFieldSet(_isEnabled, this, false);
                  var _iterator140 = _createForOfIteratorHelper(
                        _classPrivateFieldGet(_allLayers, this).values(),
                     ),
                     _step140;
                  try {
                     for (
                        _iterator140.s();
                        !(_step140 = _iterator140.n()).done;

                     ) {
                        var layer = _step140.value;
                        layer.disable();
                     }
                  } catch (err) {
                     _iterator140.e(err);
                  } finally {
                     _iterator140.f();
                  }
                  var _iterator141 = _createForOfIteratorHelper(
                        _classPrivateFieldGet(_allEditors, this).values(),
                     ),
                     _step141;
                  try {
                     for (
                        _iterator141.s();
                        !(_step141 = _iterator141.n()).done;

                     ) {
                        var editor = _step141.value;
                        editor.disable();
                     }
                  } catch (err) {
                     _iterator141.e(err);
                  } finally {
                     _iterator141.f();
                  }
               }
            }
            function _addEditorToLayer(editor) {
               var layer = _classPrivateFieldGet(_allLayers, this).get(
                  editor.pageIndex,
               );
               if (layer) {
                  layer.addOrRebuild(editor);
               } else {
                  this.addEditor(editor);
                  this.addToAnnotationStorage(editor);
               }
            }
            function _get_lastSelectedEditor(_this94) {
               var ed = null;
               var _iterator142 = _createForOfIteratorHelper(
                     _classPrivateFieldGet(_selectedEditors, _this94),
                  ),
                  _step142;
               try {
                  for (
                     _iterator142.s();
                     !(_step142 = _iterator142.n()).done;

                  ) {
                     ed = _step142.value;
                  }
               } catch (err) {
                  _iterator142.e(err);
               } finally {
                  _iterator142.f();
               }
               return ed;
            }
            function _isEmpty() {
               if (_classPrivateFieldGet(_allEditors, this).size === 0) {
                  return true;
               }
               if (_classPrivateFieldGet(_allEditors, this).size === 1) {
                  var _iterator143 = _createForOfIteratorHelper(
                        _classPrivateFieldGet(_allEditors, this).values(),
                     ),
                     _step143;
                  try {
                     for (
                        _iterator143.s();
                        !(_step143 = _iterator143.n()).done;

                     ) {
                        var editor = _step143.value;
                        return editor.isEmpty();
                     }
                  } catch (err) {
                     _iterator143.e(err);
                  } finally {
                     _iterator143.f();
                  }
               }
               return false;
            }
            function _selectEditors(editors) {
               var _iterator144 = _createForOfIteratorHelper(
                     _classPrivateFieldGet(_selectedEditors, this),
                  ),
                  _step144;
               try {
                  for (
                     _iterator144.s();
                     !(_step144 = _iterator144.n()).done;

                  ) {
                     var editor = _step144.value;
                     editor.unselect();
                  }
               } catch (err) {
                  _iterator144.e(err);
               } finally {
                  _iterator144.f();
               }
               _classPrivateFieldGet(_selectedEditors, this).clear();
               var _iterator145 = _createForOfIteratorHelper(editors),
                  _step145;
               try {
                  for (
                     _iterator145.s();
                     !(_step145 = _iterator145.n()).done;

                  ) {
                     var _editor7 = _step145.value;
                     if (_editor7.isEmpty()) {
                        continue;
                     }
                     _classPrivateFieldGet(_selectedEditors, this).add(
                        _editor7,
                     );
                     _editor7.select();
                  }
               } catch (err) {
                  _iterator145.e(err);
               } finally {
                  _iterator145.f();
               }
               _assertClassBrand(
                  _AnnotationEditorUIManager_brand,
                  this,
                  _dispatchUpdateStates,
               ).call(this, { hasSelectedEditor: this.hasSelection });
            }
            _defineProperty(_AnnotationEditorUIManager, "TRANSLATE_SMALL", 1);
            _defineProperty(_AnnotationEditorUIManager, "TRANSLATE_BIG", 10);
         },
         /***/ 94: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ PDFFetchStream: function PDFFetchStream() {
                  return /* binding */ _PDFFetchStream;
               } /* harmony export */,
            });
            /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(292);
            /* harmony import */ var _network_utils_js__WEBPACK_IMPORTED_MODULE_1__ =
               __webpack_require__(490);
            function createFetchOptions(
               headers,
               withCredentials,
               abortController,
            ) {
               return {
                  method: "GET",
                  headers: headers,
                  signal: abortController.signal,
                  mode: "cors",
                  credentials: withCredentials ? "include" : "same-origin",
                  redirect: "follow",
               };
            }
            function createHeaders(httpHeaders) {
               var headers = new Headers();
               for (var property in httpHeaders) {
                  var value = httpHeaders[property];
                  if (value === undefined) {
                     continue;
                  }
                  headers.append(property, value);
               }
               return headers;
            }
            function getArrayBuffer(val) {
               if (val instanceof Uint8Array) {
                  return val.buffer;
               }
               if (val instanceof ArrayBuffer) {
                  return val;
               }
               (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                  "getArrayBuffer - unexpected data format: ".concat(val),
               );
               return new Uint8Array(val).buffer;
            }
            var _PDFFetchStream = /*#__PURE__*/ (function () {
               function _PDFFetchStream(source) {
                  _classCallCheck(this, _PDFFetchStream);
                  this.source = source;
                  this.isHttp = /^https?:/i.test(source.url);
                  this.httpHeaders = (this.isHttp && source.httpHeaders) || {};
                  this._fullRequestReader = null;
                  this._rangeRequestReaders = [];
               }
               return _createClass(_PDFFetchStream, [
                  {
                     key: "_progressiveDataLength",
                     get: function get() {
                        var _this$_fullRequestRea, _this$_fullRequestRea2;
                        return (_this$_fullRequestRea =
                           (_this$_fullRequestRea2 =
                              this._fullRequestReader) === null ||
                           _this$_fullRequestRea2 === void 0
                              ? void 0
                              : _this$_fullRequestRea2._loaded) !== null &&
                           _this$_fullRequestRea !== void 0
                           ? _this$_fullRequestRea
                           : 0;
                     },
                  },
                  {
                     key: "getFullReader",
                     value: function getFullReader() {
                        (0,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                           !this._fullRequestReader,
                           "PDFFetchStream.getFullReader can only be called once.",
                        );
                        this._fullRequestReader = new PDFFetchStreamReader(
                           this,
                        );
                        return this._fullRequestReader;
                     },
                  },
                  {
                     key: "getRangeReader",
                     value: function getRangeReader(begin, end) {
                        if (end <= this._progressiveDataLength) {
                           return null;
                        }
                        var reader = new PDFFetchStreamRangeReader(
                           this,
                           begin,
                           end,
                        );
                        this._rangeRequestReaders.push(reader);
                        return reader;
                     },
                  },
                  {
                     key: "cancelAllRequests",
                     value: function cancelAllRequests(reason) {
                        var _this$_fullRequestRea3;
                        (_this$_fullRequestRea3 = this._fullRequestReader) ===
                           null ||
                           _this$_fullRequestRea3 === void 0 ||
                           _this$_fullRequestRea3.cancel(reason);
                        var _iterator146 = _createForOfIteratorHelper(
                              this._rangeRequestReaders.slice(0),
                           ),
                           _step146;
                        try {
                           for (
                              _iterator146.s();
                              !(_step146 = _iterator146.n()).done;

                           ) {
                              var reader = _step146.value;
                              reader.cancel(reason);
                           }
                        } catch (err) {
                           _iterator146.e(err);
                        } finally {
                           _iterator146.f();
                        }
                     },
                  },
               ]);
            })();
            var PDFFetchStreamReader = /*#__PURE__*/ (function () {
               function PDFFetchStreamReader(stream) {
                  var _this102 = this;
                  _classCallCheck(this, PDFFetchStreamReader);
                  this._stream = stream;
                  this._reader = null;
                  this._loaded = 0;
                  this._filename = null;
                  var source = stream.source;
                  this._withCredentials = source.withCredentials || false;
                  this._contentLength = source.length;
                  this._headersCapability = Promise.withResolvers();
                  this._disableRange = source.disableRange || false;
                  this._rangeChunkSize = source.rangeChunkSize;
                  if (!this._rangeChunkSize && !this._disableRange) {
                     this._disableRange = true;
                  }
                  this._abortController = new AbortController();
                  this._isStreamingSupported = !source.disableStream;
                  this._isRangeSupported = !source.disableRange;
                  this._headers = createHeaders(this._stream.httpHeaders);
                  var url = source.url;
                  fetch(
                     url,
                     createFetchOptions(
                        this._headers,
                        this._withCredentials,
                        this._abortController,
                     ),
                  )
                     .then(function (response) {
                        if (
                           !(0,
                           _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateResponseStatus)(
                              response.status,
                           )
                        ) {
                           throw (0,
                           _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.createResponseStatusError)(
                              response.status,
                              url,
                           );
                        }
                        _this102._reader = response.body.getReader();
                        _this102._headersCapability.resolve();
                        var getResponseHeader = function getResponseHeader(
                           name,
                        ) {
                           return response.headers.get(name);
                        };
                        var _ref114 = (0,
                           _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateRangeRequestCapabilities)(
                              {
                                 getResponseHeader: getResponseHeader,
                                 isHttp: _this102._stream.isHttp,
                                 rangeChunkSize: _this102._rangeChunkSize,
                                 disableRange: _this102._disableRange,
                              },
                           ),
                           allowRangeRequests = _ref114.allowRangeRequests,
                           suggestedLength = _ref114.suggestedLength;
                        _this102._isRangeSupported = allowRangeRequests;
                        _this102._contentLength =
                           suggestedLength || _this102._contentLength;
                        _this102._filename = (0,
                        _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.extractFilenameFromHeader)(
                           getResponseHeader,
                        );
                        if (
                           !_this102._isStreamingSupported &&
                           _this102._isRangeSupported
                        ) {
                           _this102.cancel(
                              new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(
                                 "Streaming is disabled.",
                              ),
                           );
                        }
                     })
                     ["catch"](this._headersCapability.reject);
                  this.onProgress = null;
               }
               return _createClass(PDFFetchStreamReader, [
                  {
                     key: "headersReady",
                     get: function get() {
                        return this._headersCapability.promise;
                     },
                  },
                  {
                     key: "filename",
                     get: function get() {
                        return this._filename;
                     },
                  },
                  {
                     key: "contentLength",
                     get: function get() {
                        return this._contentLength;
                     },
                  },
                  {
                     key: "isRangeSupported",
                     get: function get() {
                        return this._isRangeSupported;
                     },
                  },
                  {
                     key: "isStreamingSupported",
                     get: function get() {
                        return this._isStreamingSupported;
                     },
                  },
                  {
                     key: "read",
                     value: (function () {
                        var _read = _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(function _callee22() {
                              var _this$onProgress;
                              var _yield$this$_reader$r, value, done;
                              return _regenerator().w(
                                 function (_context23) {
                                    while (1)
                                       switch (_context23.n) {
                                          case 0:
                                             _context23.n = 1;
                                             return this._headersCapability
                                                .promise;
                                          case 1:
                                             _context23.n = 2;
                                             return this._reader.read();
                                          case 2:
                                             _yield$this$_reader$r =
                                                _context23.v;
                                             value =
                                                _yield$this$_reader$r.value;
                                             done = _yield$this$_reader$r.done;
                                             if (!done) {
                                                _context23.n = 3;
                                                break;
                                             }
                                             return _context23.a(2, {
                                                value: value,
                                                done: done,
                                             });
                                          case 3:
                                             this._loaded += value.byteLength;
                                             (_this$onProgress =
                                                this.onProgress) === null ||
                                                _this$onProgress === void 0 ||
                                                _this$onProgress.call(this, {
                                                   loaded: this._loaded,
                                                   total: this._contentLength,
                                                });
                                             return _context23.a(2, {
                                                value: getArrayBuffer(value),
                                                done: false,
                                             });
                                       }
                                 },
                                 _callee22,
                                 this,
                              );
                           }),
                        );
                        function read() {
                           return _read.apply(this, arguments);
                        }
                        return read;
                     })(),
                  },
                  {
                     key: "cancel",
                     value: function cancel(reason) {
                        var _this$_reader;
                        (_this$_reader = this._reader) === null ||
                           _this$_reader === void 0 ||
                           _this$_reader.cancel(reason);
                        this._abortController.abort();
                     },
                  },
               ]);
            })();
            var PDFFetchStreamRangeReader = /*#__PURE__*/ (function () {
               function PDFFetchStreamRangeReader(stream, begin, end) {
                  var _this103 = this;
                  _classCallCheck(this, PDFFetchStreamRangeReader);
                  this._stream = stream;
                  this._reader = null;
                  this._loaded = 0;
                  var source = stream.source;
                  this._withCredentials = source.withCredentials || false;
                  this._readCapability = Promise.withResolvers();
                  this._isStreamingSupported = !source.disableStream;
                  this._abortController = new AbortController();
                  this._headers = createHeaders(this._stream.httpHeaders);
                  this._headers.append(
                     "Range",
                     "bytes=".concat(begin, "-").concat(end - 1),
                  );
                  var url = source.url;
                  fetch(
                     url,
                     createFetchOptions(
                        this._headers,
                        this._withCredentials,
                        this._abortController,
                     ),
                  )
                     .then(function (response) {
                        if (
                           !(0,
                           _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateResponseStatus)(
                              response.status,
                           )
                        ) {
                           throw (0,
                           _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.createResponseStatusError)(
                              response.status,
                              url,
                           );
                        }
                        _this103._readCapability.resolve();
                        _this103._reader = response.body.getReader();
                     })
                     ["catch"](this._readCapability.reject);
                  this.onProgress = null;
               }
               return _createClass(PDFFetchStreamRangeReader, [
                  {
                     key: "isStreamingSupported",
                     get: function get() {
                        return this._isStreamingSupported;
                     },
                  },
                  {
                     key: "read",
                     value: (function () {
                        var _read2 = _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(function _callee23() {
                              var _this$onProgress2;
                              var _yield$this$_reader$r2, value, done;
                              return _regenerator().w(
                                 function (_context24) {
                                    while (1)
                                       switch (_context24.n) {
                                          case 0:
                                             _context24.n = 1;
                                             return this._readCapability
                                                .promise;
                                          case 1:
                                             _context24.n = 2;
                                             return this._reader.read();
                                          case 2:
                                             _yield$this$_reader$r2 =
                                                _context24.v;
                                             value =
                                                _yield$this$_reader$r2.value;
                                             done = _yield$this$_reader$r2.done;
                                             if (!done) {
                                                _context24.n = 3;
                                                break;
                                             }
                                             return _context24.a(2, {
                                                value: value,
                                                done: done,
                                             });
                                          case 3:
                                             this._loaded += value.byteLength;
                                             (_this$onProgress2 =
                                                this.onProgress) === null ||
                                                _this$onProgress2 === void 0 ||
                                                _this$onProgress2.call(this, {
                                                   loaded: this._loaded,
                                                });
                                             return _context24.a(2, {
                                                value: getArrayBuffer(value),
                                                done: false,
                                             });
                                       }
                                 },
                                 _callee23,
                                 this,
                              );
                           }),
                        );
                        function read() {
                           return _read2.apply(this, arguments);
                        }
                        return read;
                     })(),
                  },
                  {
                     key: "cancel",
                     value: function cancel(reason) {
                        var _this$_reader2;
                        (_this$_reader2 = this._reader) === null ||
                           _this$_reader2 === void 0 ||
                           _this$_reader2.cancel(reason);
                        this._abortController.abort();
                     },
                  },
               ]);
            })(); /***/
         },
         /***/ 10: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ FontFaceObject: function FontFaceObject() {
                  return /* binding */ _FontFaceObject;
               },
               /* harmony export */ FontLoader: function FontLoader() {
                  return /* binding */ _FontLoader;
               } /* harmony export */,
            });
            /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(292);
            var _systemFonts = /*#__PURE__*/ new WeakMap();
            var _FontLoader = /*#__PURE__*/ (function () {
               function _FontLoader(_ref115) {
                  var _ref115$ownerDocument = _ref115.ownerDocument,
                     ownerDocument =
                        _ref115$ownerDocument === void 0
                           ? globalThis.document
                           : _ref115$ownerDocument,
                     _ref115$styleElement = _ref115.styleElement,
                     styleElement =
                        _ref115$styleElement === void 0
                           ? null
                           : _ref115$styleElement;
                  _classCallCheck(this, _FontLoader);
                  _classPrivateFieldInitSpec(this, _systemFonts, new Set());
                  this._document = ownerDocument;
                  this.nativeFontFaces = new Set();
                  this.styleElement = null;
                  this.loadingRequests = [];
                  this.loadTestFontId = 0;
               }
               return _createClass(_FontLoader, [
                  {
                     key: "addNativeFontFace",
                     value: function addNativeFontFace(nativeFontFace) {
                        this.nativeFontFaces.add(nativeFontFace);
                        this._document.fonts.add(nativeFontFace);
                     },
                  },
                  {
                     key: "removeNativeFontFace",
                     value: function removeNativeFontFace(nativeFontFace) {
                        this.nativeFontFaces["delete"](nativeFontFace);
                        this._document.fonts["delete"](nativeFontFace);
                     },
                  },
                  {
                     key: "insertRule",
                     value: function insertRule(rule) {
                        if (!this.styleElement) {
                           this.styleElement =
                              this._document.createElement("style");
                           this._document.documentElement
                              .getElementsByTagName("head")[0]
                              .append(this.styleElement);
                        }
                        var styleSheet = this.styleElement.sheet;
                        styleSheet.insertRule(rule, styleSheet.cssRules.length);
                     },
                  },
                  {
                     key: "clear",
                     value: function clear() {
                        var _iterator147 = _createForOfIteratorHelper(
                              this.nativeFontFaces,
                           ),
                           _step147;
                        try {
                           for (
                              _iterator147.s();
                              !(_step147 = _iterator147.n()).done;

                           ) {
                              var nativeFontFace = _step147.value;
                              this._document.fonts["delete"](nativeFontFace);
                           }
                        } catch (err) {
                           _iterator147.e(err);
                        } finally {
                           _iterator147.f();
                        }
                        this.nativeFontFaces.clear();
                        _classPrivateFieldGet(_systemFonts, this).clear();
                        if (this.styleElement) {
                           this.styleElement.remove();
                           this.styleElement = null;
                        }
                     },
                  },
                  {
                     key: "loadSystemFont",
                     value: (function () {
                        var _loadSystemFont = _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(
                              function _callee24(_ref116) {
                                 var info,
                                    _inspectFont,
                                    loadedName,
                                    src,
                                    style,
                                    fontFace,
                                    _t13;
                                 return _regenerator().w(
                                    function (_context25) {
                                       while (1)
                                          switch (
                                             (_context25.p = _context25.n)
                                          ) {
                                             case 0:
                                                ((info =
                                                   _ref116.systemFontInfo),
                                                   (_inspectFont =
                                                      _ref116._inspectFont));
                                                if (
                                                   !(
                                                      !info ||
                                                      _classPrivateFieldGet(
                                                         _systemFonts,
                                                         this,
                                                      ).has(info.loadedName)
                                                   )
                                                ) {
                                                   _context25.n = 1;
                                                   break;
                                                }
                                                return _context25.a(2);
                                             case 1:
                                                (0,
                                                _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                                                   !this.disableFontFace,
                                                   "loadSystemFont shouldn't be called when `disableFontFace` is set.",
                                                );
                                                if (
                                                   !this
                                                      .isFontLoadingAPISupported
                                                ) {
                                                   _context25.n = 6;
                                                   break;
                                                }
                                                ((loadedName = info.loadedName),
                                                   (src = info.src),
                                                   (style = info.style));
                                                fontFace = new FontFace(
                                                   loadedName,
                                                   src,
                                                   style,
                                                );
                                                this.addNativeFontFace(
                                                   fontFace,
                                                );
                                                _context25.p = 2;
                                                _context25.n = 3;
                                                return fontFace.load();
                                             case 3:
                                                _classPrivateFieldGet(
                                                   _systemFonts,
                                                   this,
                                                ).add(loadedName);
                                                _inspectFont === null ||
                                                   _inspectFont === void 0 ||
                                                   _inspectFont(info);
                                                _context25.n = 5;
                                                break;
                                             case 4:
                                                _context25.p = 4;
                                                _t13 = _context25.v;
                                                (0,
                                                _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                                                   "Cannot load system font: ".concat(
                                                      info.baseFontName,
                                                      ", installing it could help to improve PDF rendering.",
                                                   ),
                                                );
                                                this.removeNativeFontFace(
                                                   fontFace,
                                                );
                                             case 5:
                                                return _context25.a(2);
                                             case 6:
                                                (0,
                                                _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(
                                                   "Not implemented: loadSystemFont without the Font Loading API.",
                                                );
                                             case 7:
                                                return _context25.a(2);
                                          }
                                    },
                                    _callee24,
                                    this,
                                    [[2, 4]],
                                 );
                              },
                           ),
                        );
                        function loadSystemFont(_x22) {
                           return _loadSystemFont.apply(this, arguments);
                        }
                        return loadSystemFont;
                     })(),
                  },
                  {
                     key: "bind",
                     value: (function () {
                        var _bind = _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(
                              function _callee25(font) {
                                 var _this104 = this;
                                 var nativeFontFace, rule, _t14;
                                 return _regenerator().w(
                                    function (_context26) {
                                       while (1)
                                          switch (
                                             (_context26.p = _context26.n)
                                          ) {
                                             case 0:
                                                if (
                                                   !(
                                                      font.attached ||
                                                      (font.missingFile &&
                                                         !font.systemFontInfo)
                                                   )
                                                ) {
                                                   _context26.n = 1;
                                                   break;
                                                }
                                                return _context26.a(2);
                                             case 1:
                                                font.attached = true;
                                                if (!font.systemFontInfo) {
                                                   _context26.n = 3;
                                                   break;
                                                }
                                                _context26.n = 2;
                                                return this.loadSystemFont(
                                                   font,
                                                );
                                             case 2:
                                                return _context26.a(2);
                                             case 3:
                                                if (
                                                   !this
                                                      .isFontLoadingAPISupported
                                                ) {
                                                   _context26.n = 8;
                                                   break;
                                                }
                                                nativeFontFace =
                                                   font.createNativeFontFace();
                                                if (!nativeFontFace) {
                                                   _context26.n = 7;
                                                   break;
                                                }
                                                this.addNativeFontFace(
                                                   nativeFontFace,
                                                );
                                                _context26.p = 4;
                                                _context26.n = 5;
                                                return nativeFontFace.loaded;
                                             case 5:
                                                _context26.n = 7;
                                                break;
                                             case 6:
                                                _context26.p = 6;
                                                _t14 = _context26.v;
                                                (0,
                                                _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                                                   "Failed to load font '"
                                                      .concat(
                                                         nativeFontFace.family,
                                                         "': '",
                                                      )
                                                      .concat(_t14, "'."),
                                                );
                                                font.disableFontFace = true;
                                                throw _t14;
                                             case 7:
                                                return _context26.a(2);
                                             case 8:
                                                rule =
                                                   font.createFontFaceRule();
                                                if (!rule) {
                                                   _context26.n = 10;
                                                   break;
                                                }
                                                this.insertRule(rule);
                                                if (
                                                   !this
                                                      .isSyncFontLoadingSupported
                                                ) {
                                                   _context26.n = 9;
                                                   break;
                                                }
                                                return _context26.a(2);
                                             case 9:
                                                _context26.n = 10;
                                                return new Promise(function (
                                                   resolve,
                                                ) {
                                                   var request =
                                                      _this104._queueLoadingCallback(
                                                         resolve,
                                                      );
                                                   _this104._prepareFontLoadEvent(
                                                      font,
                                                      request,
                                                   );
                                                });
                                             case 10:
                                                return _context26.a(2);
                                          }
                                    },
                                    _callee25,
                                    this,
                                    [[4, 6]],
                                 );
                              },
                           ),
                        );
                        function bind(_x23) {
                           return _bind.apply(this, arguments);
                        }
                        return bind;
                     })(),
                  },
                  {
                     key: "isFontLoadingAPISupported",
                     get: function get() {
                        var _this$_document;
                        var hasFonts = !!(
                           (_this$_document = this._document) !== null &&
                           _this$_document !== void 0 &&
                           _this$_document.fonts
                        );
                        return (0,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                           this,
                           "isFontLoadingAPISupported",
                           hasFonts,
                        );
                     },
                  },
                  {
                     key: "isSyncFontLoadingSupported",
                     get: function get() {
                        var _navigator;
                        var supported = false;
                        if (
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS
                        ) {
                           supported = true;
                        } else if (
                           typeof navigator !== "undefined" &&
                           typeof ((_navigator = navigator) === null ||
                           _navigator === void 0
                              ? void 0
                              : _navigator.userAgent) === "string" &&
                           /Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(
                              navigator.userAgent,
                           )
                        ) {
                           supported = true;
                        }
                        return (0,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                           this,
                           "isSyncFontLoadingSupported",
                           supported,
                        );
                     },
                  },
                  {
                     key: "_queueLoadingCallback",
                     value: function _queueLoadingCallback(callback) {
                        function completeRequest() {
                           (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                              !request.done,
                              "completeRequest() cannot be called twice.",
                           );
                           request.done = true;
                           while (
                              loadingRequests.length > 0 &&
                              loadingRequests[0].done
                           ) {
                              var otherRequest = loadingRequests.shift();
                              setTimeout(otherRequest.callback, 0);
                           }
                        }
                        var loadingRequests = this.loadingRequests;
                        var request = {
                           done: false,
                           complete: completeRequest,
                           callback: callback,
                        };
                        loadingRequests.push(request);
                        return request;
                     },
                  },
                  {
                     key: "_loadTestFont",
                     get: function get() {
                        var testFont = atob(
                           "T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA" +
                              "FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA" +
                              "ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA" +
                              "AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1" +
                              "AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD" +
                              "6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM" +
                              "AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D" +
                              "IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA" +
                              "AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA" +
                              "AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB" +
                              "AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY" +
                              "AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA" +
                              "AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                              "AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                              "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                              "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                              "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                              "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA" +
                              "AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC" +
                              "AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3" +
                              "Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj" +
                              "FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==",
                        );
                        return (0,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow)(
                           this,
                           "_loadTestFont",
                           testFont,
                        );
                     },
                  },
                  {
                     key: "_prepareFontLoadEvent",
                     value: function _prepareFontLoadEvent(font, request) {
                        function int32(data, offset) {
                           return (
                              (data.charCodeAt(offset) << 24) |
                              (data.charCodeAt(offset + 1) << 16) |
                              (data.charCodeAt(offset + 2) << 8) |
                              (data.charCodeAt(offset + 3) & 0xff)
                           );
                        }
                        function spliceString(s, offset, remove, insert) {
                           var chunk1 = s.substring(0, offset);
                           var chunk2 = s.substring(offset + remove);
                           return chunk1 + insert + chunk2;
                        }
                        var i, ii;
                        var canvas = this._document.createElement("canvas");
                        canvas.width = 1;
                        canvas.height = 1;
                        var ctx = canvas.getContext("2d");
                        var called = 0;
                        function isFontReady(name, callback) {
                           if (++called > 30) {
                              (0,
                              _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                                 "Load test font never loaded.",
                              );
                              callback();
                              return;
                           }
                           ctx.font = "30px " + name;
                           ctx.fillText(".", 0, 20);
                           var imageData = ctx.getImageData(0, 0, 1, 1);
                           if (imageData.data[3] > 0) {
                              callback();
                              return;
                           }
                           setTimeout(isFontReady.bind(null, name, callback));
                        }
                        var loadTestFontId = "lt"
                           .concat(Date.now())
                           .concat(this.loadTestFontId++);
                        var data = this._loadTestFont;
                        var COMMENT_OFFSET = 976;
                        data = spliceString(
                           data,
                           COMMENT_OFFSET,
                           loadTestFontId.length,
                           loadTestFontId,
                        );
                        var CFF_CHECKSUM_OFFSET = 16;
                        var XXXX_VALUE = 0x58585858;
                        var checksum = int32(data, CFF_CHECKSUM_OFFSET);
                        for (
                           i = 0, ii = loadTestFontId.length - 3;
                           i < ii;
                           i += 4
                        ) {
                           checksum =
                              (checksum -
                                 XXXX_VALUE +
                                 int32(loadTestFontId, i)) |
                              0;
                        }
                        if (i < loadTestFontId.length) {
                           checksum =
                              (checksum -
                                 XXXX_VALUE +
                                 int32(loadTestFontId + "XXX", i)) |
                              0;
                        }
                        data = spliceString(
                           data,
                           CFF_CHECKSUM_OFFSET,
                           4,
                           (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.string32)(
                              checksum,
                           ),
                        );
                        var url = "url(data:font/opentype;base64,".concat(
                           btoa(data),
                           ");",
                        );
                        var rule = '@font-face {font-family:"'
                           .concat(loadTestFontId, '";src:')
                           .concat(url, "}");
                        this.insertRule(rule);
                        var div = this._document.createElement("div");
                        div.style.visibility = "hidden";
                        div.style.width = div.style.height = "10px";
                        div.style.position = "absolute";
                        div.style.top = div.style.left = "0px";
                        for (
                           var _i30 = 0,
                              _arr = [font.loadedName, loadTestFontId];
                           _i30 < _arr.length;
                           _i30++
                        ) {
                           var name = _arr[_i30];
                           var span = this._document.createElement("span");
                           span.textContent = "Hi";
                           span.style.fontFamily = name;
                           div.append(span);
                        }
                        this._document.body.append(div);
                        isFontReady(loadTestFontId, function () {
                           div.remove();
                           request.complete();
                        });
                     },
                  },
               ]);
            })();
            var _FontFaceObject = /*#__PURE__*/ (function () {
               function _FontFaceObject(translatedData, _ref117) {
                  var _ref117$disableFontFa = _ref117.disableFontFace,
                     disableFontFace =
                        _ref117$disableFontFa === void 0
                           ? false
                           : _ref117$disableFontFa,
                     _ref117$ignoreErrors = _ref117.ignoreErrors,
                     ignoreErrors =
                        _ref117$ignoreErrors === void 0
                           ? false
                           : _ref117$ignoreErrors,
                     _ref117$inspectFont = _ref117.inspectFont,
                     inspectFont =
                        _ref117$inspectFont === void 0
                           ? null
                           : _ref117$inspectFont;
                  _classCallCheck(this, _FontFaceObject);
                  this.compiledGlyphs = Object.create(null);
                  for (var i in translatedData) {
                     this[i] = translatedData[i];
                  }
                  this.disableFontFace = disableFontFace === true;
                  this.ignoreErrors = ignoreErrors === true;
                  this._inspectFont = inspectFont;
               }
               return _createClass(_FontFaceObject, [
                  {
                     key: "createNativeFontFace",
                     value: function createNativeFontFace() {
                        var _this$_inspectFont;
                        if (!this.data || this.disableFontFace) {
                           return null;
                        }
                        var nativeFontFace;
                        if (!this.cssFontInfo) {
                           nativeFontFace = new FontFace(
                              this.loadedName,
                              this.data,
                              {},
                           );
                        } else {
                           var css = { weight: this.cssFontInfo.fontWeight };
                           if (this.cssFontInfo.italicAngle) {
                              css.style = "oblique ".concat(
                                 this.cssFontInfo.italicAngle,
                                 "deg",
                              );
                           }
                           nativeFontFace = new FontFace(
                              this.cssFontInfo.fontFamily,
                              this.data,
                              css,
                           );
                        }
                        (_this$_inspectFont = this._inspectFont) === null ||
                           _this$_inspectFont === void 0 ||
                           _this$_inspectFont.call(this, this);
                        return nativeFontFace;
                     },
                  },
                  {
                     key: "createFontFaceRule",
                     value: function createFontFaceRule() {
                        var _this$_inspectFont2;
                        if (!this.data || this.disableFontFace) {
                           return null;
                        }
                        var data = (0,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.bytesToString)(
                           this.data,
                        );
                        var url = "url(data:"
                           .concat(this.mimetype, ";base64,")
                           .concat(btoa(data), ");");
                        var rule;
                        if (!this.cssFontInfo) {
                           rule = '@font-face {font-family:"'
                              .concat(this.loadedName, '";src:')
                              .concat(url, "}");
                        } else {
                           var css = "font-weight: ".concat(
                              this.cssFontInfo.fontWeight,
                              ";",
                           );
                           if (this.cssFontInfo.italicAngle) {
                              css += "font-style: oblique ".concat(
                                 this.cssFontInfo.italicAngle,
                                 "deg;",
                              );
                           }
                           rule = '@font-face {font-family:"'
                              .concat(this.cssFontInfo.fontFamily, '";')
                              .concat(css, "src:")
                              .concat(url, "}");
                        }
                        (_this$_inspectFont2 = this._inspectFont) === null ||
                           _this$_inspectFont2 === void 0 ||
                           _this$_inspectFont2.call(this, this, url);
                        return rule;
                     },
                  },
                  {
                     key: "getPathGenerator",
                     value: function getPathGenerator(objs, character) {
                        if (this.compiledGlyphs[character] !== undefined) {
                           return this.compiledGlyphs[character];
                        }
                        var cmds;
                        try {
                           cmds = objs.get(
                              this.loadedName + "_path_" + character,
                           );
                        } catch (ex) {
                           if (!this.ignoreErrors) {
                              throw ex;
                           }
                           (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                              'getPathGenerator - ignoring character: "'.concat(
                                 ex,
                                 '".',
                              ),
                           );
                        }
                        if (!Array.isArray(cmds) || cmds.length === 0) {
                           return (this.compiledGlyphs[character] = function (
                              c,
                              size,
                           ) {});
                        }
                        var commands = [];
                        var _loop4 = function _loop4(_i31) {
                           switch (cmds[_i31++]) {
                              case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                 .FontRenderOps.BEZIER_CURVE_TO:
                                 {
                                    var _cmds$slice = cmds.slice(
                                          _i31,
                                          _i31 + 6,
                                       ),
                                       _cmds$slice2 = _slicedToArray(
                                          _cmds$slice,
                                          6,
                                       ),
                                       a = _cmds$slice2[0],
                                       b = _cmds$slice2[1],
                                       c = _cmds$slice2[2],
                                       d = _cmds$slice2[3],
                                       e = _cmds$slice2[4],
                                       f = _cmds$slice2[5];
                                    commands.push(function (ctx) {
                                       return ctx.bezierCurveTo(
                                          a,
                                          b,
                                          c,
                                          d,
                                          e,
                                          f,
                                       );
                                    });
                                    _i31 += 6;
                                 }
                                 break;
                              case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                 .FontRenderOps.MOVE_TO:
                                 {
                                    var _cmds$slice3 = cmds.slice(
                                          _i31,
                                          _i31 + 2,
                                       ),
                                       _cmds$slice4 = _slicedToArray(
                                          _cmds$slice3,
                                          2,
                                       ),
                                       _a = _cmds$slice4[0],
                                       _b = _cmds$slice4[1];
                                    commands.push(function (ctx) {
                                       return ctx.moveTo(_a, _b);
                                    });
                                    _i31 += 2;
                                 }
                                 break;
                              case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                 .FontRenderOps.LINE_TO:
                                 {
                                    var _cmds$slice5 = cmds.slice(
                                          _i31,
                                          _i31 + 2,
                                       ),
                                       _cmds$slice6 = _slicedToArray(
                                          _cmds$slice5,
                                          2,
                                       ),
                                       _a2 = _cmds$slice6[0],
                                       _b2 = _cmds$slice6[1];
                                    commands.push(function (ctx) {
                                       return ctx.lineTo(_a2, _b2);
                                    });
                                    _i31 += 2;
                                 }
                                 break;
                              case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                 .FontRenderOps.QUADRATIC_CURVE_TO:
                                 {
                                    var _cmds$slice7 = cmds.slice(
                                          _i31,
                                          _i31 + 4,
                                       ),
                                       _cmds$slice8 = _slicedToArray(
                                          _cmds$slice7,
                                          4,
                                       ),
                                       _a3 = _cmds$slice8[0],
                                       _b3 = _cmds$slice8[1],
                                       _c = _cmds$slice8[2],
                                       _d = _cmds$slice8[3];
                                    commands.push(function (ctx) {
                                       return ctx.quadraticCurveTo(
                                          _a3,
                                          _b3,
                                          _c,
                                          _d,
                                       );
                                    });
                                    _i31 += 4;
                                 }
                                 break;
                              case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                 .FontRenderOps.RESTORE:
                                 commands.push(function (ctx) {
                                    return ctx.restore();
                                 });
                                 break;
                              case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                 .FontRenderOps.SAVE:
                                 commands.push(function (ctx) {
                                    return ctx.save();
                                 });
                                 break;
                              case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                 .FontRenderOps.SCALE:
                                 (0,
                                 _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                                    commands.length === 2,
                                    "Scale command is only valid at the third position.",
                                 );
                                 break;
                              case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                 .FontRenderOps.TRANSFORM:
                                 {
                                    var _cmds$slice9 = cmds.slice(
                                          _i31,
                                          _i31 + 6,
                                       ),
                                       _cmds$slice0 = _slicedToArray(
                                          _cmds$slice9,
                                          6,
                                       ),
                                       _a4 = _cmds$slice0[0],
                                       _b4 = _cmds$slice0[1],
                                       _c2 = _cmds$slice0[2],
                                       _d2 = _cmds$slice0[3],
                                       _e3 = _cmds$slice0[4],
                                       _f = _cmds$slice0[5];
                                    commands.push(function (ctx) {
                                       return ctx.transform(
                                          _a4,
                                          _b4,
                                          _c2,
                                          _d2,
                                          _e3,
                                          _f,
                                       );
                                    });
                                    _i31 += 6;
                                 }
                                 break;
                              case _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                                 .FontRenderOps.TRANSLATE:
                                 {
                                    var _cmds$slice1 = cmds.slice(
                                          _i31,
                                          _i31 + 2,
                                       ),
                                       _cmds$slice10 = _slicedToArray(
                                          _cmds$slice1,
                                          2,
                                       ),
                                       _a5 = _cmds$slice10[0],
                                       _b5 = _cmds$slice10[1];
                                    commands.push(function (ctx) {
                                       return ctx.translate(_a5, _b5);
                                    });
                                    _i31 += 2;
                                 }
                                 break;
                           }
                           i = _i31;
                        };
                        for (var i = 0, ii = cmds.length; i < ii; ) {
                           _loop4(i);
                        }
                        return (this.compiledGlyphs[character] =
                           function glyphDrawer(ctx, size) {
                              commands[0](ctx);
                              commands[1](ctx);
                              ctx.scale(size, -size);
                              for (
                                 var _i32 = 2, _ii0 = commands.length;
                                 _i32 < _ii0;
                                 _i32++
                              ) {
                                 commands[_i32](ctx);
                              }
                           });
                     },
                  },
               ]);
            })(); /***/
         },
         /***/ 62: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ Metadata: function Metadata() {
                  return /* binding */ _Metadata;
               } /* harmony export */,
            });
            /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(292);
            var _metadataMap = /*#__PURE__*/ new WeakMap();
            var _data3 = /*#__PURE__*/ new WeakMap();
            var _Metadata = /*#__PURE__*/ (function () {
               function _Metadata(_ref118) {
                  var parsedData = _ref118.parsedData,
                     rawData = _ref118.rawData;
                  _classCallCheck(this, _Metadata);
                  _classPrivateFieldInitSpec(this, _metadataMap, void 0);
                  _classPrivateFieldInitSpec(this, _data3, void 0);
                  _classPrivateFieldSet(_metadataMap, this, parsedData);
                  _classPrivateFieldSet(_data3, this, rawData);
               }
               return _createClass(_Metadata, [
                  {
                     key: "getRaw",
                     value: function getRaw() {
                        return _classPrivateFieldGet(_data3, this);
                     },
                  },
                  {
                     key: "get",
                     value: function get(name) {
                        var _classPrivateFieldGet103;
                        return (_classPrivateFieldGet103 =
                           _classPrivateFieldGet(_metadataMap, this).get(
                              name,
                           )) !== null && _classPrivateFieldGet103 !== void 0
                           ? _classPrivateFieldGet103
                           : null;
                     },
                  },
                  {
                     key: "getAll",
                     value: function getAll() {
                        return (0,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.objectFromMap)(
                           _classPrivateFieldGet(_metadataMap, this),
                        );
                     },
                  },
                  {
                     key: "has",
                     value: function has(name) {
                        return _classPrivateFieldGet(_metadataMap, this).has(
                           name,
                        );
                     },
                  },
               ]);
            })(); /***/
         },
         /***/ 457: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ PDFNetworkStream:
                  function PDFNetworkStream() {
                     return /* binding */ _PDFNetworkStream;
                  } /* harmony export */,
            });
            /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(292);
            /* harmony import */ var _network_utils_js__WEBPACK_IMPORTED_MODULE_1__ =
               __webpack_require__(490);
            var OK_RESPONSE = 200;
            var PARTIAL_CONTENT_RESPONSE = 206;
            function getArrayBuffer(xhr) {
               var data = xhr.response;
               if (typeof data !== "string") {
                  return data;
               }
               return (0,
               _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.stringToBytes)(data)
                  .buffer;
            }
            var NetworkManager = /*#__PURE__*/ (function () {
               function NetworkManager(url) {
                  var args =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : {};
                  _classCallCheck(this, NetworkManager);
                  this.url = url;
                  this.isHttp = /^https?:/i.test(url);
                  this.httpHeaders =
                     (this.isHttp && args.httpHeaders) || Object.create(null);
                  this.withCredentials = args.withCredentials || false;
                  this.currXhrId = 0;
                  this.pendingRequests = Object.create(null);
               }
               return _createClass(NetworkManager, [
                  {
                     key: "requestRange",
                     value: function requestRange(begin, end, listeners) {
                        var args = { begin: begin, end: end };
                        for (var prop in listeners) {
                           args[prop] = listeners[prop];
                        }
                        return this.request(args);
                     },
                  },
                  {
                     key: "requestFull",
                     value: function requestFull(listeners) {
                        return this.request(listeners);
                     },
                  },
                  {
                     key: "request",
                     value: function request(args) {
                        var xhr = new XMLHttpRequest();
                        var xhrId = this.currXhrId++;
                        var pendingRequest = (this.pendingRequests[xhrId] = {
                           xhr: xhr,
                        });
                        xhr.open("GET", this.url);
                        xhr.withCredentials = this.withCredentials;
                        for (var property in this.httpHeaders) {
                           var value = this.httpHeaders[property];
                           if (value === undefined) {
                              continue;
                           }
                           xhr.setRequestHeader(property, value);
                        }
                        if (this.isHttp && "begin" in args && "end" in args) {
                           xhr.setRequestHeader(
                              "Range",
                              "bytes="
                                 .concat(args.begin, "-")
                                 .concat(args.end - 1),
                           );
                           pendingRequest.expectedStatus =
                              PARTIAL_CONTENT_RESPONSE;
                        } else {
                           pendingRequest.expectedStatus = OK_RESPONSE;
                        }
                        xhr.responseType = "arraybuffer";
                        if (args.onError) {
                           xhr.onerror = function (evt) {
                              args.onError(xhr.status);
                           };
                        }
                        xhr.onreadystatechange = this.onStateChange.bind(
                           this,
                           xhrId,
                        );
                        xhr.onprogress = this.onProgress.bind(this, xhrId);
                        pendingRequest.onHeadersReceived =
                           args.onHeadersReceived;
                        pendingRequest.onDone = args.onDone;
                        pendingRequest.onError = args.onError;
                        pendingRequest.onProgress = args.onProgress;
                        xhr.send(null);
                        return xhrId;
                     },
                  },
                  {
                     key: "onProgress",
                     value: function onProgress(xhrId, evt) {
                        var _pendingRequest$onPro;
                        var pendingRequest = this.pendingRequests[xhrId];
                        if (!pendingRequest) {
                           return;
                        }
                        (_pendingRequest$onPro = pendingRequest.onProgress) ===
                           null ||
                           _pendingRequest$onPro === void 0 ||
                           _pendingRequest$onPro.call(pendingRequest, evt);
                     },
                  },
                  {
                     key: "onStateChange",
                     value: function onStateChange(xhrId, evt) {
                        var pendingRequest = this.pendingRequests[xhrId];
                        if (!pendingRequest) {
                           return;
                        }
                        var xhr = pendingRequest.xhr;
                        if (
                           xhr.readyState >= 2 &&
                           pendingRequest.onHeadersReceived
                        ) {
                           pendingRequest.onHeadersReceived();
                           delete pendingRequest.onHeadersReceived;
                        }
                        if (xhr.readyState !== 4) {
                           return;
                        }
                        if (!(xhrId in this.pendingRequests)) {
                           return;
                        }
                        delete this.pendingRequests[xhrId];
                        if (xhr.status === 0 && this.isHttp) {
                           var _pendingRequest$onErr;
                           (_pendingRequest$onErr = pendingRequest.onError) ===
                              null ||
                              _pendingRequest$onErr === void 0 ||
                              _pendingRequest$onErr.call(
                                 pendingRequest,
                                 xhr.status,
                              );
                           return;
                        }
                        var xhrStatus = xhr.status || OK_RESPONSE;
                        var ok_response_on_range_request =
                           xhrStatus === OK_RESPONSE &&
                           pendingRequest.expectedStatus ===
                              PARTIAL_CONTENT_RESPONSE;
                        if (
                           !ok_response_on_range_request &&
                           xhrStatus !== pendingRequest.expectedStatus
                        ) {
                           var _pendingRequest$onErr2;
                           (_pendingRequest$onErr2 = pendingRequest.onError) ===
                              null ||
                              _pendingRequest$onErr2 === void 0 ||
                              _pendingRequest$onErr2.call(
                                 pendingRequest,
                                 xhr.status,
                              );
                           return;
                        }
                        var chunk = getArrayBuffer(xhr);
                        if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {
                           var rangeHeader =
                              xhr.getResponseHeader("Content-Range");
                           var matches = /bytes (\d+)-(\d+)\/(\d+)/.exec(
                              rangeHeader,
                           );
                           pendingRequest.onDone({
                              begin: parseInt(matches[1], 10),
                              chunk: chunk,
                           });
                        } else if (chunk) {
                           pendingRequest.onDone({ begin: 0, chunk: chunk });
                        } else {
                           var _pendingRequest$onErr3;
                           (_pendingRequest$onErr3 = pendingRequest.onError) ===
                              null ||
                              _pendingRequest$onErr3 === void 0 ||
                              _pendingRequest$onErr3.call(
                                 pendingRequest,
                                 xhr.status,
                              );
                        }
                     },
                  },
                  {
                     key: "getRequestXhr",
                     value: function getRequestXhr(xhrId) {
                        return this.pendingRequests[xhrId].xhr;
                     },
                  },
                  {
                     key: "isPendingRequest",
                     value: function isPendingRequest(xhrId) {
                        return xhrId in this.pendingRequests;
                     },
                  },
                  {
                     key: "abortRequest",
                     value: function abortRequest(xhrId) {
                        var xhr = this.pendingRequests[xhrId].xhr;
                        delete this.pendingRequests[xhrId];
                        xhr.abort();
                     },
                  },
               ]);
            })();
            var _PDFNetworkStream = /*#__PURE__*/ (function () {
               function _PDFNetworkStream(source) {
                  _classCallCheck(this, _PDFNetworkStream);
                  this._source = source;
                  this._manager = new NetworkManager(source.url, {
                     httpHeaders: source.httpHeaders,
                     withCredentials: source.withCredentials,
                  });
                  this._rangeChunkSize = source.rangeChunkSize;
                  this._fullRequestReader = null;
                  this._rangeRequestReaders = [];
               }
               return _createClass(_PDFNetworkStream, [
                  {
                     key: "_onRangeRequestReaderClosed",
                     value: function _onRangeRequestReaderClosed(reader) {
                        var i = this._rangeRequestReaders.indexOf(reader);
                        if (i >= 0) {
                           this._rangeRequestReaders.splice(i, 1);
                        }
                     },
                  },
                  {
                     key: "getFullReader",
                     value: function getFullReader() {
                        (0,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                           !this._fullRequestReader,
                           "PDFNetworkStream.getFullReader can only be called once.",
                        );
                        this._fullRequestReader =
                           new PDFNetworkStreamFullRequestReader(
                              this._manager,
                              this._source,
                           );
                        return this._fullRequestReader;
                     },
                  },
                  {
                     key: "getRangeReader",
                     value: function getRangeReader(begin, end) {
                        var reader = new PDFNetworkStreamRangeRequestReader(
                           this._manager,
                           begin,
                           end,
                        );
                        reader.onClosed =
                           this._onRangeRequestReaderClosed.bind(this);
                        this._rangeRequestReaders.push(reader);
                        return reader;
                     },
                  },
                  {
                     key: "cancelAllRequests",
                     value: function cancelAllRequests(reason) {
                        var _this$_fullRequestRea4;
                        (_this$_fullRequestRea4 = this._fullRequestReader) ===
                           null ||
                           _this$_fullRequestRea4 === void 0 ||
                           _this$_fullRequestRea4.cancel(reason);
                        var _iterator148 = _createForOfIteratorHelper(
                              this._rangeRequestReaders.slice(0),
                           ),
                           _step148;
                        try {
                           for (
                              _iterator148.s();
                              !(_step148 = _iterator148.n()).done;

                           ) {
                              var reader = _step148.value;
                              reader.cancel(reason);
                           }
                        } catch (err) {
                           _iterator148.e(err);
                        } finally {
                           _iterator148.f();
                        }
                     },
                  },
               ]);
            })();
            var PDFNetworkStreamFullRequestReader = /*#__PURE__*/ (function () {
               function PDFNetworkStreamFullRequestReader(manager, source) {
                  _classCallCheck(this, PDFNetworkStreamFullRequestReader);
                  this._manager = manager;
                  var args = {
                     onHeadersReceived: this._onHeadersReceived.bind(this),
                     onDone: this._onDone.bind(this),
                     onError: this._onError.bind(this),
                     onProgress: this._onProgress.bind(this),
                  };
                  this._url = source.url;
                  this._fullRequestId = manager.requestFull(args);
                  this._headersReceivedCapability = Promise.withResolvers();
                  this._disableRange = source.disableRange || false;
                  this._contentLength = source.length;
                  this._rangeChunkSize = source.rangeChunkSize;
                  if (!this._rangeChunkSize && !this._disableRange) {
                     this._disableRange = true;
                  }
                  this._isStreamingSupported = false;
                  this._isRangeSupported = false;
                  this._cachedChunks = [];
                  this._requests = [];
                  this._done = false;
                  this._storedError = undefined;
                  this._filename = null;
                  this.onProgress = null;
               }
               return _createClass(PDFNetworkStreamFullRequestReader, [
                  {
                     key: "_onHeadersReceived",
                     value: function _onHeadersReceived() {
                        var fullRequestXhrId = this._fullRequestId;
                        var fullRequestXhr =
                           this._manager.getRequestXhr(fullRequestXhrId);
                        var getResponseHeader = function getResponseHeader(
                           name,
                        ) {
                           return fullRequestXhr.getResponseHeader(name);
                        };
                        var _ref119 = (0,
                           _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateRangeRequestCapabilities)(
                              {
                                 getResponseHeader: getResponseHeader,
                                 isHttp: this._manager.isHttp,
                                 rangeChunkSize: this._rangeChunkSize,
                                 disableRange: this._disableRange,
                              },
                           ),
                           allowRangeRequests = _ref119.allowRangeRequests,
                           suggestedLength = _ref119.suggestedLength;
                        if (allowRangeRequests) {
                           this._isRangeSupported = true;
                        }
                        this._contentLength =
                           suggestedLength || this._contentLength;
                        this._filename = (0,
                        _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.extractFilenameFromHeader)(
                           getResponseHeader,
                        );
                        if (this._isRangeSupported) {
                           this._manager.abortRequest(fullRequestXhrId);
                        }
                        this._headersReceivedCapability.resolve();
                     },
                  },
                  {
                     key: "_onDone",
                     value: function _onDone(data) {
                        if (data) {
                           if (this._requests.length > 0) {
                              var requestCapability = this._requests.shift();
                              requestCapability.resolve({
                                 value: data.chunk,
                                 done: false,
                              });
                           } else {
                              this._cachedChunks.push(data.chunk);
                           }
                        }
                        this._done = true;
                        if (this._cachedChunks.length > 0) {
                           return;
                        }
                        var _iterator149 = _createForOfIteratorHelper(
                              this._requests,
                           ),
                           _step149;
                        try {
                           for (
                              _iterator149.s();
                              !(_step149 = _iterator149.n()).done;

                           ) {
                              var _requestCapability = _step149.value;
                              _requestCapability.resolve({
                                 value: undefined,
                                 done: true,
                              });
                           }
                        } catch (err) {
                           _iterator149.e(err);
                        } finally {
                           _iterator149.f();
                        }
                        this._requests.length = 0;
                     },
                  },
                  {
                     key: "_onError",
                     value: function _onError(status) {
                        this._storedError = (0,
                        _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.createResponseStatusError)(
                           status,
                           this._url,
                        );
                        this._headersReceivedCapability.reject(
                           this._storedError,
                        );
                        var _iterator150 = _createForOfIteratorHelper(
                              this._requests,
                           ),
                           _step150;
                        try {
                           for (
                              _iterator150.s();
                              !(_step150 = _iterator150.n()).done;

                           ) {
                              var requestCapability = _step150.value;
                              requestCapability.reject(this._storedError);
                           }
                        } catch (err) {
                           _iterator150.e(err);
                        } finally {
                           _iterator150.f();
                        }
                        this._requests.length = 0;
                        this._cachedChunks.length = 0;
                     },
                  },
                  {
                     key: "_onProgress",
                     value: function _onProgress(evt) {
                        var _this$onProgress3;
                        (_this$onProgress3 = this.onProgress) === null ||
                           _this$onProgress3 === void 0 ||
                           _this$onProgress3.call(this, {
                              loaded: evt.loaded,
                              total: evt.lengthComputable
                                 ? evt.total
                                 : this._contentLength,
                           });
                     },
                  },
                  {
                     key: "filename",
                     get: function get() {
                        return this._filename;
                     },
                  },
                  {
                     key: "isRangeSupported",
                     get: function get() {
                        return this._isRangeSupported;
                     },
                  },
                  {
                     key: "isStreamingSupported",
                     get: function get() {
                        return this._isStreamingSupported;
                     },
                  },
                  {
                     key: "contentLength",
                     get: function get() {
                        return this._contentLength;
                     },
                  },
                  {
                     key: "headersReady",
                     get: function get() {
                        return this._headersReceivedCapability.promise;
                     },
                  },
                  {
                     key: "read",
                     value: (function () {
                        var _read3 = _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(function _callee26() {
                              var chunk, requestCapability;
                              return _regenerator().w(
                                 function (_context27) {
                                    while (1)
                                       switch (_context27.n) {
                                          case 0:
                                             if (!this._storedError) {
                                                _context27.n = 1;
                                                break;
                                             }
                                             throw this._storedError;
                                          case 1:
                                             if (
                                                !(this._cachedChunks.length > 0)
                                             ) {
                                                _context27.n = 2;
                                                break;
                                             }
                                             chunk = this._cachedChunks.shift();
                                             return _context27.a(2, {
                                                value: chunk,
                                                done: false,
                                             });
                                          case 2:
                                             if (!this._done) {
                                                _context27.n = 3;
                                                break;
                                             }
                                             return _context27.a(2, {
                                                value: undefined,
                                                done: true,
                                             });
                                          case 3:
                                             requestCapability =
                                                Promise.withResolvers();
                                             this._requests.push(
                                                requestCapability,
                                             );
                                             return _context27.a(
                                                2,
                                                requestCapability.promise,
                                             );
                                       }
                                 },
                                 _callee26,
                                 this,
                              );
                           }),
                        );
                        function read() {
                           return _read3.apply(this, arguments);
                        }
                        return read;
                     })(),
                  },
                  {
                     key: "cancel",
                     value: function cancel(reason) {
                        this._done = true;
                        this._headersReceivedCapability.reject(reason);
                        var _iterator151 = _createForOfIteratorHelper(
                              this._requests,
                           ),
                           _step151;
                        try {
                           for (
                              _iterator151.s();
                              !(_step151 = _iterator151.n()).done;

                           ) {
                              var requestCapability = _step151.value;
                              requestCapability.resolve({
                                 value: undefined,
                                 done: true,
                              });
                           }
                        } catch (err) {
                           _iterator151.e(err);
                        } finally {
                           _iterator151.f();
                        }
                        this._requests.length = 0;
                        if (
                           this._manager.isPendingRequest(this._fullRequestId)
                        ) {
                           this._manager.abortRequest(this._fullRequestId);
                        }
                        this._fullRequestReader = null;
                     },
                  },
               ]);
            })();
            var PDFNetworkStreamRangeRequestReader =
               /*#__PURE__*/ (function () {
                  function PDFNetworkStreamRangeRequestReader(
                     manager,
                     begin,
                     end,
                  ) {
                     _classCallCheck(this, PDFNetworkStreamRangeRequestReader);
                     this._manager = manager;
                     var args = {
                        onDone: this._onDone.bind(this),
                        onError: this._onError.bind(this),
                        onProgress: this._onProgress.bind(this),
                     };
                     this._url = manager.url;
                     this._requestId = manager.requestRange(begin, end, args);
                     this._requests = [];
                     this._queuedChunk = null;
                     this._done = false;
                     this._storedError = undefined;
                     this.onProgress = null;
                     this.onClosed = null;
                  }
                  return _createClass(PDFNetworkStreamRangeRequestReader, [
                     {
                        key: "_close",
                        value: function _close() {
                           var _this$onClosed;
                           (_this$onClosed = this.onClosed) === null ||
                              _this$onClosed === void 0 ||
                              _this$onClosed.call(this, this);
                        },
                     },
                     {
                        key: "_onDone",
                        value: function _onDone(data) {
                           var chunk = data.chunk;
                           if (this._requests.length > 0) {
                              var requestCapability = this._requests.shift();
                              requestCapability.resolve({
                                 value: chunk,
                                 done: false,
                              });
                           } else {
                              this._queuedChunk = chunk;
                           }
                           this._done = true;
                           var _iterator152 = _createForOfIteratorHelper(
                                 this._requests,
                              ),
                              _step152;
                           try {
                              for (
                                 _iterator152.s();
                                 !(_step152 = _iterator152.n()).done;

                              ) {
                                 var _requestCapability2 = _step152.value;
                                 _requestCapability2.resolve({
                                    value: undefined,
                                    done: true,
                                 });
                              }
                           } catch (err) {
                              _iterator152.e(err);
                           } finally {
                              _iterator152.f();
                           }
                           this._requests.length = 0;
                           this._close();
                        },
                     },
                     {
                        key: "_onError",
                        value: function _onError(status) {
                           this._storedError = (0,
                           _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.createResponseStatusError)(
                              status,
                              this._url,
                           );
                           var _iterator153 = _createForOfIteratorHelper(
                                 this._requests,
                              ),
                              _step153;
                           try {
                              for (
                                 _iterator153.s();
                                 !(_step153 = _iterator153.n()).done;

                              ) {
                                 var requestCapability = _step153.value;
                                 requestCapability.reject(this._storedError);
                              }
                           } catch (err) {
                              _iterator153.e(err);
                           } finally {
                              _iterator153.f();
                           }
                           this._requests.length = 0;
                           this._queuedChunk = null;
                        },
                     },
                     {
                        key: "_onProgress",
                        value: function _onProgress(evt) {
                           if (!this.isStreamingSupported) {
                              var _this$onProgress4;
                              (_this$onProgress4 = this.onProgress) === null ||
                                 _this$onProgress4 === void 0 ||
                                 _this$onProgress4.call(this, {
                                    loaded: evt.loaded,
                                 });
                           }
                        },
                     },
                     {
                        key: "isStreamingSupported",
                        get: function get() {
                           return false;
                        },
                     },
                     {
                        key: "read",
                        value: (function () {
                           var _read4 = _asyncToGenerator(
                              /*#__PURE__*/ _regenerator().m(
                                 function _callee27() {
                                    var chunk, requestCapability;
                                    return _regenerator().w(
                                       function (_context28) {
                                          while (1)
                                             switch (_context28.n) {
                                                case 0:
                                                   if (!this._storedError) {
                                                      _context28.n = 1;
                                                      break;
                                                   }
                                                   throw this._storedError;
                                                case 1:
                                                   if (
                                                      !(
                                                         this._queuedChunk !==
                                                         null
                                                      )
                                                   ) {
                                                      _context28.n = 2;
                                                      break;
                                                   }
                                                   chunk = this._queuedChunk;
                                                   this._queuedChunk = null;
                                                   return _context28.a(2, {
                                                      value: chunk,
                                                      done: false,
                                                   });
                                                case 2:
                                                   if (!this._done) {
                                                      _context28.n = 3;
                                                      break;
                                                   }
                                                   return _context28.a(2, {
                                                      value: undefined,
                                                      done: true,
                                                   });
                                                case 3:
                                                   requestCapability =
                                                      Promise.withResolvers();
                                                   this._requests.push(
                                                      requestCapability,
                                                   );
                                                   return _context28.a(
                                                      2,
                                                      requestCapability.promise,
                                                   );
                                             }
                                       },
                                       _callee27,
                                       this,
                                    );
                                 },
                              ),
                           );
                           function read() {
                              return _read4.apply(this, arguments);
                           }
                           return read;
                        })(),
                     },
                     {
                        key: "cancel",
                        value: function cancel(reason) {
                           this._done = true;
                           var _iterator154 = _createForOfIteratorHelper(
                                 this._requests,
                              ),
                              _step154;
                           try {
                              for (
                                 _iterator154.s();
                                 !(_step154 = _iterator154.n()).done;

                              ) {
                                 var requestCapability = _step154.value;
                                 requestCapability.resolve({
                                    value: undefined,
                                    done: true,
                                 });
                              }
                           } catch (err) {
                              _iterator154.e(err);
                           } finally {
                              _iterator154.f();
                           }
                           this._requests.length = 0;
                           if (
                              this._manager.isPendingRequest(this._requestId)
                           ) {
                              this._manager.abortRequest(this._requestId);
                           }
                           this._close();
                        },
                     },
                  ]);
               })(); /***/
         },
         /***/ 490: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            // EXPORTS
            __webpack_require__.d(__webpack_exports__, {
               createResponseStatusError: function createResponseStatusError() {
                  return /* binding */ _createResponseStatusError;
               },
               extractFilenameFromHeader: function extractFilenameFromHeader() {
                  return /* binding */ _extractFilenameFromHeader;
               },
               validateRangeRequestCapabilities:
                  function validateRangeRequestCapabilities() {
                     return /* binding */ _validateRangeRequestCapabilities;
                  },
               validateResponseStatus: function validateResponseStatus() {
                  return /* binding */ _validateResponseStatus;
               },
            }); // EXTERNAL MODULE: ./src/shared/util.js
            var util = __webpack_require__(292); // CONCATENATED MODULE: ./src/display/content_disposition.js
            function getFilenameFromContentDispositionHeader(
               contentDisposition,
            ) {
               var needsEncodingFixup = true;
               var tmp = toParamRegExp("filename\\*", "i").exec(
                  contentDisposition,
               );
               if (tmp) {
                  tmp = tmp[1];
                  var filename = rfc2616unquote(tmp);
                  filename = unescape(filename);
                  filename = rfc5987decode(filename);
                  filename = rfc2047decode(filename);
                  return fixupEncoding(filename);
               }
               tmp = rfc2231getparam(contentDisposition);
               if (tmp) {
                  var _filename = rfc2047decode(tmp);
                  return fixupEncoding(_filename);
               }
               tmp = toParamRegExp("filename", "i").exec(contentDisposition);
               if (tmp) {
                  tmp = tmp[1];
                  var _filename2 = rfc2616unquote(tmp);
                  _filename2 = rfc2047decode(_filename2);
                  return fixupEncoding(_filename2);
               }
               function toParamRegExp(attributePattern, flags) {
                  return new RegExp(
                     "(?:^|;)\\s*" +
                        attributePattern +
                        "\\s*=\\s*" +
                        "(" +
                        '[^";\\s][^;\\s]*' +
                        "|" +
                        '"(?:[^"\\\\]|\\\\"?)+"?' +
                        ")",
                     flags,
                  );
               }
               function textdecode(encoding, value) {
                  if (encoding) {
                     if (!/^[\x00-\xFF]+$/.test(value)) {
                        return value;
                     }
                     try {
                        var decoder = new TextDecoder(encoding, {
                           fatal: true,
                        });
                        var buffer = (0, util.stringToBytes)(value);
                        value = decoder.decode(buffer);
                        needsEncodingFixup = false;
                     } catch (_unused9) {}
                  }
                  return value;
               }
               function fixupEncoding(value) {
                  if (needsEncodingFixup && /[\x80-\xff]/.test(value)) {
                     value = textdecode("utf-8", value);
                     if (needsEncodingFixup) {
                        value = textdecode("iso-8859-1", value);
                     }
                  }
                  return value;
               }
               function rfc2231getparam(contentDispositionStr) {
                  var matches = [];
                  var match;
                  var iter = toParamRegExp(
                     "filename\\*((?!0\\d)\\d+)(\\*?)",
                     "ig",
                  );
                  while ((match = iter.exec(contentDispositionStr)) !== null) {
                     var _match2 = match,
                        _match3 = _slicedToArray(_match2, 4),
                        n = _match3[1],
                        quot = _match3[2],
                        part = _match3[3];
                     n = parseInt(n, 10);
                     if (n in matches) {
                        if (n === 0) {
                           break;
                        }
                        continue;
                     }
                     matches[n] = [quot, part];
                  }
                  var parts = [];
                  for (var _n = 0; _n < matches.length; ++_n) {
                     if (!(_n in matches)) {
                        break;
                     }
                     var _matches$_n = _slicedToArray(matches[_n], 2),
                        _quot = _matches$_n[0],
                        _part = _matches$_n[1];
                     _part = rfc2616unquote(_part);
                     if (_quot) {
                        _part = unescape(_part);
                        if (_n === 0) {
                           _part = rfc5987decode(_part);
                        }
                     }
                     parts.push(_part);
                  }
                  return parts.join("");
               }
               function rfc2616unquote(value) {
                  if (value.startsWith('"')) {
                     var parts = value.slice(1).split('\\"');
                     for (var i = 0; i < parts.length; ++i) {
                        var quotindex = parts[i].indexOf('"');
                        if (quotindex !== -1) {
                           parts[i] = parts[i].slice(0, quotindex);
                           parts.length = i + 1;
                        }
                        parts[i] = parts[i].replaceAll(/\\(.)/g, "$1");
                     }
                     value = parts.join('"');
                  }
                  return value;
               }
               function rfc5987decode(extvalue) {
                  var encodingend = extvalue.indexOf("'");
                  if (encodingend === -1) {
                     return extvalue;
                  }
                  var encoding = extvalue.slice(0, encodingend);
                  var langvalue = extvalue.slice(encodingend + 1);
                  var value = langvalue.replace(/^[^']*'/, "");
                  return textdecode(encoding, value);
               }
               function rfc2047decode(value) {
                  if (
                     !value.startsWith("=?") ||
                     /[\x00-\x19\x80-\xff]/.test(value)
                  ) {
                     return value;
                  }
                  return value.replaceAll(
                     /=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,
                     function (matches, charset, encoding, text) {
                        if (encoding === "q" || encoding === "Q") {
                           text = text.replaceAll("_", " ");
                           text = text.replaceAll(
                              /=([0-9a-fA-F]{2})/g,
                              function (match, hex) {
                                 return String.fromCharCode(parseInt(hex, 16));
                              },
                           );
                           return textdecode(charset, text);
                        }
                        try {
                           text = atob(text);
                        } catch (_unused0) {}
                        return textdecode(charset, text);
                     },
                  );
               }
               return "";
            } // EXTERNAL MODULE: ./src/display/display_utils.js
            var display_utils = __webpack_require__(419); // CONCATENATED MODULE: ./src/display/network_utils.js
            function _validateRangeRequestCapabilities(_ref120) {
               var getResponseHeader = _ref120.getResponseHeader,
                  isHttp = _ref120.isHttp,
                  rangeChunkSize = _ref120.rangeChunkSize,
                  disableRange = _ref120.disableRange;
               var returnValues = {
                  allowRangeRequests: false,
                  suggestedLength: undefined,
               };
               var length = parseInt(getResponseHeader("Content-Length"), 10);
               if (!Number.isInteger(length)) {
                  return returnValues;
               }
               returnValues.suggestedLength = length;
               if (length <= 2 * rangeChunkSize) {
                  return returnValues;
               }
               if (disableRange || !isHttp) {
                  return returnValues;
               }
               if (getResponseHeader("Accept-Ranges") !== "bytes") {
                  return returnValues;
               }
               var contentEncoding =
                  getResponseHeader("Content-Encoding") || "identity";
               if (contentEncoding !== "identity") {
                  return returnValues;
               }
               returnValues.allowRangeRequests = true;
               return returnValues;
            }
            function _extractFilenameFromHeader(getResponseHeader) {
               var contentDisposition = getResponseHeader(
                  "Content-Disposition",
               );
               if (contentDisposition) {
                  var filename =
                     getFilenameFromContentDispositionHeader(
                        contentDisposition,
                     );
                  if (filename.includes("%")) {
                     try {
                        filename = decodeURIComponent(filename);
                     } catch (_unused1) {}
                  }
                  if ((0, display_utils.isPdfFile)(filename)) {
                     return filename;
                  }
               }
               return null;
            }
            function _createResponseStatusError(status, url) {
               if (
                  status === 404 ||
                  (status === 0 && url.startsWith("file:"))
               ) {
                  return new util.MissingPDFException(
                     'Missing PDF "' + url + '".',
                  );
               }
               return new util.UnexpectedResponseException(
                  "Unexpected server response ("
                     .concat(status, ') while retrieving PDF "')
                     .concat(url, '".'),
                  status,
               );
            }
            function _validateResponseStatus(status) {
               return status === 200 || status === 206;
            } /***/
         },
         /***/ 786: /***/ function _(
            __webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            __webpack_require__.a(
               __webpack_module__,
               /*#__PURE__*/ (function () {
                  var _ref121 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee30(
                           __webpack_handle_async_dependencies__,
                           __webpack_async_result__,
                        ) {
                           var parseUrl,
                              createRequestOptions,
                              _shared_util_js__WEBPACK_IMPORTED_MODULE_0__,
                              _network_utils_js__WEBPACK_IMPORTED_MODULE_1__,
                              fs,
                              http,
                              https,
                              url,
                              fileUriRegex,
                              _PDFNodeStream,
                              BaseFullReader,
                              BaseRangeReader,
                              PDFNodeStreamFullReader,
                              PDFNodeStreamRangeReader,
                              PDFNodeStreamFsFullReader,
                              PDFNodeStreamFsRangeReader,
                              _t15;
                           return _regenerator().w(
                              function (_context31) {
                                 while (1)
                                    switch ((_context31.p = _context31.n)) {
                                       case 0:
                                          _context31.p = 0;
                                          parseUrl = function parseUrl(
                                             sourceUrl,
                                          ) {
                                             var parsedUrl =
                                                url.parse(sourceUrl);
                                             if (
                                                parsedUrl.protocol ===
                                                   "file:" ||
                                                parsedUrl.host
                                             ) {
                                                return parsedUrl;
                                             }
                                             if (
                                                /^[a-z]:[/\\]/i.test(sourceUrl)
                                             ) {
                                                return url.parse(
                                                   "file:///".concat(sourceUrl),
                                                );
                                             }
                                             if (!parsedUrl.host) {
                                                parsedUrl.protocol = "file:";
                                             }
                                             return parsedUrl;
                                          };
                                          createRequestOptions =
                                             function createRequestOptions(
                                                parsedUrl,
                                                headers,
                                             ) {
                                                return {
                                                   protocol: parsedUrl.protocol,
                                                   auth: parsedUrl.auth,
                                                   host: parsedUrl.hostname,
                                                   port: parsedUrl.port,
                                                   path: parsedUrl.path,
                                                   method: "GET",
                                                   headers: headers,
                                                };
                                             };
                                          /* harmony export */ __webpack_require__.d(
                                             __webpack_exports__,
                                             {
                                                /* harmony export */ PDFNodeStream:
                                                   function PDFNodeStream() {
                                                      return /* binding */ _PDFNodeStream;
                                                   } /* harmony export */,
                                             },
                                          );
                                          /* harmony import */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ =
                                             __webpack_require__(292);
                                          /* harmony import */ _network_utils_js__WEBPACK_IMPORTED_MODULE_1__ =
                                             __webpack_require__(490);
                                          if (
                                             !_shared_util_js__WEBPACK_IMPORTED_MODULE_0__.isNodeJS
                                          ) {
                                             _context31.n = 5;
                                             break;
                                          }
                                          _context31.n = 1;
                                          return Promise.resolve().then(
                                             function () {
                                                return _interopRequireWildcard(
                                                   require(/*webpackIgnore: true*/ "fs"),
                                                );
                                             },
                                          );
                                       case 1:
                                          fs = _context31.v;
                                          _context31.n = 2;
                                          return Promise.resolve().then(
                                             function () {
                                                return _interopRequireWildcard(
                                                   require(/*webpackIgnore: true*/ "http"),
                                                );
                                             },
                                          );
                                       case 2:
                                          http = _context31.v;
                                          _context31.n = 3;
                                          return Promise.resolve().then(
                                             function () {
                                                return _interopRequireWildcard(
                                                   require(/*webpackIgnore: true*/ "https"),
                                                );
                                             },
                                          );
                                       case 3:
                                          https = _context31.v;
                                          _context31.n = 4;
                                          return Promise.resolve().then(
                                             function () {
                                                return _interopRequireWildcard(
                                                   require(/*webpackIgnore: true*/ "url"),
                                                );
                                             },
                                          );
                                       case 4:
                                          url = _context31.v;
                                       case 5:
                                          fileUriRegex =
                                             /^file:\/\/\/[a-zA-Z]:\//;
                                          _PDFNodeStream =
                                             /*#__PURE__*/ (function () {
                                                function _PDFNodeStream(
                                                   source,
                                                ) {
                                                   _classCallCheck(
                                                      this,
                                                      _PDFNodeStream,
                                                   );
                                                   this.source = source;
                                                   this.url = parseUrl(
                                                      source.url,
                                                   );
                                                   this.isHttp =
                                                      this.url.protocol ===
                                                         "http:" ||
                                                      this.url.protocol ===
                                                         "https:";
                                                   this.isFsUrl =
                                                      this.url.protocol ===
                                                      "file:";
                                                   this.httpHeaders =
                                                      (this.isHttp &&
                                                         source.httpHeaders) ||
                                                      {};
                                                   this._fullRequestReader =
                                                      null;
                                                   this._rangeRequestReaders =
                                                      [];
                                                }
                                                return _createClass(
                                                   _PDFNodeStream,
                                                   [
                                                      {
                                                         key: "_progressiveDataLength",
                                                         get: function get() {
                                                            var _this$_fullRequestRea5,
                                                               _this$_fullRequestRea6;
                                                            return (_this$_fullRequestRea5 =
                                                               (_this$_fullRequestRea6 =
                                                                  this
                                                                     ._fullRequestReader) ===
                                                                  null ||
                                                               _this$_fullRequestRea6 ===
                                                                  void 0
                                                                  ? void 0
                                                                  : _this$_fullRequestRea6._loaded) !==
                                                               null &&
                                                               _this$_fullRequestRea5 !==
                                                                  void 0
                                                               ? _this$_fullRequestRea5
                                                               : 0;
                                                         },
                                                      },
                                                      {
                                                         key: "getFullReader",
                                                         value: function getFullReader() {
                                                            (0,
                                                            _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                                                               !this
                                                                  ._fullRequestReader,
                                                               "PDFNodeStream.getFullReader can only be called once.",
                                                            );
                                                            this._fullRequestReader =
                                                               this.isFsUrl
                                                                  ? new PDFNodeStreamFsFullReader(
                                                                       this,
                                                                    )
                                                                  : new PDFNodeStreamFullReader(
                                                                       this,
                                                                    );
                                                            return this
                                                               ._fullRequestReader;
                                                         },
                                                      },
                                                      {
                                                         key: "getRangeReader",
                                                         value: function getRangeReader(
                                                            start,
                                                            end,
                                                         ) {
                                                            if (
                                                               end <=
                                                               this
                                                                  ._progressiveDataLength
                                                            ) {
                                                               return null;
                                                            }
                                                            var rangeReader =
                                                               this.isFsUrl
                                                                  ? new PDFNodeStreamFsRangeReader(
                                                                       this,
                                                                       start,
                                                                       end,
                                                                    )
                                                                  : new PDFNodeStreamRangeReader(
                                                                       this,
                                                                       start,
                                                                       end,
                                                                    );
                                                            this._rangeRequestReaders.push(
                                                               rangeReader,
                                                            );
                                                            return rangeReader;
                                                         },
                                                      },
                                                      {
                                                         key: "cancelAllRequests",
                                                         value: function cancelAllRequests(
                                                            reason,
                                                         ) {
                                                            var _this$_fullRequestRea7;
                                                            (_this$_fullRequestRea7 =
                                                               this
                                                                  ._fullRequestReader) ===
                                                               null ||
                                                               _this$_fullRequestRea7 ===
                                                                  void 0 ||
                                                               _this$_fullRequestRea7.cancel(
                                                                  reason,
                                                               );
                                                            var _iterator155 =
                                                                  _createForOfIteratorHelper(
                                                                     this._rangeRequestReaders.slice(
                                                                        0,
                                                                     ),
                                                                  ),
                                                               _step155;
                                                            try {
                                                               for (
                                                                  _iterator155.s();
                                                                  !(_step155 =
                                                                     _iterator155.n())
                                                                     .done;

                                                               ) {
                                                                  var reader =
                                                                     _step155.value;
                                                                  reader.cancel(
                                                                     reason,
                                                                  );
                                                               }
                                                            } catch (err) {
                                                               _iterator155.e(
                                                                  err,
                                                               );
                                                            } finally {
                                                               _iterator155.f();
                                                            }
                                                         },
                                                      },
                                                   ],
                                                );
                                             })();
                                          BaseFullReader =
                                             /*#__PURE__*/ (function () {
                                                function BaseFullReader(
                                                   stream,
                                                ) {
                                                   _classCallCheck(
                                                      this,
                                                      BaseFullReader,
                                                   );
                                                   this._url = stream.url;
                                                   this._done = false;
                                                   this._storedError = null;
                                                   this.onProgress = null;
                                                   var source = stream.source;
                                                   this._contentLength =
                                                      source.length;
                                                   this._loaded = 0;
                                                   this._filename = null;
                                                   this._disableRange =
                                                      source.disableRange ||
                                                      false;
                                                   this._rangeChunkSize =
                                                      source.rangeChunkSize;
                                                   if (
                                                      !this._rangeChunkSize &&
                                                      !this._disableRange
                                                   ) {
                                                      this._disableRange = true;
                                                   }
                                                   this._isStreamingSupported =
                                                      !source.disableStream;
                                                   this._isRangeSupported =
                                                      !source.disableRange;
                                                   this._readableStream = null;
                                                   this._readCapability =
                                                      Promise.withResolvers();
                                                   this._headersCapability =
                                                      Promise.withResolvers();
                                                }
                                                return _createClass(
                                                   BaseFullReader,
                                                   [
                                                      {
                                                         key: "headersReady",
                                                         get: function get() {
                                                            return this
                                                               ._headersCapability
                                                               .promise;
                                                         },
                                                      },
                                                      {
                                                         key: "filename",
                                                         get: function get() {
                                                            return this
                                                               ._filename;
                                                         },
                                                      },
                                                      {
                                                         key: "contentLength",
                                                         get: function get() {
                                                            return this
                                                               ._contentLength;
                                                         },
                                                      },
                                                      {
                                                         key: "isRangeSupported",
                                                         get: function get() {
                                                            return this
                                                               ._isRangeSupported;
                                                         },
                                                      },
                                                      {
                                                         key: "isStreamingSupported",
                                                         get: function get() {
                                                            return this
                                                               ._isStreamingSupported;
                                                         },
                                                      },
                                                      {
                                                         key: "read",
                                                         value: (function () {
                                                            var _read5 =
                                                               _asyncToGenerator(
                                                                  /*#__PURE__*/ _regenerator().m(
                                                                     function _callee28() {
                                                                        var _this$onProgress5;
                                                                        var chunk,
                                                                           buffer;
                                                                        return _regenerator().w(
                                                                           function (
                                                                              _context29,
                                                                           ) {
                                                                              while (
                                                                                 1
                                                                              )
                                                                                 switch (
                                                                                    _context29.n
                                                                                 ) {
                                                                                    case 0:
                                                                                       _context29.n = 1;
                                                                                       return this
                                                                                          ._readCapability
                                                                                          .promise;
                                                                                    case 1:
                                                                                       if (
                                                                                          !this
                                                                                             ._done
                                                                                       ) {
                                                                                          _context29.n = 2;
                                                                                          break;
                                                                                       }
                                                                                       return _context29.a(
                                                                                          2,
                                                                                          {
                                                                                             value: undefined,
                                                                                             done: true,
                                                                                          },
                                                                                       );
                                                                                    case 2:
                                                                                       if (
                                                                                          !this
                                                                                             ._storedError
                                                                                       ) {
                                                                                          _context29.n = 3;
                                                                                          break;
                                                                                       }
                                                                                       throw this
                                                                                          ._storedError;
                                                                                    case 3:
                                                                                       chunk =
                                                                                          this._readableStream.read();
                                                                                       if (
                                                                                          !(
                                                                                             chunk ===
                                                                                             null
                                                                                          )
                                                                                       ) {
                                                                                          _context29.n = 4;
                                                                                          break;
                                                                                       }
                                                                                       this._readCapability =
                                                                                          Promise.withResolvers();
                                                                                       return _context29.a(
                                                                                          2,
                                                                                          this.read(),
                                                                                       );
                                                                                    case 4:
                                                                                       this._loaded +=
                                                                                          chunk.length;
                                                                                       (_this$onProgress5 =
                                                                                          this
                                                                                             .onProgress) ===
                                                                                          null ||
                                                                                          _this$onProgress5 ===
                                                                                             void 0 ||
                                                                                          _this$onProgress5.call(
                                                                                             this,
                                                                                             {
                                                                                                loaded:
                                                                                                   this
                                                                                                      ._loaded,
                                                                                                total: this
                                                                                                   ._contentLength,
                                                                                             },
                                                                                          );
                                                                                       buffer =
                                                                                          new Uint8Array(
                                                                                             chunk,
                                                                                          )
                                                                                             .buffer;
                                                                                       return _context29.a(
                                                                                          2,
                                                                                          {
                                                                                             value: buffer,
                                                                                             done: false,
                                                                                          },
                                                                                       );
                                                                                 }
                                                                           },
                                                                           _callee28,
                                                                           this,
                                                                        );
                                                                     },
                                                                  ),
                                                               );
                                                            function read() {
                                                               return _read5.apply(
                                                                  this,
                                                                  arguments,
                                                               );
                                                            }
                                                            return read;
                                                         })(),
                                                      },
                                                      {
                                                         key: "cancel",
                                                         value: function cancel(
                                                            reason,
                                                         ) {
                                                            if (
                                                               !this
                                                                  ._readableStream
                                                            ) {
                                                               this._error(
                                                                  reason,
                                                               );
                                                               return;
                                                            }
                                                            this._readableStream.destroy(
                                                               reason,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "_error",
                                                         value: function _error(
                                                            reason,
                                                         ) {
                                                            this._storedError =
                                                               reason;
                                                            this._readCapability.resolve();
                                                         },
                                                      },
                                                      {
                                                         key: "_setReadableStream",
                                                         value: function _setReadableStream(
                                                            readableStream,
                                                         ) {
                                                            var _this105 = this;
                                                            this._readableStream =
                                                               readableStream;
                                                            readableStream.on(
                                                               "readable",
                                                               function () {
                                                                  _this105._readCapability.resolve();
                                                               },
                                                            );
                                                            readableStream.on(
                                                               "end",
                                                               function () {
                                                                  readableStream.destroy();
                                                                  _this105._done = true;
                                                                  _this105._readCapability.resolve();
                                                               },
                                                            );
                                                            readableStream.on(
                                                               "error",
                                                               function (
                                                                  reason,
                                                               ) {
                                                                  _this105._error(
                                                                     reason,
                                                                  );
                                                               },
                                                            );
                                                            if (
                                                               !this
                                                                  ._isStreamingSupported &&
                                                               this
                                                                  ._isRangeSupported
                                                            ) {
                                                               this._error(
                                                                  new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(
                                                                     "streaming is disabled",
                                                                  ),
                                                               );
                                                            }
                                                            if (
                                                               this._storedError
                                                            ) {
                                                               this._readableStream.destroy(
                                                                  this
                                                                     ._storedError,
                                                               );
                                                            }
                                                         },
                                                      },
                                                   ],
                                                );
                                             })();
                                          BaseRangeReader =
                                             /*#__PURE__*/ (function () {
                                                function BaseRangeReader(
                                                   stream,
                                                ) {
                                                   _classCallCheck(
                                                      this,
                                                      BaseRangeReader,
                                                   );
                                                   this._url = stream.url;
                                                   this._done = false;
                                                   this._storedError = null;
                                                   this.onProgress = null;
                                                   this._loaded = 0;
                                                   this._readableStream = null;
                                                   this._readCapability =
                                                      Promise.withResolvers();
                                                   var source = stream.source;
                                                   this._isStreamingSupported =
                                                      !source.disableStream;
                                                }
                                                return _createClass(
                                                   BaseRangeReader,
                                                   [
                                                      {
                                                         key: "isStreamingSupported",
                                                         get: function get() {
                                                            return this
                                                               ._isStreamingSupported;
                                                         },
                                                      },
                                                      {
                                                         key: "read",
                                                         value: (function () {
                                                            var _read6 =
                                                               _asyncToGenerator(
                                                                  /*#__PURE__*/ _regenerator().m(
                                                                     function _callee29() {
                                                                        var _this$onProgress6;
                                                                        var chunk,
                                                                           buffer;
                                                                        return _regenerator().w(
                                                                           function (
                                                                              _context30,
                                                                           ) {
                                                                              while (
                                                                                 1
                                                                              )
                                                                                 switch (
                                                                                    _context30.n
                                                                                 ) {
                                                                                    case 0:
                                                                                       _context30.n = 1;
                                                                                       return this
                                                                                          ._readCapability
                                                                                          .promise;
                                                                                    case 1:
                                                                                       if (
                                                                                          !this
                                                                                             ._done
                                                                                       ) {
                                                                                          _context30.n = 2;
                                                                                          break;
                                                                                       }
                                                                                       return _context30.a(
                                                                                          2,
                                                                                          {
                                                                                             value: undefined,
                                                                                             done: true,
                                                                                          },
                                                                                       );
                                                                                    case 2:
                                                                                       if (
                                                                                          !this
                                                                                             ._storedError
                                                                                       ) {
                                                                                          _context30.n = 3;
                                                                                          break;
                                                                                       }
                                                                                       throw this
                                                                                          ._storedError;
                                                                                    case 3:
                                                                                       chunk =
                                                                                          this._readableStream.read();
                                                                                       if (
                                                                                          !(
                                                                                             chunk ===
                                                                                             null
                                                                                          )
                                                                                       ) {
                                                                                          _context30.n = 4;
                                                                                          break;
                                                                                       }
                                                                                       this._readCapability =
                                                                                          Promise.withResolvers();
                                                                                       return _context30.a(
                                                                                          2,
                                                                                          this.read(),
                                                                                       );
                                                                                    case 4:
                                                                                       this._loaded +=
                                                                                          chunk.length;
                                                                                       (_this$onProgress6 =
                                                                                          this
                                                                                             .onProgress) ===
                                                                                          null ||
                                                                                          _this$onProgress6 ===
                                                                                             void 0 ||
                                                                                          _this$onProgress6.call(
                                                                                             this,
                                                                                             {
                                                                                                loaded:
                                                                                                   this
                                                                                                      ._loaded,
                                                                                             },
                                                                                          );
                                                                                       buffer =
                                                                                          new Uint8Array(
                                                                                             chunk,
                                                                                          )
                                                                                             .buffer;
                                                                                       return _context30.a(
                                                                                          2,
                                                                                          {
                                                                                             value: buffer,
                                                                                             done: false,
                                                                                          },
                                                                                       );
                                                                                 }
                                                                           },
                                                                           _callee29,
                                                                           this,
                                                                        );
                                                                     },
                                                                  ),
                                                               );
                                                            function read() {
                                                               return _read6.apply(
                                                                  this,
                                                                  arguments,
                                                               );
                                                            }
                                                            return read;
                                                         })(),
                                                      },
                                                      {
                                                         key: "cancel",
                                                         value: function cancel(
                                                            reason,
                                                         ) {
                                                            if (
                                                               !this
                                                                  ._readableStream
                                                            ) {
                                                               this._error(
                                                                  reason,
                                                               );
                                                               return;
                                                            }
                                                            this._readableStream.destroy(
                                                               reason,
                                                            );
                                                         },
                                                      },
                                                      {
                                                         key: "_error",
                                                         value: function _error(
                                                            reason,
                                                         ) {
                                                            this._storedError =
                                                               reason;
                                                            this._readCapability.resolve();
                                                         },
                                                      },
                                                      {
                                                         key: "_setReadableStream",
                                                         value: function _setReadableStream(
                                                            readableStream,
                                                         ) {
                                                            var _this106 = this;
                                                            this._readableStream =
                                                               readableStream;
                                                            readableStream.on(
                                                               "readable",
                                                               function () {
                                                                  _this106._readCapability.resolve();
                                                               },
                                                            );
                                                            readableStream.on(
                                                               "end",
                                                               function () {
                                                                  readableStream.destroy();
                                                                  _this106._done = true;
                                                                  _this106._readCapability.resolve();
                                                               },
                                                            );
                                                            readableStream.on(
                                                               "error",
                                                               function (
                                                                  reason,
                                                               ) {
                                                                  _this106._error(
                                                                     reason,
                                                                  );
                                                               },
                                                            );
                                                            if (
                                                               this._storedError
                                                            ) {
                                                               this._readableStream.destroy(
                                                                  this
                                                                     ._storedError,
                                                               );
                                                            }
                                                         },
                                                      },
                                                   ],
                                                );
                                             })();
                                          PDFNodeStreamFullReader =
                                             /*#__PURE__*/ (function (
                                                _BaseFullReader,
                                             ) {
                                                function PDFNodeStreamFullReader(
                                                   stream,
                                                ) {
                                                   var _this107;
                                                   _classCallCheck(
                                                      this,
                                                      PDFNodeStreamFullReader,
                                                   );
                                                   _this107 = _callSuper(
                                                      this,
                                                      PDFNodeStreamFullReader,
                                                      [stream],
                                                   );
                                                   var handleResponse =
                                                      function handleResponse(
                                                         response,
                                                      ) {
                                                         if (
                                                            response.statusCode ===
                                                            404
                                                         ) {
                                                            var error =
                                                               new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException(
                                                                  'Missing PDF "'.concat(
                                                                     _this107._url,
                                                                     '".',
                                                                  ),
                                                               );
                                                            _this107._storedError =
                                                               error;
                                                            _this107._headersCapability.reject(
                                                               error,
                                                            );
                                                            return;
                                                         }
                                                         _this107._headersCapability.resolve();
                                                         _this107._setReadableStream(
                                                            response,
                                                         );
                                                         var getResponseHeader =
                                                            function getResponseHeader(
                                                               name,
                                                            ) {
                                                               return _this107
                                                                  ._readableStream
                                                                  .headers[
                                                                  name.toLowerCase()
                                                               ];
                                                            };
                                                         var _ref122 = (0,
                                                            _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.validateRangeRequestCapabilities)(
                                                               {
                                                                  getResponseHeader:
                                                                     getResponseHeader,
                                                                  isHttp:
                                                                     stream.isHttp,
                                                                  rangeChunkSize:
                                                                     _this107._rangeChunkSize,
                                                                  disableRange:
                                                                     _this107._disableRange,
                                                               },
                                                            ),
                                                            allowRangeRequests =
                                                               _ref122.allowRangeRequests,
                                                            suggestedLength =
                                                               _ref122.suggestedLength;
                                                         _this107._isRangeSupported =
                                                            allowRangeRequests;
                                                         _this107._contentLength =
                                                            suggestedLength ||
                                                            _this107._contentLength;
                                                         _this107._filename =
                                                            (0,
                                                            _network_utils_js__WEBPACK_IMPORTED_MODULE_1__.extractFilenameFromHeader)(
                                                               getResponseHeader,
                                                            );
                                                      };
                                                   _this107._request = null;
                                                   if (
                                                      _this107._url.protocol ===
                                                      "http:"
                                                   ) {
                                                      _this107._request =
                                                         http.request(
                                                            createRequestOptions(
                                                               _this107._url,
                                                               stream.httpHeaders,
                                                            ),
                                                            handleResponse,
                                                         );
                                                   } else {
                                                      _this107._request =
                                                         https.request(
                                                            createRequestOptions(
                                                               _this107._url,
                                                               stream.httpHeaders,
                                                            ),
                                                            handleResponse,
                                                         );
                                                   }
                                                   _this107._request.on(
                                                      "error",
                                                      function (reason) {
                                                         _this107._storedError =
                                                            reason;
                                                         _this107._headersCapability.reject(
                                                            reason,
                                                         );
                                                      },
                                                   );
                                                   _this107._request.end();
                                                   return _this107;
                                                }
                                                _inherits(
                                                   PDFNodeStreamFullReader,
                                                   _BaseFullReader,
                                                );
                                                return _createClass(
                                                   PDFNodeStreamFullReader,
                                                );
                                             })(BaseFullReader);
                                          PDFNodeStreamRangeReader =
                                             /*#__PURE__*/ (function (
                                                _BaseRangeReader,
                                             ) {
                                                function PDFNodeStreamRangeReader(
                                                   stream,
                                                   start,
                                                   end,
                                                ) {
                                                   var _this108;
                                                   _classCallCheck(
                                                      this,
                                                      PDFNodeStreamRangeReader,
                                                   );
                                                   _this108 = _callSuper(
                                                      this,
                                                      PDFNodeStreamRangeReader,
                                                      [stream],
                                                   );
                                                   _this108._httpHeaders = {};
                                                   for (var property in stream.httpHeaders) {
                                                      var value =
                                                         stream.httpHeaders[
                                                            property
                                                         ];
                                                      if (value === undefined) {
                                                         continue;
                                                      }
                                                      _this108._httpHeaders[
                                                         property
                                                      ] = value;
                                                   }
                                                   _this108._httpHeaders.Range =
                                                      "bytes="
                                                         .concat(start, "-")
                                                         .concat(end - 1);
                                                   var handleResponse =
                                                      function handleResponse(
                                                         response,
                                                      ) {
                                                         if (
                                                            response.statusCode ===
                                                            404
                                                         ) {
                                                            var error =
                                                               new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException(
                                                                  'Missing PDF "'.concat(
                                                                     _this108._url,
                                                                     '".',
                                                                  ),
                                                               );
                                                            _this108._storedError =
                                                               error;
                                                            return;
                                                         }
                                                         _this108._setReadableStream(
                                                            response,
                                                         );
                                                      };
                                                   _this108._request = null;
                                                   if (
                                                      _this108._url.protocol ===
                                                      "http:"
                                                   ) {
                                                      _this108._request =
                                                         http.request(
                                                            createRequestOptions(
                                                               _this108._url,
                                                               _this108._httpHeaders,
                                                            ),
                                                            handleResponse,
                                                         );
                                                   } else {
                                                      _this108._request =
                                                         https.request(
                                                            createRequestOptions(
                                                               _this108._url,
                                                               _this108._httpHeaders,
                                                            ),
                                                            handleResponse,
                                                         );
                                                   }
                                                   _this108._request.on(
                                                      "error",
                                                      function (reason) {
                                                         _this108._storedError =
                                                            reason;
                                                      },
                                                   );
                                                   _this108._request.end();
                                                   return _this108;
                                                }
                                                _inherits(
                                                   PDFNodeStreamRangeReader,
                                                   _BaseRangeReader,
                                                );
                                                return _createClass(
                                                   PDFNodeStreamRangeReader,
                                                );
                                             })(BaseRangeReader);
                                          PDFNodeStreamFsFullReader =
                                             /*#__PURE__*/ (function (
                                                _BaseFullReader2,
                                             ) {
                                                function PDFNodeStreamFsFullReader(
                                                   stream,
                                                ) {
                                                   var _this109;
                                                   _classCallCheck(
                                                      this,
                                                      PDFNodeStreamFsFullReader,
                                                   );
                                                   _this109 = _callSuper(
                                                      this,
                                                      PDFNodeStreamFsFullReader,
                                                      [stream],
                                                   );
                                                   var path =
                                                      decodeURIComponent(
                                                         _this109._url.path,
                                                      );
                                                   if (
                                                      fileUriRegex.test(
                                                         _this109._url.href,
                                                      )
                                                   ) {
                                                      path = path.replace(
                                                         /^\//,
                                                         "",
                                                      );
                                                   }
                                                   fs.promises.lstat(path).then(
                                                      function (stat) {
                                                         _this109._contentLength =
                                                            stat.size;
                                                         _this109._setReadableStream(
                                                            fs.createReadStream(
                                                               path,
                                                            ),
                                                         );
                                                         _this109._headersCapability.resolve();
                                                      },
                                                      function (error) {
                                                         if (
                                                            error.code ===
                                                            "ENOENT"
                                                         ) {
                                                            error =
                                                               new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException(
                                                                  'Missing PDF "'.concat(
                                                                     path,
                                                                     '".',
                                                                  ),
                                                               );
                                                         }
                                                         _this109._storedError =
                                                            error;
                                                         _this109._headersCapability.reject(
                                                            error,
                                                         );
                                                      },
                                                   );
                                                   return _this109;
                                                }
                                                _inherits(
                                                   PDFNodeStreamFsFullReader,
                                                   _BaseFullReader2,
                                                );
                                                return _createClass(
                                                   PDFNodeStreamFsFullReader,
                                                );
                                             })(BaseFullReader);
                                          PDFNodeStreamFsRangeReader =
                                             /*#__PURE__*/ (function (
                                                _BaseRangeReader2,
                                             ) {
                                                function PDFNodeStreamFsRangeReader(
                                                   stream,
                                                   start,
                                                   end,
                                                ) {
                                                   var _this110;
                                                   _classCallCheck(
                                                      this,
                                                      PDFNodeStreamFsRangeReader,
                                                   );
                                                   _this110 = _callSuper(
                                                      this,
                                                      PDFNodeStreamFsRangeReader,
                                                      [stream],
                                                   );
                                                   var path =
                                                      decodeURIComponent(
                                                         _this110._url.path,
                                                      );
                                                   if (
                                                      fileUriRegex.test(
                                                         _this110._url.href,
                                                      )
                                                   ) {
                                                      path = path.replace(
                                                         /^\//,
                                                         "",
                                                      );
                                                   }
                                                   _this110._setReadableStream(
                                                      fs.createReadStream(
                                                         path,
                                                         {
                                                            start: start,
                                                            end: end - 1,
                                                         },
                                                      ),
                                                   );
                                                   return _this110;
                                                }
                                                _inherits(
                                                   PDFNodeStreamFsRangeReader,
                                                   _BaseRangeReader2,
                                                );
                                                return _createClass(
                                                   PDFNodeStreamFsRangeReader,
                                                );
                                             })(BaseRangeReader);
                                          __webpack_async_result__();
                                          _context31.n = 7;
                                          break;
                                       case 6:
                                          _context31.p = 6;
                                          _t15 = _context31.v;
                                          __webpack_async_result__(_t15);
                                       case 7:
                                          return _context31.a(2);
                                    }
                              },
                              _callee30,
                              null,
                              [[0, 6]],
                           );
                        },
                     ),
                  );
                  return function (_x24, _x25) {
                     return _ref121.apply(this, arguments);
                  };
               })(),
               1,
            ); /***/
         },
         /***/ 573: /***/ function _(
            __webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            __webpack_require__.a(
               __webpack_module__,
               /*#__PURE__*/ (function () {
                  var _ref123 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee31(
                           __webpack_handle_async_dependencies__,
                           __webpack_async_result__,
                        ) {
                           var _base_factory_js__WEBPACK_IMPORTED_MODULE_0__,
                              _shared_util_js__WEBPACK_IMPORTED_MODULE_1__,
                              fs,
                              canvas,
                              path2d,
                              fetchData,
                              _NodeFilterFactory,
                              _NodeCanvasFactory,
                              _NodeCMapReaderFactory,
                              _NodeStandardFontDataFactory,
                              _t16,
                              _t17,
                              _t18;
                           return _regenerator().w(
                              function (_context32) {
                                 while (1)
                                    switch ((_context32.p = _context32.n)) {
                                       case 0:
                                          _context32.p = 0;
                                          /* harmony export */ __webpack_require__.d(
                                             __webpack_exports__,
                                             {
                                                /* harmony export */ NodeCMapReaderFactory:
                                                   function NodeCMapReaderFactory() {
                                                      return /* binding */ _NodeCMapReaderFactory;
                                                   },
                                                /* harmony export */ NodeCanvasFactory:
                                                   function NodeCanvasFactory() {
                                                      return /* binding */ _NodeCanvasFactory;
                                                   },
                                                /* harmony export */ NodeFilterFactory:
                                                   function NodeFilterFactory() {
                                                      return /* binding */ _NodeFilterFactory;
                                                   },
                                                /* harmony export */ NodeStandardFontDataFactory:
                                                   function NodeStandardFontDataFactory() {
                                                      return /* binding */ _NodeStandardFontDataFactory;
                                                   } /* harmony export */,
                                             },
                                          );
                                          /* harmony import */ _base_factory_js__WEBPACK_IMPORTED_MODULE_0__ =
                                             __webpack_require__(583);
                                          /* harmony import */ _shared_util_js__WEBPACK_IMPORTED_MODULE_1__ =
                                             __webpack_require__(292);
                                          if (
                                             !_shared_util_js__WEBPACK_IMPORTED_MODULE_1__.isNodeJS
                                          ) {
                                             _context32.n = 8;
                                             break;
                                          }
                                          _context32.n = 1;
                                          return Promise.resolve().then(
                                             function () {
                                                return _interopRequireWildcard(
                                                   require(/*webpackIgnore: true*/ "fs"),
                                                );
                                             },
                                          );
                                       case 1:
                                          fs = _context32.v;
                                          _context32.p = 2;
                                          _context32.n = 3;
                                          return Promise.resolve().then(
                                             function () {
                                                return _interopRequireWildcard(
                                                   require(/*webpackIgnore: true*/ "canvas"),
                                                );
                                             },
                                          );
                                       case 3:
                                          canvas = _context32.v;
                                          _context32.n = 5;
                                          break;
                                       case 4:
                                          _context32.p = 4;
                                          _t16 = _context32.v;
                                       case 5:
                                          _context32.p = 5;
                                          _context32.n = 6;
                                          return Promise.resolve().then(
                                             function () {
                                                return _interopRequireWildcard(
                                                   require(/*webpackIgnore: true*/ "path2d"),
                                                );
                                             },
                                          );
                                       case 6:
                                          path2d = _context32.v;
                                          _context32.n = 8;
                                          break;
                                       case 7:
                                          _context32.p = 7;
                                          _t17 = _context32.v;
                                       case 8:
                                          fetchData = function fetchData(url) {
                                             return fs.promises
                                                .readFile(url)
                                                .then(function (data) {
                                                   return new Uint8Array(data);
                                                });
                                          };
                                          _NodeFilterFactory =
                                             /*#__PURE__*/ (function (
                                                _base_factory_js__WEB6,
                                             ) {
                                                function _NodeFilterFactory() {
                                                   _classCallCheck(
                                                      this,
                                                      _NodeFilterFactory,
                                                   );
                                                   return _callSuper(
                                                      this,
                                                      _NodeFilterFactory,
                                                      arguments,
                                                   );
                                                }
                                                _inherits(
                                                   _NodeFilterFactory,
                                                   _base_factory_js__WEB6,
                                                );
                                                return _createClass(
                                                   _NodeFilterFactory,
                                                );
                                             })(
                                                _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseFilterFactory,
                                             );
                                          _NodeCanvasFactory =
                                             /*#__PURE__*/ (function (
                                                _base_factory_js__WEB7,
                                             ) {
                                                function _NodeCanvasFactory() {
                                                   _classCallCheck(
                                                      this,
                                                      _NodeCanvasFactory,
                                                   );
                                                   return _callSuper(
                                                      this,
                                                      _NodeCanvasFactory,
                                                      arguments,
                                                   );
                                                }
                                                _inherits(
                                                   _NodeCanvasFactory,
                                                   _base_factory_js__WEB7,
                                                );
                                                return _createClass(
                                                   _NodeCanvasFactory,
                                                   [
                                                      {
                                                         key: "_createCanvas",
                                                         value: function _createCanvas(
                                                            width,
                                                            height,
                                                         ) {
                                                            return canvas.createCanvas(
                                                               width,
                                                               height,
                                                            );
                                                         },
                                                      },
                                                   ],
                                                );
                                             })(
                                                _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseCanvasFactory,
                                             );
                                          _NodeCMapReaderFactory =
                                             /*#__PURE__*/ (function (
                                                _base_factory_js__WEB8,
                                             ) {
                                                function _NodeCMapReaderFactory() {
                                                   _classCallCheck(
                                                      this,
                                                      _NodeCMapReaderFactory,
                                                   );
                                                   return _callSuper(
                                                      this,
                                                      _NodeCMapReaderFactory,
                                                      arguments,
                                                   );
                                                }
                                                _inherits(
                                                   _NodeCMapReaderFactory,
                                                   _base_factory_js__WEB8,
                                                );
                                                return _createClass(
                                                   _NodeCMapReaderFactory,
                                                   [
                                                      {
                                                         key: "_fetchData",
                                                         value: function _fetchData(
                                                            url,
                                                            compressionType,
                                                         ) {
                                                            return fetchData(
                                                               url,
                                                            ).then(
                                                               function (data) {
                                                                  return {
                                                                     cMapData:
                                                                        data,
                                                                     compressionType:
                                                                        compressionType,
                                                                  };
                                                               },
                                                            );
                                                         },
                                                      },
                                                   ],
                                                );
                                             })(
                                                _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseCMapReaderFactory,
                                             );
                                          _NodeStandardFontDataFactory =
                                             /*#__PURE__*/ (function (
                                                _base_factory_js__WEB9,
                                             ) {
                                                function _NodeStandardFontDataFactory() {
                                                   _classCallCheck(
                                                      this,
                                                      _NodeStandardFontDataFactory,
                                                   );
                                                   return _callSuper(
                                                      this,
                                                      _NodeStandardFontDataFactory,
                                                      arguments,
                                                   );
                                                }
                                                _inherits(
                                                   _NodeStandardFontDataFactory,
                                                   _base_factory_js__WEB9,
                                                );
                                                return _createClass(
                                                   _NodeStandardFontDataFactory,
                                                   [
                                                      {
                                                         key: "_fetchData",
                                                         value: function _fetchData(
                                                            url,
                                                         ) {
                                                            return fetchData(
                                                               url,
                                                            );
                                                         },
                                                      },
                                                   ],
                                                );
                                             })(
                                                _base_factory_js__WEBPACK_IMPORTED_MODULE_0__.BaseStandardFontDataFactory,
                                             );
                                          __webpack_async_result__();
                                          _context32.n = 10;
                                          break;
                                       case 9:
                                          _context32.p = 9;
                                          _t18 = _context32.v;
                                          __webpack_async_result__(_t18);
                                       case 10:
                                          return _context32.a(2);
                                    }
                              },
                              _callee31,
                              null,
                              [
                                 [5, 7],
                                 [2, 4],
                                 [0, 9],
                              ],
                           );
                        },
                     ),
                  );
                  return function (_x26, _x27) {
                     return _ref123.apply(this, arguments);
                  };
               })(),
               1,
            ); /***/
         },
         /***/ 626: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ OptionalContentConfig:
                  function OptionalContentConfig() {
                     return /* binding */ _OptionalContentConfig;
                  } /* harmony export */,
            });
            /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(292);
            /* harmony import */ var _shared_murmurhash3_js__WEBPACK_IMPORTED_MODULE_1__ =
               __webpack_require__(651);
            var INTERNAL = Symbol("INTERNAL");
            var _isDisplay = /*#__PURE__*/ new WeakMap();
            var _isPrint = /*#__PURE__*/ new WeakMap();
            var _userSet = /*#__PURE__*/ new WeakMap();
            var _visible = /*#__PURE__*/ new WeakMap();
            var OptionalContentGroup = /*#__PURE__*/ (function () {
               function OptionalContentGroup(renderingIntent, _ref124) {
                  var name = _ref124.name,
                     intent = _ref124.intent,
                     usage = _ref124.usage;
                  _classCallCheck(this, OptionalContentGroup);
                  _classPrivateFieldInitSpec(this, _isDisplay, false);
                  _classPrivateFieldInitSpec(this, _isPrint, false);
                  _classPrivateFieldInitSpec(this, _userSet, false);
                  _classPrivateFieldInitSpec(this, _visible, true);
                  _classPrivateFieldSet(
                     _isDisplay,
                     this,
                     !!(
                        renderingIntent &
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                           .RenderingIntentFlag.DISPLAY
                     ),
                  );
                  _classPrivateFieldSet(
                     _isPrint,
                     this,
                     !!(
                        renderingIntent &
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                           .RenderingIntentFlag.PRINT
                     ),
                  );
                  this.name = name;
                  this.intent = intent;
                  this.usage = usage;
               }
               return _createClass(OptionalContentGroup, [
                  {
                     key: "visible",
                     get: function get() {
                        if (_classPrivateFieldGet(_userSet, this)) {
                           return _classPrivateFieldGet(_visible, this);
                        }
                        if (!_classPrivateFieldGet(_visible, this)) {
                           return false;
                        }
                        var _this$usage = this.usage,
                           print = _this$usage.print,
                           view = _this$usage.view;
                        if (_classPrivateFieldGet(_isDisplay, this)) {
                           return (
                              (view === null || view === void 0
                                 ? void 0
                                 : view.viewState) !== "OFF"
                           );
                        } else if (_classPrivateFieldGet(_isPrint, this)) {
                           return (
                              (print === null || print === void 0
                                 ? void 0
                                 : print.printState) !== "OFF"
                           );
                        }
                        return true;
                     },
                  },
                  {
                     key: "_setVisible",
                     value: function _setVisible(internal, visible) {
                        var userSet =
                           arguments.length > 2 && arguments[2] !== undefined
                              ? arguments[2]
                              : false;
                        if (internal !== INTERNAL) {
                           (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(
                              "Internal method `_setVisible` called.",
                           );
                        }
                        _classPrivateFieldSet(_userSet, this, userSet);
                        _classPrivateFieldSet(_visible, this, visible);
                     },
                  },
               ]);
            })();
            var _cachedGetHash = /*#__PURE__*/ new WeakMap();
            var _groups = /*#__PURE__*/ new WeakMap();
            var _initialHash = /*#__PURE__*/ new WeakMap();
            var _order = /*#__PURE__*/ new WeakMap();
            var _OptionalContentConfig_brand = /*#__PURE__*/ new WeakSet();
            var _OptionalContentConfig = /*#__PURE__*/ (function () {
               function _OptionalContentConfig(data) {
                  var renderingIntent =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : _shared_util_js__WEBPACK_IMPORTED_MODULE_0__
                             .RenderingIntentFlag.DISPLAY;
                  _classCallCheck(this, _OptionalContentConfig);
                  _classPrivateMethodInitSpec(
                     this,
                     _OptionalContentConfig_brand,
                  );
                  _classPrivateFieldInitSpec(this, _cachedGetHash, null);
                  _classPrivateFieldInitSpec(this, _groups, new Map());
                  _classPrivateFieldInitSpec(this, _initialHash, null);
                  _classPrivateFieldInitSpec(this, _order, null);
                  this.renderingIntent = renderingIntent;
                  this.name = null;
                  this.creator = null;
                  if (data === null) {
                     return;
                  }
                  this.name = data.name;
                  this.creator = data.creator;
                  _classPrivateFieldSet(_order, this, data.order);
                  var _iterator156 = _createForOfIteratorHelper(data.groups),
                     _step156;
                  try {
                     for (
                        _iterator156.s();
                        !(_step156 = _iterator156.n()).done;

                     ) {
                        var _group = _step156.value;
                        _classPrivateFieldGet(_groups, this).set(
                           _group.id,
                           new OptionalContentGroup(renderingIntent, _group),
                        );
                     }
                  } catch (err) {
                     _iterator156.e(err);
                  } finally {
                     _iterator156.f();
                  }
                  if (data.baseState === "OFF") {
                     var _iterator157 = _createForOfIteratorHelper(
                           _classPrivateFieldGet(_groups, this).values(),
                        ),
                        _step157;
                     try {
                        for (
                           _iterator157.s();
                           !(_step157 = _iterator157.n()).done;

                        ) {
                           var group = _step157.value;
                           group._setVisible(INTERNAL, false);
                        }
                     } catch (err) {
                        _iterator157.e(err);
                     } finally {
                        _iterator157.f();
                     }
                  }
                  var _iterator158 = _createForOfIteratorHelper(data.on),
                     _step158;
                  try {
                     for (
                        _iterator158.s();
                        !(_step158 = _iterator158.n()).done;

                     ) {
                        var on = _step158.value;
                        _classPrivateFieldGet(_groups, this)
                           .get(on)
                           ._setVisible(INTERNAL, true);
                     }
                  } catch (err) {
                     _iterator158.e(err);
                  } finally {
                     _iterator158.f();
                  }
                  var _iterator159 = _createForOfIteratorHelper(data.off),
                     _step159;
                  try {
                     for (
                        _iterator159.s();
                        !(_step159 = _iterator159.n()).done;

                     ) {
                        var off = _step159.value;
                        _classPrivateFieldGet(_groups, this)
                           .get(off)
                           ._setVisible(INTERNAL, false);
                     }
                  } catch (err) {
                     _iterator159.e(err);
                  } finally {
                     _iterator159.f();
                  }
                  _classPrivateFieldSet(_initialHash, this, this.getHash());
               }
               return _createClass(_OptionalContentConfig, [
                  {
                     key: "isVisible",
                     value: function isVisible(group) {
                        if (_classPrivateFieldGet(_groups, this).size === 0) {
                           return true;
                        }
                        if (!group) {
                           (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.info)(
                              "Optional content group not defined.",
                           );
                           return true;
                        }
                        if (group.type === "OCG") {
                           if (
                              !_classPrivateFieldGet(_groups, this).has(
                                 group.id,
                              )
                           ) {
                              (0,
                              _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                                 "Optional content group not found: ".concat(
                                    group.id,
                                 ),
                              );
                              return true;
                           }
                           return _classPrivateFieldGet(_groups, this).get(
                              group.id,
                           ).visible;
                        } else if (group.type === "OCMD") {
                           if (group.expression) {
                              return _assertClassBrand(
                                 _OptionalContentConfig_brand,
                                 this,
                                 _evaluateVisibilityExpression,
                              ).call(this, group.expression);
                           }
                           if (!group.policy || group.policy === "AnyOn") {
                              var _iterator160 = _createForOfIteratorHelper(
                                    group.ids,
                                 ),
                                 _step160;
                              try {
                                 for (
                                    _iterator160.s();
                                    !(_step160 = _iterator160.n()).done;

                                 ) {
                                    var id = _step160.value;
                                    if (
                                       !_classPrivateFieldGet(
                                          _groups,
                                          this,
                                       ).has(id)
                                    ) {
                                       (0,
                                       _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                                          "Optional content group not found: ".concat(
                                             id,
                                          ),
                                       );
                                       return true;
                                    }
                                    if (
                                       _classPrivateFieldGet(_groups, this).get(
                                          id,
                                       ).visible
                                    ) {
                                       return true;
                                    }
                                 }
                              } catch (err) {
                                 _iterator160.e(err);
                              } finally {
                                 _iterator160.f();
                              }
                              return false;
                           } else if (group.policy === "AllOn") {
                              var _iterator161 = _createForOfIteratorHelper(
                                    group.ids,
                                 ),
                                 _step161;
                              try {
                                 for (
                                    _iterator161.s();
                                    !(_step161 = _iterator161.n()).done;

                                 ) {
                                    var _id8 = _step161.value;
                                    if (
                                       !_classPrivateFieldGet(
                                          _groups,
                                          this,
                                       ).has(_id8)
                                    ) {
                                       (0,
                                       _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                                          "Optional content group not found: ".concat(
                                             _id8,
                                          ),
                                       );
                                       return true;
                                    }
                                    if (
                                       !_classPrivateFieldGet(
                                          _groups,
                                          this,
                                       ).get(_id8).visible
                                    ) {
                                       return false;
                                    }
                                 }
                              } catch (err) {
                                 _iterator161.e(err);
                              } finally {
                                 _iterator161.f();
                              }
                              return true;
                           } else if (group.policy === "AnyOff") {
                              var _iterator162 = _createForOfIteratorHelper(
                                    group.ids,
                                 ),
                                 _step162;
                              try {
                                 for (
                                    _iterator162.s();
                                    !(_step162 = _iterator162.n()).done;

                                 ) {
                                    var _id9 = _step162.value;
                                    if (
                                       !_classPrivateFieldGet(
                                          _groups,
                                          this,
                                       ).has(_id9)
                                    ) {
                                       (0,
                                       _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                                          "Optional content group not found: ".concat(
                                             _id9,
                                          ),
                                       );
                                       return true;
                                    }
                                    if (
                                       !_classPrivateFieldGet(
                                          _groups,
                                          this,
                                       ).get(_id9).visible
                                    ) {
                                       return true;
                                    }
                                 }
                              } catch (err) {
                                 _iterator162.e(err);
                              } finally {
                                 _iterator162.f();
                              }
                              return false;
                           } else if (group.policy === "AllOff") {
                              var _iterator163 = _createForOfIteratorHelper(
                                    group.ids,
                                 ),
                                 _step163;
                              try {
                                 for (
                                    _iterator163.s();
                                    !(_step163 = _iterator163.n()).done;

                                 ) {
                                    var _id0 = _step163.value;
                                    if (
                                       !_classPrivateFieldGet(
                                          _groups,
                                          this,
                                       ).has(_id0)
                                    ) {
                                       (0,
                                       _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                                          "Optional content group not found: ".concat(
                                             _id0,
                                          ),
                                       );
                                       return true;
                                    }
                                    if (
                                       _classPrivateFieldGet(_groups, this).get(
                                          _id0,
                                       ).visible
                                    ) {
                                       return false;
                                    }
                                 }
                              } catch (err) {
                                 _iterator163.e(err);
                              } finally {
                                 _iterator163.f();
                              }
                              return true;
                           }
                           (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                              "Unknown optional content policy ".concat(
                                 group.policy,
                                 ".",
                              ),
                           );
                           return true;
                        }
                        (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                           "Unknown group type ".concat(group.type, "."),
                        );
                        return true;
                     },
                  },
                  {
                     key: "setVisibility",
                     value: function setVisibility(id) {
                        var visible =
                           arguments.length > 1 && arguments[1] !== undefined
                              ? arguments[1]
                              : true;
                        var group = _classPrivateFieldGet(_groups, this).get(
                           id,
                        );
                        if (!group) {
                           (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                              "Optional content group not found: ".concat(id),
                           );
                           return;
                        }
                        group._setVisible(INTERNAL, !!visible, true);
                        _classPrivateFieldSet(_cachedGetHash, this, null);
                     },
                  },
                  {
                     key: "setOCGState",
                     value: function setOCGState(_ref125) {
                        var state = _ref125.state,
                           preserveRB = _ref125.preserveRB;
                        var operator;
                        var _iterator164 = _createForOfIteratorHelper(state),
                           _step164;
                        try {
                           for (
                              _iterator164.s();
                              !(_step164 = _iterator164.n()).done;

                           ) {
                              var elem = _step164.value;
                              switch (elem) {
                                 case "ON":
                                 case "OFF":
                                 case "Toggle":
                                    operator = elem;
                                    continue;
                              }
                              var group = _classPrivateFieldGet(
                                 _groups,
                                 this,
                              ).get(elem);
                              if (!group) {
                                 continue;
                              }
                              switch (operator) {
                                 case "ON":
                                    group._setVisible(INTERNAL, true);
                                    break;
                                 case "OFF":
                                    group._setVisible(INTERNAL, false);
                                    break;
                                 case "Toggle":
                                    group._setVisible(INTERNAL, !group.visible);
                                    break;
                              }
                           }
                        } catch (err) {
                           _iterator164.e(err);
                        } finally {
                           _iterator164.f();
                        }
                        _classPrivateFieldSet(_cachedGetHash, this, null);
                     },
                  },
                  {
                     key: "hasInitialVisibility",
                     get: function get() {
                        return (
                           _classPrivateFieldGet(_initialHash, this) === null ||
                           this.getHash() ===
                              _classPrivateFieldGet(_initialHash, this)
                        );
                     },
                  },
                  {
                     key: "getOrder",
                     value: function getOrder() {
                        if (!_classPrivateFieldGet(_groups, this).size) {
                           return null;
                        }
                        if (_classPrivateFieldGet(_order, this)) {
                           return _classPrivateFieldGet(_order, this).slice();
                        }
                        return _toConsumableArray(
                           _classPrivateFieldGet(_groups, this).keys(),
                        );
                     },
                  },
                  {
                     key: "getGroups",
                     value: function getGroups() {
                        return _classPrivateFieldGet(_groups, this).size > 0
                           ? (0,
                             _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.objectFromMap)(
                                _classPrivateFieldGet(_groups, this),
                             )
                           : null;
                     },
                  },
                  {
                     key: "getGroup",
                     value: function getGroup(id) {
                        return (
                           _classPrivateFieldGet(_groups, this).get(id) || null
                        );
                     },
                  },
                  {
                     key: "getHash",
                     value: function getHash() {
                        if (
                           _classPrivateFieldGet(_cachedGetHash, this) !== null
                        ) {
                           return _classPrivateFieldGet(_cachedGetHash, this);
                        }
                        var hash =
                           new _shared_murmurhash3_js__WEBPACK_IMPORTED_MODULE_1__.MurmurHash3_64();
                        var _iterator165 = _createForOfIteratorHelper(
                              _classPrivateFieldGet(_groups, this),
                           ),
                           _step165;
                        try {
                           for (
                              _iterator165.s();
                              !(_step165 = _iterator165.n()).done;

                           ) {
                              var _step165$value = _slicedToArray(
                                    _step165.value,
                                    2,
                                 ),
                                 id = _step165$value[0],
                                 group = _step165$value[1];
                              hash.update(
                                 "".concat(id, ":").concat(group.visible),
                              );
                           }
                        } catch (err) {
                           _iterator165.e(err);
                        } finally {
                           _iterator165.f();
                        }
                        return _classPrivateFieldSet(
                           _cachedGetHash,
                           this,
                           hash.hexdigest(),
                        );
                     },
                  },
               ]);
            })();
            /***/ function _evaluateVisibilityExpression(array) {
               var length = array.length;
               if (length < 2) {
                  return true;
               }
               var operator = array[0];
               for (var i = 1; i < length; i++) {
                  var element = array[i];
                  var state = void 0;
                  if (Array.isArray(element)) {
                     state = _assertClassBrand(
                        _OptionalContentConfig_brand,
                        this,
                        _evaluateVisibilityExpression,
                     ).call(this, element);
                  } else if (
                     _classPrivateFieldGet(_groups, this).has(element)
                  ) {
                     state = _classPrivateFieldGet(_groups, this).get(
                        element,
                     ).visible;
                  } else {
                     (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.warn)(
                        "Optional content group not found: ".concat(element),
                     );
                     return true;
                  }
                  switch (operator) {
                     case "And":
                        if (!state) {
                           return false;
                        }
                        break;
                     case "Or":
                        if (state) {
                           return true;
                        }
                        break;
                     case "Not":
                        return !state;
                     default:
                        return true;
                  }
               }
               return operator === "And";
            }
         },
         /***/ 814: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ cleanupTextLayer:
                  function cleanupTextLayer() {
                     return /* binding */ _cleanupTextLayer;
                  },
               /* harmony export */ renderTextLayer:
                  function renderTextLayer() {
                     return /* binding */ _renderTextLayer;
                  },
               /* harmony export */ updateTextLayer:
                  function updateTextLayer() {
                     return /* binding */ _updateTextLayer;
                  } /* harmony export */,
            });
            /* unused harmony export TextLayerRenderTask */ /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(292);
            /* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_1__ =
               __webpack_require__(419);
            var MAX_TEXT_DIVS_TO_RENDER = 100000;
            var DEFAULT_FONT_SIZE = 30;
            var DEFAULT_FONT_ASCENT = 0.8;
            var ascentCache = new Map();
            var _canvasContext = null;
            function getCtx() {
               if (!_canvasContext) {
                  var canvas = document.createElement("canvas");
                  canvas.className = "hiddenCanvasElement";
                  document.body.append(canvas);
                  _canvasContext = canvas.getContext("2d", { alpha: false });
               }
               return _canvasContext;
            }
            function _cleanupTextLayer() {
               var _canvasContext2;
               (_canvasContext2 = _canvasContext) === null ||
                  _canvasContext2 === void 0 ||
                  _canvasContext2.canvas.remove();
               _canvasContext = null;
            }
            function getAscent(fontFamily) {
               var cachedAscent = ascentCache.get(fontFamily);
               if (cachedAscent) {
                  return cachedAscent;
               }
               var ctx = getCtx();
               var savedFont = ctx.font;
               ctx.canvas.width = ctx.canvas.height = DEFAULT_FONT_SIZE;
               ctx.font = ""
                  .concat(DEFAULT_FONT_SIZE, "px ")
                  .concat(fontFamily);
               var metrics = ctx.measureText("");
               var ascent = metrics.fontBoundingBoxAscent;
               var descent = Math.abs(metrics.fontBoundingBoxDescent);
               if (ascent) {
                  var ratio = ascent / (ascent + descent);
                  ascentCache.set(fontFamily, ratio);
                  ctx.canvas.width = ctx.canvas.height = 0;
                  ctx.font = savedFont;
                  return ratio;
               }
               ctx.strokeStyle = "red";
               ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);
               ctx.strokeText("g", 0, 0);
               var pixels = ctx.getImageData(
                  0,
                  0,
                  DEFAULT_FONT_SIZE,
                  DEFAULT_FONT_SIZE,
               ).data;
               descent = 0;
               for (var i = pixels.length - 1 - 3; i >= 0; i -= 4) {
                  if (pixels[i] > 0) {
                     descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);
                     break;
                  }
               }
               ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);
               ctx.strokeText("A", 0, DEFAULT_FONT_SIZE);
               pixels = ctx.getImageData(
                  0,
                  0,
                  DEFAULT_FONT_SIZE,
                  DEFAULT_FONT_SIZE,
               ).data;
               ascent = 0;
               for (var _i33 = 0, ii = pixels.length; _i33 < ii; _i33 += 4) {
                  if (pixels[_i33] > 0) {
                     ascent =
                        DEFAULT_FONT_SIZE -
                        Math.floor(_i33 / 4 / DEFAULT_FONT_SIZE);
                     break;
                  }
               }
               ctx.canvas.width = ctx.canvas.height = 0;
               ctx.font = savedFont;
               if (ascent) {
                  var _ratio = ascent / (ascent + descent);
                  ascentCache.set(fontFamily, _ratio);
                  return _ratio;
               }
               ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);
               return DEFAULT_FONT_ASCENT;
            }
            function appendText(task, geom, styles) {
               var textDiv = document.createElement("span");
               var textDivProperties = {
                  angle: 0,
                  canvasWidth: 0,
                  hasText: geom.str !== "",
                  hasEOL: geom.hasEOL,
                  fontSize: 0,
               };
               task._textDivs.push(textDiv);
               var tx =
                  _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.Util.transform(
                     task._transform,
                     geom.transform,
                  );
               var angle = Math.atan2(tx[1], tx[0]);
               var style = styles[geom.fontName];
               if (style.vertical) {
                  angle += Math.PI / 2;
               }
               var fontFamily =
                  (task._fontInspectorEnabled && style.fontSubstitution) ||
                  style.fontFamily;
               var fontHeight = Math.hypot(tx[2], tx[3]);
               var fontAscent = fontHeight * getAscent(fontFamily);
               var left, top;
               if (angle === 0) {
                  left = tx[4];
                  top = tx[5] - fontAscent;
               } else {
                  left = tx[4] + fontAscent * Math.sin(angle);
                  top = tx[5] - fontAscent * Math.cos(angle);
               }
               var scaleFactorStr = "calc(var(--scale-factor)*";
               var divStyle = textDiv.style;
               if (task._container === task._rootContainer) {
                  divStyle.left = "".concat(
                     ((100 * left) / task._pageWidth).toFixed(2),
                     "%",
                  );
                  divStyle.top = "".concat(
                     ((100 * top) / task._pageHeight).toFixed(2),
                     "%",
                  );
               } else {
                  divStyle.left = ""
                     .concat(scaleFactorStr)
                     .concat(left.toFixed(2), "px)");
                  divStyle.top = ""
                     .concat(scaleFactorStr)
                     .concat(top.toFixed(2), "px)");
               }
               divStyle.fontSize = ""
                  .concat(scaleFactorStr)
                  .concat(fontHeight.toFixed(2), "px)");
               divStyle.fontFamily = fontFamily;
               textDivProperties.fontSize = fontHeight;
               textDiv.setAttribute("role", "presentation");
               textDiv.textContent = geom.str;
               textDiv.dir = geom.dir;
               if (task._fontInspectorEnabled) {
                  textDiv.dataset.fontName =
                     style.fontSubstitutionLoadedName || geom.fontName;
               }
               if (angle !== 0) {
                  textDivProperties.angle = angle * (180 / Math.PI);
               }
               var shouldScaleText = false;
               if (geom.str.length > 1) {
                  shouldScaleText = true;
               } else if (
                  geom.str !== " " &&
                  geom.transform[0] !== geom.transform[3]
               ) {
                  var absScaleX = Math.abs(geom.transform[0]),
                     absScaleY = Math.abs(geom.transform[3]);
                  if (
                     absScaleX !== absScaleY &&
                     Math.max(absScaleX, absScaleY) /
                        Math.min(absScaleX, absScaleY) >
                        1.5
                  ) {
                     shouldScaleText = true;
                  }
               }
               if (shouldScaleText) {
                  textDivProperties.canvasWidth = style.vertical
                     ? geom.height
                     : geom.width;
               }
               task._textDivProperties.set(textDiv, textDivProperties);
               if (task._isReadableStream) {
                  task._layoutText(textDiv);
               }
            }
            function layout(params) {
               var div = params.div,
                  scale = params.scale,
                  properties = params.properties,
                  ctx = params.ctx,
                  prevFontSize = params.prevFontSize,
                  prevFontFamily = params.prevFontFamily;
               var style = div.style;
               var transform = "";
               if (properties.canvasWidth !== 0 && properties.hasText) {
                  var fontFamily = style.fontFamily;
                  var canvasWidth = properties.canvasWidth,
                     fontSize = properties.fontSize;
                  if (
                     prevFontSize !== fontSize ||
                     prevFontFamily !== fontFamily
                  ) {
                     ctx.font = ""
                        .concat(fontSize * scale, "px ")
                        .concat(fontFamily);
                     params.prevFontSize = fontSize;
                     params.prevFontFamily = fontFamily;
                  }
                  var _ctx$measureText = ctx.measureText(div.textContent),
                     width = _ctx$measureText.width;
                  if (width > 0) {
                     transform = "scaleX(".concat(
                        (canvasWidth * scale) / width,
                        ")",
                     );
                  }
               }
               if (properties.angle !== 0) {
                  transform = "rotate("
                     .concat(properties.angle, "deg) ")
                     .concat(transform);
               }
               if (transform.length > 0) {
                  style.transform = transform;
               }
            }
            function render(task) {
               if (task._canceled) {
                  return;
               }
               var textDivs = task._textDivs;
               var capability = task._capability;
               var textDivsLength = textDivs.length;
               if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {
                  capability.resolve();
                  return;
               }
               if (!task._isReadableStream) {
                  var _iterator166 = _createForOfIteratorHelper(textDivs),
                     _step166;
                  try {
                     for (
                        _iterator166.s();
                        !(_step166 = _iterator166.n()).done;

                     ) {
                        var textDiv = _step166.value;
                        task._layoutText(textDiv);
                     }
                  } catch (err) {
                     _iterator166.e(err);
                  } finally {
                     _iterator166.f();
                  }
               }
               capability.resolve();
            }
            var TextLayerRenderTask = /*#__PURE__*/ (function () {
               function TextLayerRenderTask(_ref126) {
                  var _globalThis$FontInspe2,
                     _this111 = this;
                  var textContentSource = _ref126.textContentSource,
                     container = _ref126.container,
                     viewport = _ref126.viewport,
                     textDivs = _ref126.textDivs,
                     textDivProperties = _ref126.textDivProperties,
                     textContentItemsStr = _ref126.textContentItemsStr;
                  _classCallCheck(this, TextLayerRenderTask);
                  this._textContentSource = textContentSource;
                  this._isReadableStream =
                     textContentSource instanceof ReadableStream;
                  this._container = this._rootContainer = container;
                  this._textDivs = textDivs || [];
                  this._textContentItemsStr = textContentItemsStr || [];
                  this._fontInspectorEnabled = !!(
                     (_globalThis$FontInspe2 = globalThis.FontInspector) !==
                        null &&
                     _globalThis$FontInspe2 !== void 0 &&
                     _globalThis$FontInspe2.enabled
                  );
                  this._reader = null;
                  this._textDivProperties = textDivProperties || new WeakMap();
                  this._canceled = false;
                  this._capability = Promise.withResolvers();
                  this._layoutTextParams = {
                     prevFontSize: null,
                     prevFontFamily: null,
                     div: null,
                     scale: viewport.scale * (globalThis.devicePixelRatio || 1),
                     properties: null,
                     ctx: getCtx(),
                  };
                  var _viewport$rawDims3 = viewport.rawDims,
                     pageWidth = _viewport$rawDims3.pageWidth,
                     pageHeight = _viewport$rawDims3.pageHeight,
                     pageX = _viewport$rawDims3.pageX,
                     pageY = _viewport$rawDims3.pageY;
                  this._transform = [1, 0, 0, -1, -pageX, pageY + pageHeight];
                  this._pageWidth = pageWidth;
                  this._pageHeight = pageHeight;
                  (0,
                  _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.setLayerDimensions)(
                     container,
                     viewport,
                  );
                  this._capability.promise["finally"](function () {
                     _this111._layoutTextParams = null;
                  })["catch"](function () {});
               }
               return _createClass(TextLayerRenderTask, [
                  {
                     key: "promise",
                     get: function get() {
                        return this._capability.promise;
                     },
                  },
                  {
                     key: "cancel",
                     value: function cancel() {
                        this._canceled = true;
                        if (this._reader) {
                           this._reader
                              .cancel(
                                 new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(
                                    "TextLayer task cancelled.",
                                 ),
                              )
                              ["catch"](function () {});
                           this._reader = null;
                        }
                        this._capability.reject(
                           new _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(
                              "TextLayer task cancelled.",
                           ),
                        );
                     },
                  },
                  {
                     key: "_processItems",
                     value: function _processItems(items, styleCache) {
                        var _iterator167 = _createForOfIteratorHelper(items),
                           _step167;
                        try {
                           for (
                              _iterator167.s();
                              !(_step167 = _iterator167.n()).done;

                           ) {
                              var item = _step167.value;
                              if (item.str === undefined) {
                                 if (
                                    item.type === "beginMarkedContentProps" ||
                                    item.type === "beginMarkedContent"
                                 ) {
                                    var parent = this._container;
                                    this._container =
                                       document.createElement("span");
                                    this._container.classList.add(
                                       "markedContent",
                                    );
                                    if (item.id !== null) {
                                       this._container.setAttribute(
                                          "id",
                                          "".concat(item.id),
                                       );
                                    }
                                    parent.append(this._container);
                                 } else if (item.type === "endMarkedContent") {
                                    this._container =
                                       this._container.parentNode;
                                 }
                                 continue;
                              }
                              this._textContentItemsStr.push(item.str);
                              appendText(this, item, styleCache);
                           }
                        } catch (err) {
                           _iterator167.e(err);
                        } finally {
                           _iterator167.f();
                        }
                     },
                  },
                  {
                     key: "_layoutText",
                     value: function _layoutText(textDiv) {
                        var textDivProperties =
                           (this._layoutTextParams.properties =
                              this._textDivProperties.get(textDiv));
                        this._layoutTextParams.div = textDiv;
                        layout(this._layoutTextParams);
                        if (textDivProperties.hasText) {
                           this._container.append(textDiv);
                        }
                        if (textDivProperties.hasEOL) {
                           var br = document.createElement("br");
                           br.setAttribute("role", "presentation");
                           this._container.append(br);
                        }
                     },
                  },
                  {
                     key: "_render",
                     value: function _render() {
                        var _this112 = this;
                        var _Promise$withResolver = Promise.withResolvers(),
                           promise = _Promise$withResolver.promise,
                           resolve = _Promise$withResolver.resolve,
                           reject = _Promise$withResolver.reject;
                        var styleCache = Object.create(null);
                        if (this._isReadableStream) {
                           var _pump2 = function pump() {
                              _this112._reader.read().then(function (_ref127) {
                                 var value = _ref127.value,
                                    done = _ref127.done;
                                 if (done) {
                                    resolve();
                                    return;
                                 }
                                 Object.assign(styleCache, value.styles);
                                 _this112._processItems(
                                    value.items,
                                    styleCache,
                                 );
                                 _pump2();
                              }, reject);
                           };
                           this._reader = this._textContentSource.getReader();
                           _pump2();
                        } else if (this._textContentSource) {
                           var _this$_textContentSou = this._textContentSource,
                              items = _this$_textContentSou.items,
                              styles = _this$_textContentSou.styles;
                           this._processItems(items, styles);
                           resolve();
                        } else {
                           throw new Error(
                              'No "textContentSource" parameter specified.',
                           );
                        }
                        promise.then(function () {
                           styleCache = null;
                           render(_this112);
                        }, this._capability.reject);
                     },
                  },
               ]);
            })();
            function _renderTextLayer(params) {
               var task = new TextLayerRenderTask(params);
               task._render();
               return task;
            }
            function _updateTextLayer(_ref128) {
               var container = _ref128.container,
                  viewport = _ref128.viewport,
                  textDivs = _ref128.textDivs,
                  textDivProperties = _ref128.textDivProperties,
                  _ref128$mustRotate = _ref128.mustRotate,
                  mustRotate =
                     _ref128$mustRotate === void 0 ? true : _ref128$mustRotate,
                  _ref128$mustRescale = _ref128.mustRescale,
                  mustRescale =
                     _ref128$mustRescale === void 0
                        ? true
                        : _ref128$mustRescale;
               if (mustRotate) {
                  (0,
                  _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.setLayerDimensions)(
                     container,
                     { rotation: viewport.rotation },
                  );
               }
               if (mustRescale) {
                  var ctx = getCtx();
                  var scale =
                     viewport.scale * (globalThis.devicePixelRatio || 1);
                  var params = {
                     prevFontSize: null,
                     prevFontFamily: null,
                     div: null,
                     scale: scale,
                     properties: null,
                     ctx: ctx,
                  };
                  var _iterator168 = _createForOfIteratorHelper(textDivs),
                     _step168;
                  try {
                     for (
                        _iterator168.s();
                        !(_step168 = _iterator168.n()).done;

                     ) {
                        var div = _step168.value;
                        params.properties = textDivProperties.get(div);
                        params.div = div;
                        layout(params);
                     }
                  } catch (err) {
                     _iterator168.e(err);
                  } finally {
                     _iterator168.f();
                  }
               }
            } /***/
         },
         /***/ 585: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ PDFDataTransportStream:
                  function PDFDataTransportStream() {
                     return /* binding */ _PDFDataTransportStream;
                  } /* harmony export */,
            });
            /* harmony import */ var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(292);
            /* harmony import */ var _display_utils_js__WEBPACK_IMPORTED_MODULE_1__ =
               __webpack_require__(419);
            var _PDFDataTransportStream = /*#__PURE__*/ (function () {
               function _PDFDataTransportStream(
                  pdfDataRangeTransport,
                  _ref129,
               ) {
                  var _this113 = this;
                  var _ref129$disableRange = _ref129.disableRange,
                     disableRange =
                        _ref129$disableRange === void 0
                           ? false
                           : _ref129$disableRange,
                     _ref129$disableStream = _ref129.disableStream,
                     disableStream =
                        _ref129$disableStream === void 0
                           ? false
                           : _ref129$disableStream;
                  _classCallCheck(this, _PDFDataTransportStream);
                  (0, _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                     pdfDataRangeTransport,
                     'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.',
                  );
                  var length = pdfDataRangeTransport.length,
                     initialData = pdfDataRangeTransport.initialData,
                     progressiveDone = pdfDataRangeTransport.progressiveDone,
                     contentDispositionFilename =
                        pdfDataRangeTransport.contentDispositionFilename;
                  this._queuedChunks = [];
                  this._progressiveDone = progressiveDone;
                  this._contentDispositionFilename = contentDispositionFilename;
                  if (
                     (initialData === null || initialData === void 0
                        ? void 0
                        : initialData.length) > 0
                  ) {
                     var buffer =
                        initialData instanceof Uint8Array &&
                        initialData.byteLength === initialData.buffer.byteLength
                           ? initialData.buffer
                           : new Uint8Array(initialData).buffer;
                     this._queuedChunks.push(buffer);
                  }
                  this._pdfDataRangeTransport = pdfDataRangeTransport;
                  this._isStreamingSupported = !disableStream;
                  this._isRangeSupported = !disableRange;
                  this._contentLength = length;
                  this._fullRequestReader = null;
                  this._rangeReaders = [];
                  pdfDataRangeTransport.addRangeListener(
                     function (begin, chunk) {
                        _this113._onReceiveData({ begin: begin, chunk: chunk });
                     },
                  );
                  pdfDataRangeTransport.addProgressListener(
                     function (loaded, total) {
                        _this113._onProgress({ loaded: loaded, total: total });
                     },
                  );
                  pdfDataRangeTransport.addProgressiveReadListener(
                     function (chunk) {
                        _this113._onReceiveData({ chunk: chunk });
                     },
                  );
                  pdfDataRangeTransport.addProgressiveDoneListener(function () {
                     _this113._onProgressiveDone();
                  });
                  pdfDataRangeTransport.transportReady();
               }
               return _createClass(_PDFDataTransportStream, [
                  {
                     key: "_onReceiveData",
                     value: function _onReceiveData(_ref130) {
                        var begin = _ref130.begin,
                           chunk = _ref130.chunk;
                        var buffer =
                           chunk instanceof Uint8Array &&
                           chunk.byteLength === chunk.buffer.byteLength
                              ? chunk.buffer
                              : new Uint8Array(chunk).buffer;
                        if (begin === undefined) {
                           if (this._fullRequestReader) {
                              this._fullRequestReader._enqueue(buffer);
                           } else {
                              this._queuedChunks.push(buffer);
                           }
                        } else {
                           var found = this._rangeReaders.some(
                              function (rangeReader) {
                                 if (rangeReader._begin !== begin) {
                                    return false;
                                 }
                                 rangeReader._enqueue(buffer);
                                 return true;
                              },
                           );
                           (0,
                           _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                              found,
                              "_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.",
                           );
                        }
                     },
                  },
                  {
                     key: "_progressiveDataLength",
                     get: function get() {
                        var _this$_fullRequestRea8, _this$_fullRequestRea9;
                        return (_this$_fullRequestRea8 =
                           (_this$_fullRequestRea9 =
                              this._fullRequestReader) === null ||
                           _this$_fullRequestRea9 === void 0
                              ? void 0
                              : _this$_fullRequestRea9._loaded) !== null &&
                           _this$_fullRequestRea8 !== void 0
                           ? _this$_fullRequestRea8
                           : 0;
                     },
                  },
                  {
                     key: "_onProgress",
                     value: function _onProgress(evt) {
                        if (evt.total === undefined) {
                           var _this$_rangeReaders$, _this$_rangeReaders$$;
                           (_this$_rangeReaders$ = this._rangeReaders[0]) ===
                              null ||
                              _this$_rangeReaders$ === void 0 ||
                              (_this$_rangeReaders$$ =
                                 _this$_rangeReaders$.onProgress) === null ||
                              _this$_rangeReaders$$ === void 0 ||
                              _this$_rangeReaders$$.call(_this$_rangeReaders$, {
                                 loaded: evt.loaded,
                              });
                        } else {
                           var _this$_fullRequestRea0, _this$_fullRequestRea1;
                           (_this$_fullRequestRea0 =
                              this._fullRequestReader) === null ||
                              _this$_fullRequestRea0 === void 0 ||
                              (_this$_fullRequestRea1 =
                                 _this$_fullRequestRea0.onProgress) === null ||
                              _this$_fullRequestRea1 === void 0 ||
                              _this$_fullRequestRea1.call(
                                 _this$_fullRequestRea0,
                                 {
                                    loaded: evt.loaded,
                                    total: evt.total,
                                 },
                              );
                        }
                     },
                  },
                  {
                     key: "_onProgressiveDone",
                     value: function _onProgressiveDone() {
                        var _this$_fullRequestRea10;
                        (_this$_fullRequestRea10 = this._fullRequestReader) ===
                           null ||
                           _this$_fullRequestRea10 === void 0 ||
                           _this$_fullRequestRea10.progressiveDone();
                        this._progressiveDone = true;
                     },
                  },
                  {
                     key: "_removeRangeReader",
                     value: function _removeRangeReader(reader) {
                        var i = this._rangeReaders.indexOf(reader);
                        if (i >= 0) {
                           this._rangeReaders.splice(i, 1);
                        }
                     },
                  },
                  {
                     key: "getFullReader",
                     value: function getFullReader() {
                        (0,
                        _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                           !this._fullRequestReader,
                           "PDFDataTransportStream.getFullReader can only be called once.",
                        );
                        var queuedChunks = this._queuedChunks;
                        this._queuedChunks = null;
                        return new PDFDataTransportStreamReader(
                           this,
                           queuedChunks,
                           this._progressiveDone,
                           this._contentDispositionFilename,
                        );
                     },
                  },
                  {
                     key: "getRangeReader",
                     value: function getRangeReader(begin, end) {
                        if (end <= this._progressiveDataLength) {
                           return null;
                        }
                        var reader = new PDFDataTransportStreamRangeReader(
                           this,
                           begin,
                           end,
                        );
                        this._pdfDataRangeTransport.requestDataRange(
                           begin,
                           end,
                        );
                        this._rangeReaders.push(reader);
                        return reader;
                     },
                  },
                  {
                     key: "cancelAllRequests",
                     value: function cancelAllRequests(reason) {
                        var _this$_fullRequestRea11;
                        (_this$_fullRequestRea11 = this._fullRequestReader) ===
                           null ||
                           _this$_fullRequestRea11 === void 0 ||
                           _this$_fullRequestRea11.cancel(reason);
                        var _iterator169 = _createForOfIteratorHelper(
                              this._rangeReaders.slice(0),
                           ),
                           _step169;
                        try {
                           for (
                              _iterator169.s();
                              !(_step169 = _iterator169.n()).done;

                           ) {
                              var reader = _step169.value;
                              reader.cancel(reason);
                           }
                        } catch (err) {
                           _iterator169.e(err);
                        } finally {
                           _iterator169.f();
                        }
                        this._pdfDataRangeTransport.abort();
                     },
                  },
               ]);
            })();
            var PDFDataTransportStreamReader = /*#__PURE__*/ (function () {
               function PDFDataTransportStreamReader(stream, queuedChunks) {
                  var progressiveDone =
                     arguments.length > 2 && arguments[2] !== undefined
                        ? arguments[2]
                        : false;
                  var contentDispositionFilename =
                     arguments.length > 3 && arguments[3] !== undefined
                        ? arguments[3]
                        : null;
                  _classCallCheck(this, PDFDataTransportStreamReader);
                  this._stream = stream;
                  this._done = progressiveDone || false;
                  this._filename = (0,
                  _display_utils_js__WEBPACK_IMPORTED_MODULE_1__.isPdfFile)(
                     contentDispositionFilename,
                  )
                     ? contentDispositionFilename
                     : null;
                  this._queuedChunks = queuedChunks || [];
                  this._loaded = 0;
                  var _iterator170 = _createForOfIteratorHelper(
                        this._queuedChunks,
                     ),
                     _step170;
                  try {
                     for (
                        _iterator170.s();
                        !(_step170 = _iterator170.n()).done;

                     ) {
                        var chunk = _step170.value;
                        this._loaded += chunk.byteLength;
                     }
                  } catch (err) {
                     _iterator170.e(err);
                  } finally {
                     _iterator170.f();
                  }
                  this._requests = [];
                  this._headersReady = Promise.resolve();
                  stream._fullRequestReader = this;
                  this.onProgress = null;
               }
               return _createClass(PDFDataTransportStreamReader, [
                  {
                     key: "_enqueue",
                     value: function _enqueue(chunk) {
                        if (this._done) {
                           return;
                        }
                        if (this._requests.length > 0) {
                           var requestCapability = this._requests.shift();
                           requestCapability.resolve({
                              value: chunk,
                              done: false,
                           });
                        } else {
                           this._queuedChunks.push(chunk);
                        }
                        this._loaded += chunk.byteLength;
                     },
                  },
                  {
                     key: "headersReady",
                     get: function get() {
                        return this._headersReady;
                     },
                  },
                  {
                     key: "filename",
                     get: function get() {
                        return this._filename;
                     },
                  },
                  {
                     key: "isRangeSupported",
                     get: function get() {
                        return this._stream._isRangeSupported;
                     },
                  },
                  {
                     key: "isStreamingSupported",
                     get: function get() {
                        return this._stream._isStreamingSupported;
                     },
                  },
                  {
                     key: "contentLength",
                     get: function get() {
                        return this._stream._contentLength;
                     },
                  },
                  {
                     key: "read",
                     value: (function () {
                        var _read7 = _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(function _callee32() {
                              var chunk, requestCapability;
                              return _regenerator().w(
                                 function (_context33) {
                                    while (1)
                                       switch (_context33.n) {
                                          case 0:
                                             if (
                                                !(this._queuedChunks.length > 0)
                                             ) {
                                                _context33.n = 1;
                                                break;
                                             }
                                             chunk = this._queuedChunks.shift();
                                             return _context33.a(2, {
                                                value: chunk,
                                                done: false,
                                             });
                                          case 1:
                                             if (!this._done) {
                                                _context33.n = 2;
                                                break;
                                             }
                                             return _context33.a(2, {
                                                value: undefined,
                                                done: true,
                                             });
                                          case 2:
                                             requestCapability =
                                                Promise.withResolvers();
                                             this._requests.push(
                                                requestCapability,
                                             );
                                             return _context33.a(
                                                2,
                                                requestCapability.promise,
                                             );
                                       }
                                 },
                                 _callee32,
                                 this,
                              );
                           }),
                        );
                        function read() {
                           return _read7.apply(this, arguments);
                        }
                        return read;
                     })(),
                  },
                  {
                     key: "cancel",
                     value: function cancel(reason) {
                        this._done = true;
                        var _iterator171 = _createForOfIteratorHelper(
                              this._requests,
                           ),
                           _step171;
                        try {
                           for (
                              _iterator171.s();
                              !(_step171 = _iterator171.n()).done;

                           ) {
                              var requestCapability = _step171.value;
                              requestCapability.resolve({
                                 value: undefined,
                                 done: true,
                              });
                           }
                        } catch (err) {
                           _iterator171.e(err);
                        } finally {
                           _iterator171.f();
                        }
                        this._requests.length = 0;
                     },
                  },
                  {
                     key: "progressiveDone",
                     value: function progressiveDone() {
                        if (this._done) {
                           return;
                        }
                        this._done = true;
                     },
                  },
               ]);
            })();
            var PDFDataTransportStreamRangeReader = /*#__PURE__*/ (function () {
               function PDFDataTransportStreamRangeReader(stream, begin, end) {
                  _classCallCheck(this, PDFDataTransportStreamRangeReader);
                  this._stream = stream;
                  this._begin = begin;
                  this._end = end;
                  this._queuedChunk = null;
                  this._requests = [];
                  this._done = false;
                  this.onProgress = null;
               }
               return _createClass(PDFDataTransportStreamRangeReader, [
                  {
                     key: "_enqueue",
                     value: function _enqueue(chunk) {
                        if (this._done) {
                           return;
                        }
                        if (this._requests.length === 0) {
                           this._queuedChunk = chunk;
                        } else {
                           var requestsCapability = this._requests.shift();
                           requestsCapability.resolve({
                              value: chunk,
                              done: false,
                           });
                           var _iterator172 = _createForOfIteratorHelper(
                                 this._requests,
                              ),
                              _step172;
                           try {
                              for (
                                 _iterator172.s();
                                 !(_step172 = _iterator172.n()).done;

                              ) {
                                 var requestCapability = _step172.value;
                                 requestCapability.resolve({
                                    value: undefined,
                                    done: true,
                                 });
                              }
                           } catch (err) {
                              _iterator172.e(err);
                           } finally {
                              _iterator172.f();
                           }
                           this._requests.length = 0;
                        }
                        this._done = true;
                        this._stream._removeRangeReader(this);
                     },
                  },
                  {
                     key: "isStreamingSupported",
                     get: function get() {
                        return false;
                     },
                  },
                  {
                     key: "read",
                     value: (function () {
                        var _read8 = _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(function _callee33() {
                              var chunk, requestCapability;
                              return _regenerator().w(
                                 function (_context34) {
                                    while (1)
                                       switch (_context34.n) {
                                          case 0:
                                             if (!this._queuedChunk) {
                                                _context34.n = 1;
                                                break;
                                             }
                                             chunk = this._queuedChunk;
                                             this._queuedChunk = null;
                                             return _context34.a(2, {
                                                value: chunk,
                                                done: false,
                                             });
                                          case 1:
                                             if (!this._done) {
                                                _context34.n = 2;
                                                break;
                                             }
                                             return _context34.a(2, {
                                                value: undefined,
                                                done: true,
                                             });
                                          case 2:
                                             requestCapability =
                                                Promise.withResolvers();
                                             this._requests.push(
                                                requestCapability,
                                             );
                                             return _context34.a(
                                                2,
                                                requestCapability.promise,
                                             );
                                       }
                                 },
                                 _callee33,
                                 this,
                              );
                           }),
                        );
                        function read() {
                           return _read8.apply(this, arguments);
                        }
                        return read;
                     })(),
                  },
                  {
                     key: "cancel",
                     value: function cancel(reason) {
                        this._done = true;
                        var _iterator173 = _createForOfIteratorHelper(
                              this._requests,
                           ),
                           _step173;
                        try {
                           for (
                              _iterator173.s();
                              !(_step173 = _iterator173.n()).done;

                           ) {
                              var requestCapability = _step173.value;
                              requestCapability.resolve({
                                 value: undefined,
                                 done: true,
                              });
                           }
                        } catch (err) {
                           _iterator173.e(err);
                        } finally {
                           _iterator173.f();
                        }
                        this._requests.length = 0;
                        this._stream._removeRangeReader(this);
                     },
                  },
               ]);
            })(); /***/
         },
         /***/ 164: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ GlobalWorkerOptions:
                  function GlobalWorkerOptions() {
                     return /* binding */ _GlobalWorkerOptions;
                  } /* harmony export */,
            });
            var _GlobalWorkerOptions = /*#__PURE__*/ (function () {
               function _GlobalWorkerOptions() {
                  _classCallCheck(this, _GlobalWorkerOptions);
               }
               return _createClass(_GlobalWorkerOptions, null, [
                  {
                     key: "workerPort",
                     get: function get() {
                        return _assertClassBrand(
                           _GlobalWorkerOptions,
                           this,
                           _port,
                        )._;
                     },
                     set: function set(val) {
                        if (
                           !(
                              typeof Worker !== "undefined" &&
                              val instanceof Worker
                           ) &&
                           val !== null
                        ) {
                           throw new Error("Invalid `workerPort` type.");
                        }
                        _port._ = _assertClassBrand(
                           _GlobalWorkerOptions,
                           this,
                           val,
                        );
                     },
                  },
                  {
                     key: "workerSrc",
                     get: function get() {
                        return _assertClassBrand(
                           _GlobalWorkerOptions,
                           this,
                           _src,
                        )._;
                     },
                     set: function set(val) {
                        if (typeof val !== "string") {
                           throw new Error("Invalid `workerSrc` type.");
                        }
                        _src._ = _assertClassBrand(
                           _GlobalWorkerOptions,
                           this,
                           val,
                        );
                     },
                  },
               ]);
            })();
            /***/ var _port = { _: null };
            var _src = { _: "" };
         },
         /***/ 284: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ XfaLayer: function XfaLayer() {
                  return /* binding */ _XfaLayer;
               } /* harmony export */,
            });
            /* harmony import */ var _xfa_text_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(50);
            var _XfaLayer = /*#__PURE__*/ (function () {
               function _XfaLayer() {
                  _classCallCheck(this, _XfaLayer);
               }
               return _createClass(_XfaLayer, null, [
                  {
                     key: "setupStorage",
                     value: function setupStorage(
                        html,
                        id,
                        element,
                        storage,
                        intent,
                     ) {
                        var storedData = storage.getValue(id, { value: null });
                        switch (element.name) {
                           case "textarea":
                              if (storedData.value !== null) {
                                 html.textContent = storedData.value;
                              }
                              if (intent === "print") {
                                 break;
                              }
                              html.addEventListener("input", function (event) {
                                 storage.setValue(id, {
                                    value: event.target.value,
                                 });
                              });
                              break;
                           case "input":
                              if (
                                 element.attributes.type === "radio" ||
                                 element.attributes.type === "checkbox"
                              ) {
                                 if (
                                    storedData.value ===
                                    element.attributes.xfaOn
                                 ) {
                                    html.setAttribute("checked", true);
                                 } else if (
                                    storedData.value ===
                                    element.attributes.xfaOff
                                 ) {
                                    html.removeAttribute("checked");
                                 }
                                 if (intent === "print") {
                                    break;
                                 }
                                 html.addEventListener(
                                    "change",
                                    function (event) {
                                       storage.setValue(id, {
                                          value: event.target.checked
                                             ? event.target.getAttribute(
                                                  "xfaOn",
                                               )
                                             : event.target.getAttribute(
                                                  "xfaOff",
                                               ),
                                       });
                                    },
                                 );
                              } else {
                                 if (storedData.value !== null) {
                                    html.setAttribute(
                                       "value",
                                       storedData.value,
                                    );
                                 }
                                 if (intent === "print") {
                                    break;
                                 }
                                 html.addEventListener(
                                    "input",
                                    function (event) {
                                       storage.setValue(id, {
                                          value: event.target.value,
                                       });
                                    },
                                 );
                              }
                              break;
                           case "select":
                              if (storedData.value !== null) {
                                 html.setAttribute("value", storedData.value);
                                 var _iterator174 = _createForOfIteratorHelper(
                                       element.children,
                                    ),
                                    _step174;
                                 try {
                                    for (
                                       _iterator174.s();
                                       !(_step174 = _iterator174.n()).done;

                                    ) {
                                       var option = _step174.value;
                                       if (
                                          option.attributes.value ===
                                          storedData.value
                                       ) {
                                          option.attributes.selected = true;
                                       } else if (
                                          option.attributes.hasOwnProperty(
                                             "selected",
                                          )
                                       ) {
                                          delete option.attributes.selected;
                                       }
                                    }
                                 } catch (err) {
                                    _iterator174.e(err);
                                 } finally {
                                    _iterator174.f();
                                 }
                              }
                              html.addEventListener("input", function (event) {
                                 var options = event.target.options;
                                 var value =
                                    options.selectedIndex === -1
                                       ? ""
                                       : options[options.selectedIndex].value;
                                 storage.setValue(id, { value: value });
                              });
                              break;
                        }
                     },
                  },
                  {
                     key: "setAttributes",
                     value: function setAttributes(_ref131) {
                        var html = _ref131.html,
                           element = _ref131.element,
                           _ref131$storage = _ref131.storage,
                           storage =
                              _ref131$storage === void 0
                                 ? null
                                 : _ref131$storage,
                           intent = _ref131.intent,
                           linkService = _ref131.linkService;
                        var attributes = element.attributes;
                        var isHTMLAnchorElement =
                           html instanceof HTMLAnchorElement;
                        if (attributes.type === "radio") {
                           attributes.name = ""
                              .concat(attributes.name, "-")
                              .concat(intent);
                        }
                        for (
                           var _i34 = 0,
                              _Object$entries5 = Object.entries(attributes);
                           _i34 < _Object$entries5.length;
                           _i34++
                        ) {
                           var _Object$entries5$_i = _slicedToArray(
                                 _Object$entries5[_i34],
                                 2,
                              ),
                              key = _Object$entries5$_i[0],
                              value = _Object$entries5$_i[1];
                           if (value === null || value === undefined) {
                              continue;
                           }
                           switch (key) {
                              case "class":
                                 if (value.length) {
                                    html.setAttribute(key, value.join(" "));
                                 }
                                 break;
                              case "dataId":
                                 break;
                              case "id":
                                 html.setAttribute("data-element-id", value);
                                 break;
                              case "style":
                                 Object.assign(html.style, value);
                                 break;
                              case "textContent":
                                 html.textContent = value;
                                 break;
                              default:
                                 if (
                                    !isHTMLAnchorElement ||
                                    (key !== "href" && key !== "newWindow")
                                 ) {
                                    html.setAttribute(key, value);
                                 }
                           }
                        }
                        if (isHTMLAnchorElement) {
                           linkService.addLinkAttributes(
                              html,
                              attributes.href,
                              attributes.newWindow,
                           );
                        }
                        if (storage && attributes.dataId) {
                           this.setupStorage(
                              html,
                              attributes.dataId,
                              element,
                              storage,
                           );
                        }
                     },
                  },
                  {
                     key: "render",
                     value: function render(parameters) {
                        var storage = parameters.annotationStorage;
                        var linkService = parameters.linkService;
                        var root = parameters.xfaHtml;
                        var intent = parameters.intent || "display";
                        var rootHtml = document.createElement(root.name);
                        if (root.attributes) {
                           this.setAttributes({
                              html: rootHtml,
                              element: root,
                              intent: intent,
                              linkService: linkService,
                           });
                        }
                        var isNotForRichText = intent !== "richText";
                        var rootDiv = parameters.div;
                        rootDiv.append(rootHtml);
                        if (parameters.viewport) {
                           var transform = "matrix(".concat(
                              parameters.viewport.transform.join(","),
                              ")",
                           );
                           rootDiv.style.transform = transform;
                        }
                        if (isNotForRichText) {
                           rootDiv.setAttribute("class", "xfaLayer xfaFont");
                        }
                        var textDivs = [];
                        if (root.children.length === 0) {
                           if (root.value) {
                              var node = document.createTextNode(root.value);
                              rootHtml.append(node);
                              if (
                                 isNotForRichText &&
                                 _xfa_text_js__WEBPACK_IMPORTED_MODULE_0__.XfaText.shouldBuildText(
                                    root.name,
                                 )
                              ) {
                                 textDivs.push(node);
                              }
                           }
                           return { textDivs: textDivs };
                        }
                        var stack = [[root, -1, rootHtml]];
                        while (stack.length > 0) {
                           var _child$attributes, _child$children;
                           var _stack$at = stack.at(-1),
                              _stack$at2 = _slicedToArray(_stack$at, 3),
                              parent = _stack$at2[0],
                              i = _stack$at2[1],
                              html = _stack$at2[2];
                           if (i + 1 === parent.children.length) {
                              stack.pop();
                              continue;
                           }
                           var child = parent.children[++stack.at(-1)[1]];
                           if (child === null) {
                              continue;
                           }
                           var name = child.name;
                           if (name === "#text") {
                              var _node = document.createTextNode(child.value);
                              textDivs.push(_node);
                              html.append(_node);
                              continue;
                           }
                           var childHtml =
                              child !== null &&
                              child !== void 0 &&
                              (_child$attributes = child.attributes) !== null &&
                              _child$attributes !== void 0 &&
                              _child$attributes.xmlns
                                 ? document.createElementNS(
                                      child.attributes.xmlns,
                                      name,
                                   )
                                 : document.createElement(name);
                           html.append(childHtml);
                           if (child.attributes) {
                              this.setAttributes({
                                 html: childHtml,
                                 element: child,
                                 storage: storage,
                                 intent: intent,
                                 linkService: linkService,
                              });
                           }
                           if (
                              ((_child$children = child.children) === null ||
                              _child$children === void 0
                                 ? void 0
                                 : _child$children.length) > 0
                           ) {
                              stack.push([child, -1, childHtml]);
                           } else if (child.value) {
                              var _node2 = document.createTextNode(child.value);
                              if (
                                 isNotForRichText &&
                                 _xfa_text_js__WEBPACK_IMPORTED_MODULE_0__.XfaText.shouldBuildText(
                                    name,
                                 )
                              ) {
                                 textDivs.push(_node2);
                              }
                              childHtml.append(_node2);
                           }
                        }
                        var _iterator175 = _createForOfIteratorHelper(
                              rootDiv.querySelectorAll(
                                 ".xfaNonInteractive input, .xfaNonInteractive textarea",
                              ),
                           ),
                           _step175;
                        try {
                           for (
                              _iterator175.s();
                              !(_step175 = _iterator175.n()).done;

                           ) {
                              var el = _step175.value;
                              el.setAttribute("readOnly", true);
                           }
                        } catch (err) {
                           _iterator175.e(err);
                        } finally {
                           _iterator175.f();
                        }
                        return { textDivs: textDivs };
                     },
                  },
                  {
                     key: "update",
                     value: function update(parameters) {
                        var transform = "matrix(".concat(
                           parameters.viewport.transform.join(","),
                           ")",
                        );
                        parameters.div.style.transform = transform;
                        parameters.div.hidden = false;
                     },
                  },
               ]);
            })(); /***/
         },
         /***/ 50: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ XfaText: function XfaText() {
                  return /* binding */ _XfaText;
               } /* harmony export */,
            });
            var _XfaText = /*#__PURE__*/ (function () {
               function _XfaText() {
                  _classCallCheck(this, _XfaText);
               }
               return _createClass(_XfaText, null, [
                  {
                     key: "textContent",
                     value: function textContent(xfa) {
                        var items = [];
                        var output = {
                           items: items,
                           styles: Object.create(null),
                        };
                        function walk(node) {
                           var _node$attributes;
                           if (!node) {
                              return;
                           }
                           var str = null;
                           var name = node.name;
                           if (name === "#text") {
                              str = node.value;
                           } else if (!_XfaText.shouldBuildText(name)) {
                              return;
                           } else if (
                              node !== null &&
                              node !== void 0 &&
                              (_node$attributes = node.attributes) !== null &&
                              _node$attributes !== void 0 &&
                              _node$attributes.textContent
                           ) {
                              str = node.attributes.textContent;
                           } else if (node.value) {
                              str = node.value;
                           }
                           if (str !== null) {
                              items.push({ str: str });
                           }
                           if (!node.children) {
                              return;
                           }
                           var _iterator176 = _createForOfIteratorHelper(
                                 node.children,
                              ),
                              _step176;
                           try {
                              for (
                                 _iterator176.s();
                                 !(_step176 = _iterator176.n()).done;

                              ) {
                                 var child = _step176.value;
                                 walk(child);
                              }
                           } catch (err) {
                              _iterator176.e(err);
                           } finally {
                              _iterator176.f();
                           }
                        }
                        walk(xfa);
                        return output;
                     },
                  },
                  {
                     key: "shouldBuildText",
                     value: function shouldBuildText(name) {
                        return !(
                           name === "textarea" ||
                           name === "input" ||
                           name === "option" ||
                           name === "select"
                        );
                     },
                  },
               ]);
            })(); /***/
         },
         /***/ 228: /***/ function _(
            __webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            __webpack_require__.a(
               __webpack_module__,
               /*#__PURE__*/ (function () {
                  var _ref132 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee34(
                           __webpack_handle_async_dependencies__,
                           __webpack_async_result__,
                        ) {
                           var _shared_util_js__WEBPACK_IMPORTED_MODULE_0__,
                              _display_api_js__WEBPACK_IMPORTED_MODULE_1__,
                              _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__,
                              _display_text_layer_js__WEBPACK_IMPORTED_MODULE_3__,
                              _display_editor_annotation_editor_layer_js__WEBPACK_IMPORTED_MODULE_4__,
                              _display_editor_tools_js__WEBPACK_IMPORTED_MODULE_5__,
                              _display_annotation_layer_js__WEBPACK_IMPORTED_MODULE_6__,
                              _display_editor_color_picker_js__WEBPACK_IMPORTED_MODULE_7__,
                              _display_draw_layer_js__WEBPACK_IMPORTED_MODULE_8__,
                              _display_worker_options_js__WEBPACK_IMPORTED_MODULE_10__,
                              _display_editor_outliner_js__WEBPACK_IMPORTED_MODULE_9__,
                              _display_xfa_layer_js__WEBPACK_IMPORTED_MODULE_11__,
                              __webpack_async_dependencies__,
                              pdfjsVersion,
                              pdfjsBuild,
                              _t19,
                              _t20,
                              _t21;
                           return _regenerator().w(
                              function (_context35) {
                                 while (1)
                                    switch ((_context35.p = _context35.n)) {
                                       case 0:
                                          _context35.p = 0;
                                          /* harmony export */ __webpack_require__.d(
                                             __webpack_exports__,
                                             {
                                                /* harmony export */ AbortException:
                                                   function AbortException() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException;
                                                   },
                                                /* harmony export */ AnnotationEditorLayer:
                                                   function AnnotationEditorLayer() {
                                                      return /* reexport safe */ _display_editor_annotation_editor_layer_js__WEBPACK_IMPORTED_MODULE_4__.AnnotationEditorLayer;
                                                   },
                                                /* harmony export */ AnnotationEditorParamsType:
                                                   function AnnotationEditorParamsType() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorParamsType;
                                                   },
                                                /* harmony export */ AnnotationEditorType:
                                                   function AnnotationEditorType() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationEditorType;
                                                   },
                                                /* harmony export */ AnnotationEditorUIManager:
                                                   function AnnotationEditorUIManager() {
                                                      return /* reexport safe */ _display_editor_tools_js__WEBPACK_IMPORTED_MODULE_5__.AnnotationEditorUIManager;
                                                   },
                                                /* harmony export */ AnnotationLayer:
                                                   function AnnotationLayer() {
                                                      return /* reexport safe */ _display_annotation_layer_js__WEBPACK_IMPORTED_MODULE_6__.AnnotationLayer;
                                                   },
                                                /* harmony export */ AnnotationMode:
                                                   function AnnotationMode() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.AnnotationMode;
                                                   },
                                                /* harmony export */ CMapCompressionType:
                                                   function CMapCompressionType() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.CMapCompressionType;
                                                   },
                                                /* harmony export */ ColorPicker:
                                                   function ColorPicker() {
                                                      return /* reexport safe */ _display_editor_color_picker_js__WEBPACK_IMPORTED_MODULE_7__.ColorPicker;
                                                   },
                                                /* harmony export */ DOMSVGFactory:
                                                   function DOMSVGFactory() {
                                                      return /* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.DOMSVGFactory;
                                                   },
                                                /* harmony export */ DrawLayer:
                                                   function DrawLayer() {
                                                      return /* reexport safe */ _display_draw_layer_js__WEBPACK_IMPORTED_MODULE_8__.DrawLayer;
                                                   },
                                                /* harmony export */ FeatureTest:
                                                   function FeatureTest() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.FeatureTest;
                                                   },
                                                /* harmony export */ GlobalWorkerOptions:
                                                   function GlobalWorkerOptions() {
                                                      return /* reexport safe */ _display_worker_options_js__WEBPACK_IMPORTED_MODULE_10__.GlobalWorkerOptions;
                                                   },
                                                /* harmony export */ ImageKind:
                                                   function ImageKind() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.ImageKind;
                                                   },
                                                /* harmony export */ InvalidPDFException:
                                                   function InvalidPDFException() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.InvalidPDFException;
                                                   },
                                                /* harmony export */ MissingPDFException:
                                                   function MissingPDFException() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException;
                                                   },
                                                /* harmony export */ OPS: function OPS() {
                                                   return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.OPS;
                                                },
                                                /* harmony export */ Outliner:
                                                   function Outliner() {
                                                      return /* reexport safe */ _display_editor_outliner_js__WEBPACK_IMPORTED_MODULE_9__.Outliner;
                                                   },
                                                /* harmony export */ PDFDataRangeTransport:
                                                   function PDFDataRangeTransport() {
                                                      return /* reexport safe */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__.PDFDataRangeTransport;
                                                   },
                                                /* harmony export */ PDFDateString:
                                                   function PDFDateString() {
                                                      return /* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.PDFDateString;
                                                   },
                                                /* harmony export */ PDFWorker:
                                                   function PDFWorker() {
                                                      return /* reexport safe */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__.PDFWorker;
                                                   },
                                                /* harmony export */ PasswordResponses:
                                                   function PasswordResponses() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PasswordResponses;
                                                   },
                                                /* harmony export */ PermissionFlag:
                                                   function PermissionFlag() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.PermissionFlag;
                                                   },
                                                /* harmony export */ PixelsPerInch:
                                                   function PixelsPerInch() {
                                                      return /* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.PixelsPerInch;
                                                   },
                                                /* harmony export */ RenderingCancelledException:
                                                   function RenderingCancelledException() {
                                                      return /* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.RenderingCancelledException;
                                                   },
                                                /* harmony export */ UnexpectedResponseException:
                                                   function UnexpectedResponseException() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.UnexpectedResponseException;
                                                   },
                                                /* harmony export */ Util: function Util() {
                                                   return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.Util;
                                                },
                                                /* harmony export */ VerbosityLevel:
                                                   function VerbosityLevel() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.VerbosityLevel;
                                                   },
                                                /* harmony export */ XfaLayer:
                                                   function XfaLayer() {
                                                      return /* reexport safe */ _display_xfa_layer_js__WEBPACK_IMPORTED_MODULE_11__.XfaLayer;
                                                   },
                                                /* harmony export */ build: function build() {
                                                   return /* reexport safe */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__.build;
                                                },
                                                /* harmony export */ createValidAbsoluteUrl:
                                                   function createValidAbsoluteUrl() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.createValidAbsoluteUrl;
                                                   },
                                                /* harmony export */ fetchData:
                                                   function fetchData() {
                                                      return /* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.fetchData;
                                                   },
                                                /* harmony export */ getDocument:
                                                   function getDocument() {
                                                      return /* reexport safe */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__.getDocument;
                                                   },
                                                /* harmony export */ getFilenameFromUrl:
                                                   function getFilenameFromUrl() {
                                                      return /* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.getFilenameFromUrl;
                                                   },
                                                /* harmony export */ getPdfFilenameFromUrl:
                                                   function getPdfFilenameFromUrl() {
                                                      return /* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.getPdfFilenameFromUrl;
                                                   },
                                                /* harmony export */ getXfaPageViewport:
                                                   function getXfaPageViewport() {
                                                      return /* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.getXfaPageViewport;
                                                   },
                                                /* harmony export */ isDataScheme:
                                                   function isDataScheme() {
                                                      return /* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isDataScheme;
                                                   },
                                                /* harmony export */ isPdfFile:
                                                   function isPdfFile() {
                                                      return /* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.isPdfFile;
                                                   },
                                                /* harmony export */ noContextMenu:
                                                   function noContextMenu() {
                                                      return /* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.noContextMenu;
                                                   },
                                                /* harmony export */ normalizeUnicode:
                                                   function normalizeUnicode() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.normalizeUnicode;
                                                   },
                                                /* harmony export */ renderTextLayer:
                                                   function renderTextLayer() {
                                                      return /* reexport safe */ _display_text_layer_js__WEBPACK_IMPORTED_MODULE_3__.renderTextLayer;
                                                   },
                                                /* harmony export */ setLayerDimensions:
                                                   function setLayerDimensions() {
                                                      return /* reexport safe */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__.setLayerDimensions;
                                                   },
                                                /* harmony export */ shadow:
                                                   function shadow() {
                                                      return /* reexport safe */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__.shadow;
                                                   },
                                                /* harmony export */ updateTextLayer:
                                                   function updateTextLayer() {
                                                      return /* reexport safe */ _display_text_layer_js__WEBPACK_IMPORTED_MODULE_3__.updateTextLayer;
                                                   },
                                                /* harmony export */ version:
                                                   function version() {
                                                      return /* reexport safe */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__.version;
                                                   } /* harmony export */,
                                             },
                                          );
                                          /* harmony import */ _shared_util_js__WEBPACK_IMPORTED_MODULE_0__ =
                                             __webpack_require__(292);
                                          /* harmony import */ _display_api_js__WEBPACK_IMPORTED_MODULE_1__ =
                                             __webpack_require__(831);
                                          /* harmony import */ _display_display_utils_js__WEBPACK_IMPORTED_MODULE_2__ =
                                             __webpack_require__(419);
                                          /* harmony import */ _display_text_layer_js__WEBPACK_IMPORTED_MODULE_3__ =
                                             __webpack_require__(814);
                                          /* harmony import */ _display_editor_annotation_editor_layer_js__WEBPACK_IMPORTED_MODULE_4__ =
                                             __webpack_require__(731);
                                          /* harmony import */ _display_editor_tools_js__WEBPACK_IMPORTED_MODULE_5__ =
                                             __webpack_require__(830);
                                          /* harmony import */ _display_annotation_layer_js__WEBPACK_IMPORTED_MODULE_6__ =
                                             __webpack_require__(976);
                                          /* harmony import */ _display_editor_color_picker_js__WEBPACK_IMPORTED_MODULE_7__ =
                                             __webpack_require__(259);
                                          /* harmony import */ _display_draw_layer_js__WEBPACK_IMPORTED_MODULE_8__ =
                                             __webpack_require__(47);
                                          /* harmony import */ _display_worker_options_js__WEBPACK_IMPORTED_MODULE_10__ =
                                             __webpack_require__(164);
                                          /* harmony import */ _display_editor_outliner_js__WEBPACK_IMPORTED_MODULE_9__ =
                                             __webpack_require__(61);
                                          /* harmony import */ _display_xfa_layer_js__WEBPACK_IMPORTED_MODULE_11__ =
                                             __webpack_require__(284);
                                          __webpack_async_dependencies__ =
                                             __webpack_handle_async_dependencies__(
                                                [
                                                   _display_api_js__WEBPACK_IMPORTED_MODULE_1__,
                                                ],
                                             );
                                          if (
                                             !__webpack_async_dependencies__.then
                                          ) {
                                             _context35.n = 2;
                                             break;
                                          }
                                          _context35.n = 1;
                                          return __webpack_async_dependencies__;
                                       case 1:
                                          _t20 = _context35.v;
                                          _t19 = _t20();
                                          _context35.n = 3;
                                          break;
                                       case 2:
                                          _t19 = __webpack_async_dependencies__;
                                       case 3:
                                          _display_api_js__WEBPACK_IMPORTED_MODULE_1__ =
                                             _t19[0];
                                          pdfjsVersion = "4.2.67";
                                          pdfjsBuild = "49b388101";
                                          __webpack_async_result__();
                                          _context35.n = 5;
                                          break;
                                       case 4:
                                          _context35.p = 4;
                                          _t21 = _context35.v;
                                          __webpack_async_result__(_t21);
                                       case 5:
                                          return _context35.a(2);
                                    }
                              },
                              _callee34,
                              null,
                              [[0, 4]],
                           );
                        },
                     ),
                  );
                  return function (_x28, _x29) {
                     return _ref132.apply(this, arguments);
                  };
               })(),
            ); /***/
         },
         /***/ 178: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ MessageHandler: function MessageHandler() {
                  return /* binding */ _MessageHandler;
               } /* harmony export */,
            });
            /* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ =
               __webpack_require__(292);
            var CallbackKind = { UNKNOWN: 0, DATA: 1, ERROR: 2 };
            var StreamKind = {
               UNKNOWN: 0,
               CANCEL: 1,
               CANCEL_COMPLETE: 2,
               CLOSE: 3,
               ENQUEUE: 4,
               ERROR: 5,
               PULL: 6,
               PULL_COMPLETE: 7,
               START_COMPLETE: 8,
            };
            function wrapReason(reason) {
               if (
                  !(
                     reason instanceof Error ||
                     (_typeof(reason) === "object" && reason !== null)
                  )
               ) {
                  (0, _util_js__WEBPACK_IMPORTED_MODULE_0__.unreachable)(
                     'wrapReason: Expected "reason" to be a (possibly cloned) Error.',
                  );
               }
               switch (reason.name) {
                  case "AbortException":
                     return new _util_js__WEBPACK_IMPORTED_MODULE_0__.AbortException(
                        reason.message,
                     );
                  case "MissingPDFException":
                     return new _util_js__WEBPACK_IMPORTED_MODULE_0__.MissingPDFException(
                        reason.message,
                     );
                  case "PasswordException":
                     return new _util_js__WEBPACK_IMPORTED_MODULE_0__.PasswordException(
                        reason.message,
                        reason.code,
                     );
                  case "UnexpectedResponseException":
                     return new _util_js__WEBPACK_IMPORTED_MODULE_0__.UnexpectedResponseException(
                        reason.message,
                        reason.status,
                     );
                  case "UnknownErrorException":
                     return new _util_js__WEBPACK_IMPORTED_MODULE_0__.UnknownErrorException(
                        reason.message,
                        reason.details,
                     );
                  default:
                     return new _util_js__WEBPACK_IMPORTED_MODULE_0__.UnknownErrorException(
                        reason.message,
                        reason.toString(),
                     );
               }
            }
            var _MessageHandler_brand = /*#__PURE__*/ new WeakSet();
            var _MessageHandler = /*#__PURE__*/ (function () {
               function _MessageHandler(_sourceName, _targetName, _comObj) {
                  var _this114 = this;
                  _classCallCheck(this, _MessageHandler);
                  _classPrivateMethodInitSpec(this, _MessageHandler_brand);
                  this.sourceName = _sourceName;
                  this.targetName = _targetName;
                  this.comObj = _comObj;
                  this.callbackId = 1;
                  this.streamId = 1;
                  this.streamSinks = Object.create(null);
                  this.streamControllers = Object.create(null);
                  this.callbackCapabilities = Object.create(null);
                  this.actionHandler = Object.create(null);
                  this._onComObjOnMessage = function (event) {
                     var data = event.data;
                     if (data.targetName !== _this114.sourceName) {
                        return;
                     }
                     if (data.stream) {
                        _assertClassBrand(
                           _MessageHandler_brand,
                           _this114,
                           _processStreamMessage,
                        ).call(_this114, data);
                        return;
                     }
                     if (data.callback) {
                        var callbackId = data.callbackId;
                        var capability =
                           _this114.callbackCapabilities[callbackId];
                        if (!capability) {
                           throw new Error(
                              "Cannot resolve callback ".concat(callbackId),
                           );
                        }
                        delete _this114.callbackCapabilities[callbackId];
                        if (data.callback === CallbackKind.DATA) {
                           capability.resolve(data.data);
                        } else if (data.callback === CallbackKind.ERROR) {
                           capability.reject(wrapReason(data.reason));
                        } else {
                           throw new Error("Unexpected callback case");
                        }
                        return;
                     }
                     var action = _this114.actionHandler[data.action];
                     if (!action) {
                        throw new Error(
                           "Unknown action from worker: ".concat(data.action),
                        );
                     }
                     if (data.callbackId) {
                        var cbSourceName = _this114.sourceName;
                        var cbTargetName = data.sourceName;
                        new Promise(function (resolve) {
                           resolve(action(data.data));
                        }).then(
                           function (result) {
                              _comObj.postMessage({
                                 sourceName: cbSourceName,
                                 targetName: cbTargetName,
                                 callback: CallbackKind.DATA,
                                 callbackId: data.callbackId,
                                 data: result,
                              });
                           },
                           function (reason) {
                              _comObj.postMessage({
                                 sourceName: cbSourceName,
                                 targetName: cbTargetName,
                                 callback: CallbackKind.ERROR,
                                 callbackId: data.callbackId,
                                 reason: wrapReason(reason),
                              });
                           },
                        );
                        return;
                     }
                     if (data.streamId) {
                        _assertClassBrand(
                           _MessageHandler_brand,
                           _this114,
                           _createStreamSink,
                        ).call(_this114, data);
                        return;
                     }
                     action(data.data);
                  };
                  _comObj.addEventListener("message", this._onComObjOnMessage);
               }
               return _createClass(_MessageHandler, [
                  {
                     key: "on",
                     value: function on(actionName, handler) {
                        var ah = this.actionHandler;
                        if (ah[actionName]) {
                           throw new Error(
                              'There is already an actionName called "'.concat(
                                 actionName,
                                 '"',
                              ),
                           );
                        }
                        ah[actionName] = handler;
                     },
                  },
                  {
                     key: "send",
                     value: function send(actionName, data, transfers) {
                        this.comObj.postMessage(
                           {
                              sourceName: this.sourceName,
                              targetName: this.targetName,
                              action: actionName,
                              data: data,
                           },
                           transfers,
                        );
                     },
                  },
                  {
                     key: "sendWithPromise",
                     value: function sendWithPromise(
                        actionName,
                        data,
                        transfers,
                     ) {
                        var callbackId = this.callbackId++;
                        var capability = Promise.withResolvers();
                        this.callbackCapabilities[callbackId] = capability;
                        try {
                           this.comObj.postMessage(
                              {
                                 sourceName: this.sourceName,
                                 targetName: this.targetName,
                                 action: actionName,
                                 callbackId: callbackId,
                                 data: data,
                              },
                              transfers,
                           );
                        } catch (ex) {
                           capability.reject(ex);
                        }
                        return capability.promise;
                     },
                  },
                  {
                     key: "sendWithStream",
                     value: function sendWithStream(
                        actionName,
                        data,
                        queueingStrategy,
                        transfers,
                     ) {
                        var _this115 = this;
                        var streamId = this.streamId++,
                           sourceName = this.sourceName,
                           targetName = this.targetName,
                           comObj = this.comObj;
                        return new ReadableStream(
                           {
                              start: function start(controller) {
                                 var startCapability = Promise.withResolvers();
                                 _this115.streamControllers[streamId] = {
                                    controller: controller,
                                    startCall: startCapability,
                                    pullCall: null,
                                    cancelCall: null,
                                    isClosed: false,
                                 };
                                 comObj.postMessage(
                                    {
                                       sourceName: sourceName,
                                       targetName: targetName,
                                       action: actionName,
                                       streamId: streamId,
                                       data: data,
                                       desiredSize: controller.desiredSize,
                                    },
                                    transfers,
                                 );
                                 return startCapability.promise;
                              },
                              pull: function pull(controller) {
                                 var pullCapability = Promise.withResolvers();
                                 _this115.streamControllers[streamId].pullCall =
                                    pullCapability;
                                 comObj.postMessage({
                                    sourceName: sourceName,
                                    targetName: targetName,
                                    stream: StreamKind.PULL,
                                    streamId: streamId,
                                    desiredSize: controller.desiredSize,
                                 });
                                 return pullCapability.promise;
                              },
                              cancel: function cancel(reason) {
                                 (0,
                                 _util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                                    reason instanceof Error,
                                    "cancel must have a valid reason",
                                 );
                                 var cancelCapability = Promise.withResolvers();
                                 _this115.streamControllers[
                                    streamId
                                 ].cancelCall = cancelCapability;
                                 _this115.streamControllers[streamId].isClosed =
                                    true;
                                 comObj.postMessage({
                                    sourceName: sourceName,
                                    targetName: targetName,
                                    stream: StreamKind.CANCEL,
                                    streamId: streamId,
                                    reason: wrapReason(reason),
                                 });
                                 return cancelCapability.promise;
                              },
                           },
                           queueingStrategy,
                        );
                     },
                  },
                  {
                     key: "destroy",
                     value: function destroy() {
                        this.comObj.removeEventListener(
                           "message",
                           this._onComObjOnMessage,
                        );
                     },
                  },
               ]);
            })();
            /***/ function _createStreamSink(data) {
               var streamId = data.streamId,
                  sourceName = this.sourceName,
                  targetName = data.sourceName,
                  comObj = this.comObj;
               var self = this,
                  action = this.actionHandler[data.action];
               var streamSink = {
                  enqueue: function enqueue(chunk) {
                     var size =
                        arguments.length > 1 && arguments[1] !== undefined
                           ? arguments[1]
                           : 1;
                     var transfers =
                        arguments.length > 2 ? arguments[2] : undefined;
                     if (this.isCancelled) {
                        return;
                     }
                     var lastDesiredSize = this.desiredSize;
                     this.desiredSize -= size;
                     if (lastDesiredSize > 0 && this.desiredSize <= 0) {
                        this.sinkCapability = Promise.withResolvers();
                        this.ready = this.sinkCapability.promise;
                     }
                     comObj.postMessage(
                        {
                           sourceName: sourceName,
                           targetName: targetName,
                           stream: StreamKind.ENQUEUE,
                           streamId: streamId,
                           chunk: chunk,
                        },
                        transfers,
                     );
                  },
                  close: function close() {
                     if (this.isCancelled) {
                        return;
                     }
                     this.isCancelled = true;
                     comObj.postMessage({
                        sourceName: sourceName,
                        targetName: targetName,
                        stream: StreamKind.CLOSE,
                        streamId: streamId,
                     });
                     delete self.streamSinks[streamId];
                  },
                  error: function error(reason) {
                     (0, _util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                        reason instanceof Error,
                        "error must have a valid reason",
                     );
                     if (this.isCancelled) {
                        return;
                     }
                     this.isCancelled = true;
                     comObj.postMessage({
                        sourceName: sourceName,
                        targetName: targetName,
                        stream: StreamKind.ERROR,
                        streamId: streamId,
                        reason: wrapReason(reason),
                     });
                  },
                  sinkCapability: Promise.withResolvers(),
                  onPull: null,
                  onCancel: null,
                  isCancelled: false,
                  desiredSize: data.desiredSize,
                  ready: null,
               };
               streamSink.sinkCapability.resolve();
               streamSink.ready = streamSink.sinkCapability.promise;
               this.streamSinks[streamId] = streamSink;
               new Promise(function (resolve) {
                  resolve(action(data.data, streamSink));
               }).then(
                  function () {
                     comObj.postMessage({
                        sourceName: sourceName,
                        targetName: targetName,
                        stream: StreamKind.START_COMPLETE,
                        streamId: streamId,
                        success: true,
                     });
                  },
                  function (reason) {
                     comObj.postMessage({
                        sourceName: sourceName,
                        targetName: targetName,
                        stream: StreamKind.START_COMPLETE,
                        streamId: streamId,
                        reason: wrapReason(reason),
                     });
                  },
               );
            }
            function _processStreamMessage(data) {
               var streamId = data.streamId,
                  sourceName = this.sourceName,
                  targetName = data.sourceName,
                  comObj = this.comObj;
               var streamController = this.streamControllers[streamId],
                  streamSink = this.streamSinks[streamId];
               switch (data.stream) {
                  case StreamKind.START_COMPLETE:
                     if (data.success) {
                        streamController.startCall.resolve();
                     } else {
                        streamController.startCall.reject(
                           wrapReason(data.reason),
                        );
                     }
                     break;
                  case StreamKind.PULL_COMPLETE:
                     if (data.success) {
                        streamController.pullCall.resolve();
                     } else {
                        streamController.pullCall.reject(
                           wrapReason(data.reason),
                        );
                     }
                     break;
                  case StreamKind.PULL:
                     if (!streamSink) {
                        comObj.postMessage({
                           sourceName: sourceName,
                           targetName: targetName,
                           stream: StreamKind.PULL_COMPLETE,
                           streamId: streamId,
                           success: true,
                        });
                        break;
                     }
                     if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {
                        streamSink.sinkCapability.resolve();
                     }
                     streamSink.desiredSize = data.desiredSize;
                     new Promise(function (resolve) {
                        var _streamSink$onPull;
                        resolve(
                           (_streamSink$onPull = streamSink.onPull) === null ||
                              _streamSink$onPull === void 0
                              ? void 0
                              : _streamSink$onPull.call(streamSink),
                        );
                     }).then(
                        function () {
                           comObj.postMessage({
                              sourceName: sourceName,
                              targetName: targetName,
                              stream: StreamKind.PULL_COMPLETE,
                              streamId: streamId,
                              success: true,
                           });
                        },
                        function (reason) {
                           comObj.postMessage({
                              sourceName: sourceName,
                              targetName: targetName,
                              stream: StreamKind.PULL_COMPLETE,
                              streamId: streamId,
                              reason: wrapReason(reason),
                           });
                        },
                     );
                     break;
                  case StreamKind.ENQUEUE:
                     (0, _util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                        streamController,
                        "enqueue should have stream controller",
                     );
                     if (streamController.isClosed) {
                        break;
                     }
                     streamController.controller.enqueue(data.chunk);
                     break;
                  case StreamKind.CLOSE:
                     (0, _util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                        streamController,
                        "close should have stream controller",
                     );
                     if (streamController.isClosed) {
                        break;
                     }
                     streamController.isClosed = true;
                     streamController.controller.close();
                     _assertClassBrand(
                        _MessageHandler_brand,
                        this,
                        _deleteStreamController,
                     ).call(this, streamController, streamId);
                     break;
                  case StreamKind.ERROR:
                     (0, _util_js__WEBPACK_IMPORTED_MODULE_0__.assert)(
                        streamController,
                        "error should have stream controller",
                     );
                     streamController.controller.error(wrapReason(data.reason));
                     _assertClassBrand(
                        _MessageHandler_brand,
                        this,
                        _deleteStreamController,
                     ).call(this, streamController, streamId);
                     break;
                  case StreamKind.CANCEL_COMPLETE:
                     if (data.success) {
                        streamController.cancelCall.resolve();
                     } else {
                        streamController.cancelCall.reject(
                           wrapReason(data.reason),
                        );
                     }
                     _assertClassBrand(
                        _MessageHandler_brand,
                        this,
                        _deleteStreamController,
                     ).call(this, streamController, streamId);
                     break;
                  case StreamKind.CANCEL:
                     if (!streamSink) {
                        break;
                     }
                     new Promise(function (resolve) {
                        var _streamSink$onCancel;
                        resolve(
                           (_streamSink$onCancel = streamSink.onCancel) ===
                              null || _streamSink$onCancel === void 0
                              ? void 0
                              : _streamSink$onCancel.call(
                                   streamSink,
                                   wrapReason(data.reason),
                                ),
                        );
                     }).then(
                        function () {
                           comObj.postMessage({
                              sourceName: sourceName,
                              targetName: targetName,
                              stream: StreamKind.CANCEL_COMPLETE,
                              streamId: streamId,
                              success: true,
                           });
                        },
                        function (reason) {
                           comObj.postMessage({
                              sourceName: sourceName,
                              targetName: targetName,
                              stream: StreamKind.CANCEL_COMPLETE,
                              streamId: streamId,
                              reason: wrapReason(reason),
                           });
                        },
                     );
                     streamSink.sinkCapability.reject(wrapReason(data.reason));
                     streamSink.isCancelled = true;
                     delete this.streamSinks[streamId];
                     break;
                  default:
                     throw new Error("Unexpected stream case");
               }
            }
            function _deleteStreamController(_x30, _x31) {
               return _deleteStreamController2.apply(this, arguments);
            }
            function _deleteStreamController2() {
               _deleteStreamController2 = _asyncToGenerator(
                  /*#__PURE__*/ _regenerator().m(
                     function _callee35(streamController, streamId) {
                        var _streamController$sta,
                           _streamController$pul,
                           _streamController$can;
                        return _regenerator().w(
                           function (_context36) {
                              while (1)
                                 switch (_context36.n) {
                                    case 0:
                                       _context36.n = 1;
                                       return Promise.allSettled([
                                          (_streamController$sta =
                                             streamController.startCall) ===
                                             null ||
                                          _streamController$sta === void 0
                                             ? void 0
                                             : _streamController$sta.promise,
                                          (_streamController$pul =
                                             streamController.pullCall) ===
                                             null ||
                                          _streamController$pul === void 0
                                             ? void 0
                                             : _streamController$pul.promise,
                                          (_streamController$can =
                                             streamController.cancelCall) ===
                                             null ||
                                          _streamController$can === void 0
                                             ? void 0
                                             : _streamController$can.promise,
                                       ]);
                                    case 1:
                                       delete this.streamControllers[streamId];
                                    case 2:
                                       return _context36.a(2);
                                 }
                           },
                           _callee35,
                           this,
                        );
                     },
                  ),
               );
               return _deleteStreamController2.apply(this, arguments);
            }
         },
         /***/ 651: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ MurmurHash3_64: function MurmurHash3_64() {
                  return /* binding */ _MurmurHash3_;
               } /* harmony export */,
            });
            var SEED = 0xc3d2e1f0;
            var MASK_HIGH = 0xffff0000;
            var MASK_LOW = 0xffff;
            var _MurmurHash3_ = /*#__PURE__*/ (function () {
               function _MurmurHash3_(seed) {
                  _classCallCheck(this, _MurmurHash3_);
                  this.h1 = seed ? seed & 0xffffffff : SEED;
                  this.h2 = seed ? seed & 0xffffffff : SEED;
               }
               return _createClass(_MurmurHash3_, [
                  {
                     key: "update",
                     value: function update(input) {
                        var data, length;
                        if (typeof input === "string") {
                           data = new Uint8Array(input.length * 2);
                           length = 0;
                           for (var i = 0, ii = input.length; i < ii; i++) {
                              var code = input.charCodeAt(i);
                              if (code <= 0xff) {
                                 data[length++] = code;
                              } else {
                                 data[length++] = code >>> 8;
                                 data[length++] = code & 0xff;
                              }
                           }
                        } else if (ArrayBuffer.isView(input)) {
                           data = input.slice();
                           length = data.byteLength;
                        } else {
                           throw new Error(
                              "Invalid data format, must be a string or TypedArray.",
                           );
                        }
                        var blockCounts = length >> 2;
                        var tailLength = length - blockCounts * 4;
                        var dataUint32 = new Uint32Array(
                           data.buffer,
                           0,
                           blockCounts,
                        );
                        var k1 = 0,
                           k2 = 0;
                        var h1 = this.h1,
                           h2 = this.h2;
                        var C1 = 0xcc9e2d51,
                           C2 = 0x1b873593;
                        var C1_LOW = C1 & MASK_LOW,
                           C2_LOW = C2 & MASK_LOW;
                        for (var _i35 = 0; _i35 < blockCounts; _i35++) {
                           if (_i35 & 1) {
                              k1 = dataUint32[_i35];
                              k1 =
                                 ((k1 * C1) & MASK_HIGH) |
                                 ((k1 * C1_LOW) & MASK_LOW);
                              k1 = (k1 << 15) | (k1 >>> 17);
                              k1 =
                                 ((k1 * C2) & MASK_HIGH) |
                                 ((k1 * C2_LOW) & MASK_LOW);
                              h1 ^= k1;
                              h1 = (h1 << 13) | (h1 >>> 19);
                              h1 = h1 * 5 + 0xe6546b64;
                           } else {
                              k2 = dataUint32[_i35];
                              k2 =
                                 ((k2 * C1) & MASK_HIGH) |
                                 ((k2 * C1_LOW) & MASK_LOW);
                              k2 = (k2 << 15) | (k2 >>> 17);
                              k2 =
                                 ((k2 * C2) & MASK_HIGH) |
                                 ((k2 * C2_LOW) & MASK_LOW);
                              h2 ^= k2;
                              h2 = (h2 << 13) | (h2 >>> 19);
                              h2 = h2 * 5 + 0xe6546b64;
                           }
                        }
                        k1 = 0;
                        switch (tailLength) {
                           case 3:
                              k1 ^= data[blockCounts * 4 + 2] << 16;
                           case 2:
                              k1 ^= data[blockCounts * 4 + 1] << 8;
                           case 1:
                              k1 ^= data[blockCounts * 4];
                              k1 =
                                 ((k1 * C1) & MASK_HIGH) |
                                 ((k1 * C1_LOW) & MASK_LOW);
                              k1 = (k1 << 15) | (k1 >>> 17);
                              k1 =
                                 ((k1 * C2) & MASK_HIGH) |
                                 ((k1 * C2_LOW) & MASK_LOW);
                              if (blockCounts & 1) {
                                 h1 ^= k1;
                              } else {
                                 h2 ^= k1;
                              }
                        }
                        this.h1 = h1;
                        this.h2 = h2;
                     },
                  },
                  {
                     key: "hexdigest",
                     value: function hexdigest() {
                        var h1 = this.h1,
                           h2 = this.h2;
                        h1 ^= h2 >>> 1;
                        h1 =
                           ((h1 * 0xed558ccd) & MASK_HIGH) |
                           ((h1 * 0x8ccd) & MASK_LOW);
                        h2 =
                           ((h2 * 0xff51afd7) & MASK_HIGH) |
                           (((((h2 << 16) | (h1 >>> 16)) * 0xafd7ed55) &
                              MASK_HIGH) >>>
                              16);
                        h1 ^= h2 >>> 1;
                        h1 =
                           ((h1 * 0x1a85ec53) & MASK_HIGH) |
                           ((h1 * 0xec53) & MASK_LOW);
                        h2 =
                           ((h2 * 0xc4ceb9fe) & MASK_HIGH) |
                           (((((h2 << 16) | (h1 >>> 16)) * 0xb9fe1a85) &
                              MASK_HIGH) >>>
                              16);
                        h1 ^= h2 >>> 1;
                        return (
                           (h1 >>> 0).toString(16).padStart(8, "0") +
                           (h2 >>> 0).toString(16).padStart(8, "0")
                        );
                     },
                  },
               ]);
            })(); /***/
         },
         /***/ 292: /***/ function _(
            __unused_webpack___webpack_module__,
            __webpack_exports__,
            __webpack_require__,
         ) {
            var _Util2;
            /* harmony export */ __webpack_require__.d(__webpack_exports__, {
               /* harmony export */ AbortException: function AbortException() {
                  return /* binding */ _AbortException;
               },
               /* harmony export */ AnnotationBorderStyleType:
                  function AnnotationBorderStyleType() {
                     return /* binding */ _AnnotationBorderStyleType;
                  },
               /* harmony export */ AnnotationEditorParamsType:
                  function AnnotationEditorParamsType() {
                     return /* binding */ _AnnotationEditorParamsType;
                  },
               /* harmony export */ AnnotationEditorPrefix:
                  function AnnotationEditorPrefix() {
                     return /* binding */ _AnnotationEditorPrefix;
                  },
               /* harmony export */ AnnotationEditorType:
                  function AnnotationEditorType() {
                     return /* binding */ _AnnotationEditorType;
                  },
               /* harmony export */ AnnotationMode: function AnnotationMode() {
                  return /* binding */ _AnnotationMode;
               },
               /* harmony export */ AnnotationPrefix:
                  function AnnotationPrefix() {
                     return /* binding */ _AnnotationPrefix;
                  },
               /* harmony export */ AnnotationType: function AnnotationType() {
                  return /* binding */ _AnnotationType;
               },
               /* harmony export */ BaseException: function BaseException() {
                  return /* binding */ _BaseException;
               },
               /* harmony export */ CMapCompressionType:
                  function CMapCompressionType() {
                     return /* binding */ _CMapCompressionType;
                  },
               /* harmony export */ FONT_IDENTITY_MATRIX:
                  function FONT_IDENTITY_MATRIX() {
                     return /* binding */ _FONT_IDENTITY_MATRIX;
                  },
               /* harmony export */ FeatureTest: (function (_FeatureTest) {
                  function FeatureTest() {
                     return _FeatureTest.apply(this, arguments);
                  }
                  FeatureTest.toString = function () {
                     return _FeatureTest.toString();
                  };
                  return FeatureTest;
               })(function () {
                  return /* binding */ FeatureTest;
               }),
               /* harmony export */ FontRenderOps: function FontRenderOps() {
                  return /* binding */ _FontRenderOps;
               },
               /* harmony export */ FormatError: function FormatError() {
                  return /* binding */ _FormatError;
               },
               /* harmony export */ IDENTITY_MATRIX:
                  function IDENTITY_MATRIX() {
                     return /* binding */ _IDENTITY_MATRIX;
                  },
               /* harmony export */ ImageKind: (function (_ImageKind) {
                  function ImageKind() {
                     return _ImageKind.apply(this, arguments);
                  }
                  ImageKind.toString = function () {
                     return _ImageKind.toString();
                  };
                  return ImageKind;
               })(function () {
                  return /* binding */ ImageKind;
               }),
               /* harmony export */ InvalidPDFException:
                  function InvalidPDFException() {
                     return /* binding */ _InvalidPDFException;
                  },
               /* harmony export */ LINE_FACTOR: function LINE_FACTOR() {
                  return /* binding */ _LINE_FACTOR;
               },
               /* harmony export */ MAX_IMAGE_SIZE_TO_CACHE:
                  function MAX_IMAGE_SIZE_TO_CACHE() {
                     return /* binding */ _MAX_IMAGE_SIZE_TO_CACHE;
                  },
               /* harmony export */ MissingPDFException:
                  function MissingPDFException() {
                     return /* binding */ _MissingPDFException;
                  },
               /* harmony export */ OPS: function OPS() {
                  return /* binding */ _OPS;
               },
               /* harmony export */ PasswordException:
                  function PasswordException() {
                     return /* binding */ _PasswordException;
                  },
               /* harmony export */ PasswordResponses:
                  function PasswordResponses() {
                     return /* binding */ _PasswordResponses;
                  },
               /* harmony export */ PermissionFlag: function PermissionFlag() {
                  return /* binding */ _PermissionFlag;
               },
               /* harmony export */ RenderingIntentFlag:
                  function RenderingIntentFlag() {
                     return /* binding */ _RenderingIntentFlag;
                  },
               /* harmony export */ TextRenderingMode:
                  function TextRenderingMode() {
                     return /* binding */ _TextRenderingMode;
                  },
               /* harmony export */ UnexpectedResponseException:
                  function UnexpectedResponseException() {
                     return /* binding */ _UnexpectedResponseException;
                  },
               /* harmony export */ UnknownErrorException:
                  function UnknownErrorException() {
                     return /* binding */ _UnknownErrorException;
                  },
               /* harmony export */ Util: function Util() {
                  return /* binding */ _Util;
               },
               /* harmony export */ VerbosityLevel: function VerbosityLevel() {
                  return /* binding */ _VerbosityLevel;
               },
               /* harmony export */ assert: function assert() {
                  return /* binding */ _assert;
               },
               /* harmony export */ bytesToString: function bytesToString() {
                  return /* binding */ _bytesToString;
               },
               /* harmony export */ createValidAbsoluteUrl:
                  function createValidAbsoluteUrl() {
                     return /* binding */ _createValidAbsoluteUrl;
                  },
               /* harmony export */ getUuid: function getUuid() {
                  return /* binding */ _getUuid;
               },
               /* harmony export */ getVerbosityLevel:
                  function getVerbosityLevel() {
                     return /* binding */ _getVerbosityLevel;
                  },
               /* harmony export */ info: function info() {
                  return /* binding */ _info3;
               },
               /* harmony export */ isNodeJS: function isNodeJS() {
                  return /* binding */ _isNodeJS;
               },
               /* harmony export */ normalizeUnicode:
                  function normalizeUnicode() {
                     return /* binding */ _normalizeUnicode;
                  },
               /* harmony export */ objectFromMap: function objectFromMap() {
                  return /* binding */ _objectFromMap;
               },
               /* harmony export */ setVerbosityLevel:
                  function setVerbosityLevel() {
                     return /* binding */ _setVerbosityLevel;
                  },
               /* harmony export */ shadow: function shadow() {
                  return /* binding */ _shadow;
               },
               /* harmony export */ string32: function string32() {
                  return /* binding */ _string;
               },
               /* harmony export */ stringToBytes: function stringToBytes() {
                  return /* binding */ _stringToBytes;
               },
               /* harmony export */ unreachable: function unreachable() {
                  return /* binding */ _unreachable;
               },
               /* harmony export */ warn: function warn() {
                  return /* binding */ _warn;
               } /* harmony export */,
            });
            /* unused harmony exports AnnotationActionEventType, AnnotationFieldFlag, AnnotationFlag, AnnotationReplyType, BASELINE_FACTOR, DocumentActionEventType, getModificationDate, isArrayEqual, LINE_DESCENT_FACTOR, objectSize, PageActionEventType, stringToPDFString, stringToUTF8String, utf8StringToString */ var _isNodeJS =
               (typeof process === "undefined"
                  ? "undefined"
                  : _typeof(process)) === "object" &&
               process + "" === "[object process]" &&
               !process.versions.nw &&
               !(
                  process.versions.electron &&
                  process.type &&
                  process.type !== "browser"
               );
            var _IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
            var _FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];
            var _MAX_IMAGE_SIZE_TO_CACHE = 10e6;
            var _LINE_FACTOR = 1.35;
            var LINE_DESCENT_FACTOR = 0.35;
            var BASELINE_FACTOR = LINE_DESCENT_FACTOR / _LINE_FACTOR;
            var _RenderingIntentFlag = {
               ANY: 0x01,
               DISPLAY: 0x02,
               PRINT: 0x04,
               SAVE: 0x08,
               ANNOTATIONS_FORMS: 0x10,
               ANNOTATIONS_STORAGE: 0x20,
               ANNOTATIONS_DISABLE: 0x40,
               OPLIST: 0x100,
            };
            var _AnnotationMode = {
               DISABLE: 0,
               ENABLE: 1,
               ENABLE_FORMS: 2,
               ENABLE_STORAGE: 3,
            };
            var _AnnotationEditorPrefix = "pdfjs_internal_editor_";
            var _AnnotationEditorType = {
               DISABLE: -1,
               NONE: 0,
               FREETEXT: 3,
               HIGHLIGHT: 9,
               STAMP: 13,
               INK: 15,
            };
            var _AnnotationEditorParamsType = {
               RESIZE: 1,
               CREATE: 2,
               FREETEXT_SIZE: 11,
               FREETEXT_COLOR: 12,
               FREETEXT_OPACITY: 13,
               INK_COLOR: 21,
               INK_THICKNESS: 22,
               INK_OPACITY: 23,
               HIGHLIGHT_COLOR: 31,
               HIGHLIGHT_DEFAULT_COLOR: 32,
               HIGHLIGHT_THICKNESS: 33,
               HIGHLIGHT_FREE: 34,
               HIGHLIGHT_SHOW_ALL: 35,
            };
            var _PermissionFlag = {
               PRINT: 0x04,
               MODIFY_CONTENTS: 0x08,
               COPY: 0x10,
               MODIFY_ANNOTATIONS: 0x20,
               FILL_INTERACTIVE_FORMS: 0x100,
               COPY_FOR_ACCESSIBILITY: 0x200,
               ASSEMBLE: 0x400,
               PRINT_HIGH_QUALITY: 0x800,
            };
            var _TextRenderingMode = {
               FILL: 0,
               STROKE: 1,
               FILL_STROKE: 2,
               INVISIBLE: 3,
               FILL_ADD_TO_PATH: 4,
               STROKE_ADD_TO_PATH: 5,
               FILL_STROKE_ADD_TO_PATH: 6,
               ADD_TO_PATH: 7,
               FILL_STROKE_MASK: 3,
               ADD_TO_PATH_FLAG: 4,
            };
            var ImageKind = { GRAYSCALE_1BPP: 1, RGB_24BPP: 2, RGBA_32BPP: 3 };
            var _AnnotationType = {
               TEXT: 1,
               LINK: 2,
               FREETEXT: 3,
               LINE: 4,
               SQUARE: 5,
               CIRCLE: 6,
               POLYGON: 7,
               POLYLINE: 8,
               HIGHLIGHT: 9,
               UNDERLINE: 10,
               SQUIGGLY: 11,
               STRIKEOUT: 12,
               STAMP: 13,
               CARET: 14,
               INK: 15,
               POPUP: 16,
               FILEATTACHMENT: 17,
               SOUND: 18,
               MOVIE: 19,
               WIDGET: 20,
               SCREEN: 21,
               PRINTERMARK: 22,
               TRAPNET: 23,
               WATERMARK: 24,
               THREED: 25,
               REDACT: 26,
            };
            var AnnotationReplyType = { GROUP: "Group", REPLY: "R" };
            var AnnotationFlag = {
               INVISIBLE: 0x01,
               HIDDEN: 0x02,
               PRINT: 0x04,
               NOZOOM: 0x08,
               NOROTATE: 0x10,
               NOVIEW: 0x20,
               READONLY: 0x40,
               LOCKED: 0x80,
               TOGGLENOVIEW: 0x100,
               LOCKEDCONTENTS: 0x200,
            };
            var AnnotationFieldFlag = {
               READONLY: 0x0000001,
               REQUIRED: 0x0000002,
               NOEXPORT: 0x0000004,
               MULTILINE: 0x0001000,
               PASSWORD: 0x0002000,
               NOTOGGLETOOFF: 0x0004000,
               RADIO: 0x0008000,
               PUSHBUTTON: 0x0010000,
               COMBO: 0x0020000,
               EDIT: 0x0040000,
               SORT: 0x0080000,
               FILESELECT: 0x0100000,
               MULTISELECT: 0x0200000,
               DONOTSPELLCHECK: 0x0400000,
               DONOTSCROLL: 0x0800000,
               COMB: 0x1000000,
               RICHTEXT: 0x2000000,
               RADIOSINUNISON: 0x2000000,
               COMMITONSELCHANGE: 0x4000000,
            };
            var _AnnotationBorderStyleType = {
               SOLID: 1,
               DASHED: 2,
               BEVELED: 3,
               INSET: 4,
               UNDERLINE: 5,
            };
            var AnnotationActionEventType = {
               E: "Mouse Enter",
               X: "Mouse Exit",
               D: "Mouse Down",
               U: "Mouse Up",
               Fo: "Focus",
               Bl: "Blur",
               PO: "PageOpen",
               PC: "PageClose",
               PV: "PageVisible",
               PI: "PageInvisible",
               K: "Keystroke",
               F: "Format",
               V: "Validate",
               C: "Calculate",
            };
            var DocumentActionEventType = {
               WC: "WillClose",
               WS: "WillSave",
               DS: "DidSave",
               WP: "WillPrint",
               DP: "DidPrint",
            };
            var PageActionEventType = { O: "PageOpen", C: "PageClose" };
            var _VerbosityLevel = { ERRORS: 0, WARNINGS: 1, INFOS: 5 };
            var _CMapCompressionType = { NONE: 0, BINARY: 1 };
            var _OPS = {
               dependency: 1,
               setLineWidth: 2,
               setLineCap: 3,
               setLineJoin: 4,
               setMiterLimit: 5,
               setDash: 6,
               setRenderingIntent: 7,
               setFlatness: 8,
               setGState: 9,
               save: 10,
               restore: 11,
               transform: 12,
               moveTo: 13,
               lineTo: 14,
               curveTo: 15,
               curveTo2: 16,
               curveTo3: 17,
               closePath: 18,
               rectangle: 19,
               stroke: 20,
               closeStroke: 21,
               fill: 22,
               eoFill: 23,
               fillStroke: 24,
               eoFillStroke: 25,
               closeFillStroke: 26,
               closeEOFillStroke: 27,
               endPath: 28,
               clip: 29,
               eoClip: 30,
               beginText: 31,
               endText: 32,
               setCharSpacing: 33,
               setWordSpacing: 34,
               setHScale: 35,
               setLeading: 36,
               setFont: 37,
               setTextRenderingMode: 38,
               setTextRise: 39,
               moveText: 40,
               setLeadingMoveText: 41,
               setTextMatrix: 42,
               nextLine: 43,
               showText: 44,
               showSpacedText: 45,
               nextLineShowText: 46,
               nextLineSetSpacingShowText: 47,
               setCharWidth: 48,
               setCharWidthAndBounds: 49,
               setStrokeColorSpace: 50,
               setFillColorSpace: 51,
               setStrokeColor: 52,
               setStrokeColorN: 53,
               setFillColor: 54,
               setFillColorN: 55,
               setStrokeGray: 56,
               setFillGray: 57,
               setStrokeRGBColor: 58,
               setFillRGBColor: 59,
               setStrokeCMYKColor: 60,
               setFillCMYKColor: 61,
               shadingFill: 62,
               beginInlineImage: 63,
               beginImageData: 64,
               endInlineImage: 65,
               paintXObject: 66,
               markPoint: 67,
               markPointProps: 68,
               beginMarkedContent: 69,
               beginMarkedContentProps: 70,
               endMarkedContent: 71,
               beginCompat: 72,
               endCompat: 73,
               paintFormXObjectBegin: 74,
               paintFormXObjectEnd: 75,
               beginGroup: 76,
               endGroup: 77,
               beginAnnotation: 80,
               endAnnotation: 81,
               paintImageMaskXObject: 83,
               paintImageMaskXObjectGroup: 84,
               paintImageXObject: 85,
               paintInlineImageXObject: 86,
               paintInlineImageXObjectGroup: 87,
               paintImageXObjectRepeat: 88,
               paintImageMaskXObjectRepeat: 89,
               paintSolidColorImageMask: 90,
               constructPath: 91,
            };
            var _PasswordResponses = {
               NEED_PASSWORD: 1,
               INCORRECT_PASSWORD: 2,
            };
            var verbosity = _VerbosityLevel.WARNINGS;
            function _setVerbosityLevel(level) {
               if (Number.isInteger(level)) {
                  verbosity = level;
               }
            }
            function _getVerbosityLevel() {
               return verbosity;
            }
            function _info3(msg) {
               if (verbosity >= _VerbosityLevel.INFOS) {
                  console.log("Info: ".concat(msg));
               }
            }
            function _warn(msg) {
               if (verbosity >= _VerbosityLevel.WARNINGS) {
                  console.log("Warning: ".concat(msg));
               }
            }
            function _unreachable(msg) {
               throw new Error(msg);
            }
            function _assert(cond, msg) {
               if (!cond) {
                  _unreachable(msg);
               }
            }
            function _isValidProtocol(url) {
               switch (url === null || url === void 0 ? void 0 : url.protocol) {
                  case "http:":
                  case "https:":
                  case "ftp:":
                  case "mailto:":
                  case "tel:":
                     return true;
                  default:
                     return false;
               }
            }
            function _createValidAbsoluteUrl(url) {
               var baseUrl =
                  arguments.length > 1 && arguments[1] !== undefined
                     ? arguments[1]
                     : null;
               var options =
                  arguments.length > 2 && arguments[2] !== undefined
                     ? arguments[2]
                     : null;
               if (!url) {
                  return null;
               }
               try {
                  if (options && typeof url === "string") {
                     if (options.addDefaultProtocol && url.startsWith("www.")) {
                        var dots = url.match(/\./g);
                        if (
                           (dots === null || dots === void 0
                              ? void 0
                              : dots.length) >= 2
                        ) {
                           url = "http://".concat(url);
                        }
                     }
                     if (options.tryConvertEncoding) {
                        try {
                           url = stringToUTF8String(url);
                        } catch (_unused12) {}
                     }
                  }
                  var absoluteUrl = baseUrl
                     ? new URL(url, baseUrl)
                     : new URL(url);
                  if (_isValidProtocol(absoluteUrl)) {
                     return absoluteUrl;
                  }
               } catch (_unused13) {}
               return null;
            }
            function _shadow(obj, prop, value) {
               var nonSerializable =
                  arguments.length > 3 && arguments[3] !== undefined
                     ? arguments[3]
                     : false;
               Object.defineProperty(obj, prop, {
                  value: value,
                  enumerable: !nonSerializable,
                  configurable: true,
                  writable: false,
               });
               return value;
            }
            var _BaseException = (function BaseExceptionClosure() {
               function BaseException(message, name) {
                  if (this.constructor === BaseException) {
                     _unreachable("Cannot initialize BaseException.");
                  }
                  this.message = message;
                  this.name = name;
               }
               BaseException.prototype = new Error();
               BaseException.constructor = BaseException;
               return BaseException;
            })();
            var _PasswordException = /*#__PURE__*/ (function (_BaseException2) {
               function _PasswordException(msg, code) {
                  var _this116;
                  _classCallCheck(this, _PasswordException);
                  _this116 = _callSuper(this, _PasswordException, [
                     msg,
                     "PasswordException",
                  ]);
                  _this116.code = code;
                  return _this116;
               }
               _inherits(_PasswordException, _BaseException2);
               return _createClass(_PasswordException);
            })(_BaseException);
            var _UnknownErrorException = /*#__PURE__*/ (function (
               _BaseException3,
            ) {
               function _UnknownErrorException(msg, details) {
                  var _this117;
                  _classCallCheck(this, _UnknownErrorException);
                  _this117 = _callSuper(this, _UnknownErrorException, [
                     msg,
                     "UnknownErrorException",
                  ]);
                  _this117.details = details;
                  return _this117;
               }
               _inherits(_UnknownErrorException, _BaseException3);
               return _createClass(_UnknownErrorException);
            })(_BaseException);
            var _InvalidPDFException = /*#__PURE__*/ (function (
               _BaseException4,
            ) {
               function _InvalidPDFException(msg) {
                  _classCallCheck(this, _InvalidPDFException);
                  return _callSuper(this, _InvalidPDFException, [
                     msg,
                     "InvalidPDFException",
                  ]);
               }
               _inherits(_InvalidPDFException, _BaseException4);
               return _createClass(_InvalidPDFException);
            })(_BaseException);
            var _MissingPDFException = /*#__PURE__*/ (function (
               _BaseException5,
            ) {
               function _MissingPDFException(msg) {
                  _classCallCheck(this, _MissingPDFException);
                  return _callSuper(this, _MissingPDFException, [
                     msg,
                     "MissingPDFException",
                  ]);
               }
               _inherits(_MissingPDFException, _BaseException5);
               return _createClass(_MissingPDFException);
            })(_BaseException);
            var _UnexpectedResponseException = /*#__PURE__*/ (function (
               _BaseException6,
            ) {
               function _UnexpectedResponseException(msg, status) {
                  var _this118;
                  _classCallCheck(this, _UnexpectedResponseException);
                  _this118 = _callSuper(this, _UnexpectedResponseException, [
                     msg,
                     "UnexpectedResponseException",
                  ]);
                  _this118.status = status;
                  return _this118;
               }
               _inherits(_UnexpectedResponseException, _BaseException6);
               return _createClass(_UnexpectedResponseException);
            })(_BaseException);
            var _FormatError = /*#__PURE__*/ (function (_BaseException7) {
               function _FormatError(msg) {
                  _classCallCheck(this, _FormatError);
                  return _callSuper(this, _FormatError, [msg, "FormatError"]);
               }
               _inherits(_FormatError, _BaseException7);
               return _createClass(_FormatError);
            })(_BaseException);
            var _AbortException = /*#__PURE__*/ (function (_BaseException8) {
               function _AbortException(msg) {
                  _classCallCheck(this, _AbortException);
                  return _callSuper(this, _AbortException, [
                     msg,
                     "AbortException",
                  ]);
               }
               _inherits(_AbortException, _BaseException8);
               return _createClass(_AbortException);
            })(_BaseException);
            function _bytesToString(bytes) {
               if (
                  _typeof(bytes) !== "object" ||
                  (bytes === null || bytes === void 0
                     ? void 0
                     : bytes.length) === undefined
               ) {
                  _unreachable("Invalid argument for bytesToString");
               }
               var length = bytes.length;
               var MAX_ARGUMENT_COUNT = 8192;
               if (length < MAX_ARGUMENT_COUNT) {
                  return String.fromCharCode.apply(null, bytes);
               }
               var strBuf = [];
               for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
                  var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
                  var chunk = bytes.subarray(i, chunkEnd);
                  strBuf.push(String.fromCharCode.apply(null, chunk));
               }
               return strBuf.join("");
            }
            function _stringToBytes(str) {
               if (typeof str !== "string") {
                  _unreachable("Invalid argument for stringToBytes");
               }
               var length = str.length;
               var bytes = new Uint8Array(length);
               for (var i = 0; i < length; ++i) {
                  bytes[i] = str.charCodeAt(i) & 0xff;
               }
               return bytes;
            }
            function _string(value) {
               return String.fromCharCode(
                  (value >> 24) & 0xff,
                  (value >> 16) & 0xff,
                  (value >> 8) & 0xff,
                  value & 0xff,
               );
            }
            function objectSize(obj) {
               return Object.keys(obj).length;
            }
            function _objectFromMap(map) {
               var obj = Object.create(null);
               var _iterator177 = _createForOfIteratorHelper(map),
                  _step177;
               try {
                  for (
                     _iterator177.s();
                     !(_step177 = _iterator177.n()).done;

                  ) {
                     var _step177$value = _slicedToArray(_step177.value, 2),
                        key = _step177$value[0],
                        value = _step177$value[1];
                     obj[key] = value;
                  }
               } catch (err) {
                  _iterator177.e(err);
               } finally {
                  _iterator177.f();
               }
               return obj;
            }
            function isLittleEndian() {
               var buffer8 = new Uint8Array(4);
               buffer8[0] = 1;
               var view32 = new Uint32Array(buffer8.buffer, 0, 1);
               return view32[0] === 1;
            }
            function isEvalSupported() {
               try {
                  new Function("");
                  return true;
               } catch (_unused14) {
                  return false;
               }
            }
            var FeatureTest = /*#__PURE__*/ (function () {
               function FeatureTest() {
                  _classCallCheck(this, FeatureTest);
               }
               return _createClass(FeatureTest, null, [
                  {
                     key: "isLittleEndian",
                     get: function get() {
                        return _shadow(
                           this,
                           "isLittleEndian",
                           isLittleEndian(),
                        );
                     },
                  },
                  {
                     key: "isEvalSupported",
                     get: function get() {
                        return _shadow(
                           this,
                           "isEvalSupported",
                           isEvalSupported(),
                        );
                     },
                  },
                  {
                     key: "isOffscreenCanvasSupported",
                     get: function get() {
                        return _shadow(
                           this,
                           "isOffscreenCanvasSupported",
                           typeof OffscreenCanvas !== "undefined",
                        );
                     },
                  },
                  {
                     key: "platform",
                     get: function get() {
                        var _navigator2;
                        if (
                           typeof navigator !== "undefined" &&
                           typeof ((_navigator2 = navigator) === null ||
                           _navigator2 === void 0
                              ? void 0
                              : _navigator2.platform) === "string"
                        ) {
                           return _shadow(this, "platform", {
                              isMac: navigator.platform.includes("Mac"),
                           });
                        }
                        return _shadow(this, "platform", { isMac: false });
                     },
                  },
                  {
                     key: "isCSSRoundSupported",
                     get: function get() {
                        var _globalThis$CSS, _globalThis$CSS$suppo;
                        return _shadow(
                           this,
                           "isCSSRoundSupported",
                           (_globalThis$CSS = globalThis.CSS) === null ||
                              _globalThis$CSS === void 0 ||
                              (_globalThis$CSS$suppo =
                                 _globalThis$CSS.supports) === null ||
                              _globalThis$CSS$suppo === void 0
                              ? void 0
                              : _globalThis$CSS$suppo.call(
                                   _globalThis$CSS,
                                   "width: round(1.5px, 1px)",
                                ),
                        );
                     },
                  },
               ]);
            })();
            var hexNumbers = Array.from(Array(256).keys(), function (n) {
               return n.toString(16).padStart(2, "0");
            });
            var _Util = /*#__PURE__*/ (function () {
               function _Util() {
                  _classCallCheck(this, _Util);
               }
               return _createClass(_Util, null, [
                  {
                     key: "makeHexColor",
                     value: function makeHexColor(r, g, b) {
                        return "#"
                           .concat(hexNumbers[r])
                           .concat(hexNumbers[g])
                           .concat(hexNumbers[b]);
                     },
                  },
                  {
                     key: "scaleMinMax",
                     value: function scaleMinMax(transform, minMax) {
                        var temp;
                        if (transform[0]) {
                           if (transform[0] < 0) {
                              temp = minMax[0];
                              minMax[0] = minMax[2];
                              minMax[2] = temp;
                           }
                           minMax[0] *= transform[0];
                           minMax[2] *= transform[0];
                           if (transform[3] < 0) {
                              temp = minMax[1];
                              minMax[1] = minMax[3];
                              minMax[3] = temp;
                           }
                           minMax[1] *= transform[3];
                           minMax[3] *= transform[3];
                        } else {
                           temp = minMax[0];
                           minMax[0] = minMax[1];
                           minMax[1] = temp;
                           temp = minMax[2];
                           minMax[2] = minMax[3];
                           minMax[3] = temp;
                           if (transform[1] < 0) {
                              temp = minMax[1];
                              minMax[1] = minMax[3];
                              minMax[3] = temp;
                           }
                           minMax[1] *= transform[1];
                           minMax[3] *= transform[1];
                           if (transform[2] < 0) {
                              temp = minMax[0];
                              minMax[0] = minMax[2];
                              minMax[2] = temp;
                           }
                           minMax[0] *= transform[2];
                           minMax[2] *= transform[2];
                        }
                        minMax[0] += transform[4];
                        minMax[1] += transform[5];
                        minMax[2] += transform[4];
                        minMax[3] += transform[5];
                     },
                  },
                  {
                     key: "transform",
                     value: function transform(m1, m2) {
                        return [
                           m1[0] * m2[0] + m1[2] * m2[1],
                           m1[1] * m2[0] + m1[3] * m2[1],
                           m1[0] * m2[2] + m1[2] * m2[3],
                           m1[1] * m2[2] + m1[3] * m2[3],
                           m1[0] * m2[4] + m1[2] * m2[5] + m1[4],
                           m1[1] * m2[4] + m1[3] * m2[5] + m1[5],
                        ];
                     },
                  },
                  {
                     key: "applyTransform",
                     value: function applyTransform(p, m) {
                        var xt = p[0] * m[0] + p[1] * m[2] + m[4];
                        var yt = p[0] * m[1] + p[1] * m[3] + m[5];
                        return [xt, yt];
                     },
                  },
                  {
                     key: "applyInverseTransform",
                     value: function applyInverseTransform(p, m) {
                        var d = m[0] * m[3] - m[1] * m[2];
                        var xt =
                           (p[0] * m[3] -
                              p[1] * m[2] +
                              m[2] * m[5] -
                              m[4] * m[3]) /
                           d;
                        var yt =
                           (-p[0] * m[1] +
                              p[1] * m[0] +
                              m[4] * m[1] -
                              m[5] * m[0]) /
                           d;
                        return [xt, yt];
                     },
                  },
                  {
                     key: "getAxialAlignedBoundingBox",
                     value: function getAxialAlignedBoundingBox(r, m) {
                        var p1 = this.applyTransform(r, m);
                        var p2 = this.applyTransform(r.slice(2, 4), m);
                        var p3 = this.applyTransform([r[0], r[3]], m);
                        var p4 = this.applyTransform([r[2], r[1]], m);
                        return [
                           Math.min(p1[0], p2[0], p3[0], p4[0]),
                           Math.min(p1[1], p2[1], p3[1], p4[1]),
                           Math.max(p1[0], p2[0], p3[0], p4[0]),
                           Math.max(p1[1], p2[1], p3[1], p4[1]),
                        ];
                     },
                  },
                  {
                     key: "inverseTransform",
                     value: function inverseTransform(m) {
                        var d = m[0] * m[3] - m[1] * m[2];
                        return [
                           m[3] / d,
                           -m[1] / d,
                           -m[2] / d,
                           m[0] / d,
                           (m[2] * m[5] - m[4] * m[3]) / d,
                           (m[4] * m[1] - m[5] * m[0]) / d,
                        ];
                     },
                  },
                  {
                     key: "singularValueDecompose2dScale",
                     value: function singularValueDecompose2dScale(m) {
                        var transpose = [m[0], m[2], m[1], m[3]];
                        var a = m[0] * transpose[0] + m[1] * transpose[2];
                        var b = m[0] * transpose[1] + m[1] * transpose[3];
                        var c = m[2] * transpose[0] + m[3] * transpose[2];
                        var d = m[2] * transpose[1] + m[3] * transpose[3];
                        var first = (a + d) / 2;
                        var second =
                           Math.sqrt(Math.pow(a + d, 2) - 4 * (a * d - c * b)) /
                           2;
                        var sx = first + second || 1;
                        var sy = first - second || 1;
                        return [Math.sqrt(sx), Math.sqrt(sy)];
                     },
                  },
                  {
                     key: "normalizeRect",
                     value: function normalizeRect(rect) {
                        var r = rect.slice(0);
                        if (rect[0] > rect[2]) {
                           r[0] = rect[2];
                           r[2] = rect[0];
                        }
                        if (rect[1] > rect[3]) {
                           r[1] = rect[3];
                           r[3] = rect[1];
                        }
                        return r;
                     },
                  },
                  {
                     key: "intersect",
                     value: function intersect(rect1, rect2) {
                        var xLow = Math.max(
                           Math.min(rect1[0], rect1[2]),
                           Math.min(rect2[0], rect2[2]),
                        );
                        var xHigh = Math.min(
                           Math.max(rect1[0], rect1[2]),
                           Math.max(rect2[0], rect2[2]),
                        );
                        if (xLow > xHigh) {
                           return null;
                        }
                        var yLow = Math.max(
                           Math.min(rect1[1], rect1[3]),
                           Math.min(rect2[1], rect2[3]),
                        );
                        var yHigh = Math.min(
                           Math.max(rect1[1], rect1[3]),
                           Math.max(rect2[1], rect2[3]),
                        );
                        if (yLow > yHigh) {
                           return null;
                        }
                        return [xLow, yLow, xHigh, yHigh];
                     },
                  },
                  {
                     key: "bezierBoundingBox",
                     value: function bezierBoundingBox(
                        x0,
                        y0,
                        x1,
                        y1,
                        x2,
                        y2,
                        x3,
                        y3,
                        minMax,
                     ) {
                        if (minMax) {
                           minMax[0] = Math.min(minMax[0], x0, x3);
                           minMax[1] = Math.min(minMax[1], y0, y3);
                           minMax[2] = Math.max(minMax[2], x0, x3);
                           minMax[3] = Math.max(minMax[3], y0, y3);
                        } else {
                           minMax = [
                              Math.min(x0, x3),
                              Math.min(y0, y3),
                              Math.max(x0, x3),
                              Math.max(y0, y3),
                           ];
                        }
                        _assertClassBrand(_Util, this, _getExtremum).call(
                           this,
                           x0,
                           x1,
                           x2,
                           x3,
                           y0,
                           y1,
                           y2,
                           y3,
                           3 * (-x0 + 3 * (x1 - x2) + x3),
                           6 * (x0 - 2 * x1 + x2),
                           3 * (x1 - x0),
                           minMax,
                        );
                        _assertClassBrand(_Util, this, _getExtremum).call(
                           this,
                           x0,
                           x1,
                           x2,
                           x3,
                           y0,
                           y1,
                           y2,
                           y3,
                           3 * (-y0 + 3 * (y1 - y2) + y3),
                           6 * (y0 - 2 * y1 + y2),
                           3 * (y1 - y0),
                           minMax,
                        );
                        return minMax;
                     },
                  },
               ]);
            })();
            _Util2 = _Util;
            function _getExtremumOnCurve(
               x0,
               x1,
               x2,
               x3,
               y0,
               y1,
               y2,
               y3,
               t,
               minMax,
            ) {
               if (t <= 0 || t >= 1) {
                  return;
               }
               var mt = 1 - t;
               var tt = t * t;
               var ttt = tt * t;
               var x =
                  mt * (mt * (mt * x0 + 3 * t * x1) + 3 * tt * x2) + ttt * x3;
               var y =
                  mt * (mt * (mt * y0 + 3 * t * y1) + 3 * tt * y2) + ttt * y3;
               minMax[0] = Math.min(minMax[0], x);
               minMax[1] = Math.min(minMax[1], y);
               minMax[2] = Math.max(minMax[2], x);
               minMax[3] = Math.max(minMax[3], y);
            }
            function _getExtremum(
               x0,
               x1,
               x2,
               x3,
               y0,
               y1,
               y2,
               y3,
               a,
               b,
               c,
               minMax,
            ) {
               if (Math.abs(a) < 1e-12) {
                  if (Math.abs(b) >= 1e-12) {
                     _assertClassBrand(_Util2, this, _getExtremumOnCurve).call(
                        this,
                        x0,
                        x1,
                        x2,
                        x3,
                        y0,
                        y1,
                        y2,
                        y3,
                        -c / b,
                        minMax,
                     );
                  }
                  return;
               }
               var delta = Math.pow(b, 2) - 4 * c * a;
               if (delta < 0) {
                  return;
               }
               var sqrtDelta = Math.sqrt(delta);
               var a2 = 2 * a;
               _assertClassBrand(_Util2, this, _getExtremumOnCurve).call(
                  this,
                  x0,
                  x1,
                  x2,
                  x3,
                  y0,
                  y1,
                  y2,
                  y3,
                  (-b + sqrtDelta) / a2,
                  minMax,
               );
               _assertClassBrand(_Util2, this, _getExtremumOnCurve).call(
                  this,
                  x0,
                  x1,
                  x2,
                  x3,
                  y0,
                  y1,
                  y2,
                  y3,
                  (-b - sqrtDelta) / a2,
                  minMax,
               );
            }
            var PDFStringTranslateTable =
               /* unused pure expression or super */ null && [
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0x2d8, 0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da,
                  0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020,
                  0x2021, 0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203a,
                  0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018, 0x2019,
                  0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178,
                  0x17d, 0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac,
               ];
            function stringToPDFString(str) {
               if (str[0] >= "\xEF") {
                  var encoding;
                  if (str[0] === "\xFE" && str[1] === "\xFF") {
                     encoding = "utf-16be";
                     if (str.length % 2 === 1) {
                        str = str.slice(0, -1);
                     }
                  } else if (str[0] === "\xFF" && str[1] === "\xFE") {
                     encoding = "utf-16le";
                     if (str.length % 2 === 1) {
                        str = str.slice(0, -1);
                     }
                  } else if (
                     str[0] === "\xEF" &&
                     str[1] === "\xBB" &&
                     str[2] === "\xBF"
                  ) {
                     encoding = "utf-8";
                  }
                  if (encoding) {
                     try {
                        var decoder = new TextDecoder(encoding, {
                           fatal: true,
                        });
                        var buffer = _stringToBytes(str);
                        var decoded = decoder.decode(buffer);
                        if (!decoded.includes("\x1b")) {
                           return decoded;
                        }
                        return decoded.replaceAll(
                           /\x1b[^\x1b]*(?:\x1b|$)/g,
                           "",
                        );
                     } catch (ex) {
                        _warn('stringToPDFString: "'.concat(ex, '".'));
                     }
                  }
               }
               var strBuf = [];
               for (var i = 0, ii = str.length; i < ii; i++) {
                  var charCode = str.charCodeAt(i);
                  if (charCode === 0x1b) {
                     while (++i < ii && str.charCodeAt(i) !== 0x1b) {}
                     continue;
                  }
                  var code = PDFStringTranslateTable[charCode];
                  strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));
               }
               return strBuf.join("");
            }
            function stringToUTF8String(str) {
               return decodeURIComponent(escape(str));
            }
            function utf8StringToString(str) {
               return unescape(encodeURIComponent(str));
            }
            function isArrayEqual(arr1, arr2) {
               if (arr1.length !== arr2.length) {
                  return false;
               }
               for (var i = 0, ii = arr1.length; i < ii; i++) {
                  if (arr1[i] !== arr2[i]) {
                     return false;
                  }
               }
               return true;
            }
            function getModificationDate() {
               var date =
                  arguments.length > 0 && arguments[0] !== undefined
                     ? arguments[0]
                     : new Date();
               var buffer = [
                  date.getUTCFullYear().toString(),
                  (date.getUTCMonth() + 1).toString().padStart(2, "0"),
                  date.getUTCDate().toString().padStart(2, "0"),
                  date.getUTCHours().toString().padStart(2, "0"),
                  date.getUTCMinutes().toString().padStart(2, "0"),
                  date.getUTCSeconds().toString().padStart(2, "0"),
               ];
               return buffer.join("");
            }
            var NormalizeRegex = null;
            var NormalizationMap = null;
            function _normalizeUnicode(str) {
               if (!NormalizeRegex) {
                  NormalizeRegex =
                     /([\xA0\xB5\u037E\u0EB3\u2000-\u200A\u202F\u2126\uFB00-\uFB04\uFB06\uFB20-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBA1\uFBA4-\uFBA9\uFBAE-\uFBB1\uFBD3-\uFBDC\uFBDE-\uFBE7\uFBEA-\uFBF8\uFBFC\uFBFD\uFC00-\uFC5D\uFC64-\uFCF1\uFCF5-\uFD3D\uFD88\uFDF4\uFDFA\uFDFB\uFE71\uFE77\uFE79\uFE7B\uFE7D]+)|(\uFB05+)/g;
                  NormalizationMap = new Map([["ﬅ", "ſt"]]);
               }
               return str.replaceAll(NormalizeRegex, function (_, p1, p2) {
                  return p1 ? p1.normalize("NFKC") : NormalizationMap.get(p2);
               });
            }
            function _getUuid() {
               var _crypto, _crypto2;
               if (
                  typeof crypto !== "undefined" &&
                  typeof ((_crypto = crypto) === null || _crypto === void 0
                     ? void 0
                     : _crypto.randomUUID) === "function"
               ) {
                  return crypto.randomUUID();
               }
               var buf = new Uint8Array(32);
               if (
                  typeof crypto !== "undefined" &&
                  typeof ((_crypto2 = crypto) === null || _crypto2 === void 0
                     ? void 0
                     : _crypto2.getRandomValues) === "function"
               ) {
                  crypto.getRandomValues(buf);
               } else {
                  for (var i = 0; i < 32; i++) {
                     buf[i] = Math.floor(Math.random() * 255);
                  }
               }
               return _bytesToString(buf);
            }
            var _AnnotationPrefix = "pdfjs_internal_id_";
            var _FontRenderOps = {
               BEZIER_CURVE_TO: 0,
               MOVE_TO: 1,
               LINE_TO: 2,
               QUADRATIC_CURVE_TO: 3,
               RESTORE: 4,
               SAVE: 5,
               SCALE: 6,
               TRANSFORM: 7,
               TRANSLATE: 8,
            }; /***/
         } /******/,
      }; /************************************************************************/ /******/ // The module cache
      /******/ var __webpack_module_cache__ = {}; /******/ /******/ // The require function
      /******/ function __webpack_require__(moduleId) {
         /******/ // Check if module is in cache
         /******/ var cachedModule = __webpack_module_cache__[moduleId];
         /******/ if (cachedModule !== undefined) {
            /******/ return cachedModule.exports; /******/
         } /******/ // Create a new module (and put it into the cache)
         /******/ var module = (__webpack_module_cache__[moduleId] = {
            /******/ // no module.id needed
            /******/ // no module.loaded needed
            /******/ exports: {} /******/,
         }); /******/ /******/ // Execute the module function
         /******/ __webpack_modules__[moduleId](
            module,
            module.exports,
            __webpack_require__,
         ); /******/ /******/ // Return the exports of the module
         /******/ return module.exports; /******/
      }
      /******/ /************************************************************************/ /******/ /* webpack/runtime/async module */ /******/ (function () {
         /******/ var webpackQueues =
            typeof Symbol === "function"
               ? Symbol("webpack queues")
               : "__webpack_queues__";
         /******/ var webpackExports =
            typeof Symbol === "function"
               ? Symbol("webpack exports")
               : "__webpack_exports__";
         /******/ var webpackError =
            typeof Symbol === "function"
               ? Symbol("webpack error")
               : "__webpack_error__";
         /******/ var resolveQueue = function resolveQueue(queue) {
            /******/ if (queue && queue.d < 1) {
               /******/ queue.d = 1;
               /******/ queue.forEach(function (fn) {
                  return fn.r--;
               });
               /******/ queue.forEach(function (fn) {
                  return fn.r-- ? fn.r++ : fn();
               }); /******/
            } /******/
         };
         /******/ var wrapDeps = function wrapDeps(deps) {
            return deps.map(function (dep) {
               /******/ if (dep !== null && _typeof(dep) === "object") {
                  /******/ if (dep[webpackQueues]) return dep;
                  /******/ if (dep.then) {
                     /******/ var queue = [];
                     /******/ queue.d = 0;
                     /******/ dep.then(
                        function (r) {
                           /******/ obj[webpackExports] = r;
                           /******/ resolveQueue(queue); /******/
                        },
                        function (e) {
                           /******/ obj[webpackError] = e;
                           /******/ resolveQueue(queue); /******/
                        },
                     );
                     /******/ var obj = {};
                     /******/ obj[webpackQueues] = function (fn) {
                        return fn(queue);
                     };
                     /******/ return obj; /******/
                  } /******/
               }
               /******/ var ret = {};
               /******/ ret[webpackQueues] = function (x) {};
               /******/ ret[webpackExports] = dep;
               /******/ return ret; /******/
            });
         };
         /******/ __webpack_require__.a = function (module, body, hasAwait) {
            /******/ var queue;
            /******/ hasAwait && ((queue = []).d = -1);
            /******/ var depQueues = new Set();
            /******/ var exports = module.exports;
            /******/ var currentDeps;
            /******/ var outerResolve;
            /******/ var reject;
            /******/ var promise = new Promise(function (resolve, rej) {
               /******/ reject = rej;
               /******/ outerResolve = resolve; /******/
            });
            /******/ promise[webpackExports] = exports;
            /******/ promise[webpackQueues] = function (fn) {
               return (
                  queue && fn(queue),
                  depQueues.forEach(fn),
                  promise["catch"](function (x) {})
               );
            };
            /******/ module.exports = promise;
            /******/ body(
               function (deps) {
                  /******/ currentDeps = wrapDeps(deps);
                  /******/ var fn;
                  /******/ var getResult = function getResult() {
                     return currentDeps.map(function (d) {
                        /******/ if (d[webpackError]) throw d[webpackError];
                        /******/ return d[webpackExports]; /******/
                     });
                  };
                  /******/ var promise = new Promise(function (resolve) {
                     /******/ fn = function fn() {
                        return resolve(getResult);
                     };
                     /******/ fn.r = 0;
                     /******/ var fnQueue = function fnQueue(q) {
                        return (
                           q !== queue &&
                           !depQueues.has(q) &&
                           (depQueues.add(q), q && !q.d && (fn.r++, q.push(fn)))
                        );
                     };
                     /******/ currentDeps.map(function (dep) {
                        return dep[webpackQueues](fnQueue);
                     }); /******/
                  });
                  /******/ return fn.r ? promise : getResult(); /******/
               },
               function (err) {
                  return (
                     err
                        ? reject((promise[webpackError] = err))
                        : outerResolve(exports),
                     resolveQueue(queue)
                  );
               },
            );
            /******/ queue && queue.d < 0 && (queue.d = 0); /******/
         }; /******/
      })();
      /******/ /******/ /* webpack/runtime/define property getters */ /******/ (function () {
         /******/ // define getter functions for harmony exports
         /******/ __webpack_require__.d = function (exports, definition) {
            /******/ for (var key in definition) {
               /******/ if (
                  __webpack_require__.o(definition, key) &&
                  !__webpack_require__.o(exports, key)
               ) {
                  /******/ Object.defineProperty(exports, key, {
                     enumerable: true,
                     get: definition[key],
                  }); /******/
               } /******/
            } /******/
         }; /******/
      })();
      /******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/ (function () {
         /******/ __webpack_require__.o = function (obj, prop) {
            return Object.prototype.hasOwnProperty.call(obj, prop);
         }; /******/
      })(); /******/ /************************************************************************/ /******/ /******/ // startup
      /******/ // Load entry module and return exports
      /******/ // This entry module used 'module' so it can't be inlined
      /******/ var __webpack_exports__ = __webpack_require__(228);
      /******/ __webpack_exports__ = window.pdfjsLib = __webpack_exports__;
      /******/ var __webpack_exports__AbortException =
         (_exports.AbortException = __webpack_exports__.AbortException);
      /******/ var __webpack_exports__AnnotationEditorLayer =
         (_exports.AnnotationEditorLayer =
            __webpack_exports__.AnnotationEditorLayer);
      /******/ var __webpack_exports__AnnotationEditorParamsType =
         (_exports.AnnotationEditorParamsType =
            __webpack_exports__.AnnotationEditorParamsType);
      /******/ var __webpack_exports__AnnotationEditorType =
         (_exports.AnnotationEditorType =
            __webpack_exports__.AnnotationEditorType);
      /******/ var __webpack_exports__AnnotationEditorUIManager =
         (_exports.AnnotationEditorUIManager =
            __webpack_exports__.AnnotationEditorUIManager);
      /******/ var __webpack_exports__AnnotationLayer =
         (_exports.AnnotationLayer = __webpack_exports__.AnnotationLayer);
      /******/ var __webpack_exports__AnnotationMode =
         (_exports.AnnotationMode = __webpack_exports__.AnnotationMode);
      /******/ var __webpack_exports__CMapCompressionType =
         (_exports.CMapCompressionType =
            __webpack_exports__.CMapCompressionType);
      /******/ var __webpack_exports__ColorPicker = (_exports.ColorPicker =
         __webpack_exports__.ColorPicker);
      /******/ var __webpack_exports__DOMSVGFactory = (_exports.DOMSVGFactory =
         __webpack_exports__.DOMSVGFactory);
      /******/ var __webpack_exports__DrawLayer = (_exports.DrawLayer =
         __webpack_exports__.DrawLayer);
      /******/ var __webpack_exports__FeatureTest = (_exports.FeatureTest =
         __webpack_exports__.FeatureTest);
      /******/ var __webpack_exports__GlobalWorkerOptions =
         (_exports.GlobalWorkerOptions =
            __webpack_exports__.GlobalWorkerOptions);
      /******/ var __webpack_exports__ImageKind = (_exports.ImageKind =
         __webpack_exports__.ImageKind);
      /******/ var __webpack_exports__InvalidPDFException =
         (_exports.InvalidPDFException =
            __webpack_exports__.InvalidPDFException);
      /******/ var __webpack_exports__MissingPDFException =
         (_exports.MissingPDFException =
            __webpack_exports__.MissingPDFException);
      /******/ var __webpack_exports__OPS = (_exports.OPS =
         __webpack_exports__.OPS);
      /******/ var __webpack_exports__Outliner = (_exports.Outliner =
         __webpack_exports__.Outliner);
      /******/ var __webpack_exports__PDFDataRangeTransport =
         (_exports.PDFDataRangeTransport =
            __webpack_exports__.PDFDataRangeTransport);
      /******/ var __webpack_exports__PDFDateString = (_exports.PDFDateString =
         __webpack_exports__.PDFDateString);
      /******/ var __webpack_exports__PDFWorker = (_exports.PDFWorker =
         __webpack_exports__.PDFWorker);
      /******/ var __webpack_exports__PasswordResponses =
         (_exports.PasswordResponses = __webpack_exports__.PasswordResponses);
      /******/ var __webpack_exports__PermissionFlag =
         (_exports.PermissionFlag = __webpack_exports__.PermissionFlag);
      /******/ var __webpack_exports__PixelsPerInch = (_exports.PixelsPerInch =
         __webpack_exports__.PixelsPerInch);
      /******/ var __webpack_exports__RenderingCancelledException =
         (_exports.RenderingCancelledException =
            __webpack_exports__.RenderingCancelledException);
      /******/ var __webpack_exports__UnexpectedResponseException =
         (_exports.UnexpectedResponseException =
            __webpack_exports__.UnexpectedResponseException);
      /******/ var __webpack_exports__Util = (_exports.Util =
         __webpack_exports__.Util);
      /******/ var __webpack_exports__VerbosityLevel =
         (_exports.VerbosityLevel = __webpack_exports__.VerbosityLevel);
      /******/ var __webpack_exports__XfaLayer = (_exports.XfaLayer =
         __webpack_exports__.XfaLayer);
      /******/ var __webpack_exports__build = (_exports.build =
         __webpack_exports__.build);
      /******/ var __webpack_exports__createValidAbsoluteUrl =
         (_exports.createValidAbsoluteUrl =
            __webpack_exports__.createValidAbsoluteUrl);
      /******/ var __webpack_exports__fetchData = (_exports.fetchData =
         __webpack_exports__.fetchData);
      /******/ var __webpack_exports__getDocument = (_exports.getDocument =
         __webpack_exports__.getDocument);
      /******/ var __webpack_exports__getFilenameFromUrl =
         (_exports.getFilenameFromUrl = __webpack_exports__.getFilenameFromUrl);
      /******/ var __webpack_exports__getPdfFilenameFromUrl =
         (_exports.getPdfFilenameFromUrl =
            __webpack_exports__.getPdfFilenameFromUrl);
      /******/ var __webpack_exports__getXfaPageViewport =
         (_exports.getXfaPageViewport = __webpack_exports__.getXfaPageViewport);
      /******/ var __webpack_exports__isDataScheme = (_exports.isDataScheme =
         __webpack_exports__.isDataScheme);
      /******/ var __webpack_exports__isPdfFile = (_exports.isPdfFile =
         __webpack_exports__.isPdfFile);
      /******/ var __webpack_exports__noContextMenu = (_exports.noContextMenu =
         __webpack_exports__.noContextMenu);
      /******/ var __webpack_exports__normalizeUnicode =
         (_exports.normalizeUnicode = __webpack_exports__.normalizeUnicode);
      /******/ var __webpack_exports__renderTextLayer =
         (_exports.renderTextLayer = __webpack_exports__.renderTextLayer);
      /******/ var __webpack_exports__setLayerDimensions =
         (_exports.setLayerDimensions = __webpack_exports__.setLayerDimensions);
      /******/ var __webpack_exports__shadow = (_exports.shadow =
         __webpack_exports__.shadow);
      /******/ var __webpack_exports__updateTextLayer =
         (_exports.updateTextLayer = __webpack_exports__.updateTextLayer);
      /******/ var __webpack_exports__version = (_exports.version =
         __webpack_exports__.version); /******/ /******/
   },
);
window.pdfjsLib = module.exports;
