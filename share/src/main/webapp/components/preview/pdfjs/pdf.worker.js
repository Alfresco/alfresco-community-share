(function (global, factory) {
   if (typeof define === "function" && define.amd) {
      define(["exports"], factory);
   } else if (typeof exports !== "undefined") {
      factory(exports);
   } else {
      var mod = { exports: {} };
      factory(mod.exports);
      global.pdfWorker = mod.exports;
   }
})(
   typeof globalThis !== "undefined"
      ? globalThis
      : typeof self !== "undefined"
         ? self
         : this,
   function (_exports) {
      "use strict";
      Object.defineProperty(_exports, "__esModule", { value: true });
      _exports.WorkerMessageHandler = void 0;
      var _Util, _OperatorList, _StructTreeRoot;
      function _superPropGet(t, o, e, r) {
         var p = _get(_getPrototypeOf(1 & r ? t.prototype : t), o, e);
         return 2 & r && "function" == typeof p
            ? function (t) {
               return p.apply(e, t);
            }
            : p;
      }
      function _get() {
         return (
            (_get =
               "undefined" != typeof Reflect && Reflect.get
                  ? Reflect.get.bind()
                  : function (e, t, r) {
                     var p = _superPropBase(e, t);
                     if (p) {
                        var n = Object.getOwnPropertyDescriptor(p, t);
                        return n.get
                           ? n.get.call(arguments.length < 3 ? e : r)
                           : n.value;
                     }
                  }),
               _get.apply(null, arguments)
         );
      }
      function _superPropBase(t, o) {
         for (
            ;
            !{}.hasOwnProperty.call(t, o) && null !== (t = _getPrototypeOf(t));

         );
         return t;
      }
      function _toArray(r) {
         return (
            _arrayWithHoles(r) ||
            _iterableToArray(r) ||
            _unsupportedIterableToArray(r) ||
            _nonIterableRest()
         );
      }
      function _classPrivateFieldInitSpec(e, t, a) {
         (_checkPrivateRedeclaration(e, t), t.set(e, a));
      }
      function _classPrivateFieldGet(s, a) {
         return s.get(_assertClassBrand(s, a));
      }
      function _classPrivateFieldSet(s, a, r) {
         return (s.set(_assertClassBrand(s, a), r), r);
      }
      function _readOnlyError(r) {
         throw new TypeError('"' + r + '" is read-only');
      }
      function _regeneratorValues(e) {
         if (null != e) {
            var t =
                  e[("function" == typeof Symbol && Symbol.iterator) || "@@iterator"],
               r = 0;
            if (t) return t.call(e);
            if ("function" == typeof e.next) return e;
            if (!isNaN(e.length))
               return {
                  next: function next() {
                     return (
                        e && r >= e.length && (e = void 0),
                           { value: e && e[r++], done: !e }
                     );
                  },
               };
         }
         throw new TypeError(_typeof(e) + " is not iterable");
      }
      function _defineProperty(e, r, t) {
         return (
            (r = _toPropertyKey(r)) in e
               ? Object.defineProperty(e, r, {
                  value: t,
                  enumerable: !0,
                  configurable: !0,
                  writable: !0,
               })
               : (e[r] = t),
               e
         );
      }
      function _toConsumableArray(r) {
         return (
            _arrayWithoutHoles(r) ||
            _iterableToArray(r) ||
            _unsupportedIterableToArray(r) ||
            _nonIterableSpread()
         );
      }
      function _nonIterableSpread() {
         throw new TypeError(
            "Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
         );
      }
      function _iterableToArray(r) {
         if (
            ("undefined" != typeof Symbol && null != r[Symbol.iterator]) ||
            null != r["@@iterator"]
         )
            return Array.from(r);
      }
      function _arrayWithoutHoles(r) {
         if (Array.isArray(r)) return _arrayLikeToArray(r);
      }
      function _classPrivateMethodInitSpec(e, a) {
         (_checkPrivateRedeclaration(e, a), a.add(e));
      }
      function _checkPrivateRedeclaration(e, t) {
         if (t.has(e))
            throw new TypeError(
               "Cannot initialize the same private elements twice on an object",
            );
      }
      var _marked = /*#__PURE__*/ _regenerator().m(codePointIter),
         _marked2 = /*#__PURE__*/ _regenerator().m(getContainedChildren);
      function _regenerator() {
         /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */ var e,
            t,
            r = "function" == typeof Symbol ? Symbol : {},
            n = r.iterator || "@@iterator",
            o = r.toStringTag || "@@toStringTag";
         function i(r, n, o, i) {
            var c = n && n.prototype instanceof Generator ? n : Generator,
               u = Object.create(c.prototype);
            return (
               _regeneratorDefine2(
                  u,
                  "_invoke",
                  (function (r, n, o) {
                     var i,
                        c,
                        u,
                        f = 0,
                        p = o || [],
                        y = !1,
                        G = {
                           p: 0,
                           n: 0,
                           v: e,
                           a: d,
                           f: d.bind(e, 4),
                           d: function d(t, r) {
                              return ((i = t), (c = 0), (u = e), (G.n = r), a);
                           },
                        };
                     function d(r, n) {
                        for (c = r, u = n, t = 0; !y && f && !o && t < p.length; t++) {
                           var o,
                              i = p[t],
                              d = G.p,
                              l = i[2];
                           r > 3
                              ? (o = l === n) &&
                              ((u = i[(c = i[4]) ? 5 : ((c = 3), 3)]),
                                 (i[4] = i[5] = e))
                              : i[0] <= d &&
                              ((o = r < 2 && d < i[1])
                                 ? ((c = 0), (G.v = n), (G.n = i[1]))
                                 : d < l &&
                                 (o = r < 3 || i[0] > n || n > l) &&
                                 ((i[4] = r), (i[5] = n), (G.n = l), (c = 0)));
                        }
                        if (o || r > 1) return a;
                        throw ((y = !0), n);
                     }
                     return function (o, p, l) {
                        if (f > 1) throw TypeError("Generator is already running");
                        for (
                           y && 1 === p && d(p, l), c = p, u = l;
                           (t = c < 2 ? e : u) || !y;

                        ) {
                           i ||
                           (c
                              ? c < 3
                                 ? (c > 1 && (G.n = -1), d(c, u))
                                 : (G.n = u)
                              : (G.v = u));
                           try {
                              if (((f = 2), i)) {
                                 if ((c || (o = "next"), (t = i[o]))) {
                                    if (!(t = t.call(i, u)))
                                       throw TypeError("iterator result is not an object");
                                    if (!t.done) return t;
                                    ((u = t.value), c < 2 && (c = 0));
                                 } else
                                    (1 === c && (t = i["return"]) && t.call(i),
                                    c < 2 &&
                                    ((u = TypeError(
                                       "The iterator does not provide a '" +
                                       o +
                                       "' method",
                                    )),
                                       (c = 1)));
                                 i = e;
                              } else if ((t = (y = G.n < 0) ? u : r.call(n, G)) !== a)
                                 break;
                           } catch (t) {
                              ((i = e), (c = 1), (u = t));
                           } finally {
                              f = 1;
                           }
                        }
                        return { value: t, done: y };
                     };
                  })(r, o, i),
                  !0,
               ),
                  u
            );
         }
         var a = {};
         function Generator() {}
         function GeneratorFunction() {}
         function GeneratorFunctionPrototype() {}
         t = Object.getPrototypeOf;
         var c = [][n]
               ? t(t([][n]()))
               : (_regeneratorDefine2((t = {}), n, function () {
                  return this;
               }),
                  t),
            u =
               (GeneratorFunctionPrototype.prototype =
                  Generator.prototype =
                     Object.create(c));
         function f(e) {
            return (
               Object.setPrototypeOf
                  ? Object.setPrototypeOf(e, GeneratorFunctionPrototype)
                  : ((e.__proto__ = GeneratorFunctionPrototype),
                     _regeneratorDefine2(e, o, "GeneratorFunction")),
                  (e.prototype = Object.create(u)),
                  e
            );
         }
         return (
            (GeneratorFunction.prototype = GeneratorFunctionPrototype),
               _regeneratorDefine2(u, "constructor", GeneratorFunctionPrototype),
               _regeneratorDefine2(
                  GeneratorFunctionPrototype,
                  "constructor",
                  GeneratorFunction,
               ),
               (GeneratorFunction.displayName = "GeneratorFunction"),
               _regeneratorDefine2(GeneratorFunctionPrototype, o, "GeneratorFunction"),
               _regeneratorDefine2(u),
               _regeneratorDefine2(u, o, "Generator"),
               _regeneratorDefine2(u, n, function () {
                  return this;
               }),
               _regeneratorDefine2(u, "toString", function () {
                  return "[object Generator]";
               }),
               (_regenerator = function _regenerator() {
                  return { w: i, m: f };
               })()
         );
      }
      function _regeneratorDefine2(e, r, n, t) {
         var i = Object.defineProperty;
         try {
            i({}, "", {});
         } catch (e) {
            i = 0;
         }
         ((_regeneratorDefine2 = function _regeneratorDefine(e, r, n, t) {
            function o(r, n) {
               _regeneratorDefine2(e, r, function (e) {
                  return this._invoke(r, n, e);
               });
            }
            r
               ? i
                  ? i(e, r, {
                     value: n,
                     enumerable: !t,
                     configurable: !t,
                     writable: !t,
                  })
                  : (e[r] = n)
               : (o("next", 0), o("throw", 1), o("return", 2));
         }),
            _regeneratorDefine2(e, r, n, t));
      }
      function asyncGeneratorStep(n, t, e, r, o, a, c) {
         try {
            var i = n[a](c),
               u = i.value;
         } catch (n) {
            return void e(n);
         }
         i.done ? t(u) : Promise.resolve(u).then(r, o);
      }
      function _asyncToGenerator(n) {
         return function () {
            var t = this,
               e = arguments;
            return new Promise(function (r, o) {
               var a = n.apply(t, e);
               function _next(n) {
                  asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
               }
               function _throw(n) {
                  asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
               }
               _next(void 0);
            });
         };
      }
      function _assertClassBrand(e, t, n) {
         if ("function" == typeof e ? e === t : e.has(t))
            return arguments.length < 3 ? t : n;
         throw new TypeError("Private element is not present on this object");
      }
      function _slicedToArray(r, e) {
         return (
            _arrayWithHoles(r) ||
            _iterableToArrayLimit(r, e) ||
            _unsupportedIterableToArray(r, e) ||
            _nonIterableRest()
         );
      }
      function _nonIterableRest() {
         throw new TypeError(
            "Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
         );
      }
      function _iterableToArrayLimit(r, l) {
         var t =
            null == r
               ? null
               : ("undefined" != typeof Symbol && r[Symbol.iterator]) ||
               r["@@iterator"];
         if (null != t) {
            var e,
               n,
               i,
               u,
               a = [],
               f = !0,
               o = !1;
            try {
               if (((i = (t = t.call(r)).next), 0 === l)) {
                  if (Object(t) !== t) return;
                  f = !1;
               } else
                  for (
                     ;
                     !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l);
                     f = !0
                  );
            } catch (r) {
               ((o = !0), (n = r));
            } finally {
               try {
                  if (
                     !f &&
                     null != t["return"] &&
                     ((u = t["return"]()), Object(u) !== u)
                  )
                     return;
               } finally {
                  if (o) throw n;
               }
            }
            return a;
         }
      }
      function _arrayWithHoles(r) {
         if (Array.isArray(r)) return r;
      }
      function _createForOfIteratorHelper(r, e) {
         var t =
            ("undefined" != typeof Symbol && r[Symbol.iterator]) || r["@@iterator"];
         if (!t) {
            if (
               Array.isArray(r) ||
               (t = _unsupportedIterableToArray(r)) ||
               (e && r && "number" == typeof r.length)
            ) {
               t && (r = t);
               var _n = 0,
                  F = function F() {};
               return {
                  s: F,
                  n: function n() {
                     return _n >= r.length
                        ? { done: !0 }
                        : { done: !1, value: r[_n++] };
                  },
                  e: function e(r) {
                     throw r;
                  },
                  f: F,
               };
            }
            throw new TypeError(
               "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.",
            );
         }
         var o,
            a = !0,
            u = !1;
         return {
            s: function s() {
               t = t.call(r);
            },
            n: function n() {
               var r = t.next();
               return ((a = r.done), r);
            },
            e: function e(r) {
               ((u = !0), (o = r));
            },
            f: function f() {
               try {
                  a || null == t["return"] || t["return"]();
               } finally {
                  if (u) throw o;
               }
            },
         };
      }
      function _unsupportedIterableToArray(r, a) {
         if (r) {
            if ("string" == typeof r) return _arrayLikeToArray(r, a);
            var t = {}.toString.call(r).slice(8, -1);
            return (
               "Object" === t && r.constructor && (t = r.constructor.name),
                  "Map" === t || "Set" === t
                     ? Array.from(r)
                     : "Arguments" === t ||
                     /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)
                        ? _arrayLikeToArray(r, a)
                        : void 0
            );
         }
      }
      function _arrayLikeToArray(r, a) {
         (null == a || a > r.length) && (a = r.length);
         for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
         return n;
      }
      function _defineProperties(e, r) {
         for (var t = 0; t < r.length; t++) {
            var o = r[t];
            ((o.enumerable = o.enumerable || !1),
               (o.configurable = !0),
            "value" in o && (o.writable = !0),
               Object.defineProperty(e, _toPropertyKey(o.key), o));
         }
      }
      function _createClass(e, r, t) {
         return (
            r && _defineProperties(e.prototype, r),
            t && _defineProperties(e, t),
               Object.defineProperty(e, "prototype", { writable: !1 }),
               e
         );
      }
      function _toPropertyKey(t) {
         var i = _toPrimitive(t, "string");
         return "symbol" == _typeof(i) ? i : i + "";
      }
      function _toPrimitive(t, r) {
         if ("object" != _typeof(t) || !t) return t;
         var e = t[Symbol.toPrimitive];
         if (void 0 !== e) {
            var i = e.call(t, r || "default");
            if ("object" != _typeof(i)) return i;
            throw new TypeError("@@toPrimitive must return a primitive value.");
         }
         return ("string" === r ? String : Number)(t);
      }
      function _classCallCheck(a, n) {
         if (!(a instanceof n))
            throw new TypeError("Cannot call a class as a function");
      }
      function _callSuper(t, o, e) {
         return (
            (o = _getPrototypeOf(o)),
               _possibleConstructorReturn(
                  t,
                  _isNativeReflectConstruct()
                     ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor)
                     : o.apply(t, e),
               )
         );
      }
      function _possibleConstructorReturn(t, e) {
         if (e && ("object" == _typeof(e) || "function" == typeof e)) return e;
         if (void 0 !== e)
            throw new TypeError(
               "Derived constructors may only return object or undefined",
            );
         return _assertThisInitialized(t);
      }
      function _assertThisInitialized(e) {
         if (void 0 === e)
            throw new ReferenceError(
               "this hasn't been initialised - super() hasn't been called",
            );
         return e;
      }
      function _isNativeReflectConstruct() {
         try {
            var t = !Boolean.prototype.valueOf.call(
               Reflect.construct(Boolean, [], function () {}),
            );
         } catch (t) {}
         return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {
            return !!t;
         })();
      }
      function _getPrototypeOf(t) {
         return (
            (_getPrototypeOf = Object.setPrototypeOf
               ? Object.getPrototypeOf.bind()
               : function (t) {
                  return t.__proto__ || Object.getPrototypeOf(t);
               }),
               _getPrototypeOf(t)
         );
      }
      function _inherits(t, e) {
         if ("function" != typeof e && null !== e)
            throw new TypeError(
               "Super expression must either be null or a function",
            );
         ((t.prototype = Object.create(e && e.prototype, {
            constructor: { value: t, writable: !0, configurable: !0 },
         })),
            Object.defineProperty(t, "prototype", { writable: !1 }),
         e && _setPrototypeOf(t, e));
      }
      function _setPrototypeOf(t, e) {
         return (
            (_setPrototypeOf = Object.setPrototypeOf
               ? Object.setPrototypeOf.bind()
               : function (t, e) {
                  return ((t.__proto__ = e), t);
               }),
               _setPrototypeOf(t, e)
         );
      }
      function _typeof(o) {
         "@babel/helpers - typeof";
         return (
            (_typeof =
               "function" == typeof Symbol && "symbol" == typeof Symbol.iterator
                  ? function (o) {
                     return typeof o;
                  }
                  : function (o) {
                     return o &&
                     "function" == typeof Symbol &&
                     o.constructor === Symbol &&
                     o !== Symbol.prototype
                        ? "symbol"
                        : typeof o;
                  }),
               _typeof(o)
         );
      } /**
       * @licstart The following is the entire license notice for the
       * JavaScript code in this page
       *
       * Copyright 2023 Mozilla Foundation
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *     http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       *
       * @licend The above is the entire license notice for the
       * JavaScript code in this page
       */ /******/ // The require scope
      /******/ var __webpack_require__ = {};
      /******/ /************************************************************************/ /******/ /* webpack/runtime/define property getters */ /******/ (function () {
         /******/ // define getter functions for harmony exports
         /******/ __webpack_require__.d = function (exports, definition) {
            /******/ for (var key in definition) {
               /******/ if (
                  __webpack_require__.o(definition, key) &&
                  !__webpack_require__.o(exports, key)
               ) {
                  /******/ Object.defineProperty(exports, key, {
                     enumerable: true,
                     get: definition[key],
                  }); /******/
               } /******/
            } /******/
         }; /******/
      })();
      /******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/ (function () {
         /******/ __webpack_require__.o = function (obj, prop) {
            return Object.prototype.hasOwnProperty.call(obj, prop);
         }; /******/
      })();
      /******/ /************************************************************************/ var __webpack_exports__ =
         (globalThis.pdfjsWorker = {}); // EXPORTS
      __webpack_require__.d(__webpack_exports__, {
         WorkerMessageHandler: function WorkerMessageHandler() {
            return /* reexport */ _WorkerMessageHandler;
         },
      }); // CONCATENATED MODULE: ./src/shared/util.js
      var isNodeJS =
         (typeof process === "undefined" ? "undefined" : _typeof(process)) ===
         "object" &&
         process + "" === "[object process]" &&
         !process.versions.nw &&
         !(
            process.versions.electron &&
            process.type &&
            process.type !== "browser"
         );
      var IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
      var FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];
      var MAX_IMAGE_SIZE_TO_CACHE = 10e6;
      var LINE_FACTOR = 1.35;
      var LINE_DESCENT_FACTOR = 0.35;
      var BASELINE_FACTOR = LINE_DESCENT_FACTOR / LINE_FACTOR;
      var RenderingIntentFlag = {
         ANY: 0x01,
         DISPLAY: 0x02,
         PRINT: 0x04,
         SAVE: 0x08,
         ANNOTATIONS_FORMS: 0x10,
         ANNOTATIONS_STORAGE: 0x20,
         ANNOTATIONS_DISABLE: 0x40,
         OPLIST: 0x100,
      };
      var AnnotationMode = {
         DISABLE: 0,
         ENABLE: 1,
         ENABLE_FORMS: 2,
         ENABLE_STORAGE: 3,
      };
      var AnnotationEditorPrefix = "pdfjs_internal_editor_";
      var AnnotationEditorType = {
         DISABLE: -1,
         NONE: 0,
         FREETEXT: 3,
         HIGHLIGHT: 9,
         STAMP: 13,
         INK: 15,
      };
      var AnnotationEditorParamsType = {
         RESIZE: 1,
         CREATE: 2,
         FREETEXT_SIZE: 11,
         FREETEXT_COLOR: 12,
         FREETEXT_OPACITY: 13,
         INK_COLOR: 21,
         INK_THICKNESS: 22,
         INK_OPACITY: 23,
         HIGHLIGHT_COLOR: 31,
         HIGHLIGHT_DEFAULT_COLOR: 32,
         HIGHLIGHT_THICKNESS: 33,
         HIGHLIGHT_FREE: 34,
         HIGHLIGHT_SHOW_ALL: 35,
      };
      var PermissionFlag = {
         PRINT: 0x04,
         MODIFY_CONTENTS: 0x08,
         COPY: 0x10,
         MODIFY_ANNOTATIONS: 0x20,
         FILL_INTERACTIVE_FORMS: 0x100,
         COPY_FOR_ACCESSIBILITY: 0x200,
         ASSEMBLE: 0x400,
         PRINT_HIGH_QUALITY: 0x800,
      };
      var TextRenderingMode = {
         FILL: 0,
         STROKE: 1,
         FILL_STROKE: 2,
         INVISIBLE: 3,
         FILL_ADD_TO_PATH: 4,
         STROKE_ADD_TO_PATH: 5,
         FILL_STROKE_ADD_TO_PATH: 6,
         ADD_TO_PATH: 7,
         FILL_STROKE_MASK: 3,
         ADD_TO_PATH_FLAG: 4,
      };
      var ImageKind = { GRAYSCALE_1BPP: 1, RGB_24BPP: 2, RGBA_32BPP: 3 };
      var AnnotationType = {
         TEXT: 1,
         LINK: 2,
         FREETEXT: 3,
         LINE: 4,
         SQUARE: 5,
         CIRCLE: 6,
         POLYGON: 7,
         POLYLINE: 8,
         HIGHLIGHT: 9,
         UNDERLINE: 10,
         SQUIGGLY: 11,
         STRIKEOUT: 12,
         STAMP: 13,
         CARET: 14,
         INK: 15,
         POPUP: 16,
         FILEATTACHMENT: 17,
         SOUND: 18,
         MOVIE: 19,
         WIDGET: 20,
         SCREEN: 21,
         PRINTERMARK: 22,
         TRAPNET: 23,
         WATERMARK: 24,
         THREED: 25,
         REDACT: 26,
      };
      var AnnotationReplyType = { GROUP: "Group", REPLY: "R" };
      var AnnotationFlag = {
         INVISIBLE: 0x01,
         HIDDEN: 0x02,
         PRINT: 0x04,
         NOZOOM: 0x08,
         NOROTATE: 0x10,
         NOVIEW: 0x20,
         READONLY: 0x40,
         LOCKED: 0x80,
         TOGGLENOVIEW: 0x100,
         LOCKEDCONTENTS: 0x200,
      };
      var AnnotationFieldFlag = {
         READONLY: 0x0000001,
         REQUIRED: 0x0000002,
         NOEXPORT: 0x0000004,
         MULTILINE: 0x0001000,
         PASSWORD: 0x0002000,
         NOTOGGLETOOFF: 0x0004000,
         RADIO: 0x0008000,
         PUSHBUTTON: 0x0010000,
         COMBO: 0x0020000,
         EDIT: 0x0040000,
         SORT: 0x0080000,
         FILESELECT: 0x0100000,
         MULTISELECT: 0x0200000,
         DONOTSPELLCHECK: 0x0400000,
         DONOTSCROLL: 0x0800000,
         COMB: 0x1000000,
         RICHTEXT: 0x2000000,
         RADIOSINUNISON: 0x2000000,
         COMMITONSELCHANGE: 0x4000000,
      };
      var AnnotationBorderStyleType = {
         SOLID: 1,
         DASHED: 2,
         BEVELED: 3,
         INSET: 4,
         UNDERLINE: 5,
      };
      var AnnotationActionEventType = {
         E: "Mouse Enter",
         X: "Mouse Exit",
         D: "Mouse Down",
         U: "Mouse Up",
         Fo: "Focus",
         Bl: "Blur",
         PO: "PageOpen",
         PC: "PageClose",
         PV: "PageVisible",
         PI: "PageInvisible",
         K: "Keystroke",
         F: "Format",
         V: "Validate",
         C: "Calculate",
      };
      var DocumentActionEventType = {
         WC: "WillClose",
         WS: "WillSave",
         DS: "DidSave",
         WP: "WillPrint",
         DP: "DidPrint",
      };
      var PageActionEventType = { O: "PageOpen", C: "PageClose" };
      var VerbosityLevel = { ERRORS: 0, WARNINGS: 1, INFOS: 5 };
      var CMapCompressionType = { NONE: 0, BINARY: 1 };
      var OPS = {
         dependency: 1,
         setLineWidth: 2,
         setLineCap: 3,
         setLineJoin: 4,
         setMiterLimit: 5,
         setDash: 6,
         setRenderingIntent: 7,
         setFlatness: 8,
         setGState: 9,
         save: 10,
         restore: 11,
         transform: 12,
         moveTo: 13,
         lineTo: 14,
         curveTo: 15,
         curveTo2: 16,
         curveTo3: 17,
         closePath: 18,
         rectangle: 19,
         stroke: 20,
         closeStroke: 21,
         fill: 22,
         eoFill: 23,
         fillStroke: 24,
         eoFillStroke: 25,
         closeFillStroke: 26,
         closeEOFillStroke: 27,
         endPath: 28,
         clip: 29,
         eoClip: 30,
         beginText: 31,
         endText: 32,
         setCharSpacing: 33,
         setWordSpacing: 34,
         setHScale: 35,
         setLeading: 36,
         setFont: 37,
         setTextRenderingMode: 38,
         setTextRise: 39,
         moveText: 40,
         setLeadingMoveText: 41,
         setTextMatrix: 42,
         nextLine: 43,
         showText: 44,
         showSpacedText: 45,
         nextLineShowText: 46,
         nextLineSetSpacingShowText: 47,
         setCharWidth: 48,
         setCharWidthAndBounds: 49,
         setStrokeColorSpace: 50,
         setFillColorSpace: 51,
         setStrokeColor: 52,
         setStrokeColorN: 53,
         setFillColor: 54,
         setFillColorN: 55,
         setStrokeGray: 56,
         setFillGray: 57,
         setStrokeRGBColor: 58,
         setFillRGBColor: 59,
         setStrokeCMYKColor: 60,
         setFillCMYKColor: 61,
         shadingFill: 62,
         beginInlineImage: 63,
         beginImageData: 64,
         endInlineImage: 65,
         paintXObject: 66,
         markPoint: 67,
         markPointProps: 68,
         beginMarkedContent: 69,
         beginMarkedContentProps: 70,
         endMarkedContent: 71,
         beginCompat: 72,
         endCompat: 73,
         paintFormXObjectBegin: 74,
         paintFormXObjectEnd: 75,
         beginGroup: 76,
         endGroup: 77,
         beginAnnotation: 80,
         endAnnotation: 81,
         paintImageMaskXObject: 83,
         paintImageMaskXObjectGroup: 84,
         paintImageXObject: 85,
         paintInlineImageXObject: 86,
         paintInlineImageXObjectGroup: 87,
         paintImageXObjectRepeat: 88,
         paintImageMaskXObjectRepeat: 89,
         paintSolidColorImageMask: 90,
         constructPath: 91,
      };
      var PasswordResponses = { NEED_PASSWORD: 1, INCORRECT_PASSWORD: 2 };
      var verbosity = VerbosityLevel.WARNINGS;
      function setVerbosityLevel(level) {
         if (Number.isInteger(level)) {
            verbosity = level;
         }
      }
      function getVerbosityLevel() {
         return verbosity;
      }
      function info(msg) {
         if (verbosity >= VerbosityLevel.INFOS) {
            console.log("Info: ".concat(msg));
         }
      }
      function warn(msg) {
         if (verbosity >= VerbosityLevel.WARNINGS) {
            console.log("Warning: ".concat(msg));
         }
      }
      function unreachable(msg) {
         throw new Error(msg);
      }
      function assert(cond, msg) {
         if (!cond) {
            unreachable(msg);
         }
      }
      function _isValidProtocol(url) {
         switch (url === null || url === void 0 ? void 0 : url.protocol) {
            case "http:":
            case "https:":
            case "ftp:":
            case "mailto:":
            case "tel:":
               return true;
            default:
               return false;
         }
      }
      function createValidAbsoluteUrl(url) {
         var baseUrl =
            arguments.length > 1 && arguments[1] !== undefined
               ? arguments[1]
               : null;
         var options =
            arguments.length > 2 && arguments[2] !== undefined
               ? arguments[2]
               : null;
         if (!url) {
            return null;
         }
         try {
            if (options && typeof url === "string") {
               if (options.addDefaultProtocol && url.startsWith("www.")) {
                  var dots = url.match(/\./g);
                  if (
                     (dots === null || dots === void 0 ? void 0 : dots.length) >= 2
                  ) {
                     url = "http://".concat(url);
                  }
               }
               if (options.tryConvertEncoding) {
                  try {
                     url = stringToUTF8String(url);
                  } catch (_unused) {}
               }
            }
            var absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);
            if (_isValidProtocol(absoluteUrl)) {
               return absoluteUrl;
            }
         } catch (_unused2) {}
         return null;
      }
      function shadow(obj, prop, value) {
         var nonSerializable =
            arguments.length > 3 && arguments[3] !== undefined
               ? arguments[3]
               : false;
         Object.defineProperty(obj, prop, {
            value: value,
            enumerable: !nonSerializable,
            configurable: true,
            writable: false,
         });
         return value;
      }
      var BaseException = (function BaseExceptionClosure() {
         function BaseException(message, name) {
            if (this.constructor === BaseException) {
               unreachable("Cannot initialize BaseException.");
            }
            this.message = message;
            this.name = name;
         }
         BaseException.prototype = new Error();
         BaseException.constructor = BaseException;
         return BaseException;
      })();
      var PasswordException = /*#__PURE__*/ (function (_BaseException) {
         function PasswordException(msg, code) {
            var _this;
            _classCallCheck(this, PasswordException);
            _this = _callSuper(this, PasswordException, [msg, "PasswordException"]);
            _this.code = code;
            return _this;
         }
         _inherits(PasswordException, _BaseException);
         return _createClass(PasswordException);
      })(BaseException);
      var UnknownErrorException = /*#__PURE__*/ (function (_BaseException2) {
         function UnknownErrorException(msg, details) {
            var _this2;
            _classCallCheck(this, UnknownErrorException);
            _this2 = _callSuper(this, UnknownErrorException, [
               msg,
               "UnknownErrorException",
            ]);
            _this2.details = details;
            return _this2;
         }
         _inherits(UnknownErrorException, _BaseException2);
         return _createClass(UnknownErrorException);
      })(BaseException);
      var InvalidPDFException = /*#__PURE__*/ (function (_BaseException3) {
         function InvalidPDFException(msg) {
            _classCallCheck(this, InvalidPDFException);
            return _callSuper(this, InvalidPDFException, [
               msg,
               "InvalidPDFException",
            ]);
         }
         _inherits(InvalidPDFException, _BaseException3);
         return _createClass(InvalidPDFException);
      })(BaseException);
      var MissingPDFException = /*#__PURE__*/ (function (_BaseException4) {
         function MissingPDFException(msg) {
            _classCallCheck(this, MissingPDFException);
            return _callSuper(this, MissingPDFException, [
               msg,
               "MissingPDFException",
            ]);
         }
         _inherits(MissingPDFException, _BaseException4);
         return _createClass(MissingPDFException);
      })(BaseException);
      var UnexpectedResponseException = /*#__PURE__*/ (function (
         _BaseException5,
      ) {
         function UnexpectedResponseException(msg, status) {
            var _this3;
            _classCallCheck(this, UnexpectedResponseException);
            _this3 = _callSuper(this, UnexpectedResponseException, [
               msg,
               "UnexpectedResponseException",
            ]);
            _this3.status = status;
            return _this3;
         }
         _inherits(UnexpectedResponseException, _BaseException5);
         return _createClass(UnexpectedResponseException);
      })(BaseException);
      var FormatError = /*#__PURE__*/ (function (_BaseException6) {
         function FormatError(msg) {
            _classCallCheck(this, FormatError);
            return _callSuper(this, FormatError, [msg, "FormatError"]);
         }
         _inherits(FormatError, _BaseException6);
         return _createClass(FormatError);
      })(BaseException);
      var AbortException = /*#__PURE__*/ (function (_BaseException7) {
         function AbortException(msg) {
            _classCallCheck(this, AbortException);
            return _callSuper(this, AbortException, [msg, "AbortException"]);
         }
         _inherits(AbortException, _BaseException7);
         return _createClass(AbortException);
      })(BaseException);
      function bytesToString(bytes) {
         if (
            _typeof(bytes) !== "object" ||
            (bytes === null || bytes === void 0 ? void 0 : bytes.length) ===
            undefined
         ) {
            unreachable("Invalid argument for bytesToString");
         }
         var length = bytes.length;
         var MAX_ARGUMENT_COUNT = 8192;
         if (length < MAX_ARGUMENT_COUNT) {
            return String.fromCharCode.apply(null, bytes);
         }
         var strBuf = [];
         for (var i = 0; i < length; i += MAX_ARGUMENT_COUNT) {
            var chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);
            var chunk = bytes.subarray(i, chunkEnd);
            strBuf.push(String.fromCharCode.apply(null, chunk));
         }
         return strBuf.join("");
      }
      function stringToBytes(str) {
         if (typeof str !== "string") {
            unreachable("Invalid argument for stringToBytes");
         }
         var length = str.length;
         var bytes = new Uint8Array(length);
         for (var i = 0; i < length; ++i) {
            bytes[i] = str.charCodeAt(i) & 0xff;
         }
         return bytes;
      }
      function string32(value) {
         return String.fromCharCode(
            (value >> 24) & 0xff,
            (value >> 16) & 0xff,
            (value >> 8) & 0xff,
            value & 0xff,
         );
      }
      function objectSize(obj) {
         return Object.keys(obj).length;
      }
      function objectFromMap(map) {
         var obj = Object.create(null);
         var _iterator = _createForOfIteratorHelper(map),
            _step;
         try {
            for (_iterator.s(); !(_step = _iterator.n()).done; ) {
               var _step$value = _slicedToArray(_step.value, 2),
                  key = _step$value[0],
                  value = _step$value[1];
               obj[key] = value;
            }
         } catch (err) {
            _iterator.e(err);
         } finally {
            _iterator.f();
         }
         return obj;
      }
      function isLittleEndian() {
         var buffer8 = new Uint8Array(4);
         buffer8[0] = 1;
         var view32 = new Uint32Array(buffer8.buffer, 0, 1);
         return view32[0] === 1;
      }
      function isEvalSupported() {
         try {
            new Function("");
            return true;
         } catch (_unused3) {
            return false;
         }
      }
      var FeatureTest = /*#__PURE__*/ (function () {
         function FeatureTest() {
            _classCallCheck(this, FeatureTest);
         }
         return _createClass(FeatureTest, null, [
            {
               key: "isLittleEndian",
               get: function get() {
                  return shadow(this, "isLittleEndian", isLittleEndian());
               },
            },
            {
               key: "isEvalSupported",
               get: function get() {
                  return shadow(this, "isEvalSupported", isEvalSupported());
               },
            },
            {
               key: "isOffscreenCanvasSupported",
               get: function get() {
                  return shadow(
                     this,
                     "isOffscreenCanvasSupported",
                     typeof OffscreenCanvas !== "undefined",
                  );
               },
            },
            {
               key: "platform",
               get: function get() {
                  var _navigator;
                  if (
                     typeof navigator !== "undefined" &&
                     typeof ((_navigator = navigator) === null || _navigator === void 0
                        ? void 0
                        : _navigator.platform) === "string"
                  ) {
                     return shadow(this, "platform", {
                        isMac: navigator.platform.includes("Mac"),
                     });
                  }
                  return shadow(this, "platform", { isMac: false });
               },
            },
            {
               key: "isCSSRoundSupported",
               get: function get() {
                  var _globalThis$CSS, _globalThis$CSS$suppo;
                  return shadow(
                     this,
                     "isCSSRoundSupported",
                     (_globalThis$CSS = globalThis.CSS) === null ||
                     _globalThis$CSS === void 0 ||
                     (_globalThis$CSS$suppo = _globalThis$CSS.supports) === null ||
                     _globalThis$CSS$suppo === void 0
                        ? void 0
                        : _globalThis$CSS$suppo.call(
                           _globalThis$CSS,
                           "width: round(1.5px, 1px)",
                        ),
                  );
               },
            },
         ]);
      })();
      var hexNumbers = Array.from(Array(256).keys(), function (n) {
         return n.toString(16).padStart(2, "0");
      });
      var Util = /*#__PURE__*/ (function () {
         function Util() {
            _classCallCheck(this, Util);
         }
         return _createClass(Util, null, [
            {
               key: "makeHexColor",
               value: function makeHexColor(r, g, b) {
                  return "#"
                     .concat(hexNumbers[r])
                     .concat(hexNumbers[g])
                     .concat(hexNumbers[b]);
               },
            },
            {
               key: "scaleMinMax",
               value: function scaleMinMax(transform, minMax) {
                  var temp;
                  if (transform[0]) {
                     if (transform[0] < 0) {
                        temp = minMax[0];
                        minMax[0] = minMax[2];
                        minMax[2] = temp;
                     }
                     minMax[0] *= transform[0];
                     minMax[2] *= transform[0];
                     if (transform[3] < 0) {
                        temp = minMax[1];
                        minMax[1] = minMax[3];
                        minMax[3] = temp;
                     }
                     minMax[1] *= transform[3];
                     minMax[3] *= transform[3];
                  } else {
                     temp = minMax[0];
                     minMax[0] = minMax[1];
                     minMax[1] = temp;
                     temp = minMax[2];
                     minMax[2] = minMax[3];
                     minMax[3] = temp;
                     if (transform[1] < 0) {
                        temp = minMax[1];
                        minMax[1] = minMax[3];
                        minMax[3] = temp;
                     }
                     minMax[1] *= transform[1];
                     minMax[3] *= transform[1];
                     if (transform[2] < 0) {
                        temp = minMax[0];
                        minMax[0] = minMax[2];
                        minMax[2] = temp;
                     }
                     minMax[0] *= transform[2];
                     minMax[2] *= transform[2];
                  }
                  minMax[0] += transform[4];
                  minMax[1] += transform[5];
                  minMax[2] += transform[4];
                  minMax[3] += transform[5];
               },
            },
            {
               key: "transform",
               value: function transform(m1, m2) {
                  return [
                     m1[0] * m2[0] + m1[2] * m2[1],
                     m1[1] * m2[0] + m1[3] * m2[1],
                     m1[0] * m2[2] + m1[2] * m2[3],
                     m1[1] * m2[2] + m1[3] * m2[3],
                     m1[0] * m2[4] + m1[2] * m2[5] + m1[4],
                     m1[1] * m2[4] + m1[3] * m2[5] + m1[5],
                  ];
               },
            },
            {
               key: "applyTransform",
               value: function applyTransform(p, m) {
                  var xt = p[0] * m[0] + p[1] * m[2] + m[4];
                  var yt = p[0] * m[1] + p[1] * m[3] + m[5];
                  return [xt, yt];
               },
            },
            {
               key: "applyInverseTransform",
               value: function applyInverseTransform(p, m) {
                  var d = m[0] * m[3] - m[1] * m[2];
                  var xt =
                     (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;
                  var yt =
                     (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;
                  return [xt, yt];
               },
            },
            {
               key: "getAxialAlignedBoundingBox",
               value: function getAxialAlignedBoundingBox(r, m) {
                  var p1 = this.applyTransform(r, m);
                  var p2 = this.applyTransform(r.slice(2, 4), m);
                  var p3 = this.applyTransform([r[0], r[3]], m);
                  var p4 = this.applyTransform([r[2], r[1]], m);
                  return [
                     Math.min(p1[0], p2[0], p3[0], p4[0]),
                     Math.min(p1[1], p2[1], p3[1], p4[1]),
                     Math.max(p1[0], p2[0], p3[0], p4[0]),
                     Math.max(p1[1], p2[1], p3[1], p4[1]),
                  ];
               },
            },
            {
               key: "inverseTransform",
               value: function inverseTransform(m) {
                  var d = m[0] * m[3] - m[1] * m[2];
                  return [
                     m[3] / d,
                     -m[1] / d,
                     -m[2] / d,
                     m[0] / d,
                     (m[2] * m[5] - m[4] * m[3]) / d,
                     (m[4] * m[1] - m[5] * m[0]) / d,
                  ];
               },
            },
            {
               key: "singularValueDecompose2dScale",
               value: function singularValueDecompose2dScale(m) {
                  var transpose = [m[0], m[2], m[1], m[3]];
                  var a = m[0] * transpose[0] + m[1] * transpose[2];
                  var b = m[0] * transpose[1] + m[1] * transpose[3];
                  var c = m[2] * transpose[0] + m[3] * transpose[2];
                  var d = m[2] * transpose[1] + m[3] * transpose[3];
                  var first = (a + d) / 2;
                  var second =
                     Math.sqrt(Math.pow(a + d, 2) - 4 * (a * d - c * b)) / 2;
                  var sx = first + second || 1;
                  var sy = first - second || 1;
                  return [Math.sqrt(sx), Math.sqrt(sy)];
               },
            },
            {
               key: "normalizeRect",
               value: function normalizeRect(rect) {
                  var r = rect.slice(0);
                  if (rect[0] > rect[2]) {
                     r[0] = rect[2];
                     r[2] = rect[0];
                  }
                  if (rect[1] > rect[3]) {
                     r[1] = rect[3];
                     r[3] = rect[1];
                  }
                  return r;
               },
            },
            {
               key: "intersect",
               value: function intersect(rect1, rect2) {
                  var xLow = Math.max(
                     Math.min(rect1[0], rect1[2]),
                     Math.min(rect2[0], rect2[2]),
                  );
                  var xHigh = Math.min(
                     Math.max(rect1[0], rect1[2]),
                     Math.max(rect2[0], rect2[2]),
                  );
                  if (xLow > xHigh) {
                     return null;
                  }
                  var yLow = Math.max(
                     Math.min(rect1[1], rect1[3]),
                     Math.min(rect2[1], rect2[3]),
                  );
                  var yHigh = Math.min(
                     Math.max(rect1[1], rect1[3]),
                     Math.max(rect2[1], rect2[3]),
                  );
                  if (yLow > yHigh) {
                     return null;
                  }
                  return [xLow, yLow, xHigh, yHigh];
               },
            },
            {
               key: "bezierBoundingBox",
               value: function bezierBoundingBox(
                  x0,
                  y0,
                  x1,
                  y1,
                  x2,
                  y2,
                  x3,
                  y3,
                  minMax,
               ) {
                  if (minMax) {
                     minMax[0] = Math.min(minMax[0], x0, x3);
                     minMax[1] = Math.min(minMax[1], y0, y3);
                     minMax[2] = Math.max(minMax[2], x0, x3);
                     minMax[3] = Math.max(minMax[3], y0, y3);
                  } else {
                     minMax = [
                        Math.min(x0, x3),
                        Math.min(y0, y3),
                        Math.max(x0, x3),
                        Math.max(y0, y3),
                     ];
                  }
                  _assertClassBrand(Util, this, _getExtremum).call(
                     this,
                     x0,
                     x1,
                     x2,
                     x3,
                     y0,
                     y1,
                     y2,
                     y3,
                     3 * (-x0 + 3 * (x1 - x2) + x3),
                     6 * (x0 - 2 * x1 + x2),
                     3 * (x1 - x0),
                     minMax,
                  );
                  _assertClassBrand(Util, this, _getExtremum).call(
                     this,
                     x0,
                     x1,
                     x2,
                     x3,
                     y0,
                     y1,
                     y2,
                     y3,
                     3 * (-y0 + 3 * (y1 - y2) + y3),
                     6 * (y0 - 2 * y1 + y2),
                     3 * (y1 - y0),
                     minMax,
                  );
                  return minMax;
               },
            },
         ]);
      })();
      _Util = Util;
      function _getExtremumOnCurve(x0, x1, x2, x3, y0, y1, y2, y3, t, minMax) {
         if (t <= 0 || t >= 1) {
            return;
         }
         var mt = 1 - t;
         var tt = t * t;
         var ttt = tt * t;
         var x = mt * (mt * (mt * x0 + 3 * t * x1) + 3 * tt * x2) + ttt * x3;
         var y = mt * (mt * (mt * y0 + 3 * t * y1) + 3 * tt * y2) + ttt * y3;
         minMax[0] = Math.min(minMax[0], x);
         minMax[1] = Math.min(minMax[1], y);
         minMax[2] = Math.max(minMax[2], x);
         minMax[3] = Math.max(minMax[3], y);
      }
      function _getExtremum(x0, x1, x2, x3, y0, y1, y2, y3, a, b, c, minMax) {
         if (Math.abs(a) < 1e-12) {
            if (Math.abs(b) >= 1e-12) {
               _assertClassBrand(_Util, this, _getExtremumOnCurve).call(
                  this,
                  x0,
                  x1,
                  x2,
                  x3,
                  y0,
                  y1,
                  y2,
                  y3,
                  -c / b,
                  minMax,
               );
            }
            return;
         }
         var delta = Math.pow(b, 2) - 4 * c * a;
         if (delta < 0) {
            return;
         }
         var sqrtDelta = Math.sqrt(delta);
         var a2 = 2 * a;
         _assertClassBrand(_Util, this, _getExtremumOnCurve).call(
            this,
            x0,
            x1,
            x2,
            x3,
            y0,
            y1,
            y2,
            y3,
            (-b + sqrtDelta) / a2,
            minMax,
         );
         _assertClassBrand(_Util, this, _getExtremumOnCurve).call(
            this,
            x0,
            x1,
            x2,
            x3,
            y0,
            y1,
            y2,
            y3,
            (-b - sqrtDelta) / a2,
            minMax,
         );
      }
      var PDFStringTranslateTable = [
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0x2d8, 0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021,
         0x2026, 0x2014, 0x2013, 0x192, 0x2044, 0x2039, 0x203a, 0x2212, 0x2030,
         0x201e, 0x201c, 0x201d, 0x2018, 0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02,
         0x141, 0x152, 0x160, 0x178, 0x17d, 0x131, 0x142, 0x153, 0x161, 0x17e, 0,
         0x20ac,
      ];
      function stringToPDFString(str) {
         if (str[0] >= "\xEF") {
            var encoding;
            if (str[0] === "\xFE" && str[1] === "\xFF") {
               encoding = "utf-16be";
               if (str.length % 2 === 1) {
                  str = str.slice(0, -1);
               }
            } else if (str[0] === "\xFF" && str[1] === "\xFE") {
               encoding = "utf-16le";
               if (str.length % 2 === 1) {
                  str = str.slice(0, -1);
               }
            } else if (
               str[0] === "\xEF" &&
               str[1] === "\xBB" &&
               str[2] === "\xBF"
            ) {
               encoding = "utf-8";
            }
            if (encoding) {
               try {
                  var decoder = new TextDecoder(encoding, { fatal: true });
                  var buffer = stringToBytes(str);
                  var decoded = decoder.decode(buffer);
                  if (!decoded.includes("\x1b")) {
                     return decoded;
                  }
                  return decoded.replaceAll(/\x1b[^\x1b]*(?:\x1b|$)/g, "");
               } catch (ex) {
                  warn('stringToPDFString: "'.concat(ex, '".'));
               }
            }
         }
         var strBuf = [];
         for (var i = 0, ii = str.length; i < ii; i++) {
            var charCode = str.charCodeAt(i);
            if (charCode === 0x1b) {
               while (++i < ii && str.charCodeAt(i) !== 0x1b) {}
               continue;
            }
            var code = PDFStringTranslateTable[charCode];
            strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));
         }
         return strBuf.join("");
      }
      function stringToUTF8String(str) {
         return decodeURIComponent(escape(str));
      }
      function utf8StringToString(str) {
         return unescape(encodeURIComponent(str));
      }
      function isArrayEqual(arr1, arr2) {
         if (arr1.length !== arr2.length) {
            return false;
         }
         for (var i = 0, ii = arr1.length; i < ii; i++) {
            if (arr1[i] !== arr2[i]) {
               return false;
            }
         }
         return true;
      }
      function getModificationDate() {
         var date =
            arguments.length > 0 && arguments[0] !== undefined
               ? arguments[0]
               : new Date();
         var buffer = [
            date.getUTCFullYear().toString(),
            (date.getUTCMonth() + 1).toString().padStart(2, "0"),
            date.getUTCDate().toString().padStart(2, "0"),
            date.getUTCHours().toString().padStart(2, "0"),
            date.getUTCMinutes().toString().padStart(2, "0"),
            date.getUTCSeconds().toString().padStart(2, "0"),
         ];
         return buffer.join("");
      }
      var NormalizeRegex = null;
      var NormalizationMap = null;
      function normalizeUnicode(str) {
         if (!NormalizeRegex) {
            NormalizeRegex =
               /([\xA0\xB5\u037E\u0EB3\u2000-\u200A\u202F\u2126\uFB00-\uFB04\uFB06\uFB20-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBA1\uFBA4-\uFBA9\uFBAE-\uFBB1\uFBD3-\uFBDC\uFBDE-\uFBE7\uFBEA-\uFBF8\uFBFC\uFBFD\uFC00-\uFC5D\uFC64-\uFCF1\uFCF5-\uFD3D\uFD88\uFDF4\uFDFA\uFDFB\uFE71\uFE77\uFE79\uFE7B\uFE7D]+)|(\uFB05+)/g;
            NormalizationMap = new Map([["ﬅ", "ſt"]]);
         }
         return str.replaceAll(NormalizeRegex, function (_, p1, p2) {
            return p1 ? p1.normalize("NFKC") : NormalizationMap.get(p2);
         });
      }
      function getUuid() {
         var _crypto, _crypto2;
         if (
            typeof crypto !== "undefined" &&
            typeof ((_crypto = crypto) === null || _crypto === void 0
               ? void 0
               : _crypto.randomUUID) === "function"
         ) {
            return crypto.randomUUID();
         }
         var buf = new Uint8Array(32);
         if (
            typeof crypto !== "undefined" &&
            typeof ((_crypto2 = crypto) === null || _crypto2 === void 0
               ? void 0
               : _crypto2.getRandomValues) === "function"
         ) {
            crypto.getRandomValues(buf);
         } else {
            for (var i = 0; i < 32; i++) {
               buf[i] = Math.floor(Math.random() * 255);
            }
         }
         return bytesToString(buf);
      }
      var AnnotationPrefix = "pdfjs_internal_id_";
      var FontRenderOps = {
         BEZIER_CURVE_TO: 0,
         MOVE_TO: 1,
         LINE_TO: 2,
         QUADRATIC_CURVE_TO: 3,
         RESTORE: 4,
         SAVE: 5,
         SCALE: 6,
         TRANSFORM: 7,
         TRANSLATE: 8,
      }; // CONCATENATED MODULE: ./src/core/primitives.js
      var CIRCULAR_REF = Symbol("CIRCULAR_REF");
      var EOF = Symbol("EOF");
      var CmdCache = Object.create(null);
      var NameCache = Object.create(null);
      var RefCache = Object.create(null);
      function clearPrimitiveCaches() {
         CmdCache = Object.create(null);
         NameCache = Object.create(null);
         RefCache = Object.create(null);
      }
      var Name = /*#__PURE__*/ (function () {
         function Name(name) {
            _classCallCheck(this, Name);
            this.name = name;
         }
         return _createClass(Name, null, [
            {
               key: "get",
               value: function get(name) {
                  var _NameCache;
                  return (
                     (_NameCache = NameCache)[name] ||
                     (_NameCache[name] = new Name(name))
                  );
               },
            },
         ]);
      })();
      var Cmd = /*#__PURE__*/ (function () {
         function Cmd(cmd) {
            _classCallCheck(this, Cmd);
            this.cmd = cmd;
         }
         return _createClass(Cmd, null, [
            {
               key: "get",
               value: function get(cmd) {
                  var _CmdCache;
                  return (
                     (_CmdCache = CmdCache)[cmd] || (_CmdCache[cmd] = new Cmd(cmd))
                  );
               },
            },
         ]);
      })();
      var nonSerializable = function nonSerializableClosure() {
         return nonSerializable;
      };
      var Dict = /*#__PURE__*/ (function () {
         function Dict() {
            var xref =
               arguments.length > 0 && arguments[0] !== undefined
                  ? arguments[0]
                  : null;
            _classCallCheck(this, Dict);
            this._map = Object.create(null);
            this.xref = xref;
            this.objId = null;
            this.suppressEncryption = false;
            this.__nonSerializable__ = nonSerializable;
         }
         return _createClass(
            Dict,
            [
               {
                  key: "assignXref",
                  value: function assignXref(newXref) {
                     this.xref = newXref;
                  },
               },
               {
                  key: "size",
                  get: function get() {
                     return Object.keys(this._map).length;
                  },
               },
               {
                  key: "get",
                  value: function get(key1, key2, key3) {
                     var value = this._map[key1];
                     if (value === undefined && key2 !== undefined) {
                        value = this._map[key2];
                        if (value === undefined && key3 !== undefined) {
                           value = this._map[key3];
                        }
                     }
                     if (value instanceof Ref && this.xref) {
                        return this.xref.fetch(value, this.suppressEncryption);
                     }
                     return value;
                  },
               },
               {
                  key: "getAsync",
                  value: (function () {
                     var _getAsync = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(
                           function _callee(key1, key2, key3) {
                              var value;
                              return _regenerator().w(
                                 function (_context) {
                                    while (1)
                                       switch (_context.n) {
                                          case 0:
                                             value = this._map[key1];
                                             if (value === undefined && key2 !== undefined) {
                                                value = this._map[key2];
                                                if (value === undefined && key3 !== undefined) {
                                                   value = this._map[key3];
                                                }
                                             }
                                             if (!(value instanceof Ref && this.xref)) {
                                                _context.n = 1;
                                                break;
                                             }
                                             return _context.a(
                                                2,
                                                this.xref.fetchAsync(
                                                   value,
                                                   this.suppressEncryption,
                                                ),
                                             );
                                          case 1:
                                             return _context.a(2, value);
                                       }
                                 },
                                 _callee,
                                 this,
                              );
                           },
                        ),
                     );
                     function getAsync(_x, _x2, _x3) {
                        return _getAsync.apply(this, arguments);
                     }
                     return getAsync;
                  })(),
               },
               {
                  key: "getArray",
                  value: function getArray(key1, key2, key3) {
                     var value = this._map[key1];
                     if (value === undefined && key2 !== undefined) {
                        value = this._map[key2];
                        if (value === undefined && key3 !== undefined) {
                           value = this._map[key3];
                        }
                     }
                     if (value instanceof Ref && this.xref) {
                        value = this.xref.fetch(value, this.suppressEncryption);
                     }
                     if (Array.isArray(value)) {
                        value = value.slice();
                        for (var i = 0, ii = value.length; i < ii; i++) {
                           if (value[i] instanceof Ref && this.xref) {
                              value[i] = this.xref.fetch(
                                 value[i],
                                 this.suppressEncryption,
                              );
                           }
                        }
                     }
                     return value;
                  },
               },
               {
                  key: "getRaw",
                  value: function getRaw(key) {
                     return this._map[key];
                  },
               },
               {
                  key: "getKeys",
                  value: function getKeys() {
                     return Object.keys(this._map);
                  },
               },
               {
                  key: "getRawValues",
                  value: function getRawValues() {
                     return Object.values(this._map);
                  },
               },
               {
                  key: "set",
                  value: function set(key, value) {
                     this._map[key] = value;
                  },
               },
               {
                  key: "has",
                  value: function has(key) {
                     return this._map[key] !== undefined;
                  },
               },
               {
                  key: "forEach",
                  value: function forEach(callback) {
                     for (var key in this._map) {
                        callback(key, this.get(key));
                     }
                  },
               },
               {
                  key: "clone",
                  value: function clone() {
                     var dict = new Dict(this.xref);
                     var _iterator2 = _createForOfIteratorHelper(this.getKeys()),
                        _step2;
                     try {
                        for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
                           var key = _step2.value;
                           dict.set(key, this.getRaw(key));
                        }
                     } catch (err) {
                        _iterator2.e(err);
                     } finally {
                        _iterator2.f();
                     }
                     return dict;
                  },
               },
            ],
            [
               {
                  key: "empty",
                  get: function get() {
                     var emptyDict = new Dict(null);
                     emptyDict.set = function (key, value) {
                        unreachable("Should not call `set` on the empty dictionary.");
                     };
                     return shadow(this, "empty", emptyDict);
                  },
               },
               {
                  key: "merge",
                  value: function merge(_ref) {
                     var xref = _ref.xref,
                        dictArray = _ref.dictArray,
                        _ref$mergeSubDicts = _ref.mergeSubDicts,
                        mergeSubDicts =
                           _ref$mergeSubDicts === void 0 ? false : _ref$mergeSubDicts;
                     var mergedDict = new Dict(xref),
                        properties = new Map();
                     var _iterator3 = _createForOfIteratorHelper(dictArray),
                        _step3;
                     try {
                        for (_iterator3.s(); !(_step3 = _iterator3.n()).done; ) {
                           var dict = _step3.value;
                           if (!(dict instanceof Dict)) {
                              continue;
                           }
                           for (
                              var _i = 0, _Object$entries = Object.entries(dict._map);
                              _i < _Object$entries.length;
                              _i++
                           ) {
                              var _Object$entries$_i = _slicedToArray(
                                    _Object$entries[_i],
                                    2,
                                 ),
                                 key = _Object$entries$_i[0],
                                 value = _Object$entries$_i[1];
                              var property = properties.get(key);
                              if (property === undefined) {
                                 property = [];
                                 properties.set(key, property);
                              } else if (!mergeSubDicts || !(value instanceof Dict)) {
                                 continue;
                              }
                              property.push(value);
                           }
                        }
                     } catch (err) {
                        _iterator3.e(err);
                     } finally {
                        _iterator3.f();
                     }
                     var _iterator4 = _createForOfIteratorHelper(properties),
                        _step4;
                     try {
                        for (_iterator4.s(); !(_step4 = _iterator4.n()).done; ) {
                           var _step4$value = _slicedToArray(_step4.value, 2),
                              name = _step4$value[0],
                              values = _step4$value[1];
                           if (values.length === 1 || !(values[0] instanceof Dict)) {
                              mergedDict._map[name] = values[0];
                              continue;
                           }
                           var subDict = new Dict(xref);
                           var _iterator5 = _createForOfIteratorHelper(values),
                              _step5;
                           try {
                              for (_iterator5.s(); !(_step5 = _iterator5.n()).done; ) {
                                 var _dict = _step5.value;
                                 for (
                                    var _i2 = 0,
                                       _Object$entries2 = Object.entries(_dict._map);
                                    _i2 < _Object$entries2.length;
                                    _i2++
                                 ) {
                                    var _Object$entries2$_i = _slicedToArray(
                                          _Object$entries2[_i2],
                                          2,
                                       ),
                                       _key = _Object$entries2$_i[0],
                                       _value = _Object$entries2$_i[1];
                                    if (subDict._map[_key] === undefined) {
                                       subDict._map[_key] = _value;
                                    }
                                 }
                              }
                           } catch (err) {
                              _iterator5.e(err);
                           } finally {
                              _iterator5.f();
                           }
                           if (subDict.size > 0) {
                              mergedDict._map[name] = subDict;
                           }
                        }
                     } catch (err) {
                        _iterator4.e(err);
                     } finally {
                        _iterator4.f();
                     }
                     properties.clear();
                     return mergedDict.size > 0 ? mergedDict : Dict.empty;
                  },
               },
            ],
         );
      })();
      var Ref = /*#__PURE__*/ (function () {
         function Ref(num, gen) {
            _classCallCheck(this, Ref);
            this.num = num;
            this.gen = gen;
         }
         return _createClass(
            Ref,
            [
               {
                  key: "toString",
                  value: function toString() {
                     if (this.gen === 0) {
                        return "".concat(this.num, "R");
                     }
                     return "".concat(this.num, "R").concat(this.gen);
                  },
               },
            ],
            [
               {
                  key: "fromString",
                  value: function fromString(str) {
                     var ref = RefCache[str];
                     if (ref) {
                        return ref;
                     }
                     var m = /^(\d+)R(\d*)$/.exec(str);
                     if (!m || m[1] === "0") {
                        return null;
                     }
                     return (RefCache[str] = new Ref(
                        parseInt(m[1]),
                        !m[2] ? 0 : parseInt(m[2]),
                     ));
                  },
               },
               {
                  key: "get",
                  value: function get(num, gen) {
                     var _RefCache;
                     var key =
                        gen === 0
                           ? "".concat(num, "R")
                           : "".concat(num, "R").concat(gen);
                     return (
                        (_RefCache = RefCache)[key] ||
                        (_RefCache[key] = new Ref(num, gen))
                     );
                  },
               },
            ],
         );
      })();
      var RefSet = /*#__PURE__*/ (function () {
         function RefSet() {
            var parent =
               arguments.length > 0 && arguments[0] !== undefined
                  ? arguments[0]
                  : null;
            _classCallCheck(this, RefSet);
            this._set = new Set(
               parent === null || parent === void 0 ? void 0 : parent._set,
            );
         }
         return _createClass(RefSet, [
            {
               key: "has",
               value: function has(ref) {
                  return this._set.has(ref.toString());
               },
            },
            {
               key: "put",
               value: function put(ref) {
                  this._set.add(ref.toString());
               },
            },
            {
               key: "remove",
               value: function remove(ref) {
                  this._set["delete"](ref.toString());
               },
            },
            {
               key: Symbol.iterator,
               value: function value() {
                  return this._set.values();
               },
            },
            {
               key: "clear",
               value: function clear() {
                  this._set.clear();
               },
            },
         ]);
      })();
      var RefSetCache = /*#__PURE__*/ (function () {
         function RefSetCache() {
            _classCallCheck(this, RefSetCache);
            this._map = new Map();
         }
         return _createClass(RefSetCache, [
            {
               key: "size",
               get: function get() {
                  return this._map.size;
               },
            },
            {
               key: "get",
               value: function get(ref) {
                  return this._map.get(ref.toString());
               },
            },
            {
               key: "has",
               value: function has(ref) {
                  return this._map.has(ref.toString());
               },
            },
            {
               key: "put",
               value: function put(ref, obj) {
                  this._map.set(ref.toString(), obj);
               },
            },
            {
               key: "putAlias",
               value: function putAlias(ref, aliasRef) {
                  this._map.set(ref.toString(), this.get(aliasRef));
               },
            },
            {
               key: Symbol.iterator,
               value: function value() {
                  return this._map.values();
               },
            },
            {
               key: "clear",
               value: function clear() {
                  this._map.clear();
               },
            },
            {
               key: "items",
               value: /*#__PURE__*/ _regenerator().m(function items() {
                  var _iterator6, _step6, _step6$value, ref, value, _t;
                  return _regenerator().w(
                     function (_context2) {
                        while (1)
                           switch ((_context2.p = _context2.n)) {
                              case 0:
                                 _iterator6 = _createForOfIteratorHelper(this._map);
                                 _context2.p = 1;
                                 _iterator6.s();
                              case 2:
                                 if ((_step6 = _iterator6.n()).done) {
                                    _context2.n = 4;
                                    break;
                                 }
                                 ((_step6$value = _slicedToArray(_step6.value, 2)),
                                    (ref = _step6$value[0]),
                                    (value = _step6$value[1]));
                                 _context2.n = 3;
                                 return [Ref.fromString(ref), value];
                              case 3:
                                 _context2.n = 2;
                                 break;
                              case 4:
                                 _context2.n = 6;
                                 break;
                              case 5:
                                 _context2.p = 5;
                                 _t = _context2.v;
                                 _iterator6.e(_t);
                              case 6:
                                 _context2.p = 6;
                                 _iterator6.f();
                                 return _context2.f(6);
                              case 7:
                                 return _context2.a(2);
                           }
                     },
                     items,
                     this,
                     [[1, 5, 6, 7]],
                  );
               }),
            },
         ]);
      })();
      function isName(v, name) {
         return v instanceof Name && (name === undefined || v.name === name);
      }
      function isCmd(v, cmd) {
         return v instanceof Cmd && (cmd === undefined || v.cmd === cmd);
      }
      function isDict(v, type) {
         return (
            v instanceof Dict && (type === undefined || isName(v.get("Type"), type))
         );
      }
      function isRefsEqual(v1, v2) {
         return v1.num === v2.num && v1.gen === v2.gen;
      } // CONCATENATED MODULE: ./src/core/base_stream.js
      var BaseStream = /*#__PURE__*/ (function () {
         function BaseStream() {
            _classCallCheck(this, BaseStream);
            if (this.constructor === BaseStream) {
               unreachable("Cannot initialize BaseStream.");
            }
         }
         return _createClass(BaseStream, [
            {
               key: "length",
               get: function get() {
                  unreachable("Abstract getter `length` accessed");
               },
            },
            {
               key: "isEmpty",
               get: function get() {
                  unreachable("Abstract getter `isEmpty` accessed");
               },
            },
            {
               key: "isDataLoaded",
               get: function get() {
                  return shadow(this, "isDataLoaded", true);
               },
            },
            {
               key: "getByte",
               value: function getByte() {
                  unreachable("Abstract method `getByte` called");
               },
            },
            {
               key: "getBytes",
               value: function getBytes(length) {
                  unreachable("Abstract method `getBytes` called");
               },
            },
            {
               key: "peekByte",
               value: function peekByte() {
                  var peekedByte = this.getByte();
                  if (peekedByte !== -1) {
                     this.pos--;
                  }
                  return peekedByte;
               },
            },
            {
               key: "peekBytes",
               value: function peekBytes(length) {
                  var bytes = this.getBytes(length);
                  this.pos -= bytes.length;
                  return bytes;
               },
            },
            {
               key: "getUint16",
               value: function getUint16() {
                  var b0 = this.getByte();
                  var b1 = this.getByte();
                  if (b0 === -1 || b1 === -1) {
                     return -1;
                  }
                  return (b0 << 8) + b1;
               },
            },
            {
               key: "getInt32",
               value: function getInt32() {
                  var b0 = this.getByte();
                  var b1 = this.getByte();
                  var b2 = this.getByte();
                  var b3 = this.getByte();
                  return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;
               },
            },
            {
               key: "getByteRange",
               value: function getByteRange(begin, end) {
                  unreachable("Abstract method `getByteRange` called");
               },
            },
            {
               key: "getString",
               value: function getString(length) {
                  return bytesToString(this.getBytes(length));
               },
            },
            {
               key: "skip",
               value: function skip(n) {
                  this.pos += n || 1;
               },
            },
            {
               key: "reset",
               value: function reset() {
                  unreachable("Abstract method `reset` called");
               },
            },
            {
               key: "moveStart",
               value: function moveStart() {
                  unreachable("Abstract method `moveStart` called");
               },
            },
            {
               key: "makeSubStream",
               value: function makeSubStream(start, length) {
                  var dict =
                     arguments.length > 2 && arguments[2] !== undefined
                        ? arguments[2]
                        : null;
                  unreachable("Abstract method `makeSubStream` called");
               },
            },
            {
               key: "getBaseStreams",
               value: function getBaseStreams() {
                  return null;
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/core_utils.js
      var PDF_VERSION_REGEXP = /^[1-9]\.\d$/;
      function getLookupTableFactory(initializer) {
         var lookup;
         return function () {
            if (initializer) {
               lookup = Object.create(null);
               initializer(lookup);
               initializer = null;
            }
            return lookup;
         };
      }
      var MissingDataException = /*#__PURE__*/ (function (_BaseException8) {
         function MissingDataException(begin, end) {
            var _this4;
            _classCallCheck(this, MissingDataException);
            _this4 = _callSuper(this, MissingDataException, [
               "Missing data [".concat(begin, ", ").concat(end, ")"),
               "MissingDataException",
            ]);
            _this4.begin = begin;
            _this4.end = end;
            return _this4;
         }
         _inherits(MissingDataException, _BaseException8);
         return _createClass(MissingDataException);
      })(BaseException);
      var ParserEOFException = /*#__PURE__*/ (function (_BaseException9) {
         function ParserEOFException(msg) {
            _classCallCheck(this, ParserEOFException);
            return _callSuper(this, ParserEOFException, [
               msg,
               "ParserEOFException",
            ]);
         }
         _inherits(ParserEOFException, _BaseException9);
         return _createClass(ParserEOFException);
      })(BaseException);
      var XRefEntryException = /*#__PURE__*/ (function (_BaseException0) {
         function XRefEntryException(msg) {
            _classCallCheck(this, XRefEntryException);
            return _callSuper(this, XRefEntryException, [
               msg,
               "XRefEntryException",
            ]);
         }
         _inherits(XRefEntryException, _BaseException0);
         return _createClass(XRefEntryException);
      })(BaseException);
      var XRefParseException = /*#__PURE__*/ (function (_BaseException1) {
         function XRefParseException(msg) {
            _classCallCheck(this, XRefParseException);
            return _callSuper(this, XRefParseException, [
               msg,
               "XRefParseException",
            ]);
         }
         _inherits(XRefParseException, _BaseException1);
         return _createClass(XRefParseException);
      })(BaseException);
      function arrayBuffersToBytes(arr) {
         var length = arr.length;
         if (length === 0) {
            return new Uint8Array(0);
         }
         if (length === 1) {
            return new Uint8Array(arr[0]);
         }
         var dataLength = 0;
         for (var i = 0; i < length; i++) {
            dataLength += arr[i].byteLength;
         }
         var data = new Uint8Array(dataLength);
         var pos = 0;
         for (var _i3 = 0; _i3 < length; _i3++) {
            var item = new Uint8Array(arr[_i3]);
            data.set(item, pos);
            pos += item.byteLength;
         }
         return data;
      }
      function getInheritableProperty(_ref2) {
         var dict = _ref2.dict,
            key = _ref2.key,
            _ref2$getArray = _ref2.getArray,
            getArray = _ref2$getArray === void 0 ? false : _ref2$getArray,
            _ref2$stopWhenFound = _ref2.stopWhenFound,
            stopWhenFound =
               _ref2$stopWhenFound === void 0 ? true : _ref2$stopWhenFound;
         var values;
         var visited = new RefSet();
         while (dict instanceof Dict && !(dict.objId && visited.has(dict.objId))) {
            if (dict.objId) {
               visited.put(dict.objId);
            }
            var value = getArray ? dict.getArray(key) : dict.get(key);
            if (value !== undefined) {
               if (stopWhenFound) {
                  return value;
               }
               (values || (values = [])).push(value);
            }
            dict = dict.get("Parent");
         }
         return values;
      }
      var ROMAN_NUMBER_MAP = [
         "",
         "C",
         "CC",
         "CCC",
         "CD",
         "D",
         "DC",
         "DCC",
         "DCCC",
         "CM",
         "",
         "X",
         "XX",
         "XXX",
         "XL",
         "L",
         "LX",
         "LXX",
         "LXXX",
         "XC",
         "",
         "I",
         "II",
         "III",
         "IV",
         "V",
         "VI",
         "VII",
         "VIII",
         "IX",
      ];
      function toRomanNumerals(number) {
         var lowerCase =
            arguments.length > 1 && arguments[1] !== undefined
               ? arguments[1]
               : false;
         assert(
            Number.isInteger(number) && number > 0,
            "The number should be a positive integer.",
         );
         var romanBuf = [];
         var pos;
         while (number >= 1000) {
            number -= 1000;
            romanBuf.push("M");
         }
         pos = (number / 100) | 0;
         number %= 100;
         romanBuf.push(ROMAN_NUMBER_MAP[pos]);
         pos = (number / 10) | 0;
         number %= 10;
         romanBuf.push(ROMAN_NUMBER_MAP[10 + pos]);
         romanBuf.push(ROMAN_NUMBER_MAP[20 + number]);
         var romanStr = romanBuf.join("");
         return lowerCase ? romanStr.toLowerCase() : romanStr;
      }
      function log2(x) {
         if (x <= 0) {
            return 0;
         }
         return Math.ceil(Math.log2(x));
      }
      function readInt8(data, offset) {
         return (data[offset] << 24) >> 24;
      }
      function readUint16(data, offset) {
         return (data[offset] << 8) | data[offset + 1];
      }
      function readUint32(data, offset) {
         return (
            ((data[offset] << 24) |
               (data[offset + 1] << 16) |
               (data[offset + 2] << 8) |
               data[offset + 3]) >>>
            0
         );
      }
      function isWhiteSpace(ch) {
         return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;
      }
      function isNumberArray(arr, len) {
         return (
            Array.isArray(arr) &&
            (len === null || arr.length === len) &&
            arr.every(function (x) {
               return typeof x === "number";
            })
         );
      }
      function parseXFAPath(path) {
         var positionPattern = /(.+)\[(\d+)\]$/;
         return path.split(".").map(function (component) {
            var m = component.match(positionPattern);
            if (m) {
               return { name: m[1], pos: parseInt(m[2], 10) };
            }
            return { name: component, pos: 0 };
         });
      }
      function escapePDFName(str) {
         var buffer = [];
         var start = 0;
         for (var i = 0, ii = str.length; i < ii; i++) {
            var _char = str.charCodeAt(i);
            if (
               _char < 0x21 ||
               _char > 0x7e ||
               _char === 0x23 ||
               _char === 0x28 ||
               _char === 0x29 ||
               _char === 0x3c ||
               _char === 0x3e ||
               _char === 0x5b ||
               _char === 0x5d ||
               _char === 0x7b ||
               _char === 0x7d ||
               _char === 0x2f ||
               _char === 0x25
            ) {
               if (start < i) {
                  buffer.push(str.substring(start, i));
               }
               buffer.push("#".concat(_char.toString(16)));
               start = i + 1;
            }
         }
         if (buffer.length === 0) {
            return str;
         }
         if (start < str.length) {
            buffer.push(str.substring(start, str.length));
         }
         return buffer.join("");
      }
      function escapeString(str) {
         return str.replaceAll(/([()\\\n\r])/g, function (match) {
            if (match === "\n") {
               return "\\n";
            } else if (match === "\r") {
               return "\\r";
            }
            return "\\".concat(match);
         });
      }
      function _collectJS(entry, xref, list, parents) {
         if (!entry) {
            return;
         }
         var parent = null;
         if (entry instanceof Ref) {
            if (parents.has(entry)) {
               return;
            }
            parent = entry;
            parents.put(parent);
            entry = xref.fetch(entry);
         }
         if (Array.isArray(entry)) {
            var _iterator7 = _createForOfIteratorHelper(entry),
               _step7;
            try {
               for (_iterator7.s(); !(_step7 = _iterator7.n()).done; ) {
                  var element = _step7.value;
                  _collectJS(element, xref, list, parents);
               }
            } catch (err) {
               _iterator7.e(err);
            } finally {
               _iterator7.f();
            }
         } else if (entry instanceof Dict) {
            if (isName(entry.get("S"), "JavaScript")) {
               var js = entry.get("JS");
               var code;
               if (js instanceof BaseStream) {
                  code = js.getString();
               } else if (typeof js === "string") {
                  code = js;
               }
               code && (code = stringToPDFString(code).replaceAll("\x00", ""));
               if (code) {
                  list.push(code);
               }
            }
            _collectJS(entry.getRaw("Next"), xref, list, parents);
         }
         if (parent) {
            parents.remove(parent);
         }
      }
      function collectActions(xref, dict, eventType) {
         var actions = Object.create(null);
         var additionalActionsDicts = getInheritableProperty({
            dict: dict,
            key: "AA",
            stopWhenFound: false,
         });
         if (additionalActionsDicts) {
            for (var i = additionalActionsDicts.length - 1; i >= 0; i--) {
               var additionalActions = additionalActionsDicts[i];
               if (!(additionalActions instanceof Dict)) {
                  continue;
               }
               var _iterator8 = _createForOfIteratorHelper(
                     additionalActions.getKeys(),
                  ),
                  _step8;
               try {
                  for (_iterator8.s(); !(_step8 = _iterator8.n()).done; ) {
                     var key = _step8.value;
                     var action = eventType[key];
                     if (!action) {
                        continue;
                     }
                     var actionDict = additionalActions.getRaw(key);
                     var parents = new RefSet();
                     var list = [];
                     _collectJS(actionDict, xref, list, parents);
                     if (list.length > 0) {
                        actions[action] = list;
                     }
                  }
               } catch (err) {
                  _iterator8.e(err);
               } finally {
                  _iterator8.f();
               }
            }
         }
         if (dict.has("A")) {
            var _actionDict = dict.get("A");
            var _parents = new RefSet();
            var _list = [];
            _collectJS(_actionDict, xref, _list, _parents);
            if (_list.length > 0) {
               actions.Action = _list;
            }
         }
         return objectSize(actions) > 0 ? actions : null;
      }
      var XMLEntities = {
         0x3c: "&lt;",
         0x3e: "&gt;",
         0x26: "&amp;",
         0x22: "&quot;",
         0x27: "&apos;",
      };
      function codePointIter(str) {
         var i, ii, _char2;
         return _regenerator().w(function (_context3) {
            while (1)
               switch (_context3.n) {
                  case 0:
                     ((i = 0), (ii = str.length));
                  case 1:
                     if (!(i < ii)) {
                        _context3.n = 3;
                        break;
                     }
                     _char2 = str.codePointAt(i);
                     if (_char2 > 0xd7ff && (_char2 < 0xe000 || _char2 > 0xfffd)) {
                        i++;
                     }
                     _context3.n = 2;
                     return _char2;
                  case 2:
                     i++;
                     _context3.n = 1;
                     break;
                  case 3:
                     return _context3.a(2);
               }
         }, _marked);
      }
      function encodeToXmlString(str) {
         var buffer = [];
         var start = 0;
         for (var i = 0, ii = str.length; i < ii; i++) {
            var _char3 = str.codePointAt(i);
            if (0x20 <= _char3 && _char3 <= 0x7e) {
               var entity = XMLEntities[_char3];
               if (entity) {
                  if (start < i) {
                     buffer.push(str.substring(start, i));
                  }
                  buffer.push(entity);
                  start = i + 1;
               }
            } else {
               if (start < i) {
                  buffer.push(str.substring(start, i));
               }
               buffer.push("&#x".concat(_char3.toString(16).toUpperCase(), ";"));
               if (_char3 > 0xd7ff && (_char3 < 0xe000 || _char3 > 0xfffd)) {
                  i++;
               }
               start = i + 1;
            }
         }
         if (buffer.length === 0) {
            return str;
         }
         if (start < str.length) {
            buffer.push(str.substring(start, str.length));
         }
         return buffer.join("");
      }
      function validateFontName(fontFamily) {
         var mustWarn =
            arguments.length > 1 && arguments[1] !== undefined
               ? arguments[1]
               : false;
         var m = /^("|').*("|')$/.exec(fontFamily);
         if (m && m[1] === m[2]) {
            var re = new RegExp("[^\\\\]".concat(m[1]));
            if (re.test(fontFamily.slice(1, -1))) {
               if (mustWarn) {
                  warn(
                     "FontFamily contains unescaped "
                        .concat(m[1], ": ")
                        .concat(fontFamily, "."),
                  );
               }
               return false;
            }
         } else {
            var _iterator9 = _createForOfIteratorHelper(fontFamily.split(/[ \t]+/)),
               _step9;
            try {
               for (_iterator9.s(); !(_step9 = _iterator9.n()).done; ) {
                  var ident = _step9.value;
                  if (/^(\d|(-(\d|-)))/.test(ident) || !/^[\w-\\]+$/.test(ident)) {
                     if (mustWarn) {
                        warn(
                           "FontFamily contains invalid <custom-ident>: ".concat(
                              fontFamily,
                              ".",
                           ),
                        );
                     }
                     return false;
                  }
               }
            } catch (err) {
               _iterator9.e(err);
            } finally {
               _iterator9.f();
            }
         }
         return true;
      }
      function validateCSSFont(cssFontInfo) {
         var DEFAULT_CSS_FONT_OBLIQUE = "14";
         var DEFAULT_CSS_FONT_WEIGHT = "400";
         var CSS_FONT_WEIGHT_VALUES = new Set([
            "100",
            "200",
            "300",
            "400",
            "500",
            "600",
            "700",
            "800",
            "900",
            "1000",
            "normal",
            "bold",
            "bolder",
            "lighter",
         ]);
         var fontFamily = cssFontInfo.fontFamily,
            fontWeight = cssFontInfo.fontWeight,
            italicAngle = cssFontInfo.italicAngle;
         if (!validateFontName(fontFamily, true)) {
            return false;
         }
         var weight = fontWeight ? fontWeight.toString() : "";
         cssFontInfo.fontWeight = CSS_FONT_WEIGHT_VALUES.has(weight)
            ? weight
            : DEFAULT_CSS_FONT_WEIGHT;
         var angle = parseFloat(italicAngle);
         cssFontInfo.italicAngle =
            isNaN(angle) || angle < -90 || angle > 90
               ? DEFAULT_CSS_FONT_OBLIQUE
               : italicAngle.toString();
         return true;
      }
      function recoverJsURL(str) {
         var URL_OPEN_METHODS = [
            "app.launchURL",
            "window.open",
            "xfa.host.gotoURL",
         ];
         var regex = new RegExp(
            "^\\s*(" +
            URL_OPEN_METHODS.join("|").replaceAll(".", "\\.") +
            ")\\((?:'|\")([^'\"]*)(?:'|\")(?:,\\s*(\\w+)\\)|\\))",
            "i",
         );
         var jsUrl = regex.exec(str);
         if (jsUrl !== null && jsUrl !== void 0 && jsUrl[2]) {
            var url = jsUrl[2];
            var newWindow = false;
            if (jsUrl[3] === "true" && jsUrl[1] === "app.launchURL") {
               newWindow = true;
            }
            return { url: url, newWindow: newWindow };
         }
         return null;
      }
      function numberToString(value) {
         if (Number.isInteger(value)) {
            return value.toString();
         }
         var roundedValue = Math.round(value * 100);
         if (roundedValue % 100 === 0) {
            return (roundedValue / 100).toString();
         }
         if (roundedValue % 10 === 0) {
            return value.toFixed(1);
         }
         return value.toFixed(2);
      }
      function getNewAnnotationsMap(annotationStorage) {
         if (!annotationStorage) {
            return null;
         }
         var newAnnotationsByPage = new Map();
         var _iterator0 = _createForOfIteratorHelper(annotationStorage),
            _step0;
         try {
            for (_iterator0.s(); !(_step0 = _iterator0.n()).done; ) {
               var _step0$value = _slicedToArray(_step0.value, 2),
                  key = _step0$value[0],
                  value = _step0$value[1];
               if (!key.startsWith(AnnotationEditorPrefix)) {
                  continue;
               }
               var annotations = newAnnotationsByPage.get(value.pageIndex);
               if (!annotations) {
                  annotations = [];
                  newAnnotationsByPage.set(value.pageIndex, annotations);
               }
               annotations.push(value);
            }
         } catch (err) {
            _iterator0.e(err);
         } finally {
            _iterator0.f();
         }
         return newAnnotationsByPage.size > 0 ? newAnnotationsByPage : null;
      }
      function isAscii(str) {
         return /^[\x00-\x7F]*$/.test(str);
      }
      function stringToUTF16HexString(str) {
         var buf = [];
         for (var i = 0, ii = str.length; i < ii; i++) {
            var _char4 = str.charCodeAt(i);
            buf.push(
               ((_char4 >> 8) & 0xff).toString(16).padStart(2, "0"),
               (_char4 & 0xff).toString(16).padStart(2, "0"),
            );
         }
         return buf.join("");
      }
      function stringToUTF16String(str) {
         var bigEndian =
            arguments.length > 1 && arguments[1] !== undefined
               ? arguments[1]
               : false;
         var buf = [];
         if (bigEndian) {
            buf.push("\xFE\xFF");
         }
         for (var i = 0, ii = str.length; i < ii; i++) {
            var _char5 = str.charCodeAt(i);
            buf.push(
               String.fromCharCode((_char5 >> 8) & 0xff),
               String.fromCharCode(_char5 & 0xff),
            );
         }
         return buf.join("");
      }
      function _getRotationMatrix(rotation, width, height) {
         switch (rotation) {
            case 90:
               return [0, 1, -1, 0, width, 0];
            case 180:
               return [-1, 0, 0, -1, width, height];
            case 270:
               return [0, -1, 1, 0, 0, height];
            default:
               throw new Error("Invalid rotation");
         }
      }
      function getSizeInBytes(x) {
         return Math.ceil(Math.ceil(Math.log2(1 + x)) / 8);
      } // CONCATENATED MODULE: ./src/core/stream.js
      var Stream = /*#__PURE__*/ (function (_BaseStream) {
         function Stream(arrayBuffer, start, length, dict) {
            var _this5;
            _classCallCheck(this, Stream);
            _this5 = _callSuper(this, Stream);
            _this5.bytes =
               arrayBuffer instanceof Uint8Array
                  ? arrayBuffer
                  : new Uint8Array(arrayBuffer);
            _this5.start = start || 0;
            _this5.pos = _this5.start;
            _this5.end = start + length || _this5.bytes.length;
            _this5.dict = dict;
            return _this5;
         }
         _inherits(Stream, _BaseStream);
         return _createClass(Stream, [
            {
               key: "length",
               get: function get() {
                  return this.end - this.start;
               },
            },
            {
               key: "isEmpty",
               get: function get() {
                  return this.length === 0;
               },
            },
            {
               key: "getByte",
               value: function getByte() {
                  if (this.pos >= this.end) {
                     return -1;
                  }
                  return this.bytes[this.pos++];
               },
            },
            {
               key: "getBytes",
               value: function getBytes(length) {
                  var bytes = this.bytes;
                  var pos = this.pos;
                  var strEnd = this.end;
                  if (!length) {
                     return bytes.subarray(pos, strEnd);
                  }
                  var end = pos + length;
                  if (end > strEnd) {
                     end = strEnd;
                  }
                  this.pos = end;
                  return bytes.subarray(pos, end);
               },
            },
            {
               key: "getByteRange",
               value: function getByteRange(begin, end) {
                  if (begin < 0) {
                     begin = 0;
                  }
                  if (end > this.end) {
                     end = this.end;
                  }
                  return this.bytes.subarray(begin, end);
               },
            },
            {
               key: "reset",
               value: function reset() {
                  this.pos = this.start;
               },
            },
            {
               key: "moveStart",
               value: function moveStart() {
                  this.start = this.pos;
               },
            },
            {
               key: "makeSubStream",
               value: function makeSubStream(start, length) {
                  var dict =
                     arguments.length > 2 && arguments[2] !== undefined
                        ? arguments[2]
                        : null;
                  return new Stream(this.bytes.buffer, start, length, dict);
               },
            },
         ]);
      })(BaseStream);
      var StringStream = /*#__PURE__*/ (function (_Stream) {
         function StringStream(str) {
            _classCallCheck(this, StringStream);
            return _callSuper(this, StringStream, [stringToBytes(str)]);
         }
         _inherits(StringStream, _Stream);
         return _createClass(StringStream);
      })(Stream);
      var NullStream = /*#__PURE__*/ (function (_Stream2) {
         function NullStream() {
            _classCallCheck(this, NullStream);
            return _callSuper(this, NullStream, [new Uint8Array(0)]);
         }
         _inherits(NullStream, _Stream2);
         return _createClass(NullStream);
      })(Stream); // CONCATENATED MODULE: ./src/core/chunked_stream.js
      var ChunkedStream = /*#__PURE__*/ (function (_Stream3) {
         function ChunkedStream(length, chunkSize, manager) {
            var _this6;
            _classCallCheck(this, ChunkedStream);
            _this6 = _callSuper(this, ChunkedStream, [
               new Uint8Array(length),
               0,
               length,
               null,
            ]);
            _this6.chunkSize = chunkSize;
            _this6._loadedChunks = new Set();
            _this6.numChunks = Math.ceil(length / chunkSize);
            _this6.manager = manager;
            _this6.progressiveDataLength = 0;
            _this6.lastSuccessfulEnsureByteChunk = -1;
            return _this6;
         }
         _inherits(ChunkedStream, _Stream3);
         return _createClass(ChunkedStream, [
            {
               key: "getMissingChunks",
               value: function getMissingChunks() {
                  var chunks = [];
                  for (var chunk = 0, n = this.numChunks; chunk < n; ++chunk) {
                     if (!this._loadedChunks.has(chunk)) {
                        chunks.push(chunk);
                     }
                  }
                  return chunks;
               },
            },
            {
               key: "numChunksLoaded",
               get: function get() {
                  return this._loadedChunks.size;
               },
            },
            {
               key: "isDataLoaded",
               get: function get() {
                  return this.numChunksLoaded === this.numChunks;
               },
            },
            {
               key: "onReceiveData",
               value: function onReceiveData(begin, chunk) {
                  var chunkSize = this.chunkSize;
                  if (begin % chunkSize !== 0) {
                     throw new Error("Bad begin offset: ".concat(begin));
                  }
                  var end = begin + chunk.byteLength;
                  if (end % chunkSize !== 0 && end !== this.bytes.length) {
                     throw new Error("Bad end offset: ".concat(end));
                  }
                  this.bytes.set(new Uint8Array(chunk), begin);
                  var beginChunk = Math.floor(begin / chunkSize);
                  var endChunk = Math.floor((end - 1) / chunkSize) + 1;
                  for (var curChunk = beginChunk; curChunk < endChunk; ++curChunk) {
                     this._loadedChunks.add(curChunk);
                  }
               },
            },
            {
               key: "onReceiveProgressiveData",
               value: function onReceiveProgressiveData(data) {
                  var position = this.progressiveDataLength;
                  var beginChunk = Math.floor(position / this.chunkSize);
                  this.bytes.set(new Uint8Array(data), position);
                  position += data.byteLength;
                  this.progressiveDataLength = position;
                  var endChunk =
                     position >= this.end
                        ? this.numChunks
                        : Math.floor(position / this.chunkSize);
                  for (var curChunk = beginChunk; curChunk < endChunk; ++curChunk) {
                     this._loadedChunks.add(curChunk);
                  }
               },
            },
            {
               key: "ensureByte",
               value: function ensureByte(pos) {
                  if (pos < this.progressiveDataLength) {
                     return;
                  }
                  var chunk = Math.floor(pos / this.chunkSize);
                  if (chunk > this.numChunks) {
                     return;
                  }
                  if (chunk === this.lastSuccessfulEnsureByteChunk) {
                     return;
                  }
                  if (!this._loadedChunks.has(chunk)) {
                     throw new MissingDataException(pos, pos + 1);
                  }
                  this.lastSuccessfulEnsureByteChunk = chunk;
               },
            },
            {
               key: "ensureRange",
               value: function ensureRange(begin, end) {
                  if (begin >= end) {
                     return;
                  }
                  if (end <= this.progressiveDataLength) {
                     return;
                  }
                  var beginChunk = Math.floor(begin / this.chunkSize);
                  if (beginChunk > this.numChunks) {
                     return;
                  }
                  var endChunk = Math.min(
                     Math.floor((end - 1) / this.chunkSize) + 1,
                     this.numChunks,
                  );
                  for (var chunk = beginChunk; chunk < endChunk; ++chunk) {
                     if (!this._loadedChunks.has(chunk)) {
                        throw new MissingDataException(begin, end);
                     }
                  }
               },
            },
            {
               key: "nextEmptyChunk",
               value: function nextEmptyChunk(beginChunk) {
                  var numChunks = this.numChunks;
                  for (var i = 0; i < numChunks; ++i) {
                     var chunk = (beginChunk + i) % numChunks;
                     if (!this._loadedChunks.has(chunk)) {
                        return chunk;
                     }
                  }
                  return null;
               },
            },
            {
               key: "hasChunk",
               value: function hasChunk(chunk) {
                  return this._loadedChunks.has(chunk);
               },
            },
            {
               key: "getByte",
               value: function getByte() {
                  var pos = this.pos;
                  if (pos >= this.end) {
                     return -1;
                  }
                  if (pos >= this.progressiveDataLength) {
                     this.ensureByte(pos);
                  }
                  return this.bytes[this.pos++];
               },
            },
            {
               key: "getBytes",
               value: function getBytes(length) {
                  var bytes = this.bytes;
                  var pos = this.pos;
                  var strEnd = this.end;
                  if (!length) {
                     if (strEnd > this.progressiveDataLength) {
                        this.ensureRange(pos, strEnd);
                     }
                     return bytes.subarray(pos, strEnd);
                  }
                  var end = pos + length;
                  if (end > strEnd) {
                     end = strEnd;
                  }
                  if (end > this.progressiveDataLength) {
                     this.ensureRange(pos, end);
                  }
                  this.pos = end;
                  return bytes.subarray(pos, end);
               },
            },
            {
               key: "getByteRange",
               value: function getByteRange(begin, end) {
                  if (begin < 0) {
                     begin = 0;
                  }
                  if (end > this.end) {
                     end = this.end;
                  }
                  if (end > this.progressiveDataLength) {
                     this.ensureRange(begin, end);
                  }
                  return this.bytes.subarray(begin, end);
               },
            },
            {
               key: "makeSubStream",
               value: function makeSubStream(start, length) {
                  var dict =
                     arguments.length > 2 && arguments[2] !== undefined
                        ? arguments[2]
                        : null;
                  if (length) {
                     if (start + length > this.progressiveDataLength) {
                        this.ensureRange(start, start + length);
                     }
                  } else if (start >= this.progressiveDataLength) {
                     this.ensureByte(start);
                  }
                  function ChunkedStreamSubstream() {}
                  ChunkedStreamSubstream.prototype = Object.create(this);
                  ChunkedStreamSubstream.prototype.getMissingChunks = function () {
                     var chunkSize = this.chunkSize;
                     var beginChunk = Math.floor(this.start / chunkSize);
                     var endChunk = Math.floor((this.end - 1) / chunkSize) + 1;
                     var missingChunks = [];
                     for (var chunk = beginChunk; chunk < endChunk; ++chunk) {
                        if (!this._loadedChunks.has(chunk)) {
                           missingChunks.push(chunk);
                        }
                     }
                     return missingChunks;
                  };
                  Object.defineProperty(
                     ChunkedStreamSubstream.prototype,
                     "isDataLoaded",
                     {
                        get: function get() {
                           if (this.numChunksLoaded === this.numChunks) {
                              return true;
                           }
                           return this.getMissingChunks().length === 0;
                        },
                        configurable: true,
                     },
                  );
                  var subStream = new ChunkedStreamSubstream();
                  subStream.pos = subStream.start = start;
                  subStream.end = start + length || this.end;
                  subStream.dict = dict;
                  return subStream;
               },
            },
            {
               key: "getBaseStreams",
               value: function getBaseStreams() {
                  return [this];
               },
            },
         ]);
      })(Stream);
      var ChunkedStreamManager = /*#__PURE__*/ (function () {
         function ChunkedStreamManager(pdfNetworkStream, args) {
            _classCallCheck(this, ChunkedStreamManager);
            this.length = args.length;
            this.chunkSize = args.rangeChunkSize;
            this.stream = new ChunkedStream(this.length, this.chunkSize, this);
            this.pdfNetworkStream = pdfNetworkStream;
            this.disableAutoFetch = args.disableAutoFetch;
            this.msgHandler = args.msgHandler;
            this.currRequestId = 0;
            this._chunksNeededByRequest = new Map();
            this._requestsByChunk = new Map();
            this._promisesByRequest = new Map();
            this.progressiveDataLength = 0;
            this.aborted = false;
            this._loadedStreamCapability = Promise.withResolvers();
         }
         return _createClass(ChunkedStreamManager, [
            {
               key: "sendRequest",
               value: function sendRequest(begin, end) {
                  var _this7 = this;
                  var rangeReader = this.pdfNetworkStream.getRangeReader(begin, end);
                  if (!rangeReader.isStreamingSupported) {
                     rangeReader.onProgress = this.onProgress.bind(this);
                  }
                  var chunks = [],
                     loaded = 0;
                  return new Promise(function (resolve, reject) {
                     var _readChunk = function readChunk(_ref3) {
                        var value = _ref3.value,
                           done = _ref3.done;
                        try {
                           if (done) {
                              var chunkData = arrayBuffersToBytes(chunks);
                              chunks = null;
                              resolve(chunkData);
                              return;
                           }
                           loaded += value.byteLength;
                           if (rangeReader.isStreamingSupported) {
                              _this7.onProgress({ loaded: loaded });
                           }
                           chunks.push(value);
                           rangeReader.read().then(_readChunk, reject);
                        } catch (e) {
                           reject(e);
                        }
                     };
                     rangeReader.read().then(_readChunk, reject);
                  }).then(function (data) {
                     if (_this7.aborted) {
                        return;
                     }
                     _this7.onReceiveData({ chunk: data, begin: begin });
                  });
               },
            },
            {
               key: "requestAllChunks",
               value: function requestAllChunks() {
                  var noFetch =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : false;
                  if (!noFetch) {
                     var missingChunks = this.stream.getMissingChunks();
                     this._requestChunks(missingChunks);
                  }
                  return this._loadedStreamCapability.promise;
               },
            },
            {
               key: "_requestChunks",
               value: function _requestChunks(chunks) {
                  var _this8 = this;
                  var requestId = this.currRequestId++;
                  var chunksNeeded = new Set();
                  this._chunksNeededByRequest.set(requestId, chunksNeeded);
                  var _iterator1 = _createForOfIteratorHelper(chunks),
                     _step1;
                  try {
                     for (_iterator1.s(); !(_step1 = _iterator1.n()).done; ) {
                        var chunk = _step1.value;
                        if (!this.stream.hasChunk(chunk)) {
                           chunksNeeded.add(chunk);
                        }
                     }
                  } catch (err) {
                     _iterator1.e(err);
                  } finally {
                     _iterator1.f();
                  }
                  if (chunksNeeded.size === 0) {
                     return Promise.resolve();
                  }
                  var capability = Promise.withResolvers();
                  this._promisesByRequest.set(requestId, capability);
                  var chunksToRequest = [];
                  var _iterator10 = _createForOfIteratorHelper(chunksNeeded),
                     _step10;
                  try {
                     for (_iterator10.s(); !(_step10 = _iterator10.n()).done; ) {
                        var _chunk = _step10.value;
                        var requestIds = this._requestsByChunk.get(_chunk);
                        if (!requestIds) {
                           requestIds = [];
                           this._requestsByChunk.set(_chunk, requestIds);
                           chunksToRequest.push(_chunk);
                        }
                        requestIds.push(requestId);
                     }
                  } catch (err) {
                     _iterator10.e(err);
                  } finally {
                     _iterator10.f();
                  }
                  if (chunksToRequest.length > 0) {
                     var groupedChunksToRequest = this.groupChunks(chunksToRequest);
                     var _iterator11 = _createForOfIteratorHelper(
                           groupedChunksToRequest,
                        ),
                        _step11;
                     try {
                        for (_iterator11.s(); !(_step11 = _iterator11.n()).done; ) {
                           var groupedChunk = _step11.value;
                           var begin = groupedChunk.beginChunk * this.chunkSize;
                           var end = Math.min(
                              groupedChunk.endChunk * this.chunkSize,
                              this.length,
                           );
                           this.sendRequest(begin, end)["catch"](capability.reject);
                        }
                     } catch (err) {
                        _iterator11.e(err);
                     } finally {
                        _iterator11.f();
                     }
                  }
                  return capability.promise["catch"](function (reason) {
                     if (_this8.aborted) {
                        return;
                     }
                     throw reason;
                  });
               },
            },
            {
               key: "getStream",
               value: function getStream() {
                  return this.stream;
               },
            },
            {
               key: "requestRange",
               value: function requestRange(begin, end) {
                  end = Math.min(end, this.length);
                  var beginChunk = this.getBeginChunk(begin);
                  var endChunk = this.getEndChunk(end);
                  var chunks = [];
                  for (var chunk = beginChunk; chunk < endChunk; ++chunk) {
                     chunks.push(chunk);
                  }
                  return this._requestChunks(chunks);
               },
            },
            {
               key: "requestRanges",
               value: function requestRanges() {
                  var ranges =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : [];
                  var chunksToRequest = [];
                  var _iterator12 = _createForOfIteratorHelper(ranges),
                     _step12;
                  try {
                     for (_iterator12.s(); !(_step12 = _iterator12.n()).done; ) {
                        var range = _step12.value;
                        var beginChunk = this.getBeginChunk(range.begin);
                        var endChunk = this.getEndChunk(range.end);
                        for (var chunk = beginChunk; chunk < endChunk; ++chunk) {
                           if (!chunksToRequest.includes(chunk)) {
                              chunksToRequest.push(chunk);
                           }
                        }
                     }
                  } catch (err) {
                     _iterator12.e(err);
                  } finally {
                     _iterator12.f();
                  }
                  chunksToRequest.sort(function (a, b) {
                     return a - b;
                  });
                  return this._requestChunks(chunksToRequest);
               },
            },
            {
               key: "groupChunks",
               value: function groupChunks(chunks) {
                  var groupedChunks = [];
                  var beginChunk = -1;
                  var prevChunk = -1;
                  for (var i = 0, ii = chunks.length; i < ii; ++i) {
                     var chunk = chunks[i];
                     if (beginChunk < 0) {
                        beginChunk = chunk;
                     }
                     if (prevChunk >= 0 && prevChunk + 1 !== chunk) {
                        groupedChunks.push({
                           beginChunk: beginChunk,
                           endChunk: prevChunk + 1,
                        });
                        beginChunk = chunk;
                     }
                     if (i + 1 === chunks.length) {
                        groupedChunks.push({
                           beginChunk: beginChunk,
                           endChunk: chunk + 1,
                        });
                     }
                     prevChunk = chunk;
                  }
                  return groupedChunks;
               },
            },
            {
               key: "onProgress",
               value: function onProgress(args) {
                  this.msgHandler.send("DocProgress", {
                     loaded:
                        this.stream.numChunksLoaded * this.chunkSize + args.loaded,
                     total: this.length,
                  });
               },
            },
            {
               key: "onReceiveData",
               value: function onReceiveData(args) {
                  var chunk = args.chunk;
                  var isProgressive = args.begin === undefined;
                  var begin = isProgressive ? this.progressiveDataLength : args.begin;
                  var end = begin + chunk.byteLength;
                  var beginChunk = Math.floor(begin / this.chunkSize);
                  var endChunk =
                     end < this.length
                        ? Math.floor(end / this.chunkSize)
                        : Math.ceil(end / this.chunkSize);
                  if (isProgressive) {
                     this.stream.onReceiveProgressiveData(chunk);
                     this.progressiveDataLength = end;
                  } else {
                     this.stream.onReceiveData(begin, chunk);
                  }
                  if (this.stream.isDataLoaded) {
                     this._loadedStreamCapability.resolve(this.stream);
                  }
                  var loadedRequests = [];
                  for (var curChunk = beginChunk; curChunk < endChunk; ++curChunk) {
                     var requestIds = this._requestsByChunk.get(curChunk);
                     if (!requestIds) {
                        continue;
                     }
                     this._requestsByChunk["delete"](curChunk);
                     var _iterator13 = _createForOfIteratorHelper(requestIds),
                        _step13;
                     try {
                        for (_iterator13.s(); !(_step13 = _iterator13.n()).done; ) {
                           var requestId = _step13.value;
                           var chunksNeeded = this._chunksNeededByRequest.get(requestId);
                           if (chunksNeeded.has(curChunk)) {
                              chunksNeeded["delete"](curChunk);
                           }
                           if (chunksNeeded.size > 0) {
                              continue;
                           }
                           loadedRequests.push(requestId);
                        }
                     } catch (err) {
                        _iterator13.e(err);
                     } finally {
                        _iterator13.f();
                     }
                  }
                  if (!this.disableAutoFetch && this._requestsByChunk.size === 0) {
                     var nextEmptyChunk;
                     if (this.stream.numChunksLoaded === 1) {
                        var lastChunk = this.stream.numChunks - 1;
                        if (!this.stream.hasChunk(lastChunk)) {
                           nextEmptyChunk = lastChunk;
                        }
                     } else {
                        nextEmptyChunk = this.stream.nextEmptyChunk(endChunk);
                     }
                     if (Number.isInteger(nextEmptyChunk)) {
                        this._requestChunks([nextEmptyChunk]);
                     }
                  }
                  for (
                     var _i4 = 0, _loadedRequests = loadedRequests;
                     _i4 < _loadedRequests.length;
                     _i4++
                  ) {
                     var _requestId = _loadedRequests[_i4];
                     var capability = this._promisesByRequest.get(_requestId);
                     this._promisesByRequest["delete"](_requestId);
                     capability.resolve();
                  }
                  this.msgHandler.send("DocProgress", {
                     loaded: this.stream.numChunksLoaded * this.chunkSize,
                     total: this.length,
                  });
               },
            },
            {
               key: "onError",
               value: function onError(err) {
                  this._loadedStreamCapability.reject(err);
               },
            },
            {
               key: "getBeginChunk",
               value: function getBeginChunk(begin) {
                  return Math.floor(begin / this.chunkSize);
               },
            },
            {
               key: "getEndChunk",
               value: function getEndChunk(end) {
                  return Math.floor((end - 1) / this.chunkSize) + 1;
               },
            },
            {
               key: "abort",
               value: function abort(reason) {
                  var _this$pdfNetworkStrea;
                  this.aborted = true;
                  (_this$pdfNetworkStrea = this.pdfNetworkStream) === null ||
                  _this$pdfNetworkStrea === void 0 ||
                  _this$pdfNetworkStrea.cancelAllRequests(reason);
                  var _iterator14 = _createForOfIteratorHelper(
                        this._promisesByRequest.values(),
                     ),
                     _step14;
                  try {
                     for (_iterator14.s(); !(_step14 = _iterator14.n()).done; ) {
                        var capability = _step14.value;
                        capability.reject(reason);
                     }
                  } catch (err) {
                     _iterator14.e(err);
                  } finally {
                     _iterator14.f();
                  }
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/colorspace.js
      function resizeRgbImage(src, dest, w1, h1, w2, h2, alpha01) {
         var COMPONENTS = 3;
         alpha01 = alpha01 !== 1 ? 0 : alpha01;
         var xRatio = w1 / w2;
         var yRatio = h1 / h2;
         var newIndex = 0,
            oldIndex;
         var xScaled = new Uint16Array(w2);
         var w1Scanline = w1 * COMPONENTS;
         for (var i = 0; i < w2; i++) {
            xScaled[i] = Math.floor(i * xRatio) * COMPONENTS;
         }
         for (var _i5 = 0; _i5 < h2; _i5++) {
            var py = Math.floor(_i5 * yRatio) * w1Scanline;
            for (var j = 0; j < w2; j++) {
               oldIndex = py + xScaled[j];
               dest[newIndex++] = src[oldIndex++];
               dest[newIndex++] = src[oldIndex++];
               dest[newIndex++] = src[oldIndex++];
               newIndex += alpha01;
            }
         }
      }
      var ColorSpace = /*#__PURE__*/ (function () {
         function ColorSpace(name, numComps) {
            _classCallCheck(this, ColorSpace);
            if (this.constructor === ColorSpace) {
               unreachable("Cannot initialize ColorSpace.");
            }
            this.name = name;
            this.numComps = numComps;
         }
         return _createClass(
            ColorSpace,
            [
               {
                  key: "getRgb",
                  value: function getRgb(src, srcOffset) {
                     var rgb = new Uint8ClampedArray(3);
                     this.getRgbItem(src, srcOffset, rgb, 0);
                     return rgb;
                  },
               },
               {
                  key: "getRgbItem",
                  value: function getRgbItem(src, srcOffset, dest, destOffset) {
                     unreachable("Should not call ColorSpace.getRgbItem");
                  },
               },
               {
                  key: "getRgbBuffer",
                  value: function getRgbBuffer(
                     src,
                     srcOffset,
                     count,
                     dest,
                     destOffset,
                     bits,
                     alpha01,
                  ) {
                     unreachable("Should not call ColorSpace.getRgbBuffer");
                  },
               },
               {
                  key: "getOutputLength",
                  value: function getOutputLength(inputLength, alpha01) {
                     unreachable("Should not call ColorSpace.getOutputLength");
                  },
               },
               {
                  key: "isPassthrough",
                  value: function isPassthrough(bits) {
                     return false;
                  },
               },
               {
                  key: "isDefaultDecode",
                  value: function isDefaultDecode(decodeMap, bpc) {
                     return ColorSpace.isDefaultDecode(decodeMap, this.numComps);
                  },
               },
               {
                  key: "fillRgb",
                  value: function fillRgb(
                     dest,
                     originalWidth,
                     originalHeight,
                     width,
                     height,
                     actualHeight,
                     bpc,
                     comps,
                     alpha01,
                  ) {
                     var count = originalWidth * originalHeight;
                     var rgbBuf = null;
                     var numComponentColors = 1 << bpc;
                     var needsResizing =
                        originalHeight !== height || originalWidth !== width;
                     if (this.isPassthrough(bpc)) {
                        rgbBuf = comps;
                     } else if (
                        this.numComps === 1 &&
                        count > numComponentColors &&
                        this.name !== "DeviceGray" &&
                        this.name !== "DeviceRGB"
                     ) {
                        var allColors =
                           bpc <= 8
                              ? new Uint8Array(numComponentColors)
                              : new Uint16Array(numComponentColors);
                        for (var i = 0; i < numComponentColors; i++) {
                           allColors[i] = i;
                        }
                        var colorMap = new Uint8ClampedArray(numComponentColors * 3);
                        this.getRgbBuffer(
                           allColors,
                           0,
                           numComponentColors,
                           colorMap,
                           0,
                           bpc,
                           0,
                        );
                        if (!needsResizing) {
                           var destPos = 0;
                           for (var _i6 = 0; _i6 < count; ++_i6) {
                              var key = comps[_i6] * 3;
                              dest[destPos++] = colorMap[key];
                              dest[destPos++] = colorMap[key + 1];
                              dest[destPos++] = colorMap[key + 2];
                              destPos += alpha01;
                           }
                        } else {
                           rgbBuf = new Uint8Array(count * 3);
                           var rgbPos = 0;
                           for (var _i7 = 0; _i7 < count; ++_i7) {
                              var _key2 = comps[_i7] * 3;
                              rgbBuf[rgbPos++] = colorMap[_key2];
                              rgbBuf[rgbPos++] = colorMap[_key2 + 1];
                              rgbBuf[rgbPos++] = colorMap[_key2 + 2];
                           }
                        }
                     } else if (!needsResizing) {
                        this.getRgbBuffer(
                           comps,
                           0,
                           width * actualHeight,
                           dest,
                           0,
                           bpc,
                           alpha01,
                        );
                     } else {
                        rgbBuf = new Uint8ClampedArray(count * 3);
                        this.getRgbBuffer(comps, 0, count, rgbBuf, 0, bpc, 0);
                     }
                     if (rgbBuf) {
                        if (needsResizing) {
                           resizeRgbImage(
                              rgbBuf,
                              dest,
                              originalWidth,
                              originalHeight,
                              width,
                              height,
                              alpha01,
                           );
                        } else {
                           var _destPos = 0,
                              _rgbPos = 0;
                           for (
                              var _i8 = 0, ii = width * actualHeight;
                              _i8 < ii;
                              _i8++
                           ) {
                              dest[_destPos++] = rgbBuf[_rgbPos++];
                              dest[_destPos++] = rgbBuf[_rgbPos++];
                              dest[_destPos++] = rgbBuf[_rgbPos++];
                              _destPos += alpha01;
                           }
                        }
                     }
                  },
               },
               {
                  key: "usesZeroToOneRange",
                  get: function get() {
                     return shadow(this, "usesZeroToOneRange", true);
                  },
               },
            ],
            [
               {
                  key: "_cache",
                  value: function _cache(
                     cacheKey,
                     xref,
                     localColorSpaceCache,
                     parsedColorSpace,
                  ) {
                     if (!localColorSpaceCache) {
                        throw new Error(
                           'ColorSpace._cache - expected "localColorSpaceCache" argument.',
                        );
                     }
                     if (!parsedColorSpace) {
                        throw new Error(
                           'ColorSpace._cache - expected "parsedColorSpace" argument.',
                        );
                     }
                     var csName, csRef;
                     if (cacheKey instanceof Ref) {
                        csRef = cacheKey;
                        cacheKey = xref.fetch(cacheKey);
                     }
                     if (cacheKey instanceof Name) {
                        csName = cacheKey.name;
                     }
                     if (csName || csRef) {
                        localColorSpaceCache.set(csName, csRef, parsedColorSpace);
                     }
                  },
               },
               {
                  key: "getCached",
                  value: function getCached(cacheKey, xref, localColorSpaceCache) {
                     if (!localColorSpaceCache) {
                        throw new Error(
                           'ColorSpace.getCached - expected "localColorSpaceCache" argument.',
                        );
                     }
                     if (cacheKey instanceof Ref) {
                        var localColorSpace = localColorSpaceCache.getByRef(cacheKey);
                        if (localColorSpace) {
                           return localColorSpace;
                        }
                        try {
                           cacheKey = xref.fetch(cacheKey);
                        } catch (ex) {
                           if (ex instanceof MissingDataException) {
                              throw ex;
                           }
                        }
                     }
                     if (cacheKey instanceof Name) {
                        var _localColorSpace = localColorSpaceCache.getByName(
                           cacheKey.name,
                        );
                        if (_localColorSpace) {
                           return _localColorSpace;
                        }
                     }
                     return null;
                  },
               },
               {
                  key: "parseAsync",
                  value: (function () {
                     var _parseAsync = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee2(_ref4) {
                           var cs,
                              xref,
                              _ref4$resources,
                              resources,
                              pdfFunctionFactory,
                              localColorSpaceCache,
                              parsedColorSpace;
                           return _regenerator().w(
                              function (_context4) {
                                 while (1)
                                    switch (_context4.n) {
                                       case 0:
                                          ((cs = _ref4.cs),
                                             (xref = _ref4.xref),
                                             (_ref4$resources = _ref4.resources),
                                             (resources =
                                                _ref4$resources === void 0
                                                   ? null
                                                   : _ref4$resources),
                                             (pdfFunctionFactory = _ref4.pdfFunctionFactory),
                                             (localColorSpaceCache =
                                                _ref4.localColorSpaceCache));
                                          parsedColorSpace = this._parse(
                                             cs,
                                             xref,
                                             resources,
                                             pdfFunctionFactory,
                                          );
                                          this._cache(
                                             cs,
                                             xref,
                                             localColorSpaceCache,
                                             parsedColorSpace,
                                          );
                                          return _context4.a(2, parsedColorSpace);
                                    }
                              },
                              _callee2,
                              this,
                           );
                        }),
                     );
                     function parseAsync(_x4) {
                        return _parseAsync.apply(this, arguments);
                     }
                     return parseAsync;
                  })(),
               },
               {
                  key: "parse",
                  value: function parse(_ref5) {
                     var cs = _ref5.cs,
                        xref = _ref5.xref,
                        _ref5$resources = _ref5.resources,
                        resources = _ref5$resources === void 0 ? null : _ref5$resources,
                        pdfFunctionFactory = _ref5.pdfFunctionFactory,
                        localColorSpaceCache = _ref5.localColorSpaceCache;
                     var cachedColorSpace = this.getCached(
                        cs,
                        xref,
                        localColorSpaceCache,
                     );
                     if (cachedColorSpace) {
                        return cachedColorSpace;
                     }
                     var parsedColorSpace = this._parse(
                        cs,
                        xref,
                        resources,
                        pdfFunctionFactory,
                     );
                     this._cache(cs, xref, localColorSpaceCache, parsedColorSpace);
                     return parsedColorSpace;
                  },
               },
               {
                  key: "_parse",
                  value: function _parse(cs, xref) {
                     var resources =
                        arguments.length > 2 && arguments[2] !== undefined
                           ? arguments[2]
                           : null;
                     var pdfFunctionFactory =
                        arguments.length > 3 ? arguments[3] : undefined;
                     cs = xref.fetchIfRef(cs);
                     if (cs instanceof Name) {
                        switch (cs.name) {
                           case "G":
                           case "DeviceGray":
                              return this.singletons.gray;
                           case "RGB":
                           case "DeviceRGB":
                              return this.singletons.rgb;
                           case "CMYK":
                           case "DeviceCMYK":
                              return this.singletons.cmyk;
                           case "Pattern":
                              return new PatternCS(null);
                           default:
                              if (resources instanceof Dict) {
                                 var colorSpaces = resources.get("ColorSpace");
                                 if (colorSpaces instanceof Dict) {
                                    var resourcesCS = colorSpaces.get(cs.name);
                                    if (resourcesCS) {
                                       if (resourcesCS instanceof Name) {
                                          return this._parse(
                                             resourcesCS,
                                             xref,
                                             resources,
                                             pdfFunctionFactory,
                                          );
                                       }
                                       cs = resourcesCS;
                                       break;
                                    }
                                 }
                              }
                              throw new FormatError(
                                 "Unrecognized ColorSpace: ".concat(cs.name),
                              );
                        }
                     }
                     if (Array.isArray(cs)) {
                        var mode = xref.fetchIfRef(cs[0]).name;
                        var params, numComps, baseCS, whitePoint, blackPoint, gamma;
                        switch (mode) {
                           case "G":
                           case "DeviceGray":
                              return this.singletons.gray;
                           case "RGB":
                           case "DeviceRGB":
                              return this.singletons.rgb;
                           case "CMYK":
                           case "DeviceCMYK":
                              return this.singletons.cmyk;
                           case "CalGray":
                              params = xref.fetchIfRef(cs[1]);
                              whitePoint = params.getArray("WhitePoint");
                              blackPoint = params.getArray("BlackPoint");
                              gamma = params.get("Gamma");
                              return new CalGrayCS(whitePoint, blackPoint, gamma);
                           case "CalRGB":
                              params = xref.fetchIfRef(cs[1]);
                              whitePoint = params.getArray("WhitePoint");
                              blackPoint = params.getArray("BlackPoint");
                              gamma = params.getArray("Gamma");
                              var matrix = params.getArray("Matrix");
                              return new CalRGBCS(whitePoint, blackPoint, gamma, matrix);
                           case "ICCBased":
                              var stream = xref.fetchIfRef(cs[1]);
                              var dict = stream.dict;
                              numComps = dict.get("N");
                              var alt = dict.get("Alternate");
                              if (alt) {
                                 var altCS = this._parse(
                                    alt,
                                    xref,
                                    resources,
                                    pdfFunctionFactory,
                                 );
                                 if (altCS.numComps === numComps) {
                                    return altCS;
                                 }
                                 warn(
                                    "ICCBased color space: Ignoring incorrect /Alternate entry.",
                                 );
                              }
                              if (numComps === 1) {
                                 return this.singletons.gray;
                              } else if (numComps === 3) {
                                 return this.singletons.rgb;
                              } else if (numComps === 4) {
                                 return this.singletons.cmyk;
                              }
                              break;
                           case "Pattern":
                              baseCS = cs[1] || null;
                              if (baseCS) {
                                 baseCS = this._parse(
                                    baseCS,
                                    xref,
                                    resources,
                                    pdfFunctionFactory,
                                 );
                              }
                              return new PatternCS(baseCS);
                           case "I":
                           case "Indexed":
                              baseCS = this._parse(
                                 cs[1],
                                 xref,
                                 resources,
                                 pdfFunctionFactory,
                              );
                              var hiVal = xref.fetchIfRef(cs[2]) + 1;
                              var lookup = xref.fetchIfRef(cs[3]);
                              return new IndexedCS(baseCS, hiVal, lookup);
                           case "Separation":
                           case "DeviceN":
                              var name = xref.fetchIfRef(cs[1]);
                              numComps = Array.isArray(name) ? name.length : 1;
                              baseCS = this._parse(
                                 cs[2],
                                 xref,
                                 resources,
                                 pdfFunctionFactory,
                              );
                              var tintFn = pdfFunctionFactory.create(cs[3]);
                              return new AlternateCS(numComps, baseCS, tintFn);
                           case "Lab":
                              params = xref.fetchIfRef(cs[1]);
                              whitePoint = params.getArray("WhitePoint");
                              blackPoint = params.getArray("BlackPoint");
                              var range = params.getArray("Range");
                              return new LabCS(whitePoint, blackPoint, range);
                           default:
                              throw new FormatError(
                                 "Unimplemented ColorSpace object: ".concat(mode),
                              );
                        }
                     }
                     throw new FormatError(
                        "Unrecognized ColorSpace object: ".concat(cs),
                     );
                  },
               },
               {
                  key: "isDefaultDecode",
                  value: function isDefaultDecode(decode, numComps) {
                     if (!Array.isArray(decode)) {
                        return true;
                     }
                     if (numComps * 2 !== decode.length) {
                        warn("The decode map is not the correct length");
                        return true;
                     }
                     for (var i = 0, ii = decode.length; i < ii; i += 2) {
                        if (decode[i] !== 0 || decode[i + 1] !== 1) {
                           return false;
                        }
                     }
                     return true;
                  },
               },
               {
                  key: "singletons",
                  get: function get() {
                     return shadow(this, "singletons", {
                        get gray() {
                           return shadow(this, "gray", new DeviceGrayCS());
                        },
                        get rgb() {
                           return shadow(this, "rgb", new DeviceRgbCS());
                        },
                        get cmyk() {
                           return shadow(this, "cmyk", new DeviceCmykCS());
                        },
                     });
                  },
               },
            ],
         );
      })();
      var AlternateCS = /*#__PURE__*/ (function (_ColorSpace) {
         function AlternateCS(numComps, base, tintFn) {
            var _this9;
            _classCallCheck(this, AlternateCS);
            _this9 = _callSuper(this, AlternateCS, ["Alternate", numComps]);
            _this9.base = base;
            _this9.tintFn = tintFn;
            _this9.tmpBuf = new Float32Array(base.numComps);
            return _this9;
         }
         _inherits(AlternateCS, _ColorSpace);
         return _createClass(AlternateCS, [
            {
               key: "getRgbItem",
               value: function getRgbItem(src, srcOffset, dest, destOffset) {
                  var tmpBuf = this.tmpBuf;
                  this.tintFn(src, srcOffset, tmpBuf, 0);
                  this.base.getRgbItem(tmpBuf, 0, dest, destOffset);
               },
            },
            {
               key: "getRgbBuffer",
               value: function getRgbBuffer(
                  src,
                  srcOffset,
                  count,
                  dest,
                  destOffset,
                  bits,
                  alpha01,
               ) {
                  var tintFn = this.tintFn;
                  var base = this.base;
                  var scale = 1 / ((1 << bits) - 1);
                  var baseNumComps = base.numComps;
                  var usesZeroToOneRange = base.usesZeroToOneRange;
                  var isPassthrough =
                     (base.isPassthrough(8) || !usesZeroToOneRange) && alpha01 === 0;
                  var pos = isPassthrough ? destOffset : 0;
                  var baseBuf = isPassthrough
                     ? dest
                     : new Uint8ClampedArray(baseNumComps * count);
                  var numComps = this.numComps;
                  var scaled = new Float32Array(numComps);
                  var tinted = new Float32Array(baseNumComps);
                  var i, j;
                  for (i = 0; i < count; i++) {
                     for (j = 0; j < numComps; j++) {
                        scaled[j] = src[srcOffset++] * scale;
                     }
                     tintFn(scaled, 0, tinted, 0);
                     if (usesZeroToOneRange) {
                        for (j = 0; j < baseNumComps; j++) {
                           baseBuf[pos++] = tinted[j] * 255;
                        }
                     } else {
                        base.getRgbItem(tinted, 0, baseBuf, pos);
                        pos += baseNumComps;
                     }
                  }
                  if (!isPassthrough) {
                     base.getRgbBuffer(
                        baseBuf,
                        0,
                        count,
                        dest,
                        destOffset,
                        8,
                        alpha01,
                     );
                  }
               },
            },
            {
               key: "getOutputLength",
               value: function getOutputLength(inputLength, alpha01) {
                  return this.base.getOutputLength(
                     (inputLength * this.base.numComps) / this.numComps,
                     alpha01,
                  );
               },
            },
         ]);
      })(ColorSpace);
      var PatternCS = /*#__PURE__*/ (function (_ColorSpace2) {
         function PatternCS(baseCS) {
            var _this0;
            _classCallCheck(this, PatternCS);
            _this0 = _callSuper(this, PatternCS, ["Pattern", null]);
            _this0.base = baseCS;
            return _this0;
         }
         _inherits(PatternCS, _ColorSpace2);
         return _createClass(PatternCS, [
            {
               key: "isDefaultDecode",
               value: function isDefaultDecode(decodeMap, bpc) {
                  unreachable("Should not call PatternCS.isDefaultDecode");
               },
            },
         ]);
      })(ColorSpace);
      var IndexedCS = /*#__PURE__*/ (function (_ColorSpace3) {
         function IndexedCS(base, highVal, lookup) {
            var _this1;
            _classCallCheck(this, IndexedCS);
            _this1 = _callSuper(this, IndexedCS, ["Indexed", 1]);
            _this1.base = base;
            _this1.highVal = highVal;
            var length = base.numComps * highVal;
            _this1.lookup = new Uint8Array(length);
            if (lookup instanceof BaseStream) {
               var bytes = lookup.getBytes(length);
               _this1.lookup.set(bytes);
            } else if (typeof lookup === "string") {
               for (var i = 0; i < length; ++i) {
                  _this1.lookup[i] = lookup.charCodeAt(i) & 0xff;
               }
            } else {
               throw new FormatError(
                  "IndexedCS - unrecognized lookup table: ".concat(lookup),
               );
            }
            return _this1;
         }
         _inherits(IndexedCS, _ColorSpace3);
         return _createClass(IndexedCS, [
            {
               key: "getRgbItem",
               value: function getRgbItem(src, srcOffset, dest, destOffset) {
                  var numComps = this.base.numComps;
                  var start = src[srcOffset] * numComps;
                  this.base.getRgbBuffer(
                     this.lookup,
                     start,
                     1,
                     dest,
                     destOffset,
                     8,
                     0,
                  );
               },
            },
            {
               key: "getRgbBuffer",
               value: function getRgbBuffer(
                  src,
                  srcOffset,
                  count,
                  dest,
                  destOffset,
                  bits,
                  alpha01,
               ) {
                  var base = this.base;
                  var numComps = base.numComps;
                  var outputDelta = base.getOutputLength(numComps, alpha01);
                  var lookup = this.lookup;
                  for (var i = 0; i < count; ++i) {
                     var lookupPos = src[srcOffset++] * numComps;
                     base.getRgbBuffer(
                        lookup,
                        lookupPos,
                        1,
                        dest,
                        destOffset,
                        8,
                        alpha01,
                     );
                     destOffset += outputDelta;
                  }
               },
            },
            {
               key: "getOutputLength",
               value: function getOutputLength(inputLength, alpha01) {
                  return this.base.getOutputLength(
                     inputLength * this.base.numComps,
                     alpha01,
                  );
               },
            },
            {
               key: "isDefaultDecode",
               value: function isDefaultDecode(decodeMap, bpc) {
                  if (!Array.isArray(decodeMap)) {
                     return true;
                  }
                  if (decodeMap.length !== 2) {
                     warn("Decode map length is not correct");
                     return true;
                  }
                  if (!Number.isInteger(bpc) || bpc < 1) {
                     warn("Bits per component is not correct");
                     return true;
                  }
                  return decodeMap[0] === 0 && decodeMap[1] === (1 << bpc) - 1;
               },
            },
         ]);
      })(ColorSpace);
      var DeviceGrayCS = /*#__PURE__*/ (function (_ColorSpace4) {
         function DeviceGrayCS() {
            _classCallCheck(this, DeviceGrayCS);
            return _callSuper(this, DeviceGrayCS, ["DeviceGray", 1]);
         }
         _inherits(DeviceGrayCS, _ColorSpace4);
         return _createClass(DeviceGrayCS, [
            {
               key: "getRgbItem",
               value: function getRgbItem(src, srcOffset, dest, destOffset) {
                  var c = src[srcOffset] * 255;
                  dest[destOffset] = dest[destOffset + 1] = dest[destOffset + 2] = c;
               },
            },
            {
               key: "getRgbBuffer",
               value: function getRgbBuffer(
                  src,
                  srcOffset,
                  count,
                  dest,
                  destOffset,
                  bits,
                  alpha01,
               ) {
                  var scale = 255 / ((1 << bits) - 1);
                  var j = srcOffset,
                     q = destOffset;
                  for (var i = 0; i < count; ++i) {
                     var c = scale * src[j++];
                     dest[q++] = c;
                     dest[q++] = c;
                     dest[q++] = c;
                     q += alpha01;
                  }
               },
            },
            {
               key: "getOutputLength",
               value: function getOutputLength(inputLength, alpha01) {
                  return inputLength * (3 + alpha01);
               },
            },
         ]);
      })(ColorSpace);
      var DeviceRgbCS = /*#__PURE__*/ (function (_ColorSpace5) {
         function DeviceRgbCS() {
            _classCallCheck(this, DeviceRgbCS);
            return _callSuper(this, DeviceRgbCS, ["DeviceRGB", 3]);
         }
         _inherits(DeviceRgbCS, _ColorSpace5);
         return _createClass(DeviceRgbCS, [
            {
               key: "getRgbItem",
               value: function getRgbItem(src, srcOffset, dest, destOffset) {
                  dest[destOffset] = src[srcOffset] * 255;
                  dest[destOffset + 1] = src[srcOffset + 1] * 255;
                  dest[destOffset + 2] = src[srcOffset + 2] * 255;
               },
            },
            {
               key: "getRgbBuffer",
               value: function getRgbBuffer(
                  src,
                  srcOffset,
                  count,
                  dest,
                  destOffset,
                  bits,
                  alpha01,
               ) {
                  if (bits === 8 && alpha01 === 0) {
                     dest.set(
                        src.subarray(srcOffset, srcOffset + count * 3),
                        destOffset,
                     );
                     return;
                  }
                  var scale = 255 / ((1 << bits) - 1);
                  var j = srcOffset,
                     q = destOffset;
                  for (var i = 0; i < count; ++i) {
                     dest[q++] = scale * src[j++];
                     dest[q++] = scale * src[j++];
                     dest[q++] = scale * src[j++];
                     q += alpha01;
                  }
               },
            },
            {
               key: "getOutputLength",
               value: function getOutputLength(inputLength, alpha01) {
                  return ((inputLength * (3 + alpha01)) / 3) | 0;
               },
            },
            {
               key: "isPassthrough",
               value: function isPassthrough(bits) {
                  return bits === 8;
               },
            },
         ]);
      })(ColorSpace);
      var _DeviceCmykCS_brand = /*#__PURE__*/ new WeakSet();
      var DeviceCmykCS = /*#__PURE__*/ (function (_ColorSpace6) {
         function DeviceCmykCS() {
            var _this10;
            _classCallCheck(this, DeviceCmykCS);
            _this10 = _callSuper(this, DeviceCmykCS, ["DeviceCMYK", 4]);
            _classPrivateMethodInitSpec(_this10, _DeviceCmykCS_brand);
            return _this10;
         }
         _inherits(DeviceCmykCS, _ColorSpace6);
         return _createClass(DeviceCmykCS, [
            {
               key: "getRgbItem",
               value: function getRgbItem(src, srcOffset, dest, destOffset) {
                  _assertClassBrand(_DeviceCmykCS_brand, this, _toRgb).call(
                     this,
                     src,
                     srcOffset,
                     1,
                     dest,
                     destOffset,
                  );
               },
            },
            {
               key: "getRgbBuffer",
               value: function getRgbBuffer(
                  src,
                  srcOffset,
                  count,
                  dest,
                  destOffset,
                  bits,
                  alpha01,
               ) {
                  var scale = 1 / ((1 << bits) - 1);
                  for (var i = 0; i < count; i++) {
                     _assertClassBrand(_DeviceCmykCS_brand, this, _toRgb).call(
                        this,
                        src,
                        srcOffset,
                        scale,
                        dest,
                        destOffset,
                     );
                     srcOffset += 4;
                     destOffset += 3 + alpha01;
                  }
               },
            },
            {
               key: "getOutputLength",
               value: function getOutputLength(inputLength, alpha01) {
                  return ((inputLength / 4) * (3 + alpha01)) | 0;
               },
            },
         ]);
      })(ColorSpace);
      function _toRgb(src, srcOffset, srcScale, dest, destOffset) {
         var c = src[srcOffset] * srcScale;
         var m = src[srcOffset + 1] * srcScale;
         var y = src[srcOffset + 2] * srcScale;
         var k = src[srcOffset + 3] * srcScale;
         dest[destOffset] =
            255 +
            c *
            (-4.387332384609988 * c +
               54.48615194189176 * m +
               18.82290502165302 * y +
               212.25662451639585 * k +
               -285.2331026137004) +
            m *
            (1.7149763477362134 * m -
               5.6096736904047315 * y +
               -17.873870861415444 * k -
               5.497006427196366) +
            y *
            (-2.5217340131683033 * y -
               21.248923337353073 * k +
               17.5119270841813) +
            k * (-21.86122147463605 * k - 189.48180835922747);
         dest[destOffset + 1] =
            255 +
            c *
            (8.841041422036149 * c +
               60.118027045597366 * m +
               6.871425592049007 * y +
               31.159100130055922 * k +
               -79.2970844816548) +
            m *
            (-15.310361306967817 * m +
               17.575251261109482 * y +
               131.35250912493976 * k -
               190.9453302588951) +
            y * (4.444339102852739 * y + 9.8632861493405 * k - 24.86741582555878) +
            k * (-20.737325471181034 * k - 187.80453709719578);
         dest[destOffset + 2] =
            255 +
            c *
            (0.8842522430003296 * c +
               8.078677503112928 * m +
               30.89978309703729 * y -
               0.23883238689178934 * k +
               -14.183576799673286) +
            m *
            (10.49593273432072 * m +
               63.02378494754052 * y +
               50.606957656360734 * k -
               112.23884253719248) +
            y *
            (0.03296041114873217 * y +
               115.60384449646641 * k +
               -193.58209356861505) +
            k * (-22.33816807309886 * k - 180.12613974708367);
      }
      var _CalGrayCS_brand = /*#__PURE__*/ new WeakSet();
      var CalGrayCS = /*#__PURE__*/ (function (_ColorSpace7) {
         function CalGrayCS(whitePoint, blackPoint, gamma) {
            var _this11;
            _classCallCheck(this, CalGrayCS);
            _this11 = _callSuper(this, CalGrayCS, ["CalGray", 1]);
            _classPrivateMethodInitSpec(_this11, _CalGrayCS_brand);
            if (!whitePoint) {
               throw new FormatError(
                  "WhitePoint missing - required for color space CalGray",
               );
            }
            var _whitePoint = _slicedToArray(whitePoint, 3);
            _this11.XW = _whitePoint[0];
            _this11.YW = _whitePoint[1];
            _this11.ZW = _whitePoint[2];
            var _ref6 = blackPoint || [0, 0, 0];
            var _ref7 = _slicedToArray(_ref6, 3);
            _this11.XB = _ref7[0];
            _this11.YB = _ref7[1];
            _this11.ZB = _ref7[2];
            _this11.G = gamma || 1;
            if (_this11.XW < 0 || _this11.ZW < 0 || _this11.YW !== 1) {
               throw new FormatError(
                  "Invalid WhitePoint components for ".concat(
                     _this11.name,
                     ", no fallback available",
                  ),
               );
            }
            if (_this11.XB < 0 || _this11.YB < 0 || _this11.ZB < 0) {
               info(
                  "Invalid BlackPoint for ".concat(
                     _this11.name,
                     ", falling back to default.",
                  ),
               );
               _this11.XB = _this11.YB = _this11.ZB = 0;
            }
            if (_this11.XB !== 0 || _this11.YB !== 0 || _this11.ZB !== 0) {
               warn(
                  ""
                     .concat(_this11.name, ", BlackPoint: XB: ")
                     .concat(_this11.XB, ", YB: ")
                     .concat(_this11.YB, ", ") +
                  "ZB: ".concat(_this11.ZB, ", only default values are supported."),
               );
            }
            if (_this11.G < 1) {
               info(
                  "Invalid Gamma: "
                     .concat(_this11.G, " for ")
                     .concat(_this11.name, ", falling back to default."),
               );
               _this11.G = 1;
            }
            return _this11;
         }
         _inherits(CalGrayCS, _ColorSpace7);
         return _createClass(CalGrayCS, [
            {
               key: "getRgbItem",
               value: function getRgbItem(src, srcOffset, dest, destOffset) {
                  _assertClassBrand(_CalGrayCS_brand, this, _toRgb2).call(
                     this,
                     src,
                     srcOffset,
                     dest,
                     destOffset,
                     1,
                  );
               },
            },
            {
               key: "getRgbBuffer",
               value: function getRgbBuffer(
                  src,
                  srcOffset,
                  count,
                  dest,
                  destOffset,
                  bits,
                  alpha01,
               ) {
                  var scale = 1 / ((1 << bits) - 1);
                  for (var i = 0; i < count; ++i) {
                     _assertClassBrand(_CalGrayCS_brand, this, _toRgb2).call(
                        this,
                        src,
                        srcOffset,
                        dest,
                        destOffset,
                        scale,
                     );
                     srcOffset += 1;
                     destOffset += 3 + alpha01;
                  }
               },
            },
            {
               key: "getOutputLength",
               value: function getOutputLength(inputLength, alpha01) {
                  return inputLength * (3 + alpha01);
               },
            },
         ]);
      })(ColorSpace);
      function _toRgb2(src, srcOffset, dest, destOffset, scale) {
         var A = src[srcOffset] * scale;
         var AG = Math.pow(A, this.G);
         var L = this.YW * AG;
         var val = Math.max(295.8 * Math.pow(L, 0.3333333333333333) - 40.8, 0);
         dest[destOffset] = val;
         dest[destOffset + 1] = val;
         dest[destOffset + 2] = val;
      }
      var _CalRGBCS_brand = /*#__PURE__*/ new WeakSet();
      var CalRGBCS = /*#__PURE__*/ (function (_ColorSpace8) {
         function CalRGBCS(whitePoint, blackPoint, gamma, matrix) {
            var _this12;
            _classCallCheck(this, CalRGBCS);
            _this12 = _callSuper(this, CalRGBCS, ["CalRGB", 3]);
            _classPrivateMethodInitSpec(_this12, _CalRGBCS_brand);
            if (!whitePoint) {
               throw new FormatError(
                  "WhitePoint missing - required for color space CalRGB",
               );
            }
            var _this12$whitePoint = (_this12.whitePoint = whitePoint),
               _this12$whitePoint2 = _slicedToArray(_this12$whitePoint, 3),
               XW = _this12$whitePoint2[0],
               YW = _this12$whitePoint2[1],
               ZW = _this12$whitePoint2[2];
            var _this12$blackPoint = (_this12.blackPoint =
                  blackPoint || new Float32Array(3)),
               _this12$blackPoint2 = _slicedToArray(_this12$blackPoint, 3),
               XB = _this12$blackPoint2[0],
               YB = _this12$blackPoint2[1],
               ZB = _this12$blackPoint2[2];
            var _ref8 = gamma || new Float32Array([1, 1, 1]);
            var _ref9 = _slicedToArray(_ref8, 3);
            _this12.GR = _ref9[0];
            _this12.GG = _ref9[1];
            _this12.GB = _ref9[2];
            var _ref0 = matrix || new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1]);
            var _ref1 = _slicedToArray(_ref0, 9);
            _this12.MXA = _ref1[0];
            _this12.MYA = _ref1[1];
            _this12.MZA = _ref1[2];
            _this12.MXB = _ref1[3];
            _this12.MYB = _ref1[4];
            _this12.MZB = _ref1[5];
            _this12.MXC = _ref1[6];
            _this12.MYC = _ref1[7];
            _this12.MZC = _ref1[8];
            if (XW < 0 || ZW < 0 || YW !== 1) {
               throw new FormatError(
                  "Invalid WhitePoint components for ".concat(
                     _this12.name,
                     ", no fallback available",
                  ),
               );
            }
            if (XB < 0 || YB < 0 || ZB < 0) {
               info(
                  "Invalid BlackPoint for "
                     .concat(_this12.name, " [")
                     .concat(XB, ", ")
                     .concat(YB, ", ")
                     .concat(ZB, "], ") + "falling back to default.",
               );
               _this12.blackPoint = new Float32Array(3);
            }
            if (_this12.GR < 0 || _this12.GG < 0 || _this12.GB < 0) {
               info(
                  "Invalid Gamma ["
                     .concat(_this12.GR, ", ")
                     .concat(_this12.GG, ", ")
                     .concat(_this12.GB, "] for ") +
                  "".concat(_this12.name, ", falling back to default."),
               );
               _this12.GR = _this12.GG = _this12.GB = 1;
            }
            return _this12;
         }
         _inherits(CalRGBCS, _ColorSpace8);
         return _createClass(CalRGBCS, [
            {
               key: "getRgbItem",
               value: function getRgbItem(src, srcOffset, dest, destOffset) {
                  _assertClassBrand(_CalRGBCS_brand, this, _toRgb3).call(
                     this,
                     src,
                     srcOffset,
                     dest,
                     destOffset,
                     1,
                  );
               },
            },
            {
               key: "getRgbBuffer",
               value: function getRgbBuffer(
                  src,
                  srcOffset,
                  count,
                  dest,
                  destOffset,
                  bits,
                  alpha01,
               ) {
                  var scale = 1 / ((1 << bits) - 1);
                  for (var i = 0; i < count; ++i) {
                     _assertClassBrand(_CalRGBCS_brand, this, _toRgb3).call(
                        this,
                        src,
                        srcOffset,
                        dest,
                        destOffset,
                        scale,
                     );
                     srcOffset += 3;
                     destOffset += 3 + alpha01;
                  }
               },
            },
            {
               key: "getOutputLength",
               value: function getOutputLength(inputLength, alpha01) {
                  return ((inputLength * (3 + alpha01)) / 3) | 0;
               },
            },
         ]);
      })(ColorSpace);
      function _matrixProduct(a, b, result) {
         result[0] = a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
         result[1] = a[3] * b[0] + a[4] * b[1] + a[5] * b[2];
         result[2] = a[6] * b[0] + a[7] * b[1] + a[8] * b[2];
      }
      function _toFlat(sourceWhitePoint, LMS, result) {
         result[0] = (LMS[0] * 1) / sourceWhitePoint[0];
         result[1] = (LMS[1] * 1) / sourceWhitePoint[1];
         result[2] = (LMS[2] * 1) / sourceWhitePoint[2];
      }
      function _toD(sourceWhitePoint, LMS, result) {
         var D65X = 0.95047;
         var D65Y = 1;
         var D65Z = 1.08883;
         result[0] = (LMS[0] * D65X) / sourceWhitePoint[0];
         result[1] = (LMS[1] * D65Y) / sourceWhitePoint[1];
         result[2] = (LMS[2] * D65Z) / sourceWhitePoint[2];
      }
      function _sRGBTransferFunction(color) {
         if (color <= 0.0031308) {
            return _assertClassBrand(_CalRGBCS_brand, this, _adjustToRange).call(
               this,
               0,
               1,
               12.92 * color,
            );
         }
         if (color >= 0.99554525) {
            return 1;
         }
         return _assertClassBrand(_CalRGBCS_brand, this, _adjustToRange).call(
            this,
            0,
            1,
            (1 + 0.055) * Math.pow(color, 1 / 2.4) - 0.055,
         );
      }
      function _adjustToRange(min, max, value) {
         return Math.max(min, Math.min(max, value));
      }
      function _decodeL(L) {
         if (L < 0) {
            return -_assertClassBrand(_CalRGBCS_brand, this, _decodeL).call(
               this,
               -L,
            );
         }
         if (L > 8.0) {
            return Math.pow((L + 16) / 116, 3);
         }
         return L * _DECODE_L_CONSTANT._;
      }
      function _compensateBlackPoint(sourceBlackPoint, XYZ_Flat, result) {
         if (
            sourceBlackPoint[0] === 0 &&
            sourceBlackPoint[1] === 0 &&
            sourceBlackPoint[2] === 0
         ) {
            result[0] = XYZ_Flat[0];
            result[1] = XYZ_Flat[1];
            result[2] = XYZ_Flat[2];
            return;
         }
         var zeroDecodeL = _assertClassBrand(_CalRGBCS_brand, this, _decodeL).call(
            this,
            0,
         );
         var X_DST = zeroDecodeL;
         var X_SRC = _assertClassBrand(_CalRGBCS_brand, this, _decodeL).call(
            this,
            sourceBlackPoint[0],
         );
         var Y_DST = zeroDecodeL;
         var Y_SRC = _assertClassBrand(_CalRGBCS_brand, this, _decodeL).call(
            this,
            sourceBlackPoint[1],
         );
         var Z_DST = zeroDecodeL;
         var Z_SRC = _assertClassBrand(_CalRGBCS_brand, this, _decodeL).call(
            this,
            sourceBlackPoint[2],
         );
         var X_Scale = (1 - X_DST) / (1 - X_SRC);
         var X_Offset = 1 - X_Scale;
         var Y_Scale = (1 - Y_DST) / (1 - Y_SRC);
         var Y_Offset = 1 - Y_Scale;
         var Z_Scale = (1 - Z_DST) / (1 - Z_SRC);
         var Z_Offset = 1 - Z_Scale;
         result[0] = XYZ_Flat[0] * X_Scale + X_Offset;
         result[1] = XYZ_Flat[1] * Y_Scale + Y_Offset;
         result[2] = XYZ_Flat[2] * Z_Scale + Z_Offset;
      }
      function _normalizeWhitePointToFlat(sourceWhitePoint, XYZ_In, result) {
         if (sourceWhitePoint[0] === 1 && sourceWhitePoint[2] === 1) {
            result[0] = XYZ_In[0];
            result[1] = XYZ_In[1];
            result[2] = XYZ_In[2];
            return;
         }
         var LMS = result;
         _assertClassBrand(_CalRGBCS_brand, this, _matrixProduct).call(
            this,
            _BRADFORD_SCALE_MATRIX._,
            XYZ_In,
            LMS,
         );
         var LMS_Flat = _tempNormalizeMatrix._;
         _assertClassBrand(_CalRGBCS_brand, this, _toFlat).call(
            this,
            sourceWhitePoint,
            LMS,
            LMS_Flat,
         );
         _assertClassBrand(_CalRGBCS_brand, this, _matrixProduct).call(
            this,
            _BRADFORD_SCALE_INVERSE_MATRIX._,
            LMS_Flat,
            result,
         );
      }
      function _normalizeWhitePointToD(sourceWhitePoint, XYZ_In, result) {
         var LMS = result;
         _assertClassBrand(_CalRGBCS_brand, this, _matrixProduct).call(
            this,
            _BRADFORD_SCALE_MATRIX._,
            XYZ_In,
            LMS,
         );
         var LMS_D65 = _tempNormalizeMatrix._;
         _assertClassBrand(_CalRGBCS_brand, this, _toD).call(
            this,
            sourceWhitePoint,
            LMS,
            LMS_D65,
         );
         _assertClassBrand(_CalRGBCS_brand, this, _matrixProduct).call(
            this,
            _BRADFORD_SCALE_INVERSE_MATRIX._,
            LMS_D65,
            result,
         );
      }
      function _toRgb3(src, srcOffset, dest, destOffset, scale) {
         var A = _assertClassBrand(_CalRGBCS_brand, this, _adjustToRange).call(
            this,
            0,
            1,
            src[srcOffset] * scale,
         );
         var B = _assertClassBrand(_CalRGBCS_brand, this, _adjustToRange).call(
            this,
            0,
            1,
            src[srcOffset + 1] * scale,
         );
         var C = _assertClassBrand(_CalRGBCS_brand, this, _adjustToRange).call(
            this,
            0,
            1,
            src[srcOffset + 2] * scale,
         );
         var AGR = A === 1 ? 1 : Math.pow(A, this.GR);
         var BGG = B === 1 ? 1 : Math.pow(B, this.GG);
         var CGB = C === 1 ? 1 : Math.pow(C, this.GB);
         var X = this.MXA * AGR + this.MXB * BGG + this.MXC * CGB;
         var Y = this.MYA * AGR + this.MYB * BGG + this.MYC * CGB;
         var Z = this.MZA * AGR + this.MZB * BGG + this.MZC * CGB;
         var XYZ = _tempConvertMatrix._;
         XYZ[0] = X;
         XYZ[1] = Y;
         XYZ[2] = Z;
         var XYZ_Flat = _tempConvertMatrix2._;
         _assertClassBrand(_CalRGBCS_brand, this, _normalizeWhitePointToFlat).call(
            this,
            this.whitePoint,
            XYZ,
            XYZ_Flat,
         );
         var XYZ_Black = _tempConvertMatrix._;
         _assertClassBrand(_CalRGBCS_brand, this, _compensateBlackPoint).call(
            this,
            this.blackPoint,
            XYZ_Flat,
            XYZ_Black,
         );
         var XYZ_D65 = _tempConvertMatrix2._;
         _assertClassBrand(_CalRGBCS_brand, this, _normalizeWhitePointToD).call(
            this,
            _FLAT_WHITEPOINT_MATRIX._,
            XYZ_Black,
            XYZ_D65,
         );
         var SRGB = _tempConvertMatrix._;
         _assertClassBrand(_CalRGBCS_brand, this, _matrixProduct).call(
            this,
            _SRGB_D65_XYZ_TO_RGB_MATRIX._,
            XYZ_D65,
            SRGB,
         );
         dest[destOffset] =
            _assertClassBrand(_CalRGBCS_brand, this, _sRGBTransferFunction).call(
               this,
               SRGB[0],
            ) * 255;
         dest[destOffset + 1] =
            _assertClassBrand(_CalRGBCS_brand, this, _sRGBTransferFunction).call(
               this,
               SRGB[1],
            ) * 255;
         dest[destOffset + 2] =
            _assertClassBrand(_CalRGBCS_brand, this, _sRGBTransferFunction).call(
               this,
               SRGB[2],
            ) * 255;
      }
      var _BRADFORD_SCALE_MATRIX = {
         _: new Float32Array([
            0.8951, 0.2664, -0.1614, -0.7502, 1.7135, 0.0367, 0.0389, -0.0685,
            1.0296,
         ]),
      };
      var _BRADFORD_SCALE_INVERSE_MATRIX = {
         _: new Float32Array([
            0.9869929, -0.1470543, 0.1599627, 0.4323053, 0.5183603, 0.0492912,
            -0.0085287, 0.0400428, 0.9684867,
         ]),
      };
      var _SRGB_D65_XYZ_TO_RGB_MATRIX = {
         _: new Float32Array([
            3.2404542, -1.5371385, -0.4985314, -0.969266, 1.8760108, 0.041556,
            0.0556434, -0.2040259, 1.0572252,
         ]),
      };
      var _FLAT_WHITEPOINT_MATRIX = { _: new Float32Array([1, 1, 1]) };
      var _tempNormalizeMatrix = { _: new Float32Array(3) };
      var _tempConvertMatrix = { _: new Float32Array(3) };
      var _tempConvertMatrix2 = { _: new Float32Array(3) };
      var _DECODE_L_CONSTANT = { _: Math.pow((8 + 16) / 116, 3) / 8.0 };
      var _LabCS_brand = /*#__PURE__*/ new WeakSet();
      var LabCS = /*#__PURE__*/ (function (_ColorSpace9) {
         function LabCS(whitePoint, blackPoint, range) {
            var _this13;
            _classCallCheck(this, LabCS);
            _this13 = _callSuper(this, LabCS, ["Lab", 3]);
            _classPrivateMethodInitSpec(_this13, _LabCS_brand);
            if (!whitePoint) {
               throw new FormatError(
                  "WhitePoint missing - required for color space Lab",
               );
            }
            var _whitePoint2 = _slicedToArray(whitePoint, 3);
            _this13.XW = _whitePoint2[0];
            _this13.YW = _whitePoint2[1];
            _this13.ZW = _whitePoint2[2];
            var _ref10 = range || [-100, 100, -100, 100];
            var _ref11 = _slicedToArray(_ref10, 4);
            _this13.amin = _ref11[0];
            _this13.amax = _ref11[1];
            _this13.bmin = _ref11[2];
            _this13.bmax = _ref11[3];
            var _ref12 = blackPoint || [0, 0, 0];
            var _ref13 = _slicedToArray(_ref12, 3);
            _this13.XB = _ref13[0];
            _this13.YB = _ref13[1];
            _this13.ZB = _ref13[2];
            if (_this13.XW < 0 || _this13.ZW < 0 || _this13.YW !== 1) {
               throw new FormatError(
                  "Invalid WhitePoint components, no fallback available",
               );
            }
            if (_this13.XB < 0 || _this13.YB < 0 || _this13.ZB < 0) {
               info("Invalid BlackPoint, falling back to default");
               _this13.XB = _this13.YB = _this13.ZB = 0;
            }
            if (_this13.amin > _this13.amax || _this13.bmin > _this13.bmax) {
               info("Invalid Range, falling back to defaults");
               _this13.amin = -100;
               _this13.amax = 100;
               _this13.bmin = -100;
               _this13.bmax = 100;
            }
            return _this13;
         }
         _inherits(LabCS, _ColorSpace9);
         return _createClass(LabCS, [
            {
               key: "getRgbItem",
               value: function getRgbItem(src, srcOffset, dest, destOffset) {
                  _assertClassBrand(_LabCS_brand, this, _toRgb4).call(
                     this,
                     src,
                     srcOffset,
                     false,
                     dest,
                     destOffset,
                  );
               },
            },
            {
               key: "getRgbBuffer",
               value: function getRgbBuffer(
                  src,
                  srcOffset,
                  count,
                  dest,
                  destOffset,
                  bits,
                  alpha01,
               ) {
                  var maxVal = (1 << bits) - 1;
                  for (var i = 0; i < count; i++) {
                     _assertClassBrand(_LabCS_brand, this, _toRgb4).call(
                        this,
                        src,
                        srcOffset,
                        maxVal,
                        dest,
                        destOffset,
                     );
                     srcOffset += 3;
                     destOffset += 3 + alpha01;
                  }
               },
            },
            {
               key: "getOutputLength",
               value: function getOutputLength(inputLength, alpha01) {
                  return ((inputLength * (3 + alpha01)) / 3) | 0;
               },
            },
            {
               key: "isDefaultDecode",
               value: function isDefaultDecode(decodeMap, bpc) {
                  return true;
               },
            },
            {
               key: "usesZeroToOneRange",
               get: function get() {
                  return shadow(this, "usesZeroToOneRange", false);
               },
            },
         ]);
      })(ColorSpace);
      function _fn_g(x) {
         return x >= 6 / 29 ? Math.pow(x, 3) : (108 / 841) * (x - 4 / 29);
      }
      function _decode(value, high1, low2, high2) {
         return low2 + (value * (high2 - low2)) / high1;
      }
      function _toRgb4(src, srcOffset, maxVal, dest, destOffset) {
         var Ls = src[srcOffset];
         var as = src[srcOffset + 1];
         var bs = src[srcOffset + 2];
         if (maxVal !== false) {
            Ls = _assertClassBrand(_LabCS_brand, this, _decode).call(
               this,
               Ls,
               maxVal,
               0,
               100,
            );
            as = _assertClassBrand(_LabCS_brand, this, _decode).call(
               this,
               as,
               maxVal,
               this.amin,
               this.amax,
            );
            bs = _assertClassBrand(_LabCS_brand, this, _decode).call(
               this,
               bs,
               maxVal,
               this.bmin,
               this.bmax,
            );
         }
         if (as > this.amax) {
            as = this.amax;
         } else if (as < this.amin) {
            as = this.amin;
         }
         if (bs > this.bmax) {
            bs = this.bmax;
         } else if (bs < this.bmin) {
            bs = this.bmin;
         }
         var M = (Ls + 16) / 116;
         var L = M + as / 500;
         var N = M - bs / 200;
         var X =
            this.XW * _assertClassBrand(_LabCS_brand, this, _fn_g).call(this, L);
         var Y =
            this.YW * _assertClassBrand(_LabCS_brand, this, _fn_g).call(this, M);
         var Z =
            this.ZW * _assertClassBrand(_LabCS_brand, this, _fn_g).call(this, N);
         var r, g, b;
         if (this.ZW < 1) {
            r = X * 3.1339 + Y * -1.617 + Z * -0.4906;
            g = X * -0.9785 + Y * 1.916 + Z * 0.0333;
            b = X * 0.072 + Y * -0.229 + Z * 1.4057;
         } else {
            r = X * 3.2406 + Y * -1.5372 + Z * -0.4986;
            g = X * -0.9689 + Y * 1.8758 + Z * 0.0415;
            b = X * 0.0557 + Y * -0.204 + Z * 1.057;
         }
         dest[destOffset] = Math.sqrt(r) * 255;
         dest[destOffset + 1] = Math.sqrt(g) * 255;
         dest[destOffset + 2] = Math.sqrt(b) * 255;
      } // CONCATENATED MODULE: ./src/core/binary_cmap.js
      function hexToInt(a, size) {
         var n = 0;
         for (var i = 0; i <= size; i++) {
            n = (n << 8) | a[i];
         }
         return n >>> 0;
      }
      function hexToStr(a, size) {
         if (size === 1) {
            return String.fromCharCode(a[0], a[1]);
         }
         if (size === 3) {
            return String.fromCharCode(a[0], a[1], a[2], a[3]);
         }
         return String.fromCharCode.apply(
            String,
            _toConsumableArray(a.subarray(0, size + 1)),
         );
      }
      function addHex(a, b, size) {
         var c = 0;
         for (var i = size; i >= 0; i--) {
            c += a[i] + b[i];
            a[i] = c & 255;
            c >>= 8;
         }
      }
      function incHex(a, size) {
         var c = 1;
         for (var i = size; i >= 0 && c > 0; i--) {
            c += a[i];
            a[i] = c & 255;
            c >>= 8;
         }
      }
      var MAX_NUM_SIZE = 16;
      var MAX_ENCODED_NUM_SIZE = 19;
      var BinaryCMapStream = /*#__PURE__*/ (function () {
         function BinaryCMapStream(data) {
            _classCallCheck(this, BinaryCMapStream);
            this.buffer = data;
            this.pos = 0;
            this.end = data.length;
            this.tmpBuf = new Uint8Array(MAX_ENCODED_NUM_SIZE);
         }
         return _createClass(BinaryCMapStream, [
            {
               key: "readByte",
               value: function readByte() {
                  if (this.pos >= this.end) {
                     return -1;
                  }
                  return this.buffer[this.pos++];
               },
            },
            {
               key: "readNumber",
               value: function readNumber() {
                  var n = 0;
                  var last;
                  do {
                     var b = this.readByte();
                     if (b < 0) {
                        throw new FormatError("unexpected EOF in bcmap");
                     }
                     last = !(b & 0x80);
                     n = (n << 7) | (b & 0x7f);
                  } while (!last);
                  return n;
               },
            },
            {
               key: "readSigned",
               value: function readSigned() {
                  var n = this.readNumber();
                  return n & 1 ? ~(n >>> 1) : n >>> 1;
               },
            },
            {
               key: "readHex",
               value: function readHex(num, size) {
                  num.set(this.buffer.subarray(this.pos, this.pos + size + 1));
                  this.pos += size + 1;
               },
            },
            {
               key: "readHexNumber",
               value: function readHexNumber(num, size) {
                  var last;
                  var stack = this.tmpBuf;
                  var sp = 0;
                  do {
                     var b = this.readByte();
                     if (b < 0) {
                        throw new FormatError("unexpected EOF in bcmap");
                     }
                     last = !(b & 0x80);
                     stack[sp++] = b & 0x7f;
                  } while (!last);
                  var i = size,
                     buffer = 0,
                     bufferSize = 0;
                  while (i >= 0) {
                     while (bufferSize < 8 && stack.length > 0) {
                        buffer |= stack[--sp] << bufferSize;
                        bufferSize += 7;
                     }
                     num[i] = buffer & 255;
                     i--;
                     buffer >>= 8;
                     bufferSize -= 8;
                  }
               },
            },
            {
               key: "readHexSigned",
               value: function readHexSigned(num, size) {
                  this.readHexNumber(num, size);
                  var sign = num[size] & 1 ? 255 : 0;
                  var c = 0;
                  for (var i = 0; i <= size; i++) {
                     c = ((c & 1) << 8) | num[i];
                     num[i] = (c >> 1) ^ sign;
                  }
               },
            },
            {
               key: "readString",
               value: function readString() {
                  var len = this.readNumber(),
                     buf = new Array(len);
                  for (var i = 0; i < len; i++) {
                     buf[i] = this.readNumber();
                  }
                  return String.fromCharCode.apply(String, buf);
               },
            },
         ]);
      })();
      var BinaryCMapReader = /*#__PURE__*/ (function () {
         function BinaryCMapReader() {
            _classCallCheck(this, BinaryCMapReader);
         }
         return _createClass(BinaryCMapReader, [
            {
               key: "process",
               value: (function () {
                  var _process = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee3(data, cMap, extend) {
                           var stream,
                              header,
                              useCMap,
                              start,
                              end,
                              _char6,
                              charCode,
                              tmp,
                              code,
                              b,
                              type,
                              sequence,
                              dataSize,
                              ucs2DataSize,
                              subitemsCount,
                              i,
                              _i9,
                              _i0,
                              _i1,
                              _i10,
                              _i11,
                              _t2,
                              _t3;
                           return _regenerator().w(function (_context5) {
                              while (1)
                                 switch (_context5.n) {
                                    case 0:
                                       stream = new BinaryCMapStream(data);
                                       header = stream.readByte();
                                       cMap.vertical = !!(header & 1);
                                       useCMap = null;
                                       start = new Uint8Array(MAX_NUM_SIZE);
                                       end = new Uint8Array(MAX_NUM_SIZE);
                                       _char6 = new Uint8Array(MAX_NUM_SIZE);
                                       charCode = new Uint8Array(MAX_NUM_SIZE);
                                       tmp = new Uint8Array(MAX_NUM_SIZE);
                                    case 1:
                                       if (!((b = stream.readByte()) >= 0)) {
                                          _context5.n = 15;
                                          break;
                                       }
                                       type = b >> 5;
                                       if (!(type === 7)) {
                                          _context5.n = 5;
                                          break;
                                       }
                                       _t2 = b & 0x1f;
                                       _context5.n = _t2 === 0 ? 2 : _t2 === 1 ? 3 : 4;
                                       break;
                                    case 2:
                                       stream.readString();
                                       return _context5.a(3, 4);
                                    case 3:
                                       useCMap = stream.readString();
                                       return _context5.a(3, 4);
                                    case 4:
                                       return _context5.a(3, 1);
                                    case 5:
                                       sequence = !!(b & 0x10);
                                       dataSize = b & 15;
                                       if (!(dataSize + 1 > MAX_NUM_SIZE)) {
                                          _context5.n = 6;
                                          break;
                                       }
                                       throw new Error(
                                          "BinaryCMapReader.process: Invalid dataSize.",
                                       );
                                    case 6:
                                       ucs2DataSize = 1;
                                       subitemsCount = stream.readNumber();
                                       _t3 = type;
                                       _context5.n =
                                          _t3 === 0
                                             ? 7
                                             : _t3 === 1
                                                ? 8
                                                : _t3 === 2
                                                   ? 9
                                                   : _t3 === 3
                                                      ? 10
                                                      : _t3 === 4
                                                         ? 11
                                                         : _t3 === 5
                                                            ? 12
                                                            : 13;
                                       break;
                                    case 7:
                                       stream.readHex(start, dataSize);
                                       stream.readHexNumber(end, dataSize);
                                       addHex(end, start, dataSize);
                                       cMap.addCodespaceRange(
                                          dataSize + 1,
                                          hexToInt(start, dataSize),
                                          hexToInt(end, dataSize),
                                       );
                                       for (i = 1; i < subitemsCount; i++) {
                                          incHex(end, dataSize);
                                          stream.readHexNumber(start, dataSize);
                                          addHex(start, end, dataSize);
                                          stream.readHexNumber(end, dataSize);
                                          addHex(end, start, dataSize);
                                          cMap.addCodespaceRange(
                                             dataSize + 1,
                                             hexToInt(start, dataSize),
                                             hexToInt(end, dataSize),
                                          );
                                       }
                                       return _context5.a(3, 14);
                                    case 8:
                                       stream.readHex(start, dataSize);
                                       stream.readHexNumber(end, dataSize);
                                       addHex(end, start, dataSize);
                                       stream.readNumber();
                                       for (_i9 = 1; _i9 < subitemsCount; _i9++) {
                                          incHex(end, dataSize);
                                          stream.readHexNumber(start, dataSize);
                                          addHex(start, end, dataSize);
                                          stream.readHexNumber(end, dataSize);
                                          addHex(end, start, dataSize);
                                          stream.readNumber();
                                       }
                                       return _context5.a(3, 14);
                                    case 9:
                                       stream.readHex(_char6, dataSize);
                                       code = stream.readNumber();
                                       cMap.mapOne(hexToInt(_char6, dataSize), code);
                                       for (_i0 = 1; _i0 < subitemsCount; _i0++) {
                                          incHex(_char6, dataSize);
                                          if (!sequence) {
                                             stream.readHexNumber(tmp, dataSize);
                                             addHex(_char6, tmp, dataSize);
                                          }
                                          code = stream.readSigned() + (code + 1);
                                          cMap.mapOne(hexToInt(_char6, dataSize), code);
                                       }
                                       return _context5.a(3, 14);
                                    case 10:
                                       stream.readHex(start, dataSize);
                                       stream.readHexNumber(end, dataSize);
                                       addHex(end, start, dataSize);
                                       code = stream.readNumber();
                                       cMap.mapCidRange(
                                          hexToInt(start, dataSize),
                                          hexToInt(end, dataSize),
                                          code,
                                       );
                                       for (_i1 = 1; _i1 < subitemsCount; _i1++) {
                                          incHex(end, dataSize);
                                          if (!sequence) {
                                             stream.readHexNumber(start, dataSize);
                                             addHex(start, end, dataSize);
                                          } else {
                                             start.set(end);
                                          }
                                          stream.readHexNumber(end, dataSize);
                                          addHex(end, start, dataSize);
                                          code = stream.readNumber();
                                          cMap.mapCidRange(
                                             hexToInt(start, dataSize),
                                             hexToInt(end, dataSize),
                                             code,
                                          );
                                       }
                                       return _context5.a(3, 14);
                                    case 11:
                                       stream.readHex(_char6, ucs2DataSize);
                                       stream.readHex(charCode, dataSize);
                                       cMap.mapOne(
                                          hexToInt(_char6, ucs2DataSize),
                                          hexToStr(charCode, dataSize),
                                       );
                                       for (_i10 = 1; _i10 < subitemsCount; _i10++) {
                                          incHex(_char6, ucs2DataSize);
                                          if (!sequence) {
                                             stream.readHexNumber(tmp, ucs2DataSize);
                                             addHex(_char6, tmp, ucs2DataSize);
                                          }
                                          incHex(charCode, dataSize);
                                          stream.readHexSigned(tmp, dataSize);
                                          addHex(charCode, tmp, dataSize);
                                          cMap.mapOne(
                                             hexToInt(_char6, ucs2DataSize),
                                             hexToStr(charCode, dataSize),
                                          );
                                       }
                                       return _context5.a(3, 14);
                                    case 12:
                                       stream.readHex(start, ucs2DataSize);
                                       stream.readHexNumber(end, ucs2DataSize);
                                       addHex(end, start, ucs2DataSize);
                                       stream.readHex(charCode, dataSize);
                                       cMap.mapBfRange(
                                          hexToInt(start, ucs2DataSize),
                                          hexToInt(end, ucs2DataSize),
                                          hexToStr(charCode, dataSize),
                                       );
                                       for (_i11 = 1; _i11 < subitemsCount; _i11++) {
                                          incHex(end, ucs2DataSize);
                                          if (!sequence) {
                                             stream.readHexNumber(start, ucs2DataSize);
                                             addHex(start, end, ucs2DataSize);
                                          } else {
                                             start.set(end);
                                          }
                                          stream.readHexNumber(end, ucs2DataSize);
                                          addHex(end, start, ucs2DataSize);
                                          stream.readHex(charCode, dataSize);
                                          cMap.mapBfRange(
                                             hexToInt(start, ucs2DataSize),
                                             hexToInt(end, ucs2DataSize),
                                             hexToStr(charCode, dataSize),
                                          );
                                       }
                                       return _context5.a(3, 14);
                                    case 13:
                                       throw new Error(
                                          "BinaryCMapReader.process - unknown type: ".concat(
                                             type,
                                          ),
                                       );
                                    case 14:
                                       _context5.n = 1;
                                       break;
                                    case 15:
                                       if (!useCMap) {
                                          _context5.n = 16;
                                          break;
                                       }
                                       return _context5.a(2, extend(useCMap));
                                    case 16:
                                       return _context5.a(2, cMap);
                                 }
                           }, _callee3);
                        },
                     ),
                  );
                  function process(_x5, _x6, _x7) {
                     return _process.apply(this, arguments);
                  }
                  return process;
               })(),
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/decode_stream.js
      var emptyBuffer = new Uint8Array(0);
      var DecodeStream = /*#__PURE__*/ (function (_BaseStream2) {
         function DecodeStream(maybeMinBufferLength) {
            var _this14;
            _classCallCheck(this, DecodeStream);
            _this14 = _callSuper(this, DecodeStream);
            _this14._rawMinBufferLength = maybeMinBufferLength || 0;
            _this14.pos = 0;
            _this14.bufferLength = 0;
            _this14.eof = false;
            _this14.buffer = emptyBuffer;
            _this14.minBufferLength = 512;
            if (maybeMinBufferLength) {
               while (_this14.minBufferLength < maybeMinBufferLength) {
                  _this14.minBufferLength *= 2;
               }
            }
            return _this14;
         }
         _inherits(DecodeStream, _BaseStream2);
         return _createClass(DecodeStream, [
            {
               key: "isEmpty",
               get: function get() {
                  while (!this.eof && this.bufferLength === 0) {
                     this.readBlock();
                  }
                  return this.bufferLength === 0;
               },
            },
            {
               key: "ensureBuffer",
               value: function ensureBuffer(requested) {
                  var buffer = this.buffer;
                  if (requested <= buffer.byteLength) {
                     return buffer;
                  }
                  var size = this.minBufferLength;
                  while (size < requested) {
                     size *= 2;
                  }
                  var buffer2 = new Uint8Array(size);
                  buffer2.set(buffer);
                  return (this.buffer = buffer2);
               },
            },
            {
               key: "getByte",
               value: function getByte() {
                  var pos = this.pos;
                  while (this.bufferLength <= pos) {
                     if (this.eof) {
                        return -1;
                     }
                     this.readBlock();
                  }
                  return this.buffer[this.pos++];
               },
            },
            {
               key: "getBytes",
               value: function getBytes(length) {
                  var ignoreColorSpace =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : false;
                  var pos = this.pos;
                  var end;
                  if (length) {
                     this.ensureBuffer(pos + length);
                     end = pos + length;
                     while (!this.eof && this.bufferLength < end) {
                        this.readBlock(ignoreColorSpace);
                     }
                     var bufEnd = this.bufferLength;
                     if (end > bufEnd) {
                        end = bufEnd;
                     }
                  } else {
                     while (!this.eof) {
                        this.readBlock(ignoreColorSpace);
                     }
                     end = this.bufferLength;
                  }
                  this.pos = end;
                  return this.buffer.subarray(pos, end);
               },
            },
            {
               key: "reset",
               value: function reset() {
                  this.pos = 0;
               },
            },
            {
               key: "makeSubStream",
               value: function makeSubStream(start, length) {
                  var dict =
                     arguments.length > 2 && arguments[2] !== undefined
                        ? arguments[2]
                        : null;
                  if (length === undefined) {
                     while (!this.eof) {
                        this.readBlock();
                     }
                  } else {
                     var end = start + length;
                     while (this.bufferLength <= end && !this.eof) {
                        this.readBlock();
                     }
                  }
                  return new Stream(this.buffer, start, length, dict);
               },
            },
            {
               key: "getBaseStreams",
               value: function getBaseStreams() {
                  return this.str ? this.str.getBaseStreams() : null;
               },
            },
         ]);
      })(BaseStream);
      var StreamsSequenceStream = /*#__PURE__*/ (function (_DecodeStream) {
         function StreamsSequenceStream(streams) {
            var _this15;
            var onError =
               arguments.length > 1 && arguments[1] !== undefined
                  ? arguments[1]
                  : null;
            _classCallCheck(this, StreamsSequenceStream);
            var maybeLength = 0;
            var _iterator15 = _createForOfIteratorHelper(streams),
               _step15;
            try {
               for (_iterator15.s(); !(_step15 = _iterator15.n()).done; ) {
                  var stream = _step15.value;
                  maybeLength +=
                     stream instanceof DecodeStream
                        ? stream._rawMinBufferLength
                        : stream.length;
               }
            } catch (err) {
               _iterator15.e(err);
            } finally {
               _iterator15.f();
            }
            _this15 = _callSuper(this, StreamsSequenceStream, [maybeLength]);
            _this15.streams = streams;
            _this15._onError = onError;
            return _this15;
         }
         _inherits(StreamsSequenceStream, _DecodeStream);
         return _createClass(StreamsSequenceStream, [
            {
               key: "readBlock",
               value: function readBlock() {
                  var streams = this.streams;
                  if (streams.length === 0) {
                     this.eof = true;
                     return;
                  }
                  var stream = streams.shift();
                  var chunk;
                  try {
                     chunk = stream.getBytes();
                  } catch (reason) {
                     if (this._onError) {
                        var _stream$dict;
                        this._onError(
                           reason,
                           (_stream$dict = stream.dict) === null ||
                           _stream$dict === void 0
                              ? void 0
                              : _stream$dict.objId,
                        );
                        return;
                     }
                     throw reason;
                  }
                  var bufferLength = this.bufferLength;
                  var newLength = bufferLength + chunk.length;
                  var buffer = this.ensureBuffer(newLength);
                  buffer.set(chunk, bufferLength);
                  this.bufferLength = newLength;
               },
            },
            {
               key: "getBaseStreams",
               value: function getBaseStreams() {
                  var baseStreamsBuf = [];
                  var _iterator16 = _createForOfIteratorHelper(this.streams),
                     _step16;
                  try {
                     for (_iterator16.s(); !(_step16 = _iterator16.n()).done; ) {
                        var stream = _step16.value;
                        var baseStreams = stream.getBaseStreams();
                        if (baseStreams) {
                           baseStreamsBuf.push.apply(
                              baseStreamsBuf,
                              _toConsumableArray(baseStreams),
                           );
                        }
                     }
                  } catch (err) {
                     _iterator16.e(err);
                  } finally {
                     _iterator16.f();
                  }
                  return baseStreamsBuf.length > 0 ? baseStreamsBuf : null;
               },
            },
         ]);
      })(DecodeStream); // CONCATENATED MODULE: ./src/core/ascii_85_stream.js
      var Ascii85Stream = /*#__PURE__*/ (function (_DecodeStream2) {
         function Ascii85Stream(str, maybeLength) {
            var _this16;
            _classCallCheck(this, Ascii85Stream);
            if (maybeLength) {
               maybeLength *= 0.8;
            }
            _this16 = _callSuper(this, Ascii85Stream, [maybeLength]);
            _this16.str = str;
            _this16.dict = str.dict;
            _this16.input = new Uint8Array(5);
            return _this16;
         }
         _inherits(Ascii85Stream, _DecodeStream2);
         return _createClass(Ascii85Stream, [
            {
               key: "readBlock",
               value: function readBlock() {
                  var TILDA_CHAR = 0x7e;
                  var Z_LOWER_CHAR = 0x7a;
                  var EOF = -1;
                  var str = this.str;
                  var c = str.getByte();
                  while (isWhiteSpace(c)) {
                     c = str.getByte();
                  }
                  if (c === EOF || c === TILDA_CHAR) {
                     this.eof = true;
                     return;
                  }
                  var bufferLength = this.bufferLength;
                  var buffer, i;
                  if (c === Z_LOWER_CHAR) {
                     buffer = this.ensureBuffer(bufferLength + 4);
                     for (i = 0; i < 4; ++i) {
                        buffer[bufferLength + i] = 0;
                     }
                     this.bufferLength += 4;
                  } else {
                     var input = this.input;
                     input[0] = c;
                     for (i = 1; i < 5; ++i) {
                        c = str.getByte();
                        while (isWhiteSpace(c)) {
                           c = str.getByte();
                        }
                        input[i] = c;
                        if (c === EOF || c === TILDA_CHAR) {
                           break;
                        }
                     }
                     buffer = this.ensureBuffer(bufferLength + i - 1);
                     this.bufferLength += i - 1;
                     if (i < 5) {
                        for (; i < 5; ++i) {
                           input[i] = 0x21 + 84;
                        }
                        this.eof = true;
                     }
                     var t = 0;
                     for (i = 0; i < 5; ++i) {
                        t = t * 85 + (input[i] - 0x21);
                     }
                     for (i = 3; i >= 0; --i) {
                        buffer[bufferLength + i] = t & 0xff;
                        t >>= 8;
                     }
                  }
               },
            },
         ]);
      })(DecodeStream); // CONCATENATED MODULE: ./src/core/ascii_hex_stream.js
      var AsciiHexStream = /*#__PURE__*/ (function (_DecodeStream3) {
         function AsciiHexStream(str, maybeLength) {
            var _this17;
            _classCallCheck(this, AsciiHexStream);
            if (maybeLength) {
               maybeLength *= 0.5;
            }
            _this17 = _callSuper(this, AsciiHexStream, [maybeLength]);
            _this17.str = str;
            _this17.dict = str.dict;
            _this17.firstDigit = -1;
            return _this17;
         }
         _inherits(AsciiHexStream, _DecodeStream3);
         return _createClass(AsciiHexStream, [
            {
               key: "readBlock",
               value: function readBlock() {
                  var UPSTREAM_BLOCK_SIZE = 8000;
                  var bytes = this.str.getBytes(UPSTREAM_BLOCK_SIZE);
                  if (!bytes.length) {
                     this.eof = true;
                     return;
                  }
                  var maxDecodeLength = (bytes.length + 1) >> 1;
                  var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);
                  var bufferLength = this.bufferLength;
                  var firstDigit = this.firstDigit;
                  var _iterator17 = _createForOfIteratorHelper(bytes),
                     _step17;
                  try {
                     for (_iterator17.s(); !(_step17 = _iterator17.n()).done; ) {
                        var ch = _step17.value;
                        var digit = void 0;
                        if (ch >= 0x30 && ch <= 0x39) {
                           digit = ch & 0x0f;
                        } else if (
                           (ch >= 0x41 && ch <= 0x46) ||
                           (ch >= 0x61 && ch <= 0x66)
                        ) {
                           digit = (ch & 0x0f) + 9;
                        } else if (ch === 0x3e) {
                           this.eof = true;
                           break;
                        } else {
                           continue;
                        }
                        if (firstDigit < 0) {
                           firstDigit = digit;
                        } else {
                           buffer[bufferLength++] = (firstDigit << 4) | digit;
                           firstDigit = -1;
                        }
                     }
                  } catch (err) {
                     _iterator17.e(err);
                  } finally {
                     _iterator17.f();
                  }
                  if (firstDigit >= 0 && this.eof) {
                     buffer[bufferLength++] = firstDigit << 4;
                     firstDigit = -1;
                  }
                  this.firstDigit = firstDigit;
                  this.bufferLength = bufferLength;
               },
            },
         ]);
      })(DecodeStream); // CONCATENATED MODULE: ./src/core/ccitt.js
      var ccittEOL = -2;
      var ccittEOF = -1;
      var twoDimPass = 0;
      var twoDimHoriz = 1;
      var twoDimVert0 = 2;
      var twoDimVertR1 = 3;
      var twoDimVertL1 = 4;
      var twoDimVertR2 = 5;
      var twoDimVertL2 = 6;
      var twoDimVertR3 = 7;
      var twoDimVertL3 = 8;
      var twoDimTable = [
         [-1, -1],
         [-1, -1],
         [7, twoDimVertL3],
         [7, twoDimVertR3],
         [6, twoDimVertL2],
         [6, twoDimVertL2],
         [6, twoDimVertR2],
         [6, twoDimVertR2],
         [4, twoDimPass],
         [4, twoDimPass],
         [4, twoDimPass],
         [4, twoDimPass],
         [4, twoDimPass],
         [4, twoDimPass],
         [4, twoDimPass],
         [4, twoDimPass],
         [3, twoDimHoriz],
         [3, twoDimHoriz],
         [3, twoDimHoriz],
         [3, twoDimHoriz],
         [3, twoDimHoriz],
         [3, twoDimHoriz],
         [3, twoDimHoriz],
         [3, twoDimHoriz],
         [3, twoDimHoriz],
         [3, twoDimHoriz],
         [3, twoDimHoriz],
         [3, twoDimHoriz],
         [3, twoDimHoriz],
         [3, twoDimHoriz],
         [3, twoDimHoriz],
         [3, twoDimHoriz],
         [3, twoDimVertL1],
         [3, twoDimVertL1],
         [3, twoDimVertL1],
         [3, twoDimVertL1],
         [3, twoDimVertL1],
         [3, twoDimVertL1],
         [3, twoDimVertL1],
         [3, twoDimVertL1],
         [3, twoDimVertL1],
         [3, twoDimVertL1],
         [3, twoDimVertL1],
         [3, twoDimVertL1],
         [3, twoDimVertL1],
         [3, twoDimVertL1],
         [3, twoDimVertL1],
         [3, twoDimVertL1],
         [3, twoDimVertR1],
         [3, twoDimVertR1],
         [3, twoDimVertR1],
         [3, twoDimVertR1],
         [3, twoDimVertR1],
         [3, twoDimVertR1],
         [3, twoDimVertR1],
         [3, twoDimVertR1],
         [3, twoDimVertR1],
         [3, twoDimVertR1],
         [3, twoDimVertR1],
         [3, twoDimVertR1],
         [3, twoDimVertR1],
         [3, twoDimVertR1],
         [3, twoDimVertR1],
         [3, twoDimVertR1],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
         [1, twoDimVert0],
      ];
      var whiteTable1 = [
         [-1, -1],
         [12, ccittEOL],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [11, 1792],
         [11, 1792],
         [12, 1984],
         [12, 2048],
         [12, 2112],
         [12, 2176],
         [12, 2240],
         [12, 2304],
         [11, 1856],
         [11, 1856],
         [11, 1920],
         [11, 1920],
         [12, 2368],
         [12, 2432],
         [12, 2496],
         [12, 2560],
      ];
      var whiteTable2 = [
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [8, 29],
         [8, 29],
         [8, 30],
         [8, 30],
         [8, 45],
         [8, 45],
         [8, 46],
         [8, 46],
         [7, 22],
         [7, 22],
         [7, 22],
         [7, 22],
         [7, 23],
         [7, 23],
         [7, 23],
         [7, 23],
         [8, 47],
         [8, 47],
         [8, 48],
         [8, 48],
         [6, 13],
         [6, 13],
         [6, 13],
         [6, 13],
         [6, 13],
         [6, 13],
         [6, 13],
         [6, 13],
         [7, 20],
         [7, 20],
         [7, 20],
         [7, 20],
         [8, 33],
         [8, 33],
         [8, 34],
         [8, 34],
         [8, 35],
         [8, 35],
         [8, 36],
         [8, 36],
         [8, 37],
         [8, 37],
         [8, 38],
         [8, 38],
         [7, 19],
         [7, 19],
         [7, 19],
         [7, 19],
         [8, 31],
         [8, 31],
         [8, 32],
         [8, 32],
         [6, 1],
         [6, 1],
         [6, 1],
         [6, 1],
         [6, 1],
         [6, 1],
         [6, 1],
         [6, 1],
         [6, 12],
         [6, 12],
         [6, 12],
         [6, 12],
         [6, 12],
         [6, 12],
         [6, 12],
         [6, 12],
         [8, 53],
         [8, 53],
         [8, 54],
         [8, 54],
         [7, 26],
         [7, 26],
         [7, 26],
         [7, 26],
         [8, 39],
         [8, 39],
         [8, 40],
         [8, 40],
         [8, 41],
         [8, 41],
         [8, 42],
         [8, 42],
         [8, 43],
         [8, 43],
         [8, 44],
         [8, 44],
         [7, 21],
         [7, 21],
         [7, 21],
         [7, 21],
         [7, 28],
         [7, 28],
         [7, 28],
         [7, 28],
         [8, 61],
         [8, 61],
         [8, 62],
         [8, 62],
         [8, 63],
         [8, 63],
         [8, 0],
         [8, 0],
         [8, 320],
         [8, 320],
         [8, 384],
         [8, 384],
         [5, 10],
         [5, 10],
         [5, 10],
         [5, 10],
         [5, 10],
         [5, 10],
         [5, 10],
         [5, 10],
         [5, 10],
         [5, 10],
         [5, 10],
         [5, 10],
         [5, 10],
         [5, 10],
         [5, 10],
         [5, 10],
         [5, 11],
         [5, 11],
         [5, 11],
         [5, 11],
         [5, 11],
         [5, 11],
         [5, 11],
         [5, 11],
         [5, 11],
         [5, 11],
         [5, 11],
         [5, 11],
         [5, 11],
         [5, 11],
         [5, 11],
         [5, 11],
         [7, 27],
         [7, 27],
         [7, 27],
         [7, 27],
         [8, 59],
         [8, 59],
         [8, 60],
         [8, 60],
         [9, 1472],
         [9, 1536],
         [9, 1600],
         [9, 1728],
         [7, 18],
         [7, 18],
         [7, 18],
         [7, 18],
         [7, 24],
         [7, 24],
         [7, 24],
         [7, 24],
         [8, 49],
         [8, 49],
         [8, 50],
         [8, 50],
         [8, 51],
         [8, 51],
         [8, 52],
         [8, 52],
         [7, 25],
         [7, 25],
         [7, 25],
         [7, 25],
         [8, 55],
         [8, 55],
         [8, 56],
         [8, 56],
         [8, 57],
         [8, 57],
         [8, 58],
         [8, 58],
         [6, 192],
         [6, 192],
         [6, 192],
         [6, 192],
         [6, 192],
         [6, 192],
         [6, 192],
         [6, 192],
         [6, 1664],
         [6, 1664],
         [6, 1664],
         [6, 1664],
         [6, 1664],
         [6, 1664],
         [6, 1664],
         [6, 1664],
         [8, 448],
         [8, 448],
         [8, 512],
         [8, 512],
         [9, 704],
         [9, 768],
         [8, 640],
         [8, 640],
         [8, 576],
         [8, 576],
         [9, 832],
         [9, 896],
         [9, 960],
         [9, 1024],
         [9, 1088],
         [9, 1152],
         [9, 1216],
         [9, 1280],
         [9, 1344],
         [9, 1408],
         [7, 256],
         [7, 256],
         [7, 256],
         [7, 256],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 2],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [4, 3],
         [5, 128],
         [5, 128],
         [5, 128],
         [5, 128],
         [5, 128],
         [5, 128],
         [5, 128],
         [5, 128],
         [5, 128],
         [5, 128],
         [5, 128],
         [5, 128],
         [5, 128],
         [5, 128],
         [5, 128],
         [5, 128],
         [5, 8],
         [5, 8],
         [5, 8],
         [5, 8],
         [5, 8],
         [5, 8],
         [5, 8],
         [5, 8],
         [5, 8],
         [5, 8],
         [5, 8],
         [5, 8],
         [5, 8],
         [5, 8],
         [5, 8],
         [5, 8],
         [5, 9],
         [5, 9],
         [5, 9],
         [5, 9],
         [5, 9],
         [5, 9],
         [5, 9],
         [5, 9],
         [5, 9],
         [5, 9],
         [5, 9],
         [5, 9],
         [5, 9],
         [5, 9],
         [5, 9],
         [5, 9],
         [6, 16],
         [6, 16],
         [6, 16],
         [6, 16],
         [6, 16],
         [6, 16],
         [6, 16],
         [6, 16],
         [6, 17],
         [6, 17],
         [6, 17],
         [6, 17],
         [6, 17],
         [6, 17],
         [6, 17],
         [6, 17],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 4],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [6, 14],
         [6, 14],
         [6, 14],
         [6, 14],
         [6, 14],
         [6, 14],
         [6, 14],
         [6, 14],
         [6, 15],
         [6, 15],
         [6, 15],
         [6, 15],
         [6, 15],
         [6, 15],
         [6, 15],
         [6, 15],
         [5, 64],
         [5, 64],
         [5, 64],
         [5, 64],
         [5, 64],
         [5, 64],
         [5, 64],
         [5, 64],
         [5, 64],
         [5, 64],
         [5, 64],
         [5, 64],
         [5, 64],
         [5, 64],
         [5, 64],
         [5, 64],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
         [4, 7],
      ];
      var blackTable1 = [
         [-1, -1],
         [-1, -1],
         [12, ccittEOL],
         [12, ccittEOL],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [11, 1792],
         [11, 1792],
         [11, 1792],
         [11, 1792],
         [12, 1984],
         [12, 1984],
         [12, 2048],
         [12, 2048],
         [12, 2112],
         [12, 2112],
         [12, 2176],
         [12, 2176],
         [12, 2240],
         [12, 2240],
         [12, 2304],
         [12, 2304],
         [11, 1856],
         [11, 1856],
         [11, 1856],
         [11, 1856],
         [11, 1920],
         [11, 1920],
         [11, 1920],
         [11, 1920],
         [12, 2368],
         [12, 2368],
         [12, 2432],
         [12, 2432],
         [12, 2496],
         [12, 2496],
         [12, 2560],
         [12, 2560],
         [10, 18],
         [10, 18],
         [10, 18],
         [10, 18],
         [10, 18],
         [10, 18],
         [10, 18],
         [10, 18],
         [12, 52],
         [12, 52],
         [13, 640],
         [13, 704],
         [13, 768],
         [13, 832],
         [12, 55],
         [12, 55],
         [12, 56],
         [12, 56],
         [13, 1280],
         [13, 1344],
         [13, 1408],
         [13, 1472],
         [12, 59],
         [12, 59],
         [12, 60],
         [12, 60],
         [13, 1536],
         [13, 1600],
         [11, 24],
         [11, 24],
         [11, 24],
         [11, 24],
         [11, 25],
         [11, 25],
         [11, 25],
         [11, 25],
         [13, 1664],
         [13, 1728],
         [12, 320],
         [12, 320],
         [12, 384],
         [12, 384],
         [12, 448],
         [12, 448],
         [13, 512],
         [13, 576],
         [12, 53],
         [12, 53],
         [12, 54],
         [12, 54],
         [13, 896],
         [13, 960],
         [13, 1024],
         [13, 1088],
         [13, 1152],
         [13, 1216],
         [10, 64],
         [10, 64],
         [10, 64],
         [10, 64],
         [10, 64],
         [10, 64],
         [10, 64],
         [10, 64],
      ];
      var blackTable2 = [
         [8, 13],
         [8, 13],
         [8, 13],
         [8, 13],
         [8, 13],
         [8, 13],
         [8, 13],
         [8, 13],
         [8, 13],
         [8, 13],
         [8, 13],
         [8, 13],
         [8, 13],
         [8, 13],
         [8, 13],
         [8, 13],
         [11, 23],
         [11, 23],
         [12, 50],
         [12, 51],
         [12, 44],
         [12, 45],
         [12, 46],
         [12, 47],
         [12, 57],
         [12, 58],
         [12, 61],
         [12, 256],
         [10, 16],
         [10, 16],
         [10, 16],
         [10, 16],
         [10, 17],
         [10, 17],
         [10, 17],
         [10, 17],
         [12, 48],
         [12, 49],
         [12, 62],
         [12, 63],
         [12, 30],
         [12, 31],
         [12, 32],
         [12, 33],
         [12, 40],
         [12, 41],
         [11, 22],
         [11, 22],
         [8, 14],
         [8, 14],
         [8, 14],
         [8, 14],
         [8, 14],
         [8, 14],
         [8, 14],
         [8, 14],
         [8, 14],
         [8, 14],
         [8, 14],
         [8, 14],
         [8, 14],
         [8, 14],
         [8, 14],
         [8, 14],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 10],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [7, 11],
         [9, 15],
         [9, 15],
         [9, 15],
         [9, 15],
         [9, 15],
         [9, 15],
         [9, 15],
         [9, 15],
         [12, 128],
         [12, 192],
         [12, 26],
         [12, 27],
         [12, 28],
         [12, 29],
         [11, 19],
         [11, 19],
         [11, 20],
         [11, 20],
         [12, 34],
         [12, 35],
         [12, 36],
         [12, 37],
         [12, 38],
         [12, 39],
         [11, 21],
         [11, 21],
         [12, 42],
         [12, 43],
         [10, 0],
         [10, 0],
         [10, 0],
         [10, 0],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
         [7, 12],
      ];
      var blackTable3 = [
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [-1, -1],
         [6, 9],
         [6, 8],
         [5, 7],
         [5, 7],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 6],
         [4, 5],
         [4, 5],
         [4, 5],
         [4, 5],
         [3, 1],
         [3, 1],
         [3, 1],
         [3, 1],
         [3, 1],
         [3, 1],
         [3, 1],
         [3, 1],
         [3, 4],
         [3, 4],
         [3, 4],
         [3, 4],
         [3, 4],
         [3, 4],
         [3, 4],
         [3, 4],
         [2, 3],
         [2, 3],
         [2, 3],
         [2, 3],
         [2, 3],
         [2, 3],
         [2, 3],
         [2, 3],
         [2, 3],
         [2, 3],
         [2, 3],
         [2, 3],
         [2, 3],
         [2, 3],
         [2, 3],
         [2, 3],
         [2, 2],
         [2, 2],
         [2, 2],
         [2, 2],
         [2, 2],
         [2, 2],
         [2, 2],
         [2, 2],
         [2, 2],
         [2, 2],
         [2, 2],
         [2, 2],
         [2, 2],
         [2, 2],
         [2, 2],
         [2, 2],
      ];
      var CCITTFaxDecoder = /*#__PURE__*/ (function () {
         function CCITTFaxDecoder(source) {
            var _options$EndOfBlock;
            var options =
               arguments.length > 1 && arguments[1] !== undefined
                  ? arguments[1]
                  : {};
            _classCallCheck(this, CCITTFaxDecoder);
            if (!source || typeof source.next !== "function") {
               throw new Error('CCITTFaxDecoder - invalid "source" parameter.');
            }
            this.source = source;
            this.eof = false;
            this.encoding = options.K || 0;
            this.eoline = options.EndOfLine || false;
            this.byteAlign = options.EncodedByteAlign || false;
            this.columns = options.Columns || 1728;
            this.rows = options.Rows || 0;
            this.eoblock =
               (_options$EndOfBlock = options.EndOfBlock) !== null &&
               _options$EndOfBlock !== void 0
                  ? _options$EndOfBlock
                  : true;
            this.black = options.BlackIs1 || false;
            this.codingLine = new Uint32Array(this.columns + 1);
            this.refLine = new Uint32Array(this.columns + 2);
            this.codingLine[0] = this.columns;
            this.codingPos = 0;
            this.row = 0;
            this.nextLine2D = this.encoding < 0;
            this.inputBits = 0;
            this.inputBuf = 0;
            this.outputBits = 0;
            this.rowsDone = false;
            var code1;
            while ((code1 = this._lookBits(12)) === 0) {
               this._eatBits(1);
            }
            if (code1 === 1) {
               this._eatBits(12);
            }
            if (this.encoding > 0) {
               this.nextLine2D = !this._lookBits(1);
               this._eatBits(1);
            }
         }
         return _createClass(CCITTFaxDecoder, [
            {
               key: "readNextChar",
               value: function readNextChar() {
                  if (this.eof) {
                     return -1;
                  }
                  var refLine = this.refLine;
                  var codingLine = this.codingLine;
                  var columns = this.columns;
                  var refPos, blackPixels, bits, i;
                  if (this.outputBits === 0) {
                     if (this.rowsDone) {
                        this.eof = true;
                     }
                     if (this.eof) {
                        return -1;
                     }
                     this.err = false;
                     var code1, code2, code3;
                     if (this.nextLine2D) {
                        for (i = 0; codingLine[i] < columns; ++i) {
                           refLine[i] = codingLine[i];
                        }
                        refLine[i++] = columns;
                        refLine[i] = columns;
                        codingLine[0] = 0;
                        this.codingPos = 0;
                        refPos = 0;
                        blackPixels = 0;
                        while (codingLine[this.codingPos] < columns) {
                           code1 = this._getTwoDimCode();
                           switch (code1) {
                              case twoDimPass:
                                 this._addPixels(refLine[refPos + 1], blackPixels);
                                 if (refLine[refPos + 1] < columns) {
                                    refPos += 2;
                                 }
                                 break;
                              case twoDimHoriz:
                                 code1 = code2 = 0;
                                 if (blackPixels) {
                                    do {
                                       code1 += code3 = this._getBlackCode();
                                    } while (code3 >= 64);
                                    do {
                                       code2 += code3 = this._getWhiteCode();
                                    } while (code3 >= 64);
                                 } else {
                                    do {
                                       code1 += code3 = this._getWhiteCode();
                                    } while (code3 >= 64);
                                    do {
                                       code2 += code3 = this._getBlackCode();
                                    } while (code3 >= 64);
                                 }
                                 this._addPixels(
                                    codingLine[this.codingPos] + code1,
                                    blackPixels,
                                 );
                                 if (codingLine[this.codingPos] < columns) {
                                    this._addPixels(
                                       codingLine[this.codingPos] + code2,
                                       blackPixels ^ 1,
                                    );
                                 }
                                 while (
                                    refLine[refPos] <= codingLine[this.codingPos] &&
                                    refLine[refPos] < columns
                                    ) {
                                    refPos += 2;
                                 }
                                 break;
                              case twoDimVertR3:
                                 this._addPixels(refLine[refPos] + 3, blackPixels);
                                 blackPixels ^= 1;
                                 if (codingLine[this.codingPos] < columns) {
                                    ++refPos;
                                    while (
                                       refLine[refPos] <= codingLine[this.codingPos] &&
                                       refLine[refPos] < columns
                                       ) {
                                       refPos += 2;
                                    }
                                 }
                                 break;
                              case twoDimVertR2:
                                 this._addPixels(refLine[refPos] + 2, blackPixels);
                                 blackPixels ^= 1;
                                 if (codingLine[this.codingPos] < columns) {
                                    ++refPos;
                                    while (
                                       refLine[refPos] <= codingLine[this.codingPos] &&
                                       refLine[refPos] < columns
                                       ) {
                                       refPos += 2;
                                    }
                                 }
                                 break;
                              case twoDimVertR1:
                                 this._addPixels(refLine[refPos] + 1, blackPixels);
                                 blackPixels ^= 1;
                                 if (codingLine[this.codingPos] < columns) {
                                    ++refPos;
                                    while (
                                       refLine[refPos] <= codingLine[this.codingPos] &&
                                       refLine[refPos] < columns
                                       ) {
                                       refPos += 2;
                                    }
                                 }
                                 break;
                              case twoDimVert0:
                                 this._addPixels(refLine[refPos], blackPixels);
                                 blackPixels ^= 1;
                                 if (codingLine[this.codingPos] < columns) {
                                    ++refPos;
                                    while (
                                       refLine[refPos] <= codingLine[this.codingPos] &&
                                       refLine[refPos] < columns
                                       ) {
                                       refPos += 2;
                                    }
                                 }
                                 break;
                              case twoDimVertL3:
                                 this._addPixelsNeg(refLine[refPos] - 3, blackPixels);
                                 blackPixels ^= 1;
                                 if (codingLine[this.codingPos] < columns) {
                                    if (refPos > 0) {
                                       --refPos;
                                    } else {
                                       ++refPos;
                                    }
                                    while (
                                       refLine[refPos] <= codingLine[this.codingPos] &&
                                       refLine[refPos] < columns
                                       ) {
                                       refPos += 2;
                                    }
                                 }
                                 break;
                              case twoDimVertL2:
                                 this._addPixelsNeg(refLine[refPos] - 2, blackPixels);
                                 blackPixels ^= 1;
                                 if (codingLine[this.codingPos] < columns) {
                                    if (refPos > 0) {
                                       --refPos;
                                    } else {
                                       ++refPos;
                                    }
                                    while (
                                       refLine[refPos] <= codingLine[this.codingPos] &&
                                       refLine[refPos] < columns
                                       ) {
                                       refPos += 2;
                                    }
                                 }
                                 break;
                              case twoDimVertL1:
                                 this._addPixelsNeg(refLine[refPos] - 1, blackPixels);
                                 blackPixels ^= 1;
                                 if (codingLine[this.codingPos] < columns) {
                                    if (refPos > 0) {
                                       --refPos;
                                    } else {
                                       ++refPos;
                                    }
                                    while (
                                       refLine[refPos] <= codingLine[this.codingPos] &&
                                       refLine[refPos] < columns
                                       ) {
                                       refPos += 2;
                                    }
                                 }
                                 break;
                              case ccittEOF:
                                 this._addPixels(columns, 0);
                                 this.eof = true;
                                 break;
                              default:
                                 info("bad 2d code");
                                 this._addPixels(columns, 0);
                                 this.err = true;
                           }
                        }
                     } else {
                        codingLine[0] = 0;
                        this.codingPos = 0;
                        blackPixels = 0;
                        while (codingLine[this.codingPos] < columns) {
                           code1 = 0;
                           if (blackPixels) {
                              do {
                                 code1 += code3 = this._getBlackCode();
                              } while (code3 >= 64);
                           } else {
                              do {
                                 code1 += code3 = this._getWhiteCode();
                              } while (code3 >= 64);
                           }
                           this._addPixels(
                              codingLine[this.codingPos] + code1,
                              blackPixels,
                           );
                           blackPixels ^= 1;
                        }
                     }
                     var gotEOL = false;
                     if (this.byteAlign) {
                        this.inputBits &= ~7;
                     }
                     if (!this.eoblock && this.row === this.rows - 1) {
                        this.rowsDone = true;
                     } else {
                        code1 = this._lookBits(12);
                        if (this.eoline) {
                           while (code1 !== ccittEOF && code1 !== 1) {
                              this._eatBits(1);
                              code1 = this._lookBits(12);
                           }
                        } else {
                           while (code1 === 0) {
                              this._eatBits(1);
                              code1 = this._lookBits(12);
                           }
                        }
                        if (code1 === 1) {
                           this._eatBits(12);
                           gotEOL = true;
                        } else if (code1 === ccittEOF) {
                           this.eof = true;
                        }
                     }
                     if (!this.eof && this.encoding > 0 && !this.rowsDone) {
                        this.nextLine2D = !this._lookBits(1);
                        this._eatBits(1);
                     }
                     if (this.eoblock && gotEOL && this.byteAlign) {
                        code1 = this._lookBits(12);
                        if (code1 === 1) {
                           this._eatBits(12);
                           if (this.encoding > 0) {
                              this._lookBits(1);
                              this._eatBits(1);
                           }
                           if (this.encoding >= 0) {
                              for (i = 0; i < 4; ++i) {
                                 code1 = this._lookBits(12);
                                 if (code1 !== 1) {
                                    info("bad rtc code: " + code1);
                                 }
                                 this._eatBits(12);
                                 if (this.encoding > 0) {
                                    this._lookBits(1);
                                    this._eatBits(1);
                                 }
                              }
                           }
                           this.eof = true;
                        }
                     } else if (this.err && this.eoline) {
                        while (true) {
                           code1 = this._lookBits(13);
                           if (code1 === ccittEOF) {
                              this.eof = true;
                              return -1;
                           }
                           if (code1 >> 1 === 1) {
                              break;
                           }
                           this._eatBits(1);
                        }
                        this._eatBits(12);
                        if (this.encoding > 0) {
                           this._eatBits(1);
                           this.nextLine2D = !(code1 & 1);
                        }
                     }
                     this.outputBits =
                        codingLine[0] > 0
                           ? codingLine[(this.codingPos = 0)]
                           : codingLine[(this.codingPos = 1)];
                     this.row++;
                  }
                  var c;
                  if (this.outputBits >= 8) {
                     c = this.codingPos & 1 ? 0 : 0xff;
                     this.outputBits -= 8;
                     if (
                        this.outputBits === 0 &&
                        codingLine[this.codingPos] < columns
                     ) {
                        this.codingPos++;
                        this.outputBits =
                           codingLine[this.codingPos] - codingLine[this.codingPos - 1];
                     }
                  } else {
                     bits = 8;
                     c = 0;
                     do {
                        if (typeof this.outputBits !== "number") {
                           throw new FormatError(
                              'Invalid /CCITTFaxDecode data, "outputBits" must be a number.',
                           );
                        }
                        if (this.outputBits > bits) {
                           c <<= bits;
                           if (!(this.codingPos & 1)) {
                              c |= 0xff >> (8 - bits);
                           }
                           this.outputBits -= bits;
                           bits = 0;
                        } else {
                           c <<= this.outputBits;
                           if (!(this.codingPos & 1)) {
                              c |= 0xff >> (8 - this.outputBits);
                           }
                           bits -= this.outputBits;
                           this.outputBits = 0;
                           if (codingLine[this.codingPos] < columns) {
                              this.codingPos++;
                              this.outputBits =
                                 codingLine[this.codingPos] -
                                 codingLine[this.codingPos - 1];
                           } else if (bits > 0) {
                              c <<= bits;
                              bits = 0;
                           }
                        }
                     } while (bits);
                  }
                  if (this.black) {
                     c ^= 0xff;
                  }
                  return c;
               },
            },
            {
               key: "_addPixels",
               value: function _addPixels(a1, blackPixels) {
                  var codingLine = this.codingLine;
                  var codingPos = this.codingPos;
                  if (a1 > codingLine[codingPos]) {
                     if (a1 > this.columns) {
                        info("row is wrong length");
                        this.err = true;
                        a1 = this.columns;
                     }
                     if ((codingPos & 1) ^ blackPixels) {
                        ++codingPos;
                     }
                     codingLine[codingPos] = a1;
                  }
                  this.codingPos = codingPos;
               },
            },
            {
               key: "_addPixelsNeg",
               value: function _addPixelsNeg(a1, blackPixels) {
                  var codingLine = this.codingLine;
                  var codingPos = this.codingPos;
                  if (a1 > codingLine[codingPos]) {
                     if (a1 > this.columns) {
                        info("row is wrong length");
                        this.err = true;
                        a1 = this.columns;
                     }
                     if ((codingPos & 1) ^ blackPixels) {
                        ++codingPos;
                     }
                     codingLine[codingPos] = a1;
                  } else if (a1 < codingLine[codingPos]) {
                     if (a1 < 0) {
                        info("invalid code");
                        this.err = true;
                        a1 = 0;
                     }
                     while (codingPos > 0 && a1 < codingLine[codingPos - 1]) {
                        --codingPos;
                     }
                     codingLine[codingPos] = a1;
                  }
                  this.codingPos = codingPos;
               },
            },
            {
               key: "_findTableCode",
               value: function _findTableCode(start, end, table, limit) {
                  var limitValue = limit || 0;
                  for (var i = start; i <= end; ++i) {
                     var code = this._lookBits(i);
                     if (code === ccittEOF) {
                        return [true, 1, false];
                     }
                     if (i < end) {
                        code <<= end - i;
                     }
                     if (!limitValue || code >= limitValue) {
                        var p = table[code - limitValue];
                        if (p[0] === i) {
                           this._eatBits(i);
                           return [true, p[1], true];
                        }
                     }
                  }
                  return [false, 0, false];
               },
            },
            {
               key: "_getTwoDimCode",
               value: function _getTwoDimCode() {
                  var code = 0;
                  var p;
                  if (this.eoblock) {
                     var _p;
                     code = this._lookBits(7);
                     p = twoDimTable[code];
                     if (((_p = p) === null || _p === void 0 ? void 0 : _p[0]) > 0) {
                        this._eatBits(p[0]);
                        return p[1];
                     }
                  } else {
                     var result = this._findTableCode(1, 7, twoDimTable);
                     if (result[0] && result[2]) {
                        return result[1];
                     }
                  }
                  info("Bad two dim code");
                  return ccittEOF;
               },
            },
            {
               key: "_getWhiteCode",
               value: function _getWhiteCode() {
                  var code = 0;
                  var p;
                  if (this.eoblock) {
                     code = this._lookBits(12);
                     if (code === ccittEOF) {
                        return 1;
                     }
                     p = code >> 5 === 0 ? whiteTable1[code] : whiteTable2[code >> 3];
                     if (p[0] > 0) {
                        this._eatBits(p[0]);
                        return p[1];
                     }
                  } else {
                     var result = this._findTableCode(1, 9, whiteTable2);
                     if (result[0]) {
                        return result[1];
                     }
                     result = this._findTableCode(11, 12, whiteTable1);
                     if (result[0]) {
                        return result[1];
                     }
                  }
                  info("bad white code");
                  this._eatBits(1);
                  return 1;
               },
            },
            {
               key: "_getBlackCode",
               value: function _getBlackCode() {
                  var code, p;
                  if (this.eoblock) {
                     code = this._lookBits(13);
                     if (code === ccittEOF) {
                        return 1;
                     }
                     if (code >> 7 === 0) {
                        p = blackTable1[code];
                     } else if (code >> 9 === 0 && code >> 7 !== 0) {
                        p = blackTable2[(code >> 1) - 64];
                     } else {
                        p = blackTable3[code >> 7];
                     }
                     if (p[0] > 0) {
                        this._eatBits(p[0]);
                        return p[1];
                     }
                  } else {
                     var result = this._findTableCode(2, 6, blackTable3);
                     if (result[0]) {
                        return result[1];
                     }
                     result = this._findTableCode(7, 12, blackTable2, 64);
                     if (result[0]) {
                        return result[1];
                     }
                     result = this._findTableCode(10, 13, blackTable1);
                     if (result[0]) {
                        return result[1];
                     }
                  }
                  info("bad black code");
                  this._eatBits(1);
                  return 1;
               },
            },
            {
               key: "_lookBits",
               value: function _lookBits(n) {
                  var c;
                  while (this.inputBits < n) {
                     if ((c = this.source.next()) === -1) {
                        if (this.inputBits === 0) {
                           return ccittEOF;
                        }
                        return (
                           (this.inputBuf << (n - this.inputBits)) & (0xffff >> (16 - n))
                        );
                     }
                     this.inputBuf = (this.inputBuf << 8) | c;
                     this.inputBits += 8;
                  }
                  return (
                     (this.inputBuf >> (this.inputBits - n)) & (0xffff >> (16 - n))
                  );
               },
            },
            {
               key: "_eatBits",
               value: function _eatBits(n) {
                  if ((this.inputBits -= n) < 0) {
                     this.inputBits = 0;
                  }
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/ccitt_stream.js
      var CCITTFaxStream = /*#__PURE__*/ (function (_DecodeStream4) {
         function CCITTFaxStream(str, maybeLength, params) {
            var _this18;
            _classCallCheck(this, CCITTFaxStream);
            _this18 = _callSuper(this, CCITTFaxStream, [maybeLength]);
            _this18.str = str;
            _this18.dict = str.dict;
            if (!(params instanceof Dict)) {
               params = Dict.empty;
            }
            var source = {
               next: function next() {
                  return str.getByte();
               },
            };
            _this18.ccittFaxDecoder = new CCITTFaxDecoder(source, {
               K: params.get("K"),
               EndOfLine: params.get("EndOfLine"),
               EncodedByteAlign: params.get("EncodedByteAlign"),
               Columns: params.get("Columns"),
               Rows: params.get("Rows"),
               EndOfBlock: params.get("EndOfBlock"),
               BlackIs1: params.get("BlackIs1"),
            });
            return _this18;
         }
         _inherits(CCITTFaxStream, _DecodeStream4);
         return _createClass(CCITTFaxStream, [
            {
               key: "readBlock",
               value: function readBlock() {
                  while (!this.eof) {
                     var c = this.ccittFaxDecoder.readNextChar();
                     if (c === -1) {
                        this.eof = true;
                        return;
                     }
                     this.ensureBuffer(this.bufferLength + 1);
                     this.buffer[this.bufferLength++] = c;
                  }
               },
            },
         ]);
      })(DecodeStream); // CONCATENATED MODULE: ./src/core/flate_stream.js
      var codeLenCodeMap = new Int32Array([
         16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15,
      ]);
      var lengthDecode = new Int32Array([
         0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a,
         0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f,
         0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073,
         0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102,
      ]);
      var distDecode = new Int32Array([
         0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d,
         0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1,
         0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01,
         0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001,
      ]);
      var fixedLitCodeTab = [
         new Int32Array([
            0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0,
            0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0,
            0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0,
            0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0,
            0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8,
            0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8,
            0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8,
            0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8,
            0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4,
            0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4,
            0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4,
            0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4,
            0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc,
            0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec,
            0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc,
            0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc,
            0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2,
            0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2,
            0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2,
            0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2,
            0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca,
            0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea,
            0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da,
            0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa,
            0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6,
            0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6,
            0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6,
            0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6,
            0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce,
            0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee,
            0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de,
            0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe,
            0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1,
            0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1,
            0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1,
            0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1,
            0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9,
            0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9,
            0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9,
            0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9,
            0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5,
            0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5,
            0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5,
            0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5,
            0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd,
            0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed,
            0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd,
            0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd,
            0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3,
            0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3,
            0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3,
            0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3,
            0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb,
            0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb,
            0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db,
            0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb,
            0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7,
            0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7,
            0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7,
            0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7,
            0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf,
            0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef,
            0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df,
            0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff,
         ]),
         9,
      ];
      var fixedDistCodeTab = [
         new Int32Array([
            0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c,
            0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000,
            0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d,
            0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000,
         ]),
         5,
      ];
      var _FlateStream_brand = /*#__PURE__*/ new WeakSet();
      var FlateStream = /*#__PURE__*/ (function (_DecodeStream5) {
         function FlateStream(str, maybeLength) {
            var _this19;
            _classCallCheck(this, FlateStream);
            _this19 = _callSuper(this, FlateStream, [maybeLength]);
            _classPrivateMethodInitSpec(_this19, _FlateStream_brand);
            _this19.str = str;
            _this19.dict = str.dict;
            var cmf = str.getByte();
            var flg = str.getByte();
            if (cmf === -1 || flg === -1) {
               throw new FormatError(
                  "Invalid header in flate stream: ".concat(cmf, ", ").concat(flg),
               );
            }
            if ((cmf & 0x0f) !== 0x08) {
               throw new FormatError(
                  "Unknown compression method in flate stream: "
                     .concat(cmf, ", ")
                     .concat(flg),
               );
            }
            if (((cmf << 8) + flg) % 31 !== 0) {
               throw new FormatError(
                  "Bad FCHECK in flate stream: ".concat(cmf, ", ").concat(flg),
               );
            }
            if (flg & 0x20) {
               throw new FormatError(
                  "FDICT bit set in flate stream: ".concat(cmf, ", ").concat(flg),
               );
            }
            _this19.codeSize = 0;
            _this19.codeBuf = 0;
            return _this19;
         }
         _inherits(FlateStream, _DecodeStream5);
         return _createClass(FlateStream, [
            {
               key: "getBits",
               value: function getBits(bits) {
                  var str = this.str;
                  var codeSize = this.codeSize;
                  var codeBuf = this.codeBuf;
                  var b;
                  while (codeSize < bits) {
                     if ((b = str.getByte()) === -1) {
                        throw new FormatError("Bad encoding in flate stream");
                     }
                     codeBuf |= b << codeSize;
                     codeSize += 8;
                  }
                  b = codeBuf & ((1 << bits) - 1);
                  this.codeBuf = codeBuf >> bits;
                  this.codeSize = codeSize -= bits;
                  return b;
               },
            },
            {
               key: "getCode",
               value: function getCode(table) {
                  var str = this.str;
                  var codes = table[0];
                  var maxLen = table[1];
                  var codeSize = this.codeSize;
                  var codeBuf = this.codeBuf;
                  var b;
                  while (codeSize < maxLen) {
                     if ((b = str.getByte()) === -1) {
                        break;
                     }
                     codeBuf |= b << codeSize;
                     codeSize += 8;
                  }
                  var code = codes[codeBuf & ((1 << maxLen) - 1)];
                  var codeLen = code >> 16;
                  var codeVal = code & 0xffff;
                  if (codeLen < 1 || codeSize < codeLen) {
                     throw new FormatError("Bad encoding in flate stream");
                  }
                  this.codeBuf = codeBuf >> codeLen;
                  this.codeSize = codeSize - codeLen;
                  return codeVal;
               },
            },
            {
               key: "generateHuffmanTable",
               value: function generateHuffmanTable(lengths) {
                  var n = lengths.length;
                  var maxLen = 0;
                  var i;
                  for (i = 0; i < n; ++i) {
                     if (lengths[i] > maxLen) {
                        maxLen = lengths[i];
                     }
                  }
                  var size = 1 << maxLen;
                  var codes = new Int32Array(size);
                  for (
                     var len = 1, code = 0, skip = 2;
                     len <= maxLen;
                     ++len, code <<= 1, skip <<= 1
                  ) {
                     for (var val = 0; val < n; ++val) {
                        if (lengths[val] === len) {
                           var code2 = 0;
                           var t = code;
                           for (i = 0; i < len; ++i) {
                              code2 = (code2 << 1) | (t & 1);
                              t >>= 1;
                           }
                           for (i = code2; i < size; i += skip) {
                              codes[i] = (len << 16) | val;
                           }
                           ++code;
                        }
                     }
                  }
                  return [codes, maxLen];
               },
            },
            {
               key: "readBlock",
               value: function readBlock() {
                  var buffer, len;
                  var str = this.str;
                  var hdr = this.getBits(3);
                  if (hdr & 1) {
                     this.eof = true;
                  }
                  hdr >>= 1;
                  if (hdr === 0) {
                     var b;
                     if ((b = str.getByte()) === -1) {
                        _assertClassBrand(
                           _FlateStream_brand,
                           this,
                           _endsStreamOnError,
                        ).call(this, "Bad block header in flate stream");
                        return;
                     }
                     var blockLen = b;
                     if ((b = str.getByte()) === -1) {
                        _assertClassBrand(
                           _FlateStream_brand,
                           this,
                           _endsStreamOnError,
                        ).call(this, "Bad block header in flate stream");
                        return;
                     }
                     blockLen |= b << 8;
                     if ((b = str.getByte()) === -1) {
                        _assertClassBrand(
                           _FlateStream_brand,
                           this,
                           _endsStreamOnError,
                        ).call(this, "Bad block header in flate stream");
                        return;
                     }
                     var check = b;
                     if ((b = str.getByte()) === -1) {
                        _assertClassBrand(
                           _FlateStream_brand,
                           this,
                           _endsStreamOnError,
                        ).call(this, "Bad block header in flate stream");
                        return;
                     }
                     check |= b << 8;
                     if (
                        check !== (~blockLen & 0xffff) &&
                        (blockLen !== 0 || check !== 0)
                     ) {
                        throw new FormatError(
                           "Bad uncompressed block length in flate stream",
                        );
                     }
                     this.codeBuf = 0;
                     this.codeSize = 0;
                     var bufferLength = this.bufferLength,
                        end = bufferLength + blockLen;
                     buffer = this.ensureBuffer(end);
                     this.bufferLength = end;
                     if (blockLen === 0) {
                        if (str.peekByte() === -1) {
                           this.eof = true;
                        }
                     } else {
                        var block = str.getBytes(blockLen);
                        buffer.set(block, bufferLength);
                        if (block.length < blockLen) {
                           this.eof = true;
                        }
                     }
                     return;
                  }
                  var litCodeTable;
                  var distCodeTable;
                  if (hdr === 1) {
                     litCodeTable = fixedLitCodeTab;
                     distCodeTable = fixedDistCodeTab;
                  } else if (hdr === 2) {
                     var numLitCodes = this.getBits(5) + 257;
                     var numDistCodes = this.getBits(5) + 1;
                     var numCodeLenCodes = this.getBits(4) + 4;
                     var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);
                     var i;
                     for (i = 0; i < numCodeLenCodes; ++i) {
                        codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);
                     }
                     var codeLenCodeTab =
                        this.generateHuffmanTable(codeLenCodeLengths);
                     len = 0;
                     i = 0;
                     var codes = numLitCodes + numDistCodes;
                     var codeLengths = new Uint8Array(codes);
                     var bitsLength, bitsOffset, what;
                     while (i < codes) {
                        var code = this.getCode(codeLenCodeTab);
                        if (code === 16) {
                           bitsLength = 2;
                           bitsOffset = 3;
                           what = len;
                        } else if (code === 17) {
                           bitsLength = 3;
                           bitsOffset = 3;
                           what = len = 0;
                        } else if (code === 18) {
                           bitsLength = 7;
                           bitsOffset = 11;
                           what = len = 0;
                        } else {
                           codeLengths[i++] = len = code;
                           continue;
                        }
                        var repeatLength = this.getBits(bitsLength) + bitsOffset;
                        while (repeatLength-- > 0) {
                           codeLengths[i++] = what;
                        }
                     }
                     litCodeTable = this.generateHuffmanTable(
                        codeLengths.subarray(0, numLitCodes),
                     );
                     distCodeTable = this.generateHuffmanTable(
                        codeLengths.subarray(numLitCodes, codes),
                     );
                  } else {
                     throw new FormatError("Unknown block type in flate stream");
                  }
                  buffer = this.buffer;
                  var limit = buffer ? buffer.length : 0;
                  var pos = this.bufferLength;
                  while (true) {
                     var code1 = this.getCode(litCodeTable);
                     if (code1 < 256) {
                        if (pos + 1 >= limit) {
                           buffer = this.ensureBuffer(pos + 1);
                           limit = buffer.length;
                        }
                        buffer[pos++] = code1;
                        continue;
                     }
                     if (code1 === 256) {
                        this.bufferLength = pos;
                        return;
                     }
                     code1 -= 257;
                     code1 = lengthDecode[code1];
                     var code2 = code1 >> 16;
                     if (code2 > 0) {
                        code2 = this.getBits(code2);
                     }
                     len = (code1 & 0xffff) + code2;
                     code1 = this.getCode(distCodeTable);
                     code1 = distDecode[code1];
                     code2 = code1 >> 16;
                     if (code2 > 0) {
                        code2 = this.getBits(code2);
                     }
                     var dist = (code1 & 0xffff) + code2;
                     if (pos + len >= limit) {
                        buffer = this.ensureBuffer(pos + len);
                        limit = buffer.length;
                     }
                     for (var k = 0; k < len; ++k, ++pos) {
                        buffer[pos] = buffer[pos - dist];
                     }
                  }
               },
            },
         ]);
      })(DecodeStream);
      function _endsStreamOnError(err) {
         info(err);
         this.eof = true;
      } // CONCATENATED MODULE: ./src/core/arithmetic_decoder.js
      var QeTable = [
         { qe: 0x5601, nmps: 1, nlps: 1, switchFlag: 1 },
         { qe: 0x3401, nmps: 2, nlps: 6, switchFlag: 0 },
         { qe: 0x1801, nmps: 3, nlps: 9, switchFlag: 0 },
         { qe: 0x0ac1, nmps: 4, nlps: 12, switchFlag: 0 },
         { qe: 0x0521, nmps: 5, nlps: 29, switchFlag: 0 },
         { qe: 0x0221, nmps: 38, nlps: 33, switchFlag: 0 },
         { qe: 0x5601, nmps: 7, nlps: 6, switchFlag: 1 },
         { qe: 0x5401, nmps: 8, nlps: 14, switchFlag: 0 },
         { qe: 0x4801, nmps: 9, nlps: 14, switchFlag: 0 },
         { qe: 0x3801, nmps: 10, nlps: 14, switchFlag: 0 },
         { qe: 0x3001, nmps: 11, nlps: 17, switchFlag: 0 },
         { qe: 0x2401, nmps: 12, nlps: 18, switchFlag: 0 },
         { qe: 0x1c01, nmps: 13, nlps: 20, switchFlag: 0 },
         { qe: 0x1601, nmps: 29, nlps: 21, switchFlag: 0 },
         { qe: 0x5601, nmps: 15, nlps: 14, switchFlag: 1 },
         { qe: 0x5401, nmps: 16, nlps: 14, switchFlag: 0 },
         { qe: 0x5101, nmps: 17, nlps: 15, switchFlag: 0 },
         { qe: 0x4801, nmps: 18, nlps: 16, switchFlag: 0 },
         { qe: 0x3801, nmps: 19, nlps: 17, switchFlag: 0 },
         { qe: 0x3401, nmps: 20, nlps: 18, switchFlag: 0 },
         { qe: 0x3001, nmps: 21, nlps: 19, switchFlag: 0 },
         { qe: 0x2801, nmps: 22, nlps: 19, switchFlag: 0 },
         { qe: 0x2401, nmps: 23, nlps: 20, switchFlag: 0 },
         { qe: 0x2201, nmps: 24, nlps: 21, switchFlag: 0 },
         { qe: 0x1c01, nmps: 25, nlps: 22, switchFlag: 0 },
         { qe: 0x1801, nmps: 26, nlps: 23, switchFlag: 0 },
         { qe: 0x1601, nmps: 27, nlps: 24, switchFlag: 0 },
         { qe: 0x1401, nmps: 28, nlps: 25, switchFlag: 0 },
         { qe: 0x1201, nmps: 29, nlps: 26, switchFlag: 0 },
         { qe: 0x1101, nmps: 30, nlps: 27, switchFlag: 0 },
         { qe: 0x0ac1, nmps: 31, nlps: 28, switchFlag: 0 },
         { qe: 0x09c1, nmps: 32, nlps: 29, switchFlag: 0 },
         { qe: 0x08a1, nmps: 33, nlps: 30, switchFlag: 0 },
         { qe: 0x0521, nmps: 34, nlps: 31, switchFlag: 0 },
         { qe: 0x0441, nmps: 35, nlps: 32, switchFlag: 0 },
         { qe: 0x02a1, nmps: 36, nlps: 33, switchFlag: 0 },
         { qe: 0x0221, nmps: 37, nlps: 34, switchFlag: 0 },
         { qe: 0x0141, nmps: 38, nlps: 35, switchFlag: 0 },
         { qe: 0x0111, nmps: 39, nlps: 36, switchFlag: 0 },
         { qe: 0x0085, nmps: 40, nlps: 37, switchFlag: 0 },
         { qe: 0x0049, nmps: 41, nlps: 38, switchFlag: 0 },
         { qe: 0x0025, nmps: 42, nlps: 39, switchFlag: 0 },
         { qe: 0x0015, nmps: 43, nlps: 40, switchFlag: 0 },
         { qe: 0x0009, nmps: 44, nlps: 41, switchFlag: 0 },
         { qe: 0x0005, nmps: 45, nlps: 42, switchFlag: 0 },
         { qe: 0x0001, nmps: 45, nlps: 43, switchFlag: 0 },
         { qe: 0x5601, nmps: 46, nlps: 46, switchFlag: 0 },
      ];
      var ArithmeticDecoder = /*#__PURE__*/ (function () {
         function ArithmeticDecoder(data, start, end) {
            _classCallCheck(this, ArithmeticDecoder);
            this.data = data;
            this.bp = start;
            this.dataEnd = end;
            this.chigh = data[start];
            this.clow = 0;
            this.byteIn();
            this.chigh = ((this.chigh << 7) & 0xffff) | ((this.clow >> 9) & 0x7f);
            this.clow = (this.clow << 7) & 0xffff;
            this.ct -= 7;
            this.a = 0x8000;
         }
         return _createClass(ArithmeticDecoder, [
            {
               key: "byteIn",
               value: function byteIn() {
                  var data = this.data;
                  var bp = this.bp;
                  if (data[bp] === 0xff) {
                     if (data[bp + 1] > 0x8f) {
                        this.clow += 0xff00;
                        this.ct = 8;
                     } else {
                        bp++;
                        this.clow += data[bp] << 9;
                        this.ct = 7;
                        this.bp = bp;
                     }
                  } else {
                     bp++;
                     this.clow += bp < this.dataEnd ? data[bp] << 8 : 0xff00;
                     this.ct = 8;
                     this.bp = bp;
                  }
                  if (this.clow > 0xffff) {
                     this.chigh += this.clow >> 16;
                     this.clow &= 0xffff;
                  }
               },
            },
            {
               key: "readBit",
               value: function readBit(contexts, pos) {
                  var cx_index = contexts[pos] >> 1,
                     cx_mps = contexts[pos] & 1;
                  var qeTableIcx = QeTable[cx_index];
                  var qeIcx = qeTableIcx.qe;
                  var d;
                  var a = this.a - qeIcx;
                  if (this.chigh < qeIcx) {
                     if (a < qeIcx) {
                        a = qeIcx;
                        d = cx_mps;
                        cx_index = qeTableIcx.nmps;
                     } else {
                        a = qeIcx;
                        d = 1 ^ cx_mps;
                        if (qeTableIcx.switchFlag === 1) {
                           cx_mps = d;
                        }
                        cx_index = qeTableIcx.nlps;
                     }
                  } else {
                     this.chigh -= qeIcx;
                     if ((a & 0x8000) !== 0) {
                        this.a = a;
                        return cx_mps;
                     }
                     if (a < qeIcx) {
                        d = 1 ^ cx_mps;
                        if (qeTableIcx.switchFlag === 1) {
                           cx_mps = d;
                        }
                        cx_index = qeTableIcx.nlps;
                     } else {
                        d = cx_mps;
                        cx_index = qeTableIcx.nmps;
                     }
                  }
                  do {
                     if (this.ct === 0) {
                        this.byteIn();
                     }
                     a <<= 1;
                     this.chigh =
                        ((this.chigh << 1) & 0xffff) | ((this.clow >> 15) & 1);
                     this.clow = (this.clow << 1) & 0xffff;
                     this.ct--;
                  } while ((a & 0x8000) === 0);
                  this.a = a;
                  contexts[pos] = (cx_index << 1) | cx_mps;
                  return d;
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/jbig2.js
      var Jbig2Error = /*#__PURE__*/ (function (_BaseException10) {
         function Jbig2Error(msg) {
            _classCallCheck(this, Jbig2Error);
            return _callSuper(this, Jbig2Error, [msg, "Jbig2Error"]);
         }
         _inherits(Jbig2Error, _BaseException10);
         return _createClass(Jbig2Error);
      })(BaseException);
      var ContextCache = /*#__PURE__*/ (function () {
         function ContextCache() {
            _classCallCheck(this, ContextCache);
         }
         return _createClass(ContextCache, [
            {
               key: "getContexts",
               value: function getContexts(id) {
                  if (id in this) {
                     return this[id];
                  }
                  return (this[id] = new Int8Array(1 << 16));
               },
            },
         ]);
      })();
      var DecodingContext = /*#__PURE__*/ (function () {
         function DecodingContext(data, start, end) {
            _classCallCheck(this, DecodingContext);
            this.data = data;
            this.start = start;
            this.end = end;
         }
         return _createClass(DecodingContext, [
            {
               key: "decoder",
               get: function get() {
                  var decoder = new ArithmeticDecoder(
                     this.data,
                     this.start,
                     this.end,
                  );
                  return shadow(this, "decoder", decoder);
               },
            },
            {
               key: "contextCache",
               get: function get() {
                  var cache = new ContextCache();
                  return shadow(this, "contextCache", cache);
               },
            },
         ]);
      })();
      var MAX_INT_32 = Math.pow(2, 31) - 1;
      var MIN_INT_32 = -Math.pow(2, 31);
      function decodeInteger(contextCache, procedure, decoder) {
         var contexts = contextCache.getContexts(procedure);
         var prev = 1;
         function readBits(length) {
            var v = 0;
            for (var i = 0; i < length; i++) {
               var bit = decoder.readBit(contexts, prev);
               prev =
                  prev < 256 ? (prev << 1) | bit : (((prev << 1) | bit) & 511) | 256;
               v = (v << 1) | bit;
            }
            return v >>> 0;
         }
         var sign = readBits(1);
         var value = readBits(1)
            ? readBits(1)
               ? readBits(1)
                  ? readBits(1)
                     ? readBits(1)
                        ? readBits(32) + 4436
                        : readBits(12) + 340
                     : readBits(8) + 84
                  : readBits(6) + 20
               : readBits(4) + 4
            : readBits(2);
         var signedValue;
         if (sign === 0) {
            signedValue = value;
         } else if (value > 0) {
            signedValue = -value;
         }
         if (signedValue >= MIN_INT_32 && signedValue <= MAX_INT_32) {
            return signedValue;
         }
         return null;
      }
      function decodeIAID(contextCache, decoder, codeLength) {
         var contexts = contextCache.getContexts("IAID");
         var prev = 1;
         for (var i = 0; i < codeLength; i++) {
            var bit = decoder.readBit(contexts, prev);
            prev = (prev << 1) | bit;
         }
         if (codeLength < 31) {
            return prev & ((1 << codeLength) - 1);
         }
         return prev & 0x7fffffff;
      }
      var SegmentTypes = [
         "SymbolDictionary",
         null,
         null,
         null,
         "IntermediateTextRegion",
         null,
         "ImmediateTextRegion",
         "ImmediateLosslessTextRegion",
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         "PatternDictionary",
         null,
         null,
         null,
         "IntermediateHalftoneRegion",
         null,
         "ImmediateHalftoneRegion",
         "ImmediateLosslessHalftoneRegion",
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         "IntermediateGenericRegion",
         null,
         "ImmediateGenericRegion",
         "ImmediateLosslessGenericRegion",
         "IntermediateGenericRefinementRegion",
         null,
         "ImmediateGenericRefinementRegion",
         "ImmediateLosslessGenericRefinementRegion",
         null,
         null,
         null,
         null,
         "PageInformation",
         "EndOfPage",
         "EndOfStripe",
         "EndOfFile",
         "Profiles",
         "Tables",
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         null,
         "Extension",
      ];
      var CodingTemplates = [
         [
            { x: -1, y: -2 },
            { x: 0, y: -2 },
            { x: 1, y: -2 },
            { x: -2, y: -1 },
            { x: -1, y: -1 },
            { x: 0, y: -1 },
            { x: 1, y: -1 },
            { x: 2, y: -1 },
            { x: -4, y: 0 },
            { x: -3, y: 0 },
            { x: -2, y: 0 },
            { x: -1, y: 0 },
         ],
         [
            { x: -1, y: -2 },
            { x: 0, y: -2 },
            { x: 1, y: -2 },
            { x: 2, y: -2 },
            { x: -2, y: -1 },
            { x: -1, y: -1 },
            { x: 0, y: -1 },
            { x: 1, y: -1 },
            { x: 2, y: -1 },
            { x: -3, y: 0 },
            { x: -2, y: 0 },
            { x: -1, y: 0 },
         ],
         [
            { x: -1, y: -2 },
            { x: 0, y: -2 },
            { x: 1, y: -2 },
            { x: -2, y: -1 },
            { x: -1, y: -1 },
            { x: 0, y: -1 },
            { x: 1, y: -1 },
            { x: -2, y: 0 },
            { x: -1, y: 0 },
         ],
         [
            { x: -3, y: -1 },
            { x: -2, y: -1 },
            { x: -1, y: -1 },
            { x: 0, y: -1 },
            { x: 1, y: -1 },
            { x: -4, y: 0 },
            { x: -3, y: 0 },
            { x: -2, y: 0 },
            { x: -1, y: 0 },
         ],
      ];
      var RefinementTemplates = [
         {
            coding: [
               { x: 0, y: -1 },
               { x: 1, y: -1 },
               { x: -1, y: 0 },
            ],
            reference: [
               { x: 0, y: -1 },
               { x: 1, y: -1 },
               { x: -1, y: 0 },
               { x: 0, y: 0 },
               { x: 1, y: 0 },
               { x: -1, y: 1 },
               { x: 0, y: 1 },
               { x: 1, y: 1 },
            ],
         },
         {
            coding: [
               { x: -1, y: -1 },
               { x: 0, y: -1 },
               { x: 1, y: -1 },
               { x: -1, y: 0 },
            ],
            reference: [
               { x: 0, y: -1 },
               { x: -1, y: 0 },
               { x: 0, y: 0 },
               { x: 1, y: 0 },
               { x: 0, y: 1 },
               { x: 1, y: 1 },
            ],
         },
      ];
      var ReusedContexts = [0x9b25, 0x0795, 0x00e5, 0x0195];
      var RefinementReusedContexts = [0x0020, 0x0008];
      function decodeBitmapTemplate0(width, height, decodingContext) {
         var decoder = decodingContext.decoder;
         var contexts = decodingContext.contextCache.getContexts("GB");
         var bitmap = [];
         var contextLabel, i, j, pixel, row, row1, row2;
         var OLD_PIXEL_MASK = 0x7bf7;
         for (i = 0; i < height; i++) {
            row = bitmap[i] = new Uint8Array(width);
            row1 = i < 1 ? row : bitmap[i - 1];
            row2 = i < 2 ? row : bitmap[i - 2];
            contextLabel =
               (row2[0] << 13) |
               (row2[1] << 12) |
               (row2[2] << 11) |
               (row1[0] << 7) |
               (row1[1] << 6) |
               (row1[2] << 5) |
               (row1[3] << 4);
            for (j = 0; j < width; j++) {
               row[j] = pixel = decoder.readBit(contexts, contextLabel);
               contextLabel =
                  ((contextLabel & OLD_PIXEL_MASK) << 1) |
                  (j + 3 < width ? row2[j + 3] << 11 : 0) |
                  (j + 4 < width ? row1[j + 4] << 4 : 0) |
                  pixel;
            }
         }
         return bitmap;
      }
      function decodeBitmap(
         mmr,
         width,
         height,
         templateIndex,
         prediction,
         skip,
         at,
         decodingContext,
      ) {
         if (mmr) {
            var input = new Reader(
               decodingContext.data,
               decodingContext.start,
               decodingContext.end,
            );
            return decodeMMRBitmap(input, width, height, false);
         }
         if (
            templateIndex === 0 &&
            !skip &&
            !prediction &&
            at.length === 4 &&
            at[0].x === 3 &&
            at[0].y === -1 &&
            at[1].x === -3 &&
            at[1].y === -1 &&
            at[2].x === 2 &&
            at[2].y === -2 &&
            at[3].x === -2 &&
            at[3].y === -2
         ) {
            return decodeBitmapTemplate0(width, height, decodingContext);
         }
         var useskip = !!skip;
         var template = CodingTemplates[templateIndex].concat(at);
         template.sort(function (a, b) {
            return a.y - b.y || a.x - b.x;
         });
         var templateLength = template.length;
         var templateX = new Int8Array(templateLength);
         var templateY = new Int8Array(templateLength);
         var changingTemplateEntries = [];
         var reuseMask = 0,
            minX = 0,
            maxX = 0,
            minY = 0;
         var c, k;
         for (k = 0; k < templateLength; k++) {
            templateX[k] = template[k].x;
            templateY[k] = template[k].y;
            minX = Math.min(minX, template[k].x);
            maxX = Math.max(maxX, template[k].x);
            minY = Math.min(minY, template[k].y);
            if (
               k < templateLength - 1 &&
               template[k].y === template[k + 1].y &&
               template[k].x === template[k + 1].x - 1
            ) {
               reuseMask |= 1 << (templateLength - 1 - k);
            } else {
               changingTemplateEntries.push(k);
            }
         }
         var changingEntriesLength = changingTemplateEntries.length;
         var changingTemplateX = new Int8Array(changingEntriesLength);
         var changingTemplateY = new Int8Array(changingEntriesLength);
         var changingTemplateBit = new Uint16Array(changingEntriesLength);
         for (c = 0; c < changingEntriesLength; c++) {
            k = changingTemplateEntries[c];
            changingTemplateX[c] = template[k].x;
            changingTemplateY[c] = template[k].y;
            changingTemplateBit[c] = 1 << (templateLength - 1 - k);
         }
         var sbb_left = -minX;
         var sbb_top = -minY;
         var sbb_right = width - maxX;
         var pseudoPixelContext = ReusedContexts[templateIndex];
         var row = new Uint8Array(width);
         var bitmap = [];
         var decoder = decodingContext.decoder;
         var contexts = decodingContext.contextCache.getContexts("GB");
         var ltp = 0,
            j,
            i0,
            j0,
            contextLabel = 0,
            bit,
            shift;
         for (var i = 0; i < height; i++) {
            if (prediction) {
               var sltp = decoder.readBit(contexts, pseudoPixelContext);
               ltp ^= sltp;
               if (ltp) {
                  bitmap.push(row);
                  continue;
               }
            }
            row = new Uint8Array(row);
            bitmap.push(row);
            for (j = 0; j < width; j++) {
               if (useskip && skip[i][j]) {
                  row[j] = 0;
                  continue;
               }
               if (j >= sbb_left && j < sbb_right && i >= sbb_top) {
                  contextLabel = (contextLabel << 1) & reuseMask;
                  for (k = 0; k < changingEntriesLength; k++) {
                     i0 = i + changingTemplateY[k];
                     j0 = j + changingTemplateX[k];
                     bit = bitmap[i0][j0];
                     if (bit) {
                        bit = changingTemplateBit[k];
                        contextLabel |= bit;
                     }
                  }
               } else {
                  contextLabel = 0;
                  shift = templateLength - 1;
                  for (k = 0; k < templateLength; k++, shift--) {
                     j0 = j + templateX[k];
                     if (j0 >= 0 && j0 < width) {
                        i0 = i + templateY[k];
                        if (i0 >= 0) {
                           bit = bitmap[i0][j0];
                           if (bit) {
                              contextLabel |= bit << shift;
                           }
                        }
                     }
                  }
               }
               var pixel = decoder.readBit(contexts, contextLabel);
               row[j] = pixel;
            }
         }
         return bitmap;
      }
      function decodeRefinement(
         width,
         height,
         templateIndex,
         referenceBitmap,
         offsetX,
         offsetY,
         prediction,
         at,
         decodingContext,
      ) {
         var codingTemplate = RefinementTemplates[templateIndex].coding;
         if (templateIndex === 0) {
            codingTemplate = codingTemplate.concat([at[0]]);
         }
         var codingTemplateLength = codingTemplate.length;
         var codingTemplateX = new Int32Array(codingTemplateLength);
         var codingTemplateY = new Int32Array(codingTemplateLength);
         var k;
         for (k = 0; k < codingTemplateLength; k++) {
            codingTemplateX[k] = codingTemplate[k].x;
            codingTemplateY[k] = codingTemplate[k].y;
         }
         var referenceTemplate = RefinementTemplates[templateIndex].reference;
         if (templateIndex === 0) {
            referenceTemplate = referenceTemplate.concat([at[1]]);
         }
         var referenceTemplateLength = referenceTemplate.length;
         var referenceTemplateX = new Int32Array(referenceTemplateLength);
         var referenceTemplateY = new Int32Array(referenceTemplateLength);
         for (k = 0; k < referenceTemplateLength; k++) {
            referenceTemplateX[k] = referenceTemplate[k].x;
            referenceTemplateY[k] = referenceTemplate[k].y;
         }
         var referenceWidth = referenceBitmap[0].length;
         var referenceHeight = referenceBitmap.length;
         var pseudoPixelContext = RefinementReusedContexts[templateIndex];
         var bitmap = [];
         var decoder = decodingContext.decoder;
         var contexts = decodingContext.contextCache.getContexts("GR");
         var ltp = 0;
         for (var i = 0; i < height; i++) {
            if (prediction) {
               var sltp = decoder.readBit(contexts, pseudoPixelContext);
               ltp ^= sltp;
               if (ltp) {
                  throw new Jbig2Error("prediction is not supported");
               }
            }
            var row = new Uint8Array(width);
            bitmap.push(row);
            for (var j = 0; j < width; j++) {
               var i0 = void 0,
                  j0 = void 0;
               var contextLabel = 0;
               for (k = 0; k < codingTemplateLength; k++) {
                  i0 = i + codingTemplateY[k];
                  j0 = j + codingTemplateX[k];
                  if (i0 < 0 || j0 < 0 || j0 >= width) {
                     contextLabel <<= 1;
                  } else {
                     contextLabel = (contextLabel << 1) | bitmap[i0][j0];
                  }
               }
               for (k = 0; k < referenceTemplateLength; k++) {
                  i0 = i + referenceTemplateY[k] - offsetY;
                  j0 = j + referenceTemplateX[k] - offsetX;
                  if (
                     i0 < 0 ||
                     i0 >= referenceHeight ||
                     j0 < 0 ||
                     j0 >= referenceWidth
                  ) {
                     contextLabel <<= 1;
                  } else {
                     contextLabel = (contextLabel << 1) | referenceBitmap[i0][j0];
                  }
               }
               var pixel = decoder.readBit(contexts, contextLabel);
               row[j] = pixel;
            }
         }
         return bitmap;
      }
      function decodeSymbolDictionary(
         huffman,
         refinement,
         symbols,
         numberOfNewSymbols,
         numberOfExportedSymbols,
         huffmanTables,
         templateIndex,
         at,
         refinementTemplateIndex,
         refinementAt,
         decodingContext,
         huffmanInput,
      ) {
         if (huffman && refinement) {
            throw new Jbig2Error("symbol refinement with Huffman is not supported");
         }
         var newSymbols = [];
         var currentHeight = 0;
         var symbolCodeLength = log2(symbols.length + numberOfNewSymbols);
         var decoder = decodingContext.decoder;
         var contextCache = decodingContext.contextCache;
         var tableB1, symbolWidths;
         if (huffman) {
            tableB1 = getStandardTable(1);
            symbolWidths = [];
            symbolCodeLength = Math.max(symbolCodeLength, 1);
         }
         while (newSymbols.length < numberOfNewSymbols) {
            var deltaHeight = huffman
               ? huffmanTables.tableDeltaHeight.decode(huffmanInput)
               : decodeInteger(contextCache, "IADH", decoder);
            currentHeight += deltaHeight;
            var currentWidth = 0,
               totalWidth = 0;
            var firstSymbol = huffman ? symbolWidths.length : 0;
            while (true) {
               var deltaWidth = huffman
                  ? huffmanTables.tableDeltaWidth.decode(huffmanInput)
                  : decodeInteger(contextCache, "IADW", decoder);
               if (deltaWidth === null) {
                  break;
               }
               currentWidth += deltaWidth;
               totalWidth += currentWidth;
               var bitmap = void 0;
               if (refinement) {
                  var numberOfInstances = decodeInteger(
                     contextCache,
                     "IAAI",
                     decoder,
                  );
                  if (numberOfInstances > 1) {
                     bitmap = decodeTextRegion(
                        huffman,
                        refinement,
                        currentWidth,
                        currentHeight,
                        0,
                        numberOfInstances,
                        1,
                        symbols.concat(newSymbols),
                        symbolCodeLength,
                        0,
                        0,
                        1,
                        0,
                        huffmanTables,
                        refinementTemplateIndex,
                        refinementAt,
                        decodingContext,
                        0,
                        huffmanInput,
                     );
                  } else {
                     var symbolId = decodeIAID(
                        contextCache,
                        decoder,
                        symbolCodeLength,
                     );
                     var rdx = decodeInteger(contextCache, "IARDX", decoder);
                     var rdy = decodeInteger(contextCache, "IARDY", decoder);
                     var symbol =
                        symbolId < symbols.length
                           ? symbols[symbolId]
                           : newSymbols[symbolId - symbols.length];
                     bitmap = decodeRefinement(
                        currentWidth,
                        currentHeight,
                        refinementTemplateIndex,
                        symbol,
                        rdx,
                        rdy,
                        false,
                        refinementAt,
                        decodingContext,
                     );
                  }
                  newSymbols.push(bitmap);
               } else if (huffman) {
                  symbolWidths.push(currentWidth);
               } else {
                  bitmap = decodeBitmap(
                     false,
                     currentWidth,
                     currentHeight,
                     templateIndex,
                     false,
                     null,
                     at,
                     decodingContext,
                  );
                  newSymbols.push(bitmap);
               }
            }
            if (huffman && !refinement) {
               var bitmapSize = huffmanTables.tableBitmapSize.decode(huffmanInput);
               huffmanInput.byteAlign();
               var collectiveBitmap = void 0;
               if (bitmapSize === 0) {
                  collectiveBitmap = readUncompressedBitmap(
                     huffmanInput,
                     totalWidth,
                     currentHeight,
                  );
               } else {
                  var originalEnd = huffmanInput.end;
                  var bitmapEnd = huffmanInput.position + bitmapSize;
                  huffmanInput.end = bitmapEnd;
                  collectiveBitmap = decodeMMRBitmap(
                     huffmanInput,
                     totalWidth,
                     currentHeight,
                     false,
                  );
                  huffmanInput.end = originalEnd;
                  huffmanInput.position = bitmapEnd;
               }
               var numberOfSymbolsDecoded = symbolWidths.length;
               if (firstSymbol === numberOfSymbolsDecoded - 1) {
                  newSymbols.push(collectiveBitmap);
               } else {
                  var _i12 = void 0,
                     y = void 0,
                     xMin = 0,
                     xMax = void 0,
                     bitmapWidth = void 0,
                     symbolBitmap = void 0;
                  for (_i12 = firstSymbol; _i12 < numberOfSymbolsDecoded; _i12++) {
                     bitmapWidth = symbolWidths[_i12];
                     xMax = xMin + bitmapWidth;
                     symbolBitmap = [];
                     for (y = 0; y < currentHeight; y++) {
                        symbolBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));
                     }
                     newSymbols.push(symbolBitmap);
                     xMin = xMax;
                  }
               }
            }
         }
         var exportedSymbols = [],
            flags = [];
         var currentFlag = false,
            i,
            ii;
         var totalSymbolsLength = symbols.length + numberOfNewSymbols;
         while (flags.length < totalSymbolsLength) {
            var runLength = huffman
               ? tableB1.decode(huffmanInput)
               : decodeInteger(contextCache, "IAEX", decoder);
            while (runLength--) {
               flags.push(currentFlag);
            }
            currentFlag = !currentFlag;
         }
         for (i = 0, ii = symbols.length; i < ii; i++) {
            if (flags[i]) {
               exportedSymbols.push(symbols[i]);
            }
         }
         for (var j = 0; j < numberOfNewSymbols; i++, j++) {
            if (flags[i]) {
               exportedSymbols.push(newSymbols[j]);
            }
         }
         return exportedSymbols;
      }
      function decodeTextRegion(
         huffman,
         refinement,
         width,
         height,
         defaultPixelValue,
         numberOfSymbolInstances,
         stripSize,
         inputSymbols,
         symbolCodeLength,
         transposed,
         dsOffset,
         referenceCorner,
         combinationOperator,
         huffmanTables,
         refinementTemplateIndex,
         refinementAt,
         decodingContext,
         logStripSize,
         huffmanInput,
      ) {
         if (huffman && refinement) {
            throw new Jbig2Error("refinement with Huffman is not supported");
         }
         var bitmap = [];
         var i, row;
         for (i = 0; i < height; i++) {
            row = new Uint8Array(width);
            if (defaultPixelValue) {
               for (var j = 0; j < width; j++) {
                  row[j] = defaultPixelValue;
               }
            }
            bitmap.push(row);
         }
         var decoder = decodingContext.decoder;
         var contextCache = decodingContext.contextCache;
         var stripT = huffman
            ? -huffmanTables.tableDeltaT.decode(huffmanInput)
            : -decodeInteger(contextCache, "IADT", decoder);
         var firstS = 0;
         i = 0;
         while (i < numberOfSymbolInstances) {
            var deltaT = huffman
               ? huffmanTables.tableDeltaT.decode(huffmanInput)
               : decodeInteger(contextCache, "IADT", decoder);
            stripT += deltaT;
            var deltaFirstS = huffman
               ? huffmanTables.tableFirstS.decode(huffmanInput)
               : decodeInteger(contextCache, "IAFS", decoder);
            firstS += deltaFirstS;
            var currentS = firstS;
            do {
               var currentT = 0;
               if (stripSize > 1) {
                  currentT = huffman
                     ? huffmanInput.readBits(logStripSize)
                     : decodeInteger(contextCache, "IAIT", decoder);
               }
               var t = stripSize * stripT + currentT;
               var symbolId = huffman
                  ? huffmanTables.symbolIDTable.decode(huffmanInput)
                  : decodeIAID(contextCache, decoder, symbolCodeLength);
               var applyRefinement =
                  refinement &&
                  (huffman
                     ? huffmanInput.readBit()
                     : decodeInteger(contextCache, "IARI", decoder));
               var symbolBitmap = inputSymbols[symbolId];
               var symbolWidth = symbolBitmap[0].length;
               var symbolHeight = symbolBitmap.length;
               if (applyRefinement) {
                  var rdw = decodeInteger(contextCache, "IARDW", decoder);
                  var rdh = decodeInteger(contextCache, "IARDH", decoder);
                  var rdx = decodeInteger(contextCache, "IARDX", decoder);
                  var rdy = decodeInteger(contextCache, "IARDY", decoder);
                  symbolWidth += rdw;
                  symbolHeight += rdh;
                  symbolBitmap = decodeRefinement(
                     symbolWidth,
                     symbolHeight,
                     refinementTemplateIndex,
                     symbolBitmap,
                     (rdw >> 1) + rdx,
                     (rdh >> 1) + rdy,
                     false,
                     refinementAt,
                     decodingContext,
                  );
               }
               var increment = 0;
               if (!transposed) {
                  if (referenceCorner > 1) {
                     currentS += symbolWidth - 1;
                  } else {
                     increment = symbolWidth - 1;
                  }
               } else if (!(referenceCorner & 1)) {
                  currentS += symbolHeight - 1;
               } else {
                  increment = symbolHeight - 1;
               }
               var offsetT = t - (referenceCorner & 1 ? 0 : symbolHeight - 1);
               var offsetS = currentS - (referenceCorner & 2 ? symbolWidth - 1 : 0);
               var s2 = void 0,
                  t2 = void 0,
                  symbolRow = void 0;
               if (transposed) {
                  for (s2 = 0; s2 < symbolHeight; s2++) {
                     row = bitmap[offsetS + s2];
                     if (!row) {
                        continue;
                     }
                     symbolRow = symbolBitmap[s2];
                     var maxWidth = Math.min(width - offsetT, symbolWidth);
                     switch (combinationOperator) {
                        case 0:
                           for (t2 = 0; t2 < maxWidth; t2++) {
                              row[offsetT + t2] |= symbolRow[t2];
                           }
                           break;
                        case 2:
                           for (t2 = 0; t2 < maxWidth; t2++) {
                              row[offsetT + t2] ^= symbolRow[t2];
                           }
                           break;
                        default:
                           throw new Jbig2Error(
                              "operator ".concat(
                                 combinationOperator,
                                 " is not supported",
                              ),
                           );
                     }
                  }
               } else {
                  for (t2 = 0; t2 < symbolHeight; t2++) {
                     row = bitmap[offsetT + t2];
                     if (!row) {
                        continue;
                     }
                     symbolRow = symbolBitmap[t2];
                     switch (combinationOperator) {
                        case 0:
                           for (s2 = 0; s2 < symbolWidth; s2++) {
                              row[offsetS + s2] |= symbolRow[s2];
                           }
                           break;
                        case 2:
                           for (s2 = 0; s2 < symbolWidth; s2++) {
                              row[offsetS + s2] ^= symbolRow[s2];
                           }
                           break;
                        default:
                           throw new Jbig2Error(
                              "operator ".concat(
                                 combinationOperator,
                                 " is not supported",
                              ),
                           );
                     }
                  }
               }
               i++;
               var deltaS = huffman
                  ? huffmanTables.tableDeltaS.decode(huffmanInput)
                  : decodeInteger(contextCache, "IADS", decoder);
               if (deltaS === null) {
                  break;
               }
               currentS += increment + deltaS + dsOffset;
            } while (true);
         }
         return bitmap;
      }
      function decodePatternDictionary(
         mmr,
         patternWidth,
         patternHeight,
         maxPatternIndex,
         template,
         decodingContext,
      ) {
         var at = [];
         if (!mmr) {
            at.push({ x: -patternWidth, y: 0 });
            if (template === 0) {
               at.push({ x: -3, y: -1 }, { x: 2, y: -2 }, { x: -2, y: -2 });
            }
         }
         var collectiveWidth = (maxPatternIndex + 1) * patternWidth;
         var collectiveBitmap = decodeBitmap(
            mmr,
            collectiveWidth,
            patternHeight,
            template,
            false,
            null,
            at,
            decodingContext,
         );
         var patterns = [];
         for (var i = 0; i <= maxPatternIndex; i++) {
            var patternBitmap = [];
            var xMin = patternWidth * i;
            var xMax = xMin + patternWidth;
            for (var y = 0; y < patternHeight; y++) {
               patternBitmap.push(collectiveBitmap[y].subarray(xMin, xMax));
            }
            patterns.push(patternBitmap);
         }
         return patterns;
      }
      function decodeHalftoneRegion(
         mmr,
         patterns,
         template,
         regionWidth,
         regionHeight,
         defaultPixelValue,
         enableSkip,
         combinationOperator,
         gridWidth,
         gridHeight,
         gridOffsetX,
         gridOffsetY,
         gridVectorX,
         gridVectorY,
         decodingContext,
      ) {
         var skip = null;
         if (enableSkip) {
            throw new Jbig2Error("skip is not supported");
         }
         if (combinationOperator !== 0) {
            throw new Jbig2Error(
               'operator "'.concat(
                  combinationOperator,
                  '" is not supported in halftone region',
               ),
            );
         }
         var regionBitmap = [];
         var i, j, row;
         for (i = 0; i < regionHeight; i++) {
            row = new Uint8Array(regionWidth);
            if (defaultPixelValue) {
               for (j = 0; j < regionWidth; j++) {
                  row[j] = defaultPixelValue;
               }
            }
            regionBitmap.push(row);
         }
         var numberOfPatterns = patterns.length;
         var pattern0 = patterns[0];
         var patternWidth = pattern0[0].length,
            patternHeight = pattern0.length;
         var bitsPerValue = log2(numberOfPatterns);
         var at = [];
         if (!mmr) {
            at.push({ x: template <= 1 ? 3 : 2, y: -1 });
            if (template === 0) {
               at.push({ x: -3, y: -1 }, { x: 2, y: -2 }, { x: -2, y: -2 });
            }
         }
         var grayScaleBitPlanes = [];
         var mmrInput, bitmap;
         if (mmr) {
            mmrInput = new Reader(
               decodingContext.data,
               decodingContext.start,
               decodingContext.end,
            );
         }
         for (i = bitsPerValue - 1; i >= 0; i--) {
            if (mmr) {
               bitmap = decodeMMRBitmap(mmrInput, gridWidth, gridHeight, true);
            } else {
               bitmap = decodeBitmap(
                  false,
                  gridWidth,
                  gridHeight,
                  template,
                  false,
                  skip,
                  at,
                  decodingContext,
               );
            }
            grayScaleBitPlanes[i] = bitmap;
         }
         var mg, ng, bit, patternIndex, patternBitmap, x, y, patternRow, regionRow;
         for (mg = 0; mg < gridHeight; mg++) {
            for (ng = 0; ng < gridWidth; ng++) {
               bit = 0;
               patternIndex = 0;
               for (j = bitsPerValue - 1; j >= 0; j--) {
                  bit ^= grayScaleBitPlanes[j][mg][ng];
                  patternIndex |= bit << j;
               }
               patternBitmap = patterns[patternIndex];
               x = (gridOffsetX + mg * gridVectorY + ng * gridVectorX) >> 8;
               y = (gridOffsetY + mg * gridVectorX - ng * gridVectorY) >> 8;
               if (
                  x >= 0 &&
                  x + patternWidth <= regionWidth &&
                  y >= 0 &&
                  y + patternHeight <= regionHeight
               ) {
                  for (i = 0; i < patternHeight; i++) {
                     regionRow = regionBitmap[y + i];
                     patternRow = patternBitmap[i];
                     for (j = 0; j < patternWidth; j++) {
                        regionRow[x + j] |= patternRow[j];
                     }
                  }
               } else {
                  var regionX = void 0,
                     regionY = void 0;
                  for (i = 0; i < patternHeight; i++) {
                     regionY = y + i;
                     if (regionY < 0 || regionY >= regionHeight) {
                        continue;
                     }
                     regionRow = regionBitmap[regionY];
                     patternRow = patternBitmap[i];
                     for (j = 0; j < patternWidth; j++) {
                        regionX = x + j;
                        if (regionX >= 0 && regionX < regionWidth) {
                           regionRow[regionX] |= patternRow[j];
                        }
                     }
                  }
               }
            }
         }
         return regionBitmap;
      }
      function readSegmentHeader(data, start) {
         var segmentHeader = {};
         segmentHeader.number = readUint32(data, start);
         var flags = data[start + 4];
         var segmentType = flags & 0x3f;
         if (!SegmentTypes[segmentType]) {
            throw new Jbig2Error("invalid segment type: " + segmentType);
         }
         segmentHeader.type = segmentType;
         segmentHeader.typeName = SegmentTypes[segmentType];
         segmentHeader.deferredNonRetain = !!(flags & 0x80);
         var pageAssociationFieldSize = !!(flags & 0x40);
         var referredFlags = data[start + 5];
         var referredToCount = (referredFlags >> 5) & 7;
         var retainBits = [referredFlags & 31];
         var position = start + 6;
         if (referredFlags === 7) {
            referredToCount = readUint32(data, position - 1) & 0x1fffffff;
            position += 3;
            var bytes = (referredToCount + 7) >> 3;
            retainBits[0] = data[position++];
            while (--bytes > 0) {
               retainBits.push(data[position++]);
            }
         } else if (referredFlags === 5 || referredFlags === 6) {
            throw new Jbig2Error("invalid referred-to flags");
         }
         segmentHeader.retainBits = retainBits;
         var referredToSegmentNumberSize = 4;
         if (segmentHeader.number <= 256) {
            referredToSegmentNumberSize = 1;
         } else if (segmentHeader.number <= 65536) {
            referredToSegmentNumberSize = 2;
         }
         var referredTo = [];
         var i, ii;
         for (i = 0; i < referredToCount; i++) {
            var number = void 0;
            if (referredToSegmentNumberSize === 1) {
               number = data[position];
            } else if (referredToSegmentNumberSize === 2) {
               number = readUint16(data, position);
            } else {
               number = readUint32(data, position);
            }
            referredTo.push(number);
            position += referredToSegmentNumberSize;
         }
         segmentHeader.referredTo = referredTo;
         if (!pageAssociationFieldSize) {
            segmentHeader.pageAssociation = data[position++];
         } else {
            segmentHeader.pageAssociation = readUint32(data, position);
            position += 4;
         }
         segmentHeader.length = readUint32(data, position);
         position += 4;
         if (segmentHeader.length === 0xffffffff) {
            if (segmentType === 38) {
               var genericRegionInfo = readRegionSegmentInformation(data, position);
               var genericRegionSegmentFlags =
                  data[position + RegionSegmentInformationFieldLength];
               var genericRegionMmr = !!(genericRegionSegmentFlags & 1);
               var searchPatternLength = 6;
               var searchPattern = new Uint8Array(searchPatternLength);
               if (!genericRegionMmr) {
                  searchPattern[0] = 0xff;
                  searchPattern[1] = 0xac;
               }
               searchPattern[2] = (genericRegionInfo.height >>> 24) & 0xff;
               searchPattern[3] = (genericRegionInfo.height >> 16) & 0xff;
               searchPattern[4] = (genericRegionInfo.height >> 8) & 0xff;
               searchPattern[5] = genericRegionInfo.height & 0xff;
               for (i = position, ii = data.length; i < ii; i++) {
                  var j = 0;
                  while (
                     j < searchPatternLength &&
                     searchPattern[j] === data[i + j]
                     ) {
                     j++;
                  }
                  if (j === searchPatternLength) {
                     segmentHeader.length = i + searchPatternLength;
                     break;
                  }
               }
               if (segmentHeader.length === 0xffffffff) {
                  throw new Jbig2Error("segment end was not found");
               }
            } else {
               throw new Jbig2Error("invalid unknown segment length");
            }
         }
         segmentHeader.headerEnd = position;
         return segmentHeader;
      }
      function readSegments(header, data, start, end) {
         var segments = [];
         var position = start;
         while (position < end) {
            var segmentHeader = readSegmentHeader(data, position);
            position = segmentHeader.headerEnd;
            var segment = { header: segmentHeader, data: data };
            if (!header.randomAccess) {
               segment.start = position;
               position += segmentHeader.length;
               segment.end = position;
            }
            segments.push(segment);
            if (segmentHeader.type === 51) {
               break;
            }
         }
         if (header.randomAccess) {
            for (var i = 0, ii = segments.length; i < ii; i++) {
               segments[i].start = position;
               position += segments[i].header.length;
               segments[i].end = position;
            }
         }
         return segments;
      }
      function readRegionSegmentInformation(data, start) {
         return {
            width: readUint32(data, start),
            height: readUint32(data, start + 4),
            x: readUint32(data, start + 8),
            y: readUint32(data, start + 12),
            combinationOperator: data[start + 16] & 7,
         };
      }
      var RegionSegmentInformationFieldLength = 17;
      function processSegment(segment, visitor) {
         var header = segment.header;
         var data = segment.data,
            end = segment.end;
         var position = segment.start;
         var args, at, i, atLength;
         switch (header.type) {
            case 0:
               var dictionary = {};
               var dictionaryFlags = readUint16(data, position);
               dictionary.huffman = !!(dictionaryFlags & 1);
               dictionary.refinement = !!(dictionaryFlags & 2);
               dictionary.huffmanDHSelector = (dictionaryFlags >> 2) & 3;
               dictionary.huffmanDWSelector = (dictionaryFlags >> 4) & 3;
               dictionary.bitmapSizeSelector = (dictionaryFlags >> 6) & 1;
               dictionary.aggregationInstancesSelector = (dictionaryFlags >> 7) & 1;
               dictionary.bitmapCodingContextUsed = !!(dictionaryFlags & 256);
               dictionary.bitmapCodingContextRetained = !!(dictionaryFlags & 512);
               dictionary.template = (dictionaryFlags >> 10) & 3;
               dictionary.refinementTemplate = (dictionaryFlags >> 12) & 1;
               position += 2;
               if (!dictionary.huffman) {
                  atLength = dictionary.template === 0 ? 4 : 1;
                  at = [];
                  for (i = 0; i < atLength; i++) {
                     at.push({
                        x: readInt8(data, position),
                        y: readInt8(data, position + 1),
                     });
                     position += 2;
                  }
                  dictionary.at = at;
               }
               if (dictionary.refinement && !dictionary.refinementTemplate) {
                  at = [];
                  for (i = 0; i < 2; i++) {
                     at.push({
                        x: readInt8(data, position),
                        y: readInt8(data, position + 1),
                     });
                     position += 2;
                  }
                  dictionary.refinementAt = at;
               }
               dictionary.numberOfExportedSymbols = readUint32(data, position);
               position += 4;
               dictionary.numberOfNewSymbols = readUint32(data, position);
               position += 4;
               args = [
                  dictionary,
                  header.number,
                  header.referredTo,
                  data,
                  position,
                  end,
               ];
               break;
            case 6:
            case 7:
               var textRegion = {};
               textRegion.info = readRegionSegmentInformation(data, position);
               position += RegionSegmentInformationFieldLength;
               var textRegionSegmentFlags = readUint16(data, position);
               position += 2;
               textRegion.huffman = !!(textRegionSegmentFlags & 1);
               textRegion.refinement = !!(textRegionSegmentFlags & 2);
               textRegion.logStripSize = (textRegionSegmentFlags >> 2) & 3;
               textRegion.stripSize = 1 << textRegion.logStripSize;
               textRegion.referenceCorner = (textRegionSegmentFlags >> 4) & 3;
               textRegion.transposed = !!(textRegionSegmentFlags & 64);
               textRegion.combinationOperator = (textRegionSegmentFlags >> 7) & 3;
               textRegion.defaultPixelValue = (textRegionSegmentFlags >> 9) & 1;
               textRegion.dsOffset = (textRegionSegmentFlags << 17) >> 27;
               textRegion.refinementTemplate = (textRegionSegmentFlags >> 15) & 1;
               if (textRegion.huffman) {
                  var textRegionHuffmanFlags = readUint16(data, position);
                  position += 2;
                  textRegion.huffmanFS = textRegionHuffmanFlags & 3;
                  textRegion.huffmanDS = (textRegionHuffmanFlags >> 2) & 3;
                  textRegion.huffmanDT = (textRegionHuffmanFlags >> 4) & 3;
                  textRegion.huffmanRefinementDW = (textRegionHuffmanFlags >> 6) & 3;
                  textRegion.huffmanRefinementDH = (textRegionHuffmanFlags >> 8) & 3;
                  textRegion.huffmanRefinementDX = (textRegionHuffmanFlags >> 10) & 3;
                  textRegion.huffmanRefinementDY = (textRegionHuffmanFlags >> 12) & 3;
                  textRegion.huffmanRefinementSizeSelector = !!(
                     textRegionHuffmanFlags & 0x4000
                  );
               }
               if (textRegion.refinement && !textRegion.refinementTemplate) {
                  at = [];
                  for (i = 0; i < 2; i++) {
                     at.push({
                        x: readInt8(data, position),
                        y: readInt8(data, position + 1),
                     });
                     position += 2;
                  }
                  textRegion.refinementAt = at;
               }
               textRegion.numberOfSymbolInstances = readUint32(data, position);
               position += 4;
               args = [textRegion, header.referredTo, data, position, end];
               break;
            case 16:
               var patternDictionary = {};
               var patternDictionaryFlags = data[position++];
               patternDictionary.mmr = !!(patternDictionaryFlags & 1);
               patternDictionary.template = (patternDictionaryFlags >> 1) & 3;
               patternDictionary.patternWidth = data[position++];
               patternDictionary.patternHeight = data[position++];
               patternDictionary.maxPatternIndex = readUint32(data, position);
               position += 4;
               args = [patternDictionary, header.number, data, position, end];
               break;
            case 22:
            case 23:
               var halftoneRegion = {};
               halftoneRegion.info = readRegionSegmentInformation(data, position);
               position += RegionSegmentInformationFieldLength;
               var halftoneRegionFlags = data[position++];
               halftoneRegion.mmr = !!(halftoneRegionFlags & 1);
               halftoneRegion.template = (halftoneRegionFlags >> 1) & 3;
               halftoneRegion.enableSkip = !!(halftoneRegionFlags & 8);
               halftoneRegion.combinationOperator = (halftoneRegionFlags >> 4) & 7;
               halftoneRegion.defaultPixelValue = (halftoneRegionFlags >> 7) & 1;
               halftoneRegion.gridWidth = readUint32(data, position);
               position += 4;
               halftoneRegion.gridHeight = readUint32(data, position);
               position += 4;
               halftoneRegion.gridOffsetX = readUint32(data, position) & 0xffffffff;
               position += 4;
               halftoneRegion.gridOffsetY = readUint32(data, position) & 0xffffffff;
               position += 4;
               halftoneRegion.gridVectorX = readUint16(data, position);
               position += 2;
               halftoneRegion.gridVectorY = readUint16(data, position);
               position += 2;
               args = [halftoneRegion, header.referredTo, data, position, end];
               break;
            case 38:
            case 39:
               var genericRegion = {};
               genericRegion.info = readRegionSegmentInformation(data, position);
               position += RegionSegmentInformationFieldLength;
               var genericRegionSegmentFlags = data[position++];
               genericRegion.mmr = !!(genericRegionSegmentFlags & 1);
               genericRegion.template = (genericRegionSegmentFlags >> 1) & 3;
               genericRegion.prediction = !!(genericRegionSegmentFlags & 8);
               if (!genericRegion.mmr) {
                  atLength = genericRegion.template === 0 ? 4 : 1;
                  at = [];
                  for (i = 0; i < atLength; i++) {
                     at.push({
                        x: readInt8(data, position),
                        y: readInt8(data, position + 1),
                     });
                     position += 2;
                  }
                  genericRegion.at = at;
               }
               args = [genericRegion, data, position, end];
               break;
            case 48:
               var pageInfo = {
                  width: readUint32(data, position),
                  height: readUint32(data, position + 4),
                  resolutionX: readUint32(data, position + 8),
                  resolutionY: readUint32(data, position + 12),
               };
               if (pageInfo.height === 0xffffffff) {
                  delete pageInfo.height;
               }
               var pageSegmentFlags = data[position + 16];
               readUint16(data, position + 17);
               pageInfo.lossless = !!(pageSegmentFlags & 1);
               pageInfo.refinement = !!(pageSegmentFlags & 2);
               pageInfo.defaultPixelValue = (pageSegmentFlags >> 2) & 1;
               pageInfo.combinationOperator = (pageSegmentFlags >> 3) & 3;
               pageInfo.requiresBuffer = !!(pageSegmentFlags & 32);
               pageInfo.combinationOperatorOverride = !!(pageSegmentFlags & 64);
               args = [pageInfo];
               break;
            case 49:
               break;
            case 50:
               break;
            case 51:
               break;
            case 53:
               args = [header.number, data, position, end];
               break;
            case 62:
               break;
            default:
               throw new Jbig2Error(
                  "segment type "
                     .concat(header.typeName, "(")
                     .concat(header.type, ") is not implemented"),
               );
         }
         var callbackName = "on" + header.typeName;
         if (callbackName in visitor) {
            visitor[callbackName].apply(visitor, args);
         }
      }
      function processSegments(segments, visitor) {
         for (var i = 0, ii = segments.length; i < ii; i++) {
            processSegment(segments[i], visitor);
         }
      }
      function parseJbig2Chunks(chunks) {
         var visitor = new SimpleSegmentVisitor();
         for (var i = 0, ii = chunks.length; i < ii; i++) {
            var chunk = chunks[i];
            var segments = readSegments({}, chunk.data, chunk.start, chunk.end);
            processSegments(segments, visitor);
         }
         return visitor.buffer;
      }
      function parseJbig2(data) {
         throw new Error("Not implemented: parseJbig2");
      }
      var SimpleSegmentVisitor = /*#__PURE__*/ (function () {
         function SimpleSegmentVisitor() {
            _classCallCheck(this, SimpleSegmentVisitor);
         }
         return _createClass(SimpleSegmentVisitor, [
            {
               key: "onPageInformation",
               value: function onPageInformation(info) {
                  this.currentPageInfo = info;
                  var rowSize = (info.width + 7) >> 3;
                  var buffer = new Uint8ClampedArray(rowSize * info.height);
                  if (info.defaultPixelValue) {
                     buffer.fill(0xff);
                  }
                  this.buffer = buffer;
               },
            },
            {
               key: "drawBitmap",
               value: function drawBitmap(regionInfo, bitmap) {
                  var pageInfo = this.currentPageInfo;
                  var width = regionInfo.width,
                     height = regionInfo.height;
                  var rowSize = (pageInfo.width + 7) >> 3;
                  var combinationOperator = pageInfo.combinationOperatorOverride
                     ? regionInfo.combinationOperator
                     : pageInfo.combinationOperator;
                  var buffer = this.buffer;
                  var mask0 = 128 >> (regionInfo.x & 7);
                  var offset0 = regionInfo.y * rowSize + (regionInfo.x >> 3);
                  var i, j, mask, offset;
                  switch (combinationOperator) {
                     case 0:
                        for (i = 0; i < height; i++) {
                           mask = mask0;
                           offset = offset0;
                           for (j = 0; j < width; j++) {
                              if (bitmap[i][j]) {
                                 buffer[offset] |= mask;
                              }
                              mask >>= 1;
                              if (!mask) {
                                 mask = 128;
                                 offset++;
                              }
                           }
                           offset0 += rowSize;
                        }
                        break;
                     case 2:
                        for (i = 0; i < height; i++) {
                           mask = mask0;
                           offset = offset0;
                           for (j = 0; j < width; j++) {
                              if (bitmap[i][j]) {
                                 buffer[offset] ^= mask;
                              }
                              mask >>= 1;
                              if (!mask) {
                                 mask = 128;
                                 offset++;
                              }
                           }
                           offset0 += rowSize;
                        }
                        break;
                     default:
                        throw new Jbig2Error(
                           "operator ".concat(combinationOperator, " is not supported"),
                        );
                  }
               },
            },
            {
               key: "onImmediateGenericRegion",
               value: function onImmediateGenericRegion(region, data, start, end) {
                  var regionInfo = region.info;
                  var decodingContext = new DecodingContext(data, start, end);
                  var bitmap = decodeBitmap(
                     region.mmr,
                     regionInfo.width,
                     regionInfo.height,
                     region.template,
                     region.prediction,
                     null,
                     region.at,
                     decodingContext,
                  );
                  this.drawBitmap(regionInfo, bitmap);
               },
            },
            {
               key: "onImmediateLosslessGenericRegion",
               value: function onImmediateLosslessGenericRegion() {
                  this.onImmediateGenericRegion.apply(this, arguments);
               },
            },
            {
               key: "onSymbolDictionary",
               value: function onSymbolDictionary(
                  dictionary,
                  currentSegment,
                  referredSegments,
                  data,
                  start,
                  end,
               ) {
                  var huffmanTables, huffmanInput;
                  if (dictionary.huffman) {
                     huffmanTables = getSymbolDictionaryHuffmanTables(
                        dictionary,
                        referredSegments,
                        this.customTables,
                     );
                     huffmanInput = new Reader(data, start, end);
                  }
                  var symbols = this.symbols;
                  if (!symbols) {
                     this.symbols = symbols = {};
                  }
                  var inputSymbols = [];
                  var _iterator18 = _createForOfIteratorHelper(referredSegments),
                     _step18;
                  try {
                     for (_iterator18.s(); !(_step18 = _iterator18.n()).done; ) {
                        var referredSegment = _step18.value;
                        var referredSymbols = symbols[referredSegment];
                        if (referredSymbols) {
                           inputSymbols.push.apply(
                              inputSymbols,
                              _toConsumableArray(referredSymbols),
                           );
                        }
                     }
                  } catch (err) {
                     _iterator18.e(err);
                  } finally {
                     _iterator18.f();
                  }
                  var decodingContext = new DecodingContext(data, start, end);
                  symbols[currentSegment] = decodeSymbolDictionary(
                     dictionary.huffman,
                     dictionary.refinement,
                     inputSymbols,
                     dictionary.numberOfNewSymbols,
                     dictionary.numberOfExportedSymbols,
                     huffmanTables,
                     dictionary.template,
                     dictionary.at,
                     dictionary.refinementTemplate,
                     dictionary.refinementAt,
                     decodingContext,
                     huffmanInput,
                  );
               },
            },
            {
               key: "onImmediateTextRegion",
               value: function onImmediateTextRegion(
                  region,
                  referredSegments,
                  data,
                  start,
                  end,
               ) {
                  var regionInfo = region.info;
                  var huffmanTables, huffmanInput;
                  var symbols = this.symbols;
                  var inputSymbols = [];
                  var _iterator19 = _createForOfIteratorHelper(referredSegments),
                     _step19;
                  try {
                     for (_iterator19.s(); !(_step19 = _iterator19.n()).done; ) {
                        var referredSegment = _step19.value;
                        var referredSymbols = symbols[referredSegment];
                        if (referredSymbols) {
                           inputSymbols.push.apply(
                              inputSymbols,
                              _toConsumableArray(referredSymbols),
                           );
                        }
                     }
                  } catch (err) {
                     _iterator19.e(err);
                  } finally {
                     _iterator19.f();
                  }
                  var symbolCodeLength = log2(inputSymbols.length);
                  if (region.huffman) {
                     huffmanInput = new Reader(data, start, end);
                     huffmanTables = getTextRegionHuffmanTables(
                        region,
                        referredSegments,
                        this.customTables,
                        inputSymbols.length,
                        huffmanInput,
                     );
                  }
                  var decodingContext = new DecodingContext(data, start, end);
                  var bitmap = decodeTextRegion(
                     region.huffman,
                     region.refinement,
                     regionInfo.width,
                     regionInfo.height,
                     region.defaultPixelValue,
                     region.numberOfSymbolInstances,
                     region.stripSize,
                     inputSymbols,
                     symbolCodeLength,
                     region.transposed,
                     region.dsOffset,
                     region.referenceCorner,
                     region.combinationOperator,
                     huffmanTables,
                     region.refinementTemplate,
                     region.refinementAt,
                     decodingContext,
                     region.logStripSize,
                     huffmanInput,
                  );
                  this.drawBitmap(regionInfo, bitmap);
               },
            },
            {
               key: "onImmediateLosslessTextRegion",
               value: function onImmediateLosslessTextRegion() {
                  this.onImmediateTextRegion.apply(this, arguments);
               },
            },
            {
               key: "onPatternDictionary",
               value: function onPatternDictionary(
                  dictionary,
                  currentSegment,
                  data,
                  start,
                  end,
               ) {
                  var patterns = this.patterns;
                  if (!patterns) {
                     this.patterns = patterns = {};
                  }
                  var decodingContext = new DecodingContext(data, start, end);
                  patterns[currentSegment] = decodePatternDictionary(
                     dictionary.mmr,
                     dictionary.patternWidth,
                     dictionary.patternHeight,
                     dictionary.maxPatternIndex,
                     dictionary.template,
                     decodingContext,
                  );
               },
            },
            {
               key: "onImmediateHalftoneRegion",
               value: function onImmediateHalftoneRegion(
                  region,
                  referredSegments,
                  data,
                  start,
                  end,
               ) {
                  var patterns = this.patterns[referredSegments[0]];
                  var regionInfo = region.info;
                  var decodingContext = new DecodingContext(data, start, end);
                  var bitmap = decodeHalftoneRegion(
                     region.mmr,
                     patterns,
                     region.template,
                     regionInfo.width,
                     regionInfo.height,
                     region.defaultPixelValue,
                     region.enableSkip,
                     region.combinationOperator,
                     region.gridWidth,
                     region.gridHeight,
                     region.gridOffsetX,
                     region.gridOffsetY,
                     region.gridVectorX,
                     region.gridVectorY,
                     decodingContext,
                  );
                  this.drawBitmap(regionInfo, bitmap);
               },
            },
            {
               key: "onImmediateLosslessHalftoneRegion",
               value: function onImmediateLosslessHalftoneRegion() {
                  this.onImmediateHalftoneRegion.apply(this, arguments);
               },
            },
            {
               key: "onTables",
               value: function onTables(currentSegment, data, start, end) {
                  var customTables = this.customTables;
                  if (!customTables) {
                     this.customTables = customTables = {};
                  }
                  customTables[currentSegment] = decodeTablesSegment(
                     data,
                     start,
                     end,
                  );
               },
            },
         ]);
      })();
      var HuffmanLine = /*#__PURE__*/ _createClass(
         function HuffmanLine(lineData) {
            _classCallCheck(this, HuffmanLine);
            if (lineData.length === 2) {
               this.isOOB = true;
               this.rangeLow = 0;
               this.prefixLength = lineData[0];
               this.rangeLength = 0;
               this.prefixCode = lineData[1];
               this.isLowerRange = false;
            } else {
               this.isOOB = false;
               this.rangeLow = lineData[0];
               this.prefixLength = lineData[1];
               this.rangeLength = lineData[2];
               this.prefixCode = lineData[3];
               this.isLowerRange = lineData[4] === "lower";
            }
         },
      );
      var HuffmanTreeNode = /*#__PURE__*/ (function () {
         function HuffmanTreeNode(line) {
            _classCallCheck(this, HuffmanTreeNode);
            this.children = [];
            if (line) {
               this.isLeaf = true;
               this.rangeLength = line.rangeLength;
               this.rangeLow = line.rangeLow;
               this.isLowerRange = line.isLowerRange;
               this.isOOB = line.isOOB;
            } else {
               this.isLeaf = false;
            }
         }
         return _createClass(HuffmanTreeNode, [
            {
               key: "buildTree",
               value: function buildTree(line, shift) {
                  var bit = (line.prefixCode >> shift) & 1;
                  if (shift <= 0) {
                     this.children[bit] = new HuffmanTreeNode(line);
                  } else {
                     var node = this.children[bit];
                     if (!node) {
                        this.children[bit] = node = new HuffmanTreeNode(null);
                     }
                     node.buildTree(line, shift - 1);
                  }
               },
            },
            {
               key: "decodeNode",
               value: function decodeNode(reader) {
                  if (this.isLeaf) {
                     if (this.isOOB) {
                        return null;
                     }
                     var htOffset = reader.readBits(this.rangeLength);
                     return this.rangeLow + (this.isLowerRange ? -htOffset : htOffset);
                  }
                  var node = this.children[reader.readBit()];
                  if (!node) {
                     throw new Jbig2Error("invalid Huffman data");
                  }
                  return node.decodeNode(reader);
               },
            },
         ]);
      })();
      var HuffmanTable = /*#__PURE__*/ (function () {
         function HuffmanTable(lines, prefixCodesDone) {
            _classCallCheck(this, HuffmanTable);
            if (!prefixCodesDone) {
               this.assignPrefixCodes(lines);
            }
            this.rootNode = new HuffmanTreeNode(null);
            for (var i = 0, ii = lines.length; i < ii; i++) {
               var line = lines[i];
               if (line.prefixLength > 0) {
                  this.rootNode.buildTree(line, line.prefixLength - 1);
               }
            }
         }
         return _createClass(HuffmanTable, [
            {
               key: "decode",
               value: function decode(reader) {
                  return this.rootNode.decodeNode(reader);
               },
            },
            {
               key: "assignPrefixCodes",
               value: function assignPrefixCodes(lines) {
                  var linesLength = lines.length;
                  var prefixLengthMax = 0;
                  for (var i = 0; i < linesLength; i++) {
                     prefixLengthMax = Math.max(
                        prefixLengthMax,
                        lines[i].prefixLength,
                     );
                  }
                  var histogram = new Uint32Array(prefixLengthMax + 1);
                  for (var _i13 = 0; _i13 < linesLength; _i13++) {
                     histogram[lines[_i13].prefixLength]++;
                  }
                  var currentLength = 1,
                     firstCode = 0,
                     currentCode,
                     currentTemp,
                     line;
                  histogram[0] = 0;
                  while (currentLength <= prefixLengthMax) {
                     firstCode = (firstCode + histogram[currentLength - 1]) << 1;
                     currentCode = firstCode;
                     currentTemp = 0;
                     while (currentTemp < linesLength) {
                        line = lines[currentTemp];
                        if (line.prefixLength === currentLength) {
                           line.prefixCode = currentCode;
                           currentCode++;
                        }
                        currentTemp++;
                     }
                     currentLength++;
                  }
               },
            },
         ]);
      })();
      function decodeTablesSegment(data, start, end) {
         var flags = data[start];
         var lowestValue = readUint32(data, start + 1) & 0xffffffff;
         var highestValue = readUint32(data, start + 5) & 0xffffffff;
         var reader = new Reader(data, start + 9, end);
         var prefixSizeBits = ((flags >> 1) & 7) + 1;
         var rangeSizeBits = ((flags >> 4) & 7) + 1;
         var lines = [];
         var prefixLength,
            rangeLength,
            currentRangeLow = lowestValue;
         do {
            prefixLength = reader.readBits(prefixSizeBits);
            rangeLength = reader.readBits(rangeSizeBits);
            lines.push(
               new HuffmanLine([currentRangeLow, prefixLength, rangeLength, 0]),
            );
            currentRangeLow += 1 << rangeLength;
         } while (currentRangeLow < highestValue);
         prefixLength = reader.readBits(prefixSizeBits);
         lines.push(
            new HuffmanLine([lowestValue - 1, prefixLength, 32, 0, "lower"]),
         );
         prefixLength = reader.readBits(prefixSizeBits);
         lines.push(new HuffmanLine([highestValue, prefixLength, 32, 0]));
         if (flags & 1) {
            prefixLength = reader.readBits(prefixSizeBits);
            lines.push(new HuffmanLine([prefixLength, 0]));
         }
         return new HuffmanTable(lines, false);
      }
      var standardTablesCache = {};
      function getStandardTable(number) {
         var table = standardTablesCache[number];
         if (table) {
            return table;
         }
         var lines;
         switch (number) {
            case 1:
               lines = [
                  [0, 1, 4, 0x0],
                  [16, 2, 8, 0x2],
                  [272, 3, 16, 0x6],
                  [65808, 3, 32, 0x7],
               ];
               break;
            case 2:
               lines = [
                  [0, 1, 0, 0x0],
                  [1, 2, 0, 0x2],
                  [2, 3, 0, 0x6],
                  [3, 4, 3, 0xe],
                  [11, 5, 6, 0x1e],
                  [75, 6, 32, 0x3e],
                  [6, 0x3f],
               ];
               break;
            case 3:
               lines = [
                  [-256, 8, 8, 0xfe],
                  [0, 1, 0, 0x0],
                  [1, 2, 0, 0x2],
                  [2, 3, 0, 0x6],
                  [3, 4, 3, 0xe],
                  [11, 5, 6, 0x1e],
                  [-257, 8, 32, 0xff, "lower"],
                  [75, 7, 32, 0x7e],
                  [6, 0x3e],
               ];
               break;
            case 4:
               lines = [
                  [1, 1, 0, 0x0],
                  [2, 2, 0, 0x2],
                  [3, 3, 0, 0x6],
                  [4, 4, 3, 0xe],
                  [12, 5, 6, 0x1e],
                  [76, 5, 32, 0x1f],
               ];
               break;
            case 5:
               lines = [
                  [-255, 7, 8, 0x7e],
                  [1, 1, 0, 0x0],
                  [2, 2, 0, 0x2],
                  [3, 3, 0, 0x6],
                  [4, 4, 3, 0xe],
                  [12, 5, 6, 0x1e],
                  [-256, 7, 32, 0x7f, "lower"],
                  [76, 6, 32, 0x3e],
               ];
               break;
            case 6:
               lines = [
                  [-2048, 5, 10, 0x1c],
                  [-1024, 4, 9, 0x8],
                  [-512, 4, 8, 0x9],
                  [-256, 4, 7, 0xa],
                  [-128, 5, 6, 0x1d],
                  [-64, 5, 5, 0x1e],
                  [-32, 4, 5, 0xb],
                  [0, 2, 7, 0x0],
                  [128, 3, 7, 0x2],
                  [256, 3, 8, 0x3],
                  [512, 4, 9, 0xc],
                  [1024, 4, 10, 0xd],
                  [-2049, 6, 32, 0x3e, "lower"],
                  [2048, 6, 32, 0x3f],
               ];
               break;
            case 7:
               lines = [
                  [-1024, 4, 9, 0x8],
                  [-512, 3, 8, 0x0],
                  [-256, 4, 7, 0x9],
                  [-128, 5, 6, 0x1a],
                  [-64, 5, 5, 0x1b],
                  [-32, 4, 5, 0xa],
                  [0, 4, 5, 0xb],
                  [32, 5, 5, 0x1c],
                  [64, 5, 6, 0x1d],
                  [128, 4, 7, 0xc],
                  [256, 3, 8, 0x1],
                  [512, 3, 9, 0x2],
                  [1024, 3, 10, 0x3],
                  [-1025, 5, 32, 0x1e, "lower"],
                  [2048, 5, 32, 0x1f],
               ];
               break;
            case 8:
               lines = [
                  [-15, 8, 3, 0xfc],
                  [-7, 9, 1, 0x1fc],
                  [-5, 8, 1, 0xfd],
                  [-3, 9, 0, 0x1fd],
                  [-2, 7, 0, 0x7c],
                  [-1, 4, 0, 0xa],
                  [0, 2, 1, 0x0],
                  [2, 5, 0, 0x1a],
                  [3, 6, 0, 0x3a],
                  [4, 3, 4, 0x4],
                  [20, 6, 1, 0x3b],
                  [22, 4, 4, 0xb],
                  [38, 4, 5, 0xc],
                  [70, 5, 6, 0x1b],
                  [134, 5, 7, 0x1c],
                  [262, 6, 7, 0x3c],
                  [390, 7, 8, 0x7d],
                  [646, 6, 10, 0x3d],
                  [-16, 9, 32, 0x1fe, "lower"],
                  [1670, 9, 32, 0x1ff],
                  [2, 0x1],
               ];
               break;
            case 9:
               lines = [
                  [-31, 8, 4, 0xfc],
                  [-15, 9, 2, 0x1fc],
                  [-11, 8, 2, 0xfd],
                  [-7, 9, 1, 0x1fd],
                  [-5, 7, 1, 0x7c],
                  [-3, 4, 1, 0xa],
                  [-1, 3, 1, 0x2],
                  [1, 3, 1, 0x3],
                  [3, 5, 1, 0x1a],
                  [5, 6, 1, 0x3a],
                  [7, 3, 5, 0x4],
                  [39, 6, 2, 0x3b],
                  [43, 4, 5, 0xb],
                  [75, 4, 6, 0xc],
                  [139, 5, 7, 0x1b],
                  [267, 5, 8, 0x1c],
                  [523, 6, 8, 0x3c],
                  [779, 7, 9, 0x7d],
                  [1291, 6, 11, 0x3d],
                  [-32, 9, 32, 0x1fe, "lower"],
                  [3339, 9, 32, 0x1ff],
                  [2, 0x0],
               ];
               break;
            case 10:
               lines = [
                  [-21, 7, 4, 0x7a],
                  [-5, 8, 0, 0xfc],
                  [-4, 7, 0, 0x7b],
                  [-3, 5, 0, 0x18],
                  [-2, 2, 2, 0x0],
                  [2, 5, 0, 0x19],
                  [3, 6, 0, 0x36],
                  [4, 7, 0, 0x7c],
                  [5, 8, 0, 0xfd],
                  [6, 2, 6, 0x1],
                  [70, 5, 5, 0x1a],
                  [102, 6, 5, 0x37],
                  [134, 6, 6, 0x38],
                  [198, 6, 7, 0x39],
                  [326, 6, 8, 0x3a],
                  [582, 6, 9, 0x3b],
                  [1094, 6, 10, 0x3c],
                  [2118, 7, 11, 0x7d],
                  [-22, 8, 32, 0xfe, "lower"],
                  [4166, 8, 32, 0xff],
                  [2, 0x2],
               ];
               break;
            case 11:
               lines = [
                  [1, 1, 0, 0x0],
                  [2, 2, 1, 0x2],
                  [4, 4, 0, 0xc],
                  [5, 4, 1, 0xd],
                  [7, 5, 1, 0x1c],
                  [9, 5, 2, 0x1d],
                  [13, 6, 2, 0x3c],
                  [17, 7, 2, 0x7a],
                  [21, 7, 3, 0x7b],
                  [29, 7, 4, 0x7c],
                  [45, 7, 5, 0x7d],
                  [77, 7, 6, 0x7e],
                  [141, 7, 32, 0x7f],
               ];
               break;
            case 12:
               lines = [
                  [1, 1, 0, 0x0],
                  [2, 2, 0, 0x2],
                  [3, 3, 1, 0x6],
                  [5, 5, 0, 0x1c],
                  [6, 5, 1, 0x1d],
                  [8, 6, 1, 0x3c],
                  [10, 7, 0, 0x7a],
                  [11, 7, 1, 0x7b],
                  [13, 7, 2, 0x7c],
                  [17, 7, 3, 0x7d],
                  [25, 7, 4, 0x7e],
                  [41, 8, 5, 0xfe],
                  [73, 8, 32, 0xff],
               ];
               break;
            case 13:
               lines = [
                  [1, 1, 0, 0x0],
                  [2, 3, 0, 0x4],
                  [3, 4, 0, 0xc],
                  [4, 5, 0, 0x1c],
                  [5, 4, 1, 0xd],
                  [7, 3, 3, 0x5],
                  [15, 6, 1, 0x3a],
                  [17, 6, 2, 0x3b],
                  [21, 6, 3, 0x3c],
                  [29, 6, 4, 0x3d],
                  [45, 6, 5, 0x3e],
                  [77, 7, 6, 0x7e],
                  [141, 7, 32, 0x7f],
               ];
               break;
            case 14:
               lines = [
                  [-2, 3, 0, 0x4],
                  [-1, 3, 0, 0x5],
                  [0, 1, 0, 0x0],
                  [1, 3, 0, 0x6],
                  [2, 3, 0, 0x7],
               ];
               break;
            case 15:
               lines = [
                  [-24, 7, 4, 0x7c],
                  [-8, 6, 2, 0x3c],
                  [-4, 5, 1, 0x1c],
                  [-2, 4, 0, 0xc],
                  [-1, 3, 0, 0x4],
                  [0, 1, 0, 0x0],
                  [1, 3, 0, 0x5],
                  [2, 4, 0, 0xd],
                  [3, 5, 1, 0x1d],
                  [5, 6, 2, 0x3d],
                  [9, 7, 4, 0x7d],
                  [-25, 7, 32, 0x7e, "lower"],
                  [25, 7, 32, 0x7f],
               ];
               break;
            default:
               throw new Jbig2Error(
                  "standard table B.".concat(number, " does not exist"),
               );
         }
         for (var i = 0, ii = lines.length; i < ii; i++) {
            lines[i] = new HuffmanLine(lines[i]);
         }
         table = new HuffmanTable(lines, true);
         standardTablesCache[number] = table;
         return table;
      }
      var Reader = /*#__PURE__*/ (function () {
         function Reader(data, start, end) {
            _classCallCheck(this, Reader);
            this.data = data;
            this.start = start;
            this.end = end;
            this.position = start;
            this.shift = -1;
            this.currentByte = 0;
         }
         return _createClass(Reader, [
            {
               key: "readBit",
               value: function readBit() {
                  if (this.shift < 0) {
                     if (this.position >= this.end) {
                        throw new Jbig2Error("end of data while reading bit");
                     }
                     this.currentByte = this.data[this.position++];
                     this.shift = 7;
                  }
                  var bit = (this.currentByte >> this.shift) & 1;
                  this.shift--;
                  return bit;
               },
            },
            {
               key: "readBits",
               value: function readBits(numBits) {
                  var result = 0,
                     i;
                  for (i = numBits - 1; i >= 0; i--) {
                     result |= this.readBit() << i;
                  }
                  return result;
               },
            },
            {
               key: "byteAlign",
               value: function byteAlign() {
                  this.shift = -1;
               },
            },
            {
               key: "next",
               value: function next() {
                  if (this.position >= this.end) {
                     return -1;
                  }
                  return this.data[this.position++];
               },
            },
         ]);
      })();
      function getCustomHuffmanTable(index, referredTo, customTables) {
         var currentIndex = 0;
         for (var i = 0, ii = referredTo.length; i < ii; i++) {
            var table = customTables[referredTo[i]];
            if (table) {
               if (index === currentIndex) {
                  return table;
               }
               currentIndex++;
            }
         }
         throw new Jbig2Error("can't find custom Huffman table");
      }
      function getTextRegionHuffmanTables(
         textRegion,
         referredTo,
         customTables,
         numberOfSymbols,
         reader,
      ) {
         var codes = [];
         for (var i = 0; i <= 34; i++) {
            var codeLength = reader.readBits(4);
            codes.push(new HuffmanLine([i, codeLength, 0, 0]));
         }
         var runCodesTable = new HuffmanTable(codes, false);
         codes.length = 0;
         for (var _i14 = 0; _i14 < numberOfSymbols; ) {
            var _codeLength = runCodesTable.decode(reader);
            if (_codeLength >= 32) {
               var repeatedLength = void 0,
                  numberOfRepeats = void 0,
                  j = void 0;
               switch (_codeLength) {
                  case 32:
                     if (_i14 === 0) {
                        throw new Jbig2Error("no previous value in symbol ID table");
                     }
                     numberOfRepeats = reader.readBits(2) + 3;
                     repeatedLength = codes[_i14 - 1].prefixLength;
                     break;
                  case 33:
                     numberOfRepeats = reader.readBits(3) + 3;
                     repeatedLength = 0;
                     break;
                  case 34:
                     numberOfRepeats = reader.readBits(7) + 11;
                     repeatedLength = 0;
                     break;
                  default:
                     throw new Jbig2Error("invalid code length in symbol ID table");
               }
               for (j = 0; j < numberOfRepeats; j++) {
                  codes.push(new HuffmanLine([_i14, repeatedLength, 0, 0]));
                  _i14++;
               }
            } else {
               codes.push(new HuffmanLine([_i14, _codeLength, 0, 0]));
               _i14++;
            }
         }
         reader.byteAlign();
         var symbolIDTable = new HuffmanTable(codes, false);
         var customIndex = 0,
            tableFirstS,
            tableDeltaS,
            tableDeltaT;
         switch (textRegion.huffmanFS) {
            case 0:
            case 1:
               tableFirstS = getStandardTable(textRegion.huffmanFS + 6);
               break;
            case 3:
               tableFirstS = getCustomHuffmanTable(
                  customIndex,
                  referredTo,
                  customTables,
               );
               customIndex++;
               break;
            default:
               throw new Jbig2Error("invalid Huffman FS selector");
         }
         switch (textRegion.huffmanDS) {
            case 0:
            case 1:
            case 2:
               tableDeltaS = getStandardTable(textRegion.huffmanDS + 8);
               break;
            case 3:
               tableDeltaS = getCustomHuffmanTable(
                  customIndex,
                  referredTo,
                  customTables,
               );
               customIndex++;
               break;
            default:
               throw new Jbig2Error("invalid Huffman DS selector");
         }
         switch (textRegion.huffmanDT) {
            case 0:
            case 1:
            case 2:
               tableDeltaT = getStandardTable(textRegion.huffmanDT + 11);
               break;
            case 3:
               tableDeltaT = getCustomHuffmanTable(
                  customIndex,
                  referredTo,
                  customTables,
               );
               customIndex++;
               break;
            default:
               throw new Jbig2Error("invalid Huffman DT selector");
         }
         if (textRegion.refinement) {
            throw new Jbig2Error("refinement with Huffman is not supported");
         }
         return {
            symbolIDTable: symbolIDTable,
            tableFirstS: tableFirstS,
            tableDeltaS: tableDeltaS,
            tableDeltaT: tableDeltaT,
         };
      }
      function getSymbolDictionaryHuffmanTables(
         dictionary,
         referredTo,
         customTables,
      ) {
         var customIndex = 0,
            tableDeltaHeight,
            tableDeltaWidth;
         switch (dictionary.huffmanDHSelector) {
            case 0:
            case 1:
               tableDeltaHeight = getStandardTable(dictionary.huffmanDHSelector + 4);
               break;
            case 3:
               tableDeltaHeight = getCustomHuffmanTable(
                  customIndex,
                  referredTo,
                  customTables,
               );
               customIndex++;
               break;
            default:
               throw new Jbig2Error("invalid Huffman DH selector");
         }
         switch (dictionary.huffmanDWSelector) {
            case 0:
            case 1:
               tableDeltaWidth = getStandardTable(dictionary.huffmanDWSelector + 2);
               break;
            case 3:
               tableDeltaWidth = getCustomHuffmanTable(
                  customIndex,
                  referredTo,
                  customTables,
               );
               customIndex++;
               break;
            default:
               throw new Jbig2Error("invalid Huffman DW selector");
         }
         var tableBitmapSize, tableAggregateInstances;
         if (dictionary.bitmapSizeSelector) {
            tableBitmapSize = getCustomHuffmanTable(
               customIndex,
               referredTo,
               customTables,
            );
            customIndex++;
         } else {
            tableBitmapSize = getStandardTable(1);
         }
         if (dictionary.aggregationInstancesSelector) {
            tableAggregateInstances = getCustomHuffmanTable(
               customIndex,
               referredTo,
               customTables,
            );
         } else {
            tableAggregateInstances = getStandardTable(1);
         }
         return {
            tableDeltaHeight: tableDeltaHeight,
            tableDeltaWidth: tableDeltaWidth,
            tableBitmapSize: tableBitmapSize,
            tableAggregateInstances: tableAggregateInstances,
         };
      }
      function readUncompressedBitmap(reader, width, height) {
         var bitmap = [];
         for (var y = 0; y < height; y++) {
            var row = new Uint8Array(width);
            bitmap.push(row);
            for (var x = 0; x < width; x++) {
               row[x] = reader.readBit();
            }
            reader.byteAlign();
         }
         return bitmap;
      }
      function decodeMMRBitmap(input, width, height, endOfBlock) {
         var params = {
            K: -1,
            Columns: width,
            Rows: height,
            BlackIs1: true,
            EndOfBlock: endOfBlock,
         };
         var decoder = new CCITTFaxDecoder(input, params);
         var bitmap = [];
         var currentByte,
            eof = false;
         for (var y = 0; y < height; y++) {
            var row = new Uint8Array(width);
            bitmap.push(row);
            var shift = -1;
            for (var x = 0; x < width; x++) {
               if (shift < 0) {
                  currentByte = decoder.readNextChar();
                  if (currentByte === -1) {
                     currentByte = 0;
                     eof = true;
                  }
                  shift = 7;
               }
               row[x] = (currentByte >> shift) & 1;
               shift--;
            }
         }
         if (endOfBlock && !eof) {
            var lookForEOFLimit = 5;
            for (var i = 0; i < lookForEOFLimit; i++) {
               if (decoder.readNextChar() === -1) {
                  break;
               }
            }
         }
         return bitmap;
      }
      var Jbig2Image = /*#__PURE__*/ (function () {
         function Jbig2Image() {
            _classCallCheck(this, Jbig2Image);
         }
         return _createClass(Jbig2Image, [
            {
               key: "parseChunks",
               value: function parseChunks(chunks) {
                  return parseJbig2Chunks(chunks);
               },
            },
            {
               key: "parse",
               value: function parse(data) {
                  throw new Error("Not implemented: Jbig2Image.parse");
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/jbig2_stream.js
      var Jbig2Stream = /*#__PURE__*/ (function (_DecodeStream6) {
         function Jbig2Stream(stream, maybeLength, params) {
            var _this20;
            _classCallCheck(this, Jbig2Stream);
            _this20 = _callSuper(this, Jbig2Stream, [maybeLength]);
            _this20.stream = stream;
            _this20.dict = stream.dict;
            _this20.maybeLength = maybeLength;
            _this20.params = params;
            return _this20;
         }
         _inherits(Jbig2Stream, _DecodeStream6);
         return _createClass(Jbig2Stream, [
            {
               key: "bytes",
               get: function get() {
                  return shadow(
                     this,
                     "bytes",
                     this.stream.getBytes(this.maybeLength),
                  );
               },
            },
            { key: "ensureBuffer", value: function ensureBuffer(requested) {} },
            {
               key: "readBlock",
               value: function readBlock() {
                  if (this.eof) {
                     return;
                  }
                  var jbig2Image = new Jbig2Image();
                  var chunks = [];
                  if (this.params instanceof Dict) {
                     var globalsStream = this.params.get("JBIG2Globals");
                     if (globalsStream instanceof BaseStream) {
                        var globals = globalsStream.getBytes();
                        chunks.push({ data: globals, start: 0, end: globals.length });
                     }
                  }
                  chunks.push({ data: this.bytes, start: 0, end: this.bytes.length });
                  var data = jbig2Image.parseChunks(chunks);
                  var dataLength = data.length;
                  for (var i = 0; i < dataLength; i++) {
                     data[i] ^= 0xff;
                  }
                  this.buffer = data;
                  this.bufferLength = dataLength;
                  this.eof = true;
               },
            },
         ]);
      })(DecodeStream); // CONCATENATED MODULE: ./src/shared/image_utils.js
      function convertToRGBA(params) {
         switch (params.kind) {
            case ImageKind.GRAYSCALE_1BPP:
               return convertBlackAndWhiteToRGBA(params);
            case ImageKind.RGB_24BPP:
               return convertRGBToRGBA(params);
         }
         return null;
      }
      function convertBlackAndWhiteToRGBA(_ref14) {
         var src = _ref14.src,
            _ref14$srcPos = _ref14.srcPos,
            srcPos = _ref14$srcPos === void 0 ? 0 : _ref14$srcPos,
            dest = _ref14.dest,
            width = _ref14.width,
            height = _ref14.height,
            _ref14$nonBlackColor = _ref14.nonBlackColor,
            nonBlackColor =
               _ref14$nonBlackColor === void 0 ? 0xffffffff : _ref14$nonBlackColor,
            _ref14$inverseDecode = _ref14.inverseDecode,
            inverseDecode =
               _ref14$inverseDecode === void 0 ? false : _ref14$inverseDecode;
         var black = FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;
         var _ref15 = inverseDecode
               ? [nonBlackColor, black]
               : [black, nonBlackColor],
            _ref16 = _slicedToArray(_ref15, 2),
            zeroMapping = _ref16[0],
            oneMapping = _ref16[1];
         var widthInSource = width >> 3;
         var widthRemainder = width & 7;
         var srcLength = src.length;
         dest = new Uint32Array(dest.buffer);
         var destPos = 0;
         for (var i = 0; i < height; i++) {
            for (var max = srcPos + widthInSource; srcPos < max; srcPos++) {
               var _elem = srcPos < srcLength ? src[srcPos] : 255;
               dest[destPos++] = _elem & 128 ? oneMapping : zeroMapping;
               dest[destPos++] = _elem & 64 ? oneMapping : zeroMapping;
               dest[destPos++] = _elem & 32 ? oneMapping : zeroMapping;
               dest[destPos++] = _elem & 16 ? oneMapping : zeroMapping;
               dest[destPos++] = _elem & 8 ? oneMapping : zeroMapping;
               dest[destPos++] = _elem & 4 ? oneMapping : zeroMapping;
               dest[destPos++] = _elem & 2 ? oneMapping : zeroMapping;
               dest[destPos++] = _elem & 1 ? oneMapping : zeroMapping;
            }
            if (widthRemainder === 0) {
               continue;
            }
            var elem = srcPos < srcLength ? src[srcPos++] : 255;
            for (var j = 0; j < widthRemainder; j++) {
               dest[destPos++] = elem & (1 << (7 - j)) ? oneMapping : zeroMapping;
            }
         }
         return { srcPos: srcPos, destPos: destPos };
      }
      function convertRGBToRGBA(_ref17) {
         var src = _ref17.src,
            _ref17$srcPos = _ref17.srcPos,
            srcPos = _ref17$srcPos === void 0 ? 0 : _ref17$srcPos,
            dest = _ref17.dest,
            _ref17$destPos = _ref17.destPos,
            destPos = _ref17$destPos === void 0 ? 0 : _ref17$destPos,
            width = _ref17.width,
            height = _ref17.height;
         var i = 0;
         var len32 = src.length >> 2;
         var src32 = new Uint32Array(src.buffer, srcPos, len32);
         if (FeatureTest.isLittleEndian) {
            for (; i < len32 - 2; i += 3, destPos += 4) {
               var s1 = src32[i];
               var s2 = src32[i + 1];
               var s3 = src32[i + 2];
               dest[destPos] = s1 | 0xff000000;
               dest[destPos + 1] = (s1 >>> 24) | (s2 << 8) | 0xff000000;
               dest[destPos + 2] = (s2 >>> 16) | (s3 << 16) | 0xff000000;
               dest[destPos + 3] = (s3 >>> 8) | 0xff000000;
            }
            for (var j = i * 4, jj = src.length; j < jj; j += 3) {
               dest[destPos++] =
                  src[j] | (src[j + 1] << 8) | (src[j + 2] << 16) | 0xff000000;
            }
         } else {
            for (; i < len32 - 2; i += 3, destPos += 4) {
               var _s = src32[i];
               var _s2 = src32[i + 1];
               var _s3 = src32[i + 2];
               dest[destPos] = _s | 0xff;
               dest[destPos + 1] = (_s << 24) | (_s2 >>> 8) | 0xff;
               dest[destPos + 2] = (_s2 << 16) | (_s3 >>> 16) | 0xff;
               dest[destPos + 3] = (_s3 << 8) | 0xff;
            }
            for (var _j = i * 4, _jj = src.length; _j < _jj; _j += 3) {
               dest[destPos++] =
                  (src[_j] << 24) | (src[_j + 1] << 16) | (src[_j + 2] << 8) | 0xff;
            }
         }
         return { srcPos: srcPos, destPos: destPos };
      }
      function grayToRGBA(src, dest) {
         if (FeatureTest.isLittleEndian) {
            for (var i = 0, ii = src.length; i < ii; i++) {
               dest[i] = (src[i] * 0x10101) | 0xff000000;
            }
         } else {
            for (var _i15 = 0, _ii = src.length; _i15 < _ii; _i15++) {
               dest[_i15] = (src[_i15] * 0x1010100) | 0x000000ff;
            }
         }
      } // CONCATENATED MODULE: ./src/core/jpg.js
      var JpegError = /*#__PURE__*/ (function (_BaseException11) {
         function JpegError(msg) {
            _classCallCheck(this, JpegError);
            return _callSuper(this, JpegError, [msg, "JpegError"]);
         }
         _inherits(JpegError, _BaseException11);
         return _createClass(JpegError);
      })(BaseException);
      var DNLMarkerError = /*#__PURE__*/ (function (_BaseException12) {
         function DNLMarkerError(message, scanLines) {
            var _this21;
            _classCallCheck(this, DNLMarkerError);
            _this21 = _callSuper(this, DNLMarkerError, [message, "DNLMarkerError"]);
            _this21.scanLines = scanLines;
            return _this21;
         }
         _inherits(DNLMarkerError, _BaseException12);
         return _createClass(DNLMarkerError);
      })(BaseException);
      var EOIMarkerError = /*#__PURE__*/ (function (_BaseException13) {
         function EOIMarkerError(msg) {
            _classCallCheck(this, EOIMarkerError);
            return _callSuper(this, EOIMarkerError, [msg, "EOIMarkerError"]);
         }
         _inherits(EOIMarkerError, _BaseException13);
         return _createClass(EOIMarkerError);
      })(BaseException);
      var dctZigZag = new Uint8Array([
         0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33,
         40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43,
         36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53,
         60, 61, 54, 47, 55, 62, 63,
      ]);
      var dctCos1 = 4017;
      var dctSin1 = 799;
      var dctCos3 = 3406;
      var dctSin3 = 2276;
      var dctCos6 = 1567;
      var dctSin6 = 3784;
      var dctSqrt2 = 5793;
      var dctSqrt1d2 = 2896;
      function buildHuffmanTable(codeLengths, values) {
         var k = 0,
            i,
            j,
            length = 16;
         while (length > 0 && !codeLengths[length - 1]) {
            length--;
         }
         var code = [{ children: [], index: 0 }];
         var p = code[0],
            q;
         for (i = 0; i < length; i++) {
            for (j = 0; j < codeLengths[i]; j++) {
               p = code.pop();
               p.children[p.index] = values[k];
               while (p.index > 0) {
                  p = code.pop();
               }
               p.index++;
               code.push(p);
               while (code.length <= i) {
                  code.push((q = { children: [], index: 0 }));
                  p.children[p.index] = q.children;
                  p = q;
               }
               k++;
            }
            if (i + 1 < length) {
               code.push((q = { children: [], index: 0 }));
               p.children[p.index] = q.children;
               p = q;
            }
         }
         return code[0].children;
      }
      function getBlockBufferOffset(component, row, col) {
         return 64 * ((component.blocksPerLine + 1) * row + col);
      }
      function decodeScan(
         data,
         offset,
         frame,
         components,
         resetInterval,
         spectralStart,
         spectralEnd,
         successivePrev,
         successive,
      ) {
         var parseDNLMarker =
            arguments.length > 9 && arguments[9] !== undefined
               ? arguments[9]
               : false;
         var mcusPerLine = frame.mcusPerLine;
         var progressive = frame.progressive;
         var startOffset = offset;
         var bitsData = 0,
            bitsCount = 0;
         function readBit() {
            if (bitsCount > 0) {
               bitsCount--;
               return (bitsData >> bitsCount) & 1;
            }
            bitsData = data[offset++];
            if (bitsData === 0xff) {
               var nextByte = data[offset++];
               if (nextByte) {
                  if (nextByte === 0xdc && parseDNLMarker) {
                     offset += 2;
                     var scanLines = readUint16(data, offset);
                     offset += 2;
                     if (scanLines > 0 && scanLines !== frame.scanLines) {
                        throw new DNLMarkerError(
                           "Found DNL marker (0xFFDC) while parsing scan data",
                           scanLines,
                        );
                     }
                  } else if (nextByte === 0xd9) {
                     if (parseDNLMarker) {
                        var maybeScanLines = blockRow * (frame.precision === 8 ? 8 : 0);
                        if (
                           maybeScanLines > 0 &&
                           Math.round(frame.scanLines / maybeScanLines) >= 5
                        ) {
                           throw new DNLMarkerError(
                              "Found EOI marker (0xFFD9) while parsing scan data, " +
                              "possibly caused by incorrect `scanLines` parameter",
                              maybeScanLines,
                           );
                        }
                     }
                     throw new EOIMarkerError(
                        "Found EOI marker (0xFFD9) while parsing scan data",
                     );
                  }
                  throw new JpegError(
                     "unexpected marker ".concat(
                        ((bitsData << 8) | nextByte).toString(16),
                     ),
                  );
               }
            }
            bitsCount = 7;
            return bitsData >>> 7;
         }
         function decodeHuffman(tree) {
            var node = tree;
            while (true) {
               node = node[readBit()];
               switch (_typeof(node)) {
                  case "number":
                     return node;
                  case "object":
                     continue;
               }
               throw new JpegError("invalid huffman sequence");
            }
         }
         function receive(length) {
            var n = 0;
            while (length > 0) {
               n = (n << 1) | readBit();
               length--;
            }
            return n;
         }
         function receiveAndExtend(length) {
            if (length === 1) {
               return readBit() === 1 ? 1 : -1;
            }
            var n = receive(length);
            if (n >= 1 << (length - 1)) {
               return n;
            }
            return n + (-1 << length) + 1;
         }
         function decodeBaseline(component, blockOffset) {
            var t = decodeHuffman(component.huffmanTableDC);
            var diff = t === 0 ? 0 : receiveAndExtend(t);
            component.blockData[blockOffset] = component.pred += diff;
            var k = 1;
            while (k < 64) {
               var rs = decodeHuffman(component.huffmanTableAC);
               var s = rs & 15,
                  r = rs >> 4;
               if (s === 0) {
                  if (r < 15) {
                     break;
                  }
                  k += 16;
                  continue;
               }
               k += r;
               var z = dctZigZag[k];
               component.blockData[blockOffset + z] = receiveAndExtend(s);
               k++;
            }
         }
         function decodeDCFirst(component, blockOffset) {
            var t = decodeHuffman(component.huffmanTableDC);
            var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;
            component.blockData[blockOffset] = component.pred += diff;
         }
         function decodeDCSuccessive(component, blockOffset) {
            component.blockData[blockOffset] |= readBit() << successive;
         }
         var eobrun = 0;
         function decodeACFirst(component, blockOffset) {
            if (eobrun > 0) {
               eobrun--;
               return;
            }
            var k = spectralStart;
            var e = spectralEnd;
            while (k <= e) {
               var rs = decodeHuffman(component.huffmanTableAC);
               var s = rs & 15,
                  r = rs >> 4;
               if (s === 0) {
                  if (r < 15) {
                     eobrun = receive(r) + (1 << r) - 1;
                     break;
                  }
                  k += 16;
                  continue;
               }
               k += r;
               var z = dctZigZag[k];
               component.blockData[blockOffset + z] =
                  receiveAndExtend(s) * (1 << successive);
               k++;
            }
         }
         var successiveACState = 0,
            successiveACNextValue;
         function decodeACSuccessive(component, blockOffset) {
            var k = spectralStart;
            var e = spectralEnd;
            var r = 0;
            var s;
            var rs;
            while (k <= e) {
               var offsetZ = blockOffset + dctZigZag[k];
               var sign = component.blockData[offsetZ] < 0 ? -1 : 1;
               switch (successiveACState) {
                  case 0:
                     rs = decodeHuffman(component.huffmanTableAC);
                     s = rs & 15;
                     r = rs >> 4;
                     if (s === 0) {
                        if (r < 15) {
                           eobrun = receive(r) + (1 << r);
                           successiveACState = 4;
                        } else {
                           r = 16;
                           successiveACState = 1;
                        }
                     } else {
                        if (s !== 1) {
                           throw new JpegError("invalid ACn encoding");
                        }
                        successiveACNextValue = receiveAndExtend(s);
                        successiveACState = r ? 2 : 3;
                     }
                     continue;
                  case 1:
                  case 2:
                     if (component.blockData[offsetZ]) {
                        component.blockData[offsetZ] +=
                           sign * (readBit() << successive);
                     } else {
                        r--;
                        if (r === 0) {
                           successiveACState = successiveACState === 2 ? 3 : 0;
                        }
                     }
                     break;
                  case 3:
                     if (component.blockData[offsetZ]) {
                        component.blockData[offsetZ] +=
                           sign * (readBit() << successive);
                     } else {
                        component.blockData[offsetZ] =
                           successiveACNextValue << successive;
                        successiveACState = 0;
                     }
                     break;
                  case 4:
                     if (component.blockData[offsetZ]) {
                        component.blockData[offsetZ] +=
                           sign * (readBit() << successive);
                     }
                     break;
               }
               k++;
            }
            if (successiveACState === 4) {
               eobrun--;
               if (eobrun === 0) {
                  successiveACState = 0;
               }
            }
         }
         var blockRow = 0;
         function decodeMcu(component, decode, mcu, row, col) {
            var mcuRow = (mcu / mcusPerLine) | 0;
            var mcuCol = mcu % mcusPerLine;
            blockRow = mcuRow * component.v + row;
            var blockCol = mcuCol * component.h + col;
            var blockOffset = getBlockBufferOffset(component, blockRow, blockCol);
            decode(component, blockOffset);
         }
         function decodeBlock(component, decode, mcu) {
            blockRow = (mcu / component.blocksPerLine) | 0;
            var blockCol = mcu % component.blocksPerLine;
            var blockOffset = getBlockBufferOffset(component, blockRow, blockCol);
            decode(component, blockOffset);
         }
         var componentsLength = components.length;
         var component, i, j, k, n;
         var decodeFn;
         if (progressive) {
            if (spectralStart === 0) {
               decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;
            } else {
               decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;
            }
         } else {
            decodeFn = decodeBaseline;
         }
         var mcu = 0,
            fileMarker;
         var mcuExpected =
            componentsLength === 1
               ? components[0].blocksPerLine * components[0].blocksPerColumn
               : mcusPerLine * frame.mcusPerColumn;
         var h, v;
         while (mcu <= mcuExpected) {
            var mcuToRead = resetInterval
               ? Math.min(mcuExpected - mcu, resetInterval)
               : mcuExpected;
            if (mcuToRead > 0) {
               for (i = 0; i < componentsLength; i++) {
                  components[i].pred = 0;
               }
               eobrun = 0;
               if (componentsLength === 1) {
                  component = components[0];
                  for (n = 0; n < mcuToRead; n++) {
                     decodeBlock(component, decodeFn, mcu);
                     mcu++;
                  }
               } else {
                  for (n = 0; n < mcuToRead; n++) {
                     for (i = 0; i < componentsLength; i++) {
                        component = components[i];
                        h = component.h;
                        v = component.v;
                        for (j = 0; j < v; j++) {
                           for (k = 0; k < h; k++) {
                              decodeMcu(component, decodeFn, mcu, j, k);
                           }
                        }
                     }
                     mcu++;
                  }
               }
            }
            bitsCount = 0;
            fileMarker = findNextFileMarker(data, offset);
            if (!fileMarker) {
               break;
            }
            if (fileMarker.invalid) {
               var partialMsg = mcuToRead > 0 ? "unexpected" : "excessive";
               warn(
                  "decodeScan - "
                     .concat(partialMsg, " MCU data, current marker is: ")
                     .concat(fileMarker.invalid),
               );
               offset = fileMarker.offset;
            }
            if (fileMarker.marker >= 0xffd0 && fileMarker.marker <= 0xffd7) {
               offset += 2;
            } else {
               break;
            }
         }
         return offset - startOffset;
      }
      function quantizeAndInverse(component, blockBufferOffset, p) {
         var qt = component.quantizationTable,
            blockData = component.blockData;
         var v0, v1, v2, v3, v4, v5, v6, v7;
         var p0, p1, p2, p3, p4, p5, p6, p7;
         var t;
         if (!qt) {
            throw new JpegError("missing required Quantization Table.");
         }
         for (var row = 0; row < 64; row += 8) {
            p0 = blockData[blockBufferOffset + row];
            p1 = blockData[blockBufferOffset + row + 1];
            p2 = blockData[blockBufferOffset + row + 2];
            p3 = blockData[blockBufferOffset + row + 3];
            p4 = blockData[blockBufferOffset + row + 4];
            p5 = blockData[blockBufferOffset + row + 5];
            p6 = blockData[blockBufferOffset + row + 6];
            p7 = blockData[blockBufferOffset + row + 7];
            p0 *= qt[row];
            if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {
               t = (dctSqrt2 * p0 + 512) >> 10;
               p[row] = t;
               p[row + 1] = t;
               p[row + 2] = t;
               p[row + 3] = t;
               p[row + 4] = t;
               p[row + 5] = t;
               p[row + 6] = t;
               p[row + 7] = t;
               continue;
            }
            p1 *= qt[row + 1];
            p2 *= qt[row + 2];
            p3 *= qt[row + 3];
            p4 *= qt[row + 4];
            p5 *= qt[row + 5];
            p6 *= qt[row + 6];
            p7 *= qt[row + 7];
            v0 = (dctSqrt2 * p0 + 128) >> 8;
            v1 = (dctSqrt2 * p4 + 128) >> 8;
            v2 = p2;
            v3 = p6;
            v4 = (dctSqrt1d2 * (p1 - p7) + 128) >> 8;
            v7 = (dctSqrt1d2 * (p1 + p7) + 128) >> 8;
            v5 = p3 << 4;
            v6 = p5 << 4;
            v0 = (v0 + v1 + 1) >> 1;
            v1 = v0 - v1;
            t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;
            v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;
            v3 = t;
            v4 = (v4 + v6 + 1) >> 1;
            v6 = v4 - v6;
            v7 = (v7 + v5 + 1) >> 1;
            v5 = v7 - v5;
            v0 = (v0 + v3 + 1) >> 1;
            v3 = v0 - v3;
            v1 = (v1 + v2 + 1) >> 1;
            v2 = v1 - v2;
            t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;
            v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;
            v7 = t;
            t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;
            v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;
            v6 = t;
            p[row] = v0 + v7;
            p[row + 7] = v0 - v7;
            p[row + 1] = v1 + v6;
            p[row + 6] = v1 - v6;
            p[row + 2] = v2 + v5;
            p[row + 5] = v2 - v5;
            p[row + 3] = v3 + v4;
            p[row + 4] = v3 - v4;
         }
         for (var col = 0; col < 8; ++col) {
            p0 = p[col];
            p1 = p[col + 8];
            p2 = p[col + 16];
            p3 = p[col + 24];
            p4 = p[col + 32];
            p5 = p[col + 40];
            p6 = p[col + 48];
            p7 = p[col + 56];
            if ((p1 | p2 | p3 | p4 | p5 | p6 | p7) === 0) {
               t = (dctSqrt2 * p0 + 8192) >> 14;
               if (t < -2040) {
                  t = 0;
               } else if (t >= 2024) {
                  t = 255;
               } else {
                  t = (t + 2056) >> 4;
               }
               blockData[blockBufferOffset + col] = t;
               blockData[blockBufferOffset + col + 8] = t;
               blockData[blockBufferOffset + col + 16] = t;
               blockData[blockBufferOffset + col + 24] = t;
               blockData[blockBufferOffset + col + 32] = t;
               blockData[blockBufferOffset + col + 40] = t;
               blockData[blockBufferOffset + col + 48] = t;
               blockData[blockBufferOffset + col + 56] = t;
               continue;
            }
            v0 = (dctSqrt2 * p0 + 2048) >> 12;
            v1 = (dctSqrt2 * p4 + 2048) >> 12;
            v2 = p2;
            v3 = p6;
            v4 = (dctSqrt1d2 * (p1 - p7) + 2048) >> 12;
            v7 = (dctSqrt1d2 * (p1 + p7) + 2048) >> 12;
            v5 = p3;
            v6 = p5;
            v0 = ((v0 + v1 + 1) >> 1) + 4112;
            v1 = v0 - v1;
            t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;
            v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;
            v3 = t;
            v4 = (v4 + v6 + 1) >> 1;
            v6 = v4 - v6;
            v7 = (v7 + v5 + 1) >> 1;
            v5 = v7 - v5;
            v0 = (v0 + v3 + 1) >> 1;
            v3 = v0 - v3;
            v1 = (v1 + v2 + 1) >> 1;
            v2 = v1 - v2;
            t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;
            v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;
            v7 = t;
            t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;
            v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;
            v6 = t;
            p0 = v0 + v7;
            p7 = v0 - v7;
            p1 = v1 + v6;
            p6 = v1 - v6;
            p2 = v2 + v5;
            p5 = v2 - v5;
            p3 = v3 + v4;
            p4 = v3 - v4;
            if (p0 < 16) {
               p0 = 0;
            } else if (p0 >= 4080) {
               p0 = 255;
            } else {
               p0 >>= 4;
            }
            if (p1 < 16) {
               p1 = 0;
            } else if (p1 >= 4080) {
               p1 = 255;
            } else {
               p1 >>= 4;
            }
            if (p2 < 16) {
               p2 = 0;
            } else if (p2 >= 4080) {
               p2 = 255;
            } else {
               p2 >>= 4;
            }
            if (p3 < 16) {
               p3 = 0;
            } else if (p3 >= 4080) {
               p3 = 255;
            } else {
               p3 >>= 4;
            }
            if (p4 < 16) {
               p4 = 0;
            } else if (p4 >= 4080) {
               p4 = 255;
            } else {
               p4 >>= 4;
            }
            if (p5 < 16) {
               p5 = 0;
            } else if (p5 >= 4080) {
               p5 = 255;
            } else {
               p5 >>= 4;
            }
            if (p6 < 16) {
               p6 = 0;
            } else if (p6 >= 4080) {
               p6 = 255;
            } else {
               p6 >>= 4;
            }
            if (p7 < 16) {
               p7 = 0;
            } else if (p7 >= 4080) {
               p7 = 255;
            } else {
               p7 >>= 4;
            }
            blockData[blockBufferOffset + col] = p0;
            blockData[blockBufferOffset + col + 8] = p1;
            blockData[blockBufferOffset + col + 16] = p2;
            blockData[blockBufferOffset + col + 24] = p3;
            blockData[blockBufferOffset + col + 32] = p4;
            blockData[blockBufferOffset + col + 40] = p5;
            blockData[blockBufferOffset + col + 48] = p6;
            blockData[blockBufferOffset + col + 56] = p7;
         }
      }
      function buildComponentData(frame, component) {
         var blocksPerLine = component.blocksPerLine;
         var blocksPerColumn = component.blocksPerColumn;
         var computationBuffer = new Int16Array(64);
         for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {
            for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {
               var offset = getBlockBufferOffset(component, blockRow, blockCol);
               quantizeAndInverse(component, offset, computationBuffer);
            }
         }
         return component.blockData;
      }
      function findNextFileMarker(data, currentPos) {
         var startPos =
            arguments.length > 2 && arguments[2] !== undefined
               ? arguments[2]
               : currentPos;
         var maxPos = data.length - 1;
         var newPos = startPos < currentPos ? startPos : currentPos;
         if (currentPos >= maxPos) {
            return null;
         }
         var currentMarker = readUint16(data, currentPos);
         if (currentMarker >= 0xffc0 && currentMarker <= 0xfffe) {
            return { invalid: null, marker: currentMarker, offset: currentPos };
         }
         var newMarker = readUint16(data, newPos);
         while (!(newMarker >= 0xffc0 && newMarker <= 0xfffe)) {
            if (++newPos >= maxPos) {
               return null;
            }
            newMarker = readUint16(data, newPos);
         }
         return {
            invalid: currentMarker.toString(16),
            marker: newMarker,
            offset: newPos,
         };
      }
      var JpegImage = /*#__PURE__*/ (function () {
         function JpegImage() {
            var _ref18 =
                  arguments.length > 0 && arguments[0] !== undefined
                     ? arguments[0]
                     : {},
               _ref18$decodeTransfor = _ref18.decodeTransform,
               decodeTransform =
                  _ref18$decodeTransfor === void 0 ? null : _ref18$decodeTransfor,
               _ref18$colorTransform = _ref18.colorTransform,
               colorTransform =
                  _ref18$colorTransform === void 0 ? -1 : _ref18$colorTransform;
            _classCallCheck(this, JpegImage);
            this._decodeTransform = decodeTransform;
            this._colorTransform = colorTransform;
         }
         return _createClass(JpegImage, [
            {
               key: "parse",
               value: function parse(data) {
                  var _ref19 =
                        arguments.length > 1 && arguments[1] !== undefined
                           ? arguments[1]
                           : {},
                     _ref19$dnlScanLines = _ref19.dnlScanLines,
                     dnlScanLines =
                        _ref19$dnlScanLines === void 0 ? null : _ref19$dnlScanLines;
                  function readDataBlock() {
                     var length = readUint16(data, offset);
                     offset += 2;
                     var endOffset = offset + length - 2;
                     var fileMarker = findNextFileMarker(data, endOffset, offset);
                     if (
                        fileMarker !== null &&
                        fileMarker !== void 0 &&
                        fileMarker.invalid
                     ) {
                        warn(
                           "readDataBlock - incorrect length, current marker is: " +
                           fileMarker.invalid,
                        );
                        endOffset = fileMarker.offset;
                     }
                     var array = data.subarray(offset, endOffset);
                     offset += array.length;
                     return array;
                  }
                  function prepareComponents(frame) {
                     var mcusPerLine = Math.ceil(
                        frame.samplesPerLine / 8 / frame.maxH,
                     );
                     var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);
                     var _iterator20 = _createForOfIteratorHelper(frame.components),
                        _step20;
                     try {
                        for (_iterator20.s(); !(_step20 = _iterator20.n()).done; ) {
                           var component = _step20.value;
                           var blocksPerLine = Math.ceil(
                              (Math.ceil(frame.samplesPerLine / 8) * component.h) /
                              frame.maxH,
                           );
                           var blocksPerColumn = Math.ceil(
                              (Math.ceil(frame.scanLines / 8) * component.v) / frame.maxV,
                           );
                           var blocksPerLineForMcu = mcusPerLine * component.h;
                           var blocksPerColumnForMcu = mcusPerColumn * component.v;
                           var blocksBufferSize =
                              64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);
                           component.blockData = new Int16Array(blocksBufferSize);
                           component.blocksPerLine = blocksPerLine;
                           component.blocksPerColumn = blocksPerColumn;
                        }
                     } catch (err) {
                        _iterator20.e(err);
                     } finally {
                        _iterator20.f();
                     }
                     frame.mcusPerLine = mcusPerLine;
                     frame.mcusPerColumn = mcusPerColumn;
                  }
                  var offset = 0;
                  var jfif = null;
                  var adobe = null;
                  var frame, resetInterval;
                  var numSOSMarkers = 0;
                  var quantizationTables = [];
                  var huffmanTablesAC = [],
                     huffmanTablesDC = [];
                  var fileMarker = readUint16(data, offset);
                  offset += 2;
                  if (fileMarker !== 0xffd8) {
                     throw new JpegError("SOI not found");
                  }
                  fileMarker = readUint16(data, offset);
                  offset += 2;
                  markerLoop: while (fileMarker !== 0xffd9) {
                     var i = void 0,
                        j = void 0,
                        l = void 0;
                     switch (fileMarker) {
                        case 0xffe0:
                        case 0xffe1:
                        case 0xffe2:
                        case 0xffe3:
                        case 0xffe4:
                        case 0xffe5:
                        case 0xffe6:
                        case 0xffe7:
                        case 0xffe8:
                        case 0xffe9:
                        case 0xffea:
                        case 0xffeb:
                        case 0xffec:
                        case 0xffed:
                        case 0xffee:
                        case 0xffef:
                        case 0xfffe:
                           var appData = readDataBlock();
                           if (fileMarker === 0xffe0) {
                              if (
                                 appData[0] === 0x4a &&
                                 appData[1] === 0x46 &&
                                 appData[2] === 0x49 &&
                                 appData[3] === 0x46 &&
                                 appData[4] === 0
                              ) {
                                 jfif = {
                                    version: { major: appData[5], minor: appData[6] },
                                    densityUnits: appData[7],
                                    xDensity: (appData[8] << 8) | appData[9],
                                    yDensity: (appData[10] << 8) | appData[11],
                                    thumbWidth: appData[12],
                                    thumbHeight: appData[13],
                                    thumbData: appData.subarray(
                                       14,
                                       14 + 3 * appData[12] * appData[13],
                                    ),
                                 };
                              }
                           }
                           if (fileMarker === 0xffee) {
                              if (
                                 appData[0] === 0x41 &&
                                 appData[1] === 0x64 &&
                                 appData[2] === 0x6f &&
                                 appData[3] === 0x62 &&
                                 appData[4] === 0x65
                              ) {
                                 adobe = {
                                    version: (appData[5] << 8) | appData[6],
                                    flags0: (appData[7] << 8) | appData[8],
                                    flags1: (appData[9] << 8) | appData[10],
                                    transformCode: appData[11],
                                 };
                              }
                           }
                           break;
                        case 0xffdb:
                           var quantizationTablesLength = readUint16(data, offset);
                           offset += 2;
                           var quantizationTablesEnd =
                              quantizationTablesLength + offset - 2;
                           var z = void 0;
                           while (offset < quantizationTablesEnd) {
                              var quantizationTableSpec = data[offset++];
                              var tableData = new Uint16Array(64);
                              if (quantizationTableSpec >> 4 === 0) {
                                 for (j = 0; j < 64; j++) {
                                    z = dctZigZag[j];
                                    tableData[z] = data[offset++];
                                 }
                              } else if (quantizationTableSpec >> 4 === 1) {
                                 for (j = 0; j < 64; j++) {
                                    z = dctZigZag[j];
                                    tableData[z] = readUint16(data, offset);
                                    offset += 2;
                                 }
                              } else {
                                 throw new JpegError("DQT - invalid table spec");
                              }
                              quantizationTables[quantizationTableSpec & 15] = tableData;
                           }
                           break;
                        case 0xffc0:
                        case 0xffc1:
                        case 0xffc2:
                           if (frame) {
                              throw new JpegError("Only single frame JPEGs supported");
                           }
                           offset += 2;
                           frame = {};
                           frame.extended = fileMarker === 0xffc1;
                           frame.progressive = fileMarker === 0xffc2;
                           frame.precision = data[offset++];
                           var sofScanLines = readUint16(data, offset);
                           offset += 2;
                           frame.scanLines = dnlScanLines || sofScanLines;
                           frame.samplesPerLine = readUint16(data, offset);
                           offset += 2;
                           frame.components = [];
                           frame.componentIds = {};
                           var componentsCount = data[offset++];
                           var maxH = 0,
                              maxV = 0;
                           for (i = 0; i < componentsCount; i++) {
                              var componentId = data[offset];
                              var h = data[offset + 1] >> 4;
                              var v = data[offset + 1] & 15;
                              if (maxH < h) {
                                 maxH = h;
                              }
                              if (maxV < v) {
                                 maxV = v;
                              }
                              var qId = data[offset + 2];
                              l = frame.components.push({
                                 h: h,
                                 v: v,
                                 quantizationId: qId,
                                 quantizationTable: null,
                              });
                              frame.componentIds[componentId] = l - 1;
                              offset += 3;
                           }
                           frame.maxH = maxH;
                           frame.maxV = maxV;
                           prepareComponents(frame);
                           break;
                        case 0xffc4:
                           var huffmanLength = readUint16(data, offset);
                           offset += 2;
                           for (i = 2; i < huffmanLength; ) {
                              var huffmanTableSpec = data[offset++];
                              var codeLengths = new Uint8Array(16);
                              var codeLengthSum = 0;
                              for (j = 0; j < 16; j++, offset++) {
                                 codeLengthSum += codeLengths[j] = data[offset];
                              }
                              var huffmanValues = new Uint8Array(codeLengthSum);
                              for (j = 0; j < codeLengthSum; j++, offset++) {
                                 huffmanValues[j] = data[offset];
                              }
                              i += 17 + codeLengthSum;
                              (huffmanTableSpec >> 4 === 0
                                 ? huffmanTablesDC
                                 : huffmanTablesAC)[huffmanTableSpec & 15] =
                                 buildHuffmanTable(codeLengths, huffmanValues);
                           }
                           break;
                        case 0xffdd:
                           offset += 2;
                           resetInterval = readUint16(data, offset);
                           offset += 2;
                           break;
                        case 0xffda:
                           var parseDNLMarker = ++numSOSMarkers === 1 && !dnlScanLines;
                           offset += 2;
                           var selectorsCount = data[offset++],
                              components = [];
                           for (i = 0; i < selectorsCount; i++) {
                              var index = data[offset++];
                              var componentIndex = frame.componentIds[index];
                              var component = frame.components[componentIndex];
                              component.index = index;
                              var tableSpec = data[offset++];
                              component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
                              component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
                              components.push(component);
                           }
                           var spectralStart = data[offset++],
                              spectralEnd = data[offset++],
                              successiveApproximation = data[offset++];
                           try {
                              var processed = decodeScan(
                                 data,
                                 offset,
                                 frame,
                                 components,
                                 resetInterval,
                                 spectralStart,
                                 spectralEnd,
                                 successiveApproximation >> 4,
                                 successiveApproximation & 15,
                                 parseDNLMarker,
                              );
                              offset += processed;
                           } catch (ex) {
                              if (ex instanceof DNLMarkerError) {
                                 warn(
                                    "".concat(
                                       ex.message,
                                       " -- attempting to re-parse the JPEG image.",
                                    ),
                                 );
                                 return this.parse(data, { dnlScanLines: ex.scanLines });
                              } else if (ex instanceof EOIMarkerError) {
                                 warn(
                                    "".concat(
                                       ex.message,
                                       " -- ignoring the rest of the image data.",
                                    ),
                                 );
                                 break markerLoop;
                              }
                              throw ex;
                           }
                           break;
                        case 0xffdc:
                           offset += 4;
                           break;
                        case 0xffff:
                           if (data[offset] !== 0xff) {
                              offset--;
                           }
                           break;
                        default:
                           var nextFileMarker = findNextFileMarker(
                              data,
                              offset - 2,
                              offset - 3,
                           );
                           if (
                              nextFileMarker !== null &&
                              nextFileMarker !== void 0 &&
                              nextFileMarker.invalid
                           ) {
                              warn(
                                 "JpegImage.parse - unexpected data, current marker is: " +
                                 nextFileMarker.invalid,
                              );
                              offset = nextFileMarker.offset;
                              break;
                           }
                           if (!nextFileMarker || offset >= data.length - 1) {
                              warn(
                                 "JpegImage.parse - reached the end of the image data " +
                                 "without finding an EOI marker (0xFFD9).",
                              );
                              break markerLoop;
                           }
                           throw new JpegError(
                              "JpegImage.parse - unknown marker: " +
                              fileMarker.toString(16),
                           );
                     }
                     fileMarker = readUint16(data, offset);
                     offset += 2;
                  }
                  if (!frame) {
                     throw new JpegError("JpegImage.parse - no frame data found.");
                  }
                  this.width = frame.samplesPerLine;
                  this.height = frame.scanLines;
                  this.jfif = jfif;
                  this.adobe = adobe;
                  this.components = [];
                  var _iterator21 = _createForOfIteratorHelper(frame.components),
                     _step21;
                  try {
                     for (_iterator21.s(); !(_step21 = _iterator21.n()).done; ) {
                        var _component = _step21.value;
                        var quantizationTable =
                           quantizationTables[_component.quantizationId];
                        if (quantizationTable) {
                           _component.quantizationTable = quantizationTable;
                        }
                        this.components.push({
                           index: _component.index,
                           output: buildComponentData(frame, _component),
                           scaleX: _component.h / frame.maxH,
                           scaleY: _component.v / frame.maxV,
                           blocksPerLine: _component.blocksPerLine,
                           blocksPerColumn: _component.blocksPerColumn,
                        });
                     }
                  } catch (err) {
                     _iterator21.e(err);
                  } finally {
                     _iterator21.f();
                  }
                  this.numComponents = this.components.length;
                  return undefined;
               },
            },
            {
               key: "_getLinearizedBlockData",
               value: function _getLinearizedBlockData(width, height) {
                  var isSourcePDF =
                     arguments.length > 2 && arguments[2] !== undefined
                        ? arguments[2]
                        : false;
                  var scaleX = this.width / width,
                     scaleY = this.height / height;
                  var component, componentScaleX, componentScaleY, blocksPerScanline;
                  var x, y, i, j, k;
                  var index;
                  var offset = 0;
                  var output;
                  var numComponents = this.components.length;
                  var dataLength = width * height * numComponents;
                  var data = new Uint8ClampedArray(dataLength);
                  var xScaleBlockOffset = new Uint32Array(width);
                  var mask3LSB = 0xfffffff8;
                  var lastComponentScaleX;
                  for (i = 0; i < numComponents; i++) {
                     component = this.components[i];
                     componentScaleX = component.scaleX * scaleX;
                     componentScaleY = component.scaleY * scaleY;
                     offset = i;
                     output = component.output;
                     blocksPerScanline = (component.blocksPerLine + 1) << 3;
                     if (componentScaleX !== lastComponentScaleX) {
                        for (x = 0; x < width; x++) {
                           j = 0 | (x * componentScaleX);
                           xScaleBlockOffset[x] = ((j & mask3LSB) << 3) | (j & 7);
                        }
                        lastComponentScaleX = componentScaleX;
                     }
                     for (y = 0; y < height; y++) {
                        j = 0 | (y * componentScaleY);
                        index = (blocksPerScanline * (j & mask3LSB)) | ((j & 7) << 3);
                        for (x = 0; x < width; x++) {
                           data[offset] = output[index + xScaleBlockOffset[x]];
                           offset += numComponents;
                        }
                     }
                  }
                  var transform = this._decodeTransform;
                  if (!isSourcePDF && numComponents === 4 && !transform) {
                     transform = new Int32Array([
                        -256, 255, -256, 255, -256, 255, -256, 255,
                     ]);
                  }
                  if (transform) {
                     for (i = 0; i < dataLength; ) {
                        for (j = 0, k = 0; j < numComponents; j++, i++, k += 2) {
                           data[i] = ((data[i] * transform[k]) >> 8) + transform[k + 1];
                        }
                     }
                  }
                  return data;
               },
            },
            {
               key: "_isColorConversionNeeded",
               get: function get() {
                  if (this.adobe) {
                     return !!this.adobe.transformCode;
                  }
                  if (this.numComponents === 3) {
                     if (this._colorTransform === 0) {
                        return false;
                     } else if (
                        this.components[0].index === 0x52 &&
                        this.components[1].index === 0x47 &&
                        this.components[2].index === 0x42
                     ) {
                        return false;
                     }
                     return true;
                  }
                  if (this._colorTransform === 1) {
                     return true;
                  }
                  return false;
               },
            },
            {
               key: "_convertYccToRgb",
               value: function _convertYccToRgb(data) {
                  var Y, Cb, Cr;
                  for (var i = 0, length = data.length; i < length; i += 3) {
                     Y = data[i];
                     Cb = data[i + 1];
                     Cr = data[i + 2];
                     data[i] = Y - 179.456 + 1.402 * Cr;
                     data[i + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;
                     data[i + 2] = Y - 226.816 + 1.772 * Cb;
                  }
                  return data;
               },
            },
            {
               key: "_convertYccToRgba",
               value: function _convertYccToRgba(data, out) {
                  for (
                     var i = 0, j = 0, length = data.length;
                     i < length;
                     i += 3, j += 4
                  ) {
                     var Y = data[i];
                     var Cb = data[i + 1];
                     var Cr = data[i + 2];
                     out[j] = Y - 179.456 + 1.402 * Cr;
                     out[j + 1] = Y + 135.459 - 0.344 * Cb - 0.714 * Cr;
                     out[j + 2] = Y - 226.816 + 1.772 * Cb;
                     out[j + 3] = 255;
                  }
                  return out;
               },
            },
            {
               key: "_convertYcckToRgb",
               value: function _convertYcckToRgb(data) {
                  var Y, Cb, Cr, k;
                  var offset = 0;
                  for (var i = 0, length = data.length; i < length; i += 4) {
                     Y = data[i];
                     Cb = data[i + 1];
                     Cr = data[i + 2];
                     k = data[i + 3];
                     data[offset++] =
                        -122.67195406894 +
                        Cb *
                        (-6.60635669420364e-5 * Cb +
                           0.000437130475926232 * Cr -
                           5.4080610064599e-5 * Y +
                           0.00048449797120281 * k -
                           0.154362151871126) +
                        Cr *
                        (-0.000957964378445773 * Cr +
                           0.000817076911346625 * Y -
                           0.00477271405408747 * k +
                           1.53380253221734) +
                        Y *
                        (0.000961250184130688 * Y -
                           0.00266257332283933 * k +
                           0.48357088451265) +
                        k * (-0.000336197177618394 * k + 0.484791561490776);
                     data[offset++] =
                        107.268039397724 +
                        Cb *
                        (2.19927104525741e-5 * Cb -
                           0.000640992018297945 * Cr +
                           0.000659397001245577 * Y +
                           0.000426105652938837 * k -
                           0.176491792462875) +
                        Cr *
                        (-0.000778269941513683 * Cr +
                           0.00130872261408275 * Y +
                           0.000770482631801132 * k -
                           0.151051492775562) +
                        Y *
                        (0.00126935368114843 * Y -
                           0.00265090189010898 * k +
                           0.25802910206845) +
                        k * (-0.000318913117588328 * k - 0.213742400323665);
                     data[offset++] =
                        -20.810012546947 +
                        Cb *
                        (-0.000570115196973677 * Cb -
                           2.63409051004589e-5 * Cr +
                           0.0020741088115012 * Y -
                           0.00288260236853442 * k +
                           0.814272968359295) +
                        Cr *
                        (-1.53496057440975e-5 * Cr -
                           0.000132689043961446 * Y +
                           0.000560833691242812 * k -
                           0.195152027534049) +
                        Y *
                        (0.00174418132927582 * Y -
                           0.00255243321439347 * k +
                           0.116935020465145) +
                        k * (-0.000343531996510555 * k + 0.24165260232407);
                  }
                  return data.subarray(0, offset);
               },
            },
            {
               key: "_convertYcckToRgba",
               value: function _convertYcckToRgba(data) {
                  for (var i = 0, length = data.length; i < length; i += 4) {
                     var Y = data[i];
                     var Cb = data[i + 1];
                     var Cr = data[i + 2];
                     var k = data[i + 3];
                     data[i] =
                        -122.67195406894 +
                        Cb *
                        (-6.60635669420364e-5 * Cb +
                           0.000437130475926232 * Cr -
                           5.4080610064599e-5 * Y +
                           0.00048449797120281 * k -
                           0.154362151871126) +
                        Cr *
                        (-0.000957964378445773 * Cr +
                           0.000817076911346625 * Y -
                           0.00477271405408747 * k +
                           1.53380253221734) +
                        Y *
                        (0.000961250184130688 * Y -
                           0.00266257332283933 * k +
                           0.48357088451265) +
                        k * (-0.000336197177618394 * k + 0.484791561490776);
                     data[i + 1] =
                        107.268039397724 +
                        Cb *
                        (2.19927104525741e-5 * Cb -
                           0.000640992018297945 * Cr +
                           0.000659397001245577 * Y +
                           0.000426105652938837 * k -
                           0.176491792462875) +
                        Cr *
                        (-0.000778269941513683 * Cr +
                           0.00130872261408275 * Y +
                           0.000770482631801132 * k -
                           0.151051492775562) +
                        Y *
                        (0.00126935368114843 * Y -
                           0.00265090189010898 * k +
                           0.25802910206845) +
                        k * (-0.000318913117588328 * k - 0.213742400323665);
                     data[i + 2] =
                        -20.810012546947 +
                        Cb *
                        (-0.000570115196973677 * Cb -
                           2.63409051004589e-5 * Cr +
                           0.0020741088115012 * Y -
                           0.00288260236853442 * k +
                           0.814272968359295) +
                        Cr *
                        (-1.53496057440975e-5 * Cr -
                           0.000132689043961446 * Y +
                           0.000560833691242812 * k -
                           0.195152027534049) +
                        Y *
                        (0.00174418132927582 * Y -
                           0.00255243321439347 * k +
                           0.116935020465145) +
                        k * (-0.000343531996510555 * k + 0.24165260232407);
                     data[i + 3] = 255;
                  }
                  return data;
               },
            },
            {
               key: "_convertYcckToCmyk",
               value: function _convertYcckToCmyk(data) {
                  var Y, Cb, Cr;
                  for (var i = 0, length = data.length; i < length; i += 4) {
                     Y = data[i];
                     Cb = data[i + 1];
                     Cr = data[i + 2];
                     data[i] = 434.456 - Y - 1.402 * Cr;
                     data[i + 1] = 119.541 - Y + 0.344 * Cb + 0.714 * Cr;
                     data[i + 2] = 481.816 - Y - 1.772 * Cb;
                  }
                  return data;
               },
            },
            {
               key: "_convertCmykToRgb",
               value: function _convertCmykToRgb(data) {
                  var c, m, y, k;
                  var offset = 0;
                  for (var i = 0, length = data.length; i < length; i += 4) {
                     c = data[i];
                     m = data[i + 1];
                     y = data[i + 2];
                     k = data[i + 3];
                     data[offset++] =
                        255 +
                        c *
                        (-0.00006747147073602441 * c +
                           0.0008379262121013727 * m +
                           0.0002894718188643294 * y +
                           0.003264231057537806 * k -
                           1.1185611867203937) +
                        m *
                        (0.000026374107616089405 * m -
                           0.00008626949158638572 * y -
                           0.0002748769067499491 * k -
                           0.02155688794978967) +
                        y *
                        (-0.00003878099212869363 * y -
                           0.0003267808279485286 * k +
                           0.0686742238595345) -
                        k * (0.0003361971776183937 * k + 0.7430659151342254);
                     data[offset++] =
                        255 +
                        c *
                        (0.00013596372813588848 * c +
                           0.000924537132573585 * m +
                           0.00010567359618683593 * y +
                           0.0004791864687436512 * k -
                           0.3109689587515875) +
                        m *
                        (-0.00023545346108370344 * m +
                           0.0002702845253534714 * y +
                           0.0020200308977307156 * k -
                           0.7488052167015494) +
                        y *
                        (0.00006834815998235662 * y +
                           0.00015168452363460973 * k -
                           0.09751927774728933) -
                        k * (0.0003189131175883281 * k + 0.7364883807733168);
                     data[offset++] =
                        255 +
                        c *
                        (0.000013598650411385307 * c +
                           0.00012423956175490851 * m +
                           0.0004751985097583589 * y -
                           0.0000036729317476630422 * k -
                           0.05562186980264034) +
                        m *
                        (0.00016141380598724676 * m +
                           0.0009692239130725186 * y +
                           0.0007782692450036253 * k -
                           0.44015232367526463) +
                        y *
                        (5.068882914068769e-7 * y +
                           0.0017778369011375071 * k -
                           0.7591454649749609) -
                        k * (0.0003435319965105553 * k + 0.7063770186160144);
                  }
                  return data.subarray(0, offset);
               },
            },
            {
               key: "_convertCmykToRgba",
               value: function _convertCmykToRgba(data) {
                  for (var i = 0, length = data.length; i < length; i += 4) {
                     var c = data[i];
                     var m = data[i + 1];
                     var y = data[i + 2];
                     var k = data[i + 3];
                     data[i] =
                        255 +
                        c *
                        (-0.00006747147073602441 * c +
                           0.0008379262121013727 * m +
                           0.0002894718188643294 * y +
                           0.003264231057537806 * k -
                           1.1185611867203937) +
                        m *
                        (0.000026374107616089405 * m -
                           0.00008626949158638572 * y -
                           0.0002748769067499491 * k -
                           0.02155688794978967) +
                        y *
                        (-0.00003878099212869363 * y -
                           0.0003267808279485286 * k +
                           0.0686742238595345) -
                        k * (0.0003361971776183937 * k + 0.7430659151342254);
                     data[i + 1] =
                        255 +
                        c *
                        (0.00013596372813588848 * c +
                           0.000924537132573585 * m +
                           0.00010567359618683593 * y +
                           0.0004791864687436512 * k -
                           0.3109689587515875) +
                        m *
                        (-0.00023545346108370344 * m +
                           0.0002702845253534714 * y +
                           0.0020200308977307156 * k -
                           0.7488052167015494) +
                        y *
                        (0.00006834815998235662 * y +
                           0.00015168452363460973 * k -
                           0.09751927774728933) -
                        k * (0.0003189131175883281 * k + 0.7364883807733168);
                     data[i + 2] =
                        255 +
                        c *
                        (0.000013598650411385307 * c +
                           0.00012423956175490851 * m +
                           0.0004751985097583589 * y -
                           0.0000036729317476630422 * k -
                           0.05562186980264034) +
                        m *
                        (0.00016141380598724676 * m +
                           0.0009692239130725186 * y +
                           0.0007782692450036253 * k -
                           0.44015232367526463) +
                        y *
                        (5.068882914068769e-7 * y +
                           0.0017778369011375071 * k -
                           0.7591454649749609) -
                        k * (0.0003435319965105553 * k + 0.7063770186160144);
                     data[i + 3] = 255;
                  }
                  return data;
               },
            },
            {
               key: "getData",
               value: function getData(_ref20) {
                  var width = _ref20.width,
                     height = _ref20.height,
                     _ref20$forceRGBA = _ref20.forceRGBA,
                     forceRGBA =
                        _ref20$forceRGBA === void 0 ? false : _ref20$forceRGBA,
                     _ref20$forceRGB = _ref20.forceRGB,
                     forceRGB = _ref20$forceRGB === void 0 ? false : _ref20$forceRGB,
                     _ref20$isSourcePDF = _ref20.isSourcePDF,
                     isSourcePDF =
                        _ref20$isSourcePDF === void 0 ? false : _ref20$isSourcePDF;
                  if (this.numComponents > 4) {
                     throw new JpegError("Unsupported color mode");
                  }
                  var data = this._getLinearizedBlockData(width, height, isSourcePDF);
                  if (this.numComponents === 1 && (forceRGBA || forceRGB)) {
                     var len = data.length * (forceRGBA ? 4 : 3);
                     var rgbaData = new Uint8ClampedArray(len);
                     var offset = 0;
                     if (forceRGBA) {
                        grayToRGBA(data, new Uint32Array(rgbaData.buffer));
                     } else {
                        var _iterator22 = _createForOfIteratorHelper(data),
                           _step22;
                        try {
                           for (_iterator22.s(); !(_step22 = _iterator22.n()).done; ) {
                              var grayColor = _step22.value;
                              rgbaData[offset++] = grayColor;
                              rgbaData[offset++] = grayColor;
                              rgbaData[offset++] = grayColor;
                           }
                        } catch (err) {
                           _iterator22.e(err);
                        } finally {
                           _iterator22.f();
                        }
                     }
                     return rgbaData;
                  } else if (
                     this.numComponents === 3 &&
                     this._isColorConversionNeeded
                  ) {
                     if (forceRGBA) {
                        var _rgbaData = new Uint8ClampedArray((data.length / 3) * 4);
                        return this._convertYccToRgba(data, _rgbaData);
                     }
                     return this._convertYccToRgb(data);
                  } else if (this.numComponents === 4) {
                     if (this._isColorConversionNeeded) {
                        if (forceRGBA) {
                           return this._convertYcckToRgba(data);
                        }
                        if (forceRGB) {
                           return this._convertYcckToRgb(data);
                        }
                        return this._convertYcckToCmyk(data);
                     } else if (forceRGBA) {
                        return this._convertCmykToRgba(data);
                     } else if (forceRGB) {
                        return this._convertCmykToRgb(data);
                     }
                  }
                  return data;
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/jpeg_stream.js
      var JpegStream = /*#__PURE__*/ (function (_DecodeStream7) {
         function JpegStream(stream, maybeLength, params) {
            var _this22;
            _classCallCheck(this, JpegStream);
            var ch;
            while ((ch = stream.getByte()) !== -1) {
               if (ch === 0xff) {
                  stream.skip(-1);
                  break;
               }
            }
            _this22 = _callSuper(this, JpegStream, [maybeLength]);
            _this22.stream = stream;
            _this22.dict = stream.dict;
            _this22.maybeLength = maybeLength;
            _this22.params = params;
            return _this22;
         }
         _inherits(JpegStream, _DecodeStream7);
         return _createClass(JpegStream, [
            {
               key: "bytes",
               get: function get() {
                  return shadow(
                     this,
                     "bytes",
                     this.stream.getBytes(this.maybeLength),
                  );
               },
            },
            { key: "ensureBuffer", value: function ensureBuffer(requested) {} },
            {
               key: "readBlock",
               value: function readBlock() {
                  if (this.eof) {
                     return;
                  }
                  var jpegOptions = {
                     decodeTransform: undefined,
                     colorTransform: undefined,
                  };
                  var decodeArr = this.dict.getArray("D", "Decode");
                  if ((this.forceRGBA || this.forceRGB) && Array.isArray(decodeArr)) {
                     var bitsPerComponent =
                        this.dict.get("BPC", "BitsPerComponent") || 8;
                     var decodeArrLength = decodeArr.length;
                     var transform = new Int32Array(decodeArrLength);
                     var transformNeeded = false;
                     var maxValue = (1 << bitsPerComponent) - 1;
                     for (var i = 0; i < decodeArrLength; i += 2) {
                        transform[i] = ((decodeArr[i + 1] - decodeArr[i]) * 256) | 0;
                        transform[i + 1] = (decodeArr[i] * maxValue) | 0;
                        if (transform[i] !== 256 || transform[i + 1] !== 0) {
                           transformNeeded = true;
                        }
                     }
                     if (transformNeeded) {
                        jpegOptions.decodeTransform = transform;
                     }
                  }
                  if (this.params instanceof Dict) {
                     var colorTransform = this.params.get("ColorTransform");
                     if (Number.isInteger(colorTransform)) {
                        jpegOptions.colorTransform = colorTransform;
                     }
                  }
                  var jpegImage = new JpegImage(jpegOptions);
                  jpegImage.parse(this.bytes);
                  var data = jpegImage.getData({
                     width: this.drawWidth,
                     height: this.drawHeight,
                     forceRGBA: this.forceRGBA,
                     forceRGB: this.forceRGB,
                     isSourcePDF: true,
                  });
                  this.buffer = data;
                  this.bufferLength = data.length;
                  this.eof = true;
               },
            },
         ]);
      })(DecodeStream); // CONCATENATED MODULE: ./external/openjpeg/openjpeg.js
      var OpenJPEG = (function () {
         var _scriptDir =
            "file:///home/timvandermeij/Documenten/Ontwikkeling/pdf.js/Code/external/openjpeg/openjpeg.js";
         return function () {
            var moduleArg =
               arguments.length > 0 && arguments[0] !== undefined
                  ? arguments[0]
                  : {};
            var Module = moduleArg;
            var readyPromiseResolve, readyPromiseReject;
            var readyPromise = new Promise(function (resolve, reject) {
               readyPromiseResolve = resolve;
               readyPromiseReject = reject;
            });
            ("use strict");
            Module.decode = function (bytes, ignoreColorSpace) {
               var size = bytes.length;
               var ptr = Module._malloc(size);
               Module.HEAPU8.set(bytes, ptr);
               var ret = Module._jp2_decode(ptr, size, ignoreColorSpace ? 1 : 0);
               Module._free(ptr);
               if (ret) {
                  var errorMessages = Module.errorMessages;
                  if (errorMessages) {
                     delete Module.errorMessages;
                     return errorMessages;
                  }
                  return "Unknown error";
               }
               var imageData = Module.imageData;
               Module.imageData = null;
               return imageData;
            };
            var moduleOverrides = Object.assign({}, Module);
            var arguments_ = [];
            var thisProgram = "./this.program";
            var quit_ = function quit_(status, toThrow) {
               throw toThrow;
            };
            var ENVIRONMENT_IS_WEB = true;
            var ENVIRONMENT_IS_WORKER = false;
            var scriptDirectory = "";
            var read_, readAsync, readBinary;
            if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
               if (ENVIRONMENT_IS_WORKER) {
                  scriptDirectory = self.location.href;
               } else if (typeof document != "undefined" && document.currentScript) {
                  scriptDirectory = document.currentScript.src;
               }
               if (_scriptDir) {
                  scriptDirectory = _scriptDir;
               }
               if (scriptDirectory.startsWith("blob:")) {
                  scriptDirectory = "";
               } else {
                  scriptDirectory = scriptDirectory.substr(
                     0,
                     scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1,
                  );
               }
               read_ = function read_(url) {
                  var xhr = new XMLHttpRequest();
                  xhr.open("GET", url, false);
                  xhr.send(null);
                  return xhr.responseText;
               };
               if (ENVIRONMENT_IS_WORKER) {
                  readBinary = function readBinary(url) {
                     var xhr = new XMLHttpRequest();
                     xhr.open("GET", url, false);
                     xhr.responseType = "arraybuffer";
                     xhr.send(null);
                     return new Uint8Array(xhr.response);
                  };
               }
               readAsync = function readAsync(url, onload, onerror) {
                  var xhr = new XMLHttpRequest();
                  xhr.open("GET", url, true);
                  xhr.responseType = "arraybuffer";
                  xhr.onload = function () {
                     if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) {
                        onload(xhr.response);
                        return;
                     }
                     onerror();
                  };
                  xhr.onerror = onerror;
                  xhr.send(null);
               };
            } else {
            }
            var out = Module["print"] || console.log.bind(console);
            var err = Module["printErr"] || console.error.bind(console);
            Object.assign(Module, moduleOverrides);
            moduleOverrides = null;
            if (Module["arguments"]) arguments_ = Module["arguments"];
            if (Module["thisProgram"]) thisProgram = Module["thisProgram"];
            if (Module["quit"]) quit_ = Module["quit"];
            var wasmBinary;
            if (Module["wasmBinary"]) wasmBinary = Module["wasmBinary"];
            function intArrayFromBase64(s) {
               var decoded = atob(s);
               var bytes = new Uint8Array(decoded.length);
               for (var i = 0; i < decoded.length; ++i) {
                  bytes[i] = decoded.charCodeAt(i);
               }
               return bytes;
            }
            function tryParseAsDataURI(filename) {
               if (!isDataURI(filename)) {
                  return;
               }
               return intArrayFromBase64(filename.slice(dataURIPrefix.length));
            }
            var wasmMemory;
            var ABORT = false;
            var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
            function updateMemoryViews() {
               var b = wasmMemory.buffer;
               Module["HEAP8"] = HEAP8 = new Int8Array(b);
               Module["HEAP16"] = HEAP16 = new Int16Array(b);
               Module["HEAPU8"] = HEAPU8 = new Uint8Array(b);
               Module["HEAPU16"] = HEAPU16 = new Uint16Array(b);
               Module["HEAP32"] = HEAP32 = new Int32Array(b);
               Module["HEAPU32"] = HEAPU32 = new Uint32Array(b);
               Module["HEAPF32"] = HEAPF32 = new Float32Array(b);
               Module["HEAPF64"] = HEAPF64 = new Float64Array(b);
            }
            var __ATPRERUN__ = [];
            var __ATINIT__ = [];
            var __ATPOSTRUN__ = [];
            var runtimeInitialized = false;
            function preRun() {
               if (Module["preRun"]) {
                  if (typeof Module["preRun"] == "function")
                     Module["preRun"] = [Module["preRun"]];
                  while (Module["preRun"].length) {
                     addOnPreRun(Module["preRun"].shift());
                  }
               }
               callRuntimeCallbacks(__ATPRERUN__);
            }
            function initRuntime() {
               runtimeInitialized = true;
               callRuntimeCallbacks(__ATINIT__);
            }
            function postRun() {
               if (Module["postRun"]) {
                  if (typeof Module["postRun"] == "function")
                     Module["postRun"] = [Module["postRun"]];
                  while (Module["postRun"].length) {
                     addOnPostRun(Module["postRun"].shift());
                  }
               }
               callRuntimeCallbacks(__ATPOSTRUN__);
            }
            function addOnPreRun(cb) {
               __ATPRERUN__.unshift(cb);
            }
            function addOnInit(cb) {
               __ATINIT__.unshift(cb);
            }
            function addOnPostRun(cb) {
               __ATPOSTRUN__.unshift(cb);
            }
            var runDependencies = 0;
            var runDependencyWatcher = null;
            var dependenciesFulfilled = null;
            function addRunDependency(id) {
               var _Module$monitorRunDep;
               runDependencies++;
               (_Module$monitorRunDep = Module["monitorRunDependencies"]) === null ||
               _Module$monitorRunDep === void 0 ||
               _Module$monitorRunDep.call(Module, runDependencies);
            }
            function removeRunDependency(id) {
               var _Module$monitorRunDep2;
               runDependencies--;
               (_Module$monitorRunDep2 = Module["monitorRunDependencies"]) ===
               null ||
               _Module$monitorRunDep2 === void 0 ||
               _Module$monitorRunDep2.call(Module, runDependencies);
               if (runDependencies == 0) {
                  if (runDependencyWatcher !== null) {
                     clearInterval(runDependencyWatcher);
                     runDependencyWatcher = null;
                  }
                  if (dependenciesFulfilled) {
                     var callback = dependenciesFulfilled;
                     dependenciesFulfilled = null;
                     callback();
                  }
               }
            }
            var dataURIPrefix = "data:application/octet-stream;base64,";
            var isDataURI = function isDataURI(filename) {
               return filename.startsWith(dataURIPrefix);
            };
            var wasmBinaryFile;
            wasmBinaryFile =
               "data:application/octet-stream;base64,";
            function getBinarySync(file) {
               if (file == wasmBinaryFile && wasmBinary) {
                  return new Uint8Array(wasmBinary);
               }
               var binary = tryParseAsDataURI(file);
               if (binary) {
                  return binary;
               }
               if (readBinary) {
                  return readBinary(file);
               }
               throw 'sync fetching of the wasm failed: you can preload it to Module["wasmBinary"] manually, or emcc.py will do that for you when generating HTML (but not JS)';
            }
            function instantiateSync(file, info) {
               var module;
               var binary = getBinarySync(file);
               module = new WebAssembly.Module(binary);
               var instance = new WebAssembly.Instance(module, info);
               return [instance, module];
            }
            function createWasm() {
               var info = { a: wasmImports };
               function receiveInstance(instance, module) {
                  wasmExports = instance.exports;
                  wasmMemory = wasmExports["i"];
                  updateMemoryViews();
                  addOnInit(wasmExports["j"]);
                  removeRunDependency("wasm-instantiate");
                  return wasmExports;
               }
               addRunDependency("wasm-instantiate");
               if (Module["instantiateWasm"]) {
                  try {
                     return Module["instantiateWasm"](info, receiveInstance);
                  } catch (e) {
                     err(
                        "Module.instantiateWasm callback failed with error: ".concat(e),
                     );
                     readyPromiseReject(e);
                  }
               }
               var result = instantiateSync(wasmBinaryFile, info);
               return receiveInstance(result[0]);
            }
            var callRuntimeCallbacks = function callRuntimeCallbacks(callbacks) {
               while (callbacks.length > 0) {
                  callbacks.shift()(Module);
               }
            };
            var noExitRuntime = Module["noExitRuntime"] || true;
            var __emscripten_memcpy_js = function __emscripten_memcpy_js(
               dest,
               src,
               num,
            ) {
               return HEAPU8.copyWithin(dest, src, src + num);
            };
            var getHeapMax = function getHeapMax() {
               return 2147483648;
            };
            var growMemory = function growMemory(size) {
               var b = wasmMemory.buffer;
               var pages = (size - b.byteLength + 65535) / 65536;
               try {
                  wasmMemory.grow(pages);
                  updateMemoryViews();
                  return 1;
               } catch (e) {}
            };
            var _emscripten_resize_heap = function _emscripten_resize_heap(
               requestedSize,
            ) {
               var oldSize = HEAPU8.length;
               requestedSize >>>= 0;
               var maxHeapSize = getHeapMax();
               if (requestedSize > maxHeapSize) {
                  return false;
               }
               var alignUp = function alignUp(x, multiple) {
                  return x + ((multiple - (x % multiple)) % multiple);
               };
               for (var cutDown = 1; cutDown <= 4; cutDown *= 2) {
                  var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
                  overGrownHeapSize = Math.min(
                     overGrownHeapSize,
                     requestedSize + 100663296,
                  );
                  var newSize = Math.min(
                     maxHeapSize,
                     alignUp(Math.max(requestedSize, overGrownHeapSize), 65536),
                  );
                  var replacement = growMemory(newSize);
                  if (replacement) {
                     return true;
                  }
               }
               return false;
            };
            var ENV = {};
            var getExecutableName = function getExecutableName() {
               return thisProgram || "./this.program";
            };
            var _getEnvStrings = function getEnvStrings() {
               if (!_getEnvStrings.strings) {
                  var lang =
                     (
                        ((typeof navigator === "undefined"
                              ? "undefined"
                              : _typeof(navigator)) == "object" &&
                           navigator.languages &&
                           navigator.languages[0]) ||
                        "C"
                     ).replace("-", "_") + ".UTF-8";
                  var env = {
                     USER: "web_user",
                     LOGNAME: "web_user",
                     PATH: "/",
                     PWD: "/",
                     HOME: "/home/web_user",
                     LANG: lang,
                     _: getExecutableName(),
                  };
                  for (var x in ENV) {
                     if (ENV[x] === undefined) delete env[x];
                     else env[x] = ENV[x];
                  }
                  var strings = [];
                  for (var x in env) {
                     strings.push("".concat(x, "=").concat(env[x]));
                  }
                  _getEnvStrings.strings = strings;
               }
               return _getEnvStrings.strings;
            };
            var stringToAscii = function stringToAscii(str, buffer) {
               for (var i = 0; i < str.length; ++i) {
                  HEAP8[buffer++] = str.charCodeAt(i);
               }
               HEAP8[buffer] = 0;
            };
            var _environ_get = function _environ_get(__environ, environ_buf) {
               var bufSize = 0;
               _getEnvStrings().forEach(function (string, i) {
                  var ptr = environ_buf + bufSize;
                  HEAPU32[(__environ + i * 4) >> 2] = ptr;
                  stringToAscii(string, ptr);
                  bufSize += string.length + 1;
               });
               return 0;
            };
            var _environ_sizes_get = function _environ_sizes_get(
               penviron_count,
               penviron_buf_size,
            ) {
               var strings = _getEnvStrings();
               HEAPU32[penviron_count >> 2] = strings.length;
               var bufSize = 0;
               strings.forEach(function (string) {
                  return (bufSize += string.length + 1);
               });
               HEAPU32[penviron_buf_size >> 2] = bufSize;
               return 0;
            };
            var printCharBuffers = [null, [], []];
            var UTF8Decoder =
               typeof TextDecoder != "undefined"
                  ? new TextDecoder("utf8")
                  : undefined;
            var UTF8ArrayToString = function UTF8ArrayToString(
               heapOrArray,
               idx,
               maxBytesToRead,
            ) {
               var endIdx = idx + maxBytesToRead;
               var endPtr = idx;
               while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
               if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
                  return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
               }
               var str = "";
               while (idx < endPtr) {
                  var u0 = heapOrArray[idx++];
                  if (!(u0 & 128)) {
                     str += String.fromCharCode(u0);
                     continue;
                  }
                  var u1 = heapOrArray[idx++] & 63;
                  if ((u0 & 224) == 192) {
                     str += String.fromCharCode(((u0 & 31) << 6) | u1);
                     continue;
                  }
                  var u2 = heapOrArray[idx++] & 63;
                  if ((u0 & 240) == 224) {
                     u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
                  } else {
                     u0 =
                        ((u0 & 7) << 18) |
                        (u1 << 12) |
                        (u2 << 6) |
                        (heapOrArray[idx++] & 63);
                  }
                  if (u0 < 65536) {
                     str += String.fromCharCode(u0);
                  } else {
                     var ch = u0 - 65536;
                     str += String.fromCharCode(
                        55296 | (ch >> 10),
                        56320 | (ch & 1023),
                     );
                  }
               }
               return str;
            };
            var printChar = function printChar(stream, curr) {
               var buffer = printCharBuffers[stream];
               if (curr === 0 || curr === 10) {
                  (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
                  buffer.length = 0;
               } else {
                  buffer.push(curr);
               }
            };
            var UTF8ToString = function UTF8ToString(ptr, maxBytesToRead) {
               return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
            };
            var _fd_write = function _fd_write(fd, iov, iovcnt, pnum) {
               var num = 0;
               for (var i = 0; i < iovcnt; i++) {
                  var ptr = HEAPU32[iov >> 2];
                  var len = HEAPU32[(iov + 4) >> 2];
                  iov += 8;
                  for (var j = 0; j < len; j++) {
                     printChar(fd, HEAPU8[ptr + j]);
                  }
                  num += len;
               }
               HEAPU32[pnum >> 2] = num;
               return 0;
            };
            function _jsPrintWarning(message_ptr) {
               var message = UTF8ToString(message_ptr);
               (Module.warn || console.warn)("OpenJPEG: ".concat(message));
            }
            function _setImageData(array_ptr, array_size) {
               Module.imageData = new Uint8ClampedArray(
                  Module.HEAPU8.subarray(array_ptr, array_ptr + array_size),
               );
            }
            function _storeErrorMessage(message_ptr) {
               var message = UTF8ToString(message_ptr);
               if (!Module.errorMessages) {
                  Module.errorMessages = message;
               } else {
                  Module.errorMessages += "\n" + message;
               }
            }
            var wasmImports = {
               f: __emscripten_memcpy_js,
               b: _emscripten_resize_heap,
               c: _environ_get,
               d: _environ_sizes_get,
               e: _fd_write,
               g: _jsPrintWarning,
               h: _setImageData,
               a: _storeErrorMessage,
            };
            var wasmExports = createWasm();
            var ___wasm_call_ctors = wasmExports["j"];
            var _malloc = (Module["_malloc"] = wasmExports["k"]);
            var _free = (Module["_free"] = wasmExports["l"]);
            var _jp2_decode = (Module["_jp2_decode"] = wasmExports["n"]);
            var __emscripten_stack_restore =
               wasmExports["_emscripten_stack_restore"];
            var __emscripten_stack_alloc = wasmExports["_emscripten_stack_alloc"];
            var _emscripten_stack_get_current =
               wasmExports["emscripten_stack_get_current"];
            var calledRun;
            dependenciesFulfilled = function runCaller() {
               if (!calledRun) run();
               if (!calledRun) dependenciesFulfilled = runCaller;
            };
            function run() {
               if (runDependencies > 0) {
                  return;
               }
               preRun();
               if (runDependencies > 0) {
                  return;
               }
               function doRun() {
                  if (calledRun) return;
                  calledRun = true;
                  Module["calledRun"] = true;
                  if (ABORT) return;
                  initRuntime();
                  readyPromiseResolve(Module);
                  if (Module["onRuntimeInitialized"])
                     Module["onRuntimeInitialized"]();
                  postRun();
               }
               if (Module["setStatus"]) {
                  Module["setStatus"]("Running...");
                  setTimeout(function () {
                     setTimeout(function () {
                        Module["setStatus"]("");
                     }, 1);
                     doRun();
                  }, 1);
               } else {
                  doRun();
               }
            }
            if (Module["preInit"]) {
               if (typeof Module["preInit"] == "function")
                  Module["preInit"] = [Module["preInit"]];
               while (Module["preInit"].length > 0) {
                  Module["preInit"].pop()();
               }
            }
            run();
            return moduleArg;
         };
      })();
      /* harmony default export */ var openjpeg = OpenJPEG; // CONCATENATED MODULE: ./src/core/jpx.js
      var JpxError = /*#__PURE__*/ (function (_BaseException14) {
         function JpxError(msg) {
            _classCallCheck(this, JpxError);
            return _callSuper(this, JpxError, [msg, "JpxError"]);
         }
         _inherits(JpxError, _BaseException14);
         return _createClass(JpxError);
      })(BaseException);
      var JpxImage = /*#__PURE__*/ (function () {
         function JpxImage() {
            _classCallCheck(this, JpxImage);
         }
         return _createClass(JpxImage, null, [
            {
               key: "decode",
               value: function decode(data) {
                  var ignoreColorSpace =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : false;
                  _assertClassBrand(JpxImage, this, _module)._ ||
                  (_module._ = _assertClassBrand(
                     JpxImage,
                     this,
                     openjpeg({ warn: warn }),
                  ));
                  var imageData = _assertClassBrand(JpxImage, this, _module)._.decode(
                     data,
                     ignoreColorSpace,
                  );
                  if (typeof imageData === "string") {
                     throw new JpxError(imageData);
                  }
                  return imageData;
               },
            },
            {
               key: "cleanup",
               value: function cleanup() {
                  _module._ = _assertClassBrand(JpxImage, this, null);
               },
            },
            {
               key: "parseImageProperties",
               value: function parseImageProperties(stream) {
                  var newByte = stream.getByte();
                  while (newByte >= 0) {
                     var oldByte = newByte;
                     newByte = stream.getByte();
                     var code = (oldByte << 8) | newByte;
                     if (code === 0xff51) {
                        stream.skip(4);
                        var Xsiz = stream.getInt32() >>> 0;
                        var Ysiz = stream.getInt32() >>> 0;
                        var XOsiz = stream.getInt32() >>> 0;
                        var YOsiz = stream.getInt32() >>> 0;
                        stream.skip(16);
                        var Csiz = stream.getUint16();
                        return {
                           width: Xsiz - XOsiz,
                           height: Ysiz - YOsiz,
                           bitsPerComponent: 8,
                           componentsCount: Csiz,
                        };
                     }
                  }
                  throw new JpxError("No size marker found in JPX stream");
               },
            },
         ]);
      })();
      var _module = { _: null }; // CONCATENATED MODULE: ./src/core/jpx_stream.js
      var JpxStream = /*#__PURE__*/ (function (_DecodeStream8) {
         function JpxStream(stream, maybeLength, params) {
            var _this23;
            _classCallCheck(this, JpxStream);
            _this23 = _callSuper(this, JpxStream, [maybeLength]);
            _this23.stream = stream;
            _this23.dict = stream.dict;
            _this23.maybeLength = maybeLength;
            _this23.params = params;
            return _this23;
         }
         _inherits(JpxStream, _DecodeStream8);
         return _createClass(JpxStream, [
            {
               key: "bytes",
               get: function get() {
                  return shadow(
                     this,
                     "bytes",
                     this.stream.getBytes(this.maybeLength),
                  );
               },
            },
            { key: "ensureBuffer", value: function ensureBuffer(requested) {} },
            {
               key: "readBlock",
               value: function readBlock(ignoreColorSpace) {
                  if (this.eof) {
                     return;
                  }
                  this.buffer = JpxImage.decode(this.bytes, ignoreColorSpace);
                  this.bufferLength = this.buffer.length;
                  this.eof = true;
               },
            },
         ]);
      })(DecodeStream); // CONCATENATED MODULE: ./src/core/lzw_stream.js
      var LZWStream = /*#__PURE__*/ (function (_DecodeStream9) {
         function LZWStream(str, maybeLength, earlyChange) {
            var _this24;
            _classCallCheck(this, LZWStream);
            _this24 = _callSuper(this, LZWStream, [maybeLength]);
            _this24.str = str;
            _this24.dict = str.dict;
            _this24.cachedData = 0;
            _this24.bitsCached = 0;
            var maxLzwDictionarySize = 4096;
            var lzwState = {
               earlyChange: earlyChange,
               codeLength: 9,
               nextCode: 258,
               dictionaryValues: new Uint8Array(maxLzwDictionarySize),
               dictionaryLengths: new Uint16Array(maxLzwDictionarySize),
               dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),
               currentSequence: new Uint8Array(maxLzwDictionarySize),
               currentSequenceLength: 0,
            };
            for (var i = 0; i < 256; ++i) {
               lzwState.dictionaryValues[i] = i;
               lzwState.dictionaryLengths[i] = 1;
            }
            _this24.lzwState = lzwState;
            return _this24;
         }
         _inherits(LZWStream, _DecodeStream9);
         return _createClass(LZWStream, [
            {
               key: "readBits",
               value: function readBits(n) {
                  var bitsCached = this.bitsCached;
                  var cachedData = this.cachedData;
                  while (bitsCached < n) {
                     var c = this.str.getByte();
                     if (c === -1) {
                        this.eof = true;
                        return null;
                     }
                     cachedData = (cachedData << 8) | c;
                     bitsCached += 8;
                  }
                  this.bitsCached = bitsCached -= n;
                  this.cachedData = cachedData;
                  this.lastCode = null;
                  return (cachedData >>> bitsCached) & ((1 << n) - 1);
               },
            },
            {
               key: "readBlock",
               value: function readBlock() {
                  var blockSize = 512,
                     decodedSizeDelta = blockSize;
                  var estimatedDecodedSize = blockSize * 2;
                  var i, j, q;
                  var lzwState = this.lzwState;
                  if (!lzwState) {
                     return;
                  }
                  var earlyChange = lzwState.earlyChange;
                  var nextCode = lzwState.nextCode;
                  var dictionaryValues = lzwState.dictionaryValues;
                  var dictionaryLengths = lzwState.dictionaryLengths;
                  var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;
                  var codeLength = lzwState.codeLength;
                  var prevCode = lzwState.prevCode;
                  var currentSequence = lzwState.currentSequence;
                  var currentSequenceLength = lzwState.currentSequenceLength;
                  var decodedLength = 0;
                  var currentBufferLength = this.bufferLength;
                  var buffer = this.ensureBuffer(
                     this.bufferLength + estimatedDecodedSize,
                  );
                  for (i = 0; i < blockSize; i++) {
                     var code = this.readBits(codeLength);
                     var hasPrev = currentSequenceLength > 0;
                     if (code < 256) {
                        currentSequence[0] = code;
                        currentSequenceLength = 1;
                     } else if (code >= 258) {
                        if (code < nextCode) {
                           currentSequenceLength = dictionaryLengths[code];
                           for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {
                              currentSequence[j] = dictionaryValues[q];
                              q = dictionaryPrevCodes[q];
                           }
                        } else {
                           currentSequence[currentSequenceLength++] = currentSequence[0];
                        }
                     } else if (code === 256) {
                        codeLength = 9;
                        nextCode = 258;
                        currentSequenceLength = 0;
                        continue;
                     } else {
                        this.eof = true;
                        delete this.lzwState;
                        break;
                     }
                     if (hasPrev) {
                        dictionaryPrevCodes[nextCode] = prevCode;
                        dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;
                        dictionaryValues[nextCode] = currentSequence[0];
                        nextCode++;
                        codeLength =
                           (nextCode + earlyChange) & (nextCode + earlyChange - 1)
                              ? codeLength
                              : Math.min(
                              Math.log(nextCode + earlyChange) / 0.6931471805599453 +
                              1,
                              12,
                           ) | 0;
                     }
                     prevCode = code;
                     decodedLength += currentSequenceLength;
                     if (estimatedDecodedSize < decodedLength) {
                        do {
                           estimatedDecodedSize += decodedSizeDelta;
                        } while (estimatedDecodedSize < decodedLength);
                        buffer = this.ensureBuffer(
                           this.bufferLength + estimatedDecodedSize,
                        );
                     }
                     for (j = 0; j < currentSequenceLength; j++) {
                        buffer[currentBufferLength++] = currentSequence[j];
                     }
                  }
                  lzwState.nextCode = nextCode;
                  lzwState.codeLength = codeLength;
                  lzwState.prevCode = prevCode;
                  lzwState.currentSequenceLength = currentSequenceLength;
                  this.bufferLength = currentBufferLength;
               },
            },
         ]);
      })(DecodeStream); // CONCATENATED MODULE: ./src/core/predictor_stream.js
      var PredictorStream = /*#__PURE__*/ (function (_DecodeStream0) {
         function PredictorStream(str, maybeLength, params) {
            var _this25;
            _classCallCheck(this, PredictorStream);
            _this25 = _callSuper(this, PredictorStream, [maybeLength]);
            if (!(params instanceof Dict)) {
               return _possibleConstructorReturn(_this25, str);
            }
            var predictor = (_this25.predictor = params.get("Predictor") || 1);
            if (predictor <= 1) {
               return _possibleConstructorReturn(_this25, str);
            }
            if (predictor !== 2 && (predictor < 10 || predictor > 15)) {
               throw new FormatError("Unsupported predictor: ".concat(predictor));
            }
            _this25.readBlock =
               predictor === 2 ? _this25.readBlockTiff : _this25.readBlockPng;
            _this25.str = str;
            _this25.dict = str.dict;
            var colors = (_this25.colors = params.get("Colors") || 1);
            var bits = (_this25.bits = params.get("BPC", "BitsPerComponent") || 8);
            var columns = (_this25.columns = params.get("Columns") || 1);
            _this25.pixBytes = (colors * bits + 7) >> 3;
            _this25.rowBytes = (columns * colors * bits + 7) >> 3;
            return _possibleConstructorReturn(_this25, _this25);
         }
         _inherits(PredictorStream, _DecodeStream0);
         return _createClass(PredictorStream, [
            {
               key: "readBlockTiff",
               value: function readBlockTiff() {
                  var rowBytes = this.rowBytes;
                  var bufferLength = this.bufferLength;
                  var buffer = this.ensureBuffer(bufferLength + rowBytes);
                  var bits = this.bits;
                  var colors = this.colors;
                  var rawBytes = this.str.getBytes(rowBytes);
                  this.eof = !rawBytes.length;
                  if (this.eof) {
                     return;
                  }
                  var inbuf = 0,
                     outbuf = 0;
                  var inbits = 0,
                     outbits = 0;
                  var pos = bufferLength;
                  var i;
                  if (bits === 1 && colors === 1) {
                     for (i = 0; i < rowBytes; ++i) {
                        var c = rawBytes[i] ^ inbuf;
                        c ^= c >> 1;
                        c ^= c >> 2;
                        c ^= c >> 4;
                        inbuf = (c & 1) << 7;
                        buffer[pos++] = c;
                     }
                  } else if (bits === 8) {
                     for (i = 0; i < colors; ++i) {
                        buffer[pos++] = rawBytes[i];
                     }
                     for (; i < rowBytes; ++i) {
                        buffer[pos] = buffer[pos - colors] + rawBytes[i];
                        pos++;
                     }
                  } else if (bits === 16) {
                     var bytesPerPixel = colors * 2;
                     for (i = 0; i < bytesPerPixel; ++i) {
                        buffer[pos++] = rawBytes[i];
                     }
                     for (; i < rowBytes; i += 2) {
                        var sum =
                           ((rawBytes[i] & 0xff) << 8) +
                           (rawBytes[i + 1] & 0xff) +
                           ((buffer[pos - bytesPerPixel] & 0xff) << 8) +
                           (buffer[pos - bytesPerPixel + 1] & 0xff);
                        buffer[pos++] = (sum >> 8) & 0xff;
                        buffer[pos++] = sum & 0xff;
                     }
                  } else {
                     var compArray = new Uint8Array(colors + 1);
                     var bitMask = (1 << bits) - 1;
                     var j = 0,
                        k = bufferLength;
                     var columns = this.columns;
                     for (i = 0; i < columns; ++i) {
                        for (var kk = 0; kk < colors; ++kk) {
                           if (inbits < bits) {
                              inbuf = (inbuf << 8) | (rawBytes[j++] & 0xff);
                              inbits += 8;
                           }
                           compArray[kk] =
                              (compArray[kk] + (inbuf >> (inbits - bits))) & bitMask;
                           inbits -= bits;
                           outbuf = (outbuf << bits) | compArray[kk];
                           outbits += bits;
                           if (outbits >= 8) {
                              buffer[k++] = (outbuf >> (outbits - 8)) & 0xff;
                              outbits -= 8;
                           }
                        }
                     }
                     if (outbits > 0) {
                        buffer[k++] =
                           (outbuf << (8 - outbits)) +
                           (inbuf & ((1 << (8 - outbits)) - 1));
                     }
                  }
                  this.bufferLength += rowBytes;
               },
            },
            {
               key: "readBlockPng",
               value: function readBlockPng() {
                  var rowBytes = this.rowBytes;
                  var pixBytes = this.pixBytes;
                  var predictor = this.str.getByte();
                  var rawBytes = this.str.getBytes(rowBytes);
                  this.eof = !rawBytes.length;
                  if (this.eof) {
                     return;
                  }
                  var bufferLength = this.bufferLength;
                  var buffer = this.ensureBuffer(bufferLength + rowBytes);
                  var prevRow = buffer.subarray(
                     bufferLength - rowBytes,
                     bufferLength,
                  );
                  if (prevRow.length === 0) {
                     prevRow = new Uint8Array(rowBytes);
                  }
                  var i,
                     j = bufferLength,
                     up,
                     c;
                  switch (predictor) {
                     case 0:
                        for (i = 0; i < rowBytes; ++i) {
                           buffer[j++] = rawBytes[i];
                        }
                        break;
                     case 1:
                        for (i = 0; i < pixBytes; ++i) {
                           buffer[j++] = rawBytes[i];
                        }
                        for (; i < rowBytes; ++i) {
                           buffer[j] = (buffer[j - pixBytes] + rawBytes[i]) & 0xff;
                           j++;
                        }
                        break;
                     case 2:
                        for (i = 0; i < rowBytes; ++i) {
                           buffer[j++] = (prevRow[i] + rawBytes[i]) & 0xff;
                        }
                        break;
                     case 3:
                        for (i = 0; i < pixBytes; ++i) {
                           buffer[j++] = (prevRow[i] >> 1) + rawBytes[i];
                        }
                        for (; i < rowBytes; ++i) {
                           buffer[j] =
                              (((prevRow[i] + buffer[j - pixBytes]) >> 1) + rawBytes[i]) &
                              0xff;
                           j++;
                        }
                        break;
                     case 4:
                        for (i = 0; i < pixBytes; ++i) {
                           up = prevRow[i];
                           c = rawBytes[i];
                           buffer[j++] = up + c;
                        }
                        for (; i < rowBytes; ++i) {
                           up = prevRow[i];
                           var upLeft = prevRow[i - pixBytes];
                           var left = buffer[j - pixBytes];
                           var p = left + up - upLeft;
                           var pa = p - left;
                           if (pa < 0) {
                              pa = -pa;
                           }
                           var pb = p - up;
                           if (pb < 0) {
                              pb = -pb;
                           }
                           var pc = p - upLeft;
                           if (pc < 0) {
                              pc = -pc;
                           }
                           c = rawBytes[i];
                           if (pa <= pb && pa <= pc) {
                              buffer[j++] = left + c;
                           } else if (pb <= pc) {
                              buffer[j++] = up + c;
                           } else {
                              buffer[j++] = upLeft + c;
                           }
                        }
                        break;
                     default:
                        throw new FormatError(
                           "Unsupported predictor: ".concat(predictor),
                        );
                  }
                  this.bufferLength += rowBytes;
               },
            },
         ]);
      })(DecodeStream); // CONCATENATED MODULE: ./src/core/run_length_stream.js
      var RunLengthStream = /*#__PURE__*/ (function (_DecodeStream1) {
         function RunLengthStream(str, maybeLength) {
            var _this26;
            _classCallCheck(this, RunLengthStream);
            _this26 = _callSuper(this, RunLengthStream, [maybeLength]);
            _this26.str = str;
            _this26.dict = str.dict;
            return _this26;
         }
         _inherits(RunLengthStream, _DecodeStream1);
         return _createClass(RunLengthStream, [
            {
               key: "readBlock",
               value: function readBlock() {
                  var repeatHeader = this.str.getBytes(2);
                  if (
                     !repeatHeader ||
                     repeatHeader.length < 2 ||
                     repeatHeader[0] === 128
                  ) {
                     this.eof = true;
                     return;
                  }
                  var buffer;
                  var bufferLength = this.bufferLength;
                  var n = repeatHeader[0];
                  if (n < 128) {
                     buffer = this.ensureBuffer(bufferLength + n + 1);
                     buffer[bufferLength++] = repeatHeader[1];
                     if (n > 0) {
                        var source = this.str.getBytes(n);
                        buffer.set(source, bufferLength);
                        bufferLength += n;
                     }
                  } else {
                     n = 257 - n;
                     var b = repeatHeader[1];
                     buffer = this.ensureBuffer(bufferLength + n + 1);
                     for (var i = 0; i < n; i++) {
                        buffer[bufferLength++] = b;
                     }
                  }
                  this.bufferLength = bufferLength;
               },
            },
         ]);
      })(DecodeStream); // CONCATENATED MODULE: ./src/core/parser.js
      var MAX_LENGTH_TO_CACHE = 1000;
      function getInlineImageCacheKey(bytes) {
         var strBuf = [],
            ii = bytes.length;
         var i = 0;
         while (i < ii - 1) {
            strBuf.push((bytes[i++] << 8) | bytes[i++]);
         }
         if (i < ii) {
            strBuf.push(bytes[i]);
         }
         return ii + "_" + String.fromCharCode.apply(null, strBuf);
      }
      var Parser = /*#__PURE__*/ (function () {
         function Parser(_ref21) {
            var lexer = _ref21.lexer,
               xref = _ref21.xref,
               _ref21$allowStreams = _ref21.allowStreams,
               allowStreams =
                  _ref21$allowStreams === void 0 ? false : _ref21$allowStreams,
               _ref21$recoveryMode = _ref21.recoveryMode,
               recoveryMode =
                  _ref21$recoveryMode === void 0 ? false : _ref21$recoveryMode;
            _classCallCheck(this, Parser);
            this.lexer = lexer;
            this.xref = xref;
            this.allowStreams = allowStreams;
            this.recoveryMode = recoveryMode;
            this.imageCache = Object.create(null);
            this._imageId = 0;
            this.refill();
         }
         return _createClass(Parser, [
            {
               key: "refill",
               value: function refill() {
                  this.buf1 = this.lexer.getObj();
                  this.buf2 = this.lexer.getObj();
               },
            },
            {
               key: "shift",
               value: function shift() {
                  if (this.buf2 instanceof Cmd && this.buf2.cmd === "ID") {
                     this.buf1 = this.buf2;
                     this.buf2 = null;
                  } else {
                     this.buf1 = this.buf2;
                     this.buf2 = this.lexer.getObj();
                  }
               },
            },
            {
               key: "tryShift",
               value: function tryShift() {
                  try {
                     this.shift();
                     return true;
                  } catch (e) {
                     if (e instanceof MissingDataException) {
                        throw e;
                     }
                     return false;
                  }
               },
            },
            {
               key: "getObj",
               value: function getObj() {
                  var cipherTransform =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : null;
                  var buf1 = this.buf1;
                  this.shift();
                  if (buf1 instanceof Cmd) {
                     switch (buf1.cmd) {
                        case "BI":
                           return this.makeInlineImage(cipherTransform);
                        case "[":
                           var array = [];
                           while (!isCmd(this.buf1, "]") && this.buf1 !== EOF) {
                              array.push(this.getObj(cipherTransform));
                           }
                           if (this.buf1 === EOF) {
                              if (this.recoveryMode) {
                                 return array;
                              }
                              throw new ParserEOFException("End of file inside array.");
                           }
                           this.shift();
                           return array;
                        case "<<":
                           var dict = new Dict(this.xref);
                           while (!isCmd(this.buf1, ">>") && this.buf1 !== EOF) {
                              if (!(this.buf1 instanceof Name)) {
                                 info("Malformed dictionary: key must be a name object");
                                 this.shift();
                                 continue;
                              }
                              var key = this.buf1.name;
                              this.shift();
                              if (this.buf1 === EOF) {
                                 break;
                              }
                              dict.set(key, this.getObj(cipherTransform));
                           }
                           if (this.buf1 === EOF) {
                              if (this.recoveryMode) {
                                 return dict;
                              }
                              throw new ParserEOFException(
                                 "End of file inside dictionary.",
                              );
                           }
                           if (isCmd(this.buf2, "stream")) {
                              return this.allowStreams
                                 ? this.makeStream(dict, cipherTransform)
                                 : dict;
                           }
                           this.shift();
                           return dict;
                        default:
                           return buf1;
                     }
                  }
                  if (Number.isInteger(buf1)) {
                     if (Number.isInteger(this.buf1) && isCmd(this.buf2, "R")) {
                        var ref = Ref.get(buf1, this.buf1);
                        this.shift();
                        this.shift();
                        return ref;
                     }
                     return buf1;
                  }
                  if (typeof buf1 === "string") {
                     if (cipherTransform) {
                        return cipherTransform.decryptString(buf1);
                     }
                     return buf1;
                  }
                  return buf1;
               },
            },
            {
               key: "findDefaultInlineStreamEnd",
               value: function findDefaultInlineStreamEnd(stream) {
                  var E = 0x45,
                     I = 0x49,
                     SPACE = 0x20,
                     LF = 0xa,
                     CR = 0xd,
                     NUL = 0x0;
                  var knownCommands = this.lexer.knownCommands,
                     startPos = stream.pos,
                     n = 15;
                  var state = 0,
                     ch,
                     maybeEIPos;
                  while ((ch = stream.getByte()) !== -1) {
                     if (state === 0) {
                        state = ch === E ? 1 : 0;
                     } else if (state === 1) {
                        state = ch === I ? 2 : 0;
                     } else {
                        if (ch === SPACE || ch === LF || ch === CR) {
                           maybeEIPos = stream.pos;
                           var followingBytes = stream.peekBytes(n);
                           var ii = followingBytes.length;
                           if (ii === 0) {
                              break;
                           }
                           for (var i = 0; i < ii; i++) {
                              ch = followingBytes[i];
                              if (ch === NUL && followingBytes[i + 1] !== NUL) {
                                 continue;
                              }
                              if (ch !== LF && ch !== CR && (ch < SPACE || ch > 0x7f)) {
                                 state = 0;
                                 break;
                              }
                           }
                           if (state !== 2) {
                              continue;
                           }
                           if (!knownCommands) {
                              warn(
                                 "findDefaultInlineStreamEnd - `lexer.knownCommands` is undefined.",
                              );
                              continue;
                           }
                           var tmpLexer = new Lexer(
                              new Stream(followingBytes.slice()),
                              knownCommands,
                           );
                           tmpLexer._hexStringWarn = function () {};
                           var numArgs = 0;
                           while (true) {
                              var nextObj = tmpLexer.getObj();
                              if (nextObj === EOF) {
                                 state = 0;
                                 break;
                              }
                              if (nextObj instanceof Cmd) {
                                 var knownCommand = knownCommands[nextObj.cmd];
                                 if (!knownCommand) {
                                    state = 0;
                                    break;
                                 } else if (
                                    knownCommand.variableArgs
                                       ? numArgs <= knownCommand.numArgs
                                       : numArgs === knownCommand.numArgs
                                 ) {
                                    break;
                                 }
                                 numArgs = 0;
                                 continue;
                              }
                              numArgs++;
                           }
                           if (state === 2) {
                              break;
                           }
                        } else {
                           state = 0;
                        }
                     }
                  }
                  if (ch === -1) {
                     warn(
                        "findDefaultInlineStreamEnd: " +
                        "Reached the end of the stream without finding a valid EI marker",
                     );
                     if (maybeEIPos) {
                        warn(
                           '... trying to recover by using the last "EI" occurrence.',
                        );
                        stream.skip(-(stream.pos - maybeEIPos));
                     }
                  }
                  var endOffset = 4;
                  stream.skip(-endOffset);
                  ch = stream.peekByte();
                  stream.skip(endOffset);
                  if (!isWhiteSpace(ch)) {
                     endOffset--;
                  }
                  return stream.pos - endOffset - startPos;
               },
            },
            {
               key: "findDCTDecodeInlineStreamEnd",
               value: function findDCTDecodeInlineStreamEnd(stream) {
                  var startPos = stream.pos;
                  var foundEOI = false,
                     b,
                     markerLength;
                  while ((b = stream.getByte()) !== -1) {
                     if (b !== 0xff) {
                        continue;
                     }
                     switch (stream.getByte()) {
                        case 0x00:
                           break;
                        case 0xff:
                           stream.skip(-1);
                           break;
                        case 0xd9:
                           foundEOI = true;
                           break;
                        case 0xc0:
                        case 0xc1:
                        case 0xc2:
                        case 0xc3:
                        case 0xc5:
                        case 0xc6:
                        case 0xc7:
                        case 0xc9:
                        case 0xca:
                        case 0xcb:
                        case 0xcd:
                        case 0xce:
                        case 0xcf:
                        case 0xc4:
                        case 0xcc:
                        case 0xda:
                        case 0xdb:
                        case 0xdc:
                        case 0xdd:
                        case 0xde:
                        case 0xdf:
                        case 0xe0:
                        case 0xe1:
                        case 0xe2:
                        case 0xe3:
                        case 0xe4:
                        case 0xe5:
                        case 0xe6:
                        case 0xe7:
                        case 0xe8:
                        case 0xe9:
                        case 0xea:
                        case 0xeb:
                        case 0xec:
                        case 0xed:
                        case 0xee:
                        case 0xef:
                        case 0xfe:
                           markerLength = stream.getUint16();
                           if (markerLength > 2) {
                              stream.skip(markerLength - 2);
                           } else {
                              stream.skip(-2);
                           }
                           break;
                     }
                     if (foundEOI) {
                        break;
                     }
                  }
                  var length = stream.pos - startPos;
                  if (b === -1) {
                     warn(
                        "Inline DCTDecode image stream: " +
                        "EOI marker not found, searching for /EI/ instead.",
                     );
                     stream.skip(-length);
                     return this.findDefaultInlineStreamEnd(stream);
                  }
                  this.inlineStreamSkipEI(stream);
                  return length;
               },
            },
            {
               key: "findASCII85DecodeInlineStreamEnd",
               value: function findASCII85DecodeInlineStreamEnd(stream) {
                  var TILDE = 0x7e,
                     GT = 0x3e;
                  var startPos = stream.pos;
                  var ch;
                  while ((ch = stream.getByte()) !== -1) {
                     if (ch === TILDE) {
                        var tildePos = stream.pos;
                        ch = stream.peekByte();
                        while (isWhiteSpace(ch)) {
                           stream.skip();
                           ch = stream.peekByte();
                        }
                        if (ch === GT) {
                           stream.skip();
                           break;
                        }
                        if (stream.pos > tildePos) {
                           var maybeEI = stream.peekBytes(2);
                           if (maybeEI[0] === 0x45 && maybeEI[1] === 0x49) {
                              break;
                           }
                        }
                     }
                  }
                  var length = stream.pos - startPos;
                  if (ch === -1) {
                     warn(
                        "Inline ASCII85Decode image stream: " +
                        "EOD marker not found, searching for /EI/ instead.",
                     );
                     stream.skip(-length);
                     return this.findDefaultInlineStreamEnd(stream);
                  }
                  this.inlineStreamSkipEI(stream);
                  return length;
               },
            },
            {
               key: "findASCIIHexDecodeInlineStreamEnd",
               value: function findASCIIHexDecodeInlineStreamEnd(stream) {
                  var GT = 0x3e;
                  var startPos = stream.pos;
                  var ch;
                  while ((ch = stream.getByte()) !== -1) {
                     if (ch === GT) {
                        break;
                     }
                  }
                  var length = stream.pos - startPos;
                  if (ch === -1) {
                     warn(
                        "Inline ASCIIHexDecode image stream: " +
                        "EOD marker not found, searching for /EI/ instead.",
                     );
                     stream.skip(-length);
                     return this.findDefaultInlineStreamEnd(stream);
                  }
                  this.inlineStreamSkipEI(stream);
                  return length;
               },
            },
            {
               key: "inlineStreamSkipEI",
               value: function inlineStreamSkipEI(stream) {
                  var E = 0x45,
                     I = 0x49;
                  var state = 0,
                     ch;
                  while ((ch = stream.getByte()) !== -1) {
                     if (state === 0) {
                        state = ch === E ? 1 : 0;
                     } else if (state === 1) {
                        state = ch === I ? 2 : 0;
                     } else if (state === 2) {
                        break;
                     }
                  }
               },
            },
            {
               key: "makeInlineImage",
               value: function makeInlineImage(cipherTransform) {
                  var lexer = this.lexer;
                  var stream = lexer.stream;
                  var dictMap = Object.create(null);
                  var dictLength;
                  while (!isCmd(this.buf1, "ID") && this.buf1 !== EOF) {
                     if (!(this.buf1 instanceof Name)) {
                        throw new FormatError("Dictionary key must be a name object");
                     }
                     var key = this.buf1.name;
                     this.shift();
                     if (this.buf1 === EOF) {
                        break;
                     }
                     dictMap[key] = this.getObj(cipherTransform);
                  }
                  if (lexer.beginInlineImagePos !== -1) {
                     dictLength = stream.pos - lexer.beginInlineImagePos;
                  }
                  var filter = this.xref.fetchIfRef(dictMap.F || dictMap.Filter);
                  var filterName;
                  if (filter instanceof Name) {
                     filterName = filter.name;
                  } else if (Array.isArray(filter)) {
                     var filterZero = this.xref.fetchIfRef(filter[0]);
                     if (filterZero instanceof Name) {
                        filterName = filterZero.name;
                     }
                  }
                  var startPos = stream.pos;
                  var length;
                  switch (filterName) {
                     case "DCT":
                     case "DCTDecode":
                        length = this.findDCTDecodeInlineStreamEnd(stream);
                        break;
                     case "A85":
                     case "ASCII85Decode":
                        length = this.findASCII85DecodeInlineStreamEnd(stream);
                        break;
                     case "AHx":
                     case "ASCIIHexDecode":
                        length = this.findASCIIHexDecodeInlineStreamEnd(stream);
                        break;
                     default:
                        length = this.findDefaultInlineStreamEnd(stream);
                  }
                  var cacheKey;
                  if (length < MAX_LENGTH_TO_CACHE && dictLength > 0) {
                     var initialStreamPos = stream.pos;
                     stream.pos = lexer.beginInlineImagePos;
                     cacheKey = getInlineImageCacheKey(
                        stream.getBytes(dictLength + length),
                     );
                     stream.pos = initialStreamPos;
                     var cacheEntry = this.imageCache[cacheKey];
                     if (cacheEntry !== undefined) {
                        this.buf2 = Cmd.get("EI");
                        this.shift();
                        cacheEntry.reset();
                        return cacheEntry;
                     }
                  }
                  var dict = new Dict(this.xref);
                  for (var _key3 in dictMap) {
                     dict.set(_key3, dictMap[_key3]);
                  }
                  var imageStream = stream.makeSubStream(startPos, length, dict);
                  if (cipherTransform) {
                     imageStream = cipherTransform.createStream(imageStream, length);
                  }
                  imageStream = this.filter(imageStream, dict, length);
                  imageStream.dict = dict;
                  if (cacheKey !== undefined) {
                     imageStream.cacheKey = "inline_img_".concat(++this._imageId);
                     this.imageCache[cacheKey] = imageStream;
                  }
                  this.buf2 = Cmd.get("EI");
                  this.shift();
                  return imageStream;
               },
            },
            {
               key: "_findStreamLength",
               value: function _findStreamLength(startPos, signature) {
                  var stream = this.lexer.stream;
                  stream.pos = startPos;
                  var SCAN_BLOCK_LENGTH = 2048;
                  var signatureLength = signature.length;
                  while (stream.pos < stream.end) {
                     var scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);
                     var scanLength = scanBytes.length - signatureLength;
                     if (scanLength <= 0) {
                        break;
                     }
                     var pos = 0;
                     while (pos < scanLength) {
                        var j = 0;
                        while (
                           j < signatureLength &&
                           scanBytes[pos + j] === signature[j]
                           ) {
                           j++;
                        }
                        if (j >= signatureLength) {
                           stream.pos += pos;
                           return stream.pos - startPos;
                        }
                        pos++;
                     }
                     stream.pos += scanLength;
                  }
                  return -1;
               },
            },
            {
               key: "makeStream",
               value: function makeStream(dict, cipherTransform) {
                  var lexer = this.lexer;
                  var stream = lexer.stream;
                  lexer.skipToNextLine();
                  var startPos = stream.pos - 1;
                  var length = dict.get("Length");
                  if (!Number.isInteger(length)) {
                     info(
                        'Bad length "'.concat(
                           length && length.toString(),
                           '" in stream.',
                        ),
                     );
                     length = 0;
                  }
                  stream.pos = startPos + length;
                  lexer.nextChar();
                  if (this.tryShift() && isCmd(this.buf2, "endstream")) {
                     this.shift();
                  } else {
                     var ENDSTREAM_SIGNATURE = new Uint8Array([
                        0x65, 0x6e, 0x64, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
                     ]);
                     var actualLength = this._findStreamLength(
                        startPos,
                        ENDSTREAM_SIGNATURE,
                     );
                     if (actualLength < 0) {
                        var MAX_TRUNCATION = 1;
                        for (var i = 1; i <= MAX_TRUNCATION; i++) {
                           var end = ENDSTREAM_SIGNATURE.length - i;
                           var TRUNCATED_SIGNATURE = ENDSTREAM_SIGNATURE.slice(0, end);
                           var maybeLength = this._findStreamLength(
                              startPos,
                              TRUNCATED_SIGNATURE,
                           );
                           if (maybeLength >= 0) {
                              var lastByte = stream.peekBytes(end + 1)[end];
                              if (!isWhiteSpace(lastByte)) {
                                 break;
                              }
                              info(
                                 'Found "'.concat(
                                    bytesToString(TRUNCATED_SIGNATURE),
                                    '" when ',
                                 ) + "searching for endstream command.",
                              );
                              actualLength = maybeLength;
                              break;
                           }
                        }
                        if (actualLength < 0) {
                           throw new FormatError("Missing endstream command.");
                        }
                     }
                     length = actualLength;
                     lexer.nextChar();
                     this.shift();
                     this.shift();
                  }
                  this.shift();
                  stream = stream.makeSubStream(startPos, length, dict);
                  if (cipherTransform) {
                     stream = cipherTransform.createStream(stream, length);
                  }
                  stream = this.filter(stream, dict, length);
                  stream.dict = dict;
                  return stream;
               },
            },
            {
               key: "filter",
               value: function filter(stream, dict, length) {
                  var filter = dict.get("F", "Filter");
                  var params = dict.get("DP", "DecodeParms");
                  if (filter instanceof Name) {
                     if (Array.isArray(params)) {
                        warn(
                           "/DecodeParms should not be an Array, when /Filter is a Name.",
                        );
                     }
                     return this.makeFilter(stream, filter.name, length, params);
                  }
                  var maybeLength = length;
                  if (Array.isArray(filter)) {
                     var filterArray = filter;
                     var paramsArray = params;
                     for (var i = 0, ii = filterArray.length; i < ii; ++i) {
                        filter = this.xref.fetchIfRef(filterArray[i]);
                        if (!(filter instanceof Name)) {
                           throw new FormatError(
                              'Bad filter name "'.concat(filter, '"'),
                           );
                        }
                        params = null;
                        if (Array.isArray(paramsArray) && i in paramsArray) {
                           params = this.xref.fetchIfRef(paramsArray[i]);
                        }
                        stream = this.makeFilter(
                           stream,
                           filter.name,
                           maybeLength,
                           params,
                        );
                        maybeLength = null;
                     }
                  }
                  return stream;
               },
            },
            {
               key: "makeFilter",
               value: function makeFilter(stream, name, maybeLength, params) {
                  if (maybeLength === 0) {
                     warn('Empty "'.concat(name, '" stream.'));
                     return new NullStream();
                  }
                  try {
                     switch (name) {
                        case "Fl":
                        case "FlateDecode":
                           if (params) {
                              return new PredictorStream(
                                 new FlateStream(stream, maybeLength),
                                 maybeLength,
                                 params,
                              );
                           }
                           return new FlateStream(stream, maybeLength);
                        case "LZW":
                        case "LZWDecode":
                           var earlyChange = 1;
                           if (params) {
                              if (params.has("EarlyChange")) {
                                 earlyChange = params.get("EarlyChange");
                              }
                              return new PredictorStream(
                                 new LZWStream(stream, maybeLength, earlyChange),
                                 maybeLength,
                                 params,
                              );
                           }
                           return new LZWStream(stream, maybeLength, earlyChange);
                        case "DCT":
                        case "DCTDecode":
                           return new JpegStream(stream, maybeLength, params);
                        case "JPX":
                        case "JPXDecode":
                           return new JpxStream(stream, maybeLength, params);
                        case "A85":
                        case "ASCII85Decode":
                           return new Ascii85Stream(stream, maybeLength);
                        case "AHx":
                        case "ASCIIHexDecode":
                           return new AsciiHexStream(stream, maybeLength);
                        case "CCF":
                        case "CCITTFaxDecode":
                           return new CCITTFaxStream(stream, maybeLength, params);
                        case "RL":
                        case "RunLengthDecode":
                           return new RunLengthStream(stream, maybeLength);
                        case "JBIG2Decode":
                           return new Jbig2Stream(stream, maybeLength, params);
                     }
                     warn('Filter "'.concat(name, '" is not supported.'));
                     return stream;
                  } catch (ex) {
                     if (ex instanceof MissingDataException) {
                        throw ex;
                     }
                     warn('Invalid stream: "'.concat(ex, '"'));
                     return new NullStream();
                  }
               },
            },
         ]);
      })();
      var specialChars = [
         1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,
         2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0,
      ];
      function toHexDigit(ch) {
         if (ch >= 0x30 && ch <= 0x39) {
            return ch & 0x0f;
         }
         if ((ch >= 0x41 && ch <= 0x46) || (ch >= 0x61 && ch <= 0x66)) {
            return (ch & 0x0f) + 9;
         }
         return -1;
      }
      var Lexer = /*#__PURE__*/ (function () {
         function Lexer(stream) {
            var knownCommands =
               arguments.length > 1 && arguments[1] !== undefined
                  ? arguments[1]
                  : null;
            _classCallCheck(this, Lexer);
            this.stream = stream;
            this.nextChar();
            this.strBuf = [];
            this.knownCommands = knownCommands;
            this._hexStringNumWarn = 0;
            this.beginInlineImagePos = -1;
         }
         return _createClass(Lexer, [
            {
               key: "nextChar",
               value: function nextChar() {
                  return (this.currentChar = this.stream.getByte());
               },
            },
            {
               key: "peekChar",
               value: function peekChar() {
                  return this.stream.peekByte();
               },
            },
            {
               key: "getNumber",
               value: function getNumber() {
                  var ch = this.currentChar;
                  var eNotation = false;
                  var divideBy = 0;
                  var sign = 1;
                  if (ch === 0x2d) {
                     sign = -1;
                     ch = this.nextChar();
                     if (ch === 0x2d) {
                        ch = this.nextChar();
                     }
                  } else if (ch === 0x2b) {
                     ch = this.nextChar();
                  }
                  if (ch === 0x0a || ch === 0x0d) {
                     do {
                        ch = this.nextChar();
                     } while (ch === 0x0a || ch === 0x0d);
                  }
                  if (ch === 0x2e) {
                     divideBy = 10;
                     ch = this.nextChar();
                  }
                  if (ch < 0x30 || ch > 0x39) {
                     var msg = "Invalid number: "
                        .concat(String.fromCharCode(ch), " (charCode ")
                        .concat(ch, ")");
                     if (isWhiteSpace(ch) || ch === -1) {
                        info('Lexer.getNumber - "'.concat(msg, '".'));
                        return 0;
                     }
                     throw new FormatError(msg);
                  }
                  var baseValue = ch - 0x30;
                  var powerValue = 0;
                  var powerValueSign = 1;
                  while ((ch = this.nextChar()) >= 0) {
                     if (ch >= 0x30 && ch <= 0x39) {
                        var currentDigit = ch - 0x30;
                        if (eNotation) {
                           powerValue = powerValue * 10 + currentDigit;
                        } else {
                           if (divideBy !== 0) {
                              divideBy *= 10;
                           }
                           baseValue = baseValue * 10 + currentDigit;
                        }
                     } else if (ch === 0x2e) {
                        if (divideBy === 0) {
                           divideBy = 1;
                        } else {
                           break;
                        }
                     } else if (ch === 0x2d) {
                        warn("Badly formatted number: minus sign in the middle");
                     } else if (ch === 0x45 || ch === 0x65) {
                        ch = this.peekChar();
                        if (ch === 0x2b || ch === 0x2d) {
                           powerValueSign = ch === 0x2d ? -1 : 1;
                           this.nextChar();
                        } else if (ch < 0x30 || ch > 0x39) {
                           break;
                        }
                        eNotation = true;
                     } else {
                        break;
                     }
                  }
                  if (divideBy !== 0) {
                     baseValue /= divideBy;
                  }
                  if (eNotation) {
                     baseValue *= Math.pow(10, powerValueSign * powerValue);
                  }
                  return sign * baseValue;
               },
            },
            {
               key: "getString",
               value: function getString() {
                  var numParen = 1;
                  var done = false;
                  var strBuf = this.strBuf;
                  strBuf.length = 0;
                  var ch = this.nextChar();
                  while (true) {
                     var charBuffered = false;
                     switch (ch | 0) {
                        case -1:
                           warn("Unterminated string");
                           done = true;
                           break;
                        case 0x28:
                           ++numParen;
                           strBuf.push("(");
                           break;
                        case 0x29:
                           if (--numParen === 0) {
                              this.nextChar();
                              done = true;
                           } else {
                              strBuf.push(")");
                           }
                           break;
                        case 0x5c:
                           ch = this.nextChar();
                           switch (ch) {
                              case -1:
                                 warn("Unterminated string");
                                 done = true;
                                 break;
                              case 0x6e:
                                 strBuf.push("\n");
                                 break;
                              case 0x72:
                                 strBuf.push("\r");
                                 break;
                              case 0x74:
                                 strBuf.push("\t");
                                 break;
                              case 0x62:
                                 strBuf.push("\b");
                                 break;
                              case 0x66:
                                 strBuf.push("\f");
                                 break;
                              case 0x5c:
                              case 0x28:
                              case 0x29:
                                 strBuf.push(String.fromCharCode(ch));
                                 break;
                              case 0x30:
                              case 0x31:
                              case 0x32:
                              case 0x33:
                              case 0x34:
                              case 0x35:
                              case 0x36:
                              case 0x37:
                                 var x = ch & 0x0f;
                                 ch = this.nextChar();
                                 charBuffered = true;
                                 if (ch >= 0x30 && ch <= 0x37) {
                                    x = (x << 3) + (ch & 0x0f);
                                    ch = this.nextChar();
                                    if (ch >= 0x30 && ch <= 0x37) {
                                       charBuffered = false;
                                       x = (x << 3) + (ch & 0x0f);
                                    }
                                 }
                                 strBuf.push(String.fromCharCode(x));
                                 break;
                              case 0x0d:
                                 if (this.peekChar() === 0x0a) {
                                    this.nextChar();
                                 }
                                 break;
                              case 0x0a:
                                 break;
                              default:
                                 strBuf.push(String.fromCharCode(ch));
                                 break;
                           }
                           break;
                        default:
                           strBuf.push(String.fromCharCode(ch));
                           break;
                     }
                     if (done) {
                        break;
                     }
                     if (!charBuffered) {
                        ch = this.nextChar();
                     }
                  }
                  return strBuf.join("");
               },
            },
            {
               key: "getName",
               value: function getName() {
                  var ch, previousCh;
                  var strBuf = this.strBuf;
                  strBuf.length = 0;
                  while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {
                     if (ch === 0x23) {
                        ch = this.nextChar();
                        if (specialChars[ch]) {
                           warn(
                              "Lexer_getName: " +
                              "NUMBER SIGN (#) should be followed by a hexadecimal number.",
                           );
                           strBuf.push("#");
                           break;
                        }
                        var x = toHexDigit(ch);
                        if (x !== -1) {
                           previousCh = ch;
                           ch = this.nextChar();
                           var x2 = toHexDigit(ch);
                           if (x2 === -1) {
                              warn(
                                 "Lexer_getName: Illegal digit (".concat(
                                    String.fromCharCode(ch),
                                    ") ",
                                 ) + "in hexadecimal number.",
                              );
                              strBuf.push("#", String.fromCharCode(previousCh));
                              if (specialChars[ch]) {
                                 break;
                              }
                              strBuf.push(String.fromCharCode(ch));
                              continue;
                           }
                           strBuf.push(String.fromCharCode((x << 4) | x2));
                        } else {
                           strBuf.push("#", String.fromCharCode(ch));
                        }
                     } else {
                        strBuf.push(String.fromCharCode(ch));
                     }
                  }
                  if (strBuf.length > 127) {
                     warn(
                        "Name token is longer than allowed by the spec: ".concat(
                           strBuf.length,
                        ),
                     );
                  }
                  return Name.get(strBuf.join(""));
               },
            },
            {
               key: "_hexStringWarn",
               value: function _hexStringWarn(ch) {
                  var MAX_HEX_STRING_NUM_WARN = 5;
                  if (this._hexStringNumWarn++ === MAX_HEX_STRING_NUM_WARN) {
                     warn("getHexString - ignoring additional invalid characters.");
                     return;
                  }
                  if (this._hexStringNumWarn > MAX_HEX_STRING_NUM_WARN) {
                     return;
                  }
                  warn("getHexString - ignoring invalid character: ".concat(ch));
               },
            },
            {
               key: "getHexString",
               value: function getHexString() {
                  var strBuf = this.strBuf;
                  strBuf.length = 0;
                  var ch = this.currentChar;
                  var isFirstHex = true;
                  var firstDigit, secondDigit;
                  this._hexStringNumWarn = 0;
                  while (true) {
                     if (ch < 0) {
                        warn("Unterminated hex string");
                        break;
                     } else if (ch === 0x3e) {
                        this.nextChar();
                        break;
                     } else if (specialChars[ch] === 1) {
                        ch = this.nextChar();
                        continue;
                     } else {
                        if (isFirstHex) {
                           firstDigit = toHexDigit(ch);
                           if (firstDigit === -1) {
                              this._hexStringWarn(ch);
                              ch = this.nextChar();
                              continue;
                           }
                        } else {
                           secondDigit = toHexDigit(ch);
                           if (secondDigit === -1) {
                              this._hexStringWarn(ch);
                              ch = this.nextChar();
                              continue;
                           }
                           strBuf.push(
                              String.fromCharCode((firstDigit << 4) | secondDigit),
                           );
                        }
                        isFirstHex = !isFirstHex;
                        ch = this.nextChar();
                     }
                  }
                  return strBuf.join("");
               },
            },
            {
               key: "getObj",
               value: function getObj() {
                  var comment = false;
                  var ch = this.currentChar;
                  while (true) {
                     if (ch < 0) {
                        return EOF;
                     }
                     if (comment) {
                        if (ch === 0x0a || ch === 0x0d) {
                           comment = false;
                        }
                     } else if (ch === 0x25) {
                        comment = true;
                     } else if (specialChars[ch] !== 1) {
                        break;
                     }
                     ch = this.nextChar();
                  }
                  switch (ch | 0) {
                     case 0x30:
                     case 0x31:
                     case 0x32:
                     case 0x33:
                     case 0x34:
                     case 0x35:
                     case 0x36:
                     case 0x37:
                     case 0x38:
                     case 0x39:
                     case 0x2b:
                     case 0x2d:
                     case 0x2e:
                        return this.getNumber();
                     case 0x28:
                        return this.getString();
                     case 0x2f:
                        return this.getName();
                     case 0x5b:
                        this.nextChar();
                        return Cmd.get("[");
                     case 0x5d:
                        this.nextChar();
                        return Cmd.get("]");
                     case 0x3c:
                        ch = this.nextChar();
                        if (ch === 0x3c) {
                           this.nextChar();
                           return Cmd.get("<<");
                        }
                        return this.getHexString();
                     case 0x3e:
                        ch = this.nextChar();
                        if (ch === 0x3e) {
                           this.nextChar();
                           return Cmd.get(">>");
                        }
                        return Cmd.get(">");
                     case 0x7b:
                        this.nextChar();
                        return Cmd.get("{");
                     case 0x7d:
                        this.nextChar();
                        return Cmd.get("}");
                     case 0x29:
                        this.nextChar();
                        throw new FormatError("Illegal character: ".concat(ch));
                  }
                  var str = String.fromCharCode(ch);
                  if (ch < 0x20 || ch > 0x7f) {
                     var nextCh = this.peekChar();
                     if (nextCh >= 0x20 && nextCh <= 0x7f) {
                        this.nextChar();
                        return Cmd.get(str);
                     }
                  }
                  var knownCommands = this.knownCommands;
                  var knownCommandFound =
                     (knownCommands === null || knownCommands === void 0
                        ? void 0
                        : knownCommands[str]) !== undefined;
                  while ((ch = this.nextChar()) >= 0 && !specialChars[ch]) {
                     var possibleCommand = str + String.fromCharCode(ch);
                     if (
                        knownCommandFound &&
                        knownCommands[possibleCommand] === undefined
                     ) {
                        break;
                     }
                     if (str.length === 128) {
                        throw new FormatError(
                           "Command token too long: ".concat(str.length),
                        );
                     }
                     str = possibleCommand;
                     knownCommandFound =
                        (knownCommands === null || knownCommands === void 0
                           ? void 0
                           : knownCommands[str]) !== undefined;
                  }
                  if (str === "true") {
                     return true;
                  }
                  if (str === "false") {
                     return false;
                  }
                  if (str === "null") {
                     return null;
                  }
                  if (str === "BI") {
                     this.beginInlineImagePos = this.stream.pos;
                  }
                  return Cmd.get(str);
               },
            },
            {
               key: "skipToNextLine",
               value: function skipToNextLine() {
                  var ch = this.currentChar;
                  while (ch >= 0) {
                     if (ch === 0x0d) {
                        ch = this.nextChar();
                        if (ch === 0x0a) {
                           this.nextChar();
                        }
                        break;
                     } else if (ch === 0x0a) {
                        this.nextChar();
                        break;
                     }
                     ch = this.nextChar();
                  }
               },
            },
         ]);
      })();
      var Linearization = /*#__PURE__*/ (function () {
         function Linearization() {
            _classCallCheck(this, Linearization);
         }
         return _createClass(Linearization, null, [
            {
               key: "create",
               value: function create(stream) {
                  function getInt(linDict, name) {
                     var allowZeroValue =
                        arguments.length > 2 && arguments[2] !== undefined
                           ? arguments[2]
                           : false;
                     var obj = linDict.get(name);
                     if (
                        Number.isInteger(obj) &&
                        (allowZeroValue ? obj >= 0 : obj > 0)
                     ) {
                        return obj;
                     }
                     throw new Error(
                        'The "'.concat(name, '" parameter in the linearization ') +
                        "dictionary is invalid.",
                     );
                  }
                  function getHints(linDict) {
                     var hints = linDict.get("H");
                     var hintsLength;
                     if (
                        Array.isArray(hints) &&
                        ((hintsLength = hints.length) === 2 || hintsLength === 4)
                     ) {
                        for (var index = 0; index < hintsLength; index++) {
                           var hint = hints[index];
                           if (!(Number.isInteger(hint) && hint > 0)) {
                              throw new Error(
                                 "Hint (".concat(
                                    index,
                                    ") in the linearization dictionary is invalid.",
                                 ),
                              );
                           }
                        }
                        return hints;
                     }
                     throw new Error(
                        "Hint array in the linearization dictionary is invalid.",
                     );
                  }
                  var parser = new Parser({ lexer: new Lexer(stream), xref: null });
                  var obj1 = parser.getObj();
                  var obj2 = parser.getObj();
                  var obj3 = parser.getObj();
                  var linDict = parser.getObj();
                  var obj, length;
                  if (
                     !(
                        Number.isInteger(obj1) &&
                        Number.isInteger(obj2) &&
                        isCmd(obj3, "obj") &&
                        linDict instanceof Dict &&
                        typeof (obj = linDict.get("Linearized")) === "number" &&
                        obj > 0
                     )
                  ) {
                     return null;
                  } else if ((length = getInt(linDict, "L")) !== stream.length) {
                     throw new Error(
                        'The "L" parameter in the linearization dictionary ' +
                        "does not equal the stream length.",
                     );
                  }
                  return {
                     length: length,
                     hints: getHints(linDict),
                     objectNumberFirst: getInt(linDict, "O"),
                     endFirst: getInt(linDict, "E"),
                     numPages: getInt(linDict, "N"),
                     mainXRefEntriesOffset: getInt(linDict, "T"),
                     pageFirst: linDict.has("P") ? getInt(linDict, "P", true) : 0,
                  };
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/cmap.js
      var BUILT_IN_CMAPS = [
         "Adobe-GB1-UCS2",
         "Adobe-CNS1-UCS2",
         "Adobe-Japan1-UCS2",
         "Adobe-Korea1-UCS2",
         "78-EUC-H",
         "78-EUC-V",
         "78-H",
         "78-RKSJ-H",
         "78-RKSJ-V",
         "78-V",
         "78ms-RKSJ-H",
         "78ms-RKSJ-V",
         "83pv-RKSJ-H",
         "90ms-RKSJ-H",
         "90ms-RKSJ-V",
         "90msp-RKSJ-H",
         "90msp-RKSJ-V",
         "90pv-RKSJ-H",
         "90pv-RKSJ-V",
         "Add-H",
         "Add-RKSJ-H",
         "Add-RKSJ-V",
         "Add-V",
         "Adobe-CNS1-0",
         "Adobe-CNS1-1",
         "Adobe-CNS1-2",
         "Adobe-CNS1-3",
         "Adobe-CNS1-4",
         "Adobe-CNS1-5",
         "Adobe-CNS1-6",
         "Adobe-GB1-0",
         "Adobe-GB1-1",
         "Adobe-GB1-2",
         "Adobe-GB1-3",
         "Adobe-GB1-4",
         "Adobe-GB1-5",
         "Adobe-Japan1-0",
         "Adobe-Japan1-1",
         "Adobe-Japan1-2",
         "Adobe-Japan1-3",
         "Adobe-Japan1-4",
         "Adobe-Japan1-5",
         "Adobe-Japan1-6",
         "Adobe-Korea1-0",
         "Adobe-Korea1-1",
         "Adobe-Korea1-2",
         "B5-H",
         "B5-V",
         "B5pc-H",
         "B5pc-V",
         "CNS-EUC-H",
         "CNS-EUC-V",
         "CNS1-H",
         "CNS1-V",
         "CNS2-H",
         "CNS2-V",
         "ETHK-B5-H",
         "ETHK-B5-V",
         "ETen-B5-H",
         "ETen-B5-V",
         "ETenms-B5-H",
         "ETenms-B5-V",
         "EUC-H",
         "EUC-V",
         "Ext-H",
         "Ext-RKSJ-H",
         "Ext-RKSJ-V",
         "Ext-V",
         "GB-EUC-H",
         "GB-EUC-V",
         "GB-H",
         "GB-V",
         "GBK-EUC-H",
         "GBK-EUC-V",
         "GBK2K-H",
         "GBK2K-V",
         "GBKp-EUC-H",
         "GBKp-EUC-V",
         "GBT-EUC-H",
         "GBT-EUC-V",
         "GBT-H",
         "GBT-V",
         "GBTpc-EUC-H",
         "GBTpc-EUC-V",
         "GBpc-EUC-H",
         "GBpc-EUC-V",
         "H",
         "HKdla-B5-H",
         "HKdla-B5-V",
         "HKdlb-B5-H",
         "HKdlb-B5-V",
         "HKgccs-B5-H",
         "HKgccs-B5-V",
         "HKm314-B5-H",
         "HKm314-B5-V",
         "HKm471-B5-H",
         "HKm471-B5-V",
         "HKscs-B5-H",
         "HKscs-B5-V",
         "Hankaku",
         "Hiragana",
         "KSC-EUC-H",
         "KSC-EUC-V",
         "KSC-H",
         "KSC-Johab-H",
         "KSC-Johab-V",
         "KSC-V",
         "KSCms-UHC-H",
         "KSCms-UHC-HW-H",
         "KSCms-UHC-HW-V",
         "KSCms-UHC-V",
         "KSCpc-EUC-H",
         "KSCpc-EUC-V",
         "Katakana",
         "NWP-H",
         "NWP-V",
         "RKSJ-H",
         "RKSJ-V",
         "Roman",
         "UniCNS-UCS2-H",
         "UniCNS-UCS2-V",
         "UniCNS-UTF16-H",
         "UniCNS-UTF16-V",
         "UniCNS-UTF32-H",
         "UniCNS-UTF32-V",
         "UniCNS-UTF8-H",
         "UniCNS-UTF8-V",
         "UniGB-UCS2-H",
         "UniGB-UCS2-V",
         "UniGB-UTF16-H",
         "UniGB-UTF16-V",
         "UniGB-UTF32-H",
         "UniGB-UTF32-V",
         "UniGB-UTF8-H",
         "UniGB-UTF8-V",
         "UniJIS-UCS2-H",
         "UniJIS-UCS2-HW-H",
         "UniJIS-UCS2-HW-V",
         "UniJIS-UCS2-V",
         "UniJIS-UTF16-H",
         "UniJIS-UTF16-V",
         "UniJIS-UTF32-H",
         "UniJIS-UTF32-V",
         "UniJIS-UTF8-H",
         "UniJIS-UTF8-V",
         "UniJIS2004-UTF16-H",
         "UniJIS2004-UTF16-V",
         "UniJIS2004-UTF32-H",
         "UniJIS2004-UTF32-V",
         "UniJIS2004-UTF8-H",
         "UniJIS2004-UTF8-V",
         "UniJISPro-UCS2-HW-V",
         "UniJISPro-UCS2-V",
         "UniJISPro-UTF8-V",
         "UniJISX0213-UTF32-H",
         "UniJISX0213-UTF32-V",
         "UniJISX02132004-UTF32-H",
         "UniJISX02132004-UTF32-V",
         "UniKS-UCS2-H",
         "UniKS-UCS2-V",
         "UniKS-UTF16-H",
         "UniKS-UTF16-V",
         "UniKS-UTF32-H",
         "UniKS-UTF32-V",
         "UniKS-UTF8-H",
         "UniKS-UTF8-V",
         "V",
         "WP-Symbol",
      ];
      var MAX_MAP_RANGE = Math.pow(2, 24) - 1;
      var CMap = /*#__PURE__*/ (function () {
         function CMap() {
            var builtInCMap =
               arguments.length > 0 && arguments[0] !== undefined
                  ? arguments[0]
                  : false;
            _classCallCheck(this, CMap);
            this.codespaceRanges = [[], [], [], []];
            this.numCodespaceRanges = 0;
            this._map = [];
            this.name = "";
            this.vertical = false;
            this.useCMap = null;
            this.builtInCMap = builtInCMap;
         }
         return _createClass(CMap, [
            {
               key: "addCodespaceRange",
               value: function addCodespaceRange(n, low, high) {
                  this.codespaceRanges[n - 1].push(low, high);
                  this.numCodespaceRanges++;
               },
            },
            {
               key: "mapCidRange",
               value: function mapCidRange(low, high, dstLow) {
                  if (high - low > MAX_MAP_RANGE) {
                     throw new Error(
                        "mapCidRange - ignoring data above MAX_MAP_RANGE.",
                     );
                  }
                  while (low <= high) {
                     this._map[low++] = dstLow++;
                  }
               },
            },
            {
               key: "mapBfRange",
               value: function mapBfRange(low, high, dstLow) {
                  if (high - low > MAX_MAP_RANGE) {
                     throw new Error(
                        "mapBfRange - ignoring data above MAX_MAP_RANGE.",
                     );
                  }
                  var lastByte = dstLow.length - 1;
                  while (low <= high) {
                     this._map[low++] = dstLow;
                     var nextCharCode = dstLow.charCodeAt(lastByte) + 1;
                     if (nextCharCode > 0xff) {
                        dstLow =
                           dstLow.substring(0, lastByte - 1) +
                           String.fromCharCode(dstLow.charCodeAt(lastByte - 1) + 1) +
                           "\x00";
                        continue;
                     }
                     dstLow =
                        dstLow.substring(0, lastByte) +
                        String.fromCharCode(nextCharCode);
                  }
               },
            },
            {
               key: "mapBfRangeToArray",
               value: function mapBfRangeToArray(low, high, array) {
                  if (high - low > MAX_MAP_RANGE) {
                     throw new Error(
                        "mapBfRangeToArray - ignoring data above MAX_MAP_RANGE.",
                     );
                  }
                  var ii = array.length;
                  var i = 0;
                  while (low <= high && i < ii) {
                     this._map[low] = array[i++];
                     ++low;
                  }
               },
            },
            {
               key: "mapOne",
               value: function mapOne(src, dst) {
                  this._map[src] = dst;
               },
            },
            {
               key: "lookup",
               value: function lookup(code) {
                  return this._map[code];
               },
            },
            {
               key: "contains",
               value: function contains(code) {
                  return this._map[code] !== undefined;
               },
            },
            {
               key: "forEach",
               value: function forEach(callback) {
                  var map = this._map;
                  var length = map.length;
                  if (length <= 0x10000) {
                     for (var i = 0; i < length; i++) {
                        if (map[i] !== undefined) {
                           callback(i, map[i]);
                        }
                     }
                  } else {
                     for (var _i16 in map) {
                        callback(_i16, map[_i16]);
                     }
                  }
               },
            },
            {
               key: "charCodeOf",
               value: function charCodeOf(value) {
                  var map = this._map;
                  if (map.length <= 0x10000) {
                     return map.indexOf(value);
                  }
                  for (var charCode in map) {
                     if (map[charCode] === value) {
                        return charCode | 0;
                     }
                  }
                  return -1;
               },
            },
            {
               key: "getMap",
               value: function getMap() {
                  return this._map;
               },
            },
            {
               key: "readCharCode",
               value: function readCharCode(str, offset, out) {
                  var c = 0;
                  var codespaceRanges = this.codespaceRanges;
                  for (var n = 0, nn = codespaceRanges.length; n < nn; n++) {
                     c = ((c << 8) | str.charCodeAt(offset + n)) >>> 0;
                     var codespaceRange = codespaceRanges[n];
                     for (var k = 0, kk = codespaceRange.length; k < kk; ) {
                        var low = codespaceRange[k++];
                        var high = codespaceRange[k++];
                        if (c >= low && c <= high) {
                           out.charcode = c;
                           out.length = n + 1;
                           return;
                        }
                     }
                  }
                  out.charcode = 0;
                  out.length = 1;
               },
            },
            {
               key: "getCharCodeLength",
               value: function getCharCodeLength(charCode) {
                  var codespaceRanges = this.codespaceRanges;
                  for (var n = 0, nn = codespaceRanges.length; n < nn; n++) {
                     var codespaceRange = codespaceRanges[n];
                     for (var k = 0, kk = codespaceRange.length; k < kk; ) {
                        var low = codespaceRange[k++];
                        var high = codespaceRange[k++];
                        if (charCode >= low && charCode <= high) {
                           return n + 1;
                        }
                     }
                  }
                  return 1;
               },
            },
            {
               key: "length",
               get: function get() {
                  return this._map.length;
               },
            },
            {
               key: "isIdentityCMap",
               get: function get() {
                  if (!(this.name === "Identity-H" || this.name === "Identity-V")) {
                     return false;
                  }
                  if (this._map.length !== 0x10000) {
                     return false;
                  }
                  for (var i = 0; i < 0x10000; i++) {
                     if (this._map[i] !== i) {
                        return false;
                     }
                  }
                  return true;
               },
            },
         ]);
      })();
      var IdentityCMap = /*#__PURE__*/ (function (_CMap) {
         function IdentityCMap(vertical, n) {
            var _this27;
            _classCallCheck(this, IdentityCMap);
            _this27 = _callSuper(this, IdentityCMap);
            _this27.vertical = vertical;
            _this27.addCodespaceRange(n, 0, 0xffff);
            return _this27;
         }
         _inherits(IdentityCMap, _CMap);
         return _createClass(IdentityCMap, [
            {
               key: "mapCidRange",
               value: function mapCidRange(low, high, dstLow) {
                  unreachable("should not call mapCidRange");
               },
            },
            {
               key: "mapBfRange",
               value: function mapBfRange(low, high, dstLow) {
                  unreachable("should not call mapBfRange");
               },
            },
            {
               key: "mapBfRangeToArray",
               value: function mapBfRangeToArray(low, high, array) {
                  unreachable("should not call mapBfRangeToArray");
               },
            },
            {
               key: "mapOne",
               value: function mapOne(src, dst) {
                  unreachable("should not call mapCidOne");
               },
            },
            {
               key: "lookup",
               value: function lookup(code) {
                  return Number.isInteger(code) && code <= 0xffff ? code : undefined;
               },
            },
            {
               key: "contains",
               value: function contains(code) {
                  return Number.isInteger(code) && code <= 0xffff;
               },
            },
            {
               key: "forEach",
               value: function forEach(callback) {
                  for (var i = 0; i <= 0xffff; i++) {
                     callback(i, i);
                  }
               },
            },
            {
               key: "charCodeOf",
               value: function charCodeOf(value) {
                  return Number.isInteger(value) && value <= 0xffff ? value : -1;
               },
            },
            {
               key: "getMap",
               value: function getMap() {
                  var map = new Array(0x10000);
                  for (var i = 0; i <= 0xffff; i++) {
                     map[i] = i;
                  }
                  return map;
               },
            },
            {
               key: "length",
               get: function get() {
                  return 0x10000;
               },
            },
            {
               key: "isIdentityCMap",
               get: function get() {
                  unreachable("should not access .isIdentityCMap");
               },
            },
         ]);
      })(CMap);
      function strToInt(str) {
         var a = 0;
         for (var i = 0; i < str.length; i++) {
            a = (a << 8) | str.charCodeAt(i);
         }
         return a >>> 0;
      }
      function expectString(obj) {
         if (typeof obj !== "string") {
            throw new FormatError("Malformed CMap: expected string.");
         }
      }
      function expectInt(obj) {
         if (!Number.isInteger(obj)) {
            throw new FormatError("Malformed CMap: expected int.");
         }
      }
      function parseBfChar(cMap, lexer) {
         while (true) {
            var obj = lexer.getObj();
            if (obj === EOF) {
               break;
            }
            if (isCmd(obj, "endbfchar")) {
               return;
            }
            expectString(obj);
            var src = strToInt(obj);
            obj = lexer.getObj();
            expectString(obj);
            var dst = obj;
            cMap.mapOne(src, dst);
         }
      }
      function parseBfRange(cMap, lexer) {
         while (true) {
            var obj = lexer.getObj();
            if (obj === EOF) {
               break;
            }
            if (isCmd(obj, "endbfrange")) {
               return;
            }
            expectString(obj);
            var low = strToInt(obj);
            obj = lexer.getObj();
            expectString(obj);
            var high = strToInt(obj);
            obj = lexer.getObj();
            if (Number.isInteger(obj) || typeof obj === "string") {
               var dstLow = Number.isInteger(obj) ? String.fromCharCode(obj) : obj;
               cMap.mapBfRange(low, high, dstLow);
            } else if (isCmd(obj, "[")) {
               obj = lexer.getObj();
               var array = [];
               while (!isCmd(obj, "]") && obj !== EOF) {
                  array.push(obj);
                  obj = lexer.getObj();
               }
               cMap.mapBfRangeToArray(low, high, array);
            } else {
               break;
            }
         }
         throw new FormatError("Invalid bf range.");
      }
      function parseCidChar(cMap, lexer) {
         while (true) {
            var obj = lexer.getObj();
            if (obj === EOF) {
               break;
            }
            if (isCmd(obj, "endcidchar")) {
               return;
            }
            expectString(obj);
            var src = strToInt(obj);
            obj = lexer.getObj();
            expectInt(obj);
            var dst = obj;
            cMap.mapOne(src, dst);
         }
      }
      function parseCidRange(cMap, lexer) {
         while (true) {
            var obj = lexer.getObj();
            if (obj === EOF) {
               break;
            }
            if (isCmd(obj, "endcidrange")) {
               return;
            }
            expectString(obj);
            var low = strToInt(obj);
            obj = lexer.getObj();
            expectString(obj);
            var high = strToInt(obj);
            obj = lexer.getObj();
            expectInt(obj);
            var dstLow = obj;
            cMap.mapCidRange(low, high, dstLow);
         }
      }
      function parseCodespaceRange(cMap, lexer) {
         while (true) {
            var obj = lexer.getObj();
            if (obj === EOF) {
               break;
            }
            if (isCmd(obj, "endcodespacerange")) {
               return;
            }
            if (typeof obj !== "string") {
               break;
            }
            var low = strToInt(obj);
            obj = lexer.getObj();
            if (typeof obj !== "string") {
               break;
            }
            var high = strToInt(obj);
            cMap.addCodespaceRange(obj.length, low, high);
         }
         throw new FormatError("Invalid codespace range.");
      }
      function parseWMode(cMap, lexer) {
         var obj = lexer.getObj();
         if (Number.isInteger(obj)) {
            cMap.vertical = !!obj;
         }
      }
      function parseCMapName(cMap, lexer) {
         var obj = lexer.getObj();
         if (obj instanceof Name) {
            cMap.name = obj.name;
         }
      }
      function parseCMap(_x8, _x9, _x0, _x1) {
         return _parseCMap.apply(this, arguments);
      }
      function _parseCMap() {
         _parseCMap = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(
               function _callee84(cMap, lexer, fetchBuiltInCMap, useCMap) {
                  var previous, embeddedUseCMap, obj, _t74, _t75;
                  return _regenerator().w(
                     function (_context101) {
                        while (1)
                           switch ((_context101.p = _context101.n)) {
                              case 0:
                                 if (!true) {
                                    _context101.n = 15;
                                    break;
                                 }
                                 _context101.p = 1;
                                 obj = lexer.getObj();
                                 if (!(obj === EOF)) {
                                    _context101.n = 2;
                                    break;
                                 }
                                 return _context101.a(3, 15);
                              case 2:
                                 if (!(obj instanceof Name)) {
                                    _context101.n = 3;
                                    break;
                                 }
                                 if (obj.name === "WMode") {
                                    parseWMode(cMap, lexer);
                                 } else if (obj.name === "CMapName") {
                                    parseCMapName(cMap, lexer);
                                 }
                                 previous = obj;
                                 _context101.n = 11;
                                 break;
                              case 3:
                                 if (!(obj instanceof Cmd)) {
                                    _context101.n = 11;
                                    break;
                                 }
                                 _t74 = obj.cmd;
                                 _context101.n =
                                    _t74 === "endcmap"
                                       ? 4
                                       : _t74 === "usecmap"
                                          ? 5
                                          : _t74 === "begincodespacerange"
                                             ? 6
                                             : _t74 === "beginbfchar"
                                                ? 7
                                                : _t74 === "begincidchar"
                                                   ? 8
                                                   : _t74 === "beginbfrange"
                                                      ? 9
                                                      : _t74 === "begincidrange"
                                                         ? 10
                                                         : 11;
                                 break;
                              case 4:
                                 return _context101.a(3, 15);
                              case 5:
                                 if (previous instanceof Name) {
                                    embeddedUseCMap = previous.name;
                                 }
                                 return _context101.a(3, 11);
                              case 6:
                                 parseCodespaceRange(cMap, lexer);
                                 return _context101.a(3, 11);
                              case 7:
                                 parseBfChar(cMap, lexer);
                                 return _context101.a(3, 11);
                              case 8:
                                 parseCidChar(cMap, lexer);
                                 return _context101.a(3, 11);
                              case 9:
                                 parseBfRange(cMap, lexer);
                                 return _context101.a(3, 11);
                              case 10:
                                 parseCidRange(cMap, lexer);
                                 return _context101.a(3, 11);
                              case 11:
                                 _context101.n = 14;
                                 break;
                              case 12:
                                 _context101.p = 12;
                                 _t75 = _context101.v;
                                 if (!(_t75 instanceof MissingDataException)) {
                                    _context101.n = 13;
                                    break;
                                 }
                                 throw _t75;
                              case 13:
                                 warn("Invalid cMap data: " + _t75);
                                 return _context101.a(3, 0);
                              case 14:
                                 _context101.n = 0;
                                 break;
                              case 15:
                                 if (!useCMap && embeddedUseCMap) {
                                    useCMap = embeddedUseCMap;
                                 }
                                 if (!useCMap) {
                                    _context101.n = 16;
                                    break;
                                 }
                                 return _context101.a(
                                    2,
                                    extendCMap(cMap, fetchBuiltInCMap, useCMap),
                                 );
                              case 16:
                                 return _context101.a(2, cMap);
                           }
                     },
                     _callee84,
                     null,
                     [[1, 12]],
                  );
               },
            ),
         );
         return _parseCMap.apply(this, arguments);
      }
      function extendCMap(_x10, _x11, _x12) {
         return _extendCMap.apply(this, arguments);
      }
      function _extendCMap() {
         _extendCMap = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(
               function _callee85(cMap, fetchBuiltInCMap, useCMap) {
                  var useCodespaceRanges, i;
                  return _regenerator().w(function (_context102) {
                     while (1)
                        switch (_context102.n) {
                           case 0:
                              _context102.n = 1;
                              return createBuiltInCMap(useCMap, fetchBuiltInCMap);
                           case 1:
                              cMap.useCMap = _context102.v;
                              if (cMap.numCodespaceRanges === 0) {
                                 useCodespaceRanges = cMap.useCMap.codespaceRanges;
                                 for (i = 0; i < useCodespaceRanges.length; i++) {
                                    cMap.codespaceRanges[i] = useCodespaceRanges[i].slice();
                                 }
                                 cMap.numCodespaceRanges = cMap.useCMap.numCodespaceRanges;
                              }
                              cMap.useCMap.forEach(function (key, value) {
                                 if (!cMap.contains(key)) {
                                    cMap.mapOne(key, cMap.useCMap.lookup(key));
                                 }
                              });
                              return _context102.a(2, cMap);
                        }
                  }, _callee85);
               },
            ),
         );
         return _extendCMap.apply(this, arguments);
      }
      function createBuiltInCMap(_x13, _x14) {
         return _createBuiltInCMap.apply(this, arguments);
      }
      function _createBuiltInCMap() {
         _createBuiltInCMap = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(
               function _callee86(name, fetchBuiltInCMap) {
                  var _yield$fetchBuiltInCM, cMapData, compressionType, cMap, lexer;
                  return _regenerator().w(function (_context103) {
                     while (1)
                        switch (_context103.n) {
                           case 0:
                              if (!(name === "Identity-H")) {
                                 _context103.n = 1;
                                 break;
                              }
                              return _context103.a(2, new IdentityCMap(false, 2));
                           case 1:
                              if (!(name === "Identity-V")) {
                                 _context103.n = 2;
                                 break;
                              }
                              return _context103.a(2, new IdentityCMap(true, 2));
                           case 2:
                              if (BUILT_IN_CMAPS.includes(name)) {
                                 _context103.n = 3;
                                 break;
                              }
                              throw new Error("Unknown CMap name: " + name);
                           case 3:
                              if (fetchBuiltInCMap) {
                                 _context103.n = 4;
                                 break;
                              }
                              throw new Error(
                                 "Built-in CMap parameters are not provided.",
                              );
                           case 4:
                              _context103.n = 5;
                              return fetchBuiltInCMap(name);
                           case 5:
                              _yield$fetchBuiltInCM = _context103.v;
                              cMapData = _yield$fetchBuiltInCM.cMapData;
                              compressionType = _yield$fetchBuiltInCM.compressionType;
                              cMap = new CMap(true);
                              if (!(compressionType === CMapCompressionType.BINARY)) {
                                 _context103.n = 6;
                                 break;
                              }
                              return _context103.a(
                                 2,
                                 new BinaryCMapReader().process(
                                    cMapData,
                                    cMap,
                                    function (useCMap) {
                                       return extendCMap(cMap, fetchBuiltInCMap, useCMap);
                                    },
                                 ),
                              );
                           case 6:
                              if (!(compressionType === CMapCompressionType.NONE)) {
                                 _context103.n = 7;
                                 break;
                              }
                              lexer = new Lexer(new Stream(cMapData));
                              return _context103.a(
                                 2,
                                 parseCMap(cMap, lexer, fetchBuiltInCMap, null),
                              );
                           case 7:
                              throw new Error(
                                 'Invalid CMap "compressionType" value: '.concat(
                                    compressionType,
                                 ),
                              );
                           case 8:
                              return _context103.a(2);
                        }
                  }, _callee86);
               },
            ),
         );
         return _createBuiltInCMap.apply(this, arguments);
      }
      var CMapFactory = /*#__PURE__*/ (function () {
         function CMapFactory() {
            _classCallCheck(this, CMapFactory);
         }
         return _createClass(CMapFactory, null, [
            {
               key: "create",
               value: (function () {
                  var _create = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(function _callee4(_ref22) {
                        var encoding, fetchBuiltInCMap, useCMap, parsedCMap;
                        return _regenerator().w(function (_context6) {
                           while (1)
                              switch (_context6.n) {
                                 case 0:
                                    ((encoding = _ref22.encoding),
                                       (fetchBuiltInCMap = _ref22.fetchBuiltInCMap),
                                       (useCMap = _ref22.useCMap));
                                    if (!(encoding instanceof Name)) {
                                       _context6.n = 1;
                                       break;
                                    }
                                    return _context6.a(
                                       2,
                                       createBuiltInCMap(encoding.name, fetchBuiltInCMap),
                                    );
                                 case 1:
                                    if (!(encoding instanceof BaseStream)) {
                                       _context6.n = 4;
                                       break;
                                    }
                                    _context6.n = 2;
                                    return parseCMap(
                                       new CMap(),
                                       new Lexer(encoding),
                                       fetchBuiltInCMap,
                                       useCMap,
                                    );
                                 case 2:
                                    parsedCMap = _context6.v;
                                    if (!parsedCMap.isIdentityCMap) {
                                       _context6.n = 3;
                                       break;
                                    }
                                    return _context6.a(
                                       2,
                                       createBuiltInCMap(parsedCMap.name, fetchBuiltInCMap),
                                    );
                                 case 3:
                                    return _context6.a(2, parsedCMap);
                                 case 4:
                                    throw new Error("Encoding required.");
                                 case 5:
                                    return _context6.a(2);
                              }
                        }, _callee4);
                     }),
                  );
                  function create(_x15) {
                     return _create.apply(this, arguments);
                  }
                  return create;
               })(),
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/charsets.js
      var ISOAdobeCharset = [
         ".notdef",
         "space",
         "exclam",
         "quotedbl",
         "numbersign",
         "dollar",
         "percent",
         "ampersand",
         "quoteright",
         "parenleft",
         "parenright",
         "asterisk",
         "plus",
         "comma",
         "hyphen",
         "period",
         "slash",
         "zero",
         "one",
         "two",
         "three",
         "four",
         "five",
         "six",
         "seven",
         "eight",
         "nine",
         "colon",
         "semicolon",
         "less",
         "equal",
         "greater",
         "question",
         "at",
         "A",
         "B",
         "C",
         "D",
         "E",
         "F",
         "G",
         "H",
         "I",
         "J",
         "K",
         "L",
         "M",
         "N",
         "O",
         "P",
         "Q",
         "R",
         "S",
         "T",
         "U",
         "V",
         "W",
         "X",
         "Y",
         "Z",
         "bracketleft",
         "backslash",
         "bracketright",
         "asciicircum",
         "underscore",
         "quoteleft",
         "a",
         "b",
         "c",
         "d",
         "e",
         "f",
         "g",
         "h",
         "i",
         "j",
         "k",
         "l",
         "m",
         "n",
         "o",
         "p",
         "q",
         "r",
         "s",
         "t",
         "u",
         "v",
         "w",
         "x",
         "y",
         "z",
         "braceleft",
         "bar",
         "braceright",
         "asciitilde",
         "exclamdown",
         "cent",
         "sterling",
         "fraction",
         "yen",
         "florin",
         "section",
         "currency",
         "quotesingle",
         "quotedblleft",
         "guillemotleft",
         "guilsinglleft",
         "guilsinglright",
         "fi",
         "fl",
         "endash",
         "dagger",
         "daggerdbl",
         "periodcentered",
         "paragraph",
         "bullet",
         "quotesinglbase",
         "quotedblbase",
         "quotedblright",
         "guillemotright",
         "ellipsis",
         "perthousand",
         "questiondown",
         "grave",
         "acute",
         "circumflex",
         "tilde",
         "macron",
         "breve",
         "dotaccent",
         "dieresis",
         "ring",
         "cedilla",
         "hungarumlaut",
         "ogonek",
         "caron",
         "emdash",
         "AE",
         "ordfeminine",
         "Lslash",
         "Oslash",
         "OE",
         "ordmasculine",
         "ae",
         "dotlessi",
         "lslash",
         "oslash",
         "oe",
         "germandbls",
         "onesuperior",
         "logicalnot",
         "mu",
         "trademark",
         "Eth",
         "onehalf",
         "plusminus",
         "Thorn",
         "onequarter",
         "divide",
         "brokenbar",
         "degree",
         "thorn",
         "threequarters",
         "twosuperior",
         "registered",
         "minus",
         "eth",
         "multiply",
         "threesuperior",
         "copyright",
         "Aacute",
         "Acircumflex",
         "Adieresis",
         "Agrave",
         "Aring",
         "Atilde",
         "Ccedilla",
         "Eacute",
         "Ecircumflex",
         "Edieresis",
         "Egrave",
         "Iacute",
         "Icircumflex",
         "Idieresis",
         "Igrave",
         "Ntilde",
         "Oacute",
         "Ocircumflex",
         "Odieresis",
         "Ograve",
         "Otilde",
         "Scaron",
         "Uacute",
         "Ucircumflex",
         "Udieresis",
         "Ugrave",
         "Yacute",
         "Ydieresis",
         "Zcaron",
         "aacute",
         "acircumflex",
         "adieresis",
         "agrave",
         "aring",
         "atilde",
         "ccedilla",
         "eacute",
         "ecircumflex",
         "edieresis",
         "egrave",
         "iacute",
         "icircumflex",
         "idieresis",
         "igrave",
         "ntilde",
         "oacute",
         "ocircumflex",
         "odieresis",
         "ograve",
         "otilde",
         "scaron",
         "uacute",
         "ucircumflex",
         "udieresis",
         "ugrave",
         "yacute",
         "ydieresis",
         "zcaron",
      ];
      var ExpertCharset = [
         ".notdef",
         "space",
         "exclamsmall",
         "Hungarumlautsmall",
         "dollaroldstyle",
         "dollarsuperior",
         "ampersandsmall",
         "Acutesmall",
         "parenleftsuperior",
         "parenrightsuperior",
         "twodotenleader",
         "onedotenleader",
         "comma",
         "hyphen",
         "period",
         "fraction",
         "zerooldstyle",
         "oneoldstyle",
         "twooldstyle",
         "threeoldstyle",
         "fouroldstyle",
         "fiveoldstyle",
         "sixoldstyle",
         "sevenoldstyle",
         "eightoldstyle",
         "nineoldstyle",
         "colon",
         "semicolon",
         "commasuperior",
         "threequartersemdash",
         "periodsuperior",
         "questionsmall",
         "asuperior",
         "bsuperior",
         "centsuperior",
         "dsuperior",
         "esuperior",
         "isuperior",
         "lsuperior",
         "msuperior",
         "nsuperior",
         "osuperior",
         "rsuperior",
         "ssuperior",
         "tsuperior",
         "ff",
         "fi",
         "fl",
         "ffi",
         "ffl",
         "parenleftinferior",
         "parenrightinferior",
         "Circumflexsmall",
         "hyphensuperior",
         "Gravesmall",
         "Asmall",
         "Bsmall",
         "Csmall",
         "Dsmall",
         "Esmall",
         "Fsmall",
         "Gsmall",
         "Hsmall",
         "Ismall",
         "Jsmall",
         "Ksmall",
         "Lsmall",
         "Msmall",
         "Nsmall",
         "Osmall",
         "Psmall",
         "Qsmall",
         "Rsmall",
         "Ssmall",
         "Tsmall",
         "Usmall",
         "Vsmall",
         "Wsmall",
         "Xsmall",
         "Ysmall",
         "Zsmall",
         "colonmonetary",
         "onefitted",
         "rupiah",
         "Tildesmall",
         "exclamdownsmall",
         "centoldstyle",
         "Lslashsmall",
         "Scaronsmall",
         "Zcaronsmall",
         "Dieresissmall",
         "Brevesmall",
         "Caronsmall",
         "Dotaccentsmall",
         "Macronsmall",
         "figuredash",
         "hypheninferior",
         "Ogoneksmall",
         "Ringsmall",
         "Cedillasmall",
         "onequarter",
         "onehalf",
         "threequarters",
         "questiondownsmall",
         "oneeighth",
         "threeeighths",
         "fiveeighths",
         "seveneighths",
         "onethird",
         "twothirds",
         "zerosuperior",
         "onesuperior",
         "twosuperior",
         "threesuperior",
         "foursuperior",
         "fivesuperior",
         "sixsuperior",
         "sevensuperior",
         "eightsuperior",
         "ninesuperior",
         "zeroinferior",
         "oneinferior",
         "twoinferior",
         "threeinferior",
         "fourinferior",
         "fiveinferior",
         "sixinferior",
         "seveninferior",
         "eightinferior",
         "nineinferior",
         "centinferior",
         "dollarinferior",
         "periodinferior",
         "commainferior",
         "Agravesmall",
         "Aacutesmall",
         "Acircumflexsmall",
         "Atildesmall",
         "Adieresissmall",
         "Aringsmall",
         "AEsmall",
         "Ccedillasmall",
         "Egravesmall",
         "Eacutesmall",
         "Ecircumflexsmall",
         "Edieresissmall",
         "Igravesmall",
         "Iacutesmall",
         "Icircumflexsmall",
         "Idieresissmall",
         "Ethsmall",
         "Ntildesmall",
         "Ogravesmall",
         "Oacutesmall",
         "Ocircumflexsmall",
         "Otildesmall",
         "Odieresissmall",
         "OEsmall",
         "Oslashsmall",
         "Ugravesmall",
         "Uacutesmall",
         "Ucircumflexsmall",
         "Udieresissmall",
         "Yacutesmall",
         "Thornsmall",
         "Ydieresissmall",
      ];
      var ExpertSubsetCharset = [
         ".notdef",
         "space",
         "dollaroldstyle",
         "dollarsuperior",
         "parenleftsuperior",
         "parenrightsuperior",
         "twodotenleader",
         "onedotenleader",
         "comma",
         "hyphen",
         "period",
         "fraction",
         "zerooldstyle",
         "oneoldstyle",
         "twooldstyle",
         "threeoldstyle",
         "fouroldstyle",
         "fiveoldstyle",
         "sixoldstyle",
         "sevenoldstyle",
         "eightoldstyle",
         "nineoldstyle",
         "colon",
         "semicolon",
         "commasuperior",
         "threequartersemdash",
         "periodsuperior",
         "asuperior",
         "bsuperior",
         "centsuperior",
         "dsuperior",
         "esuperior",
         "isuperior",
         "lsuperior",
         "msuperior",
         "nsuperior",
         "osuperior",
         "rsuperior",
         "ssuperior",
         "tsuperior",
         "ff",
         "fi",
         "fl",
         "ffi",
         "ffl",
         "parenleftinferior",
         "parenrightinferior",
         "hyphensuperior",
         "colonmonetary",
         "onefitted",
         "rupiah",
         "centoldstyle",
         "figuredash",
         "hypheninferior",
         "onequarter",
         "onehalf",
         "threequarters",
         "oneeighth",
         "threeeighths",
         "fiveeighths",
         "seveneighths",
         "onethird",
         "twothirds",
         "zerosuperior",
         "onesuperior",
         "twosuperior",
         "threesuperior",
         "foursuperior",
         "fivesuperior",
         "sixsuperior",
         "sevensuperior",
         "eightsuperior",
         "ninesuperior",
         "zeroinferior",
         "oneinferior",
         "twoinferior",
         "threeinferior",
         "fourinferior",
         "fiveinferior",
         "sixinferior",
         "seveninferior",
         "eightinferior",
         "nineinferior",
         "centinferior",
         "dollarinferior",
         "periodinferior",
         "commainferior",
      ]; // CONCATENATED MODULE: ./src/core/encodings.js
      var ExpertEncoding = [
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "space",
         "exclamsmall",
         "Hungarumlautsmall",
         "",
         "dollaroldstyle",
         "dollarsuperior",
         "ampersandsmall",
         "Acutesmall",
         "parenleftsuperior",
         "parenrightsuperior",
         "twodotenleader",
         "onedotenleader",
         "comma",
         "hyphen",
         "period",
         "fraction",
         "zerooldstyle",
         "oneoldstyle",
         "twooldstyle",
         "threeoldstyle",
         "fouroldstyle",
         "fiveoldstyle",
         "sixoldstyle",
         "sevenoldstyle",
         "eightoldstyle",
         "nineoldstyle",
         "colon",
         "semicolon",
         "commasuperior",
         "threequartersemdash",
         "periodsuperior",
         "questionsmall",
         "",
         "asuperior",
         "bsuperior",
         "centsuperior",
         "dsuperior",
         "esuperior",
         "",
         "",
         "",
         "isuperior",
         "",
         "",
         "lsuperior",
         "msuperior",
         "nsuperior",
         "osuperior",
         "",
         "",
         "rsuperior",
         "ssuperior",
         "tsuperior",
         "",
         "ff",
         "fi",
         "fl",
         "ffi",
         "ffl",
         "parenleftinferior",
         "",
         "parenrightinferior",
         "Circumflexsmall",
         "hyphensuperior",
         "Gravesmall",
         "Asmall",
         "Bsmall",
         "Csmall",
         "Dsmall",
         "Esmall",
         "Fsmall",
         "Gsmall",
         "Hsmall",
         "Ismall",
         "Jsmall",
         "Ksmall",
         "Lsmall",
         "Msmall",
         "Nsmall",
         "Osmall",
         "Psmall",
         "Qsmall",
         "Rsmall",
         "Ssmall",
         "Tsmall",
         "Usmall",
         "Vsmall",
         "Wsmall",
         "Xsmall",
         "Ysmall",
         "Zsmall",
         "colonmonetary",
         "onefitted",
         "rupiah",
         "Tildesmall",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "exclamdownsmall",
         "centoldstyle",
         "Lslashsmall",
         "",
         "",
         "Scaronsmall",
         "Zcaronsmall",
         "Dieresissmall",
         "Brevesmall",
         "Caronsmall",
         "",
         "Dotaccentsmall",
         "",
         "",
         "Macronsmall",
         "",
         "",
         "figuredash",
         "hypheninferior",
         "",
         "",
         "Ogoneksmall",
         "Ringsmall",
         "Cedillasmall",
         "",
         "",
         "",
         "onequarter",
         "onehalf",
         "threequarters",
         "questiondownsmall",
         "oneeighth",
         "threeeighths",
         "fiveeighths",
         "seveneighths",
         "onethird",
         "twothirds",
         "",
         "",
         "zerosuperior",
         "onesuperior",
         "twosuperior",
         "threesuperior",
         "foursuperior",
         "fivesuperior",
         "sixsuperior",
         "sevensuperior",
         "eightsuperior",
         "ninesuperior",
         "zeroinferior",
         "oneinferior",
         "twoinferior",
         "threeinferior",
         "fourinferior",
         "fiveinferior",
         "sixinferior",
         "seveninferior",
         "eightinferior",
         "nineinferior",
         "centinferior",
         "dollarinferior",
         "periodinferior",
         "commainferior",
         "Agravesmall",
         "Aacutesmall",
         "Acircumflexsmall",
         "Atildesmall",
         "Adieresissmall",
         "Aringsmall",
         "AEsmall",
         "Ccedillasmall",
         "Egravesmall",
         "Eacutesmall",
         "Ecircumflexsmall",
         "Edieresissmall",
         "Igravesmall",
         "Iacutesmall",
         "Icircumflexsmall",
         "Idieresissmall",
         "Ethsmall",
         "Ntildesmall",
         "Ogravesmall",
         "Oacutesmall",
         "Ocircumflexsmall",
         "Otildesmall",
         "Odieresissmall",
         "OEsmall",
         "Oslashsmall",
         "Ugravesmall",
         "Uacutesmall",
         "Ucircumflexsmall",
         "Udieresissmall",
         "Yacutesmall",
         "Thornsmall",
         "Ydieresissmall",
      ];
      var MacExpertEncoding = [
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "space",
         "exclamsmall",
         "Hungarumlautsmall",
         "centoldstyle",
         "dollaroldstyle",
         "dollarsuperior",
         "ampersandsmall",
         "Acutesmall",
         "parenleftsuperior",
         "parenrightsuperior",
         "twodotenleader",
         "onedotenleader",
         "comma",
         "hyphen",
         "period",
         "fraction",
         "zerooldstyle",
         "oneoldstyle",
         "twooldstyle",
         "threeoldstyle",
         "fouroldstyle",
         "fiveoldstyle",
         "sixoldstyle",
         "sevenoldstyle",
         "eightoldstyle",
         "nineoldstyle",
         "colon",
         "semicolon",
         "",
         "threequartersemdash",
         "",
         "questionsmall",
         "",
         "",
         "",
         "",
         "Ethsmall",
         "",
         "",
         "onequarter",
         "onehalf",
         "threequarters",
         "oneeighth",
         "threeeighths",
         "fiveeighths",
         "seveneighths",
         "onethird",
         "twothirds",
         "",
         "",
         "",
         "",
         "",
         "",
         "ff",
         "fi",
         "fl",
         "ffi",
         "ffl",
         "parenleftinferior",
         "",
         "parenrightinferior",
         "Circumflexsmall",
         "hypheninferior",
         "Gravesmall",
         "Asmall",
         "Bsmall",
         "Csmall",
         "Dsmall",
         "Esmall",
         "Fsmall",
         "Gsmall",
         "Hsmall",
         "Ismall",
         "Jsmall",
         "Ksmall",
         "Lsmall",
         "Msmall",
         "Nsmall",
         "Osmall",
         "Psmall",
         "Qsmall",
         "Rsmall",
         "Ssmall",
         "Tsmall",
         "Usmall",
         "Vsmall",
         "Wsmall",
         "Xsmall",
         "Ysmall",
         "Zsmall",
         "colonmonetary",
         "onefitted",
         "rupiah",
         "Tildesmall",
         "",
         "",
         "asuperior",
         "centsuperior",
         "",
         "",
         "",
         "",
         "Aacutesmall",
         "Agravesmall",
         "Acircumflexsmall",
         "Adieresissmall",
         "Atildesmall",
         "Aringsmall",
         "Ccedillasmall",
         "Eacutesmall",
         "Egravesmall",
         "Ecircumflexsmall",
         "Edieresissmall",
         "Iacutesmall",
         "Igravesmall",
         "Icircumflexsmall",
         "Idieresissmall",
         "Ntildesmall",
         "Oacutesmall",
         "Ogravesmall",
         "Ocircumflexsmall",
         "Odieresissmall",
         "Otildesmall",
         "Uacutesmall",
         "Ugravesmall",
         "Ucircumflexsmall",
         "Udieresissmall",
         "",
         "eightsuperior",
         "fourinferior",
         "threeinferior",
         "sixinferior",
         "eightinferior",
         "seveninferior",
         "Scaronsmall",
         "",
         "centinferior",
         "twoinferior",
         "",
         "Dieresissmall",
         "",
         "Caronsmall",
         "osuperior",
         "fiveinferior",
         "",
         "commainferior",
         "periodinferior",
         "Yacutesmall",
         "",
         "dollarinferior",
         "",
         "",
         "Thornsmall",
         "",
         "nineinferior",
         "zeroinferior",
         "Zcaronsmall",
         "AEsmall",
         "Oslashsmall",
         "questiondownsmall",
         "oneinferior",
         "Lslashsmall",
         "",
         "",
         "",
         "",
         "",
         "",
         "Cedillasmall",
         "",
         "",
         "",
         "",
         "",
         "OEsmall",
         "figuredash",
         "hyphensuperior",
         "",
         "",
         "",
         "",
         "exclamdownsmall",
         "",
         "Ydieresissmall",
         "",
         "onesuperior",
         "twosuperior",
         "threesuperior",
         "foursuperior",
         "fivesuperior",
         "sixsuperior",
         "sevensuperior",
         "ninesuperior",
         "zerosuperior",
         "",
         "esuperior",
         "rsuperior",
         "tsuperior",
         "",
         "",
         "isuperior",
         "ssuperior",
         "dsuperior",
         "",
         "",
         "",
         "",
         "",
         "lsuperior",
         "Ogoneksmall",
         "Brevesmall",
         "Macronsmall",
         "bsuperior",
         "nsuperior",
         "msuperior",
         "commasuperior",
         "periodsuperior",
         "Dotaccentsmall",
         "Ringsmall",
         "",
         "",
         "",
         "",
      ];
      var MacRomanEncoding = [
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "space",
         "exclam",
         "quotedbl",
         "numbersign",
         "dollar",
         "percent",
         "ampersand",
         "quotesingle",
         "parenleft",
         "parenright",
         "asterisk",
         "plus",
         "comma",
         "hyphen",
         "period",
         "slash",
         "zero",
         "one",
         "two",
         "three",
         "four",
         "five",
         "six",
         "seven",
         "eight",
         "nine",
         "colon",
         "semicolon",
         "less",
         "equal",
         "greater",
         "question",
         "at",
         "A",
         "B",
         "C",
         "D",
         "E",
         "F",
         "G",
         "H",
         "I",
         "J",
         "K",
         "L",
         "M",
         "N",
         "O",
         "P",
         "Q",
         "R",
         "S",
         "T",
         "U",
         "V",
         "W",
         "X",
         "Y",
         "Z",
         "bracketleft",
         "backslash",
         "bracketright",
         "asciicircum",
         "underscore",
         "grave",
         "a",
         "b",
         "c",
         "d",
         "e",
         "f",
         "g",
         "h",
         "i",
         "j",
         "k",
         "l",
         "m",
         "n",
         "o",
         "p",
         "q",
         "r",
         "s",
         "t",
         "u",
         "v",
         "w",
         "x",
         "y",
         "z",
         "braceleft",
         "bar",
         "braceright",
         "asciitilde",
         "",
         "Adieresis",
         "Aring",
         "Ccedilla",
         "Eacute",
         "Ntilde",
         "Odieresis",
         "Udieresis",
         "aacute",
         "agrave",
         "acircumflex",
         "adieresis",
         "atilde",
         "aring",
         "ccedilla",
         "eacute",
         "egrave",
         "ecircumflex",
         "edieresis",
         "iacute",
         "igrave",
         "icircumflex",
         "idieresis",
         "ntilde",
         "oacute",
         "ograve",
         "ocircumflex",
         "odieresis",
         "otilde",
         "uacute",
         "ugrave",
         "ucircumflex",
         "udieresis",
         "dagger",
         "degree",
         "cent",
         "sterling",
         "section",
         "bullet",
         "paragraph",
         "germandbls",
         "registered",
         "copyright",
         "trademark",
         "acute",
         "dieresis",
         "notequal",
         "AE",
         "Oslash",
         "infinity",
         "plusminus",
         "lessequal",
         "greaterequal",
         "yen",
         "mu",
         "partialdiff",
         "summation",
         "product",
         "pi",
         "integral",
         "ordfeminine",
         "ordmasculine",
         "Omega",
         "ae",
         "oslash",
         "questiondown",
         "exclamdown",
         "logicalnot",
         "radical",
         "florin",
         "approxequal",
         "Delta",
         "guillemotleft",
         "guillemotright",
         "ellipsis",
         "space",
         "Agrave",
         "Atilde",
         "Otilde",
         "OE",
         "oe",
         "endash",
         "emdash",
         "quotedblleft",
         "quotedblright",
         "quoteleft",
         "quoteright",
         "divide",
         "lozenge",
         "ydieresis",
         "Ydieresis",
         "fraction",
         "currency",
         "guilsinglleft",
         "guilsinglright",
         "fi",
         "fl",
         "daggerdbl",
         "periodcentered",
         "quotesinglbase",
         "quotedblbase",
         "perthousand",
         "Acircumflex",
         "Ecircumflex",
         "Aacute",
         "Edieresis",
         "Egrave",
         "Iacute",
         "Icircumflex",
         "Idieresis",
         "Igrave",
         "Oacute",
         "Ocircumflex",
         "apple",
         "Ograve",
         "Uacute",
         "Ucircumflex",
         "Ugrave",
         "dotlessi",
         "circumflex",
         "tilde",
         "macron",
         "breve",
         "dotaccent",
         "ring",
         "cedilla",
         "hungarumlaut",
         "ogonek",
         "caron",
      ];
      var StandardEncoding = [
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "space",
         "exclam",
         "quotedbl",
         "numbersign",
         "dollar",
         "percent",
         "ampersand",
         "quoteright",
         "parenleft",
         "parenright",
         "asterisk",
         "plus",
         "comma",
         "hyphen",
         "period",
         "slash",
         "zero",
         "one",
         "two",
         "three",
         "four",
         "five",
         "six",
         "seven",
         "eight",
         "nine",
         "colon",
         "semicolon",
         "less",
         "equal",
         "greater",
         "question",
         "at",
         "A",
         "B",
         "C",
         "D",
         "E",
         "F",
         "G",
         "H",
         "I",
         "J",
         "K",
         "L",
         "M",
         "N",
         "O",
         "P",
         "Q",
         "R",
         "S",
         "T",
         "U",
         "V",
         "W",
         "X",
         "Y",
         "Z",
         "bracketleft",
         "backslash",
         "bracketright",
         "asciicircum",
         "underscore",
         "quoteleft",
         "a",
         "b",
         "c",
         "d",
         "e",
         "f",
         "g",
         "h",
         "i",
         "j",
         "k",
         "l",
         "m",
         "n",
         "o",
         "p",
         "q",
         "r",
         "s",
         "t",
         "u",
         "v",
         "w",
         "x",
         "y",
         "z",
         "braceleft",
         "bar",
         "braceright",
         "asciitilde",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "exclamdown",
         "cent",
         "sterling",
         "fraction",
         "yen",
         "florin",
         "section",
         "currency",
         "quotesingle",
         "quotedblleft",
         "guillemotleft",
         "guilsinglleft",
         "guilsinglright",
         "fi",
         "fl",
         "",
         "endash",
         "dagger",
         "daggerdbl",
         "periodcentered",
         "",
         "paragraph",
         "bullet",
         "quotesinglbase",
         "quotedblbase",
         "quotedblright",
         "guillemotright",
         "ellipsis",
         "perthousand",
         "",
         "questiondown",
         "",
         "grave",
         "acute",
         "circumflex",
         "tilde",
         "macron",
         "breve",
         "dotaccent",
         "dieresis",
         "",
         "ring",
         "cedilla",
         "",
         "hungarumlaut",
         "ogonek",
         "caron",
         "emdash",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "AE",
         "",
         "ordfeminine",
         "",
         "",
         "",
         "",
         "Lslash",
         "Oslash",
         "OE",
         "ordmasculine",
         "",
         "",
         "",
         "",
         "",
         "ae",
         "",
         "",
         "",
         "dotlessi",
         "",
         "",
         "lslash",
         "oslash",
         "oe",
         "germandbls",
         "",
         "",
         "",
         "",
      ];
      var WinAnsiEncoding = [
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "space",
         "exclam",
         "quotedbl",
         "numbersign",
         "dollar",
         "percent",
         "ampersand",
         "quotesingle",
         "parenleft",
         "parenright",
         "asterisk",
         "plus",
         "comma",
         "hyphen",
         "period",
         "slash",
         "zero",
         "one",
         "two",
         "three",
         "four",
         "five",
         "six",
         "seven",
         "eight",
         "nine",
         "colon",
         "semicolon",
         "less",
         "equal",
         "greater",
         "question",
         "at",
         "A",
         "B",
         "C",
         "D",
         "E",
         "F",
         "G",
         "H",
         "I",
         "J",
         "K",
         "L",
         "M",
         "N",
         "O",
         "P",
         "Q",
         "R",
         "S",
         "T",
         "U",
         "V",
         "W",
         "X",
         "Y",
         "Z",
         "bracketleft",
         "backslash",
         "bracketright",
         "asciicircum",
         "underscore",
         "grave",
         "a",
         "b",
         "c",
         "d",
         "e",
         "f",
         "g",
         "h",
         "i",
         "j",
         "k",
         "l",
         "m",
         "n",
         "o",
         "p",
         "q",
         "r",
         "s",
         "t",
         "u",
         "v",
         "w",
         "x",
         "y",
         "z",
         "braceleft",
         "bar",
         "braceright",
         "asciitilde",
         "bullet",
         "Euro",
         "bullet",
         "quotesinglbase",
         "florin",
         "quotedblbase",
         "ellipsis",
         "dagger",
         "daggerdbl",
         "circumflex",
         "perthousand",
         "Scaron",
         "guilsinglleft",
         "OE",
         "bullet",
         "Zcaron",
         "bullet",
         "bullet",
         "quoteleft",
         "quoteright",
         "quotedblleft",
         "quotedblright",
         "bullet",
         "endash",
         "emdash",
         "tilde",
         "trademark",
         "scaron",
         "guilsinglright",
         "oe",
         "bullet",
         "zcaron",
         "Ydieresis",
         "space",
         "exclamdown",
         "cent",
         "sterling",
         "currency",
         "yen",
         "brokenbar",
         "section",
         "dieresis",
         "copyright",
         "ordfeminine",
         "guillemotleft",
         "logicalnot",
         "hyphen",
         "registered",
         "macron",
         "degree",
         "plusminus",
         "twosuperior",
         "threesuperior",
         "acute",
         "mu",
         "paragraph",
         "periodcentered",
         "cedilla",
         "onesuperior",
         "ordmasculine",
         "guillemotright",
         "onequarter",
         "onehalf",
         "threequarters",
         "questiondown",
         "Agrave",
         "Aacute",
         "Acircumflex",
         "Atilde",
         "Adieresis",
         "Aring",
         "AE",
         "Ccedilla",
         "Egrave",
         "Eacute",
         "Ecircumflex",
         "Edieresis",
         "Igrave",
         "Iacute",
         "Icircumflex",
         "Idieresis",
         "Eth",
         "Ntilde",
         "Ograve",
         "Oacute",
         "Ocircumflex",
         "Otilde",
         "Odieresis",
         "multiply",
         "Oslash",
         "Ugrave",
         "Uacute",
         "Ucircumflex",
         "Udieresis",
         "Yacute",
         "Thorn",
         "germandbls",
         "agrave",
         "aacute",
         "acircumflex",
         "atilde",
         "adieresis",
         "aring",
         "ae",
         "ccedilla",
         "egrave",
         "eacute",
         "ecircumflex",
         "edieresis",
         "igrave",
         "iacute",
         "icircumflex",
         "idieresis",
         "eth",
         "ntilde",
         "ograve",
         "oacute",
         "ocircumflex",
         "otilde",
         "odieresis",
         "divide",
         "oslash",
         "ugrave",
         "uacute",
         "ucircumflex",
         "udieresis",
         "yacute",
         "thorn",
         "ydieresis",
      ];
      var SymbolSetEncoding = [
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "space",
         "exclam",
         "universal",
         "numbersign",
         "existential",
         "percent",
         "ampersand",
         "suchthat",
         "parenleft",
         "parenright",
         "asteriskmath",
         "plus",
         "comma",
         "minus",
         "period",
         "slash",
         "zero",
         "one",
         "two",
         "three",
         "four",
         "five",
         "six",
         "seven",
         "eight",
         "nine",
         "colon",
         "semicolon",
         "less",
         "equal",
         "greater",
         "question",
         "congruent",
         "Alpha",
         "Beta",
         "Chi",
         "Delta",
         "Epsilon",
         "Phi",
         "Gamma",
         "Eta",
         "Iota",
         "theta1",
         "Kappa",
         "Lambda",
         "Mu",
         "Nu",
         "Omicron",
         "Pi",
         "Theta",
         "Rho",
         "Sigma",
         "Tau",
         "Upsilon",
         "sigma1",
         "Omega",
         "Xi",
         "Psi",
         "Zeta",
         "bracketleft",
         "therefore",
         "bracketright",
         "perpendicular",
         "underscore",
         "radicalex",
         "alpha",
         "beta",
         "chi",
         "delta",
         "epsilon",
         "phi",
         "gamma",
         "eta",
         "iota",
         "phi1",
         "kappa",
         "lambda",
         "mu",
         "nu",
         "omicron",
         "pi",
         "theta",
         "rho",
         "sigma",
         "tau",
         "upsilon",
         "omega1",
         "omega",
         "xi",
         "psi",
         "zeta",
         "braceleft",
         "bar",
         "braceright",
         "similar",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "Euro",
         "Upsilon1",
         "minute",
         "lessequal",
         "fraction",
         "infinity",
         "florin",
         "club",
         "diamond",
         "heart",
         "spade",
         "arrowboth",
         "arrowleft",
         "arrowup",
         "arrowright",
         "arrowdown",
         "degree",
         "plusminus",
         "second",
         "greaterequal",
         "multiply",
         "proportional",
         "partialdiff",
         "bullet",
         "divide",
         "notequal",
         "equivalence",
         "approxequal",
         "ellipsis",
         "arrowvertex",
         "arrowhorizex",
         "carriagereturn",
         "aleph",
         "Ifraktur",
         "Rfraktur",
         "weierstrass",
         "circlemultiply",
         "circleplus",
         "emptyset",
         "intersection",
         "union",
         "propersuperset",
         "reflexsuperset",
         "notsubset",
         "propersubset",
         "reflexsubset",
         "element",
         "notelement",
         "angle",
         "gradient",
         "registerserif",
         "copyrightserif",
         "trademarkserif",
         "product",
         "radical",
         "dotmath",
         "logicalnot",
         "logicaland",
         "logicalor",
         "arrowdblboth",
         "arrowdblleft",
         "arrowdblup",
         "arrowdblright",
         "arrowdbldown",
         "lozenge",
         "angleleft",
         "registersans",
         "copyrightsans",
         "trademarksans",
         "summation",
         "parenlefttp",
         "parenleftex",
         "parenleftbt",
         "bracketlefttp",
         "bracketleftex",
         "bracketleftbt",
         "bracelefttp",
         "braceleftmid",
         "braceleftbt",
         "braceex",
         "",
         "angleright",
         "integral",
         "integraltp",
         "integralex",
         "integralbt",
         "parenrighttp",
         "parenrightex",
         "parenrightbt",
         "bracketrighttp",
         "bracketrightex",
         "bracketrightbt",
         "bracerighttp",
         "bracerightmid",
         "bracerightbt",
         "",
      ];
      var ZapfDingbatsEncoding = [
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "space",
         "a1",
         "a2",
         "a202",
         "a3",
         "a4",
         "a5",
         "a119",
         "a118",
         "a117",
         "a11",
         "a12",
         "a13",
         "a14",
         "a15",
         "a16",
         "a105",
         "a17",
         "a18",
         "a19",
         "a20",
         "a21",
         "a22",
         "a23",
         "a24",
         "a25",
         "a26",
         "a27",
         "a28",
         "a6",
         "a7",
         "a8",
         "a9",
         "a10",
         "a29",
         "a30",
         "a31",
         "a32",
         "a33",
         "a34",
         "a35",
         "a36",
         "a37",
         "a38",
         "a39",
         "a40",
         "a41",
         "a42",
         "a43",
         "a44",
         "a45",
         "a46",
         "a47",
         "a48",
         "a49",
         "a50",
         "a51",
         "a52",
         "a53",
         "a54",
         "a55",
         "a56",
         "a57",
         "a58",
         "a59",
         "a60",
         "a61",
         "a62",
         "a63",
         "a64",
         "a65",
         "a66",
         "a67",
         "a68",
         "a69",
         "a70",
         "a71",
         "a72",
         "a73",
         "a74",
         "a203",
         "a75",
         "a204",
         "a76",
         "a77",
         "a78",
         "a79",
         "a81",
         "a82",
         "a83",
         "a84",
         "a97",
         "a98",
         "a99",
         "a100",
         "",
         "a89",
         "a90",
         "a93",
         "a94",
         "a91",
         "a92",
         "a205",
         "a85",
         "a206",
         "a86",
         "a87",
         "a88",
         "a95",
         "a96",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "",
         "a101",
         "a102",
         "a103",
         "a104",
         "a106",
         "a107",
         "a108",
         "a112",
         "a111",
         "a110",
         "a109",
         "a120",
         "a121",
         "a122",
         "a123",
         "a124",
         "a125",
         "a126",
         "a127",
         "a128",
         "a129",
         "a130",
         "a131",
         "a132",
         "a133",
         "a134",
         "a135",
         "a136",
         "a137",
         "a138",
         "a139",
         "a140",
         "a141",
         "a142",
         "a143",
         "a144",
         "a145",
         "a146",
         "a147",
         "a148",
         "a149",
         "a150",
         "a151",
         "a152",
         "a153",
         "a154",
         "a155",
         "a156",
         "a157",
         "a158",
         "a159",
         "a160",
         "a161",
         "a163",
         "a164",
         "a196",
         "a165",
         "a192",
         "a166",
         "a167",
         "a168",
         "a169",
         "a170",
         "a171",
         "a172",
         "a173",
         "a162",
         "a174",
         "a175",
         "a176",
         "a177",
         "a178",
         "a179",
         "a193",
         "a180",
         "a199",
         "a181",
         "a200",
         "a182",
         "",
         "a201",
         "a183",
         "a184",
         "a197",
         "a185",
         "a194",
         "a198",
         "a186",
         "a195",
         "a187",
         "a188",
         "a189",
         "a190",
         "a191",
         "",
      ];
      function getEncoding(encodingName) {
         switch (encodingName) {
            case "WinAnsiEncoding":
               return WinAnsiEncoding;
            case "StandardEncoding":
               return StandardEncoding;
            case "MacRomanEncoding":
               return MacRomanEncoding;
            case "SymbolSetEncoding":
               return SymbolSetEncoding;
            case "ZapfDingbatsEncoding":
               return ZapfDingbatsEncoding;
            case "ExpertEncoding":
               return ExpertEncoding;
            case "MacExpertEncoding":
               return MacExpertEncoding;
            default:
               return null;
         }
      } // CONCATENATED MODULE: ./src/core/cff_parser.js
      var MAX_SUBR_NESTING = 10;
      var CFFStandardStrings = [
         ".notdef",
         "space",
         "exclam",
         "quotedbl",
         "numbersign",
         "dollar",
         "percent",
         "ampersand",
         "quoteright",
         "parenleft",
         "parenright",
         "asterisk",
         "plus",
         "comma",
         "hyphen",
         "period",
         "slash",
         "zero",
         "one",
         "two",
         "three",
         "four",
         "five",
         "six",
         "seven",
         "eight",
         "nine",
         "colon",
         "semicolon",
         "less",
         "equal",
         "greater",
         "question",
         "at",
         "A",
         "B",
         "C",
         "D",
         "E",
         "F",
         "G",
         "H",
         "I",
         "J",
         "K",
         "L",
         "M",
         "N",
         "O",
         "P",
         "Q",
         "R",
         "S",
         "T",
         "U",
         "V",
         "W",
         "X",
         "Y",
         "Z",
         "bracketleft",
         "backslash",
         "bracketright",
         "asciicircum",
         "underscore",
         "quoteleft",
         "a",
         "b",
         "c",
         "d",
         "e",
         "f",
         "g",
         "h",
         "i",
         "j",
         "k",
         "l",
         "m",
         "n",
         "o",
         "p",
         "q",
         "r",
         "s",
         "t",
         "u",
         "v",
         "w",
         "x",
         "y",
         "z",
         "braceleft",
         "bar",
         "braceright",
         "asciitilde",
         "exclamdown",
         "cent",
         "sterling",
         "fraction",
         "yen",
         "florin",
         "section",
         "currency",
         "quotesingle",
         "quotedblleft",
         "guillemotleft",
         "guilsinglleft",
         "guilsinglright",
         "fi",
         "fl",
         "endash",
         "dagger",
         "daggerdbl",
         "periodcentered",
         "paragraph",
         "bullet",
         "quotesinglbase",
         "quotedblbase",
         "quotedblright",
         "guillemotright",
         "ellipsis",
         "perthousand",
         "questiondown",
         "grave",
         "acute",
         "circumflex",
         "tilde",
         "macron",
         "breve",
         "dotaccent",
         "dieresis",
         "ring",
         "cedilla",
         "hungarumlaut",
         "ogonek",
         "caron",
         "emdash",
         "AE",
         "ordfeminine",
         "Lslash",
         "Oslash",
         "OE",
         "ordmasculine",
         "ae",
         "dotlessi",
         "lslash",
         "oslash",
         "oe",
         "germandbls",
         "onesuperior",
         "logicalnot",
         "mu",
         "trademark",
         "Eth",
         "onehalf",
         "plusminus",
         "Thorn",
         "onequarter",
         "divide",
         "brokenbar",
         "degree",
         "thorn",
         "threequarters",
         "twosuperior",
         "registered",
         "minus",
         "eth",
         "multiply",
         "threesuperior",
         "copyright",
         "Aacute",
         "Acircumflex",
         "Adieresis",
         "Agrave",
         "Aring",
         "Atilde",
         "Ccedilla",
         "Eacute",
         "Ecircumflex",
         "Edieresis",
         "Egrave",
         "Iacute",
         "Icircumflex",
         "Idieresis",
         "Igrave",
         "Ntilde",
         "Oacute",
         "Ocircumflex",
         "Odieresis",
         "Ograve",
         "Otilde",
         "Scaron",
         "Uacute",
         "Ucircumflex",
         "Udieresis",
         "Ugrave",
         "Yacute",
         "Ydieresis",
         "Zcaron",
         "aacute",
         "acircumflex",
         "adieresis",
         "agrave",
         "aring",
         "atilde",
         "ccedilla",
         "eacute",
         "ecircumflex",
         "edieresis",
         "egrave",
         "iacute",
         "icircumflex",
         "idieresis",
         "igrave",
         "ntilde",
         "oacute",
         "ocircumflex",
         "odieresis",
         "ograve",
         "otilde",
         "scaron",
         "uacute",
         "ucircumflex",
         "udieresis",
         "ugrave",
         "yacute",
         "ydieresis",
         "zcaron",
         "exclamsmall",
         "Hungarumlautsmall",
         "dollaroldstyle",
         "dollarsuperior",
         "ampersandsmall",
         "Acutesmall",
         "parenleftsuperior",
         "parenrightsuperior",
         "twodotenleader",
         "onedotenleader",
         "zerooldstyle",
         "oneoldstyle",
         "twooldstyle",
         "threeoldstyle",
         "fouroldstyle",
         "fiveoldstyle",
         "sixoldstyle",
         "sevenoldstyle",
         "eightoldstyle",
         "nineoldstyle",
         "commasuperior",
         "threequartersemdash",
         "periodsuperior",
         "questionsmall",
         "asuperior",
         "bsuperior",
         "centsuperior",
         "dsuperior",
         "esuperior",
         "isuperior",
         "lsuperior",
         "msuperior",
         "nsuperior",
         "osuperior",
         "rsuperior",
         "ssuperior",
         "tsuperior",
         "ff",
         "ffi",
         "ffl",
         "parenleftinferior",
         "parenrightinferior",
         "Circumflexsmall",
         "hyphensuperior",
         "Gravesmall",
         "Asmall",
         "Bsmall",
         "Csmall",
         "Dsmall",
         "Esmall",
         "Fsmall",
         "Gsmall",
         "Hsmall",
         "Ismall",
         "Jsmall",
         "Ksmall",
         "Lsmall",
         "Msmall",
         "Nsmall",
         "Osmall",
         "Psmall",
         "Qsmall",
         "Rsmall",
         "Ssmall",
         "Tsmall",
         "Usmall",
         "Vsmall",
         "Wsmall",
         "Xsmall",
         "Ysmall",
         "Zsmall",
         "colonmonetary",
         "onefitted",
         "rupiah",
         "Tildesmall",
         "exclamdownsmall",
         "centoldstyle",
         "Lslashsmall",
         "Scaronsmall",
         "Zcaronsmall",
         "Dieresissmall",
         "Brevesmall",
         "Caronsmall",
         "Dotaccentsmall",
         "Macronsmall",
         "figuredash",
         "hypheninferior",
         "Ogoneksmall",
         "Ringsmall",
         "Cedillasmall",
         "questiondownsmall",
         "oneeighth",
         "threeeighths",
         "fiveeighths",
         "seveneighths",
         "onethird",
         "twothirds",
         "zerosuperior",
         "foursuperior",
         "fivesuperior",
         "sixsuperior",
         "sevensuperior",
         "eightsuperior",
         "ninesuperior",
         "zeroinferior",
         "oneinferior",
         "twoinferior",
         "threeinferior",
         "fourinferior",
         "fiveinferior",
         "sixinferior",
         "seveninferior",
         "eightinferior",
         "nineinferior",
         "centinferior",
         "dollarinferior",
         "periodinferior",
         "commainferior",
         "Agravesmall",
         "Aacutesmall",
         "Acircumflexsmall",
         "Atildesmall",
         "Adieresissmall",
         "Aringsmall",
         "AEsmall",
         "Ccedillasmall",
         "Egravesmall",
         "Eacutesmall",
         "Ecircumflexsmall",
         "Edieresissmall",
         "Igravesmall",
         "Iacutesmall",
         "Icircumflexsmall",
         "Idieresissmall",
         "Ethsmall",
         "Ntildesmall",
         "Ogravesmall",
         "Oacutesmall",
         "Ocircumflexsmall",
         "Otildesmall",
         "Odieresissmall",
         "OEsmall",
         "Oslashsmall",
         "Ugravesmall",
         "Uacutesmall",
         "Ucircumflexsmall",
         "Udieresissmall",
         "Yacutesmall",
         "Thornsmall",
         "Ydieresissmall",
         "001.000",
         "001.001",
         "001.002",
         "001.003",
         "Black",
         "Bold",
         "Book",
         "Light",
         "Medium",
         "Regular",
         "Roman",
         "Semibold",
      ];
      var NUM_STANDARD_CFF_STRINGS = 391;
      var CharstringValidationData = [
         null,
         { id: "hstem", min: 2, stackClearing: true, stem: true },
         null,
         { id: "vstem", min: 2, stackClearing: true, stem: true },
         { id: "vmoveto", min: 1, stackClearing: true },
         { id: "rlineto", min: 2, resetStack: true },
         { id: "hlineto", min: 1, resetStack: true },
         { id: "vlineto", min: 1, resetStack: true },
         { id: "rrcurveto", min: 6, resetStack: true },
         null,
         { id: "callsubr", min: 1, undefStack: true },
         { id: "return", min: 0, undefStack: true },
         null,
         null,
         { id: "endchar", min: 0, stackClearing: true },
         null,
         null,
         null,
         { id: "hstemhm", min: 2, stackClearing: true, stem: true },
         { id: "hintmask", min: 0, stackClearing: true },
         { id: "cntrmask", min: 0, stackClearing: true },
         { id: "rmoveto", min: 2, stackClearing: true },
         { id: "hmoveto", min: 1, stackClearing: true },
         { id: "vstemhm", min: 2, stackClearing: true, stem: true },
         { id: "rcurveline", min: 8, resetStack: true },
         { id: "rlinecurve", min: 8, resetStack: true },
         { id: "vvcurveto", min: 4, resetStack: true },
         { id: "hhcurveto", min: 4, resetStack: true },
         null,
         { id: "callgsubr", min: 1, undefStack: true },
         { id: "vhcurveto", min: 4, resetStack: true },
         { id: "hvcurveto", min: 4, resetStack: true },
      ];
      var CharstringValidationData12 = [
         null,
         null,
         null,
         { id: "and", min: 2, stackDelta: -1 },
         { id: "or", min: 2, stackDelta: -1 },
         { id: "not", min: 1, stackDelta: 0 },
         null,
         null,
         null,
         { id: "abs", min: 1, stackDelta: 0 },
         {
            id: "add",
            min: 2,
            stackDelta: -1,
            stackFn: function stackFn(stack, index) {
               stack[index - 2] = stack[index - 2] + stack[index - 1];
            },
         },
         {
            id: "sub",
            min: 2,
            stackDelta: -1,
            stackFn: function stackFn(stack, index) {
               stack[index - 2] = stack[index - 2] - stack[index - 1];
            },
         },
         {
            id: "div",
            min: 2,
            stackDelta: -1,
            stackFn: function stackFn(stack, index) {
               stack[index - 2] = stack[index - 2] / stack[index - 1];
            },
         },
         null,
         {
            id: "neg",
            min: 1,
            stackDelta: 0,
            stackFn: function stackFn(stack, index) {
               stack[index - 1] = -stack[index - 1];
            },
         },
         { id: "eq", min: 2, stackDelta: -1 },
         null,
         null,
         { id: "drop", min: 1, stackDelta: -1 },
         null,
         { id: "put", min: 2, stackDelta: -2 },
         { id: "get", min: 1, stackDelta: 0 },
         { id: "ifelse", min: 4, stackDelta: -3 },
         { id: "random", min: 0, stackDelta: 1 },
         {
            id: "mul",
            min: 2,
            stackDelta: -1,
            stackFn: function stackFn(stack, index) {
               stack[index - 2] = stack[index - 2] * stack[index - 1];
            },
         },
         null,
         { id: "sqrt", min: 1, stackDelta: 0 },
         { id: "dup", min: 1, stackDelta: 1 },
         { id: "exch", min: 2, stackDelta: 0 },
         { id: "index", min: 2, stackDelta: 0 },
         { id: "roll", min: 3, stackDelta: -2 },
         null,
         null,
         null,
         { id: "hflex", min: 7, resetStack: true },
         { id: "flex", min: 13, resetStack: true },
         { id: "hflex1", min: 9, resetStack: true },
         { id: "flex1", min: 11, resetStack: true },
      ];
      var CFFParser = /*#__PURE__*/ (function () {
         function CFFParser(file, properties, seacAnalysisEnabled) {
            _classCallCheck(this, CFFParser);
            this.bytes = file.getBytes();
            this.properties = properties;
            this.seacAnalysisEnabled = !!seacAnalysisEnabled;
         }
         return _createClass(CFFParser, [
            {
               key: "parse",
               value: function parse() {
                  var properties = this.properties;
                  var cff = new CFF();
                  this.cff = cff;
                  var header = this.parseHeader();
                  var nameIndex = this.parseIndex(header.endPos);
                  var topDictIndex = this.parseIndex(nameIndex.endPos);
                  var stringIndex = this.parseIndex(topDictIndex.endPos);
                  var globalSubrIndex = this.parseIndex(stringIndex.endPos);
                  var topDictParsed = this.parseDict(topDictIndex.obj.get(0));
                  var topDict = this.createDict(
                     CFFTopDict,
                     topDictParsed,
                     cff.strings,
                  );
                  cff.header = header.obj;
                  cff.names = this.parseNameIndex(nameIndex.obj);
                  cff.strings = this.parseStringIndex(stringIndex.obj);
                  cff.topDict = topDict;
                  cff.globalSubrIndex = globalSubrIndex.obj;
                  this.parsePrivateDict(cff.topDict);
                  cff.isCIDFont = topDict.hasName("ROS");
                  var charStringOffset = topDict.getByName("CharStrings");
                  var charStringIndex = this.parseIndex(charStringOffset).obj;
                  var fontMatrix = topDict.getByName("FontMatrix");
                  if (fontMatrix) {
                     properties.fontMatrix = fontMatrix;
                  }
                  var fontBBox = topDict.getByName("FontBBox");
                  if (fontBBox) {
                     properties.ascent = Math.max(fontBBox[3], fontBBox[1]);
                     properties.descent = Math.min(fontBBox[1], fontBBox[3]);
                     properties.ascentScaled = true;
                  }
                  var charset, encoding;
                  if (cff.isCIDFont) {
                     var fdArrayIndex = this.parseIndex(
                        topDict.getByName("FDArray"),
                     ).obj;
                     for (var i = 0, ii = fdArrayIndex.count; i < ii; ++i) {
                        var dictRaw = fdArrayIndex.get(i);
                        var fontDict = this.createDict(
                           CFFTopDict,
                           this.parseDict(dictRaw),
                           cff.strings,
                        );
                        this.parsePrivateDict(fontDict);
                        cff.fdArray.push(fontDict);
                     }
                     encoding = null;
                     charset = this.parseCharsets(
                        topDict.getByName("charset"),
                        charStringIndex.count,
                        cff.strings,
                        true,
                     );
                     cff.fdSelect = this.parseFDSelect(
                        topDict.getByName("FDSelect"),
                        charStringIndex.count,
                     );
                  } else {
                     charset = this.parseCharsets(
                        topDict.getByName("charset"),
                        charStringIndex.count,
                        cff.strings,
                        false,
                     );
                     encoding = this.parseEncoding(
                        topDict.getByName("Encoding"),
                        properties,
                        cff.strings,
                        charset.charset,
                     );
                  }
                  cff.charset = charset;
                  cff.encoding = encoding;
                  var charStringsAndSeacs = this.parseCharStrings({
                     charStrings: charStringIndex,
                     localSubrIndex: topDict.privateDict.subrsIndex,
                     globalSubrIndex: globalSubrIndex.obj,
                     fdSelect: cff.fdSelect,
                     fdArray: cff.fdArray,
                     privateDict: topDict.privateDict,
                  });
                  cff.charStrings = charStringsAndSeacs.charStrings;
                  cff.seacs = charStringsAndSeacs.seacs;
                  cff.widths = charStringsAndSeacs.widths;
                  return cff;
               },
            },
            {
               key: "parseHeader",
               value: function parseHeader() {
                  var bytes = this.bytes;
                  var bytesLength = bytes.length;
                  var offset = 0;
                  while (offset < bytesLength && bytes[offset] !== 1) {
                     ++offset;
                  }
                  if (offset >= bytesLength) {
                     throw new FormatError("Invalid CFF header");
                  }
                  if (offset !== 0) {
                     info("cff data is shifted");
                     bytes = bytes.subarray(offset);
                     this.bytes = bytes;
                  }
                  var major = bytes[0];
                  var minor = bytes[1];
                  var hdrSize = bytes[2];
                  var offSize = bytes[3];
                  var header = new CFFHeader(major, minor, hdrSize, offSize);
                  return { obj: header, endPos: hdrSize };
               },
            },
            {
               key: "parseDict",
               value: function parseDict(dict) {
                  var pos = 0;
                  function parseOperand() {
                     var value = dict[pos++];
                     if (value === 30) {
                        return parseFloatOperand();
                     } else if (value === 28) {
                        value = dict[pos++];
                        value = ((value << 24) | (dict[pos++] << 16)) >> 16;
                        return value;
                     } else if (value === 29) {
                        value = dict[pos++];
                        value = (value << 8) | dict[pos++];
                        value = (value << 8) | dict[pos++];
                        value = (value << 8) | dict[pos++];
                        return value;
                     } else if (value >= 32 && value <= 246) {
                        return value - 139;
                     } else if (value >= 247 && value <= 250) {
                        return (value - 247) * 256 + dict[pos++] + 108;
                     } else if (value >= 251 && value <= 254) {
                        return -((value - 251) * 256) - dict[pos++] - 108;
                     }
                     warn(
                        'CFFParser_parseDict: "' + value + '" is a reserved command.',
                     );
                     return NaN;
                  }
                  function parseFloatOperand() {
                     var str = "";
                     var eof = 15;
                     var lookup = [
                        "0",
                        "1",
                        "2",
                        "3",
                        "4",
                        "5",
                        "6",
                        "7",
                        "8",
                        "9",
                        ".",
                        "E",
                        "E-",
                        null,
                        "-",
                     ];
                     var length = dict.length;
                     while (pos < length) {
                        var b = dict[pos++];
                        var b1 = b >> 4;
                        var b2 = b & 15;
                        if (b1 === eof) {
                           break;
                        }
                        str += lookup[b1];
                        if (b2 === eof) {
                           break;
                        }
                        str += lookup[b2];
                     }
                     return parseFloat(str);
                  }
                  var operands = [];
                  var entries = [];
                  pos = 0;
                  var end = dict.length;
                  while (pos < end) {
                     var b = dict[pos];
                     if (b <= 21) {
                        if (b === 12) {
                           b = (b << 8) | dict[++pos];
                        }
                        entries.push([b, operands]);
                        operands = [];
                        ++pos;
                     } else {
                        operands.push(parseOperand());
                     }
                  }
                  return entries;
               },
            },
            {
               key: "parseIndex",
               value: function parseIndex(pos) {
                  var cffIndex = new CFFIndex();
                  var bytes = this.bytes;
                  var count = (bytes[pos++] << 8) | bytes[pos++];
                  var offsets = [];
                  var end = pos;
                  var i, ii;
                  if (count !== 0) {
                     var offsetSize = bytes[pos++];
                     var startPos = pos + (count + 1) * offsetSize - 1;
                     for (i = 0, ii = count + 1; i < ii; ++i) {
                        var offset = 0;
                        for (var j = 0; j < offsetSize; ++j) {
                           offset <<= 8;
                           offset += bytes[pos++];
                        }
                        offsets.push(startPos + offset);
                     }
                     end = offsets[count];
                  }
                  for (i = 0, ii = offsets.length - 1; i < ii; ++i) {
                     var offsetStart = offsets[i];
                     var offsetEnd = offsets[i + 1];
                     cffIndex.add(bytes.subarray(offsetStart, offsetEnd));
                  }
                  return { obj: cffIndex, endPos: end };
               },
            },
            {
               key: "parseNameIndex",
               value: function parseNameIndex(index) {
                  var names = [];
                  for (var i = 0, ii = index.count; i < ii; ++i) {
                     var name = index.get(i);
                     names.push(bytesToString(name));
                  }
                  return names;
               },
            },
            {
               key: "parseStringIndex",
               value: function parseStringIndex(index) {
                  var strings = new CFFStrings();
                  for (var i = 0, ii = index.count; i < ii; ++i) {
                     var data = index.get(i);
                     strings.add(bytesToString(data));
                  }
                  return strings;
               },
            },
            {
               key: "createDict",
               value: function createDict(Type, dict, strings) {
                  var cffDict = new Type(strings);
                  var _iterator23 = _createForOfIteratorHelper(dict),
                     _step23;
                  try {
                     for (_iterator23.s(); !(_step23 = _iterator23.n()).done; ) {
                        var _step23$value = _slicedToArray(_step23.value, 2),
                           key = _step23$value[0],
                           value = _step23$value[1];
                        cffDict.setByKey(key, value);
                     }
                  } catch (err) {
                     _iterator23.e(err);
                  } finally {
                     _iterator23.f();
                  }
                  return cffDict;
               },
            },
            {
               key: "parseCharString",
               value: function parseCharString(
                  state,
                  data,
                  localSubrIndex,
                  globalSubrIndex,
               ) {
                  if (!data || state.callDepth > MAX_SUBR_NESTING) {
                     return false;
                  }
                  var stackSize = state.stackSize;
                  var stack = state.stack;
                  var length = data.length;
                  for (var j = 0; j < length; ) {
                     var value = data[j++];
                     var validationCommand = null;
                     if (value === 12) {
                        var q = data[j++];
                        if (q === 0) {
                           data[j - 2] = 139;
                           data[j - 1] = 22;
                           stackSize = 0;
                        } else {
                           validationCommand = CharstringValidationData12[q];
                        }
                     } else if (value === 28) {
                        stack[stackSize] =
                           ((data[j] << 24) | (data[j + 1] << 16)) >> 16;
                        j += 2;
                        stackSize++;
                     } else if (value === 14) {
                        if (stackSize >= 4) {
                           stackSize -= 4;
                           if (this.seacAnalysisEnabled) {
                              state.seac = stack.slice(stackSize, stackSize + 4);
                              return false;
                           }
                        }
                        validationCommand = CharstringValidationData[value];
                     } else if (value >= 32 && value <= 246) {
                        stack[stackSize] = value - 139;
                        stackSize++;
                     } else if (value >= 247 && value <= 254) {
                        stack[stackSize] =
                           value < 251
                              ? ((value - 247) << 8) + data[j] + 108
                              : -((value - 251) << 8) - data[j] - 108;
                        j++;
                        stackSize++;
                     } else if (value === 255) {
                        stack[stackSize] =
                           ((data[j] << 24) |
                              (data[j + 1] << 16) |
                              (data[j + 2] << 8) |
                              data[j + 3]) /
                           65536;
                        j += 4;
                        stackSize++;
                     } else if (value === 19 || value === 20) {
                        state.hints += stackSize >> 1;
                        if (state.hints === 0) {
                           data.copyWithin(j - 1, j, -1);
                           j -= 1;
                           length -= 1;
                           continue;
                        }
                        j += (state.hints + 7) >> 3;
                        stackSize %= 2;
                        validationCommand = CharstringValidationData[value];
                     } else if (value === 10 || value === 29) {
                        var subrsIndex =
                           value === 10 ? localSubrIndex : globalSubrIndex;
                        if (!subrsIndex) {
                           validationCommand = CharstringValidationData[value];
                           warn("Missing subrsIndex for " + validationCommand.id);
                           return false;
                        }
                        var bias = 32768;
                        if (subrsIndex.count < 1240) {
                           bias = 107;
                        } else if (subrsIndex.count < 33900) {
                           bias = 1131;
                        }
                        var subrNumber = stack[--stackSize] + bias;
                        if (
                           subrNumber < 0 ||
                           subrNumber >= subrsIndex.count ||
                           isNaN(subrNumber)
                        ) {
                           validationCommand = CharstringValidationData[value];
                           warn("Out of bounds subrIndex for " + validationCommand.id);
                           return false;
                        }
                        state.stackSize = stackSize;
                        state.callDepth++;
                        var valid = this.parseCharString(
                           state,
                           subrsIndex.get(subrNumber),
                           localSubrIndex,
                           globalSubrIndex,
                        );
                        if (!valid) {
                           return false;
                        }
                        state.callDepth--;
                        stackSize = state.stackSize;
                        continue;
                     } else if (value === 11) {
                        state.stackSize = stackSize;
                        return true;
                     } else if (value === 0 && j === data.length) {
                        data[j - 1] = 14;
                        validationCommand = CharstringValidationData[14];
                     } else if (value === 9) {
                        data.copyWithin(j - 1, j, -1);
                        j -= 1;
                        length -= 1;
                        continue;
                     } else {
                        validationCommand = CharstringValidationData[value];
                     }
                     if (validationCommand) {
                        if (validationCommand.stem) {
                           state.hints += stackSize >> 1;
                           if (value === 3 || value === 23) {
                              state.hasVStems = true;
                           } else if (state.hasVStems && (value === 1 || value === 18)) {
                              warn("CFF stem hints are in wrong order");
                              data[j - 1] = value === 1 ? 3 : 23;
                           }
                        }
                        if ("min" in validationCommand) {
                           if (!state.undefStack && stackSize < validationCommand.min) {
                              warn(
                                 "Not enough parameters for " +
                                 validationCommand.id +
                                 "; actual: " +
                                 stackSize +
                                 ", expected: " +
                                 validationCommand.min,
                              );
                              if (stackSize === 0) {
                                 data[j - 1] = 14;
                                 return true;
                              }
                              return false;
                           }
                        }
                        if (
                           state.firstStackClearing &&
                           validationCommand.stackClearing
                        ) {
                           state.firstStackClearing = false;
                           stackSize -= validationCommand.min;
                           if (stackSize >= 2 && validationCommand.stem) {
                              stackSize %= 2;
                           } else if (stackSize > 1) {
                              warn(
                                 "Found too many parameters for stack-clearing command",
                              );
                           }
                           if (stackSize > 0) {
                              state.width = stack[stackSize - 1];
                           }
                        }
                        if ("stackDelta" in validationCommand) {
                           if ("stackFn" in validationCommand) {
                              validationCommand.stackFn(stack, stackSize);
                           }
                           stackSize += validationCommand.stackDelta;
                        } else if (validationCommand.stackClearing) {
                           stackSize = 0;
                        } else if (validationCommand.resetStack) {
                           stackSize = 0;
                           state.undefStack = false;
                        } else if (validationCommand.undefStack) {
                           stackSize = 0;
                           state.undefStack = true;
                           state.firstStackClearing = false;
                        }
                     }
                  }
                  if (length < data.length) {
                     data.fill(14, length);
                  }
                  state.stackSize = stackSize;
                  return true;
               },
            },
            {
               key: "parseCharStrings",
               value: function parseCharStrings(_ref23) {
                  var charStrings = _ref23.charStrings,
                     localSubrIndex = _ref23.localSubrIndex,
                     globalSubrIndex = _ref23.globalSubrIndex,
                     fdSelect = _ref23.fdSelect,
                     fdArray = _ref23.fdArray,
                     privateDict = _ref23.privateDict;
                  var seacs = [];
                  var widths = [];
                  var count = charStrings.count;
                  for (var i = 0; i < count; i++) {
                     var charstring = charStrings.get(i);
                     var state = {
                        callDepth: 0,
                        stackSize: 0,
                        stack: [],
                        undefStack: true,
                        hints: 0,
                        firstStackClearing: true,
                        seac: null,
                        width: null,
                        hasVStems: false,
                     };
                     var valid = true;
                     var localSubrToUse = null;
                     var privateDictToUse = privateDict;
                     if (fdSelect && fdArray.length) {
                        var fdIndex = fdSelect.getFDIndex(i);
                        if (fdIndex === -1) {
                           warn("Glyph index is not in fd select.");
                           valid = false;
                        }
                        if (fdIndex >= fdArray.length) {
                           warn("Invalid fd index for glyph index.");
                           valid = false;
                        }
                        if (valid) {
                           privateDictToUse = fdArray[fdIndex].privateDict;
                           localSubrToUse = privateDictToUse.subrsIndex;
                        }
                     } else if (localSubrIndex) {
                        localSubrToUse = localSubrIndex;
                     }
                     if (valid) {
                        valid = this.parseCharString(
                           state,
                           charstring,
                           localSubrToUse,
                           globalSubrIndex,
                        );
                     }
                     if (state.width !== null) {
                        var nominalWidth = privateDictToUse.getByName("nominalWidthX");
                        widths[i] = nominalWidth + state.width;
                     } else {
                        var defaultWidth = privateDictToUse.getByName("defaultWidthX");
                        widths[i] = defaultWidth;
                     }
                     if (state.seac !== null) {
                        seacs[i] = state.seac;
                     }
                     if (!valid) {
                        charStrings.set(i, new Uint8Array([14]));
                     }
                  }
                  return { charStrings: charStrings, seacs: seacs, widths: widths };
               },
            },
            {
               key: "emptyPrivateDictionary",
               value: function emptyPrivateDictionary(parentDict) {
                  var privateDict = this.createDict(
                     CFFPrivateDict,
                     [],
                     parentDict.strings,
                  );
                  parentDict.setByKey(18, [0, 0]);
                  parentDict.privateDict = privateDict;
               },
            },
            {
               key: "parsePrivateDict",
               value: function parsePrivateDict(parentDict) {
                  if (!parentDict.hasName("Private")) {
                     this.emptyPrivateDictionary(parentDict);
                     return;
                  }
                  var privateOffset = parentDict.getByName("Private");
                  if (!Array.isArray(privateOffset) || privateOffset.length !== 2) {
                     parentDict.removeByName("Private");
                     return;
                  }
                  var size = privateOffset[0];
                  var offset = privateOffset[1];
                  if (size === 0 || offset >= this.bytes.length) {
                     this.emptyPrivateDictionary(parentDict);
                     return;
                  }
                  var privateDictEnd = offset + size;
                  var dictData = this.bytes.subarray(offset, privateDictEnd);
                  var dict = this.parseDict(dictData);
                  var privateDict = this.createDict(
                     CFFPrivateDict,
                     dict,
                     parentDict.strings,
                  );
                  parentDict.privateDict = privateDict;
                  if (privateDict.getByName("ExpansionFactor") === 0) {
                     privateDict.setByName("ExpansionFactor", 0.06);
                  }
                  if (!privateDict.getByName("Subrs")) {
                     return;
                  }
                  var subrsOffset = privateDict.getByName("Subrs");
                  var relativeOffset = offset + subrsOffset;
                  if (subrsOffset === 0 || relativeOffset >= this.bytes.length) {
                     this.emptyPrivateDictionary(parentDict);
                     return;
                  }
                  var subrsIndex = this.parseIndex(relativeOffset);
                  privateDict.subrsIndex = subrsIndex.obj;
               },
            },
            {
               key: "parseCharsets",
               value: function parseCharsets(pos, length, strings, cid) {
                  if (pos === 0) {
                     return new CFFCharset(
                        true,
                        CFFCharsetPredefinedTypes.ISO_ADOBE,
                        ISOAdobeCharset,
                     );
                  } else if (pos === 1) {
                     return new CFFCharset(
                        true,
                        CFFCharsetPredefinedTypes.EXPERT,
                        ExpertCharset,
                     );
                  } else if (pos === 2) {
                     return new CFFCharset(
                        true,
                        CFFCharsetPredefinedTypes.EXPERT_SUBSET,
                        ExpertSubsetCharset,
                     );
                  }
                  var bytes = this.bytes;
                  var start = pos;
                  var format = bytes[pos++];
                  var charset = [cid ? 0 : ".notdef"];
                  var id, count, i;
                  length -= 1;
                  switch (format) {
                     case 0:
                        for (i = 0; i < length; i++) {
                           id = (bytes[pos++] << 8) | bytes[pos++];
                           charset.push(cid ? id : strings.get(id));
                        }
                        break;
                     case 1:
                        while (charset.length <= length) {
                           id = (bytes[pos++] << 8) | bytes[pos++];
                           count = bytes[pos++];
                           for (i = 0; i <= count; i++) {
                              charset.push(cid ? id++ : strings.get(id++));
                           }
                        }
                        break;
                     case 2:
                        while (charset.length <= length) {
                           id = (bytes[pos++] << 8) | bytes[pos++];
                           count = (bytes[pos++] << 8) | bytes[pos++];
                           for (i = 0; i <= count; i++) {
                              charset.push(cid ? id++ : strings.get(id++));
                           }
                        }
                        break;
                     default:
                        throw new FormatError("Unknown charset format");
                  }
                  var end = pos;
                  var raw = bytes.subarray(start, end);
                  return new CFFCharset(false, format, charset, raw);
               },
            },
            {
               key: "parseEncoding",
               value: function parseEncoding(pos, properties, strings, charset) {
                  var encoding = Object.create(null);
                  var bytes = this.bytes;
                  var predefined = false;
                  var format, i, ii;
                  var raw = null;
                  function readSupplement() {
                     var supplementsCount = bytes[pos++];
                     for (i = 0; i < supplementsCount; i++) {
                        var code = bytes[pos++];
                        var sid = (bytes[pos++] << 8) + (bytes[pos++] & 0xff);
                        encoding[code] = charset.indexOf(strings.get(sid));
                     }
                  }
                  if (pos === 0 || pos === 1) {
                     predefined = true;
                     format = pos;
                     var baseEncoding = pos ? ExpertEncoding : StandardEncoding;
                     for (i = 0, ii = charset.length; i < ii; i++) {
                        var index = baseEncoding.indexOf(charset[i]);
                        if (index !== -1) {
                           encoding[index] = i;
                        }
                     }
                  } else {
                     var dataStart = pos;
                     format = bytes[pos++];
                     switch (format & 0x7f) {
                        case 0:
                           var glyphsCount = bytes[pos++];
                           for (i = 1; i <= glyphsCount; i++) {
                              encoding[bytes[pos++]] = i;
                           }
                           break;
                        case 1:
                           var rangesCount = bytes[pos++];
                           var gid = 1;
                           for (i = 0; i < rangesCount; i++) {
                              var start = bytes[pos++];
                              var left = bytes[pos++];
                              for (var j = start; j <= start + left; j++) {
                                 encoding[j] = gid++;
                              }
                           }
                           break;
                        default:
                           throw new FormatError(
                              "Unknown encoding format: ".concat(format, " in CFF"),
                           );
                     }
                     var dataEnd = pos;
                     if (format & 0x80) {
                        bytes[dataStart] &= 0x7f;
                        readSupplement();
                     }
                     raw = bytes.subarray(dataStart, dataEnd);
                  }
                  format &= 0x7f;
                  return new CFFEncoding(predefined, format, encoding, raw);
               },
            },
            {
               key: "parseFDSelect",
               value: function parseFDSelect(pos, length) {
                  var bytes = this.bytes;
                  var format = bytes[pos++];
                  var fdSelect = [];
                  var i;
                  switch (format) {
                     case 0:
                        for (i = 0; i < length; ++i) {
                           var id = bytes[pos++];
                           fdSelect.push(id);
                        }
                        break;
                     case 3:
                        var rangesCount = (bytes[pos++] << 8) | bytes[pos++];
                        for (i = 0; i < rangesCount; ++i) {
                           var first = (bytes[pos++] << 8) | bytes[pos++];
                           if (i === 0 && first !== 0) {
                              warn(
                                 "parseFDSelect: The first range must have a first GID of 0" +
                                 " -- trying to recover.",
                              );
                              first = 0;
                           }
                           var fdIndex = bytes[pos++];
                           var next = (bytes[pos] << 8) | bytes[pos + 1];
                           for (var j = first; j < next; ++j) {
                              fdSelect.push(fdIndex);
                           }
                        }
                        pos += 2;
                        break;
                     default:
                        throw new FormatError(
                           'parseFDSelect: Unknown format "'.concat(format, '".'),
                        );
                  }
                  if (fdSelect.length !== length) {
                     throw new FormatError("parseFDSelect: Invalid font data.");
                  }
                  return new CFFFDSelect(format, fdSelect);
               },
            },
         ]);
      })();
      var CFF = /*#__PURE__*/ (function () {
         function CFF() {
            _classCallCheck(this, CFF);
            this.header = null;
            this.names = [];
            this.topDict = null;
            this.strings = new CFFStrings();
            this.globalSubrIndex = null;
            this.encoding = null;
            this.charset = null;
            this.charStrings = null;
            this.fdArray = [];
            this.fdSelect = null;
            this.isCIDFont = false;
         }
         return _createClass(CFF, [
            {
               key: "duplicateFirstGlyph",
               value: function duplicateFirstGlyph() {
                  if (this.charStrings.count >= 65535) {
                     warn("Not enough space in charstrings to duplicate first glyph.");
                     return;
                  }
                  var glyphZero = this.charStrings.get(0);
                  this.charStrings.add(glyphZero);
                  if (this.isCIDFont) {
                     this.fdSelect.fdSelect.push(this.fdSelect.fdSelect[0]);
                  }
               },
            },
            {
               key: "hasGlyphId",
               value: function hasGlyphId(id) {
                  if (id < 0 || id >= this.charStrings.count) {
                     return false;
                  }
                  var glyph = this.charStrings.get(id);
                  return glyph.length > 0;
               },
            },
         ]);
      })();
      var CFFHeader = /*#__PURE__*/ _createClass(
         function CFFHeader(major, minor, hdrSize, offSize) {
            _classCallCheck(this, CFFHeader);
            this.major = major;
            this.minor = minor;
            this.hdrSize = hdrSize;
            this.offSize = offSize;
         },
      );
      var CFFStrings = /*#__PURE__*/ (function () {
         function CFFStrings() {
            _classCallCheck(this, CFFStrings);
            this.strings = [];
         }
         return _createClass(CFFStrings, [
            {
               key: "get",
               value: function get(index) {
                  if (index >= 0 && index <= NUM_STANDARD_CFF_STRINGS - 1) {
                     return CFFStandardStrings[index];
                  }
                  if (index - NUM_STANDARD_CFF_STRINGS <= this.strings.length) {
                     return this.strings[index - NUM_STANDARD_CFF_STRINGS];
                  }
                  return CFFStandardStrings[0];
               },
            },
            {
               key: "getSID",
               value: function getSID(str) {
                  var index = CFFStandardStrings.indexOf(str);
                  if (index !== -1) {
                     return index;
                  }
                  index = this.strings.indexOf(str);
                  if (index !== -1) {
                     return index + NUM_STANDARD_CFF_STRINGS;
                  }
                  return -1;
               },
            },
            {
               key: "add",
               value: function add(value) {
                  this.strings.push(value);
               },
            },
            {
               key: "count",
               get: function get() {
                  return this.strings.length;
               },
            },
         ]);
      })();
      var CFFIndex = /*#__PURE__*/ (function () {
         function CFFIndex() {
            _classCallCheck(this, CFFIndex);
            this.objects = [];
            this.length = 0;
         }
         return _createClass(CFFIndex, [
            {
               key: "add",
               value: function add(data) {
                  this.length += data.length;
                  this.objects.push(data);
               },
            },
            {
               key: "set",
               value: function set(index, data) {
                  this.length += data.length - this.objects[index].length;
                  this.objects[index] = data;
               },
            },
            {
               key: "get",
               value: function get(index) {
                  return this.objects[index];
               },
            },
            {
               key: "count",
               get: function get() {
                  return this.objects.length;
               },
            },
         ]);
      })();
      var CFFDict = /*#__PURE__*/ (function () {
         function CFFDict(tables, strings) {
            _classCallCheck(this, CFFDict);
            this.keyToNameMap = tables.keyToNameMap;
            this.nameToKeyMap = tables.nameToKeyMap;
            this.defaults = tables.defaults;
            this.types = tables.types;
            this.opcodes = tables.opcodes;
            this.order = tables.order;
            this.strings = strings;
            this.values = Object.create(null);
         }
         return _createClass(
            CFFDict,
            [
               {
                  key: "setByKey",
                  value: function setByKey(key, value) {
                     if (!(key in this.keyToNameMap)) {
                        return false;
                     }
                     if (value.length === 0) {
                        return true;
                     }
                     var _iterator24 = _createForOfIteratorHelper(value),
                        _step24;
                     try {
                        for (_iterator24.s(); !(_step24 = _iterator24.n()).done; ) {
                           var val = _step24.value;
                           if (isNaN(val)) {
                              warn(
                                 'Invalid CFFDict value: "'
                                    .concat(value, '" for key "')
                                    .concat(key, '".'),
                              );
                              return true;
                           }
                        }
                     } catch (err) {
                        _iterator24.e(err);
                     } finally {
                        _iterator24.f();
                     }
                     var type = this.types[key];
                     if (type === "num" || type === "sid" || type === "offset") {
                        value = value[0];
                     }
                     this.values[key] = value;
                     return true;
                  },
               },
               {
                  key: "setByName",
                  value: function setByName(name, value) {
                     if (!(name in this.nameToKeyMap)) {
                        throw new FormatError(
                           'Invalid dictionary name "'.concat(name, '"'),
                        );
                     }
                     this.values[this.nameToKeyMap[name]] = value;
                  },
               },
               {
                  key: "hasName",
                  value: function hasName(name) {
                     return this.nameToKeyMap[name] in this.values;
                  },
               },
               {
                  key: "getByName",
                  value: function getByName(name) {
                     if (!(name in this.nameToKeyMap)) {
                        throw new FormatError(
                           "Invalid dictionary name ".concat(name, '"'),
                        );
                     }
                     var key = this.nameToKeyMap[name];
                     if (!(key in this.values)) {
                        return this.defaults[key];
                     }
                     return this.values[key];
                  },
               },
               {
                  key: "removeByName",
                  value: function removeByName(name) {
                     delete this.values[this.nameToKeyMap[name]];
                  },
               },
            ],
            [
               {
                  key: "createTables",
                  value: function createTables(layout) {
                     var tables = {
                        keyToNameMap: {},
                        nameToKeyMap: {},
                        defaults: {},
                        types: {},
                        opcodes: {},
                        order: [],
                     };
                     var _iterator25 = _createForOfIteratorHelper(layout),
                        _step25;
                     try {
                        for (_iterator25.s(); !(_step25 = _iterator25.n()).done; ) {
                           var entry = _step25.value;
                           var key = Array.isArray(entry[0])
                              ? (entry[0][0] << 8) + entry[0][1]
                              : entry[0];
                           tables.keyToNameMap[key] = entry[1];
                           tables.nameToKeyMap[entry[1]] = key;
                           tables.types[key] = entry[2];
                           tables.defaults[key] = entry[3];
                           tables.opcodes[key] = Array.isArray(entry[0])
                              ? entry[0]
                              : [entry[0]];
                           tables.order.push(key);
                        }
                     } catch (err) {
                        _iterator25.e(err);
                     } finally {
                        _iterator25.f();
                     }
                     return tables;
                  },
               },
            ],
         );
      })();
      var CFFTopDictLayout = [
         [[12, 30], "ROS", ["sid", "sid", "num"], null],
         [[12, 20], "SyntheticBase", "num", null],
         [0, "version", "sid", null],
         [1, "Notice", "sid", null],
         [[12, 0], "Copyright", "sid", null],
         [2, "FullName", "sid", null],
         [3, "FamilyName", "sid", null],
         [4, "Weight", "sid", null],
         [[12, 1], "isFixedPitch", "num", 0],
         [[12, 2], "ItalicAngle", "num", 0],
         [[12, 3], "UnderlinePosition", "num", -100],
         [[12, 4], "UnderlineThickness", "num", 50],
         [[12, 5], "PaintType", "num", 0],
         [[12, 6], "CharstringType", "num", 2],
         [
            [12, 7],
            "FontMatrix",
            ["num", "num", "num", "num", "num", "num"],
            [0.001, 0, 0, 0.001, 0, 0],
         ],
         [13, "UniqueID", "num", null],
         [5, "FontBBox", ["num", "num", "num", "num"], [0, 0, 0, 0]],
         [[12, 8], "StrokeWidth", "num", 0],
         [14, "XUID", "array", null],
         [15, "charset", "offset", 0],
         [16, "Encoding", "offset", 0],
         [17, "CharStrings", "offset", 0],
         [18, "Private", ["offset", "offset"], null],
         [[12, 21], "PostScript", "sid", null],
         [[12, 22], "BaseFontName", "sid", null],
         [[12, 23], "BaseFontBlend", "delta", null],
         [[12, 31], "CIDFontVersion", "num", 0],
         [[12, 32], "CIDFontRevision", "num", 0],
         [[12, 33], "CIDFontType", "num", 0],
         [[12, 34], "CIDCount", "num", 8720],
         [[12, 35], "UIDBase", "num", null],
         [[12, 37], "FDSelect", "offset", null],
         [[12, 36], "FDArray", "offset", null],
         [[12, 38], "FontName", "sid", null],
      ];
      var CFFTopDict = /*#__PURE__*/ (function (_CFFDict) {
         function CFFTopDict(strings) {
            var _this28;
            _classCallCheck(this, CFFTopDict);
            _this28 = _callSuper(this, CFFTopDict, [CFFTopDict.tables, strings]);
            _this28.privateDict = null;
            return _this28;
         }
         _inherits(CFFTopDict, _CFFDict);
         return _createClass(CFFTopDict, null, [
            {
               key: "tables",
               get: function get() {
                  return shadow(this, "tables", this.createTables(CFFTopDictLayout));
               },
            },
         ]);
      })(CFFDict);
      var CFFPrivateDictLayout = [
         [6, "BlueValues", "delta", null],
         [7, "OtherBlues", "delta", null],
         [8, "FamilyBlues", "delta", null],
         [9, "FamilyOtherBlues", "delta", null],
         [[12, 9], "BlueScale", "num", 0.039625],
         [[12, 10], "BlueShift", "num", 7],
         [[12, 11], "BlueFuzz", "num", 1],
         [10, "StdHW", "num", null],
         [11, "StdVW", "num", null],
         [[12, 12], "StemSnapH", "delta", null],
         [[12, 13], "StemSnapV", "delta", null],
         [[12, 14], "ForceBold", "num", 0],
         [[12, 17], "LanguageGroup", "num", 0],
         [[12, 18], "ExpansionFactor", "num", 0.06],
         [[12, 19], "initialRandomSeed", "num", 0],
         [20, "defaultWidthX", "num", 0],
         [21, "nominalWidthX", "num", 0],
         [19, "Subrs", "offset", null],
      ];
      var CFFPrivateDict = /*#__PURE__*/ (function (_CFFDict2) {
         function CFFPrivateDict(strings) {
            var _this29;
            _classCallCheck(this, CFFPrivateDict);
            _this29 = _callSuper(this, CFFPrivateDict, [
               CFFPrivateDict.tables,
               strings,
            ]);
            _this29.subrsIndex = null;
            return _this29;
         }
         _inherits(CFFPrivateDict, _CFFDict2);
         return _createClass(CFFPrivateDict, null, [
            {
               key: "tables",
               get: function get() {
                  return shadow(
                     this,
                     "tables",
                     this.createTables(CFFPrivateDictLayout),
                  );
               },
            },
         ]);
      })(CFFDict);
      var CFFCharsetPredefinedTypes = {
         ISO_ADOBE: 0,
         EXPERT: 1,
         EXPERT_SUBSET: 2,
      };
      var CFFCharset = /*#__PURE__*/ _createClass(
         function CFFCharset(predefined, format, charset, raw) {
            _classCallCheck(this, CFFCharset);
            this.predefined = predefined;
            this.format = format;
            this.charset = charset;
            this.raw = raw;
         },
      );
      var CFFEncoding = /*#__PURE__*/ _createClass(
         function CFFEncoding(predefined, format, encoding, raw) {
            _classCallCheck(this, CFFEncoding);
            this.predefined = predefined;
            this.format = format;
            this.encoding = encoding;
            this.raw = raw;
         },
      );
      var CFFFDSelect = /*#__PURE__*/ (function () {
         function CFFFDSelect(format, fdSelect) {
            _classCallCheck(this, CFFFDSelect);
            this.format = format;
            this.fdSelect = fdSelect;
         }
         return _createClass(CFFFDSelect, [
            {
               key: "getFDIndex",
               value: function getFDIndex(glyphIndex) {
                  if (glyphIndex < 0 || glyphIndex >= this.fdSelect.length) {
                     return -1;
                  }
                  return this.fdSelect[glyphIndex];
               },
            },
         ]);
      })();
      var CFFOffsetTracker = /*#__PURE__*/ (function () {
         function CFFOffsetTracker() {
            _classCallCheck(this, CFFOffsetTracker);
            this.offsets = Object.create(null);
         }
         return _createClass(CFFOffsetTracker, [
            {
               key: "isTracking",
               value: function isTracking(key) {
                  return key in this.offsets;
               },
            },
            {
               key: "track",
               value: function track(key, location) {
                  if (key in this.offsets) {
                     throw new FormatError(
                        "Already tracking location of ".concat(key),
                     );
                  }
                  this.offsets[key] = location;
               },
            },
            {
               key: "offset",
               value: function offset(value) {
                  for (var key in this.offsets) {
                     this.offsets[key] += value;
                  }
               },
            },
            {
               key: "setEntryLocation",
               value: function setEntryLocation(key, values, output) {
                  if (!(key in this.offsets)) {
                     throw new FormatError("Not tracking location of ".concat(key));
                  }
                  var data = output.data;
                  var dataOffset = this.offsets[key];
                  var size = 5;
                  for (var i = 0, ii = values.length; i < ii; ++i) {
                     var offset0 = i * size + dataOffset;
                     var offset1 = offset0 + 1;
                     var offset2 = offset0 + 2;
                     var offset3 = offset0 + 3;
                     var offset4 = offset0 + 4;
                     if (
                        data[offset0] !== 0x1d ||
                        data[offset1] !== 0 ||
                        data[offset2] !== 0 ||
                        data[offset3] !== 0 ||
                        data[offset4] !== 0
                     ) {
                        throw new FormatError("writing to an offset that is not empty");
                     }
                     var value = values[i];
                     data[offset0] = 0x1d;
                     data[offset1] = (value >> 24) & 0xff;
                     data[offset2] = (value >> 16) & 0xff;
                     data[offset3] = (value >> 8) & 0xff;
                     data[offset4] = value & 0xff;
                  }
               },
            },
         ]);
      })();
      var CFFCompiler = /*#__PURE__*/ (function () {
         function CFFCompiler(cff) {
            _classCallCheck(this, CFFCompiler);
            this.cff = cff;
         }
         return _createClass(
            CFFCompiler,
            [
               {
                  key: "compile",
                  value: function compile() {
                     var cff = this.cff;
                     var output = {
                        data: [],
                        length: 0,
                        add: function add(data) {
                           try {
                              var _this$data;
                              (_this$data = this.data).push.apply(
                                 _this$data,
                                 _toConsumableArray(data),
                              );
                           } catch (_unused4) {
                              this.data = this.data.concat(data);
                           }
                           this.length = this.data.length;
                        },
                     };
                     var header = this.compileHeader(cff.header);
                     output.add(header);
                     var nameIndex = this.compileNameIndex(cff.names);
                     output.add(nameIndex);
                     if (cff.isCIDFont) {
                        if (cff.topDict.hasName("FontMatrix")) {
                           var base = cff.topDict.getByName("FontMatrix");
                           cff.topDict.removeByName("FontMatrix");
                           var _iterator26 = _createForOfIteratorHelper(cff.fdArray),
                              _step26;
                           try {
                              for (_iterator26.s(); !(_step26 = _iterator26.n()).done; ) {
                                 var subDict = _step26.value;
                                 var matrix = base.slice(0);
                                 if (subDict.hasName("FontMatrix")) {
                                    matrix = Util.transform(
                                       matrix,
                                       subDict.getByName("FontMatrix"),
                                    );
                                 }
                                 subDict.setByName("FontMatrix", matrix);
                              }
                           } catch (err) {
                              _iterator26.e(err);
                           } finally {
                              _iterator26.f();
                           }
                        }
                     }
                     var xuid = cff.topDict.getByName("XUID");
                     if (
                        (xuid === null || xuid === void 0 ? void 0 : xuid.length) > 16
                     ) {
                        cff.topDict.removeByName("XUID");
                     }
                     cff.topDict.setByName("charset", 0);
                     var compiled = this.compileTopDicts(
                        [cff.topDict],
                        output.length,
                        cff.isCIDFont,
                     );
                     output.add(compiled.output);
                     var topDictTracker = compiled.trackers[0];
                     var stringIndex = this.compileStringIndex(cff.strings.strings);
                     output.add(stringIndex);
                     var globalSubrIndex = this.compileIndex(cff.globalSubrIndex);
                     output.add(globalSubrIndex);
                     if (cff.encoding && cff.topDict.hasName("Encoding")) {
                        if (cff.encoding.predefined) {
                           topDictTracker.setEntryLocation(
                              "Encoding",
                              [cff.encoding.format],
                              output,
                           );
                        } else {
                           var encoding = this.compileEncoding(cff.encoding);
                           topDictTracker.setEntryLocation(
                              "Encoding",
                              [output.length],
                              output,
                           );
                           output.add(encoding);
                        }
                     }
                     var charset = this.compileCharset(
                        cff.charset,
                        cff.charStrings.count,
                        cff.strings,
                        cff.isCIDFont,
                     );
                     topDictTracker.setEntryLocation(
                        "charset",
                        [output.length],
                        output,
                     );
                     output.add(charset);
                     var charStrings = this.compileCharStrings(cff.charStrings);
                     topDictTracker.setEntryLocation(
                        "CharStrings",
                        [output.length],
                        output,
                     );
                     output.add(charStrings);
                     if (cff.isCIDFont) {
                        topDictTracker.setEntryLocation(
                           "FDSelect",
                           [output.length],
                           output,
                        );
                        var fdSelect = this.compileFDSelect(cff.fdSelect);
                        output.add(fdSelect);
                        compiled = this.compileTopDicts(
                           cff.fdArray,
                           output.length,
                           true,
                        );
                        topDictTracker.setEntryLocation(
                           "FDArray",
                           [output.length],
                           output,
                        );
                        output.add(compiled.output);
                        var fontDictTrackers = compiled.trackers;
                        this.compilePrivateDicts(cff.fdArray, fontDictTrackers, output);
                     }
                     this.compilePrivateDicts([cff.topDict], [topDictTracker], output);
                     output.add([0]);
                     return output.data;
                  },
               },
               {
                  key: "encodeNumber",
                  value: function encodeNumber(value) {
                     if (Number.isInteger(value)) {
                        return this.encodeInteger(value);
                     }
                     return this.encodeFloat(value);
                  },
               },
               {
                  key: "encodeFloat",
                  value: function encodeFloat(num) {
                     var value = num.toString();
                     var m = CFFCompiler.EncodeFloatRegExp.exec(value);
                     if (m) {
                        var epsilon = parseFloat(
                           "1e" + ((m[2] ? +m[2] : 0) + m[1].length),
                        );
                        value = (Math.round(num * epsilon) / epsilon).toString();
                     }
                     var nibbles = "";
                     var i, ii;
                     for (i = 0, ii = value.length; i < ii; ++i) {
                        var a = value[i];
                        if (a === "e") {
                           nibbles += value[++i] === "-" ? "c" : "b";
                        } else if (a === ".") {
                           nibbles += "a";
                        } else if (a === "-") {
                           nibbles += "e";
                        } else {
                           nibbles += a;
                        }
                     }
                     nibbles += nibbles.length & 1 ? "f" : "ff";
                     var out = [30];
                     for (i = 0, ii = nibbles.length; i < ii; i += 2) {
                        out.push(parseInt(nibbles.substring(i, i + 2), 16));
                     }
                     return out;
                  },
               },
               {
                  key: "encodeInteger",
                  value: function encodeInteger(value) {
                     var code;
                     if (value >= -107 && value <= 107) {
                        code = [value + 139];
                     } else if (value >= 108 && value <= 1131) {
                        value -= 108;
                        code = [(value >> 8) + 247, value & 0xff];
                     } else if (value >= -1131 && value <= -108) {
                        value = -value - 108;
                        code = [(value >> 8) + 251, value & 0xff];
                     } else if (value >= -32768 && value <= 32767) {
                        code = [0x1c, (value >> 8) & 0xff, value & 0xff];
                     } else {
                        code = [
                           0x1d,
                           (value >> 24) & 0xff,
                           (value >> 16) & 0xff,
                           (value >> 8) & 0xff,
                           value & 0xff,
                        ];
                     }
                     return code;
                  },
               },
               {
                  key: "compileHeader",
                  value: function compileHeader(header) {
                     return [header.major, header.minor, 4, header.offSize];
                  },
               },
               {
                  key: "compileNameIndex",
                  value: function compileNameIndex(names) {
                     var nameIndex = new CFFIndex();
                     var _iterator27 = _createForOfIteratorHelper(names),
                        _step27;
                     try {
                        for (_iterator27.s(); !(_step27 = _iterator27.n()).done; ) {
                           var name = _step27.value;
                           var length = Math.min(name.length, 127);
                           var sanitizedName = new Array(length);
                           for (var j = 0; j < length; j++) {
                              var _char7 = name[j];
                              if (
                                 _char7 < "!" ||
                                 _char7 > "~" ||
                                 _char7 === "[" ||
                                 _char7 === "]" ||
                                 _char7 === "(" ||
                                 _char7 === ")" ||
                                 _char7 === "{" ||
                                 _char7 === "}" ||
                                 _char7 === "<" ||
                                 _char7 === ">" ||
                                 _char7 === "/" ||
                                 _char7 === "%"
                              ) {
                                 _char7 = "_";
                              }
                              sanitizedName[j] = _char7;
                           }
                           sanitizedName = sanitizedName.join("");
                           if (sanitizedName === "") {
                              sanitizedName = "Bad_Font_Name";
                           }
                           nameIndex.add(stringToBytes(sanitizedName));
                        }
                     } catch (err) {
                        _iterator27.e(err);
                     } finally {
                        _iterator27.f();
                     }
                     return this.compileIndex(nameIndex);
                  },
               },
               {
                  key: "compileTopDicts",
                  value: function compileTopDicts(dicts, length, removeCidKeys) {
                     var fontDictTrackers = [];
                     var fdArrayIndex = new CFFIndex();
                     var _iterator28 = _createForOfIteratorHelper(dicts),
                        _step28;
                     try {
                        for (_iterator28.s(); !(_step28 = _iterator28.n()).done; ) {
                           var fontDict = _step28.value;
                           if (removeCidKeys) {
                              fontDict.removeByName("CIDFontVersion");
                              fontDict.removeByName("CIDFontRevision");
                              fontDict.removeByName("CIDFontType");
                              fontDict.removeByName("CIDCount");
                              fontDict.removeByName("UIDBase");
                           }
                           var fontDictTracker = new CFFOffsetTracker();
                           var fontDictData = this.compileDict(
                              fontDict,
                              fontDictTracker,
                           );
                           fontDictTrackers.push(fontDictTracker);
                           fdArrayIndex.add(fontDictData);
                           fontDictTracker.offset(length);
                        }
                     } catch (err) {
                        _iterator28.e(err);
                     } finally {
                        _iterator28.f();
                     }
                     fdArrayIndex = this.compileIndex(fdArrayIndex, fontDictTrackers);
                     return { trackers: fontDictTrackers, output: fdArrayIndex };
                  },
               },
               {
                  key: "compilePrivateDicts",
                  value: function compilePrivateDicts(dicts, trackers, output) {
                     for (var i = 0, ii = dicts.length; i < ii; ++i) {
                        var fontDict = dicts[i];
                        var privateDict = fontDict.privateDict;
                        if (!privateDict || !fontDict.hasName("Private")) {
                           throw new FormatError("There must be a private dictionary.");
                        }
                        var privateDictTracker = new CFFOffsetTracker();
                        var privateDictData = this.compileDict(
                           privateDict,
                           privateDictTracker,
                        );
                        var outputLength = output.length;
                        privateDictTracker.offset(outputLength);
                        if (!privateDictData.length) {
                           outputLength = 0;
                        }
                        trackers[i].setEntryLocation(
                           "Private",
                           [privateDictData.length, outputLength],
                           output,
                        );
                        output.add(privateDictData);
                        if (privateDict.subrsIndex && privateDict.hasName("Subrs")) {
                           var subrs = this.compileIndex(privateDict.subrsIndex);
                           privateDictTracker.setEntryLocation(
                              "Subrs",
                              [privateDictData.length],
                              output,
                           );
                           output.add(subrs);
                        }
                     }
                  },
               },
               {
                  key: "compileDict",
                  value: function compileDict(dict, offsetTracker) {
                     var out = [];
                     var _iterator29 = _createForOfIteratorHelper(dict.order),
                        _step29;
                     try {
                        for (_iterator29.s(); !(_step29 = _iterator29.n()).done; ) {
                           var key = _step29.value;
                           if (!(key in dict.values)) {
                              continue;
                           }
                           var values = dict.values[key];
                           var _types = dict.types[key];
                           if (!Array.isArray(_types)) {
                              _types = [_types];
                           }
                           if (!Array.isArray(values)) {
                              values = [values];
                           }
                           if (values.length === 0) {
                              continue;
                           }
                           for (var j = 0, jj = _types.length; j < jj; ++j) {
                              var type = _types[j];
                              var value = values[j];
                              switch (type) {
                                 case "num":
                                 case "sid":
                                    out.push.apply(
                                       out,
                                       _toConsumableArray(this.encodeNumber(value)),
                                    );
                                    break;
                                 case "offset":
                                    var name = dict.keyToNameMap[key];
                                    if (!offsetTracker.isTracking(name)) {
                                       offsetTracker.track(name, out.length);
                                    }
                                    out.push(0x1d, 0, 0, 0, 0);
                                    break;
                                 case "array":
                                 case "delta":
                                    out.push.apply(
                                       out,
                                       _toConsumableArray(this.encodeNumber(value)),
                                    );
                                    for (var k = 1, kk = values.length; k < kk; ++k) {
                                       out.push.apply(
                                          out,
                                          _toConsumableArray(this.encodeNumber(values[k])),
                                       );
                                    }
                                    break;
                                 default:
                                    throw new FormatError(
                                       "Unknown data type of ".concat(type),
                                    );
                              }
                           }
                           out.push.apply(out, _toConsumableArray(dict.opcodes[key]));
                        }
                     } catch (err) {
                        _iterator29.e(err);
                     } finally {
                        _iterator29.f();
                     }
                     return out;
                  },
               },
               {
                  key: "compileStringIndex",
                  value: function compileStringIndex(strings) {
                     var stringIndex = new CFFIndex();
                     var _iterator30 = _createForOfIteratorHelper(strings),
                        _step30;
                     try {
                        for (_iterator30.s(); !(_step30 = _iterator30.n()).done; ) {
                           var string = _step30.value;
                           stringIndex.add(stringToBytes(string));
                        }
                     } catch (err) {
                        _iterator30.e(err);
                     } finally {
                        _iterator30.f();
                     }
                     return this.compileIndex(stringIndex);
                  },
               },
               {
                  key: "compileCharStrings",
                  value: function compileCharStrings(charStrings) {
                     var charStringsIndex = new CFFIndex();
                     for (var i = 0; i < charStrings.count; i++) {
                        var glyph = charStrings.get(i);
                        if (glyph.length === 0) {
                           charStringsIndex.add(new Uint8Array([0x8b, 0x0e]));
                           continue;
                        }
                        charStringsIndex.add(glyph);
                     }
                     return this.compileIndex(charStringsIndex);
                  },
               },
               {
                  key: "compileCharset",
                  value: function compileCharset(
                     charset,
                     numGlyphs,
                     strings,
                     isCIDFont,
                  ) {
                     var out;
                     var numGlyphsLessNotDef = numGlyphs - 1;
                     if (isCIDFont) {
                        out = new Uint8Array([
                           2,
                           0,
                           0,
                           (numGlyphsLessNotDef >> 8) & 0xff,
                           numGlyphsLessNotDef & 0xff,
                        ]);
                     } else {
                        var length = 1 + numGlyphsLessNotDef * 2;
                        out = new Uint8Array(length);
                        out[0] = 0;
                        var charsetIndex = 0;
                        var numCharsets = charset.charset.length;
                        var warned = false;
                        for (var i = 1; i < out.length; i += 2) {
                           var sid = 0;
                           if (charsetIndex < numCharsets) {
                              var name = charset.charset[charsetIndex++];
                              sid = strings.getSID(name);
                              if (sid === -1) {
                                 sid = 0;
                                 if (!warned) {
                                    warned = true;
                                    warn("Couldn't find ".concat(name, " in CFF strings"));
                                 }
                              }
                           }
                           out[i] = (sid >> 8) & 0xff;
                           out[i + 1] = sid & 0xff;
                        }
                     }
                     return this.compileTypedArray(out);
                  },
               },
               {
                  key: "compileEncoding",
                  value: function compileEncoding(encoding) {
                     return this.compileTypedArray(encoding.raw);
                  },
               },
               {
                  key: "compileFDSelect",
                  value: function compileFDSelect(fdSelect) {
                     var format = fdSelect.format;
                     var out, i;
                     switch (format) {
                        case 0:
                           out = new Uint8Array(1 + fdSelect.fdSelect.length);
                           out[0] = format;
                           for (i = 0; i < fdSelect.fdSelect.length; i++) {
                              out[i + 1] = fdSelect.fdSelect[i];
                           }
                           break;
                        case 3:
                           var start = 0;
                           var lastFD = fdSelect.fdSelect[0];
                           var ranges = [
                              format,
                              0,
                              0,
                              (start >> 8) & 0xff,
                              start & 0xff,
                              lastFD,
                           ];
                           for (i = 1; i < fdSelect.fdSelect.length; i++) {
                              var currentFD = fdSelect.fdSelect[i];
                              if (currentFD !== lastFD) {
                                 ranges.push((i >> 8) & 0xff, i & 0xff, currentFD);
                                 lastFD = currentFD;
                              }
                           }
                           var numRanges = (ranges.length - 3) / 3;
                           ranges[1] = (numRanges >> 8) & 0xff;
                           ranges[2] = numRanges & 0xff;
                           ranges.push((i >> 8) & 0xff, i & 0xff);
                           out = new Uint8Array(ranges);
                           break;
                     }
                     return this.compileTypedArray(out);
                  },
               },
               {
                  key: "compileTypedArray",
                  value: function compileTypedArray(data) {
                     return Array.from(data);
                  },
               },
               {
                  key: "compileIndex",
                  value: function compileIndex(index) {
                     var trackers =
                        arguments.length > 1 && arguments[1] !== undefined
                           ? arguments[1]
                           : [];
                     var objects = index.objects;
                     var count = objects.length;
                     if (count === 0) {
                        return [0, 0];
                     }
                     var data = [(count >> 8) & 0xff, count & 0xff];
                     var lastOffset = 1,
                        i;
                     for (i = 0; i < count; ++i) {
                        lastOffset += objects[i].length;
                     }
                     var offsetSize;
                     if (lastOffset < 0x100) {
                        offsetSize = 1;
                     } else if (lastOffset < 0x10000) {
                        offsetSize = 2;
                     } else if (lastOffset < 0x1000000) {
                        offsetSize = 3;
                     } else {
                        offsetSize = 4;
                     }
                     data.push(offsetSize);
                     var relativeOffset = 1;
                     for (i = 0; i < count + 1; i++) {
                        if (offsetSize === 1) {
                           data.push(relativeOffset & 0xff);
                        } else if (offsetSize === 2) {
                           data.push(
                              (relativeOffset >> 8) & 0xff,
                              relativeOffset & 0xff,
                           );
                        } else if (offsetSize === 3) {
                           data.push(
                              (relativeOffset >> 16) & 0xff,
                              (relativeOffset >> 8) & 0xff,
                              relativeOffset & 0xff,
                           );
                        } else {
                           data.push(
                              (relativeOffset >>> 24) & 0xff,
                              (relativeOffset >> 16) & 0xff,
                              (relativeOffset >> 8) & 0xff,
                              relativeOffset & 0xff,
                           );
                        }
                        if (objects[i]) {
                           relativeOffset += objects[i].length;
                        }
                     }
                     for (i = 0; i < count; i++) {
                        if (trackers[i]) {
                           trackers[i].offset(data.length);
                        }
                        data.push.apply(data, _toConsumableArray(objects[i]));
                     }
                     return data;
                  },
               },
            ],
            [
               {
                  key: "EncodeFloatRegExp",
                  get: function get() {
                     return shadow(
                        this,
                        "EncodeFloatRegExp",
                        /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/,
                     );
                  },
               },
            ],
         );
      })(); // CONCATENATED MODULE: ./src/core/glyphlist.js
      var getGlyphsUnicode = getLookupTableFactory(function (t) {
         t.A = 0x0041;
         t.AE = 0x00c6;
         t.AEacute = 0x01fc;
         t.AEmacron = 0x01e2;
         t.AEsmall = 0xf7e6;
         t.Aacute = 0x00c1;
         t.Aacutesmall = 0xf7e1;
         t.Abreve = 0x0102;
         t.Abreveacute = 0x1eae;
         t.Abrevecyrillic = 0x04d0;
         t.Abrevedotbelow = 0x1eb6;
         t.Abrevegrave = 0x1eb0;
         t.Abrevehookabove = 0x1eb2;
         t.Abrevetilde = 0x1eb4;
         t.Acaron = 0x01cd;
         t.Acircle = 0x24b6;
         t.Acircumflex = 0x00c2;
         t.Acircumflexacute = 0x1ea4;
         t.Acircumflexdotbelow = 0x1eac;
         t.Acircumflexgrave = 0x1ea6;
         t.Acircumflexhookabove = 0x1ea8;
         t.Acircumflexsmall = 0xf7e2;
         t.Acircumflextilde = 0x1eaa;
         t.Acute = 0xf6c9;
         t.Acutesmall = 0xf7b4;
         t.Acyrillic = 0x0410;
         t.Adblgrave = 0x0200;
         t.Adieresis = 0x00c4;
         t.Adieresiscyrillic = 0x04d2;
         t.Adieresismacron = 0x01de;
         t.Adieresissmall = 0xf7e4;
         t.Adotbelow = 0x1ea0;
         t.Adotmacron = 0x01e0;
         t.Agrave = 0x00c0;
         t.Agravesmall = 0xf7e0;
         t.Ahookabove = 0x1ea2;
         t.Aiecyrillic = 0x04d4;
         t.Ainvertedbreve = 0x0202;
         t.Alpha = 0x0391;
         t.Alphatonos = 0x0386;
         t.Amacron = 0x0100;
         t.Amonospace = 0xff21;
         t.Aogonek = 0x0104;
         t.Aring = 0x00c5;
         t.Aringacute = 0x01fa;
         t.Aringbelow = 0x1e00;
         t.Aringsmall = 0xf7e5;
         t.Asmall = 0xf761;
         t.Atilde = 0x00c3;
         t.Atildesmall = 0xf7e3;
         t.Aybarmenian = 0x0531;
         t.B = 0x0042;
         t.Bcircle = 0x24b7;
         t.Bdotaccent = 0x1e02;
         t.Bdotbelow = 0x1e04;
         t.Becyrillic = 0x0411;
         t.Benarmenian = 0x0532;
         t.Beta = 0x0392;
         t.Bhook = 0x0181;
         t.Blinebelow = 0x1e06;
         t.Bmonospace = 0xff22;
         t.Brevesmall = 0xf6f4;
         t.Bsmall = 0xf762;
         t.Btopbar = 0x0182;
         t.C = 0x0043;
         t.Caarmenian = 0x053e;
         t.Cacute = 0x0106;
         t.Caron = 0xf6ca;
         t.Caronsmall = 0xf6f5;
         t.Ccaron = 0x010c;
         t.Ccedilla = 0x00c7;
         t.Ccedillaacute = 0x1e08;
         t.Ccedillasmall = 0xf7e7;
         t.Ccircle = 0x24b8;
         t.Ccircumflex = 0x0108;
         t.Cdot = 0x010a;
         t.Cdotaccent = 0x010a;
         t.Cedillasmall = 0xf7b8;
         t.Chaarmenian = 0x0549;
         t.Cheabkhasiancyrillic = 0x04bc;
         t.Checyrillic = 0x0427;
         t.Chedescenderabkhasiancyrillic = 0x04be;
         t.Chedescendercyrillic = 0x04b6;
         t.Chedieresiscyrillic = 0x04f4;
         t.Cheharmenian = 0x0543;
         t.Chekhakassiancyrillic = 0x04cb;
         t.Cheverticalstrokecyrillic = 0x04b8;
         t.Chi = 0x03a7;
         t.Chook = 0x0187;
         t.Circumflexsmall = 0xf6f6;
         t.Cmonospace = 0xff23;
         t.Coarmenian = 0x0551;
         t.Csmall = 0xf763;
         t.D = 0x0044;
         t.DZ = 0x01f1;
         t.DZcaron = 0x01c4;
         t.Daarmenian = 0x0534;
         t.Dafrican = 0x0189;
         t.Dcaron = 0x010e;
         t.Dcedilla = 0x1e10;
         t.Dcircle = 0x24b9;
         t.Dcircumflexbelow = 0x1e12;
         t.Dcroat = 0x0110;
         t.Ddotaccent = 0x1e0a;
         t.Ddotbelow = 0x1e0c;
         t.Decyrillic = 0x0414;
         t.Deicoptic = 0x03ee;
         t.Delta = 0x2206;
         t.Deltagreek = 0x0394;
         t.Dhook = 0x018a;
         t.Dieresis = 0xf6cb;
         t.DieresisAcute = 0xf6cc;
         t.DieresisGrave = 0xf6cd;
         t.Dieresissmall = 0xf7a8;
         t.Digammagreek = 0x03dc;
         t.Djecyrillic = 0x0402;
         t.Dlinebelow = 0x1e0e;
         t.Dmonospace = 0xff24;
         t.Dotaccentsmall = 0xf6f7;
         t.Dslash = 0x0110;
         t.Dsmall = 0xf764;
         t.Dtopbar = 0x018b;
         t.Dz = 0x01f2;
         t.Dzcaron = 0x01c5;
         t.Dzeabkhasiancyrillic = 0x04e0;
         t.Dzecyrillic = 0x0405;
         t.Dzhecyrillic = 0x040f;
         t.E = 0x0045;
         t.Eacute = 0x00c9;
         t.Eacutesmall = 0xf7e9;
         t.Ebreve = 0x0114;
         t.Ecaron = 0x011a;
         t.Ecedillabreve = 0x1e1c;
         t.Echarmenian = 0x0535;
         t.Ecircle = 0x24ba;
         t.Ecircumflex = 0x00ca;
         t.Ecircumflexacute = 0x1ebe;
         t.Ecircumflexbelow = 0x1e18;
         t.Ecircumflexdotbelow = 0x1ec6;
         t.Ecircumflexgrave = 0x1ec0;
         t.Ecircumflexhookabove = 0x1ec2;
         t.Ecircumflexsmall = 0xf7ea;
         t.Ecircumflextilde = 0x1ec4;
         t.Ecyrillic = 0x0404;
         t.Edblgrave = 0x0204;
         t.Edieresis = 0x00cb;
         t.Edieresissmall = 0xf7eb;
         t.Edot = 0x0116;
         t.Edotaccent = 0x0116;
         t.Edotbelow = 0x1eb8;
         t.Efcyrillic = 0x0424;
         t.Egrave = 0x00c8;
         t.Egravesmall = 0xf7e8;
         t.Eharmenian = 0x0537;
         t.Ehookabove = 0x1eba;
         t.Eightroman = 0x2167;
         t.Einvertedbreve = 0x0206;
         t.Eiotifiedcyrillic = 0x0464;
         t.Elcyrillic = 0x041b;
         t.Elevenroman = 0x216a;
         t.Emacron = 0x0112;
         t.Emacronacute = 0x1e16;
         t.Emacrongrave = 0x1e14;
         t.Emcyrillic = 0x041c;
         t.Emonospace = 0xff25;
         t.Encyrillic = 0x041d;
         t.Endescendercyrillic = 0x04a2;
         t.Eng = 0x014a;
         t.Enghecyrillic = 0x04a4;
         t.Enhookcyrillic = 0x04c7;
         t.Eogonek = 0x0118;
         t.Eopen = 0x0190;
         t.Epsilon = 0x0395;
         t.Epsilontonos = 0x0388;
         t.Ercyrillic = 0x0420;
         t.Ereversed = 0x018e;
         t.Ereversedcyrillic = 0x042d;
         t.Escyrillic = 0x0421;
         t.Esdescendercyrillic = 0x04aa;
         t.Esh = 0x01a9;
         t.Esmall = 0xf765;
         t.Eta = 0x0397;
         t.Etarmenian = 0x0538;
         t.Etatonos = 0x0389;
         t.Eth = 0x00d0;
         t.Ethsmall = 0xf7f0;
         t.Etilde = 0x1ebc;
         t.Etildebelow = 0x1e1a;
         t.Euro = 0x20ac;
         t.Ezh = 0x01b7;
         t.Ezhcaron = 0x01ee;
         t.Ezhreversed = 0x01b8;
         t.F = 0x0046;
         t.Fcircle = 0x24bb;
         t.Fdotaccent = 0x1e1e;
         t.Feharmenian = 0x0556;
         t.Feicoptic = 0x03e4;
         t.Fhook = 0x0191;
         t.Fitacyrillic = 0x0472;
         t.Fiveroman = 0x2164;
         t.Fmonospace = 0xff26;
         t.Fourroman = 0x2163;
         t.Fsmall = 0xf766;
         t.G = 0x0047;
         t.GBsquare = 0x3387;
         t.Gacute = 0x01f4;
         t.Gamma = 0x0393;
         t.Gammaafrican = 0x0194;
         t.Gangiacoptic = 0x03ea;
         t.Gbreve = 0x011e;
         t.Gcaron = 0x01e6;
         t.Gcedilla = 0x0122;
         t.Gcircle = 0x24bc;
         t.Gcircumflex = 0x011c;
         t.Gcommaaccent = 0x0122;
         t.Gdot = 0x0120;
         t.Gdotaccent = 0x0120;
         t.Gecyrillic = 0x0413;
         t.Ghadarmenian = 0x0542;
         t.Ghemiddlehookcyrillic = 0x0494;
         t.Ghestrokecyrillic = 0x0492;
         t.Gheupturncyrillic = 0x0490;
         t.Ghook = 0x0193;
         t.Gimarmenian = 0x0533;
         t.Gjecyrillic = 0x0403;
         t.Gmacron = 0x1e20;
         t.Gmonospace = 0xff27;
         t.Grave = 0xf6ce;
         t.Gravesmall = 0xf760;
         t.Gsmall = 0xf767;
         t.Gsmallhook = 0x029b;
         t.Gstroke = 0x01e4;
         t.H = 0x0048;
         t.H18533 = 0x25cf;
         t.H18543 = 0x25aa;
         t.H18551 = 0x25ab;
         t.H22073 = 0x25a1;
         t.HPsquare = 0x33cb;
         t.Haabkhasiancyrillic = 0x04a8;
         t.Hadescendercyrillic = 0x04b2;
         t.Hardsigncyrillic = 0x042a;
         t.Hbar = 0x0126;
         t.Hbrevebelow = 0x1e2a;
         t.Hcedilla = 0x1e28;
         t.Hcircle = 0x24bd;
         t.Hcircumflex = 0x0124;
         t.Hdieresis = 0x1e26;
         t.Hdotaccent = 0x1e22;
         t.Hdotbelow = 0x1e24;
         t.Hmonospace = 0xff28;
         t.Hoarmenian = 0x0540;
         t.Horicoptic = 0x03e8;
         t.Hsmall = 0xf768;
         t.Hungarumlaut = 0xf6cf;
         t.Hungarumlautsmall = 0xf6f8;
         t.Hzsquare = 0x3390;
         t.I = 0x0049;
         t.IAcyrillic = 0x042f;
         t.IJ = 0x0132;
         t.IUcyrillic = 0x042e;
         t.Iacute = 0x00cd;
         t.Iacutesmall = 0xf7ed;
         t.Ibreve = 0x012c;
         t.Icaron = 0x01cf;
         t.Icircle = 0x24be;
         t.Icircumflex = 0x00ce;
         t.Icircumflexsmall = 0xf7ee;
         t.Icyrillic = 0x0406;
         t.Idblgrave = 0x0208;
         t.Idieresis = 0x00cf;
         t.Idieresisacute = 0x1e2e;
         t.Idieresiscyrillic = 0x04e4;
         t.Idieresissmall = 0xf7ef;
         t.Idot = 0x0130;
         t.Idotaccent = 0x0130;
         t.Idotbelow = 0x1eca;
         t.Iebrevecyrillic = 0x04d6;
         t.Iecyrillic = 0x0415;
         t.Ifraktur = 0x2111;
         t.Igrave = 0x00cc;
         t.Igravesmall = 0xf7ec;
         t.Ihookabove = 0x1ec8;
         t.Iicyrillic = 0x0418;
         t.Iinvertedbreve = 0x020a;
         t.Iishortcyrillic = 0x0419;
         t.Imacron = 0x012a;
         t.Imacroncyrillic = 0x04e2;
         t.Imonospace = 0xff29;
         t.Iniarmenian = 0x053b;
         t.Iocyrillic = 0x0401;
         t.Iogonek = 0x012e;
         t.Iota = 0x0399;
         t.Iotaafrican = 0x0196;
         t.Iotadieresis = 0x03aa;
         t.Iotatonos = 0x038a;
         t.Ismall = 0xf769;
         t.Istroke = 0x0197;
         t.Itilde = 0x0128;
         t.Itildebelow = 0x1e2c;
         t.Izhitsacyrillic = 0x0474;
         t.Izhitsadblgravecyrillic = 0x0476;
         t.J = 0x004a;
         t.Jaarmenian = 0x0541;
         t.Jcircle = 0x24bf;
         t.Jcircumflex = 0x0134;
         t.Jecyrillic = 0x0408;
         t.Jheharmenian = 0x054b;
         t.Jmonospace = 0xff2a;
         t.Jsmall = 0xf76a;
         t.K = 0x004b;
         t.KBsquare = 0x3385;
         t.KKsquare = 0x33cd;
         t.Kabashkircyrillic = 0x04a0;
         t.Kacute = 0x1e30;
         t.Kacyrillic = 0x041a;
         t.Kadescendercyrillic = 0x049a;
         t.Kahookcyrillic = 0x04c3;
         t.Kappa = 0x039a;
         t.Kastrokecyrillic = 0x049e;
         t.Kaverticalstrokecyrillic = 0x049c;
         t.Kcaron = 0x01e8;
         t.Kcedilla = 0x0136;
         t.Kcircle = 0x24c0;
         t.Kcommaaccent = 0x0136;
         t.Kdotbelow = 0x1e32;
         t.Keharmenian = 0x0554;
         t.Kenarmenian = 0x053f;
         t.Khacyrillic = 0x0425;
         t.Kheicoptic = 0x03e6;
         t.Khook = 0x0198;
         t.Kjecyrillic = 0x040c;
         t.Klinebelow = 0x1e34;
         t.Kmonospace = 0xff2b;
         t.Koppacyrillic = 0x0480;
         t.Koppagreek = 0x03de;
         t.Ksicyrillic = 0x046e;
         t.Ksmall = 0xf76b;
         t.L = 0x004c;
         t.LJ = 0x01c7;
         t.LL = 0xf6bf;
         t.Lacute = 0x0139;
         t.Lambda = 0x039b;
         t.Lcaron = 0x013d;
         t.Lcedilla = 0x013b;
         t.Lcircle = 0x24c1;
         t.Lcircumflexbelow = 0x1e3c;
         t.Lcommaaccent = 0x013b;
         t.Ldot = 0x013f;
         t.Ldotaccent = 0x013f;
         t.Ldotbelow = 0x1e36;
         t.Ldotbelowmacron = 0x1e38;
         t.Liwnarmenian = 0x053c;
         t.Lj = 0x01c8;
         t.Ljecyrillic = 0x0409;
         t.Llinebelow = 0x1e3a;
         t.Lmonospace = 0xff2c;
         t.Lslash = 0x0141;
         t.Lslashsmall = 0xf6f9;
         t.Lsmall = 0xf76c;
         t.M = 0x004d;
         t.MBsquare = 0x3386;
         t.Macron = 0xf6d0;
         t.Macronsmall = 0xf7af;
         t.Macute = 0x1e3e;
         t.Mcircle = 0x24c2;
         t.Mdotaccent = 0x1e40;
         t.Mdotbelow = 0x1e42;
         t.Menarmenian = 0x0544;
         t.Mmonospace = 0xff2d;
         t.Msmall = 0xf76d;
         t.Mturned = 0x019c;
         t.Mu = 0x039c;
         t.N = 0x004e;
         t.NJ = 0x01ca;
         t.Nacute = 0x0143;
         t.Ncaron = 0x0147;
         t.Ncedilla = 0x0145;
         t.Ncircle = 0x24c3;
         t.Ncircumflexbelow = 0x1e4a;
         t.Ncommaaccent = 0x0145;
         t.Ndotaccent = 0x1e44;
         t.Ndotbelow = 0x1e46;
         t.Nhookleft = 0x019d;
         t.Nineroman = 0x2168;
         t.Nj = 0x01cb;
         t.Njecyrillic = 0x040a;
         t.Nlinebelow = 0x1e48;
         t.Nmonospace = 0xff2e;
         t.Nowarmenian = 0x0546;
         t.Nsmall = 0xf76e;
         t.Ntilde = 0x00d1;
         t.Ntildesmall = 0xf7f1;
         t.Nu = 0x039d;
         t.O = 0x004f;
         t.OE = 0x0152;
         t.OEsmall = 0xf6fa;
         t.Oacute = 0x00d3;
         t.Oacutesmall = 0xf7f3;
         t.Obarredcyrillic = 0x04e8;
         t.Obarreddieresiscyrillic = 0x04ea;
         t.Obreve = 0x014e;
         t.Ocaron = 0x01d1;
         t.Ocenteredtilde = 0x019f;
         t.Ocircle = 0x24c4;
         t.Ocircumflex = 0x00d4;
         t.Ocircumflexacute = 0x1ed0;
         t.Ocircumflexdotbelow = 0x1ed8;
         t.Ocircumflexgrave = 0x1ed2;
         t.Ocircumflexhookabove = 0x1ed4;
         t.Ocircumflexsmall = 0xf7f4;
         t.Ocircumflextilde = 0x1ed6;
         t.Ocyrillic = 0x041e;
         t.Odblacute = 0x0150;
         t.Odblgrave = 0x020c;
         t.Odieresis = 0x00d6;
         t.Odieresiscyrillic = 0x04e6;
         t.Odieresissmall = 0xf7f6;
         t.Odotbelow = 0x1ecc;
         t.Ogoneksmall = 0xf6fb;
         t.Ograve = 0x00d2;
         t.Ogravesmall = 0xf7f2;
         t.Oharmenian = 0x0555;
         t.Ohm = 0x2126;
         t.Ohookabove = 0x1ece;
         t.Ohorn = 0x01a0;
         t.Ohornacute = 0x1eda;
         t.Ohorndotbelow = 0x1ee2;
         t.Ohorngrave = 0x1edc;
         t.Ohornhookabove = 0x1ede;
         t.Ohorntilde = 0x1ee0;
         t.Ohungarumlaut = 0x0150;
         t.Oi = 0x01a2;
         t.Oinvertedbreve = 0x020e;
         t.Omacron = 0x014c;
         t.Omacronacute = 0x1e52;
         t.Omacrongrave = 0x1e50;
         t.Omega = 0x2126;
         t.Omegacyrillic = 0x0460;
         t.Omegagreek = 0x03a9;
         t.Omegaroundcyrillic = 0x047a;
         t.Omegatitlocyrillic = 0x047c;
         t.Omegatonos = 0x038f;
         t.Omicron = 0x039f;
         t.Omicrontonos = 0x038c;
         t.Omonospace = 0xff2f;
         t.Oneroman = 0x2160;
         t.Oogonek = 0x01ea;
         t.Oogonekmacron = 0x01ec;
         t.Oopen = 0x0186;
         t.Oslash = 0x00d8;
         t.Oslashacute = 0x01fe;
         t.Oslashsmall = 0xf7f8;
         t.Osmall = 0xf76f;
         t.Ostrokeacute = 0x01fe;
         t.Otcyrillic = 0x047e;
         t.Otilde = 0x00d5;
         t.Otildeacute = 0x1e4c;
         t.Otildedieresis = 0x1e4e;
         t.Otildesmall = 0xf7f5;
         t.P = 0x0050;
         t.Pacute = 0x1e54;
         t.Pcircle = 0x24c5;
         t.Pdotaccent = 0x1e56;
         t.Pecyrillic = 0x041f;
         t.Peharmenian = 0x054a;
         t.Pemiddlehookcyrillic = 0x04a6;
         t.Phi = 0x03a6;
         t.Phook = 0x01a4;
         t.Pi = 0x03a0;
         t.Piwrarmenian = 0x0553;
         t.Pmonospace = 0xff30;
         t.Psi = 0x03a8;
         t.Psicyrillic = 0x0470;
         t.Psmall = 0xf770;
         t.Q = 0x0051;
         t.Qcircle = 0x24c6;
         t.Qmonospace = 0xff31;
         t.Qsmall = 0xf771;
         t.R = 0x0052;
         t.Raarmenian = 0x054c;
         t.Racute = 0x0154;
         t.Rcaron = 0x0158;
         t.Rcedilla = 0x0156;
         t.Rcircle = 0x24c7;
         t.Rcommaaccent = 0x0156;
         t.Rdblgrave = 0x0210;
         t.Rdotaccent = 0x1e58;
         t.Rdotbelow = 0x1e5a;
         t.Rdotbelowmacron = 0x1e5c;
         t.Reharmenian = 0x0550;
         t.Rfraktur = 0x211c;
         t.Rho = 0x03a1;
         t.Ringsmall = 0xf6fc;
         t.Rinvertedbreve = 0x0212;
         t.Rlinebelow = 0x1e5e;
         t.Rmonospace = 0xff32;
         t.Rsmall = 0xf772;
         t.Rsmallinverted = 0x0281;
         t.Rsmallinvertedsuperior = 0x02b6;
         t.S = 0x0053;
         t.SF010000 = 0x250c;
         t.SF020000 = 0x2514;
         t.SF030000 = 0x2510;
         t.SF040000 = 0x2518;
         t.SF050000 = 0x253c;
         t.SF060000 = 0x252c;
         t.SF070000 = 0x2534;
         t.SF080000 = 0x251c;
         t.SF090000 = 0x2524;
         t.SF100000 = 0x2500;
         t.SF110000 = 0x2502;
         t.SF190000 = 0x2561;
         t.SF200000 = 0x2562;
         t.SF210000 = 0x2556;
         t.SF220000 = 0x2555;
         t.SF230000 = 0x2563;
         t.SF240000 = 0x2551;
         t.SF250000 = 0x2557;
         t.SF260000 = 0x255d;
         t.SF270000 = 0x255c;
         t.SF280000 = 0x255b;
         t.SF360000 = 0x255e;
         t.SF370000 = 0x255f;
         t.SF380000 = 0x255a;
         t.SF390000 = 0x2554;
         t.SF400000 = 0x2569;
         t.SF410000 = 0x2566;
         t.SF420000 = 0x2560;
         t.SF430000 = 0x2550;
         t.SF440000 = 0x256c;
         t.SF450000 = 0x2567;
         t.SF460000 = 0x2568;
         t.SF470000 = 0x2564;
         t.SF480000 = 0x2565;
         t.SF490000 = 0x2559;
         t.SF500000 = 0x2558;
         t.SF510000 = 0x2552;
         t.SF520000 = 0x2553;
         t.SF530000 = 0x256b;
         t.SF540000 = 0x256a;
         t.Sacute = 0x015a;
         t.Sacutedotaccent = 0x1e64;
         t.Sampigreek = 0x03e0;
         t.Scaron = 0x0160;
         t.Scarondotaccent = 0x1e66;
         t.Scaronsmall = 0xf6fd;
         t.Scedilla = 0x015e;
         t.Schwa = 0x018f;
         t.Schwacyrillic = 0x04d8;
         t.Schwadieresiscyrillic = 0x04da;
         t.Scircle = 0x24c8;
         t.Scircumflex = 0x015c;
         t.Scommaaccent = 0x0218;
         t.Sdotaccent = 0x1e60;
         t.Sdotbelow = 0x1e62;
         t.Sdotbelowdotaccent = 0x1e68;
         t.Seharmenian = 0x054d;
         t.Sevenroman = 0x2166;
         t.Shaarmenian = 0x0547;
         t.Shacyrillic = 0x0428;
         t.Shchacyrillic = 0x0429;
         t.Sheicoptic = 0x03e2;
         t.Shhacyrillic = 0x04ba;
         t.Shimacoptic = 0x03ec;
         t.Sigma = 0x03a3;
         t.Sixroman = 0x2165;
         t.Smonospace = 0xff33;
         t.Softsigncyrillic = 0x042c;
         t.Ssmall = 0xf773;
         t.Stigmagreek = 0x03da;
         t.T = 0x0054;
         t.Tau = 0x03a4;
         t.Tbar = 0x0166;
         t.Tcaron = 0x0164;
         t.Tcedilla = 0x0162;
         t.Tcircle = 0x24c9;
         t.Tcircumflexbelow = 0x1e70;
         t.Tcommaaccent = 0x0162;
         t.Tdotaccent = 0x1e6a;
         t.Tdotbelow = 0x1e6c;
         t.Tecyrillic = 0x0422;
         t.Tedescendercyrillic = 0x04ac;
         t.Tenroman = 0x2169;
         t.Tetsecyrillic = 0x04b4;
         t.Theta = 0x0398;
         t.Thook = 0x01ac;
         t.Thorn = 0x00de;
         t.Thornsmall = 0xf7fe;
         t.Threeroman = 0x2162;
         t.Tildesmall = 0xf6fe;
         t.Tiwnarmenian = 0x054f;
         t.Tlinebelow = 0x1e6e;
         t.Tmonospace = 0xff34;
         t.Toarmenian = 0x0539;
         t.Tonefive = 0x01bc;
         t.Tonesix = 0x0184;
         t.Tonetwo = 0x01a7;
         t.Tretroflexhook = 0x01ae;
         t.Tsecyrillic = 0x0426;
         t.Tshecyrillic = 0x040b;
         t.Tsmall = 0xf774;
         t.Twelveroman = 0x216b;
         t.Tworoman = 0x2161;
         t.U = 0x0055;
         t.Uacute = 0x00da;
         t.Uacutesmall = 0xf7fa;
         t.Ubreve = 0x016c;
         t.Ucaron = 0x01d3;
         t.Ucircle = 0x24ca;
         t.Ucircumflex = 0x00db;
         t.Ucircumflexbelow = 0x1e76;
         t.Ucircumflexsmall = 0xf7fb;
         t.Ucyrillic = 0x0423;
         t.Udblacute = 0x0170;
         t.Udblgrave = 0x0214;
         t.Udieresis = 0x00dc;
         t.Udieresisacute = 0x01d7;
         t.Udieresisbelow = 0x1e72;
         t.Udieresiscaron = 0x01d9;
         t.Udieresiscyrillic = 0x04f0;
         t.Udieresisgrave = 0x01db;
         t.Udieresismacron = 0x01d5;
         t.Udieresissmall = 0xf7fc;
         t.Udotbelow = 0x1ee4;
         t.Ugrave = 0x00d9;
         t.Ugravesmall = 0xf7f9;
         t.Uhookabove = 0x1ee6;
         t.Uhorn = 0x01af;
         t.Uhornacute = 0x1ee8;
         t.Uhorndotbelow = 0x1ef0;
         t.Uhorngrave = 0x1eea;
         t.Uhornhookabove = 0x1eec;
         t.Uhorntilde = 0x1eee;
         t.Uhungarumlaut = 0x0170;
         t.Uhungarumlautcyrillic = 0x04f2;
         t.Uinvertedbreve = 0x0216;
         t.Ukcyrillic = 0x0478;
         t.Umacron = 0x016a;
         t.Umacroncyrillic = 0x04ee;
         t.Umacrondieresis = 0x1e7a;
         t.Umonospace = 0xff35;
         t.Uogonek = 0x0172;
         t.Upsilon = 0x03a5;
         t.Upsilon1 = 0x03d2;
         t.Upsilonacutehooksymbolgreek = 0x03d3;
         t.Upsilonafrican = 0x01b1;
         t.Upsilondieresis = 0x03ab;
         t.Upsilondieresishooksymbolgreek = 0x03d4;
         t.Upsilonhooksymbol = 0x03d2;
         t.Upsilontonos = 0x038e;
         t.Uring = 0x016e;
         t.Ushortcyrillic = 0x040e;
         t.Usmall = 0xf775;
         t.Ustraightcyrillic = 0x04ae;
         t.Ustraightstrokecyrillic = 0x04b0;
         t.Utilde = 0x0168;
         t.Utildeacute = 0x1e78;
         t.Utildebelow = 0x1e74;
         t.V = 0x0056;
         t.Vcircle = 0x24cb;
         t.Vdotbelow = 0x1e7e;
         t.Vecyrillic = 0x0412;
         t.Vewarmenian = 0x054e;
         t.Vhook = 0x01b2;
         t.Vmonospace = 0xff36;
         t.Voarmenian = 0x0548;
         t.Vsmall = 0xf776;
         t.Vtilde = 0x1e7c;
         t.W = 0x0057;
         t.Wacute = 0x1e82;
         t.Wcircle = 0x24cc;
         t.Wcircumflex = 0x0174;
         t.Wdieresis = 0x1e84;
         t.Wdotaccent = 0x1e86;
         t.Wdotbelow = 0x1e88;
         t.Wgrave = 0x1e80;
         t.Wmonospace = 0xff37;
         t.Wsmall = 0xf777;
         t.X = 0x0058;
         t.Xcircle = 0x24cd;
         t.Xdieresis = 0x1e8c;
         t.Xdotaccent = 0x1e8a;
         t.Xeharmenian = 0x053d;
         t.Xi = 0x039e;
         t.Xmonospace = 0xff38;
         t.Xsmall = 0xf778;
         t.Y = 0x0059;
         t.Yacute = 0x00dd;
         t.Yacutesmall = 0xf7fd;
         t.Yatcyrillic = 0x0462;
         t.Ycircle = 0x24ce;
         t.Ycircumflex = 0x0176;
         t.Ydieresis = 0x0178;
         t.Ydieresissmall = 0xf7ff;
         t.Ydotaccent = 0x1e8e;
         t.Ydotbelow = 0x1ef4;
         t.Yericyrillic = 0x042b;
         t.Yerudieresiscyrillic = 0x04f8;
         t.Ygrave = 0x1ef2;
         t.Yhook = 0x01b3;
         t.Yhookabove = 0x1ef6;
         t.Yiarmenian = 0x0545;
         t.Yicyrillic = 0x0407;
         t.Yiwnarmenian = 0x0552;
         t.Ymonospace = 0xff39;
         t.Ysmall = 0xf779;
         t.Ytilde = 0x1ef8;
         t.Yusbigcyrillic = 0x046a;
         t.Yusbigiotifiedcyrillic = 0x046c;
         t.Yuslittlecyrillic = 0x0466;
         t.Yuslittleiotifiedcyrillic = 0x0468;
         t.Z = 0x005a;
         t.Zaarmenian = 0x0536;
         t.Zacute = 0x0179;
         t.Zcaron = 0x017d;
         t.Zcaronsmall = 0xf6ff;
         t.Zcircle = 0x24cf;
         t.Zcircumflex = 0x1e90;
         t.Zdot = 0x017b;
         t.Zdotaccent = 0x017b;
         t.Zdotbelow = 0x1e92;
         t.Zecyrillic = 0x0417;
         t.Zedescendercyrillic = 0x0498;
         t.Zedieresiscyrillic = 0x04de;
         t.Zeta = 0x0396;
         t.Zhearmenian = 0x053a;
         t.Zhebrevecyrillic = 0x04c1;
         t.Zhecyrillic = 0x0416;
         t.Zhedescendercyrillic = 0x0496;
         t.Zhedieresiscyrillic = 0x04dc;
         t.Zlinebelow = 0x1e94;
         t.Zmonospace = 0xff3a;
         t.Zsmall = 0xf77a;
         t.Zstroke = 0x01b5;
         t.a = 0x0061;
         t.aabengali = 0x0986;
         t.aacute = 0x00e1;
         t.aadeva = 0x0906;
         t.aagujarati = 0x0a86;
         t.aagurmukhi = 0x0a06;
         t.aamatragurmukhi = 0x0a3e;
         t.aarusquare = 0x3303;
         t.aavowelsignbengali = 0x09be;
         t.aavowelsigndeva = 0x093e;
         t.aavowelsigngujarati = 0x0abe;
         t.abbreviationmarkarmenian = 0x055f;
         t.abbreviationsigndeva = 0x0970;
         t.abengali = 0x0985;
         t.abopomofo = 0x311a;
         t.abreve = 0x0103;
         t.abreveacute = 0x1eaf;
         t.abrevecyrillic = 0x04d1;
         t.abrevedotbelow = 0x1eb7;
         t.abrevegrave = 0x1eb1;
         t.abrevehookabove = 0x1eb3;
         t.abrevetilde = 0x1eb5;
         t.acaron = 0x01ce;
         t.acircle = 0x24d0;
         t.acircumflex = 0x00e2;
         t.acircumflexacute = 0x1ea5;
         t.acircumflexdotbelow = 0x1ead;
         t.acircumflexgrave = 0x1ea7;
         t.acircumflexhookabove = 0x1ea9;
         t.acircumflextilde = 0x1eab;
         t.acute = 0x00b4;
         t.acutebelowcmb = 0x0317;
         t.acutecmb = 0x0301;
         t.acutecomb = 0x0301;
         t.acutedeva = 0x0954;
         t.acutelowmod = 0x02cf;
         t.acutetonecmb = 0x0341;
         t.acyrillic = 0x0430;
         t.adblgrave = 0x0201;
         t.addakgurmukhi = 0x0a71;
         t.adeva = 0x0905;
         t.adieresis = 0x00e4;
         t.adieresiscyrillic = 0x04d3;
         t.adieresismacron = 0x01df;
         t.adotbelow = 0x1ea1;
         t.adotmacron = 0x01e1;
         t.ae = 0x00e6;
         t.aeacute = 0x01fd;
         t.aekorean = 0x3150;
         t.aemacron = 0x01e3;
         t.afii00208 = 0x2015;
         t.afii08941 = 0x20a4;
         t.afii10017 = 0x0410;
         t.afii10018 = 0x0411;
         t.afii10019 = 0x0412;
         t.afii10020 = 0x0413;
         t.afii10021 = 0x0414;
         t.afii10022 = 0x0415;
         t.afii10023 = 0x0401;
         t.afii10024 = 0x0416;
         t.afii10025 = 0x0417;
         t.afii10026 = 0x0418;
         t.afii10027 = 0x0419;
         t.afii10028 = 0x041a;
         t.afii10029 = 0x041b;
         t.afii10030 = 0x041c;
         t.afii10031 = 0x041d;
         t.afii10032 = 0x041e;
         t.afii10033 = 0x041f;
         t.afii10034 = 0x0420;
         t.afii10035 = 0x0421;
         t.afii10036 = 0x0422;
         t.afii10037 = 0x0423;
         t.afii10038 = 0x0424;
         t.afii10039 = 0x0425;
         t.afii10040 = 0x0426;
         t.afii10041 = 0x0427;
         t.afii10042 = 0x0428;
         t.afii10043 = 0x0429;
         t.afii10044 = 0x042a;
         t.afii10045 = 0x042b;
         t.afii10046 = 0x042c;
         t.afii10047 = 0x042d;
         t.afii10048 = 0x042e;
         t.afii10049 = 0x042f;
         t.afii10050 = 0x0490;
         t.afii10051 = 0x0402;
         t.afii10052 = 0x0403;
         t.afii10053 = 0x0404;
         t.afii10054 = 0x0405;
         t.afii10055 = 0x0406;
         t.afii10056 = 0x0407;
         t.afii10057 = 0x0408;
         t.afii10058 = 0x0409;
         t.afii10059 = 0x040a;
         t.afii10060 = 0x040b;
         t.afii10061 = 0x040c;
         t.afii10062 = 0x040e;
         t.afii10063 = 0xf6c4;
         t.afii10064 = 0xf6c5;
         t.afii10065 = 0x0430;
         t.afii10066 = 0x0431;
         t.afii10067 = 0x0432;
         t.afii10068 = 0x0433;
         t.afii10069 = 0x0434;
         t.afii10070 = 0x0435;
         t.afii10071 = 0x0451;
         t.afii10072 = 0x0436;
         t.afii10073 = 0x0437;
         t.afii10074 = 0x0438;
         t.afii10075 = 0x0439;
         t.afii10076 = 0x043a;
         t.afii10077 = 0x043b;
         t.afii10078 = 0x043c;
         t.afii10079 = 0x043d;
         t.afii10080 = 0x043e;
         t.afii10081 = 0x043f;
         t.afii10082 = 0x0440;
         t.afii10083 = 0x0441;
         t.afii10084 = 0x0442;
         t.afii10085 = 0x0443;
         t.afii10086 = 0x0444;
         t.afii10087 = 0x0445;
         t.afii10088 = 0x0446;
         t.afii10089 = 0x0447;
         t.afii10090 = 0x0448;
         t.afii10091 = 0x0449;
         t.afii10092 = 0x044a;
         t.afii10093 = 0x044b;
         t.afii10094 = 0x044c;
         t.afii10095 = 0x044d;
         t.afii10096 = 0x044e;
         t.afii10097 = 0x044f;
         t.afii10098 = 0x0491;
         t.afii10099 = 0x0452;
         t.afii10100 = 0x0453;
         t.afii10101 = 0x0454;
         t.afii10102 = 0x0455;
         t.afii10103 = 0x0456;
         t.afii10104 = 0x0457;
         t.afii10105 = 0x0458;
         t.afii10106 = 0x0459;
         t.afii10107 = 0x045a;
         t.afii10108 = 0x045b;
         t.afii10109 = 0x045c;
         t.afii10110 = 0x045e;
         t.afii10145 = 0x040f;
         t.afii10146 = 0x0462;
         t.afii10147 = 0x0472;
         t.afii10148 = 0x0474;
         t.afii10192 = 0xf6c6;
         t.afii10193 = 0x045f;
         t.afii10194 = 0x0463;
         t.afii10195 = 0x0473;
         t.afii10196 = 0x0475;
         t.afii10831 = 0xf6c7;
         t.afii10832 = 0xf6c8;
         t.afii10846 = 0x04d9;
         t.afii299 = 0x200e;
         t.afii300 = 0x200f;
         t.afii301 = 0x200d;
         t.afii57381 = 0x066a;
         t.afii57388 = 0x060c;
         t.afii57392 = 0x0660;
         t.afii57393 = 0x0661;
         t.afii57394 = 0x0662;
         t.afii57395 = 0x0663;
         t.afii57396 = 0x0664;
         t.afii57397 = 0x0665;
         t.afii57398 = 0x0666;
         t.afii57399 = 0x0667;
         t.afii57400 = 0x0668;
         t.afii57401 = 0x0669;
         t.afii57403 = 0x061b;
         t.afii57407 = 0x061f;
         t.afii57409 = 0x0621;
         t.afii57410 = 0x0622;
         t.afii57411 = 0x0623;
         t.afii57412 = 0x0624;
         t.afii57413 = 0x0625;
         t.afii57414 = 0x0626;
         t.afii57415 = 0x0627;
         t.afii57416 = 0x0628;
         t.afii57417 = 0x0629;
         t.afii57418 = 0x062a;
         t.afii57419 = 0x062b;
         t.afii57420 = 0x062c;
         t.afii57421 = 0x062d;
         t.afii57422 = 0x062e;
         t.afii57423 = 0x062f;
         t.afii57424 = 0x0630;
         t.afii57425 = 0x0631;
         t.afii57426 = 0x0632;
         t.afii57427 = 0x0633;
         t.afii57428 = 0x0634;
         t.afii57429 = 0x0635;
         t.afii57430 = 0x0636;
         t.afii57431 = 0x0637;
         t.afii57432 = 0x0638;
         t.afii57433 = 0x0639;
         t.afii57434 = 0x063a;
         t.afii57440 = 0x0640;
         t.afii57441 = 0x0641;
         t.afii57442 = 0x0642;
         t.afii57443 = 0x0643;
         t.afii57444 = 0x0644;
         t.afii57445 = 0x0645;
         t.afii57446 = 0x0646;
         t.afii57448 = 0x0648;
         t.afii57449 = 0x0649;
         t.afii57450 = 0x064a;
         t.afii57451 = 0x064b;
         t.afii57452 = 0x064c;
         t.afii57453 = 0x064d;
         t.afii57454 = 0x064e;
         t.afii57455 = 0x064f;
         t.afii57456 = 0x0650;
         t.afii57457 = 0x0651;
         t.afii57458 = 0x0652;
         t.afii57470 = 0x0647;
         t.afii57505 = 0x06a4;
         t.afii57506 = 0x067e;
         t.afii57507 = 0x0686;
         t.afii57508 = 0x0698;
         t.afii57509 = 0x06af;
         t.afii57511 = 0x0679;
         t.afii57512 = 0x0688;
         t.afii57513 = 0x0691;
         t.afii57514 = 0x06ba;
         t.afii57519 = 0x06d2;
         t.afii57534 = 0x06d5;
         t.afii57636 = 0x20aa;
         t.afii57645 = 0x05be;
         t.afii57658 = 0x05c3;
         t.afii57664 = 0x05d0;
         t.afii57665 = 0x05d1;
         t.afii57666 = 0x05d2;
         t.afii57667 = 0x05d3;
         t.afii57668 = 0x05d4;
         t.afii57669 = 0x05d5;
         t.afii57670 = 0x05d6;
         t.afii57671 = 0x05d7;
         t.afii57672 = 0x05d8;
         t.afii57673 = 0x05d9;
         t.afii57674 = 0x05da;
         t.afii57675 = 0x05db;
         t.afii57676 = 0x05dc;
         t.afii57677 = 0x05dd;
         t.afii57678 = 0x05de;
         t.afii57679 = 0x05df;
         t.afii57680 = 0x05e0;
         t.afii57681 = 0x05e1;
         t.afii57682 = 0x05e2;
         t.afii57683 = 0x05e3;
         t.afii57684 = 0x05e4;
         t.afii57685 = 0x05e5;
         t.afii57686 = 0x05e6;
         t.afii57687 = 0x05e7;
         t.afii57688 = 0x05e8;
         t.afii57689 = 0x05e9;
         t.afii57690 = 0x05ea;
         t.afii57694 = 0xfb2a;
         t.afii57695 = 0xfb2b;
         t.afii57700 = 0xfb4b;
         t.afii57705 = 0xfb1f;
         t.afii57716 = 0x05f0;
         t.afii57717 = 0x05f1;
         t.afii57718 = 0x05f2;
         t.afii57723 = 0xfb35;
         t.afii57793 = 0x05b4;
         t.afii57794 = 0x05b5;
         t.afii57795 = 0x05b6;
         t.afii57796 = 0x05bb;
         t.afii57797 = 0x05b8;
         t.afii57798 = 0x05b7;
         t.afii57799 = 0x05b0;
         t.afii57800 = 0x05b2;
         t.afii57801 = 0x05b1;
         t.afii57802 = 0x05b3;
         t.afii57803 = 0x05c2;
         t.afii57804 = 0x05c1;
         t.afii57806 = 0x05b9;
         t.afii57807 = 0x05bc;
         t.afii57839 = 0x05bd;
         t.afii57841 = 0x05bf;
         t.afii57842 = 0x05c0;
         t.afii57929 = 0x02bc;
         t.afii61248 = 0x2105;
         t.afii61289 = 0x2113;
         t.afii61352 = 0x2116;
         t.afii61573 = 0x202c;
         t.afii61574 = 0x202d;
         t.afii61575 = 0x202e;
         t.afii61664 = 0x200c;
         t.afii63167 = 0x066d;
         t.afii64937 = 0x02bd;
         t.agrave = 0x00e0;
         t.agujarati = 0x0a85;
         t.agurmukhi = 0x0a05;
         t.ahiragana = 0x3042;
         t.ahookabove = 0x1ea3;
         t.aibengali = 0x0990;
         t.aibopomofo = 0x311e;
         t.aideva = 0x0910;
         t.aiecyrillic = 0x04d5;
         t.aigujarati = 0x0a90;
         t.aigurmukhi = 0x0a10;
         t.aimatragurmukhi = 0x0a48;
         t.ainarabic = 0x0639;
         t.ainfinalarabic = 0xfeca;
         t.aininitialarabic = 0xfecb;
         t.ainmedialarabic = 0xfecc;
         t.ainvertedbreve = 0x0203;
         t.aivowelsignbengali = 0x09c8;
         t.aivowelsigndeva = 0x0948;
         t.aivowelsigngujarati = 0x0ac8;
         t.akatakana = 0x30a2;
         t.akatakanahalfwidth = 0xff71;
         t.akorean = 0x314f;
         t.alef = 0x05d0;
         t.alefarabic = 0x0627;
         t.alefdageshhebrew = 0xfb30;
         t.aleffinalarabic = 0xfe8e;
         t.alefhamzaabovearabic = 0x0623;
         t.alefhamzaabovefinalarabic = 0xfe84;
         t.alefhamzabelowarabic = 0x0625;
         t.alefhamzabelowfinalarabic = 0xfe88;
         t.alefhebrew = 0x05d0;
         t.aleflamedhebrew = 0xfb4f;
         t.alefmaddaabovearabic = 0x0622;
         t.alefmaddaabovefinalarabic = 0xfe82;
         t.alefmaksuraarabic = 0x0649;
         t.alefmaksurafinalarabic = 0xfef0;
         t.alefmaksurainitialarabic = 0xfef3;
         t.alefmaksuramedialarabic = 0xfef4;
         t.alefpatahhebrew = 0xfb2e;
         t.alefqamatshebrew = 0xfb2f;
         t.aleph = 0x2135;
         t.allequal = 0x224c;
         t.alpha = 0x03b1;
         t.alphatonos = 0x03ac;
         t.amacron = 0x0101;
         t.amonospace = 0xff41;
         t.ampersand = 0x0026;
         t.ampersandmonospace = 0xff06;
         t.ampersandsmall = 0xf726;
         t.amsquare = 0x33c2;
         t.anbopomofo = 0x3122;
         t.angbopomofo = 0x3124;
         t.angbracketleft = 0x3008;
         t.angbracketright = 0x3009;
         t.angkhankhuthai = 0x0e5a;
         t.angle = 0x2220;
         t.anglebracketleft = 0x3008;
         t.anglebracketleftvertical = 0xfe3f;
         t.anglebracketright = 0x3009;
         t.anglebracketrightvertical = 0xfe40;
         t.angleleft = 0x2329;
         t.angleright = 0x232a;
         t.angstrom = 0x212b;
         t.anoteleia = 0x0387;
         t.anudattadeva = 0x0952;
         t.anusvarabengali = 0x0982;
         t.anusvaradeva = 0x0902;
         t.anusvaragujarati = 0x0a82;
         t.aogonek = 0x0105;
         t.apaatosquare = 0x3300;
         t.aparen = 0x249c;
         t.apostrophearmenian = 0x055a;
         t.apostrophemod = 0x02bc;
         t.apple = 0xf8ff;
         t.approaches = 0x2250;
         t.approxequal = 0x2248;
         t.approxequalorimage = 0x2252;
         t.approximatelyequal = 0x2245;
         t.araeaekorean = 0x318e;
         t.araeakorean = 0x318d;
         t.arc = 0x2312;
         t.arighthalfring = 0x1e9a;
         t.aring = 0x00e5;
         t.aringacute = 0x01fb;
         t.aringbelow = 0x1e01;
         t.arrowboth = 0x2194;
         t.arrowdashdown = 0x21e3;
         t.arrowdashleft = 0x21e0;
         t.arrowdashright = 0x21e2;
         t.arrowdashup = 0x21e1;
         t.arrowdblboth = 0x21d4;
         t.arrowdbldown = 0x21d3;
         t.arrowdblleft = 0x21d0;
         t.arrowdblright = 0x21d2;
         t.arrowdblup = 0x21d1;
         t.arrowdown = 0x2193;
         t.arrowdownleft = 0x2199;
         t.arrowdownright = 0x2198;
         t.arrowdownwhite = 0x21e9;
         t.arrowheaddownmod = 0x02c5;
         t.arrowheadleftmod = 0x02c2;
         t.arrowheadrightmod = 0x02c3;
         t.arrowheadupmod = 0x02c4;
         t.arrowhorizex = 0xf8e7;
         t.arrowleft = 0x2190;
         t.arrowleftdbl = 0x21d0;
         t.arrowleftdblstroke = 0x21cd;
         t.arrowleftoverright = 0x21c6;
         t.arrowleftwhite = 0x21e6;
         t.arrowright = 0x2192;
         t.arrowrightdblstroke = 0x21cf;
         t.arrowrightheavy = 0x279e;
         t.arrowrightoverleft = 0x21c4;
         t.arrowrightwhite = 0x21e8;
         t.arrowtableft = 0x21e4;
         t.arrowtabright = 0x21e5;
         t.arrowup = 0x2191;
         t.arrowupdn = 0x2195;
         t.arrowupdnbse = 0x21a8;
         t.arrowupdownbase = 0x21a8;
         t.arrowupleft = 0x2196;
         t.arrowupleftofdown = 0x21c5;
         t.arrowupright = 0x2197;
         t.arrowupwhite = 0x21e7;
         t.arrowvertex = 0xf8e6;
         t.asciicircum = 0x005e;
         t.asciicircummonospace = 0xff3e;
         t.asciitilde = 0x007e;
         t.asciitildemonospace = 0xff5e;
         t.ascript = 0x0251;
         t.ascriptturned = 0x0252;
         t.asmallhiragana = 0x3041;
         t.asmallkatakana = 0x30a1;
         t.asmallkatakanahalfwidth = 0xff67;
         t.asterisk = 0x002a;
         t.asteriskaltonearabic = 0x066d;
         t.asteriskarabic = 0x066d;
         t.asteriskmath = 0x2217;
         t.asteriskmonospace = 0xff0a;
         t.asterisksmall = 0xfe61;
         t.asterism = 0x2042;
         t.asuperior = 0xf6e9;
         t.asymptoticallyequal = 0x2243;
         t.at = 0x0040;
         t.atilde = 0x00e3;
         t.atmonospace = 0xff20;
         t.atsmall = 0xfe6b;
         t.aturned = 0x0250;
         t.aubengali = 0x0994;
         t.aubopomofo = 0x3120;
         t.audeva = 0x0914;
         t.augujarati = 0x0a94;
         t.augurmukhi = 0x0a14;
         t.aulengthmarkbengali = 0x09d7;
         t.aumatragurmukhi = 0x0a4c;
         t.auvowelsignbengali = 0x09cc;
         t.auvowelsigndeva = 0x094c;
         t.auvowelsigngujarati = 0x0acc;
         t.avagrahadeva = 0x093d;
         t.aybarmenian = 0x0561;
         t.ayin = 0x05e2;
         t.ayinaltonehebrew = 0xfb20;
         t.ayinhebrew = 0x05e2;
         t.b = 0x0062;
         t.babengali = 0x09ac;
         t.backslash = 0x005c;
         t.backslashmonospace = 0xff3c;
         t.badeva = 0x092c;
         t.bagujarati = 0x0aac;
         t.bagurmukhi = 0x0a2c;
         t.bahiragana = 0x3070;
         t.bahtthai = 0x0e3f;
         t.bakatakana = 0x30d0;
         t.bar = 0x007c;
         t.barmonospace = 0xff5c;
         t.bbopomofo = 0x3105;
         t.bcircle = 0x24d1;
         t.bdotaccent = 0x1e03;
         t.bdotbelow = 0x1e05;
         t.beamedsixteenthnotes = 0x266c;
         t.because = 0x2235;
         t.becyrillic = 0x0431;
         t.beharabic = 0x0628;
         t.behfinalarabic = 0xfe90;
         t.behinitialarabic = 0xfe91;
         t.behiragana = 0x3079;
         t.behmedialarabic = 0xfe92;
         t.behmeeminitialarabic = 0xfc9f;
         t.behmeemisolatedarabic = 0xfc08;
         t.behnoonfinalarabic = 0xfc6d;
         t.bekatakana = 0x30d9;
         t.benarmenian = 0x0562;
         t.bet = 0x05d1;
         t.beta = 0x03b2;
         t.betasymbolgreek = 0x03d0;
         t.betdagesh = 0xfb31;
         t.betdageshhebrew = 0xfb31;
         t.bethebrew = 0x05d1;
         t.betrafehebrew = 0xfb4c;
         t.bhabengali = 0x09ad;
         t.bhadeva = 0x092d;
         t.bhagujarati = 0x0aad;
         t.bhagurmukhi = 0x0a2d;
         t.bhook = 0x0253;
         t.bihiragana = 0x3073;
         t.bikatakana = 0x30d3;
         t.bilabialclick = 0x0298;
         t.bindigurmukhi = 0x0a02;
         t.birusquare = 0x3331;
         t.blackcircle = 0x25cf;
         t.blackdiamond = 0x25c6;
         t.blackdownpointingtriangle = 0x25bc;
         t.blackleftpointingpointer = 0x25c4;
         t.blackleftpointingtriangle = 0x25c0;
         t.blacklenticularbracketleft = 0x3010;
         t.blacklenticularbracketleftvertical = 0xfe3b;
         t.blacklenticularbracketright = 0x3011;
         t.blacklenticularbracketrightvertical = 0xfe3c;
         t.blacklowerlefttriangle = 0x25e3;
         t.blacklowerrighttriangle = 0x25e2;
         t.blackrectangle = 0x25ac;
         t.blackrightpointingpointer = 0x25ba;
         t.blackrightpointingtriangle = 0x25b6;
         t.blacksmallsquare = 0x25aa;
         t.blacksmilingface = 0x263b;
         t.blacksquare = 0x25a0;
         t.blackstar = 0x2605;
         t.blackupperlefttriangle = 0x25e4;
         t.blackupperrighttriangle = 0x25e5;
         t.blackuppointingsmalltriangle = 0x25b4;
         t.blackuppointingtriangle = 0x25b2;
         t.blank = 0x2423;
         t.blinebelow = 0x1e07;
         t.block = 0x2588;
         t.bmonospace = 0xff42;
         t.bobaimaithai = 0x0e1a;
         t.bohiragana = 0x307c;
         t.bokatakana = 0x30dc;
         t.bparen = 0x249d;
         t.bqsquare = 0x33c3;
         t.braceex = 0xf8f4;
         t.braceleft = 0x007b;
         t.braceleftbt = 0xf8f3;
         t.braceleftmid = 0xf8f2;
         t.braceleftmonospace = 0xff5b;
         t.braceleftsmall = 0xfe5b;
         t.bracelefttp = 0xf8f1;
         t.braceleftvertical = 0xfe37;
         t.braceright = 0x007d;
         t.bracerightbt = 0xf8fe;
         t.bracerightmid = 0xf8fd;
         t.bracerightmonospace = 0xff5d;
         t.bracerightsmall = 0xfe5c;
         t.bracerighttp = 0xf8fc;
         t.bracerightvertical = 0xfe38;
         t.bracketleft = 0x005b;
         t.bracketleftbt = 0xf8f0;
         t.bracketleftex = 0xf8ef;
         t.bracketleftmonospace = 0xff3b;
         t.bracketlefttp = 0xf8ee;
         t.bracketright = 0x005d;
         t.bracketrightbt = 0xf8fb;
         t.bracketrightex = 0xf8fa;
         t.bracketrightmonospace = 0xff3d;
         t.bracketrighttp = 0xf8f9;
         t.breve = 0x02d8;
         t.brevebelowcmb = 0x032e;
         t.brevecmb = 0x0306;
         t.breveinvertedbelowcmb = 0x032f;
         t.breveinvertedcmb = 0x0311;
         t.breveinverteddoublecmb = 0x0361;
         t.bridgebelowcmb = 0x032a;
         t.bridgeinvertedbelowcmb = 0x033a;
         t.brokenbar = 0x00a6;
         t.bstroke = 0x0180;
         t.bsuperior = 0xf6ea;
         t.btopbar = 0x0183;
         t.buhiragana = 0x3076;
         t.bukatakana = 0x30d6;
         t.bullet = 0x2022;
         t.bulletinverse = 0x25d8;
         t.bulletoperator = 0x2219;
         t.bullseye = 0x25ce;
         t.c = 0x0063;
         t.caarmenian = 0x056e;
         t.cabengali = 0x099a;
         t.cacute = 0x0107;
         t.cadeva = 0x091a;
         t.cagujarati = 0x0a9a;
         t.cagurmukhi = 0x0a1a;
         t.calsquare = 0x3388;
         t.candrabindubengali = 0x0981;
         t.candrabinducmb = 0x0310;
         t.candrabindudeva = 0x0901;
         t.candrabindugujarati = 0x0a81;
         t.capslock = 0x21ea;
         t.careof = 0x2105;
         t.caron = 0x02c7;
         t.caronbelowcmb = 0x032c;
         t.caroncmb = 0x030c;
         t.carriagereturn = 0x21b5;
         t.cbopomofo = 0x3118;
         t.ccaron = 0x010d;
         t.ccedilla = 0x00e7;
         t.ccedillaacute = 0x1e09;
         t.ccircle = 0x24d2;
         t.ccircumflex = 0x0109;
         t.ccurl = 0x0255;
         t.cdot = 0x010b;
         t.cdotaccent = 0x010b;
         t.cdsquare = 0x33c5;
         t.cedilla = 0x00b8;
         t.cedillacmb = 0x0327;
         t.cent = 0x00a2;
         t.centigrade = 0x2103;
         t.centinferior = 0xf6df;
         t.centmonospace = 0xffe0;
         t.centoldstyle = 0xf7a2;
         t.centsuperior = 0xf6e0;
         t.chaarmenian = 0x0579;
         t.chabengali = 0x099b;
         t.chadeva = 0x091b;
         t.chagujarati = 0x0a9b;
         t.chagurmukhi = 0x0a1b;
         t.chbopomofo = 0x3114;
         t.cheabkhasiancyrillic = 0x04bd;
         t.checkmark = 0x2713;
         t.checyrillic = 0x0447;
         t.chedescenderabkhasiancyrillic = 0x04bf;
         t.chedescendercyrillic = 0x04b7;
         t.chedieresiscyrillic = 0x04f5;
         t.cheharmenian = 0x0573;
         t.chekhakassiancyrillic = 0x04cc;
         t.cheverticalstrokecyrillic = 0x04b9;
         t.chi = 0x03c7;
         t.chieuchacirclekorean = 0x3277;
         t.chieuchaparenkorean = 0x3217;
         t.chieuchcirclekorean = 0x3269;
         t.chieuchkorean = 0x314a;
         t.chieuchparenkorean = 0x3209;
         t.chochangthai = 0x0e0a;
         t.chochanthai = 0x0e08;
         t.chochingthai = 0x0e09;
         t.chochoethai = 0x0e0c;
         t.chook = 0x0188;
         t.cieucacirclekorean = 0x3276;
         t.cieucaparenkorean = 0x3216;
         t.cieuccirclekorean = 0x3268;
         t.cieuckorean = 0x3148;
         t.cieucparenkorean = 0x3208;
         t.cieucuparenkorean = 0x321c;
         t.circle = 0x25cb;
         t.circlecopyrt = 0x00a9;
         t.circlemultiply = 0x2297;
         t.circleot = 0x2299;
         t.circleplus = 0x2295;
         t.circlepostalmark = 0x3036;
         t.circlewithlefthalfblack = 0x25d0;
         t.circlewithrighthalfblack = 0x25d1;
         t.circumflex = 0x02c6;
         t.circumflexbelowcmb = 0x032d;
         t.circumflexcmb = 0x0302;
         t.clear = 0x2327;
         t.clickalveolar = 0x01c2;
         t.clickdental = 0x01c0;
         t.clicklateral = 0x01c1;
         t.clickretroflex = 0x01c3;
         t.club = 0x2663;
         t.clubsuitblack = 0x2663;
         t.clubsuitwhite = 0x2667;
         t.cmcubedsquare = 0x33a4;
         t.cmonospace = 0xff43;
         t.cmsquaredsquare = 0x33a0;
         t.coarmenian = 0x0581;
         t.colon = 0x003a;
         t.colonmonetary = 0x20a1;
         t.colonmonospace = 0xff1a;
         t.colonsign = 0x20a1;
         t.colonsmall = 0xfe55;
         t.colontriangularhalfmod = 0x02d1;
         t.colontriangularmod = 0x02d0;
         t.comma = 0x002c;
         t.commaabovecmb = 0x0313;
         t.commaaboverightcmb = 0x0315;
         t.commaaccent = 0xf6c3;
         t.commaarabic = 0x060c;
         t.commaarmenian = 0x055d;
         t.commainferior = 0xf6e1;
         t.commamonospace = 0xff0c;
         t.commareversedabovecmb = 0x0314;
         t.commareversedmod = 0x02bd;
         t.commasmall = 0xfe50;
         t.commasuperior = 0xf6e2;
         t.commaturnedabovecmb = 0x0312;
         t.commaturnedmod = 0x02bb;
         t.compass = 0x263c;
         t.congruent = 0x2245;
         t.contourintegral = 0x222e;
         t.control = 0x2303;
         t.controlACK = 0x0006;
         t.controlBEL = 0x0007;
         t.controlBS = 0x0008;
         t.controlCAN = 0x0018;
         t.controlCR = 0x000d;
         t.controlDC1 = 0x0011;
         t.controlDC2 = 0x0012;
         t.controlDC3 = 0x0013;
         t.controlDC4 = 0x0014;
         t.controlDEL = 0x007f;
         t.controlDLE = 0x0010;
         t.controlEM = 0x0019;
         t.controlENQ = 0x0005;
         t.controlEOT = 0x0004;
         t.controlESC = 0x001b;
         t.controlETB = 0x0017;
         t.controlETX = 0x0003;
         t.controlFF = 0x000c;
         t.controlFS = 0x001c;
         t.controlGS = 0x001d;
         t.controlHT = 0x0009;
         t.controlLF = 0x000a;
         t.controlNAK = 0x0015;
         t.controlNULL = 0x0000;
         t.controlRS = 0x001e;
         t.controlSI = 0x000f;
         t.controlSO = 0x000e;
         t.controlSOT = 0x0002;
         t.controlSTX = 0x0001;
         t.controlSUB = 0x001a;
         t.controlSYN = 0x0016;
         t.controlUS = 0x001f;
         t.controlVT = 0x000b;
         t.copyright = 0x00a9;
         t.copyrightsans = 0xf8e9;
         t.copyrightserif = 0xf6d9;
         t.cornerbracketleft = 0x300c;
         t.cornerbracketlefthalfwidth = 0xff62;
         t.cornerbracketleftvertical = 0xfe41;
         t.cornerbracketright = 0x300d;
         t.cornerbracketrighthalfwidth = 0xff63;
         t.cornerbracketrightvertical = 0xfe42;
         t.corporationsquare = 0x337f;
         t.cosquare = 0x33c7;
         t.coverkgsquare = 0x33c6;
         t.cparen = 0x249e;
         t.cruzeiro = 0x20a2;
         t.cstretched = 0x0297;
         t.curlyand = 0x22cf;
         t.curlyor = 0x22ce;
         t.currency = 0x00a4;
         t.cyrBreve = 0xf6d1;
         t.cyrFlex = 0xf6d2;
         t.cyrbreve = 0xf6d4;
         t.cyrflex = 0xf6d5;
         t.d = 0x0064;
         t.daarmenian = 0x0564;
         t.dabengali = 0x09a6;
         t.dadarabic = 0x0636;
         t.dadeva = 0x0926;
         t.dadfinalarabic = 0xfebe;
         t.dadinitialarabic = 0xfebf;
         t.dadmedialarabic = 0xfec0;
         t.dagesh = 0x05bc;
         t.dageshhebrew = 0x05bc;
         t.dagger = 0x2020;
         t.daggerdbl = 0x2021;
         t.dagujarati = 0x0aa6;
         t.dagurmukhi = 0x0a26;
         t.dahiragana = 0x3060;
         t.dakatakana = 0x30c0;
         t.dalarabic = 0x062f;
         t.dalet = 0x05d3;
         t.daletdagesh = 0xfb33;
         t.daletdageshhebrew = 0xfb33;
         t.dalethebrew = 0x05d3;
         t.dalfinalarabic = 0xfeaa;
         t.dammaarabic = 0x064f;
         t.dammalowarabic = 0x064f;
         t.dammatanaltonearabic = 0x064c;
         t.dammatanarabic = 0x064c;
         t.danda = 0x0964;
         t.dargahebrew = 0x05a7;
         t.dargalefthebrew = 0x05a7;
         t.dasiapneumatacyrilliccmb = 0x0485;
         t.dblGrave = 0xf6d3;
         t.dblanglebracketleft = 0x300a;
         t.dblanglebracketleftvertical = 0xfe3d;
         t.dblanglebracketright = 0x300b;
         t.dblanglebracketrightvertical = 0xfe3e;
         t.dblarchinvertedbelowcmb = 0x032b;
         t.dblarrowleft = 0x21d4;
         t.dblarrowright = 0x21d2;
         t.dbldanda = 0x0965;
         t.dblgrave = 0xf6d6;
         t.dblgravecmb = 0x030f;
         t.dblintegral = 0x222c;
         t.dbllowline = 0x2017;
         t.dbllowlinecmb = 0x0333;
         t.dbloverlinecmb = 0x033f;
         t.dblprimemod = 0x02ba;
         t.dblverticalbar = 0x2016;
         t.dblverticallineabovecmb = 0x030e;
         t.dbopomofo = 0x3109;
         t.dbsquare = 0x33c8;
         t.dcaron = 0x010f;
         t.dcedilla = 0x1e11;
         t.dcircle = 0x24d3;
         t.dcircumflexbelow = 0x1e13;
         t.dcroat = 0x0111;
         t.ddabengali = 0x09a1;
         t.ddadeva = 0x0921;
         t.ddagujarati = 0x0aa1;
         t.ddagurmukhi = 0x0a21;
         t.ddalarabic = 0x0688;
         t.ddalfinalarabic = 0xfb89;
         t.dddhadeva = 0x095c;
         t.ddhabengali = 0x09a2;
         t.ddhadeva = 0x0922;
         t.ddhagujarati = 0x0aa2;
         t.ddhagurmukhi = 0x0a22;
         t.ddotaccent = 0x1e0b;
         t.ddotbelow = 0x1e0d;
         t.decimalseparatorarabic = 0x066b;
         t.decimalseparatorpersian = 0x066b;
         t.decyrillic = 0x0434;
         t.degree = 0x00b0;
         t.dehihebrew = 0x05ad;
         t.dehiragana = 0x3067;
         t.deicoptic = 0x03ef;
         t.dekatakana = 0x30c7;
         t.deleteleft = 0x232b;
         t.deleteright = 0x2326;
         t.delta = 0x03b4;
         t.deltaturned = 0x018d;
         t.denominatorminusonenumeratorbengali = 0x09f8;
         t.dezh = 0x02a4;
         t.dhabengali = 0x09a7;
         t.dhadeva = 0x0927;
         t.dhagujarati = 0x0aa7;
         t.dhagurmukhi = 0x0a27;
         t.dhook = 0x0257;
         t.dialytikatonos = 0x0385;
         t.dialytikatonoscmb = 0x0344;
         t.diamond = 0x2666;
         t.diamondsuitwhite = 0x2662;
         t.dieresis = 0x00a8;
         t.dieresisacute = 0xf6d7;
         t.dieresisbelowcmb = 0x0324;
         t.dieresiscmb = 0x0308;
         t.dieresisgrave = 0xf6d8;
         t.dieresistonos = 0x0385;
         t.dihiragana = 0x3062;
         t.dikatakana = 0x30c2;
         t.dittomark = 0x3003;
         t.divide = 0x00f7;
         t.divides = 0x2223;
         t.divisionslash = 0x2215;
         t.djecyrillic = 0x0452;
         t.dkshade = 0x2593;
         t.dlinebelow = 0x1e0f;
         t.dlsquare = 0x3397;
         t.dmacron = 0x0111;
         t.dmonospace = 0xff44;
         t.dnblock = 0x2584;
         t.dochadathai = 0x0e0e;
         t.dodekthai = 0x0e14;
         t.dohiragana = 0x3069;
         t.dokatakana = 0x30c9;
         t.dollar = 0x0024;
         t.dollarinferior = 0xf6e3;
         t.dollarmonospace = 0xff04;
         t.dollaroldstyle = 0xf724;
         t.dollarsmall = 0xfe69;
         t.dollarsuperior = 0xf6e4;
         t.dong = 0x20ab;
         t.dorusquare = 0x3326;
         t.dotaccent = 0x02d9;
         t.dotaccentcmb = 0x0307;
         t.dotbelowcmb = 0x0323;
         t.dotbelowcomb = 0x0323;
         t.dotkatakana = 0x30fb;
         t.dotlessi = 0x0131;
         t.dotlessj = 0xf6be;
         t.dotlessjstrokehook = 0x0284;
         t.dotmath = 0x22c5;
         t.dottedcircle = 0x25cc;
         t.doubleyodpatah = 0xfb1f;
         t.doubleyodpatahhebrew = 0xfb1f;
         t.downtackbelowcmb = 0x031e;
         t.downtackmod = 0x02d5;
         t.dparen = 0x249f;
         t.dsuperior = 0xf6eb;
         t.dtail = 0x0256;
         t.dtopbar = 0x018c;
         t.duhiragana = 0x3065;
         t.dukatakana = 0x30c5;
         t.dz = 0x01f3;
         t.dzaltone = 0x02a3;
         t.dzcaron = 0x01c6;
         t.dzcurl = 0x02a5;
         t.dzeabkhasiancyrillic = 0x04e1;
         t.dzecyrillic = 0x0455;
         t.dzhecyrillic = 0x045f;
         t.e = 0x0065;
         t.eacute = 0x00e9;
         t.earth = 0x2641;
         t.ebengali = 0x098f;
         t.ebopomofo = 0x311c;
         t.ebreve = 0x0115;
         t.ecandradeva = 0x090d;
         t.ecandragujarati = 0x0a8d;
         t.ecandravowelsigndeva = 0x0945;
         t.ecandravowelsigngujarati = 0x0ac5;
         t.ecaron = 0x011b;
         t.ecedillabreve = 0x1e1d;
         t.echarmenian = 0x0565;
         t.echyiwnarmenian = 0x0587;
         t.ecircle = 0x24d4;
         t.ecircumflex = 0x00ea;
         t.ecircumflexacute = 0x1ebf;
         t.ecircumflexbelow = 0x1e19;
         t.ecircumflexdotbelow = 0x1ec7;
         t.ecircumflexgrave = 0x1ec1;
         t.ecircumflexhookabove = 0x1ec3;
         t.ecircumflextilde = 0x1ec5;
         t.ecyrillic = 0x0454;
         t.edblgrave = 0x0205;
         t.edeva = 0x090f;
         t.edieresis = 0x00eb;
         t.edot = 0x0117;
         t.edotaccent = 0x0117;
         t.edotbelow = 0x1eb9;
         t.eegurmukhi = 0x0a0f;
         t.eematragurmukhi = 0x0a47;
         t.efcyrillic = 0x0444;
         t.egrave = 0x00e8;
         t.egujarati = 0x0a8f;
         t.eharmenian = 0x0567;
         t.ehbopomofo = 0x311d;
         t.ehiragana = 0x3048;
         t.ehookabove = 0x1ebb;
         t.eibopomofo = 0x311f;
         t.eight = 0x0038;
         t.eightarabic = 0x0668;
         t.eightbengali = 0x09ee;
         t.eightcircle = 0x2467;
         t.eightcircleinversesansserif = 0x2791;
         t.eightdeva = 0x096e;
         t.eighteencircle = 0x2471;
         t.eighteenparen = 0x2485;
         t.eighteenperiod = 0x2499;
         t.eightgujarati = 0x0aee;
         t.eightgurmukhi = 0x0a6e;
         t.eighthackarabic = 0x0668;
         t.eighthangzhou = 0x3028;
         t.eighthnotebeamed = 0x266b;
         t.eightideographicparen = 0x3227;
         t.eightinferior = 0x2088;
         t.eightmonospace = 0xff18;
         t.eightoldstyle = 0xf738;
         t.eightparen = 0x247b;
         t.eightperiod = 0x248f;
         t.eightpersian = 0x06f8;
         t.eightroman = 0x2177;
         t.eightsuperior = 0x2078;
         t.eightthai = 0x0e58;
         t.einvertedbreve = 0x0207;
         t.eiotifiedcyrillic = 0x0465;
         t.ekatakana = 0x30a8;
         t.ekatakanahalfwidth = 0xff74;
         t.ekonkargurmukhi = 0x0a74;
         t.ekorean = 0x3154;
         t.elcyrillic = 0x043b;
         t.element = 0x2208;
         t.elevencircle = 0x246a;
         t.elevenparen = 0x247e;
         t.elevenperiod = 0x2492;
         t.elevenroman = 0x217a;
         t.ellipsis = 0x2026;
         t.ellipsisvertical = 0x22ee;
         t.emacron = 0x0113;
         t.emacronacute = 0x1e17;
         t.emacrongrave = 0x1e15;
         t.emcyrillic = 0x043c;
         t.emdash = 0x2014;
         t.emdashvertical = 0xfe31;
         t.emonospace = 0xff45;
         t.emphasismarkarmenian = 0x055b;
         t.emptyset = 0x2205;
         t.enbopomofo = 0x3123;
         t.encyrillic = 0x043d;
         t.endash = 0x2013;
         t.endashvertical = 0xfe32;
         t.endescendercyrillic = 0x04a3;
         t.eng = 0x014b;
         t.engbopomofo = 0x3125;
         t.enghecyrillic = 0x04a5;
         t.enhookcyrillic = 0x04c8;
         t.enspace = 0x2002;
         t.eogonek = 0x0119;
         t.eokorean = 0x3153;
         t.eopen = 0x025b;
         t.eopenclosed = 0x029a;
         t.eopenreversed = 0x025c;
         t.eopenreversedclosed = 0x025e;
         t.eopenreversedhook = 0x025d;
         t.eparen = 0x24a0;
         t.epsilon = 0x03b5;
         t.epsilontonos = 0x03ad;
         t.equal = 0x003d;
         t.equalmonospace = 0xff1d;
         t.equalsmall = 0xfe66;
         t.equalsuperior = 0x207c;
         t.equivalence = 0x2261;
         t.erbopomofo = 0x3126;
         t.ercyrillic = 0x0440;
         t.ereversed = 0x0258;
         t.ereversedcyrillic = 0x044d;
         t.escyrillic = 0x0441;
         t.esdescendercyrillic = 0x04ab;
         t.esh = 0x0283;
         t.eshcurl = 0x0286;
         t.eshortdeva = 0x090e;
         t.eshortvowelsigndeva = 0x0946;
         t.eshreversedloop = 0x01aa;
         t.eshsquatreversed = 0x0285;
         t.esmallhiragana = 0x3047;
         t.esmallkatakana = 0x30a7;
         t.esmallkatakanahalfwidth = 0xff6a;
         t.estimated = 0x212e;
         t.esuperior = 0xf6ec;
         t.eta = 0x03b7;
         t.etarmenian = 0x0568;
         t.etatonos = 0x03ae;
         t.eth = 0x00f0;
         t.etilde = 0x1ebd;
         t.etildebelow = 0x1e1b;
         t.etnahtafoukhhebrew = 0x0591;
         t.etnahtafoukhlefthebrew = 0x0591;
         t.etnahtahebrew = 0x0591;
         t.etnahtalefthebrew = 0x0591;
         t.eturned = 0x01dd;
         t.eukorean = 0x3161;
         t.euro = 0x20ac;
         t.evowelsignbengali = 0x09c7;
         t.evowelsigndeva = 0x0947;
         t.evowelsigngujarati = 0x0ac7;
         t.exclam = 0x0021;
         t.exclamarmenian = 0x055c;
         t.exclamdbl = 0x203c;
         t.exclamdown = 0x00a1;
         t.exclamdownsmall = 0xf7a1;
         t.exclammonospace = 0xff01;
         t.exclamsmall = 0xf721;
         t.existential = 0x2203;
         t.ezh = 0x0292;
         t.ezhcaron = 0x01ef;
         t.ezhcurl = 0x0293;
         t.ezhreversed = 0x01b9;
         t.ezhtail = 0x01ba;
         t.f = 0x0066;
         t.fadeva = 0x095e;
         t.fagurmukhi = 0x0a5e;
         t.fahrenheit = 0x2109;
         t.fathaarabic = 0x064e;
         t.fathalowarabic = 0x064e;
         t.fathatanarabic = 0x064b;
         t.fbopomofo = 0x3108;
         t.fcircle = 0x24d5;
         t.fdotaccent = 0x1e1f;
         t.feharabic = 0x0641;
         t.feharmenian = 0x0586;
         t.fehfinalarabic = 0xfed2;
         t.fehinitialarabic = 0xfed3;
         t.fehmedialarabic = 0xfed4;
         t.feicoptic = 0x03e5;
         t.female = 0x2640;
         t.ff = 0xfb00;
         t.f_f = 0xfb00;
         t.ffi = 0xfb03;
         t.f_f_i = 0xfb03;
         t.ffl = 0xfb04;
         t.f_f_l = 0xfb04;
         t.fi = 0xfb01;
         t.f_i = 0xfb01;
         t.fifteencircle = 0x246e;
         t.fifteenparen = 0x2482;
         t.fifteenperiod = 0x2496;
         t.figuredash = 0x2012;
         t.filledbox = 0x25a0;
         t.filledrect = 0x25ac;
         t.finalkaf = 0x05da;
         t.finalkafdagesh = 0xfb3a;
         t.finalkafdageshhebrew = 0xfb3a;
         t.finalkafhebrew = 0x05da;
         t.finalmem = 0x05dd;
         t.finalmemhebrew = 0x05dd;
         t.finalnun = 0x05df;
         t.finalnunhebrew = 0x05df;
         t.finalpe = 0x05e3;
         t.finalpehebrew = 0x05e3;
         t.finaltsadi = 0x05e5;
         t.finaltsadihebrew = 0x05e5;
         t.firsttonechinese = 0x02c9;
         t.fisheye = 0x25c9;
         t.fitacyrillic = 0x0473;
         t.five = 0x0035;
         t.fivearabic = 0x0665;
         t.fivebengali = 0x09eb;
         t.fivecircle = 0x2464;
         t.fivecircleinversesansserif = 0x278e;
         t.fivedeva = 0x096b;
         t.fiveeighths = 0x215d;
         t.fivegujarati = 0x0aeb;
         t.fivegurmukhi = 0x0a6b;
         t.fivehackarabic = 0x0665;
         t.fivehangzhou = 0x3025;
         t.fiveideographicparen = 0x3224;
         t.fiveinferior = 0x2085;
         t.fivemonospace = 0xff15;
         t.fiveoldstyle = 0xf735;
         t.fiveparen = 0x2478;
         t.fiveperiod = 0x248c;
         t.fivepersian = 0x06f5;
         t.fiveroman = 0x2174;
         t.fivesuperior = 0x2075;
         t.fivethai = 0x0e55;
         t.fl = 0xfb02;
         t.f_l = 0xfb02;
         t.florin = 0x0192;
         t.fmonospace = 0xff46;
         t.fmsquare = 0x3399;
         t.fofanthai = 0x0e1f;
         t.fofathai = 0x0e1d;
         t.fongmanthai = 0x0e4f;
         t.forall = 0x2200;
         t.four = 0x0034;
         t.fourarabic = 0x0664;
         t.fourbengali = 0x09ea;
         t.fourcircle = 0x2463;
         t.fourcircleinversesansserif = 0x278d;
         t.fourdeva = 0x096a;
         t.fourgujarati = 0x0aea;
         t.fourgurmukhi = 0x0a6a;
         t.fourhackarabic = 0x0664;
         t.fourhangzhou = 0x3024;
         t.fourideographicparen = 0x3223;
         t.fourinferior = 0x2084;
         t.fourmonospace = 0xff14;
         t.fournumeratorbengali = 0x09f7;
         t.fouroldstyle = 0xf734;
         t.fourparen = 0x2477;
         t.fourperiod = 0x248b;
         t.fourpersian = 0x06f4;
         t.fourroman = 0x2173;
         t.foursuperior = 0x2074;
         t.fourteencircle = 0x246d;
         t.fourteenparen = 0x2481;
         t.fourteenperiod = 0x2495;
         t.fourthai = 0x0e54;
         t.fourthtonechinese = 0x02cb;
         t.fparen = 0x24a1;
         t.fraction = 0x2044;
         t.franc = 0x20a3;
         t.g = 0x0067;
         t.gabengali = 0x0997;
         t.gacute = 0x01f5;
         t.gadeva = 0x0917;
         t.gafarabic = 0x06af;
         t.gaffinalarabic = 0xfb93;
         t.gafinitialarabic = 0xfb94;
         t.gafmedialarabic = 0xfb95;
         t.gagujarati = 0x0a97;
         t.gagurmukhi = 0x0a17;
         t.gahiragana = 0x304c;
         t.gakatakana = 0x30ac;
         t.gamma = 0x03b3;
         t.gammalatinsmall = 0x0263;
         t.gammasuperior = 0x02e0;
         t.gangiacoptic = 0x03eb;
         t.gbopomofo = 0x310d;
         t.gbreve = 0x011f;
         t.gcaron = 0x01e7;
         t.gcedilla = 0x0123;
         t.gcircle = 0x24d6;
         t.gcircumflex = 0x011d;
         t.gcommaaccent = 0x0123;
         t.gdot = 0x0121;
         t.gdotaccent = 0x0121;
         t.gecyrillic = 0x0433;
         t.gehiragana = 0x3052;
         t.gekatakana = 0x30b2;
         t.geometricallyequal = 0x2251;
         t.gereshaccenthebrew = 0x059c;
         t.gereshhebrew = 0x05f3;
         t.gereshmuqdamhebrew = 0x059d;
         t.germandbls = 0x00df;
         t.gershayimaccenthebrew = 0x059e;
         t.gershayimhebrew = 0x05f4;
         t.getamark = 0x3013;
         t.ghabengali = 0x0998;
         t.ghadarmenian = 0x0572;
         t.ghadeva = 0x0918;
         t.ghagujarati = 0x0a98;
         t.ghagurmukhi = 0x0a18;
         t.ghainarabic = 0x063a;
         t.ghainfinalarabic = 0xfece;
         t.ghaininitialarabic = 0xfecf;
         t.ghainmedialarabic = 0xfed0;
         t.ghemiddlehookcyrillic = 0x0495;
         t.ghestrokecyrillic = 0x0493;
         t.gheupturncyrillic = 0x0491;
         t.ghhadeva = 0x095a;
         t.ghhagurmukhi = 0x0a5a;
         t.ghook = 0x0260;
         t.ghzsquare = 0x3393;
         t.gihiragana = 0x304e;
         t.gikatakana = 0x30ae;
         t.gimarmenian = 0x0563;
         t.gimel = 0x05d2;
         t.gimeldagesh = 0xfb32;
         t.gimeldageshhebrew = 0xfb32;
         t.gimelhebrew = 0x05d2;
         t.gjecyrillic = 0x0453;
         t.glottalinvertedstroke = 0x01be;
         t.glottalstop = 0x0294;
         t.glottalstopinverted = 0x0296;
         t.glottalstopmod = 0x02c0;
         t.glottalstopreversed = 0x0295;
         t.glottalstopreversedmod = 0x02c1;
         t.glottalstopreversedsuperior = 0x02e4;
         t.glottalstopstroke = 0x02a1;
         t.glottalstopstrokereversed = 0x02a2;
         t.gmacron = 0x1e21;
         t.gmonospace = 0xff47;
         t.gohiragana = 0x3054;
         t.gokatakana = 0x30b4;
         t.gparen = 0x24a2;
         t.gpasquare = 0x33ac;
         t.gradient = 0x2207;
         t.grave = 0x0060;
         t.gravebelowcmb = 0x0316;
         t.gravecmb = 0x0300;
         t.gravecomb = 0x0300;
         t.gravedeva = 0x0953;
         t.gravelowmod = 0x02ce;
         t.gravemonospace = 0xff40;
         t.gravetonecmb = 0x0340;
         t.greater = 0x003e;
         t.greaterequal = 0x2265;
         t.greaterequalorless = 0x22db;
         t.greatermonospace = 0xff1e;
         t.greaterorequivalent = 0x2273;
         t.greaterorless = 0x2277;
         t.greateroverequal = 0x2267;
         t.greatersmall = 0xfe65;
         t.gscript = 0x0261;
         t.gstroke = 0x01e5;
         t.guhiragana = 0x3050;
         t.guillemotleft = 0x00ab;
         t.guillemotright = 0x00bb;
         t.guilsinglleft = 0x2039;
         t.guilsinglright = 0x203a;
         t.gukatakana = 0x30b0;
         t.guramusquare = 0x3318;
         t.gysquare = 0x33c9;
         t.h = 0x0068;
         t.haabkhasiancyrillic = 0x04a9;
         t.haaltonearabic = 0x06c1;
         t.habengali = 0x09b9;
         t.hadescendercyrillic = 0x04b3;
         t.hadeva = 0x0939;
         t.hagujarati = 0x0ab9;
         t.hagurmukhi = 0x0a39;
         t.haharabic = 0x062d;
         t.hahfinalarabic = 0xfea2;
         t.hahinitialarabic = 0xfea3;
         t.hahiragana = 0x306f;
         t.hahmedialarabic = 0xfea4;
         t.haitusquare = 0x332a;
         t.hakatakana = 0x30cf;
         t.hakatakanahalfwidth = 0xff8a;
         t.halantgurmukhi = 0x0a4d;
         t.hamzaarabic = 0x0621;
         t.hamzalowarabic = 0x0621;
         t.hangulfiller = 0x3164;
         t.hardsigncyrillic = 0x044a;
         t.harpoonleftbarbup = 0x21bc;
         t.harpoonrightbarbup = 0x21c0;
         t.hasquare = 0x33ca;
         t.hatafpatah = 0x05b2;
         t.hatafpatah16 = 0x05b2;
         t.hatafpatah23 = 0x05b2;
         t.hatafpatah2f = 0x05b2;
         t.hatafpatahhebrew = 0x05b2;
         t.hatafpatahnarrowhebrew = 0x05b2;
         t.hatafpatahquarterhebrew = 0x05b2;
         t.hatafpatahwidehebrew = 0x05b2;
         t.hatafqamats = 0x05b3;
         t.hatafqamats1b = 0x05b3;
         t.hatafqamats28 = 0x05b3;
         t.hatafqamats34 = 0x05b3;
         t.hatafqamatshebrew = 0x05b3;
         t.hatafqamatsnarrowhebrew = 0x05b3;
         t.hatafqamatsquarterhebrew = 0x05b3;
         t.hatafqamatswidehebrew = 0x05b3;
         t.hatafsegol = 0x05b1;
         t.hatafsegol17 = 0x05b1;
         t.hatafsegol24 = 0x05b1;
         t.hatafsegol30 = 0x05b1;
         t.hatafsegolhebrew = 0x05b1;
         t.hatafsegolnarrowhebrew = 0x05b1;
         t.hatafsegolquarterhebrew = 0x05b1;
         t.hatafsegolwidehebrew = 0x05b1;
         t.hbar = 0x0127;
         t.hbopomofo = 0x310f;
         t.hbrevebelow = 0x1e2b;
         t.hcedilla = 0x1e29;
         t.hcircle = 0x24d7;
         t.hcircumflex = 0x0125;
         t.hdieresis = 0x1e27;
         t.hdotaccent = 0x1e23;
         t.hdotbelow = 0x1e25;
         t.he = 0x05d4;
         t.heart = 0x2665;
         t.heartsuitblack = 0x2665;
         t.heartsuitwhite = 0x2661;
         t.hedagesh = 0xfb34;
         t.hedageshhebrew = 0xfb34;
         t.hehaltonearabic = 0x06c1;
         t.heharabic = 0x0647;
         t.hehebrew = 0x05d4;
         t.hehfinalaltonearabic = 0xfba7;
         t.hehfinalalttwoarabic = 0xfeea;
         t.hehfinalarabic = 0xfeea;
         t.hehhamzaabovefinalarabic = 0xfba5;
         t.hehhamzaaboveisolatedarabic = 0xfba4;
         t.hehinitialaltonearabic = 0xfba8;
         t.hehinitialarabic = 0xfeeb;
         t.hehiragana = 0x3078;
         t.hehmedialaltonearabic = 0xfba9;
         t.hehmedialarabic = 0xfeec;
         t.heiseierasquare = 0x337b;
         t.hekatakana = 0x30d8;
         t.hekatakanahalfwidth = 0xff8d;
         t.hekutaarusquare = 0x3336;
         t.henghook = 0x0267;
         t.herutusquare = 0x3339;
         t.het = 0x05d7;
         t.hethebrew = 0x05d7;
         t.hhook = 0x0266;
         t.hhooksuperior = 0x02b1;
         t.hieuhacirclekorean = 0x327b;
         t.hieuhaparenkorean = 0x321b;
         t.hieuhcirclekorean = 0x326d;
         t.hieuhkorean = 0x314e;
         t.hieuhparenkorean = 0x320d;
         t.hihiragana = 0x3072;
         t.hikatakana = 0x30d2;
         t.hikatakanahalfwidth = 0xff8b;
         t.hiriq = 0x05b4;
         t.hiriq14 = 0x05b4;
         t.hiriq21 = 0x05b4;
         t.hiriq2d = 0x05b4;
         t.hiriqhebrew = 0x05b4;
         t.hiriqnarrowhebrew = 0x05b4;
         t.hiriqquarterhebrew = 0x05b4;
         t.hiriqwidehebrew = 0x05b4;
         t.hlinebelow = 0x1e96;
         t.hmonospace = 0xff48;
         t.hoarmenian = 0x0570;
         t.hohipthai = 0x0e2b;
         t.hohiragana = 0x307b;
         t.hokatakana = 0x30db;
         t.hokatakanahalfwidth = 0xff8e;
         t.holam = 0x05b9;
         t.holam19 = 0x05b9;
         t.holam26 = 0x05b9;
         t.holam32 = 0x05b9;
         t.holamhebrew = 0x05b9;
         t.holamnarrowhebrew = 0x05b9;
         t.holamquarterhebrew = 0x05b9;
         t.holamwidehebrew = 0x05b9;
         t.honokhukthai = 0x0e2e;
         t.hookabovecomb = 0x0309;
         t.hookcmb = 0x0309;
         t.hookpalatalizedbelowcmb = 0x0321;
         t.hookretroflexbelowcmb = 0x0322;
         t.hoonsquare = 0x3342;
         t.horicoptic = 0x03e9;
         t.horizontalbar = 0x2015;
         t.horncmb = 0x031b;
         t.hotsprings = 0x2668;
         t.house = 0x2302;
         t.hparen = 0x24a3;
         t.hsuperior = 0x02b0;
         t.hturned = 0x0265;
         t.huhiragana = 0x3075;
         t.huiitosquare = 0x3333;
         t.hukatakana = 0x30d5;
         t.hukatakanahalfwidth = 0xff8c;
         t.hungarumlaut = 0x02dd;
         t.hungarumlautcmb = 0x030b;
         t.hv = 0x0195;
         t.hyphen = 0x002d;
         t.hypheninferior = 0xf6e5;
         t.hyphenmonospace = 0xff0d;
         t.hyphensmall = 0xfe63;
         t.hyphensuperior = 0xf6e6;
         t.hyphentwo = 0x2010;
         t.i = 0x0069;
         t.iacute = 0x00ed;
         t.iacyrillic = 0x044f;
         t.ibengali = 0x0987;
         t.ibopomofo = 0x3127;
         t.ibreve = 0x012d;
         t.icaron = 0x01d0;
         t.icircle = 0x24d8;
         t.icircumflex = 0x00ee;
         t.icyrillic = 0x0456;
         t.idblgrave = 0x0209;
         t.ideographearthcircle = 0x328f;
         t.ideographfirecircle = 0x328b;
         t.ideographicallianceparen = 0x323f;
         t.ideographiccallparen = 0x323a;
         t.ideographiccentrecircle = 0x32a5;
         t.ideographicclose = 0x3006;
         t.ideographiccomma = 0x3001;
         t.ideographiccommaleft = 0xff64;
         t.ideographiccongratulationparen = 0x3237;
         t.ideographiccorrectcircle = 0x32a3;
         t.ideographicearthparen = 0x322f;
         t.ideographicenterpriseparen = 0x323d;
         t.ideographicexcellentcircle = 0x329d;
         t.ideographicfestivalparen = 0x3240;
         t.ideographicfinancialcircle = 0x3296;
         t.ideographicfinancialparen = 0x3236;
         t.ideographicfireparen = 0x322b;
         t.ideographichaveparen = 0x3232;
         t.ideographichighcircle = 0x32a4;
         t.ideographiciterationmark = 0x3005;
         t.ideographiclaborcircle = 0x3298;
         t.ideographiclaborparen = 0x3238;
         t.ideographicleftcircle = 0x32a7;
         t.ideographiclowcircle = 0x32a6;
         t.ideographicmedicinecircle = 0x32a9;
         t.ideographicmetalparen = 0x322e;
         t.ideographicmoonparen = 0x322a;
         t.ideographicnameparen = 0x3234;
         t.ideographicperiod = 0x3002;
         t.ideographicprintcircle = 0x329e;
         t.ideographicreachparen = 0x3243;
         t.ideographicrepresentparen = 0x3239;
         t.ideographicresourceparen = 0x323e;
         t.ideographicrightcircle = 0x32a8;
         t.ideographicsecretcircle = 0x3299;
         t.ideographicselfparen = 0x3242;
         t.ideographicsocietyparen = 0x3233;
         t.ideographicspace = 0x3000;
         t.ideographicspecialparen = 0x3235;
         t.ideographicstockparen = 0x3231;
         t.ideographicstudyparen = 0x323b;
         t.ideographicsunparen = 0x3230;
         t.ideographicsuperviseparen = 0x323c;
         t.ideographicwaterparen = 0x322c;
         t.ideographicwoodparen = 0x322d;
         t.ideographiczero = 0x3007;
         t.ideographmetalcircle = 0x328e;
         t.ideographmooncircle = 0x328a;
         t.ideographnamecircle = 0x3294;
         t.ideographsuncircle = 0x3290;
         t.ideographwatercircle = 0x328c;
         t.ideographwoodcircle = 0x328d;
         t.ideva = 0x0907;
         t.idieresis = 0x00ef;
         t.idieresisacute = 0x1e2f;
         t.idieresiscyrillic = 0x04e5;
         t.idotbelow = 0x1ecb;
         t.iebrevecyrillic = 0x04d7;
         t.iecyrillic = 0x0435;
         t.ieungacirclekorean = 0x3275;
         t.ieungaparenkorean = 0x3215;
         t.ieungcirclekorean = 0x3267;
         t.ieungkorean = 0x3147;
         t.ieungparenkorean = 0x3207;
         t.igrave = 0x00ec;
         t.igujarati = 0x0a87;
         t.igurmukhi = 0x0a07;
         t.ihiragana = 0x3044;
         t.ihookabove = 0x1ec9;
         t.iibengali = 0x0988;
         t.iicyrillic = 0x0438;
         t.iideva = 0x0908;
         t.iigujarati = 0x0a88;
         t.iigurmukhi = 0x0a08;
         t.iimatragurmukhi = 0x0a40;
         t.iinvertedbreve = 0x020b;
         t.iishortcyrillic = 0x0439;
         t.iivowelsignbengali = 0x09c0;
         t.iivowelsigndeva = 0x0940;
         t.iivowelsigngujarati = 0x0ac0;
         t.ij = 0x0133;
         t.ikatakana = 0x30a4;
         t.ikatakanahalfwidth = 0xff72;
         t.ikorean = 0x3163;
         t.ilde = 0x02dc;
         t.iluyhebrew = 0x05ac;
         t.imacron = 0x012b;
         t.imacroncyrillic = 0x04e3;
         t.imageorapproximatelyequal = 0x2253;
         t.imatragurmukhi = 0x0a3f;
         t.imonospace = 0xff49;
         t.increment = 0x2206;
         t.infinity = 0x221e;
         t.iniarmenian = 0x056b;
         t.integral = 0x222b;
         t.integralbottom = 0x2321;
         t.integralbt = 0x2321;
         t.integralex = 0xf8f5;
         t.integraltop = 0x2320;
         t.integraltp = 0x2320;
         t.intersection = 0x2229;
         t.intisquare = 0x3305;
         t.invbullet = 0x25d8;
         t.invcircle = 0x25d9;
         t.invsmileface = 0x263b;
         t.iocyrillic = 0x0451;
         t.iogonek = 0x012f;
         t.iota = 0x03b9;
         t.iotadieresis = 0x03ca;
         t.iotadieresistonos = 0x0390;
         t.iotalatin = 0x0269;
         t.iotatonos = 0x03af;
         t.iparen = 0x24a4;
         t.irigurmukhi = 0x0a72;
         t.ismallhiragana = 0x3043;
         t.ismallkatakana = 0x30a3;
         t.ismallkatakanahalfwidth = 0xff68;
         t.issharbengali = 0x09fa;
         t.istroke = 0x0268;
         t.isuperior = 0xf6ed;
         t.iterationhiragana = 0x309d;
         t.iterationkatakana = 0x30fd;
         t.itilde = 0x0129;
         t.itildebelow = 0x1e2d;
         t.iubopomofo = 0x3129;
         t.iucyrillic = 0x044e;
         t.ivowelsignbengali = 0x09bf;
         t.ivowelsigndeva = 0x093f;
         t.ivowelsigngujarati = 0x0abf;
         t.izhitsacyrillic = 0x0475;
         t.izhitsadblgravecyrillic = 0x0477;
         t.j = 0x006a;
         t.jaarmenian = 0x0571;
         t.jabengali = 0x099c;
         t.jadeva = 0x091c;
         t.jagujarati = 0x0a9c;
         t.jagurmukhi = 0x0a1c;
         t.jbopomofo = 0x3110;
         t.jcaron = 0x01f0;
         t.jcircle = 0x24d9;
         t.jcircumflex = 0x0135;
         t.jcrossedtail = 0x029d;
         t.jdotlessstroke = 0x025f;
         t.jecyrillic = 0x0458;
         t.jeemarabic = 0x062c;
         t.jeemfinalarabic = 0xfe9e;
         t.jeeminitialarabic = 0xfe9f;
         t.jeemmedialarabic = 0xfea0;
         t.jeharabic = 0x0698;
         t.jehfinalarabic = 0xfb8b;
         t.jhabengali = 0x099d;
         t.jhadeva = 0x091d;
         t.jhagujarati = 0x0a9d;
         t.jhagurmukhi = 0x0a1d;
         t.jheharmenian = 0x057b;
         t.jis = 0x3004;
         t.jmonospace = 0xff4a;
         t.jparen = 0x24a5;
         t.jsuperior = 0x02b2;
         t.k = 0x006b;
         t.kabashkircyrillic = 0x04a1;
         t.kabengali = 0x0995;
         t.kacute = 0x1e31;
         t.kacyrillic = 0x043a;
         t.kadescendercyrillic = 0x049b;
         t.kadeva = 0x0915;
         t.kaf = 0x05db;
         t.kafarabic = 0x0643;
         t.kafdagesh = 0xfb3b;
         t.kafdageshhebrew = 0xfb3b;
         t.kaffinalarabic = 0xfeda;
         t.kafhebrew = 0x05db;
         t.kafinitialarabic = 0xfedb;
         t.kafmedialarabic = 0xfedc;
         t.kafrafehebrew = 0xfb4d;
         t.kagujarati = 0x0a95;
         t.kagurmukhi = 0x0a15;
         t.kahiragana = 0x304b;
         t.kahookcyrillic = 0x04c4;
         t.kakatakana = 0x30ab;
         t.kakatakanahalfwidth = 0xff76;
         t.kappa = 0x03ba;
         t.kappasymbolgreek = 0x03f0;
         t.kapyeounmieumkorean = 0x3171;
         t.kapyeounphieuphkorean = 0x3184;
         t.kapyeounpieupkorean = 0x3178;
         t.kapyeounssangpieupkorean = 0x3179;
         t.karoriisquare = 0x330d;
         t.kashidaautoarabic = 0x0640;
         t.kashidaautonosidebearingarabic = 0x0640;
         t.kasmallkatakana = 0x30f5;
         t.kasquare = 0x3384;
         t.kasraarabic = 0x0650;
         t.kasratanarabic = 0x064d;
         t.kastrokecyrillic = 0x049f;
         t.katahiraprolongmarkhalfwidth = 0xff70;
         t.kaverticalstrokecyrillic = 0x049d;
         t.kbopomofo = 0x310e;
         t.kcalsquare = 0x3389;
         t.kcaron = 0x01e9;
         t.kcedilla = 0x0137;
         t.kcircle = 0x24da;
         t.kcommaaccent = 0x0137;
         t.kdotbelow = 0x1e33;
         t.keharmenian = 0x0584;
         t.kehiragana = 0x3051;
         t.kekatakana = 0x30b1;
         t.kekatakanahalfwidth = 0xff79;
         t.kenarmenian = 0x056f;
         t.kesmallkatakana = 0x30f6;
         t.kgreenlandic = 0x0138;
         t.khabengali = 0x0996;
         t.khacyrillic = 0x0445;
         t.khadeva = 0x0916;
         t.khagujarati = 0x0a96;
         t.khagurmukhi = 0x0a16;
         t.khaharabic = 0x062e;
         t.khahfinalarabic = 0xfea6;
         t.khahinitialarabic = 0xfea7;
         t.khahmedialarabic = 0xfea8;
         t.kheicoptic = 0x03e7;
         t.khhadeva = 0x0959;
         t.khhagurmukhi = 0x0a59;
         t.khieukhacirclekorean = 0x3278;
         t.khieukhaparenkorean = 0x3218;
         t.khieukhcirclekorean = 0x326a;
         t.khieukhkorean = 0x314b;
         t.khieukhparenkorean = 0x320a;
         t.khokhaithai = 0x0e02;
         t.khokhonthai = 0x0e05;
         t.khokhuatthai = 0x0e03;
         t.khokhwaithai = 0x0e04;
         t.khomutthai = 0x0e5b;
         t.khook = 0x0199;
         t.khorakhangthai = 0x0e06;
         t.khzsquare = 0x3391;
         t.kihiragana = 0x304d;
         t.kikatakana = 0x30ad;
         t.kikatakanahalfwidth = 0xff77;
         t.kiroguramusquare = 0x3315;
         t.kiromeetorusquare = 0x3316;
         t.kirosquare = 0x3314;
         t.kiyeokacirclekorean = 0x326e;
         t.kiyeokaparenkorean = 0x320e;
         t.kiyeokcirclekorean = 0x3260;
         t.kiyeokkorean = 0x3131;
         t.kiyeokparenkorean = 0x3200;
         t.kiyeoksioskorean = 0x3133;
         t.kjecyrillic = 0x045c;
         t.klinebelow = 0x1e35;
         t.klsquare = 0x3398;
         t.kmcubedsquare = 0x33a6;
         t.kmonospace = 0xff4b;
         t.kmsquaredsquare = 0x33a2;
         t.kohiragana = 0x3053;
         t.kohmsquare = 0x33c0;
         t.kokaithai = 0x0e01;
         t.kokatakana = 0x30b3;
         t.kokatakanahalfwidth = 0xff7a;
         t.kooposquare = 0x331e;
         t.koppacyrillic = 0x0481;
         t.koreanstandardsymbol = 0x327f;
         t.koroniscmb = 0x0343;
         t.kparen = 0x24a6;
         t.kpasquare = 0x33aa;
         t.ksicyrillic = 0x046f;
         t.ktsquare = 0x33cf;
         t.kturned = 0x029e;
         t.kuhiragana = 0x304f;
         t.kukatakana = 0x30af;
         t.kukatakanahalfwidth = 0xff78;
         t.kvsquare = 0x33b8;
         t.kwsquare = 0x33be;
         t.l = 0x006c;
         t.labengali = 0x09b2;
         t.lacute = 0x013a;
         t.ladeva = 0x0932;
         t.lagujarati = 0x0ab2;
         t.lagurmukhi = 0x0a32;
         t.lakkhangyaothai = 0x0e45;
         t.lamaleffinalarabic = 0xfefc;
         t.lamalefhamzaabovefinalarabic = 0xfef8;
         t.lamalefhamzaaboveisolatedarabic = 0xfef7;
         t.lamalefhamzabelowfinalarabic = 0xfefa;
         t.lamalefhamzabelowisolatedarabic = 0xfef9;
         t.lamalefisolatedarabic = 0xfefb;
         t.lamalefmaddaabovefinalarabic = 0xfef6;
         t.lamalefmaddaaboveisolatedarabic = 0xfef5;
         t.lamarabic = 0x0644;
         t.lambda = 0x03bb;
         t.lambdastroke = 0x019b;
         t.lamed = 0x05dc;
         t.lameddagesh = 0xfb3c;
         t.lameddageshhebrew = 0xfb3c;
         t.lamedhebrew = 0x05dc;
         t.lamfinalarabic = 0xfede;
         t.lamhahinitialarabic = 0xfcca;
         t.laminitialarabic = 0xfedf;
         t.lamjeeminitialarabic = 0xfcc9;
         t.lamkhahinitialarabic = 0xfccb;
         t.lamlamhehisolatedarabic = 0xfdf2;
         t.lammedialarabic = 0xfee0;
         t.lammeemhahinitialarabic = 0xfd88;
         t.lammeeminitialarabic = 0xfccc;
         t.largecircle = 0x25ef;
         t.lbar = 0x019a;
         t.lbelt = 0x026c;
         t.lbopomofo = 0x310c;
         t.lcaron = 0x013e;
         t.lcedilla = 0x013c;
         t.lcircle = 0x24db;
         t.lcircumflexbelow = 0x1e3d;
         t.lcommaaccent = 0x013c;
         t.ldot = 0x0140;
         t.ldotaccent = 0x0140;
         t.ldotbelow = 0x1e37;
         t.ldotbelowmacron = 0x1e39;
         t.leftangleabovecmb = 0x031a;
         t.lefttackbelowcmb = 0x0318;
         t.less = 0x003c;
         t.lessequal = 0x2264;
         t.lessequalorgreater = 0x22da;
         t.lessmonospace = 0xff1c;
         t.lessorequivalent = 0x2272;
         t.lessorgreater = 0x2276;
         t.lessoverequal = 0x2266;
         t.lesssmall = 0xfe64;
         t.lezh = 0x026e;
         t.lfblock = 0x258c;
         t.lhookretroflex = 0x026d;
         t.lira = 0x20a4;
         t.liwnarmenian = 0x056c;
         t.lj = 0x01c9;
         t.ljecyrillic = 0x0459;
         t.ll = 0xf6c0;
         t.lladeva = 0x0933;
         t.llagujarati = 0x0ab3;
         t.llinebelow = 0x1e3b;
         t.llladeva = 0x0934;
         t.llvocalicbengali = 0x09e1;
         t.llvocalicdeva = 0x0961;
         t.llvocalicvowelsignbengali = 0x09e3;
         t.llvocalicvowelsigndeva = 0x0963;
         t.lmiddletilde = 0x026b;
         t.lmonospace = 0xff4c;
         t.lmsquare = 0x33d0;
         t.lochulathai = 0x0e2c;
         t.logicaland = 0x2227;
         t.logicalnot = 0x00ac;
         t.logicalnotreversed = 0x2310;
         t.logicalor = 0x2228;
         t.lolingthai = 0x0e25;
         t.longs = 0x017f;
         t.lowlinecenterline = 0xfe4e;
         t.lowlinecmb = 0x0332;
         t.lowlinedashed = 0xfe4d;
         t.lozenge = 0x25ca;
         t.lparen = 0x24a7;
         t.lslash = 0x0142;
         t.lsquare = 0x2113;
         t.lsuperior = 0xf6ee;
         t.ltshade = 0x2591;
         t.luthai = 0x0e26;
         t.lvocalicbengali = 0x098c;
         t.lvocalicdeva = 0x090c;
         t.lvocalicvowelsignbengali = 0x09e2;
         t.lvocalicvowelsigndeva = 0x0962;
         t.lxsquare = 0x33d3;
         t.m = 0x006d;
         t.mabengali = 0x09ae;
         t.macron = 0x00af;
         t.macronbelowcmb = 0x0331;
         t.macroncmb = 0x0304;
         t.macronlowmod = 0x02cd;
         t.macronmonospace = 0xffe3;
         t.macute = 0x1e3f;
         t.madeva = 0x092e;
         t.magujarati = 0x0aae;
         t.magurmukhi = 0x0a2e;
         t.mahapakhhebrew = 0x05a4;
         t.mahapakhlefthebrew = 0x05a4;
         t.mahiragana = 0x307e;
         t.maichattawalowleftthai = 0xf895;
         t.maichattawalowrightthai = 0xf894;
         t.maichattawathai = 0x0e4b;
         t.maichattawaupperleftthai = 0xf893;
         t.maieklowleftthai = 0xf88c;
         t.maieklowrightthai = 0xf88b;
         t.maiekthai = 0x0e48;
         t.maiekupperleftthai = 0xf88a;
         t.maihanakatleftthai = 0xf884;
         t.maihanakatthai = 0x0e31;
         t.maitaikhuleftthai = 0xf889;
         t.maitaikhuthai = 0x0e47;
         t.maitholowleftthai = 0xf88f;
         t.maitholowrightthai = 0xf88e;
         t.maithothai = 0x0e49;
         t.maithoupperleftthai = 0xf88d;
         t.maitrilowleftthai = 0xf892;
         t.maitrilowrightthai = 0xf891;
         t.maitrithai = 0x0e4a;
         t.maitriupperleftthai = 0xf890;
         t.maiyamokthai = 0x0e46;
         t.makatakana = 0x30de;
         t.makatakanahalfwidth = 0xff8f;
         t.male = 0x2642;
         t.mansyonsquare = 0x3347;
         t.maqafhebrew = 0x05be;
         t.mars = 0x2642;
         t.masoracirclehebrew = 0x05af;
         t.masquare = 0x3383;
         t.mbopomofo = 0x3107;
         t.mbsquare = 0x33d4;
         t.mcircle = 0x24dc;
         t.mcubedsquare = 0x33a5;
         t.mdotaccent = 0x1e41;
         t.mdotbelow = 0x1e43;
         t.meemarabic = 0x0645;
         t.meemfinalarabic = 0xfee2;
         t.meeminitialarabic = 0xfee3;
         t.meemmedialarabic = 0xfee4;
         t.meemmeeminitialarabic = 0xfcd1;
         t.meemmeemisolatedarabic = 0xfc48;
         t.meetorusquare = 0x334d;
         t.mehiragana = 0x3081;
         t.meizierasquare = 0x337e;
         t.mekatakana = 0x30e1;
         t.mekatakanahalfwidth = 0xff92;
         t.mem = 0x05de;
         t.memdagesh = 0xfb3e;
         t.memdageshhebrew = 0xfb3e;
         t.memhebrew = 0x05de;
         t.menarmenian = 0x0574;
         t.merkhahebrew = 0x05a5;
         t.merkhakefulahebrew = 0x05a6;
         t.merkhakefulalefthebrew = 0x05a6;
         t.merkhalefthebrew = 0x05a5;
         t.mhook = 0x0271;
         t.mhzsquare = 0x3392;
         t.middledotkatakanahalfwidth = 0xff65;
         t.middot = 0x00b7;
         t.mieumacirclekorean = 0x3272;
         t.mieumaparenkorean = 0x3212;
         t.mieumcirclekorean = 0x3264;
         t.mieumkorean = 0x3141;
         t.mieumpansioskorean = 0x3170;
         t.mieumparenkorean = 0x3204;
         t.mieumpieupkorean = 0x316e;
         t.mieumsioskorean = 0x316f;
         t.mihiragana = 0x307f;
         t.mikatakana = 0x30df;
         t.mikatakanahalfwidth = 0xff90;
         t.minus = 0x2212;
         t.minusbelowcmb = 0x0320;
         t.minuscircle = 0x2296;
         t.minusmod = 0x02d7;
         t.minusplus = 0x2213;
         t.minute = 0x2032;
         t.miribaarusquare = 0x334a;
         t.mirisquare = 0x3349;
         t.mlonglegturned = 0x0270;
         t.mlsquare = 0x3396;
         t.mmcubedsquare = 0x33a3;
         t.mmonospace = 0xff4d;
         t.mmsquaredsquare = 0x339f;
         t.mohiragana = 0x3082;
         t.mohmsquare = 0x33c1;
         t.mokatakana = 0x30e2;
         t.mokatakanahalfwidth = 0xff93;
         t.molsquare = 0x33d6;
         t.momathai = 0x0e21;
         t.moverssquare = 0x33a7;
         t.moverssquaredsquare = 0x33a8;
         t.mparen = 0x24a8;
         t.mpasquare = 0x33ab;
         t.mssquare = 0x33b3;
         t.msuperior = 0xf6ef;
         t.mturned = 0x026f;
         t.mu = 0x00b5;
         t.mu1 = 0x00b5;
         t.muasquare = 0x3382;
         t.muchgreater = 0x226b;
         t.muchless = 0x226a;
         t.mufsquare = 0x338c;
         t.mugreek = 0x03bc;
         t.mugsquare = 0x338d;
         t.muhiragana = 0x3080;
         t.mukatakana = 0x30e0;
         t.mukatakanahalfwidth = 0xff91;
         t.mulsquare = 0x3395;
         t.multiply = 0x00d7;
         t.mumsquare = 0x339b;
         t.munahhebrew = 0x05a3;
         t.munahlefthebrew = 0x05a3;
         t.musicalnote = 0x266a;
         t.musicalnotedbl = 0x266b;
         t.musicflatsign = 0x266d;
         t.musicsharpsign = 0x266f;
         t.mussquare = 0x33b2;
         t.muvsquare = 0x33b6;
         t.muwsquare = 0x33bc;
         t.mvmegasquare = 0x33b9;
         t.mvsquare = 0x33b7;
         t.mwmegasquare = 0x33bf;
         t.mwsquare = 0x33bd;
         t.n = 0x006e;
         t.nabengali = 0x09a8;
         t.nabla = 0x2207;
         t.nacute = 0x0144;
         t.nadeva = 0x0928;
         t.nagujarati = 0x0aa8;
         t.nagurmukhi = 0x0a28;
         t.nahiragana = 0x306a;
         t.nakatakana = 0x30ca;
         t.nakatakanahalfwidth = 0xff85;
         t.napostrophe = 0x0149;
         t.nasquare = 0x3381;
         t.nbopomofo = 0x310b;
         t.nbspace = 0x00a0;
         t.ncaron = 0x0148;
         t.ncedilla = 0x0146;
         t.ncircle = 0x24dd;
         t.ncircumflexbelow = 0x1e4b;
         t.ncommaaccent = 0x0146;
         t.ndotaccent = 0x1e45;
         t.ndotbelow = 0x1e47;
         t.nehiragana = 0x306d;
         t.nekatakana = 0x30cd;
         t.nekatakanahalfwidth = 0xff88;
         t.newsheqelsign = 0x20aa;
         t.nfsquare = 0x338b;
         t.ngabengali = 0x0999;
         t.ngadeva = 0x0919;
         t.ngagujarati = 0x0a99;
         t.ngagurmukhi = 0x0a19;
         t.ngonguthai = 0x0e07;
         t.nhiragana = 0x3093;
         t.nhookleft = 0x0272;
         t.nhookretroflex = 0x0273;
         t.nieunacirclekorean = 0x326f;
         t.nieunaparenkorean = 0x320f;
         t.nieuncieuckorean = 0x3135;
         t.nieuncirclekorean = 0x3261;
         t.nieunhieuhkorean = 0x3136;
         t.nieunkorean = 0x3134;
         t.nieunpansioskorean = 0x3168;
         t.nieunparenkorean = 0x3201;
         t.nieunsioskorean = 0x3167;
         t.nieuntikeutkorean = 0x3166;
         t.nihiragana = 0x306b;
         t.nikatakana = 0x30cb;
         t.nikatakanahalfwidth = 0xff86;
         t.nikhahitleftthai = 0xf899;
         t.nikhahitthai = 0x0e4d;
         t.nine = 0x0039;
         t.ninearabic = 0x0669;
         t.ninebengali = 0x09ef;
         t.ninecircle = 0x2468;
         t.ninecircleinversesansserif = 0x2792;
         t.ninedeva = 0x096f;
         t.ninegujarati = 0x0aef;
         t.ninegurmukhi = 0x0a6f;
         t.ninehackarabic = 0x0669;
         t.ninehangzhou = 0x3029;
         t.nineideographicparen = 0x3228;
         t.nineinferior = 0x2089;
         t.ninemonospace = 0xff19;
         t.nineoldstyle = 0xf739;
         t.nineparen = 0x247c;
         t.nineperiod = 0x2490;
         t.ninepersian = 0x06f9;
         t.nineroman = 0x2178;
         t.ninesuperior = 0x2079;
         t.nineteencircle = 0x2472;
         t.nineteenparen = 0x2486;
         t.nineteenperiod = 0x249a;
         t.ninethai = 0x0e59;
         t.nj = 0x01cc;
         t.njecyrillic = 0x045a;
         t.nkatakana = 0x30f3;
         t.nkatakanahalfwidth = 0xff9d;
         t.nlegrightlong = 0x019e;
         t.nlinebelow = 0x1e49;
         t.nmonospace = 0xff4e;
         t.nmsquare = 0x339a;
         t.nnabengali = 0x09a3;
         t.nnadeva = 0x0923;
         t.nnagujarati = 0x0aa3;
         t.nnagurmukhi = 0x0a23;
         t.nnnadeva = 0x0929;
         t.nohiragana = 0x306e;
         t.nokatakana = 0x30ce;
         t.nokatakanahalfwidth = 0xff89;
         t.nonbreakingspace = 0x00a0;
         t.nonenthai = 0x0e13;
         t.nonuthai = 0x0e19;
         t.noonarabic = 0x0646;
         t.noonfinalarabic = 0xfee6;
         t.noonghunnaarabic = 0x06ba;
         t.noonghunnafinalarabic = 0xfb9f;
         t.nooninitialarabic = 0xfee7;
         t.noonjeeminitialarabic = 0xfcd2;
         t.noonjeemisolatedarabic = 0xfc4b;
         t.noonmedialarabic = 0xfee8;
         t.noonmeeminitialarabic = 0xfcd5;
         t.noonmeemisolatedarabic = 0xfc4e;
         t.noonnoonfinalarabic = 0xfc8d;
         t.notcontains = 0x220c;
         t.notelement = 0x2209;
         t.notelementof = 0x2209;
         t.notequal = 0x2260;
         t.notgreater = 0x226f;
         t.notgreaternorequal = 0x2271;
         t.notgreaternorless = 0x2279;
         t.notidentical = 0x2262;
         t.notless = 0x226e;
         t.notlessnorequal = 0x2270;
         t.notparallel = 0x2226;
         t.notprecedes = 0x2280;
         t.notsubset = 0x2284;
         t.notsucceeds = 0x2281;
         t.notsuperset = 0x2285;
         t.nowarmenian = 0x0576;
         t.nparen = 0x24a9;
         t.nssquare = 0x33b1;
         t.nsuperior = 0x207f;
         t.ntilde = 0x00f1;
         t.nu = 0x03bd;
         t.nuhiragana = 0x306c;
         t.nukatakana = 0x30cc;
         t.nukatakanahalfwidth = 0xff87;
         t.nuktabengali = 0x09bc;
         t.nuktadeva = 0x093c;
         t.nuktagujarati = 0x0abc;
         t.nuktagurmukhi = 0x0a3c;
         t.numbersign = 0x0023;
         t.numbersignmonospace = 0xff03;
         t.numbersignsmall = 0xfe5f;
         t.numeralsigngreek = 0x0374;
         t.numeralsignlowergreek = 0x0375;
         t.numero = 0x2116;
         t.nun = 0x05e0;
         t.nundagesh = 0xfb40;
         t.nundageshhebrew = 0xfb40;
         t.nunhebrew = 0x05e0;
         t.nvsquare = 0x33b5;
         t.nwsquare = 0x33bb;
         t.nyabengali = 0x099e;
         t.nyadeva = 0x091e;
         t.nyagujarati = 0x0a9e;
         t.nyagurmukhi = 0x0a1e;
         t.o = 0x006f;
         t.oacute = 0x00f3;
         t.oangthai = 0x0e2d;
         t.obarred = 0x0275;
         t.obarredcyrillic = 0x04e9;
         t.obarreddieresiscyrillic = 0x04eb;
         t.obengali = 0x0993;
         t.obopomofo = 0x311b;
         t.obreve = 0x014f;
         t.ocandradeva = 0x0911;
         t.ocandragujarati = 0x0a91;
         t.ocandravowelsigndeva = 0x0949;
         t.ocandravowelsigngujarati = 0x0ac9;
         t.ocaron = 0x01d2;
         t.ocircle = 0x24de;
         t.ocircumflex = 0x00f4;
         t.ocircumflexacute = 0x1ed1;
         t.ocircumflexdotbelow = 0x1ed9;
         t.ocircumflexgrave = 0x1ed3;
         t.ocircumflexhookabove = 0x1ed5;
         t.ocircumflextilde = 0x1ed7;
         t.ocyrillic = 0x043e;
         t.odblacute = 0x0151;
         t.odblgrave = 0x020d;
         t.odeva = 0x0913;
         t.odieresis = 0x00f6;
         t.odieresiscyrillic = 0x04e7;
         t.odotbelow = 0x1ecd;
         t.oe = 0x0153;
         t.oekorean = 0x315a;
         t.ogonek = 0x02db;
         t.ogonekcmb = 0x0328;
         t.ograve = 0x00f2;
         t.ogujarati = 0x0a93;
         t.oharmenian = 0x0585;
         t.ohiragana = 0x304a;
         t.ohookabove = 0x1ecf;
         t.ohorn = 0x01a1;
         t.ohornacute = 0x1edb;
         t.ohorndotbelow = 0x1ee3;
         t.ohorngrave = 0x1edd;
         t.ohornhookabove = 0x1edf;
         t.ohorntilde = 0x1ee1;
         t.ohungarumlaut = 0x0151;
         t.oi = 0x01a3;
         t.oinvertedbreve = 0x020f;
         t.okatakana = 0x30aa;
         t.okatakanahalfwidth = 0xff75;
         t.okorean = 0x3157;
         t.olehebrew = 0x05ab;
         t.omacron = 0x014d;
         t.omacronacute = 0x1e53;
         t.omacrongrave = 0x1e51;
         t.omdeva = 0x0950;
         t.omega = 0x03c9;
         t.omega1 = 0x03d6;
         t.omegacyrillic = 0x0461;
         t.omegalatinclosed = 0x0277;
         t.omegaroundcyrillic = 0x047b;
         t.omegatitlocyrillic = 0x047d;
         t.omegatonos = 0x03ce;
         t.omgujarati = 0x0ad0;
         t.omicron = 0x03bf;
         t.omicrontonos = 0x03cc;
         t.omonospace = 0xff4f;
         t.one = 0x0031;
         t.onearabic = 0x0661;
         t.onebengali = 0x09e7;
         t.onecircle = 0x2460;
         t.onecircleinversesansserif = 0x278a;
         t.onedeva = 0x0967;
         t.onedotenleader = 0x2024;
         t.oneeighth = 0x215b;
         t.onefitted = 0xf6dc;
         t.onegujarati = 0x0ae7;
         t.onegurmukhi = 0x0a67;
         t.onehackarabic = 0x0661;
         t.onehalf = 0x00bd;
         t.onehangzhou = 0x3021;
         t.oneideographicparen = 0x3220;
         t.oneinferior = 0x2081;
         t.onemonospace = 0xff11;
         t.onenumeratorbengali = 0x09f4;
         t.oneoldstyle = 0xf731;
         t.oneparen = 0x2474;
         t.oneperiod = 0x2488;
         t.onepersian = 0x06f1;
         t.onequarter = 0x00bc;
         t.oneroman = 0x2170;
         t.onesuperior = 0x00b9;
         t.onethai = 0x0e51;
         t.onethird = 0x2153;
         t.oogonek = 0x01eb;
         t.oogonekmacron = 0x01ed;
         t.oogurmukhi = 0x0a13;
         t.oomatragurmukhi = 0x0a4b;
         t.oopen = 0x0254;
         t.oparen = 0x24aa;
         t.openbullet = 0x25e6;
         t.option = 0x2325;
         t.ordfeminine = 0x00aa;
         t.ordmasculine = 0x00ba;
         t.orthogonal = 0x221f;
         t.oshortdeva = 0x0912;
         t.oshortvowelsigndeva = 0x094a;
         t.oslash = 0x00f8;
         t.oslashacute = 0x01ff;
         t.osmallhiragana = 0x3049;
         t.osmallkatakana = 0x30a9;
         t.osmallkatakanahalfwidth = 0xff6b;
         t.ostrokeacute = 0x01ff;
         t.osuperior = 0xf6f0;
         t.otcyrillic = 0x047f;
         t.otilde = 0x00f5;
         t.otildeacute = 0x1e4d;
         t.otildedieresis = 0x1e4f;
         t.oubopomofo = 0x3121;
         t.overline = 0x203e;
         t.overlinecenterline = 0xfe4a;
         t.overlinecmb = 0x0305;
         t.overlinedashed = 0xfe49;
         t.overlinedblwavy = 0xfe4c;
         t.overlinewavy = 0xfe4b;
         t.overscore = 0x00af;
         t.ovowelsignbengali = 0x09cb;
         t.ovowelsigndeva = 0x094b;
         t.ovowelsigngujarati = 0x0acb;
         t.p = 0x0070;
         t.paampssquare = 0x3380;
         t.paasentosquare = 0x332b;
         t.pabengali = 0x09aa;
         t.pacute = 0x1e55;
         t.padeva = 0x092a;
         t.pagedown = 0x21df;
         t.pageup = 0x21de;
         t.pagujarati = 0x0aaa;
         t.pagurmukhi = 0x0a2a;
         t.pahiragana = 0x3071;
         t.paiyannoithai = 0x0e2f;
         t.pakatakana = 0x30d1;
         t.palatalizationcyrilliccmb = 0x0484;
         t.palochkacyrillic = 0x04c0;
         t.pansioskorean = 0x317f;
         t.paragraph = 0x00b6;
         t.parallel = 0x2225;
         t.parenleft = 0x0028;
         t.parenleftaltonearabic = 0xfd3e;
         t.parenleftbt = 0xf8ed;
         t.parenleftex = 0xf8ec;
         t.parenleftinferior = 0x208d;
         t.parenleftmonospace = 0xff08;
         t.parenleftsmall = 0xfe59;
         t.parenleftsuperior = 0x207d;
         t.parenlefttp = 0xf8eb;
         t.parenleftvertical = 0xfe35;
         t.parenright = 0x0029;
         t.parenrightaltonearabic = 0xfd3f;
         t.parenrightbt = 0xf8f8;
         t.parenrightex = 0xf8f7;
         t.parenrightinferior = 0x208e;
         t.parenrightmonospace = 0xff09;
         t.parenrightsmall = 0xfe5a;
         t.parenrightsuperior = 0x207e;
         t.parenrighttp = 0xf8f6;
         t.parenrightvertical = 0xfe36;
         t.partialdiff = 0x2202;
         t.paseqhebrew = 0x05c0;
         t.pashtahebrew = 0x0599;
         t.pasquare = 0x33a9;
         t.patah = 0x05b7;
         t.patah11 = 0x05b7;
         t.patah1d = 0x05b7;
         t.patah2a = 0x05b7;
         t.patahhebrew = 0x05b7;
         t.patahnarrowhebrew = 0x05b7;
         t.patahquarterhebrew = 0x05b7;
         t.patahwidehebrew = 0x05b7;
         t.pazerhebrew = 0x05a1;
         t.pbopomofo = 0x3106;
         t.pcircle = 0x24df;
         t.pdotaccent = 0x1e57;
         t.pe = 0x05e4;
         t.pecyrillic = 0x043f;
         t.pedagesh = 0xfb44;
         t.pedageshhebrew = 0xfb44;
         t.peezisquare = 0x333b;
         t.pefinaldageshhebrew = 0xfb43;
         t.peharabic = 0x067e;
         t.peharmenian = 0x057a;
         t.pehebrew = 0x05e4;
         t.pehfinalarabic = 0xfb57;
         t.pehinitialarabic = 0xfb58;
         t.pehiragana = 0x307a;
         t.pehmedialarabic = 0xfb59;
         t.pekatakana = 0x30da;
         t.pemiddlehookcyrillic = 0x04a7;
         t.perafehebrew = 0xfb4e;
         t.percent = 0x0025;
         t.percentarabic = 0x066a;
         t.percentmonospace = 0xff05;
         t.percentsmall = 0xfe6a;
         t.period = 0x002e;
         t.periodarmenian = 0x0589;
         t.periodcentered = 0x00b7;
         t.periodhalfwidth = 0xff61;
         t.periodinferior = 0xf6e7;
         t.periodmonospace = 0xff0e;
         t.periodsmall = 0xfe52;
         t.periodsuperior = 0xf6e8;
         t.perispomenigreekcmb = 0x0342;
         t.perpendicular = 0x22a5;
         t.perthousand = 0x2030;
         t.peseta = 0x20a7;
         t.pfsquare = 0x338a;
         t.phabengali = 0x09ab;
         t.phadeva = 0x092b;
         t.phagujarati = 0x0aab;
         t.phagurmukhi = 0x0a2b;
         t.phi = 0x03c6;
         t.phi1 = 0x03d5;
         t.phieuphacirclekorean = 0x327a;
         t.phieuphaparenkorean = 0x321a;
         t.phieuphcirclekorean = 0x326c;
         t.phieuphkorean = 0x314d;
         t.phieuphparenkorean = 0x320c;
         t.philatin = 0x0278;
         t.phinthuthai = 0x0e3a;
         t.phisymbolgreek = 0x03d5;
         t.phook = 0x01a5;
         t.phophanthai = 0x0e1e;
         t.phophungthai = 0x0e1c;
         t.phosamphaothai = 0x0e20;
         t.pi = 0x03c0;
         t.pieupacirclekorean = 0x3273;
         t.pieupaparenkorean = 0x3213;
         t.pieupcieuckorean = 0x3176;
         t.pieupcirclekorean = 0x3265;
         t.pieupkiyeokkorean = 0x3172;
         t.pieupkorean = 0x3142;
         t.pieupparenkorean = 0x3205;
         t.pieupsioskiyeokkorean = 0x3174;
         t.pieupsioskorean = 0x3144;
         t.pieupsiostikeutkorean = 0x3175;
         t.pieupthieuthkorean = 0x3177;
         t.pieuptikeutkorean = 0x3173;
         t.pihiragana = 0x3074;
         t.pikatakana = 0x30d4;
         t.pisymbolgreek = 0x03d6;
         t.piwrarmenian = 0x0583;
         t.planckover2pi = 0x210f;
         t.planckover2pi1 = 0x210f;
         t.plus = 0x002b;
         t.plusbelowcmb = 0x031f;
         t.pluscircle = 0x2295;
         t.plusminus = 0x00b1;
         t.plusmod = 0x02d6;
         t.plusmonospace = 0xff0b;
         t.plussmall = 0xfe62;
         t.plussuperior = 0x207a;
         t.pmonospace = 0xff50;
         t.pmsquare = 0x33d8;
         t.pohiragana = 0x307d;
         t.pointingindexdownwhite = 0x261f;
         t.pointingindexleftwhite = 0x261c;
         t.pointingindexrightwhite = 0x261e;
         t.pointingindexupwhite = 0x261d;
         t.pokatakana = 0x30dd;
         t.poplathai = 0x0e1b;
         t.postalmark = 0x3012;
         t.postalmarkface = 0x3020;
         t.pparen = 0x24ab;
         t.precedes = 0x227a;
         t.prescription = 0x211e;
         t.primemod = 0x02b9;
         t.primereversed = 0x2035;
         t.product = 0x220f;
         t.projective = 0x2305;
         t.prolongedkana = 0x30fc;
         t.propellor = 0x2318;
         t.propersubset = 0x2282;
         t.propersuperset = 0x2283;
         t.proportion = 0x2237;
         t.proportional = 0x221d;
         t.psi = 0x03c8;
         t.psicyrillic = 0x0471;
         t.psilipneumatacyrilliccmb = 0x0486;
         t.pssquare = 0x33b0;
         t.puhiragana = 0x3077;
         t.pukatakana = 0x30d7;
         t.pvsquare = 0x33b4;
         t.pwsquare = 0x33ba;
         t.q = 0x0071;
         t.qadeva = 0x0958;
         t.qadmahebrew = 0x05a8;
         t.qafarabic = 0x0642;
         t.qaffinalarabic = 0xfed6;
         t.qafinitialarabic = 0xfed7;
         t.qafmedialarabic = 0xfed8;
         t.qamats = 0x05b8;
         t.qamats10 = 0x05b8;
         t.qamats1a = 0x05b8;
         t.qamats1c = 0x05b8;
         t.qamats27 = 0x05b8;
         t.qamats29 = 0x05b8;
         t.qamats33 = 0x05b8;
         t.qamatsde = 0x05b8;
         t.qamatshebrew = 0x05b8;
         t.qamatsnarrowhebrew = 0x05b8;
         t.qamatsqatanhebrew = 0x05b8;
         t.qamatsqatannarrowhebrew = 0x05b8;
         t.qamatsqatanquarterhebrew = 0x05b8;
         t.qamatsqatanwidehebrew = 0x05b8;
         t.qamatsquarterhebrew = 0x05b8;
         t.qamatswidehebrew = 0x05b8;
         t.qarneyparahebrew = 0x059f;
         t.qbopomofo = 0x3111;
         t.qcircle = 0x24e0;
         t.qhook = 0x02a0;
         t.qmonospace = 0xff51;
         t.qof = 0x05e7;
         t.qofdagesh = 0xfb47;
         t.qofdageshhebrew = 0xfb47;
         t.qofhebrew = 0x05e7;
         t.qparen = 0x24ac;
         t.quarternote = 0x2669;
         t.qubuts = 0x05bb;
         t.qubuts18 = 0x05bb;
         t.qubuts25 = 0x05bb;
         t.qubuts31 = 0x05bb;
         t.qubutshebrew = 0x05bb;
         t.qubutsnarrowhebrew = 0x05bb;
         t.qubutsquarterhebrew = 0x05bb;
         t.qubutswidehebrew = 0x05bb;
         t.question = 0x003f;
         t.questionarabic = 0x061f;
         t.questionarmenian = 0x055e;
         t.questiondown = 0x00bf;
         t.questiondownsmall = 0xf7bf;
         t.questiongreek = 0x037e;
         t.questionmonospace = 0xff1f;
         t.questionsmall = 0xf73f;
         t.quotedbl = 0x0022;
         t.quotedblbase = 0x201e;
         t.quotedblleft = 0x201c;
         t.quotedblmonospace = 0xff02;
         t.quotedblprime = 0x301e;
         t.quotedblprimereversed = 0x301d;
         t.quotedblright = 0x201d;
         t.quoteleft = 0x2018;
         t.quoteleftreversed = 0x201b;
         t.quotereversed = 0x201b;
         t.quoteright = 0x2019;
         t.quoterightn = 0x0149;
         t.quotesinglbase = 0x201a;
         t.quotesingle = 0x0027;
         t.quotesinglemonospace = 0xff07;
         t.r = 0x0072;
         t.raarmenian = 0x057c;
         t.rabengali = 0x09b0;
         t.racute = 0x0155;
         t.radeva = 0x0930;
         t.radical = 0x221a;
         t.radicalex = 0xf8e5;
         t.radoverssquare = 0x33ae;
         t.radoverssquaredsquare = 0x33af;
         t.radsquare = 0x33ad;
         t.rafe = 0x05bf;
         t.rafehebrew = 0x05bf;
         t.ragujarati = 0x0ab0;
         t.ragurmukhi = 0x0a30;
         t.rahiragana = 0x3089;
         t.rakatakana = 0x30e9;
         t.rakatakanahalfwidth = 0xff97;
         t.ralowerdiagonalbengali = 0x09f1;
         t.ramiddlediagonalbengali = 0x09f0;
         t.ramshorn = 0x0264;
         t.ratio = 0x2236;
         t.rbopomofo = 0x3116;
         t.rcaron = 0x0159;
         t.rcedilla = 0x0157;
         t.rcircle = 0x24e1;
         t.rcommaaccent = 0x0157;
         t.rdblgrave = 0x0211;
         t.rdotaccent = 0x1e59;
         t.rdotbelow = 0x1e5b;
         t.rdotbelowmacron = 0x1e5d;
         t.referencemark = 0x203b;
         t.reflexsubset = 0x2286;
         t.reflexsuperset = 0x2287;
         t.registered = 0x00ae;
         t.registersans = 0xf8e8;
         t.registerserif = 0xf6da;
         t.reharabic = 0x0631;
         t.reharmenian = 0x0580;
         t.rehfinalarabic = 0xfeae;
         t.rehiragana = 0x308c;
         t.rekatakana = 0x30ec;
         t.rekatakanahalfwidth = 0xff9a;
         t.resh = 0x05e8;
         t.reshdageshhebrew = 0xfb48;
         t.reshhebrew = 0x05e8;
         t.reversedtilde = 0x223d;
         t.reviahebrew = 0x0597;
         t.reviamugrashhebrew = 0x0597;
         t.revlogicalnot = 0x2310;
         t.rfishhook = 0x027e;
         t.rfishhookreversed = 0x027f;
         t.rhabengali = 0x09dd;
         t.rhadeva = 0x095d;
         t.rho = 0x03c1;
         t.rhook = 0x027d;
         t.rhookturned = 0x027b;
         t.rhookturnedsuperior = 0x02b5;
         t.rhosymbolgreek = 0x03f1;
         t.rhotichookmod = 0x02de;
         t.rieulacirclekorean = 0x3271;
         t.rieulaparenkorean = 0x3211;
         t.rieulcirclekorean = 0x3263;
         t.rieulhieuhkorean = 0x3140;
         t.rieulkiyeokkorean = 0x313a;
         t.rieulkiyeoksioskorean = 0x3169;
         t.rieulkorean = 0x3139;
         t.rieulmieumkorean = 0x313b;
         t.rieulpansioskorean = 0x316c;
         t.rieulparenkorean = 0x3203;
         t.rieulphieuphkorean = 0x313f;
         t.rieulpieupkorean = 0x313c;
         t.rieulpieupsioskorean = 0x316b;
         t.rieulsioskorean = 0x313d;
         t.rieulthieuthkorean = 0x313e;
         t.rieultikeutkorean = 0x316a;
         t.rieulyeorinhieuhkorean = 0x316d;
         t.rightangle = 0x221f;
         t.righttackbelowcmb = 0x0319;
         t.righttriangle = 0x22bf;
         t.rihiragana = 0x308a;
         t.rikatakana = 0x30ea;
         t.rikatakanahalfwidth = 0xff98;
         t.ring = 0x02da;
         t.ringbelowcmb = 0x0325;
         t.ringcmb = 0x030a;
         t.ringhalfleft = 0x02bf;
         t.ringhalfleftarmenian = 0x0559;
         t.ringhalfleftbelowcmb = 0x031c;
         t.ringhalfleftcentered = 0x02d3;
         t.ringhalfright = 0x02be;
         t.ringhalfrightbelowcmb = 0x0339;
         t.ringhalfrightcentered = 0x02d2;
         t.rinvertedbreve = 0x0213;
         t.rittorusquare = 0x3351;
         t.rlinebelow = 0x1e5f;
         t.rlongleg = 0x027c;
         t.rlonglegturned = 0x027a;
         t.rmonospace = 0xff52;
         t.rohiragana = 0x308d;
         t.rokatakana = 0x30ed;
         t.rokatakanahalfwidth = 0xff9b;
         t.roruathai = 0x0e23;
         t.rparen = 0x24ad;
         t.rrabengali = 0x09dc;
         t.rradeva = 0x0931;
         t.rragurmukhi = 0x0a5c;
         t.rreharabic = 0x0691;
         t.rrehfinalarabic = 0xfb8d;
         t.rrvocalicbengali = 0x09e0;
         t.rrvocalicdeva = 0x0960;
         t.rrvocalicgujarati = 0x0ae0;
         t.rrvocalicvowelsignbengali = 0x09c4;
         t.rrvocalicvowelsigndeva = 0x0944;
         t.rrvocalicvowelsigngujarati = 0x0ac4;
         t.rsuperior = 0xf6f1;
         t.rtblock = 0x2590;
         t.rturned = 0x0279;
         t.rturnedsuperior = 0x02b4;
         t.ruhiragana = 0x308b;
         t.rukatakana = 0x30eb;
         t.rukatakanahalfwidth = 0xff99;
         t.rupeemarkbengali = 0x09f2;
         t.rupeesignbengali = 0x09f3;
         t.rupiah = 0xf6dd;
         t.ruthai = 0x0e24;
         t.rvocalicbengali = 0x098b;
         t.rvocalicdeva = 0x090b;
         t.rvocalicgujarati = 0x0a8b;
         t.rvocalicvowelsignbengali = 0x09c3;
         t.rvocalicvowelsigndeva = 0x0943;
         t.rvocalicvowelsigngujarati = 0x0ac3;
         t.s = 0x0073;
         t.sabengali = 0x09b8;
         t.sacute = 0x015b;
         t.sacutedotaccent = 0x1e65;
         t.sadarabic = 0x0635;
         t.sadeva = 0x0938;
         t.sadfinalarabic = 0xfeba;
         t.sadinitialarabic = 0xfebb;
         t.sadmedialarabic = 0xfebc;
         t.sagujarati = 0x0ab8;
         t.sagurmukhi = 0x0a38;
         t.sahiragana = 0x3055;
         t.sakatakana = 0x30b5;
         t.sakatakanahalfwidth = 0xff7b;
         t.sallallahoualayhewasallamarabic = 0xfdfa;
         t.samekh = 0x05e1;
         t.samekhdagesh = 0xfb41;
         t.samekhdageshhebrew = 0xfb41;
         t.samekhhebrew = 0x05e1;
         t.saraaathai = 0x0e32;
         t.saraaethai = 0x0e41;
         t.saraaimaimalaithai = 0x0e44;
         t.saraaimaimuanthai = 0x0e43;
         t.saraamthai = 0x0e33;
         t.saraathai = 0x0e30;
         t.saraethai = 0x0e40;
         t.saraiileftthai = 0xf886;
         t.saraiithai = 0x0e35;
         t.saraileftthai = 0xf885;
         t.saraithai = 0x0e34;
         t.saraothai = 0x0e42;
         t.saraueeleftthai = 0xf888;
         t.saraueethai = 0x0e37;
         t.saraueleftthai = 0xf887;
         t.sarauethai = 0x0e36;
         t.sarauthai = 0x0e38;
         t.sarauuthai = 0x0e39;
         t.sbopomofo = 0x3119;
         t.scaron = 0x0161;
         t.scarondotaccent = 0x1e67;
         t.scedilla = 0x015f;
         t.schwa = 0x0259;
         t.schwacyrillic = 0x04d9;
         t.schwadieresiscyrillic = 0x04db;
         t.schwahook = 0x025a;
         t.scircle = 0x24e2;
         t.scircumflex = 0x015d;
         t.scommaaccent = 0x0219;
         t.sdotaccent = 0x1e61;
         t.sdotbelow = 0x1e63;
         t.sdotbelowdotaccent = 0x1e69;
         t.seagullbelowcmb = 0x033c;
         t.second = 0x2033;
         t.secondtonechinese = 0x02ca;
         t.section = 0x00a7;
         t.seenarabic = 0x0633;
         t.seenfinalarabic = 0xfeb2;
         t.seeninitialarabic = 0xfeb3;
         t.seenmedialarabic = 0xfeb4;
         t.segol = 0x05b6;
         t.segol13 = 0x05b6;
         t.segol1f = 0x05b6;
         t.segol2c = 0x05b6;
         t.segolhebrew = 0x05b6;
         t.segolnarrowhebrew = 0x05b6;
         t.segolquarterhebrew = 0x05b6;
         t.segoltahebrew = 0x0592;
         t.segolwidehebrew = 0x05b6;
         t.seharmenian = 0x057d;
         t.sehiragana = 0x305b;
         t.sekatakana = 0x30bb;
         t.sekatakanahalfwidth = 0xff7e;
         t.semicolon = 0x003b;
         t.semicolonarabic = 0x061b;
         t.semicolonmonospace = 0xff1b;
         t.semicolonsmall = 0xfe54;
         t.semivoicedmarkkana = 0x309c;
         t.semivoicedmarkkanahalfwidth = 0xff9f;
         t.sentisquare = 0x3322;
         t.sentosquare = 0x3323;
         t.seven = 0x0037;
         t.sevenarabic = 0x0667;
         t.sevenbengali = 0x09ed;
         t.sevencircle = 0x2466;
         t.sevencircleinversesansserif = 0x2790;
         t.sevendeva = 0x096d;
         t.seveneighths = 0x215e;
         t.sevengujarati = 0x0aed;
         t.sevengurmukhi = 0x0a6d;
         t.sevenhackarabic = 0x0667;
         t.sevenhangzhou = 0x3027;
         t.sevenideographicparen = 0x3226;
         t.seveninferior = 0x2087;
         t.sevenmonospace = 0xff17;
         t.sevenoldstyle = 0xf737;
         t.sevenparen = 0x247a;
         t.sevenperiod = 0x248e;
         t.sevenpersian = 0x06f7;
         t.sevenroman = 0x2176;
         t.sevensuperior = 0x2077;
         t.seventeencircle = 0x2470;
         t.seventeenparen = 0x2484;
         t.seventeenperiod = 0x2498;
         t.seventhai = 0x0e57;
         t.sfthyphen = 0x00ad;
         t.shaarmenian = 0x0577;
         t.shabengali = 0x09b6;
         t.shacyrillic = 0x0448;
         t.shaddaarabic = 0x0651;
         t.shaddadammaarabic = 0xfc61;
         t.shaddadammatanarabic = 0xfc5e;
         t.shaddafathaarabic = 0xfc60;
         t.shaddakasraarabic = 0xfc62;
         t.shaddakasratanarabic = 0xfc5f;
         t.shade = 0x2592;
         t.shadedark = 0x2593;
         t.shadelight = 0x2591;
         t.shademedium = 0x2592;
         t.shadeva = 0x0936;
         t.shagujarati = 0x0ab6;
         t.shagurmukhi = 0x0a36;
         t.shalshelethebrew = 0x0593;
         t.shbopomofo = 0x3115;
         t.shchacyrillic = 0x0449;
         t.sheenarabic = 0x0634;
         t.sheenfinalarabic = 0xfeb6;
         t.sheeninitialarabic = 0xfeb7;
         t.sheenmedialarabic = 0xfeb8;
         t.sheicoptic = 0x03e3;
         t.sheqel = 0x20aa;
         t.sheqelhebrew = 0x20aa;
         t.sheva = 0x05b0;
         t.sheva115 = 0x05b0;
         t.sheva15 = 0x05b0;
         t.sheva22 = 0x05b0;
         t.sheva2e = 0x05b0;
         t.shevahebrew = 0x05b0;
         t.shevanarrowhebrew = 0x05b0;
         t.shevaquarterhebrew = 0x05b0;
         t.shevawidehebrew = 0x05b0;
         t.shhacyrillic = 0x04bb;
         t.shimacoptic = 0x03ed;
         t.shin = 0x05e9;
         t.shindagesh = 0xfb49;
         t.shindageshhebrew = 0xfb49;
         t.shindageshshindot = 0xfb2c;
         t.shindageshshindothebrew = 0xfb2c;
         t.shindageshsindot = 0xfb2d;
         t.shindageshsindothebrew = 0xfb2d;
         t.shindothebrew = 0x05c1;
         t.shinhebrew = 0x05e9;
         t.shinshindot = 0xfb2a;
         t.shinshindothebrew = 0xfb2a;
         t.shinsindot = 0xfb2b;
         t.shinsindothebrew = 0xfb2b;
         t.shook = 0x0282;
         t.sigma = 0x03c3;
         t.sigma1 = 0x03c2;
         t.sigmafinal = 0x03c2;
         t.sigmalunatesymbolgreek = 0x03f2;
         t.sihiragana = 0x3057;
         t.sikatakana = 0x30b7;
         t.sikatakanahalfwidth = 0xff7c;
         t.siluqhebrew = 0x05bd;
         t.siluqlefthebrew = 0x05bd;
         t.similar = 0x223c;
         t.sindothebrew = 0x05c2;
         t.siosacirclekorean = 0x3274;
         t.siosaparenkorean = 0x3214;
         t.sioscieuckorean = 0x317e;
         t.sioscirclekorean = 0x3266;
         t.sioskiyeokkorean = 0x317a;
         t.sioskorean = 0x3145;
         t.siosnieunkorean = 0x317b;
         t.siosparenkorean = 0x3206;
         t.siospieupkorean = 0x317d;
         t.siostikeutkorean = 0x317c;
         t.six = 0x0036;
         t.sixarabic = 0x0666;
         t.sixbengali = 0x09ec;
         t.sixcircle = 0x2465;
         t.sixcircleinversesansserif = 0x278f;
         t.sixdeva = 0x096c;
         t.sixgujarati = 0x0aec;
         t.sixgurmukhi = 0x0a6c;
         t.sixhackarabic = 0x0666;
         t.sixhangzhou = 0x3026;
         t.sixideographicparen = 0x3225;
         t.sixinferior = 0x2086;
         t.sixmonospace = 0xff16;
         t.sixoldstyle = 0xf736;
         t.sixparen = 0x2479;
         t.sixperiod = 0x248d;
         t.sixpersian = 0x06f6;
         t.sixroman = 0x2175;
         t.sixsuperior = 0x2076;
         t.sixteencircle = 0x246f;
         t.sixteencurrencydenominatorbengali = 0x09f9;
         t.sixteenparen = 0x2483;
         t.sixteenperiod = 0x2497;
         t.sixthai = 0x0e56;
         t.slash = 0x002f;
         t.slashmonospace = 0xff0f;
         t.slong = 0x017f;
         t.slongdotaccent = 0x1e9b;
         t.smileface = 0x263a;
         t.smonospace = 0xff53;
         t.sofpasuqhebrew = 0x05c3;
         t.softhyphen = 0x00ad;
         t.softsigncyrillic = 0x044c;
         t.sohiragana = 0x305d;
         t.sokatakana = 0x30bd;
         t.sokatakanahalfwidth = 0xff7f;
         t.soliduslongoverlaycmb = 0x0338;
         t.solidusshortoverlaycmb = 0x0337;
         t.sorusithai = 0x0e29;
         t.sosalathai = 0x0e28;
         t.sosothai = 0x0e0b;
         t.sosuathai = 0x0e2a;
         t.space = 0x0020;
         t.spacehackarabic = 0x0020;
         t.spade = 0x2660;
         t.spadesuitblack = 0x2660;
         t.spadesuitwhite = 0x2664;
         t.sparen = 0x24ae;
         t.squarebelowcmb = 0x033b;
         t.squarecc = 0x33c4;
         t.squarecm = 0x339d;
         t.squarediagonalcrosshatchfill = 0x25a9;
         t.squarehorizontalfill = 0x25a4;
         t.squarekg = 0x338f;
         t.squarekm = 0x339e;
         t.squarekmcapital = 0x33ce;
         t.squareln = 0x33d1;
         t.squarelog = 0x33d2;
         t.squaremg = 0x338e;
         t.squaremil = 0x33d5;
         t.squaremm = 0x339c;
         t.squaremsquared = 0x33a1;
         t.squareorthogonalcrosshatchfill = 0x25a6;
         t.squareupperlefttolowerrightfill = 0x25a7;
         t.squareupperrighttolowerleftfill = 0x25a8;
         t.squareverticalfill = 0x25a5;
         t.squarewhitewithsmallblack = 0x25a3;
         t.srsquare = 0x33db;
         t.ssabengali = 0x09b7;
         t.ssadeva = 0x0937;
         t.ssagujarati = 0x0ab7;
         t.ssangcieuckorean = 0x3149;
         t.ssanghieuhkorean = 0x3185;
         t.ssangieungkorean = 0x3180;
         t.ssangkiyeokkorean = 0x3132;
         t.ssangnieunkorean = 0x3165;
         t.ssangpieupkorean = 0x3143;
         t.ssangsioskorean = 0x3146;
         t.ssangtikeutkorean = 0x3138;
         t.ssuperior = 0xf6f2;
         t.sterling = 0x00a3;
         t.sterlingmonospace = 0xffe1;
         t.strokelongoverlaycmb = 0x0336;
         t.strokeshortoverlaycmb = 0x0335;
         t.subset = 0x2282;
         t.subsetnotequal = 0x228a;
         t.subsetorequal = 0x2286;
         t.succeeds = 0x227b;
         t.suchthat = 0x220b;
         t.suhiragana = 0x3059;
         t.sukatakana = 0x30b9;
         t.sukatakanahalfwidth = 0xff7d;
         t.sukunarabic = 0x0652;
         t.summation = 0x2211;
         t.sun = 0x263c;
         t.superset = 0x2283;
         t.supersetnotequal = 0x228b;
         t.supersetorequal = 0x2287;
         t.svsquare = 0x33dc;
         t.syouwaerasquare = 0x337c;
         t.t = 0x0074;
         t.tabengali = 0x09a4;
         t.tackdown = 0x22a4;
         t.tackleft = 0x22a3;
         t.tadeva = 0x0924;
         t.tagujarati = 0x0aa4;
         t.tagurmukhi = 0x0a24;
         t.taharabic = 0x0637;
         t.tahfinalarabic = 0xfec2;
         t.tahinitialarabic = 0xfec3;
         t.tahiragana = 0x305f;
         t.tahmedialarabic = 0xfec4;
         t.taisyouerasquare = 0x337d;
         t.takatakana = 0x30bf;
         t.takatakanahalfwidth = 0xff80;
         t.tatweelarabic = 0x0640;
         t.tau = 0x03c4;
         t.tav = 0x05ea;
         t.tavdages = 0xfb4a;
         t.tavdagesh = 0xfb4a;
         t.tavdageshhebrew = 0xfb4a;
         t.tavhebrew = 0x05ea;
         t.tbar = 0x0167;
         t.tbopomofo = 0x310a;
         t.tcaron = 0x0165;
         t.tccurl = 0x02a8;
         t.tcedilla = 0x0163;
         t.tcheharabic = 0x0686;
         t.tchehfinalarabic = 0xfb7b;
         t.tchehinitialarabic = 0xfb7c;
         t.tchehmedialarabic = 0xfb7d;
         t.tcircle = 0x24e3;
         t.tcircumflexbelow = 0x1e71;
         t.tcommaaccent = 0x0163;
         t.tdieresis = 0x1e97;
         t.tdotaccent = 0x1e6b;
         t.tdotbelow = 0x1e6d;
         t.tecyrillic = 0x0442;
         t.tedescendercyrillic = 0x04ad;
         t.teharabic = 0x062a;
         t.tehfinalarabic = 0xfe96;
         t.tehhahinitialarabic = 0xfca2;
         t.tehhahisolatedarabic = 0xfc0c;
         t.tehinitialarabic = 0xfe97;
         t.tehiragana = 0x3066;
         t.tehjeeminitialarabic = 0xfca1;
         t.tehjeemisolatedarabic = 0xfc0b;
         t.tehmarbutaarabic = 0x0629;
         t.tehmarbutafinalarabic = 0xfe94;
         t.tehmedialarabic = 0xfe98;
         t.tehmeeminitialarabic = 0xfca4;
         t.tehmeemisolatedarabic = 0xfc0e;
         t.tehnoonfinalarabic = 0xfc73;
         t.tekatakana = 0x30c6;
         t.tekatakanahalfwidth = 0xff83;
         t.telephone = 0x2121;
         t.telephoneblack = 0x260e;
         t.telishagedolahebrew = 0x05a0;
         t.telishaqetanahebrew = 0x05a9;
         t.tencircle = 0x2469;
         t.tenideographicparen = 0x3229;
         t.tenparen = 0x247d;
         t.tenperiod = 0x2491;
         t.tenroman = 0x2179;
         t.tesh = 0x02a7;
         t.tet = 0x05d8;
         t.tetdagesh = 0xfb38;
         t.tetdageshhebrew = 0xfb38;
         t.tethebrew = 0x05d8;
         t.tetsecyrillic = 0x04b5;
         t.tevirhebrew = 0x059b;
         t.tevirlefthebrew = 0x059b;
         t.thabengali = 0x09a5;
         t.thadeva = 0x0925;
         t.thagujarati = 0x0aa5;
         t.thagurmukhi = 0x0a25;
         t.thalarabic = 0x0630;
         t.thalfinalarabic = 0xfeac;
         t.thanthakhatlowleftthai = 0xf898;
         t.thanthakhatlowrightthai = 0xf897;
         t.thanthakhatthai = 0x0e4c;
         t.thanthakhatupperleftthai = 0xf896;
         t.theharabic = 0x062b;
         t.thehfinalarabic = 0xfe9a;
         t.thehinitialarabic = 0xfe9b;
         t.thehmedialarabic = 0xfe9c;
         t.thereexists = 0x2203;
         t.therefore = 0x2234;
         t.theta = 0x03b8;
         t.theta1 = 0x03d1;
         t.thetasymbolgreek = 0x03d1;
         t.thieuthacirclekorean = 0x3279;
         t.thieuthaparenkorean = 0x3219;
         t.thieuthcirclekorean = 0x326b;
         t.thieuthkorean = 0x314c;
         t.thieuthparenkorean = 0x320b;
         t.thirteencircle = 0x246c;
         t.thirteenparen = 0x2480;
         t.thirteenperiod = 0x2494;
         t.thonangmonthothai = 0x0e11;
         t.thook = 0x01ad;
         t.thophuthaothai = 0x0e12;
         t.thorn = 0x00fe;
         t.thothahanthai = 0x0e17;
         t.thothanthai = 0x0e10;
         t.thothongthai = 0x0e18;
         t.thothungthai = 0x0e16;
         t.thousandcyrillic = 0x0482;
         t.thousandsseparatorarabic = 0x066c;
         t.thousandsseparatorpersian = 0x066c;
         t.three = 0x0033;
         t.threearabic = 0x0663;
         t.threebengali = 0x09e9;
         t.threecircle = 0x2462;
         t.threecircleinversesansserif = 0x278c;
         t.threedeva = 0x0969;
         t.threeeighths = 0x215c;
         t.threegujarati = 0x0ae9;
         t.threegurmukhi = 0x0a69;
         t.threehackarabic = 0x0663;
         t.threehangzhou = 0x3023;
         t.threeideographicparen = 0x3222;
         t.threeinferior = 0x2083;
         t.threemonospace = 0xff13;
         t.threenumeratorbengali = 0x09f6;
         t.threeoldstyle = 0xf733;
         t.threeparen = 0x2476;
         t.threeperiod = 0x248a;
         t.threepersian = 0x06f3;
         t.threequarters = 0x00be;
         t.threequartersemdash = 0xf6de;
         t.threeroman = 0x2172;
         t.threesuperior = 0x00b3;
         t.threethai = 0x0e53;
         t.thzsquare = 0x3394;
         t.tihiragana = 0x3061;
         t.tikatakana = 0x30c1;
         t.tikatakanahalfwidth = 0xff81;
         t.tikeutacirclekorean = 0x3270;
         t.tikeutaparenkorean = 0x3210;
         t.tikeutcirclekorean = 0x3262;
         t.tikeutkorean = 0x3137;
         t.tikeutparenkorean = 0x3202;
         t.tilde = 0x02dc;
         t.tildebelowcmb = 0x0330;
         t.tildecmb = 0x0303;
         t.tildecomb = 0x0303;
         t.tildedoublecmb = 0x0360;
         t.tildeoperator = 0x223c;
         t.tildeoverlaycmb = 0x0334;
         t.tildeverticalcmb = 0x033e;
         t.timescircle = 0x2297;
         t.tipehahebrew = 0x0596;
         t.tipehalefthebrew = 0x0596;
         t.tippigurmukhi = 0x0a70;
         t.titlocyrilliccmb = 0x0483;
         t.tiwnarmenian = 0x057f;
         t.tlinebelow = 0x1e6f;
         t.tmonospace = 0xff54;
         t.toarmenian = 0x0569;
         t.tohiragana = 0x3068;
         t.tokatakana = 0x30c8;
         t.tokatakanahalfwidth = 0xff84;
         t.tonebarextrahighmod = 0x02e5;
         t.tonebarextralowmod = 0x02e9;
         t.tonebarhighmod = 0x02e6;
         t.tonebarlowmod = 0x02e8;
         t.tonebarmidmod = 0x02e7;
         t.tonefive = 0x01bd;
         t.tonesix = 0x0185;
         t.tonetwo = 0x01a8;
         t.tonos = 0x0384;
         t.tonsquare = 0x3327;
         t.topatakthai = 0x0e0f;
         t.tortoiseshellbracketleft = 0x3014;
         t.tortoiseshellbracketleftsmall = 0xfe5d;
         t.tortoiseshellbracketleftvertical = 0xfe39;
         t.tortoiseshellbracketright = 0x3015;
         t.tortoiseshellbracketrightsmall = 0xfe5e;
         t.tortoiseshellbracketrightvertical = 0xfe3a;
         t.totaothai = 0x0e15;
         t.tpalatalhook = 0x01ab;
         t.tparen = 0x24af;
         t.trademark = 0x2122;
         t.trademarksans = 0xf8ea;
         t.trademarkserif = 0xf6db;
         t.tretroflexhook = 0x0288;
         t.triagdn = 0x25bc;
         t.triaglf = 0x25c4;
         t.triagrt = 0x25ba;
         t.triagup = 0x25b2;
         t.ts = 0x02a6;
         t.tsadi = 0x05e6;
         t.tsadidagesh = 0xfb46;
         t.tsadidageshhebrew = 0xfb46;
         t.tsadihebrew = 0x05e6;
         t.tsecyrillic = 0x0446;
         t.tsere = 0x05b5;
         t.tsere12 = 0x05b5;
         t.tsere1e = 0x05b5;
         t.tsere2b = 0x05b5;
         t.tserehebrew = 0x05b5;
         t.tserenarrowhebrew = 0x05b5;
         t.tserequarterhebrew = 0x05b5;
         t.tserewidehebrew = 0x05b5;
         t.tshecyrillic = 0x045b;
         t.tsuperior = 0xf6f3;
         t.ttabengali = 0x099f;
         t.ttadeva = 0x091f;
         t.ttagujarati = 0x0a9f;
         t.ttagurmukhi = 0x0a1f;
         t.tteharabic = 0x0679;
         t.ttehfinalarabic = 0xfb67;
         t.ttehinitialarabic = 0xfb68;
         t.ttehmedialarabic = 0xfb69;
         t.tthabengali = 0x09a0;
         t.tthadeva = 0x0920;
         t.tthagujarati = 0x0aa0;
         t.tthagurmukhi = 0x0a20;
         t.tturned = 0x0287;
         t.tuhiragana = 0x3064;
         t.tukatakana = 0x30c4;
         t.tukatakanahalfwidth = 0xff82;
         t.tusmallhiragana = 0x3063;
         t.tusmallkatakana = 0x30c3;
         t.tusmallkatakanahalfwidth = 0xff6f;
         t.twelvecircle = 0x246b;
         t.twelveparen = 0x247f;
         t.twelveperiod = 0x2493;
         t.twelveroman = 0x217b;
         t.twentycircle = 0x2473;
         t.twentyhangzhou = 0x5344;
         t.twentyparen = 0x2487;
         t.twentyperiod = 0x249b;
         t.two = 0x0032;
         t.twoarabic = 0x0662;
         t.twobengali = 0x09e8;
         t.twocircle = 0x2461;
         t.twocircleinversesansserif = 0x278b;
         t.twodeva = 0x0968;
         t.twodotenleader = 0x2025;
         t.twodotleader = 0x2025;
         t.twodotleadervertical = 0xfe30;
         t.twogujarati = 0x0ae8;
         t.twogurmukhi = 0x0a68;
         t.twohackarabic = 0x0662;
         t.twohangzhou = 0x3022;
         t.twoideographicparen = 0x3221;
         t.twoinferior = 0x2082;
         t.twomonospace = 0xff12;
         t.twonumeratorbengali = 0x09f5;
         t.twooldstyle = 0xf732;
         t.twoparen = 0x2475;
         t.twoperiod = 0x2489;
         t.twopersian = 0x06f2;
         t.tworoman = 0x2171;
         t.twostroke = 0x01bb;
         t.twosuperior = 0x00b2;
         t.twothai = 0x0e52;
         t.twothirds = 0x2154;
         t.u = 0x0075;
         t.uacute = 0x00fa;
         t.ubar = 0x0289;
         t.ubengali = 0x0989;
         t.ubopomofo = 0x3128;
         t.ubreve = 0x016d;
         t.ucaron = 0x01d4;
         t.ucircle = 0x24e4;
         t.ucircumflex = 0x00fb;
         t.ucircumflexbelow = 0x1e77;
         t.ucyrillic = 0x0443;
         t.udattadeva = 0x0951;
         t.udblacute = 0x0171;
         t.udblgrave = 0x0215;
         t.udeva = 0x0909;
         t.udieresis = 0x00fc;
         t.udieresisacute = 0x01d8;
         t.udieresisbelow = 0x1e73;
         t.udieresiscaron = 0x01da;
         t.udieresiscyrillic = 0x04f1;
         t.udieresisgrave = 0x01dc;
         t.udieresismacron = 0x01d6;
         t.udotbelow = 0x1ee5;
         t.ugrave = 0x00f9;
         t.ugujarati = 0x0a89;
         t.ugurmukhi = 0x0a09;
         t.uhiragana = 0x3046;
         t.uhookabove = 0x1ee7;
         t.uhorn = 0x01b0;
         t.uhornacute = 0x1ee9;
         t.uhorndotbelow = 0x1ef1;
         t.uhorngrave = 0x1eeb;
         t.uhornhookabove = 0x1eed;
         t.uhorntilde = 0x1eef;
         t.uhungarumlaut = 0x0171;
         t.uhungarumlautcyrillic = 0x04f3;
         t.uinvertedbreve = 0x0217;
         t.ukatakana = 0x30a6;
         t.ukatakanahalfwidth = 0xff73;
         t.ukcyrillic = 0x0479;
         t.ukorean = 0x315c;
         t.umacron = 0x016b;
         t.umacroncyrillic = 0x04ef;
         t.umacrondieresis = 0x1e7b;
         t.umatragurmukhi = 0x0a41;
         t.umonospace = 0xff55;
         t.underscore = 0x005f;
         t.underscoredbl = 0x2017;
         t.underscoremonospace = 0xff3f;
         t.underscorevertical = 0xfe33;
         t.underscorewavy = 0xfe4f;
         t.union = 0x222a;
         t.universal = 0x2200;
         t.uogonek = 0x0173;
         t.uparen = 0x24b0;
         t.upblock = 0x2580;
         t.upperdothebrew = 0x05c4;
         t.upsilon = 0x03c5;
         t.upsilondieresis = 0x03cb;
         t.upsilondieresistonos = 0x03b0;
         t.upsilonlatin = 0x028a;
         t.upsilontonos = 0x03cd;
         t.uptackbelowcmb = 0x031d;
         t.uptackmod = 0x02d4;
         t.uragurmukhi = 0x0a73;
         t.uring = 0x016f;
         t.ushortcyrillic = 0x045e;
         t.usmallhiragana = 0x3045;
         t.usmallkatakana = 0x30a5;
         t.usmallkatakanahalfwidth = 0xff69;
         t.ustraightcyrillic = 0x04af;
         t.ustraightstrokecyrillic = 0x04b1;
         t.utilde = 0x0169;
         t.utildeacute = 0x1e79;
         t.utildebelow = 0x1e75;
         t.uubengali = 0x098a;
         t.uudeva = 0x090a;
         t.uugujarati = 0x0a8a;
         t.uugurmukhi = 0x0a0a;
         t.uumatragurmukhi = 0x0a42;
         t.uuvowelsignbengali = 0x09c2;
         t.uuvowelsigndeva = 0x0942;
         t.uuvowelsigngujarati = 0x0ac2;
         t.uvowelsignbengali = 0x09c1;
         t.uvowelsigndeva = 0x0941;
         t.uvowelsigngujarati = 0x0ac1;
         t.v = 0x0076;
         t.vadeva = 0x0935;
         t.vagujarati = 0x0ab5;
         t.vagurmukhi = 0x0a35;
         t.vakatakana = 0x30f7;
         t.vav = 0x05d5;
         t.vavdagesh = 0xfb35;
         t.vavdagesh65 = 0xfb35;
         t.vavdageshhebrew = 0xfb35;
         t.vavhebrew = 0x05d5;
         t.vavholam = 0xfb4b;
         t.vavholamhebrew = 0xfb4b;
         t.vavvavhebrew = 0x05f0;
         t.vavyodhebrew = 0x05f1;
         t.vcircle = 0x24e5;
         t.vdotbelow = 0x1e7f;
         t.vecyrillic = 0x0432;
         t.veharabic = 0x06a4;
         t.vehfinalarabic = 0xfb6b;
         t.vehinitialarabic = 0xfb6c;
         t.vehmedialarabic = 0xfb6d;
         t.vekatakana = 0x30f9;
         t.venus = 0x2640;
         t.verticalbar = 0x007c;
         t.verticallineabovecmb = 0x030d;
         t.verticallinebelowcmb = 0x0329;
         t.verticallinelowmod = 0x02cc;
         t.verticallinemod = 0x02c8;
         t.vewarmenian = 0x057e;
         t.vhook = 0x028b;
         t.vikatakana = 0x30f8;
         t.viramabengali = 0x09cd;
         t.viramadeva = 0x094d;
         t.viramagujarati = 0x0acd;
         t.visargabengali = 0x0983;
         t.visargadeva = 0x0903;
         t.visargagujarati = 0x0a83;
         t.vmonospace = 0xff56;
         t.voarmenian = 0x0578;
         t.voicediterationhiragana = 0x309e;
         t.voicediterationkatakana = 0x30fe;
         t.voicedmarkkana = 0x309b;
         t.voicedmarkkanahalfwidth = 0xff9e;
         t.vokatakana = 0x30fa;
         t.vparen = 0x24b1;
         t.vtilde = 0x1e7d;
         t.vturned = 0x028c;
         t.vuhiragana = 0x3094;
         t.vukatakana = 0x30f4;
         t.w = 0x0077;
         t.wacute = 0x1e83;
         t.waekorean = 0x3159;
         t.wahiragana = 0x308f;
         t.wakatakana = 0x30ef;
         t.wakatakanahalfwidth = 0xff9c;
         t.wakorean = 0x3158;
         t.wasmallhiragana = 0x308e;
         t.wasmallkatakana = 0x30ee;
         t.wattosquare = 0x3357;
         t.wavedash = 0x301c;
         t.wavyunderscorevertical = 0xfe34;
         t.wawarabic = 0x0648;
         t.wawfinalarabic = 0xfeee;
         t.wawhamzaabovearabic = 0x0624;
         t.wawhamzaabovefinalarabic = 0xfe86;
         t.wbsquare = 0x33dd;
         t.wcircle = 0x24e6;
         t.wcircumflex = 0x0175;
         t.wdieresis = 0x1e85;
         t.wdotaccent = 0x1e87;
         t.wdotbelow = 0x1e89;
         t.wehiragana = 0x3091;
         t.weierstrass = 0x2118;
         t.wekatakana = 0x30f1;
         t.wekorean = 0x315e;
         t.weokorean = 0x315d;
         t.wgrave = 0x1e81;
         t.whitebullet = 0x25e6;
         t.whitecircle = 0x25cb;
         t.whitecircleinverse = 0x25d9;
         t.whitecornerbracketleft = 0x300e;
         t.whitecornerbracketleftvertical = 0xfe43;
         t.whitecornerbracketright = 0x300f;
         t.whitecornerbracketrightvertical = 0xfe44;
         t.whitediamond = 0x25c7;
         t.whitediamondcontainingblacksmalldiamond = 0x25c8;
         t.whitedownpointingsmalltriangle = 0x25bf;
         t.whitedownpointingtriangle = 0x25bd;
         t.whiteleftpointingsmalltriangle = 0x25c3;
         t.whiteleftpointingtriangle = 0x25c1;
         t.whitelenticularbracketleft = 0x3016;
         t.whitelenticularbracketright = 0x3017;
         t.whiterightpointingsmalltriangle = 0x25b9;
         t.whiterightpointingtriangle = 0x25b7;
         t.whitesmallsquare = 0x25ab;
         t.whitesmilingface = 0x263a;
         t.whitesquare = 0x25a1;
         t.whitestar = 0x2606;
         t.whitetelephone = 0x260f;
         t.whitetortoiseshellbracketleft = 0x3018;
         t.whitetortoiseshellbracketright = 0x3019;
         t.whiteuppointingsmalltriangle = 0x25b5;
         t.whiteuppointingtriangle = 0x25b3;
         t.wihiragana = 0x3090;
         t.wikatakana = 0x30f0;
         t.wikorean = 0x315f;
         t.wmonospace = 0xff57;
         t.wohiragana = 0x3092;
         t.wokatakana = 0x30f2;
         t.wokatakanahalfwidth = 0xff66;
         t.won = 0x20a9;
         t.wonmonospace = 0xffe6;
         t.wowaenthai = 0x0e27;
         t.wparen = 0x24b2;
         t.wring = 0x1e98;
         t.wsuperior = 0x02b7;
         t.wturned = 0x028d;
         t.wynn = 0x01bf;
         t.x = 0x0078;
         t.xabovecmb = 0x033d;
         t.xbopomofo = 0x3112;
         t.xcircle = 0x24e7;
         t.xdieresis = 0x1e8d;
         t.xdotaccent = 0x1e8b;
         t.xeharmenian = 0x056d;
         t.xi = 0x03be;
         t.xmonospace = 0xff58;
         t.xparen = 0x24b3;
         t.xsuperior = 0x02e3;
         t.y = 0x0079;
         t.yaadosquare = 0x334e;
         t.yabengali = 0x09af;
         t.yacute = 0x00fd;
         t.yadeva = 0x092f;
         t.yaekorean = 0x3152;
         t.yagujarati = 0x0aaf;
         t.yagurmukhi = 0x0a2f;
         t.yahiragana = 0x3084;
         t.yakatakana = 0x30e4;
         t.yakatakanahalfwidth = 0xff94;
         t.yakorean = 0x3151;
         t.yamakkanthai = 0x0e4e;
         t.yasmallhiragana = 0x3083;
         t.yasmallkatakana = 0x30e3;
         t.yasmallkatakanahalfwidth = 0xff6c;
         t.yatcyrillic = 0x0463;
         t.ycircle = 0x24e8;
         t.ycircumflex = 0x0177;
         t.ydieresis = 0x00ff;
         t.ydotaccent = 0x1e8f;
         t.ydotbelow = 0x1ef5;
         t.yeharabic = 0x064a;
         t.yehbarreearabic = 0x06d2;
         t.yehbarreefinalarabic = 0xfbaf;
         t.yehfinalarabic = 0xfef2;
         t.yehhamzaabovearabic = 0x0626;
         t.yehhamzaabovefinalarabic = 0xfe8a;
         t.yehhamzaaboveinitialarabic = 0xfe8b;
         t.yehhamzaabovemedialarabic = 0xfe8c;
         t.yehinitialarabic = 0xfef3;
         t.yehmedialarabic = 0xfef4;
         t.yehmeeminitialarabic = 0xfcdd;
         t.yehmeemisolatedarabic = 0xfc58;
         t.yehnoonfinalarabic = 0xfc94;
         t.yehthreedotsbelowarabic = 0x06d1;
         t.yekorean = 0x3156;
         t.yen = 0x00a5;
         t.yenmonospace = 0xffe5;
         t.yeokorean = 0x3155;
         t.yeorinhieuhkorean = 0x3186;
         t.yerahbenyomohebrew = 0x05aa;
         t.yerahbenyomolefthebrew = 0x05aa;
         t.yericyrillic = 0x044b;
         t.yerudieresiscyrillic = 0x04f9;
         t.yesieungkorean = 0x3181;
         t.yesieungpansioskorean = 0x3183;
         t.yesieungsioskorean = 0x3182;
         t.yetivhebrew = 0x059a;
         t.ygrave = 0x1ef3;
         t.yhook = 0x01b4;
         t.yhookabove = 0x1ef7;
         t.yiarmenian = 0x0575;
         t.yicyrillic = 0x0457;
         t.yikorean = 0x3162;
         t.yinyang = 0x262f;
         t.yiwnarmenian = 0x0582;
         t.ymonospace = 0xff59;
         t.yod = 0x05d9;
         t.yoddagesh = 0xfb39;
         t.yoddageshhebrew = 0xfb39;
         t.yodhebrew = 0x05d9;
         t.yodyodhebrew = 0x05f2;
         t.yodyodpatahhebrew = 0xfb1f;
         t.yohiragana = 0x3088;
         t.yoikorean = 0x3189;
         t.yokatakana = 0x30e8;
         t.yokatakanahalfwidth = 0xff96;
         t.yokorean = 0x315b;
         t.yosmallhiragana = 0x3087;
         t.yosmallkatakana = 0x30e7;
         t.yosmallkatakanahalfwidth = 0xff6e;
         t.yotgreek = 0x03f3;
         t.yoyaekorean = 0x3188;
         t.yoyakorean = 0x3187;
         t.yoyakthai = 0x0e22;
         t.yoyingthai = 0x0e0d;
         t.yparen = 0x24b4;
         t.ypogegrammeni = 0x037a;
         t.ypogegrammenigreekcmb = 0x0345;
         t.yr = 0x01a6;
         t.yring = 0x1e99;
         t.ysuperior = 0x02b8;
         t.ytilde = 0x1ef9;
         t.yturned = 0x028e;
         t.yuhiragana = 0x3086;
         t.yuikorean = 0x318c;
         t.yukatakana = 0x30e6;
         t.yukatakanahalfwidth = 0xff95;
         t.yukorean = 0x3160;
         t.yusbigcyrillic = 0x046b;
         t.yusbigiotifiedcyrillic = 0x046d;
         t.yuslittlecyrillic = 0x0467;
         t.yuslittleiotifiedcyrillic = 0x0469;
         t.yusmallhiragana = 0x3085;
         t.yusmallkatakana = 0x30e5;
         t.yusmallkatakanahalfwidth = 0xff6d;
         t.yuyekorean = 0x318b;
         t.yuyeokorean = 0x318a;
         t.yyabengali = 0x09df;
         t.yyadeva = 0x095f;
         t.z = 0x007a;
         t.zaarmenian = 0x0566;
         t.zacute = 0x017a;
         t.zadeva = 0x095b;
         t.zagurmukhi = 0x0a5b;
         t.zaharabic = 0x0638;
         t.zahfinalarabic = 0xfec6;
         t.zahinitialarabic = 0xfec7;
         t.zahiragana = 0x3056;
         t.zahmedialarabic = 0xfec8;
         t.zainarabic = 0x0632;
         t.zainfinalarabic = 0xfeb0;
         t.zakatakana = 0x30b6;
         t.zaqefgadolhebrew = 0x0595;
         t.zaqefqatanhebrew = 0x0594;
         t.zarqahebrew = 0x0598;
         t.zayin = 0x05d6;
         t.zayindagesh = 0xfb36;
         t.zayindageshhebrew = 0xfb36;
         t.zayinhebrew = 0x05d6;
         t.zbopomofo = 0x3117;
         t.zcaron = 0x017e;
         t.zcircle = 0x24e9;
         t.zcircumflex = 0x1e91;
         t.zcurl = 0x0291;
         t.zdot = 0x017c;
         t.zdotaccent = 0x017c;
         t.zdotbelow = 0x1e93;
         t.zecyrillic = 0x0437;
         t.zedescendercyrillic = 0x0499;
         t.zedieresiscyrillic = 0x04df;
         t.zehiragana = 0x305c;
         t.zekatakana = 0x30bc;
         t.zero = 0x0030;
         t.zeroarabic = 0x0660;
         t.zerobengali = 0x09e6;
         t.zerodeva = 0x0966;
         t.zerogujarati = 0x0ae6;
         t.zerogurmukhi = 0x0a66;
         t.zerohackarabic = 0x0660;
         t.zeroinferior = 0x2080;
         t.zeromonospace = 0xff10;
         t.zerooldstyle = 0xf730;
         t.zeropersian = 0x06f0;
         t.zerosuperior = 0x2070;
         t.zerothai = 0x0e50;
         t.zerowidthjoiner = 0xfeff;
         t.zerowidthnonjoiner = 0x200c;
         t.zerowidthspace = 0x200b;
         t.zeta = 0x03b6;
         t.zhbopomofo = 0x3113;
         t.zhearmenian = 0x056a;
         t.zhebrevecyrillic = 0x04c2;
         t.zhecyrillic = 0x0436;
         t.zhedescendercyrillic = 0x0497;
         t.zhedieresiscyrillic = 0x04dd;
         t.zihiragana = 0x3058;
         t.zikatakana = 0x30b8;
         t.zinorhebrew = 0x05ae;
         t.zlinebelow = 0x1e95;
         t.zmonospace = 0xff5a;
         t.zohiragana = 0x305e;
         t.zokatakana = 0x30be;
         t.zparen = 0x24b5;
         t.zretroflexhook = 0x0290;
         t.zstroke = 0x01b6;
         t.zuhiragana = 0x305a;
         t.zukatakana = 0x30ba;
         t[".notdef"] = 0x0000;
         t.angbracketleftbig = 0x2329;
         t.angbracketleftBig = 0x2329;
         t.angbracketleftbigg = 0x2329;
         t.angbracketleftBigg = 0x2329;
         t.angbracketrightBig = 0x232a;
         t.angbracketrightbig = 0x232a;
         t.angbracketrightBigg = 0x232a;
         t.angbracketrightbigg = 0x232a;
         t.arrowhookleft = 0x21aa;
         t.arrowhookright = 0x21a9;
         t.arrowlefttophalf = 0x21bc;
         t.arrowleftbothalf = 0x21bd;
         t.arrownortheast = 0x2197;
         t.arrownorthwest = 0x2196;
         t.arrowrighttophalf = 0x21c0;
         t.arrowrightbothalf = 0x21c1;
         t.arrowsoutheast = 0x2198;
         t.arrowsouthwest = 0x2199;
         t.backslashbig = 0x2216;
         t.backslashBig = 0x2216;
         t.backslashBigg = 0x2216;
         t.backslashbigg = 0x2216;
         t.bardbl = 0x2016;
         t.bracehtipdownleft = 0xfe37;
         t.bracehtipdownright = 0xfe37;
         t.bracehtipupleft = 0xfe38;
         t.bracehtipupright = 0xfe38;
         t.braceleftBig = 0x007b;
         t.braceleftbig = 0x007b;
         t.braceleftbigg = 0x007b;
         t.braceleftBigg = 0x007b;
         t.bracerightBig = 0x007d;
         t.bracerightbig = 0x007d;
         t.bracerightbigg = 0x007d;
         t.bracerightBigg = 0x007d;
         t.bracketleftbig = 0x005b;
         t.bracketleftBig = 0x005b;
         t.bracketleftbigg = 0x005b;
         t.bracketleftBigg = 0x005b;
         t.bracketrightBig = 0x005d;
         t.bracketrightbig = 0x005d;
         t.bracketrightbigg = 0x005d;
         t.bracketrightBigg = 0x005d;
         t.ceilingleftbig = 0x2308;
         t.ceilingleftBig = 0x2308;
         t.ceilingleftBigg = 0x2308;
         t.ceilingleftbigg = 0x2308;
         t.ceilingrightbig = 0x2309;
         t.ceilingrightBig = 0x2309;
         t.ceilingrightbigg = 0x2309;
         t.ceilingrightBigg = 0x2309;
         t.circledotdisplay = 0x2299;
         t.circledottext = 0x2299;
         t.circlemultiplydisplay = 0x2297;
         t.circlemultiplytext = 0x2297;
         t.circleplusdisplay = 0x2295;
         t.circleplustext = 0x2295;
         t.contintegraldisplay = 0x222e;
         t.contintegraltext = 0x222e;
         t.coproductdisplay = 0x2210;
         t.coproducttext = 0x2210;
         t.floorleftBig = 0x230a;
         t.floorleftbig = 0x230a;
         t.floorleftbigg = 0x230a;
         t.floorleftBigg = 0x230a;
         t.floorrightbig = 0x230b;
         t.floorrightBig = 0x230b;
         t.floorrightBigg = 0x230b;
         t.floorrightbigg = 0x230b;
         t.hatwide = 0x0302;
         t.hatwider = 0x0302;
         t.hatwidest = 0x0302;
         t.intercal = 0x1d40;
         t.integraldisplay = 0x222b;
         t.integraltext = 0x222b;
         t.intersectiondisplay = 0x22c2;
         t.intersectiontext = 0x22c2;
         t.logicalanddisplay = 0x2227;
         t.logicalandtext = 0x2227;
         t.logicalordisplay = 0x2228;
         t.logicalortext = 0x2228;
         t.parenleftBig = 0x0028;
         t.parenleftbig = 0x0028;
         t.parenleftBigg = 0x0028;
         t.parenleftbigg = 0x0028;
         t.parenrightBig = 0x0029;
         t.parenrightbig = 0x0029;
         t.parenrightBigg = 0x0029;
         t.parenrightbigg = 0x0029;
         t.prime = 0x2032;
         t.productdisplay = 0x220f;
         t.producttext = 0x220f;
         t.radicalbig = 0x221a;
         t.radicalBig = 0x221a;
         t.radicalBigg = 0x221a;
         t.radicalbigg = 0x221a;
         t.radicalbt = 0x221a;
         t.radicaltp = 0x221a;
         t.radicalvertex = 0x221a;
         t.slashbig = 0x002f;
         t.slashBig = 0x002f;
         t.slashBigg = 0x002f;
         t.slashbigg = 0x002f;
         t.summationdisplay = 0x2211;
         t.summationtext = 0x2211;
         t.tildewide = 0x02dc;
         t.tildewider = 0x02dc;
         t.tildewidest = 0x02dc;
         t.uniondisplay = 0x22c3;
         t.unionmultidisplay = 0x228e;
         t.unionmultitext = 0x228e;
         t.unionsqdisplay = 0x2294;
         t.unionsqtext = 0x2294;
         t.uniontext = 0x22c3;
         t.vextenddouble = 0x2225;
         t.vextendsingle = 0x2223;
      });
      var getDingbatsGlyphsUnicode = getLookupTableFactory(function (t) {
         t.space = 0x0020;
         t.a1 = 0x2701;
         t.a2 = 0x2702;
         t.a202 = 0x2703;
         t.a3 = 0x2704;
         t.a4 = 0x260e;
         t.a5 = 0x2706;
         t.a119 = 0x2707;
         t.a118 = 0x2708;
         t.a117 = 0x2709;
         t.a11 = 0x261b;
         t.a12 = 0x261e;
         t.a13 = 0x270c;
         t.a14 = 0x270d;
         t.a15 = 0x270e;
         t.a16 = 0x270f;
         t.a105 = 0x2710;
         t.a17 = 0x2711;
         t.a18 = 0x2712;
         t.a19 = 0x2713;
         t.a20 = 0x2714;
         t.a21 = 0x2715;
         t.a22 = 0x2716;
         t.a23 = 0x2717;
         t.a24 = 0x2718;
         t.a25 = 0x2719;
         t.a26 = 0x271a;
         t.a27 = 0x271b;
         t.a28 = 0x271c;
         t.a6 = 0x271d;
         t.a7 = 0x271e;
         t.a8 = 0x271f;
         t.a9 = 0x2720;
         t.a10 = 0x2721;
         t.a29 = 0x2722;
         t.a30 = 0x2723;
         t.a31 = 0x2724;
         t.a32 = 0x2725;
         t.a33 = 0x2726;
         t.a34 = 0x2727;
         t.a35 = 0x2605;
         t.a36 = 0x2729;
         t.a37 = 0x272a;
         t.a38 = 0x272b;
         t.a39 = 0x272c;
         t.a40 = 0x272d;
         t.a41 = 0x272e;
         t.a42 = 0x272f;
         t.a43 = 0x2730;
         t.a44 = 0x2731;
         t.a45 = 0x2732;
         t.a46 = 0x2733;
         t.a47 = 0x2734;
         t.a48 = 0x2735;
         t.a49 = 0x2736;
         t.a50 = 0x2737;
         t.a51 = 0x2738;
         t.a52 = 0x2739;
         t.a53 = 0x273a;
         t.a54 = 0x273b;
         t.a55 = 0x273c;
         t.a56 = 0x273d;
         t.a57 = 0x273e;
         t.a58 = 0x273f;
         t.a59 = 0x2740;
         t.a60 = 0x2741;
         t.a61 = 0x2742;
         t.a62 = 0x2743;
         t.a63 = 0x2744;
         t.a64 = 0x2745;
         t.a65 = 0x2746;
         t.a66 = 0x2747;
         t.a67 = 0x2748;
         t.a68 = 0x2749;
         t.a69 = 0x274a;
         t.a70 = 0x274b;
         t.a71 = 0x25cf;
         t.a72 = 0x274d;
         t.a73 = 0x25a0;
         t.a74 = 0x274f;
         t.a203 = 0x2750;
         t.a75 = 0x2751;
         t.a204 = 0x2752;
         t.a76 = 0x25b2;
         t.a77 = 0x25bc;
         t.a78 = 0x25c6;
         t.a79 = 0x2756;
         t.a81 = 0x25d7;
         t.a82 = 0x2758;
         t.a83 = 0x2759;
         t.a84 = 0x275a;
         t.a97 = 0x275b;
         t.a98 = 0x275c;
         t.a99 = 0x275d;
         t.a100 = 0x275e;
         t.a101 = 0x2761;
         t.a102 = 0x2762;
         t.a103 = 0x2763;
         t.a104 = 0x2764;
         t.a106 = 0x2765;
         t.a107 = 0x2766;
         t.a108 = 0x2767;
         t.a112 = 0x2663;
         t.a111 = 0x2666;
         t.a110 = 0x2665;
         t.a109 = 0x2660;
         t.a120 = 0x2460;
         t.a121 = 0x2461;
         t.a122 = 0x2462;
         t.a123 = 0x2463;
         t.a124 = 0x2464;
         t.a125 = 0x2465;
         t.a126 = 0x2466;
         t.a127 = 0x2467;
         t.a128 = 0x2468;
         t.a129 = 0x2469;
         t.a130 = 0x2776;
         t.a131 = 0x2777;
         t.a132 = 0x2778;
         t.a133 = 0x2779;
         t.a134 = 0x277a;
         t.a135 = 0x277b;
         t.a136 = 0x277c;
         t.a137 = 0x277d;
         t.a138 = 0x277e;
         t.a139 = 0x277f;
         t.a140 = 0x2780;
         t.a141 = 0x2781;
         t.a142 = 0x2782;
         t.a143 = 0x2783;
         t.a144 = 0x2784;
         t.a145 = 0x2785;
         t.a146 = 0x2786;
         t.a147 = 0x2787;
         t.a148 = 0x2788;
         t.a149 = 0x2789;
         t.a150 = 0x278a;
         t.a151 = 0x278b;
         t.a152 = 0x278c;
         t.a153 = 0x278d;
         t.a154 = 0x278e;
         t.a155 = 0x278f;
         t.a156 = 0x2790;
         t.a157 = 0x2791;
         t.a158 = 0x2792;
         t.a159 = 0x2793;
         t.a160 = 0x2794;
         t.a161 = 0x2192;
         t.a163 = 0x2194;
         t.a164 = 0x2195;
         t.a196 = 0x2798;
         t.a165 = 0x2799;
         t.a192 = 0x279a;
         t.a166 = 0x279b;
         t.a167 = 0x279c;
         t.a168 = 0x279d;
         t.a169 = 0x279e;
         t.a170 = 0x279f;
         t.a171 = 0x27a0;
         t.a172 = 0x27a1;
         t.a173 = 0x27a2;
         t.a162 = 0x27a3;
         t.a174 = 0x27a4;
         t.a175 = 0x27a5;
         t.a176 = 0x27a6;
         t.a177 = 0x27a7;
         t.a178 = 0x27a8;
         t.a179 = 0x27a9;
         t.a193 = 0x27aa;
         t.a180 = 0x27ab;
         t.a199 = 0x27ac;
         t.a181 = 0x27ad;
         t.a200 = 0x27ae;
         t.a182 = 0x27af;
         t.a201 = 0x27b1;
         t.a183 = 0x27b2;
         t.a184 = 0x27b3;
         t.a197 = 0x27b4;
         t.a185 = 0x27b5;
         t.a194 = 0x27b6;
         t.a198 = 0x27b7;
         t.a186 = 0x27b8;
         t.a195 = 0x27b9;
         t.a187 = 0x27ba;
         t.a188 = 0x27bb;
         t.a189 = 0x27bc;
         t.a190 = 0x27bd;
         t.a191 = 0x27be;
         t.a89 = 0x2768;
         t.a90 = 0x2769;
         t.a93 = 0x276a;
         t.a94 = 0x276b;
         t.a91 = 0x276c;
         t.a92 = 0x276d;
         t.a205 = 0x276e;
         t.a85 = 0x276f;
         t.a206 = 0x2770;
         t.a86 = 0x2771;
         t.a87 = 0x2772;
         t.a88 = 0x2773;
         t.a95 = 0x2774;
         t.a96 = 0x2775;
         t[".notdef"] = 0x0000;
      }); // CONCATENATED MODULE: ./src/core/unicode.js
      var getSpecialPUASymbols = getLookupTableFactory(function (t) {
         t[63721] = 0x00a9;
         t[63193] = 0x00a9;
         t[63720] = 0x00ae;
         t[63194] = 0x00ae;
         t[63722] = 0x2122;
         t[63195] = 0x2122;
         t[63729] = 0x23a7;
         t[63730] = 0x23a8;
         t[63731] = 0x23a9;
         t[63740] = 0x23ab;
         t[63741] = 0x23ac;
         t[63742] = 0x23ad;
         t[63726] = 0x23a1;
         t[63727] = 0x23a2;
         t[63728] = 0x23a3;
         t[63737] = 0x23a4;
         t[63738] = 0x23a5;
         t[63739] = 0x23a6;
         t[63723] = 0x239b;
         t[63724] = 0x239c;
         t[63725] = 0x239d;
         t[63734] = 0x239e;
         t[63735] = 0x239f;
         t[63736] = 0x23a0;
      });
      function mapSpecialUnicodeValues(code) {
         if (code >= 0xfff0 && code <= 0xffff) {
            return 0;
         } else if (code >= 0xf600 && code <= 0xf8ff) {
            return getSpecialPUASymbols()[code] || code;
         } else if (code === 0x00ad) {
            return 0x002d;
         }
         return code;
      }
      function getUnicodeForGlyph(name, glyphsUnicodeMap) {
         var unicode = glyphsUnicodeMap[name];
         if (unicode !== undefined) {
            return unicode;
         }
         if (!name) {
            return -1;
         }
         if (name[0] === "u") {
            var nameLen = name.length;
            var hexStr;
            if (nameLen === 7 && name[1] === "n" && name[2] === "i") {
               hexStr = name.substring(3);
            } else if (nameLen >= 5 && nameLen <= 7) {
               hexStr = name.substring(1);
            } else {
               return -1;
            }
            if (hexStr === hexStr.toUpperCase()) {
               unicode = parseInt(hexStr, 16);
               if (unicode >= 0) {
                  return unicode;
               }
            }
         }
         return -1;
      }
      var UnicodeRanges = [
         [0x0000, 0x007f],
         [0x0080, 0x00ff],
         [0x0100, 0x017f],
         [0x0180, 0x024f],
         [0x0250, 0x02af, 0x1d00, 0x1d7f, 0x1d80, 0x1dbf],
         [0x02b0, 0x02ff, 0xa700, 0xa71f],
         [0x0300, 0x036f, 0x1dc0, 0x1dff],
         [0x0370, 0x03ff],
         [0x2c80, 0x2cff],
         [0x0400, 0x04ff, 0x0500, 0x052f, 0x2de0, 0x2dff, 0xa640, 0xa69f],
         [0x0530, 0x058f],
         [0x0590, 0x05ff],
         [0xa500, 0xa63f],
         [0x0600, 0x06ff, 0x0750, 0x077f],
         [0x07c0, 0x07ff],
         [0x0900, 0x097f],
         [0x0980, 0x09ff],
         [0x0a00, 0x0a7f],
         [0x0a80, 0x0aff],
         [0x0b00, 0x0b7f],
         [0x0b80, 0x0bff],
         [0x0c00, 0x0c7f],
         [0x0c80, 0x0cff],
         [0x0d00, 0x0d7f],
         [0x0e00, 0x0e7f],
         [0x0e80, 0x0eff],
         [0x10a0, 0x10ff, 0x2d00, 0x2d2f],
         [0x1b00, 0x1b7f],
         [0x1100, 0x11ff],
         [0x1e00, 0x1eff, 0x2c60, 0x2c7f, 0xa720, 0xa7ff],
         [0x1f00, 0x1fff],
         [0x2000, 0x206f, 0x2e00, 0x2e7f],
         [0x2070, 0x209f],
         [0x20a0, 0x20cf],
         [0x20d0, 0x20ff],
         [0x2100, 0x214f],
         [0x2150, 0x218f],
         [0x2190, 0x21ff, 0x27f0, 0x27ff, 0x2900, 0x297f, 0x2b00, 0x2bff],
         [0x2200, 0x22ff, 0x2a00, 0x2aff, 0x27c0, 0x27ef, 0x2980, 0x29ff],
         [0x2300, 0x23ff],
         [0x2400, 0x243f],
         [0x2440, 0x245f],
         [0x2460, 0x24ff],
         [0x2500, 0x257f],
         [0x2580, 0x259f],
         [0x25a0, 0x25ff],
         [0x2600, 0x26ff],
         [0x2700, 0x27bf],
         [0x3000, 0x303f],
         [0x3040, 0x309f],
         [0x30a0, 0x30ff, 0x31f0, 0x31ff],
         [0x3100, 0x312f, 0x31a0, 0x31bf],
         [0x3130, 0x318f],
         [0xa840, 0xa87f],
         [0x3200, 0x32ff],
         [0x3300, 0x33ff],
         [0xac00, 0xd7af],
         [0xd800, 0xdfff],
         [0x10900, 0x1091f],
         [
            0x4e00, 0x9fff, 0x2e80, 0x2eff, 0x2f00, 0x2fdf, 0x2ff0, 0x2fff, 0x3400,
            0x4dbf, 0x20000, 0x2a6df, 0x3190, 0x319f,
         ],
         [0xe000, 0xf8ff],
         [0x31c0, 0x31ef, 0xf900, 0xfaff, 0x2f800, 0x2fa1f],
         [0xfb00, 0xfb4f],
         [0xfb50, 0xfdff],
         [0xfe20, 0xfe2f],
         [0xfe10, 0xfe1f],
         [0xfe50, 0xfe6f],
         [0xfe70, 0xfeff],
         [0xff00, 0xffef],
         [0xfff0, 0xffff],
         [0x0f00, 0x0fff],
         [0x0700, 0x074f],
         [0x0780, 0x07bf],
         [0x0d80, 0x0dff],
         [0x1000, 0x109f],
         [0x1200, 0x137f, 0x1380, 0x139f, 0x2d80, 0x2ddf],
         [0x13a0, 0x13ff],
         [0x1400, 0x167f],
         [0x1680, 0x169f],
         [0x16a0, 0x16ff],
         [0x1780, 0x17ff],
         [0x1800, 0x18af],
         [0x2800, 0x28ff],
         [0xa000, 0xa48f],
         [0x1700, 0x171f, 0x1720, 0x173f, 0x1740, 0x175f, 0x1760, 0x177f],
         [0x10300, 0x1032f],
         [0x10330, 0x1034f],
         [0x10400, 0x1044f],
         [0x1d000, 0x1d0ff, 0x1d100, 0x1d1ff, 0x1d200, 0x1d24f],
         [0x1d400, 0x1d7ff],
         [0xff000, 0xffffd],
         [0xfe00, 0xfe0f, 0xe0100, 0xe01ef],
         [0xe0000, 0xe007f],
         [0x1900, 0x194f],
         [0x1950, 0x197f],
         [0x1980, 0x19df],
         [0x1a00, 0x1a1f],
         [0x2c00, 0x2c5f],
         [0x2d30, 0x2d7f],
         [0x4dc0, 0x4dff],
         [0xa800, 0xa82f],
         [0x10000, 0x1007f, 0x10080, 0x100ff, 0x10100, 0x1013f],
         [0x10140, 0x1018f],
         [0x10380, 0x1039f],
         [0x103a0, 0x103df],
         [0x10450, 0x1047f],
         [0x10480, 0x104af],
         [0x10800, 0x1083f],
         [0x10a00, 0x10a5f],
         [0x1d300, 0x1d35f],
         [0x12000, 0x123ff, 0x12400, 0x1247f],
         [0x1d360, 0x1d37f],
         [0x1b80, 0x1bbf],
         [0x1c00, 0x1c4f],
         [0x1c50, 0x1c7f],
         [0xa880, 0xa8df],
         [0xa900, 0xa92f],
         [0xa930, 0xa95f],
         [0xaa00, 0xaa5f],
         [0x10190, 0x101cf],
         [0x101d0, 0x101ff],
         [0x102a0, 0x102df, 0x10280, 0x1029f, 0x10920, 0x1093f],
         [0x1f030, 0x1f09f, 0x1f000, 0x1f02f],
      ];
      function getUnicodeRangeFor(value) {
         var lastPosition =
            arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
         if (lastPosition !== -1) {
            var range = UnicodeRanges[lastPosition];
            for (var i = 0, ii = range.length; i < ii; i += 2) {
               if (value >= range[i] && value <= range[i + 1]) {
                  return lastPosition;
               }
            }
         }
         for (var _i17 = 0, _ii2 = UnicodeRanges.length; _i17 < _ii2; _i17++) {
            var _range = UnicodeRanges[_i17];
            for (var j = 0, jj = _range.length; j < jj; j += 2) {
               if (value >= _range[j] && value <= _range[j + 1]) {
                  return _i17;
               }
            }
         }
         return -1;
      }
      var SpecialCharRegExp = new RegExp("^(\\s)|(\\p{Mn})|(\\p{Cf})$", "u");
      var CategoryCache = new Map();
      function getCharUnicodeCategory(_char8) {
         var cachedCategory = CategoryCache.get(_char8);
         if (cachedCategory) {
            return cachedCategory;
         }
         var groups = _char8.match(SpecialCharRegExp);
         var category = {
            isWhitespace: !!(groups !== null && groups !== void 0 && groups[1]),
            isZeroWidthDiacritic: !!(
               groups !== null &&
               groups !== void 0 &&
               groups[2]
            ),
            isInvisibleFormatMark: !!(
               groups !== null &&
               groups !== void 0 &&
               groups[3]
            ),
         };
         CategoryCache.set(_char8, category);
         return category;
      }
      function clearUnicodeCaches() {
         CategoryCache.clear();
      } // CONCATENATED MODULE: ./src/core/fonts_utils.js
      var SEAC_ANALYSIS_ENABLED = true;
      var FontFlags = {
         FixedPitch: 1,
         Serif: 2,
         Symbolic: 4,
         Script: 8,
         Nonsymbolic: 32,
         Italic: 64,
         AllCap: 65536,
         SmallCap: 131072,
         ForceBold: 262144,
      };
      var MacStandardGlyphOrdering = [
         ".notdef",
         ".null",
         "nonmarkingreturn",
         "space",
         "exclam",
         "quotedbl",
         "numbersign",
         "dollar",
         "percent",
         "ampersand",
         "quotesingle",
         "parenleft",
         "parenright",
         "asterisk",
         "plus",
         "comma",
         "hyphen",
         "period",
         "slash",
         "zero",
         "one",
         "two",
         "three",
         "four",
         "five",
         "six",
         "seven",
         "eight",
         "nine",
         "colon",
         "semicolon",
         "less",
         "equal",
         "greater",
         "question",
         "at",
         "A",
         "B",
         "C",
         "D",
         "E",
         "F",
         "G",
         "H",
         "I",
         "J",
         "K",
         "L",
         "M",
         "N",
         "O",
         "P",
         "Q",
         "R",
         "S",
         "T",
         "U",
         "V",
         "W",
         "X",
         "Y",
         "Z",
         "bracketleft",
         "backslash",
         "bracketright",
         "asciicircum",
         "underscore",
         "grave",
         "a",
         "b",
         "c",
         "d",
         "e",
         "f",
         "g",
         "h",
         "i",
         "j",
         "k",
         "l",
         "m",
         "n",
         "o",
         "p",
         "q",
         "r",
         "s",
         "t",
         "u",
         "v",
         "w",
         "x",
         "y",
         "z",
         "braceleft",
         "bar",
         "braceright",
         "asciitilde",
         "Adieresis",
         "Aring",
         "Ccedilla",
         "Eacute",
         "Ntilde",
         "Odieresis",
         "Udieresis",
         "aacute",
         "agrave",
         "acircumflex",
         "adieresis",
         "atilde",
         "aring",
         "ccedilla",
         "eacute",
         "egrave",
         "ecircumflex",
         "edieresis",
         "iacute",
         "igrave",
         "icircumflex",
         "idieresis",
         "ntilde",
         "oacute",
         "ograve",
         "ocircumflex",
         "odieresis",
         "otilde",
         "uacute",
         "ugrave",
         "ucircumflex",
         "udieresis",
         "dagger",
         "degree",
         "cent",
         "sterling",
         "section",
         "bullet",
         "paragraph",
         "germandbls",
         "registered",
         "copyright",
         "trademark",
         "acute",
         "dieresis",
         "notequal",
         "AE",
         "Oslash",
         "infinity",
         "plusminus",
         "lessequal",
         "greaterequal",
         "yen",
         "mu",
         "partialdiff",
         "summation",
         "product",
         "pi",
         "integral",
         "ordfeminine",
         "ordmasculine",
         "Omega",
         "ae",
         "oslash",
         "questiondown",
         "exclamdown",
         "logicalnot",
         "radical",
         "florin",
         "approxequal",
         "Delta",
         "guillemotleft",
         "guillemotright",
         "ellipsis",
         "nonbreakingspace",
         "Agrave",
         "Atilde",
         "Otilde",
         "OE",
         "oe",
         "endash",
         "emdash",
         "quotedblleft",
         "quotedblright",
         "quoteleft",
         "quoteright",
         "divide",
         "lozenge",
         "ydieresis",
         "Ydieresis",
         "fraction",
         "currency",
         "guilsinglleft",
         "guilsinglright",
         "fi",
         "fl",
         "daggerdbl",
         "periodcentered",
         "quotesinglbase",
         "quotedblbase",
         "perthousand",
         "Acircumflex",
         "Ecircumflex",
         "Aacute",
         "Edieresis",
         "Egrave",
         "Iacute",
         "Icircumflex",
         "Idieresis",
         "Igrave",
         "Oacute",
         "Ocircumflex",
         "apple",
         "Ograve",
         "Uacute",
         "Ucircumflex",
         "Ugrave",
         "dotlessi",
         "circumflex",
         "tilde",
         "macron",
         "breve",
         "dotaccent",
         "ring",
         "cedilla",
         "hungarumlaut",
         "ogonek",
         "caron",
         "Lslash",
         "lslash",
         "Scaron",
         "scaron",
         "Zcaron",
         "zcaron",
         "brokenbar",
         "Eth",
         "eth",
         "Yacute",
         "yacute",
         "Thorn",
         "thorn",
         "minus",
         "multiply",
         "onesuperior",
         "twosuperior",
         "threesuperior",
         "onehalf",
         "onequarter",
         "threequarters",
         "franc",
         "Gbreve",
         "gbreve",
         "Idotaccent",
         "Scedilla",
         "scedilla",
         "Cacute",
         "cacute",
         "Ccaron",
         "ccaron",
         "dcroat",
      ];
      function recoverGlyphName(name, glyphsUnicodeMap) {
         if (glyphsUnicodeMap[name] !== undefined) {
            return name;
         }
         var unicode = getUnicodeForGlyph(name, glyphsUnicodeMap);
         if (unicode !== -1) {
            for (var key in glyphsUnicodeMap) {
               if (glyphsUnicodeMap[key] === unicode) {
                  return key;
               }
            }
         }
         info("Unable to recover a standard glyph name for: " + name);
         return name;
      }
      function type1FontGlyphMapping(properties, builtInEncoding, glyphNames) {
         var charCodeToGlyphId = Object.create(null);
         var glyphId, charCode, baseEncoding;
         var isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);
         if (properties.isInternalFont) {
            baseEncoding = builtInEncoding;
            for (charCode = 0; charCode < baseEncoding.length; charCode++) {
               glyphId = glyphNames.indexOf(baseEncoding[charCode]);
               charCodeToGlyphId[charCode] = glyphId >= 0 ? glyphId : 0;
            }
         } else if (properties.baseEncodingName) {
            baseEncoding = getEncoding(properties.baseEncodingName);
            for (charCode = 0; charCode < baseEncoding.length; charCode++) {
               glyphId = glyphNames.indexOf(baseEncoding[charCode]);
               charCodeToGlyphId[charCode] = glyphId >= 0 ? glyphId : 0;
            }
         } else if (isSymbolicFont) {
            for (charCode in builtInEncoding) {
               charCodeToGlyphId[charCode] = builtInEncoding[charCode];
            }
         } else {
            baseEncoding = StandardEncoding;
            for (charCode = 0; charCode < baseEncoding.length; charCode++) {
               glyphId = glyphNames.indexOf(baseEncoding[charCode]);
               charCodeToGlyphId[charCode] = glyphId >= 0 ? glyphId : 0;
            }
         }
         var differences = properties.differences;
         var glyphsUnicodeMap;
         if (differences) {
            for (charCode in differences) {
               var glyphName = differences[charCode];
               glyphId = glyphNames.indexOf(glyphName);
               if (glyphId === -1) {
                  if (!glyphsUnicodeMap) {
                     glyphsUnicodeMap = getGlyphsUnicode();
                  }
                  var standardGlyphName = recoverGlyphName(
                     glyphName,
                     glyphsUnicodeMap,
                  );
                  if (standardGlyphName !== glyphName) {
                     glyphId = glyphNames.indexOf(standardGlyphName);
                  }
               }
               charCodeToGlyphId[charCode] = glyphId >= 0 ? glyphId : 0;
            }
         }
         return charCodeToGlyphId;
      }
      function normalizeFontName(name) {
         return name.replaceAll(/[,_]/g, "-").replaceAll(/\s/g, "");
      } // CONCATENATED MODULE: ./src/core/standard_fonts.js
      var getStdFontMap = getLookupTableFactory(function (t) {
         t["Times-Roman"] = "Times-Roman";
         t.Helvetica = "Helvetica";
         t.Courier = "Courier";
         t.Symbol = "Symbol";
         t["Times-Bold"] = "Times-Bold";
         t["Helvetica-Bold"] = "Helvetica-Bold";
         t["Courier-Bold"] = "Courier-Bold";
         t.ZapfDingbats = "ZapfDingbats";
         t["Times-Italic"] = "Times-Italic";
         t["Helvetica-Oblique"] = "Helvetica-Oblique";
         t["Courier-Oblique"] = "Courier-Oblique";
         t["Times-BoldItalic"] = "Times-BoldItalic";
         t["Helvetica-BoldOblique"] = "Helvetica-BoldOblique";
         t["Courier-BoldOblique"] = "Courier-BoldOblique";
         t.ArialNarrow = "Helvetica";
         t["ArialNarrow-Bold"] = "Helvetica-Bold";
         t["ArialNarrow-BoldItalic"] = "Helvetica-BoldOblique";
         t["ArialNarrow-Italic"] = "Helvetica-Oblique";
         t.ArialBlack = "Helvetica";
         t["ArialBlack-Bold"] = "Helvetica-Bold";
         t["ArialBlack-BoldItalic"] = "Helvetica-BoldOblique";
         t["ArialBlack-Italic"] = "Helvetica-Oblique";
         t["Arial-Black"] = "Helvetica";
         t["Arial-Black-Bold"] = "Helvetica-Bold";
         t["Arial-Black-BoldItalic"] = "Helvetica-BoldOblique";
         t["Arial-Black-Italic"] = "Helvetica-Oblique";
         t.Arial = "Helvetica";
         t["Arial-Bold"] = "Helvetica-Bold";
         t["Arial-BoldItalic"] = "Helvetica-BoldOblique";
         t["Arial-Italic"] = "Helvetica-Oblique";
         t.ArialMT = "Helvetica";
         t["Arial-BoldItalicMT"] = "Helvetica-BoldOblique";
         t["Arial-BoldMT"] = "Helvetica-Bold";
         t["Arial-ItalicMT"] = "Helvetica-Oblique";
         t["Arial-BoldItalicMT-BoldItalic"] = "Helvetica-BoldOblique";
         t["Arial-BoldMT-Bold"] = "Helvetica-Bold";
         t["Arial-ItalicMT-Italic"] = "Helvetica-Oblique";
         t.ArialUnicodeMS = "Helvetica";
         t["ArialUnicodeMS-Bold"] = "Helvetica-Bold";
         t["ArialUnicodeMS-BoldItalic"] = "Helvetica-BoldOblique";
         t["ArialUnicodeMS-Italic"] = "Helvetica-Oblique";
         t["Courier-BoldItalic"] = "Courier-BoldOblique";
         t["Courier-Italic"] = "Courier-Oblique";
         t.CourierNew = "Courier";
         t["CourierNew-Bold"] = "Courier-Bold";
         t["CourierNew-BoldItalic"] = "Courier-BoldOblique";
         t["CourierNew-Italic"] = "Courier-Oblique";
         t["CourierNewPS-BoldItalicMT"] = "Courier-BoldOblique";
         t["CourierNewPS-BoldMT"] = "Courier-Bold";
         t["CourierNewPS-ItalicMT"] = "Courier-Oblique";
         t.CourierNewPSMT = "Courier";
         t["Helvetica-BoldItalic"] = "Helvetica-BoldOblique";
         t["Helvetica-Italic"] = "Helvetica-Oblique";
         t["Symbol-Bold"] = "Symbol";
         t["Symbol-BoldItalic"] = "Symbol";
         t["Symbol-Italic"] = "Symbol";
         t.TimesNewRoman = "Times-Roman";
         t["TimesNewRoman-Bold"] = "Times-Bold";
         t["TimesNewRoman-BoldItalic"] = "Times-BoldItalic";
         t["TimesNewRoman-Italic"] = "Times-Italic";
         t.TimesNewRomanPS = "Times-Roman";
         t["TimesNewRomanPS-Bold"] = "Times-Bold";
         t["TimesNewRomanPS-BoldItalic"] = "Times-BoldItalic";
         t["TimesNewRomanPS-BoldItalicMT"] = "Times-BoldItalic";
         t["TimesNewRomanPS-BoldMT"] = "Times-Bold";
         t["TimesNewRomanPS-Italic"] = "Times-Italic";
         t["TimesNewRomanPS-ItalicMT"] = "Times-Italic";
         t.TimesNewRomanPSMT = "Times-Roman";
         t["TimesNewRomanPSMT-Bold"] = "Times-Bold";
         t["TimesNewRomanPSMT-BoldItalic"] = "Times-BoldItalic";
         t["TimesNewRomanPSMT-Italic"] = "Times-Italic";
      });
      var getFontNameToFileMap = getLookupTableFactory(function (t) {
         t.Courier = "FoxitFixed.pfb";
         t["Courier-Bold"] = "FoxitFixedBold.pfb";
         t["Courier-BoldOblique"] = "FoxitFixedBoldItalic.pfb";
         t["Courier-Oblique"] = "FoxitFixedItalic.pfb";
         t.Helvetica = "LiberationSans-Regular.ttf";
         t["Helvetica-Bold"] = "LiberationSans-Bold.ttf";
         t["Helvetica-BoldOblique"] = "LiberationSans-BoldItalic.ttf";
         t["Helvetica-Oblique"] = "LiberationSans-Italic.ttf";
         t["Times-Roman"] = "FoxitSerif.pfb";
         t["Times-Bold"] = "FoxitSerifBold.pfb";
         t["Times-BoldItalic"] = "FoxitSerifBoldItalic.pfb";
         t["Times-Italic"] = "FoxitSerifItalic.pfb";
         t.Symbol = "FoxitSymbol.pfb";
         t.ZapfDingbats = "FoxitDingbats.pfb";
         t["LiberationSans-Regular"] = "LiberationSans-Regular.ttf";
         t["LiberationSans-Bold"] = "LiberationSans-Bold.ttf";
         t["LiberationSans-Italic"] = "LiberationSans-Italic.ttf";
         t["LiberationSans-BoldItalic"] = "LiberationSans-BoldItalic.ttf";
      });
      var getNonStdFontMap = getLookupTableFactory(function (t) {
         t.Calibri = "Helvetica";
         t["Calibri-Bold"] = "Helvetica-Bold";
         t["Calibri-BoldItalic"] = "Helvetica-BoldOblique";
         t["Calibri-Italic"] = "Helvetica-Oblique";
         t.CenturyGothic = "Helvetica";
         t["CenturyGothic-Bold"] = "Helvetica-Bold";
         t["CenturyGothic-BoldItalic"] = "Helvetica-BoldOblique";
         t["CenturyGothic-Italic"] = "Helvetica-Oblique";
         t.ComicSansMS = "Comic Sans MS";
         t["ComicSansMS-Bold"] = "Comic Sans MS-Bold";
         t["ComicSansMS-BoldItalic"] = "Comic Sans MS-BoldItalic";
         t["ComicSansMS-Italic"] = "Comic Sans MS-Italic";
         t.Impact = "Helvetica";
         t["ItcSymbol-Bold"] = "Helvetica-Bold";
         t["ItcSymbol-BoldItalic"] = "Helvetica-BoldOblique";
         t["ItcSymbol-Book"] = "Helvetica";
         t["ItcSymbol-BookItalic"] = "Helvetica-Oblique";
         t["ItcSymbol-Medium"] = "Helvetica";
         t["ItcSymbol-MediumItalic"] = "Helvetica-Oblique";
         t.LucidaConsole = "Courier";
         t["LucidaConsole-Bold"] = "Courier-Bold";
         t["LucidaConsole-BoldItalic"] = "Courier-BoldOblique";
         t["LucidaConsole-Italic"] = "Courier-Oblique";
         t["LucidaSans-Demi"] = "Helvetica-Bold";
         t["MS-Gothic"] = "MS Gothic";
         t["MS-Gothic-Bold"] = "MS Gothic-Bold";
         t["MS-Gothic-BoldItalic"] = "MS Gothic-BoldItalic";
         t["MS-Gothic-Italic"] = "MS Gothic-Italic";
         t["MS-Mincho"] = "MS Mincho";
         t["MS-Mincho-Bold"] = "MS Mincho-Bold";
         t["MS-Mincho-BoldItalic"] = "MS Mincho-BoldItalic";
         t["MS-Mincho-Italic"] = "MS Mincho-Italic";
         t["MS-PGothic"] = "MS PGothic";
         t["MS-PGothic-Bold"] = "MS PGothic-Bold";
         t["MS-PGothic-BoldItalic"] = "MS PGothic-BoldItalic";
         t["MS-PGothic-Italic"] = "MS PGothic-Italic";
         t["MS-PMincho"] = "MS PMincho";
         t["MS-PMincho-Bold"] = "MS PMincho-Bold";
         t["MS-PMincho-BoldItalic"] = "MS PMincho-BoldItalic";
         t["MS-PMincho-Italic"] = "MS PMincho-Italic";
         t.NuptialScript = "Times-Italic";
         t.SegoeUISymbol = "Helvetica";
      });
      var getSerifFonts = getLookupTableFactory(function (t) {
         t["Adobe Jenson"] = true;
         t["Adobe Text"] = true;
         t.Albertus = true;
         t.Aldus = true;
         t.Alexandria = true;
         t.Algerian = true;
         t["American Typewriter"] = true;
         t.Antiqua = true;
         t.Apex = true;
         t.Arno = true;
         t.Aster = true;
         t.Aurora = true;
         t.Baskerville = true;
         t.Bell = true;
         t.Bembo = true;
         t["Bembo Schoolbook"] = true;
         t.Benguiat = true;
         t["Berkeley Old Style"] = true;
         t["Bernhard Modern"] = true;
         t["Berthold City"] = true;
         t.Bodoni = true;
         t["Bauer Bodoni"] = true;
         t["Book Antiqua"] = true;
         t.Bookman = true;
         t["Bordeaux Roman"] = true;
         t["Californian FB"] = true;
         t.Calisto = true;
         t.Calvert = true;
         t.Capitals = true;
         t.Cambria = true;
         t.Cartier = true;
         t.Caslon = true;
         t.Catull = true;
         t.Centaur = true;
         t["Century Old Style"] = true;
         t["Century Schoolbook"] = true;
         t.Chaparral = true;
         t["Charis SIL"] = true;
         t.Cheltenham = true;
         t["Cholla Slab"] = true;
         t.Clarendon = true;
         t.Clearface = true;
         t.Cochin = true;
         t.Colonna = true;
         t["Computer Modern"] = true;
         t["Concrete Roman"] = true;
         t.Constantia = true;
         t["Cooper Black"] = true;
         t.Corona = true;
         t.Ecotype = true;
         t.Egyptienne = true;
         t.Elephant = true;
         t.Excelsior = true;
         t.Fairfield = true;
         t["FF Scala"] = true;
         t.Folkard = true;
         t.Footlight = true;
         t.FreeSerif = true;
         t["Friz Quadrata"] = true;
         t.Garamond = true;
         t.Gentium = true;
         t.Georgia = true;
         t.Gloucester = true;
         t["Goudy Old Style"] = true;
         t["Goudy Schoolbook"] = true;
         t["Goudy Pro Font"] = true;
         t.Granjon = true;
         t["Guardian Egyptian"] = true;
         t.Heather = true;
         t.Hercules = true;
         t["High Tower Text"] = true;
         t.Hiroshige = true;
         t["Hoefler Text"] = true;
         t["Humana Serif"] = true;
         t.Imprint = true;
         t["Ionic No. 5"] = true;
         t.Janson = true;
         t.Joanna = true;
         t.Korinna = true;
         t.Lexicon = true;
         t.LiberationSerif = true;
         t["Liberation Serif"] = true;
         t["Linux Libertine"] = true;
         t.Literaturnaya = true;
         t.Lucida = true;
         t["Lucida Bright"] = true;
         t.Melior = true;
         t.Memphis = true;
         t.Miller = true;
         t.Minion = true;
         t.Modern = true;
         t["Mona Lisa"] = true;
         t["Mrs Eaves"] = true;
         t["MS Serif"] = true;
         t["Museo Slab"] = true;
         t["New York"] = true;
         t["Nimbus Roman"] = true;
         t["NPS Rawlinson Roadway"] = true;
         t.NuptialScript = true;
         t.Palatino = true;
         t.Perpetua = true;
         t.Plantin = true;
         t["Plantin Schoolbook"] = true;
         t.Playbill = true;
         t["Poor Richard"] = true;
         t["Rawlinson Roadway"] = true;
         t.Renault = true;
         t.Requiem = true;
         t.Rockwell = true;
         t.Roman = true;
         t["Rotis Serif"] = true;
         t.Sabon = true;
         t.Scala = true;
         t.Seagull = true;
         t.Sistina = true;
         t.Souvenir = true;
         t.STIX = true;
         t["Stone Informal"] = true;
         t["Stone Serif"] = true;
         t.Sylfaen = true;
         t.Times = true;
         t.Trajan = true;
         t["Trinité"] = true;
         t["Trump Mediaeval"] = true;
         t.Utopia = true;
         t["Vale Type"] = true;
         t["Bitstream Vera"] = true;
         t["Vera Serif"] = true;
         t.Versailles = true;
         t.Wanted = true;
         t.Weiss = true;
         t["Wide Latin"] = true;
         t.Windsor = true;
         t.XITS = true;
      });
      var getSymbolsFonts = getLookupTableFactory(function (t) {
         t.Dingbats = true;
         t.Symbol = true;
         t.ZapfDingbats = true;
         t.Wingdings = true;
         t["Wingdings-Bold"] = true;
         t["Wingdings-Regular"] = true;
      });
      var getGlyphMapForStandardFonts = getLookupTableFactory(function (t) {
         t[2] = 10;
         t[3] = 32;
         t[4] = 33;
         t[5] = 34;
         t[6] = 35;
         t[7] = 36;
         t[8] = 37;
         t[9] = 38;
         t[10] = 39;
         t[11] = 40;
         t[12] = 41;
         t[13] = 42;
         t[14] = 43;
         t[15] = 44;
         t[16] = 45;
         t[17] = 46;
         t[18] = 47;
         t[19] = 48;
         t[20] = 49;
         t[21] = 50;
         t[22] = 51;
         t[23] = 52;
         t[24] = 53;
         t[25] = 54;
         t[26] = 55;
         t[27] = 56;
         t[28] = 57;
         t[29] = 58;
         t[30] = 894;
         t[31] = 60;
         t[32] = 61;
         t[33] = 62;
         t[34] = 63;
         t[35] = 64;
         t[36] = 65;
         t[37] = 66;
         t[38] = 67;
         t[39] = 68;
         t[40] = 69;
         t[41] = 70;
         t[42] = 71;
         t[43] = 72;
         t[44] = 73;
         t[45] = 74;
         t[46] = 75;
         t[47] = 76;
         t[48] = 77;
         t[49] = 78;
         t[50] = 79;
         t[51] = 80;
         t[52] = 81;
         t[53] = 82;
         t[54] = 83;
         t[55] = 84;
         t[56] = 85;
         t[57] = 86;
         t[58] = 87;
         t[59] = 88;
         t[60] = 89;
         t[61] = 90;
         t[62] = 91;
         t[63] = 92;
         t[64] = 93;
         t[65] = 94;
         t[66] = 95;
         t[67] = 96;
         t[68] = 97;
         t[69] = 98;
         t[70] = 99;
         t[71] = 100;
         t[72] = 101;
         t[73] = 102;
         t[74] = 103;
         t[75] = 104;
         t[76] = 105;
         t[77] = 106;
         t[78] = 107;
         t[79] = 108;
         t[80] = 109;
         t[81] = 110;
         t[82] = 111;
         t[83] = 112;
         t[84] = 113;
         t[85] = 114;
         t[86] = 115;
         t[87] = 116;
         t[88] = 117;
         t[89] = 118;
         t[90] = 119;
         t[91] = 120;
         t[92] = 121;
         t[93] = 122;
         t[94] = 123;
         t[95] = 124;
         t[96] = 125;
         t[97] = 126;
         t[98] = 196;
         t[99] = 197;
         t[100] = 199;
         t[101] = 201;
         t[102] = 209;
         t[103] = 214;
         t[104] = 220;
         t[105] = 225;
         t[106] = 224;
         t[107] = 226;
         t[108] = 228;
         t[109] = 227;
         t[110] = 229;
         t[111] = 231;
         t[112] = 233;
         t[113] = 232;
         t[114] = 234;
         t[115] = 235;
         t[116] = 237;
         t[117] = 236;
         t[118] = 238;
         t[119] = 239;
         t[120] = 241;
         t[121] = 243;
         t[122] = 242;
         t[123] = 244;
         t[124] = 246;
         t[125] = 245;
         t[126] = 250;
         t[127] = 249;
         t[128] = 251;
         t[129] = 252;
         t[130] = 8224;
         t[131] = 176;
         t[132] = 162;
         t[133] = 163;
         t[134] = 167;
         t[135] = 8226;
         t[136] = 182;
         t[137] = 223;
         t[138] = 174;
         t[139] = 169;
         t[140] = 8482;
         t[141] = 180;
         t[142] = 168;
         t[143] = 8800;
         t[144] = 198;
         t[145] = 216;
         t[146] = 8734;
         t[147] = 177;
         t[148] = 8804;
         t[149] = 8805;
         t[150] = 165;
         t[151] = 181;
         t[152] = 8706;
         t[153] = 8721;
         t[154] = 8719;
         t[156] = 8747;
         t[157] = 170;
         t[158] = 186;
         t[159] = 8486;
         t[160] = 230;
         t[161] = 248;
         t[162] = 191;
         t[163] = 161;
         t[164] = 172;
         t[165] = 8730;
         t[166] = 402;
         t[167] = 8776;
         t[168] = 8710;
         t[169] = 171;
         t[170] = 187;
         t[171] = 8230;
         t[179] = 8220;
         t[180] = 8221;
         t[181] = 8216;
         t[182] = 8217;
         t[200] = 193;
         t[203] = 205;
         t[207] = 211;
         t[210] = 218;
         t[223] = 711;
         t[224] = 321;
         t[225] = 322;
         t[226] = 352;
         t[227] = 353;
         t[228] = 381;
         t[229] = 382;
         t[233] = 221;
         t[234] = 253;
         t[252] = 263;
         t[253] = 268;
         t[254] = 269;
         t[258] = 258;
         t[260] = 260;
         t[261] = 261;
         t[265] = 280;
         t[266] = 281;
         t[267] = 282;
         t[268] = 283;
         t[269] = 313;
         t[275] = 323;
         t[276] = 324;
         t[278] = 328;
         t[283] = 344;
         t[284] = 345;
         t[285] = 346;
         t[286] = 347;
         t[292] = 367;
         t[295] = 377;
         t[296] = 378;
         t[298] = 380;
         t[305] = 963;
         t[306] = 964;
         t[307] = 966;
         t[308] = 8215;
         t[309] = 8252;
         t[310] = 8319;
         t[311] = 8359;
         t[312] = 8592;
         t[313] = 8593;
         t[337] = 9552;
         t[493] = 1039;
         t[494] = 1040;
         t[672] = 1488;
         t[673] = 1489;
         t[674] = 1490;
         t[675] = 1491;
         t[676] = 1492;
         t[677] = 1493;
         t[678] = 1494;
         t[679] = 1495;
         t[680] = 1496;
         t[681] = 1497;
         t[682] = 1498;
         t[683] = 1499;
         t[684] = 1500;
         t[685] = 1501;
         t[686] = 1502;
         t[687] = 1503;
         t[688] = 1504;
         t[689] = 1505;
         t[690] = 1506;
         t[691] = 1507;
         t[692] = 1508;
         t[693] = 1509;
         t[694] = 1510;
         t[695] = 1511;
         t[696] = 1512;
         t[697] = 1513;
         t[698] = 1514;
         t[705] = 1524;
         t[706] = 8362;
         t[710] = 64288;
         t[711] = 64298;
         t[759] = 1617;
         t[761] = 1776;
         t[763] = 1778;
         t[775] = 1652;
         t[777] = 1764;
         t[778] = 1780;
         t[779] = 1781;
         t[780] = 1782;
         t[782] = 771;
         t[783] = 64726;
         t[786] = 8363;
         t[788] = 8532;
         t[790] = 768;
         t[791] = 769;
         t[792] = 768;
         t[795] = 803;
         t[797] = 64336;
         t[798] = 64337;
         t[799] = 64342;
         t[800] = 64343;
         t[801] = 64344;
         t[802] = 64345;
         t[803] = 64362;
         t[804] = 64363;
         t[805] = 64364;
         t[2424] = 7821;
         t[2425] = 7822;
         t[2426] = 7823;
         t[2427] = 7824;
         t[2428] = 7825;
         t[2429] = 7826;
         t[2430] = 7827;
         t[2433] = 7682;
         t[2678] = 8045;
         t[2679] = 8046;
         t[2830] = 1552;
         t[2838] = 686;
         t[2840] = 751;
         t[2842] = 753;
         t[2843] = 754;
         t[2844] = 755;
         t[2846] = 757;
         t[2856] = 767;
         t[2857] = 848;
         t[2858] = 849;
         t[2862] = 853;
         t[2863] = 854;
         t[2864] = 855;
         t[2865] = 861;
         t[2866] = 862;
         t[2906] = 7460;
         t[2908] = 7462;
         t[2909] = 7463;
         t[2910] = 7464;
         t[2912] = 7466;
         t[2913] = 7467;
         t[2914] = 7468;
         t[2916] = 7470;
         t[2917] = 7471;
         t[2918] = 7472;
         t[2920] = 7474;
         t[2921] = 7475;
         t[2922] = 7476;
         t[2924] = 7478;
         t[2925] = 7479;
         t[2926] = 7480;
         t[2928] = 7482;
         t[2929] = 7483;
         t[2930] = 7484;
         t[2932] = 7486;
         t[2933] = 7487;
         t[2934] = 7488;
         t[2936] = 7490;
         t[2937] = 7491;
         t[2938] = 7492;
         t[2940] = 7494;
         t[2941] = 7495;
         t[2942] = 7496;
         t[2944] = 7498;
         t[2946] = 7500;
         t[2948] = 7502;
         t[2950] = 7504;
         t[2951] = 7505;
         t[2952] = 7506;
         t[2954] = 7508;
         t[2955] = 7509;
         t[2956] = 7510;
         t[2958] = 7512;
         t[2959] = 7513;
         t[2960] = 7514;
         t[2962] = 7516;
         t[2963] = 7517;
         t[2964] = 7518;
         t[2966] = 7520;
         t[2967] = 7521;
         t[2968] = 7522;
         t[2970] = 7524;
         t[2971] = 7525;
         t[2972] = 7526;
         t[2974] = 7528;
         t[2975] = 7529;
         t[2976] = 7530;
         t[2978] = 1537;
         t[2979] = 1538;
         t[2980] = 1539;
         t[2982] = 1549;
         t[2983] = 1551;
         t[2984] = 1552;
         t[2986] = 1554;
         t[2987] = 1555;
         t[2988] = 1556;
         t[2990] = 1623;
         t[2991] = 1624;
         t[2995] = 1775;
         t[2999] = 1791;
         t[3002] = 64290;
         t[3003] = 64291;
         t[3004] = 64292;
         t[3006] = 64294;
         t[3007] = 64295;
         t[3008] = 64296;
         t[3011] = 1900;
         t[3014] = 8223;
         t[3015] = 8244;
         t[3017] = 7532;
         t[3018] = 7533;
         t[3019] = 7534;
         t[3075] = 7590;
         t[3076] = 7591;
         t[3079] = 7594;
         t[3080] = 7595;
         t[3083] = 7598;
         t[3084] = 7599;
         t[3087] = 7602;
         t[3088] = 7603;
         t[3091] = 7606;
         t[3092] = 7607;
         t[3095] = 7610;
         t[3096] = 7611;
         t[3099] = 7614;
         t[3100] = 7615;
         t[3103] = 7618;
         t[3104] = 7619;
         t[3107] = 8337;
         t[3108] = 8338;
         t[3116] = 1884;
         t[3119] = 1885;
         t[3120] = 1885;
         t[3123] = 1886;
         t[3124] = 1886;
         t[3127] = 1887;
         t[3128] = 1887;
         t[3131] = 1888;
         t[3132] = 1888;
         t[3135] = 1889;
         t[3136] = 1889;
         t[3139] = 1890;
         t[3140] = 1890;
         t[3143] = 1891;
         t[3144] = 1891;
         t[3147] = 1892;
         t[3148] = 1892;
         t[3153] = 580;
         t[3154] = 581;
         t[3157] = 584;
         t[3158] = 585;
         t[3161] = 588;
         t[3162] = 589;
         t[3165] = 891;
         t[3166] = 892;
         t[3169] = 1274;
         t[3170] = 1275;
         t[3173] = 1278;
         t[3174] = 1279;
         t[3181] = 7622;
         t[3182] = 7623;
         t[3282] = 11799;
         t[3316] = 578;
         t[3379] = 42785;
         t[3393] = 1159;
         t[3416] = 8377;
      });
      var getSupplementalGlyphMapForArialBlack = getLookupTableFactory(
         function (t) {
            t[227] = 322;
            t[264] = 261;
            t[291] = 346;
         },
      );
      var getSupplementalGlyphMapForCalibri = getLookupTableFactory(function (t) {
         t[1] = 32;
         t[4] = 65;
         t[5] = 192;
         t[6] = 193;
         t[9] = 196;
         t[17] = 66;
         t[18] = 67;
         t[21] = 268;
         t[24] = 68;
         t[28] = 69;
         t[29] = 200;
         t[30] = 201;
         t[32] = 282;
         t[38] = 70;
         t[39] = 71;
         t[44] = 72;
         t[47] = 73;
         t[48] = 204;
         t[49] = 205;
         t[58] = 74;
         t[60] = 75;
         t[62] = 76;
         t[68] = 77;
         t[69] = 78;
         t[75] = 79;
         t[76] = 210;
         t[80] = 214;
         t[87] = 80;
         t[89] = 81;
         t[90] = 82;
         t[92] = 344;
         t[94] = 83;
         t[97] = 352;
         t[100] = 84;
         t[104] = 85;
         t[109] = 220;
         t[115] = 86;
         t[116] = 87;
         t[121] = 88;
         t[122] = 89;
         t[124] = 221;
         t[127] = 90;
         t[129] = 381;
         t[258] = 97;
         t[259] = 224;
         t[260] = 225;
         t[263] = 228;
         t[268] = 261;
         t[271] = 98;
         t[272] = 99;
         t[273] = 263;
         t[275] = 269;
         t[282] = 100;
         t[286] = 101;
         t[287] = 232;
         t[288] = 233;
         t[290] = 283;
         t[295] = 281;
         t[296] = 102;
         t[336] = 103;
         t[346] = 104;
         t[349] = 105;
         t[350] = 236;
         t[351] = 237;
         t[361] = 106;
         t[364] = 107;
         t[367] = 108;
         t[371] = 322;
         t[373] = 109;
         t[374] = 110;
         t[381] = 111;
         t[382] = 242;
         t[383] = 243;
         t[386] = 246;
         t[393] = 112;
         t[395] = 113;
         t[396] = 114;
         t[398] = 345;
         t[400] = 115;
         t[401] = 347;
         t[403] = 353;
         t[410] = 116;
         t[437] = 117;
         t[442] = 252;
         t[448] = 118;
         t[449] = 119;
         t[454] = 120;
         t[455] = 121;
         t[457] = 253;
         t[460] = 122;
         t[462] = 382;
         t[463] = 380;
         t[853] = 44;
         t[855] = 58;
         t[856] = 46;
         t[876] = 47;
         t[878] = 45;
         t[882] = 45;
         t[894] = 40;
         t[895] = 41;
         t[896] = 91;
         t[897] = 93;
         t[923] = 64;
         t[1004] = 48;
         t[1005] = 49;
         t[1006] = 50;
         t[1007] = 51;
         t[1008] = 52;
         t[1009] = 53;
         t[1010] = 54;
         t[1011] = 55;
         t[1012] = 56;
         t[1013] = 57;
         t[1081] = 37;
         t[1085] = 43;
         t[1086] = 45;
      });
      function getStandardFontName(name) {
         var fontName = normalizeFontName(name);
         var stdFontMap = getStdFontMap();
         return stdFontMap[fontName];
      }
      function isKnownFontName(name) {
         var fontName = normalizeFontName(name);
         return !!(
            getStdFontMap()[fontName] ||
            getNonStdFontMap()[fontName] ||
            getSerifFonts()[fontName] ||
            getSymbolsFonts()[fontName]
         );
      } // CONCATENATED MODULE: ./src/core/to_unicode_map.js
      var ToUnicodeMap = /*#__PURE__*/ (function () {
         function ToUnicodeMap() {
            var cmap =
               arguments.length > 0 && arguments[0] !== undefined
                  ? arguments[0]
                  : [];
            _classCallCheck(this, ToUnicodeMap);
            this._map = cmap;
         }
         return _createClass(ToUnicodeMap, [
            {
               key: "length",
               get: function get() {
                  return this._map.length;
               },
            },
            {
               key: "forEach",
               value: function forEach(callback) {
                  for (var charCode in this._map) {
                     callback(charCode, this._map[charCode].charCodeAt(0));
                  }
               },
            },
            {
               key: "has",
               value: function has(i) {
                  return this._map[i] !== undefined;
               },
            },
            {
               key: "get",
               value: function get(i) {
                  return this._map[i];
               },
            },
            {
               key: "charCodeOf",
               value: function charCodeOf(value) {
                  var map = this._map;
                  if (map.length <= 0x10000) {
                     return map.indexOf(value);
                  }
                  for (var charCode in map) {
                     if (map[charCode] === value) {
                        return charCode | 0;
                     }
                  }
                  return -1;
               },
            },
            {
               key: "amend",
               value: function amend(map) {
                  for (var charCode in map) {
                     this._map[charCode] = map[charCode];
                  }
               },
            },
         ]);
      })();
      var IdentityToUnicodeMap = /*#__PURE__*/ (function () {
         function IdentityToUnicodeMap(firstChar, lastChar) {
            _classCallCheck(this, IdentityToUnicodeMap);
            this.firstChar = firstChar;
            this.lastChar = lastChar;
         }
         return _createClass(IdentityToUnicodeMap, [
            {
               key: "length",
               get: function get() {
                  return this.lastChar + 1 - this.firstChar;
               },
            },
            {
               key: "forEach",
               value: function forEach(callback) {
                  for (var i = this.firstChar, ii = this.lastChar; i <= ii; i++) {
                     callback(i, i);
                  }
               },
            },
            {
               key: "has",
               value: function has(i) {
                  return this.firstChar <= i && i <= this.lastChar;
               },
            },
            {
               key: "get",
               value: function get(i) {
                  if (this.firstChar <= i && i <= this.lastChar) {
                     return String.fromCharCode(i);
                  }
                  return undefined;
               },
            },
            {
               key: "charCodeOf",
               value: function charCodeOf(v) {
                  return Number.isInteger(v) &&
                  v >= this.firstChar &&
                  v <= this.lastChar
                     ? v
                     : -1;
               },
            },
            {
               key: "amend",
               value: function amend(map) {
                  unreachable("Should not call amend()");
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/cff_font.js
      var CFFFont = /*#__PURE__*/ (function () {
         function CFFFont(file, properties) {
            _classCallCheck(this, CFFFont);
            this.properties = properties;
            var parser = new CFFParser(file, properties, SEAC_ANALYSIS_ENABLED);
            this.cff = parser.parse();
            this.cff.duplicateFirstGlyph();
            var compiler = new CFFCompiler(this.cff);
            this.seacs = this.cff.seacs;
            try {
               this.data = compiler.compile();
            } catch (_unused5) {
               warn("Failed to compile font " + properties.loadedName);
               this.data = file;
            }
            this._createBuiltInEncoding();
         }
         return _createClass(CFFFont, [
            {
               key: "numGlyphs",
               get: function get() {
                  return this.cff.charStrings.count;
               },
            },
            {
               key: "getCharset",
               value: function getCharset() {
                  return this.cff.charset.charset;
               },
            },
            {
               key: "getGlyphMapping",
               value: function getGlyphMapping() {
                  var cff = this.cff;
                  var properties = this.properties;
                  var cidToGidMap = properties.cidToGidMap,
                     cMap = properties.cMap;
                  var charsets = cff.charset.charset;
                  var charCodeToGlyphId;
                  var glyphId;
                  if (properties.composite) {
                     var invCidToGidMap;
                     if (
                        (cidToGidMap === null || cidToGidMap === void 0
                           ? void 0
                           : cidToGidMap.length) > 0
                     ) {
                        invCidToGidMap = Object.create(null);
                        for (var i = 0, ii = cidToGidMap.length; i < ii; i++) {
                           var gid = cidToGidMap[i];
                           if (gid !== undefined) {
                              invCidToGidMap[gid] = i;
                           }
                        }
                     }
                     charCodeToGlyphId = Object.create(null);
                     var charCode;
                     if (cff.isCIDFont) {
                        for (glyphId = 0; glyphId < charsets.length; glyphId++) {
                           var _invCidToGidMap;
                           var cid = charsets[glyphId];
                           charCode = cMap.charCodeOf(cid);
                           if (
                              ((_invCidToGidMap = invCidToGidMap) === null ||
                              _invCidToGidMap === void 0
                                 ? void 0
                                 : _invCidToGidMap[charCode]) !== undefined
                           ) {
                              charCode = invCidToGidMap[charCode];
                           }
                           charCodeToGlyphId[charCode] = glyphId;
                        }
                     } else {
                        for (glyphId = 0; glyphId < cff.charStrings.count; glyphId++) {
                           charCode = cMap.charCodeOf(glyphId);
                           charCodeToGlyphId[charCode] = glyphId;
                        }
                     }
                     return charCodeToGlyphId;
                  }
                  var encoding = cff.encoding ? cff.encoding.encoding : null;
                  if (properties.isInternalFont) {
                     encoding = properties.defaultEncoding;
                  }
                  charCodeToGlyphId = type1FontGlyphMapping(
                     properties,
                     encoding,
                     charsets,
                  );
                  return charCodeToGlyphId;
               },
            },
            {
               key: "hasGlyphId",
               value: function hasGlyphId(id) {
                  return this.cff.hasGlyphId(id);
               },
            },
            {
               key: "_createBuiltInEncoding",
               value: function _createBuiltInEncoding() {
                  var _this$cff = this.cff,
                     charset = _this$cff.charset,
                     encoding = _this$cff.encoding;
                  if (!charset || !encoding) {
                     return;
                  }
                  var charsets = charset.charset,
                     encodings = encoding.encoding;
                  var map = [];
                  for (var charCode in encodings) {
                     var glyphId = encodings[charCode];
                     if (glyphId >= 0) {
                        var glyphName = charsets[glyphId];
                        if (glyphName) {
                           map[charCode] = glyphName;
                        }
                     }
                  }
                  if (map.length > 0) {
                     this.properties.builtInEncoding = map;
                  }
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/font_renderer.js
      function getUint32(data, offset) {
         return (
            ((data[offset] << 24) |
               (data[offset + 1] << 16) |
               (data[offset + 2] << 8) |
               data[offset + 3]) >>>
            0
         );
      }
      function getUint16(data, offset) {
         return (data[offset] << 8) | data[offset + 1];
      }
      function getInt16(data, offset) {
         return ((data[offset] << 24) | (data[offset + 1] << 16)) >> 16;
      }
      function getInt8(data, offset) {
         return (data[offset] << 24) >> 24;
      }
      function getFloat214(data, offset) {
         return getInt16(data, offset) / 16384;
      }
      function getSubroutineBias(subrs) {
         var numSubrs = subrs.length;
         var bias = 32768;
         if (numSubrs < 1240) {
            bias = 107;
         } else if (numSubrs < 33900) {
            bias = 1131;
         }
         return bias;
      }
      function parseCmap(data, start, end) {
         var offset =
            getUint16(data, start + 2) === 1
               ? getUint32(data, start + 8)
               : getUint32(data, start + 16);
         var format = getUint16(data, start + offset);
         var ranges, p, i;
         if (format === 4) {
            getUint16(data, start + offset + 2);
            var segCount = getUint16(data, start + offset + 6) >> 1;
            p = start + offset + 14;
            ranges = [];
            for (i = 0; i < segCount; i++, p += 2) {
               ranges[i] = { end: getUint16(data, p) };
            }
            p += 2;
            for (i = 0; i < segCount; i++, p += 2) {
               ranges[i].start = getUint16(data, p);
            }
            for (i = 0; i < segCount; i++, p += 2) {
               ranges[i].idDelta = getUint16(data, p);
            }
            for (i = 0; i < segCount; i++, p += 2) {
               var idOffset = getUint16(data, p);
               if (idOffset === 0) {
                  continue;
               }
               ranges[i].ids = [];
               for (
                  var j = 0, jj = ranges[i].end - ranges[i].start + 1;
                  j < jj;
                  j++
               ) {
                  ranges[i].ids[j] = getUint16(data, p + idOffset);
                  idOffset += 2;
               }
            }
            return ranges;
         } else if (format === 12) {
            var groups = getUint32(data, start + offset + 12);
            p = start + offset + 16;
            ranges = [];
            for (i = 0; i < groups; i++) {
               start = getUint32(data, p);
               ranges.push({
                  start: start,
                  end: getUint32(data, p + 4),
                  idDelta: getUint32(data, p + 8) - start,
               });
               p += 12;
            }
            return ranges;
         }
         throw new FormatError("unsupported cmap: ".concat(format));
      }
      function parseCff(data, start, end, seacAnalysisEnabled) {
         var _cff$topDict$privateD, _cff$globalSubrIndex;
         var properties = {};
         var parser = new CFFParser(
            new Stream(data, start, end - start),
            properties,
            seacAnalysisEnabled,
         );
         var cff = parser.parse();
         return {
            glyphs: cff.charStrings.objects,
            subrs:
               (_cff$topDict$privateD = cff.topDict.privateDict) === null ||
               _cff$topDict$privateD === void 0 ||
               (_cff$topDict$privateD = _cff$topDict$privateD.subrsIndex) === null ||
               _cff$topDict$privateD === void 0
                  ? void 0
                  : _cff$topDict$privateD.objects,
            gsubrs:
               (_cff$globalSubrIndex = cff.globalSubrIndex) === null ||
               _cff$globalSubrIndex === void 0
                  ? void 0
                  : _cff$globalSubrIndex.objects,
            isCFFCIDFont: cff.isCIDFont,
            fdSelect: cff.fdSelect,
            fdArray: cff.fdArray,
         };
      }
      function parseGlyfTable(glyf, loca, isGlyphLocationsLong) {
         var itemSize, itemDecode;
         if (isGlyphLocationsLong) {
            itemSize = 4;
            itemDecode = getUint32;
         } else {
            itemSize = 2;
            itemDecode = function itemDecode(data, offset) {
               return 2 * getUint16(data, offset);
            };
         }
         var glyphs = [];
         var startOffset = itemDecode(loca, 0);
         for (var j = itemSize; j < loca.length; j += itemSize) {
            var endOffset = itemDecode(loca, j);
            glyphs.push(glyf.subarray(startOffset, endOffset));
            startOffset = endOffset;
         }
         return glyphs;
      }
      function lookupCmap(ranges, unicode) {
         var code = unicode.codePointAt(0);
         var gid = 0,
            l = 0,
            r = ranges.length - 1;
         while (l < r) {
            var c = (l + r + 1) >> 1;
            if (code < ranges[c].start) {
               r = c - 1;
            } else {
               l = c;
            }
         }
         if (ranges[l].start <= code && code <= ranges[l].end) {
            gid =
               (ranges[l].idDelta +
                  (ranges[l].ids ? ranges[l].ids[code - ranges[l].start] : code)) &
               0xffff;
         }
         return { charCode: code, glyphId: gid };
      }
      function compileGlyf(code, cmds, font) {
         function moveTo(x, y) {
            cmds.add(FontRenderOps.MOVE_TO, [x, y]);
         }
         function lineTo(x, y) {
            cmds.add(FontRenderOps.LINE_TO, [x, y]);
         }
         function quadraticCurveTo(xa, ya, x, y) {
            cmds.add(FontRenderOps.QUADRATIC_CURVE_TO, [xa, ya, x, y]);
         }
         var i = 0;
         var numberOfContours = getInt16(code, i);
         var flags;
         var x = 0,
            y = 0;
         i += 10;
         if (numberOfContours < 0) {
            do {
               flags = getUint16(code, i);
               var glyphIndex = getUint16(code, i + 2);
               i += 4;
               var arg1 = void 0,
                  arg2 = void 0;
               if (flags & 0x01) {
                  if (flags & 0x02) {
                     arg1 = getInt16(code, i);
                     arg2 = getInt16(code, i + 2);
                  } else {
                     arg1 = getUint16(code, i);
                     arg2 = getUint16(code, i + 2);
                  }
                  i += 4;
               } else if (flags & 0x02) {
                  arg1 = getInt8(code, i++);
                  arg2 = getInt8(code, i++);
               } else {
                  arg1 = code[i++];
                  arg2 = code[i++];
               }
               if (flags & 0x02) {
                  x = arg1;
                  y = arg2;
               } else {
                  x = 0;
                  y = 0;
               }
               var scaleX = 1,
                  scaleY = 1,
                  scale01 = 0,
                  scale10 = 0;
               if (flags & 0x08) {
                  scaleX = scaleY = getFloat214(code, i);
                  i += 2;
               } else if (flags & 0x40) {
                  scaleX = getFloat214(code, i);
                  scaleY = getFloat214(code, i + 2);
                  i += 4;
               } else if (flags & 0x80) {
                  scaleX = getFloat214(code, i);
                  scale01 = getFloat214(code, i + 2);
                  scale10 = getFloat214(code, i + 4);
                  scaleY = getFloat214(code, i + 6);
                  i += 8;
               }
               var subglyph = font.glyphs[glyphIndex];
               if (subglyph) {
                  cmds.add(FontRenderOps.SAVE);
                  cmds.add(FontRenderOps.TRANSFORM, [
                     scaleX,
                     scale01,
                     scale10,
                     scaleY,
                     x,
                     y,
                  ]);
                  if (!(flags & 0x02)) {
                  }
                  compileGlyf(subglyph, cmds, font);
                  cmds.add(FontRenderOps.RESTORE);
               }
            } while (flags & 0x20);
         } else {
            var endPtsOfContours = [];
            var j, jj;
            for (j = 0; j < numberOfContours; j++) {
               endPtsOfContours.push(getUint16(code, i));
               i += 2;
            }
            var instructionLength = getUint16(code, i);
            i += 2 + instructionLength;
            var numberOfPoints = endPtsOfContours.at(-1) + 1;
            var points = [];
            while (points.length < numberOfPoints) {
               flags = code[i++];
               var repeat = 1;
               if (flags & 0x08) {
                  repeat += code[i++];
               }
               while (repeat-- > 0) {
                  points.push({ flags: flags });
               }
            }
            for (j = 0; j < numberOfPoints; j++) {
               switch (points[j].flags & 0x12) {
                  case 0x00:
                     x += getInt16(code, i);
                     i += 2;
                     break;
                  case 0x02:
                     x -= code[i++];
                     break;
                  case 0x12:
                     x += code[i++];
                     break;
               }
               points[j].x = x;
            }
            for (j = 0; j < numberOfPoints; j++) {
               switch (points[j].flags & 0x24) {
                  case 0x00:
                     y += getInt16(code, i);
                     i += 2;
                     break;
                  case 0x04:
                     y -= code[i++];
                     break;
                  case 0x24:
                     y += code[i++];
                     break;
               }
               points[j].y = y;
            }
            var startPoint = 0;
            for (i = 0; i < numberOfContours; i++) {
               var endPoint = endPtsOfContours[i];
               var contour = points.slice(startPoint, endPoint + 1);
               if (contour[0].flags & 1) {
                  contour.push(contour[0]);
               } else if (contour.at(-1).flags & 1) {
                  contour.unshift(contour.at(-1));
               } else {
                  var p = {
                     flags: 1,
                     x: (contour[0].x + contour.at(-1).x) / 2,
                     y: (contour[0].y + contour.at(-1).y) / 2,
                  };
                  contour.unshift(p);
                  contour.push(p);
               }
               moveTo(contour[0].x, contour[0].y);
               for (j = 1, jj = contour.length; j < jj; j++) {
                  if (contour[j].flags & 1) {
                     lineTo(contour[j].x, contour[j].y);
                  } else if (contour[j + 1].flags & 1) {
                     quadraticCurveTo(
                        contour[j].x,
                        contour[j].y,
                        contour[j + 1].x,
                        contour[j + 1].y,
                     );
                     j++;
                  } else {
                     quadraticCurveTo(
                        contour[j].x,
                        contour[j].y,
                        (contour[j].x + contour[j + 1].x) / 2,
                        (contour[j].y + contour[j + 1].y) / 2,
                     );
                  }
               }
               startPoint = endPoint + 1;
            }
         }
      }
      function compileCharString(charStringCode, cmds, font, glyphId) {
         function moveTo(x, y) {
            cmds.add(FontRenderOps.MOVE_TO, [x, y]);
         }
         function lineTo(x, y) {
            cmds.add(FontRenderOps.LINE_TO, [x, y]);
         }
         function bezierCurveTo(x1, y1, x2, y2, x, y) {
            cmds.add(FontRenderOps.BEZIER_CURVE_TO, [x1, y1, x2, y2, x, y]);
         }
         var stack = [];
         var x = 0,
            y = 0;
         var stems = 0;
         function parse(code) {
            var i = 0;
            while (i < code.length) {
               var stackClean = false;
               var v = code[i++];
               var xa = void 0,
                  xb = void 0,
                  ya = void 0,
                  yb = void 0,
                  y1 = void 0,
                  y2 = void 0,
                  y3 = void 0,
                  n = void 0,
                  subrCode = void 0;
               switch (v) {
                  case 1:
                     stems += stack.length >> 1;
                     stackClean = true;
                     break;
                  case 3:
                     stems += stack.length >> 1;
                     stackClean = true;
                     break;
                  case 4:
                     y += stack.pop();
                     moveTo(x, y);
                     stackClean = true;
                     break;
                  case 5:
                     while (stack.length > 0) {
                        x += stack.shift();
                        y += stack.shift();
                        lineTo(x, y);
                     }
                     break;
                  case 6:
                     while (stack.length > 0) {
                        x += stack.shift();
                        lineTo(x, y);
                        if (stack.length === 0) {
                           break;
                        }
                        y += stack.shift();
                        lineTo(x, y);
                     }
                     break;
                  case 7:
                     while (stack.length > 0) {
                        y += stack.shift();
                        lineTo(x, y);
                        if (stack.length === 0) {
                           break;
                        }
                        x += stack.shift();
                        lineTo(x, y);
                     }
                     break;
                  case 8:
                     while (stack.length > 0) {
                        xa = x + stack.shift();
                        ya = y + stack.shift();
                        xb = xa + stack.shift();
                        yb = ya + stack.shift();
                        x = xb + stack.shift();
                        y = yb + stack.shift();
                        bezierCurveTo(xa, ya, xb, yb, x, y);
                     }
                     break;
                  case 10:
                     n = stack.pop();
                     subrCode = null;
                     if (font.isCFFCIDFont) {
                        var fdIndex = font.fdSelect.getFDIndex(glyphId);
                        if (fdIndex >= 0 && fdIndex < font.fdArray.length) {
                           var _fontDict$privateDict;
                           var fontDict = font.fdArray[fdIndex];
                           var subrs = void 0;
                           if (
                              (_fontDict$privateDict = fontDict.privateDict) !== null &&
                              _fontDict$privateDict !== void 0 &&
                              _fontDict$privateDict.subrsIndex
                           ) {
                              subrs = fontDict.privateDict.subrsIndex.objects;
                           }
                           if (subrs) {
                              n += getSubroutineBias(subrs);
                              subrCode = subrs[n];
                           }
                        } else {
                           warn("Invalid fd index for glyph index.");
                        }
                     } else {
                        subrCode = font.subrs[n + font.subrsBias];
                     }
                     if (subrCode) {
                        parse(subrCode);
                     }
                     break;
                  case 11:
                     return;
                  case 12:
                     v = code[i++];
                     switch (v) {
                        case 34:
                           xa = x + stack.shift();
                           xb = xa + stack.shift();
                           y1 = y + stack.shift();
                           x = xb + stack.shift();
                           bezierCurveTo(xa, y, xb, y1, x, y1);
                           xa = x + stack.shift();
                           xb = xa + stack.shift();
                           x = xb + stack.shift();
                           bezierCurveTo(xa, y1, xb, y, x, y);
                           break;
                        case 35:
                           xa = x + stack.shift();
                           ya = y + stack.shift();
                           xb = xa + stack.shift();
                           yb = ya + stack.shift();
                           x = xb + stack.shift();
                           y = yb + stack.shift();
                           bezierCurveTo(xa, ya, xb, yb, x, y);
                           xa = x + stack.shift();
                           ya = y + stack.shift();
                           xb = xa + stack.shift();
                           yb = ya + stack.shift();
                           x = xb + stack.shift();
                           y = yb + stack.shift();
                           bezierCurveTo(xa, ya, xb, yb, x, y);
                           stack.pop();
                           break;
                        case 36:
                           xa = x + stack.shift();
                           y1 = y + stack.shift();
                           xb = xa + stack.shift();
                           y2 = y1 + stack.shift();
                           x = xb + stack.shift();
                           bezierCurveTo(xa, y1, xb, y2, x, y2);
                           xa = x + stack.shift();
                           xb = xa + stack.shift();
                           y3 = y2 + stack.shift();
                           x = xb + stack.shift();
                           bezierCurveTo(xa, y2, xb, y3, x, y);
                           break;
                        case 37:
                           var x0 = x,
                              y0 = y;
                           xa = x + stack.shift();
                           ya = y + stack.shift();
                           xb = xa + stack.shift();
                           yb = ya + stack.shift();
                           x = xb + stack.shift();
                           y = yb + stack.shift();
                           bezierCurveTo(xa, ya, xb, yb, x, y);
                           xa = x + stack.shift();
                           ya = y + stack.shift();
                           xb = xa + stack.shift();
                           yb = ya + stack.shift();
                           x = xb;
                           y = yb;
                           if (Math.abs(x - x0) > Math.abs(y - y0)) {
                              x += stack.shift();
                           } else {
                              y += stack.shift();
                           }
                           bezierCurveTo(xa, ya, xb, yb, x, y);
                           break;
                        default:
                           throw new FormatError("unknown operator: 12 ".concat(v));
                     }
                     break;
                  case 14:
                     if (stack.length >= 4) {
                        var achar = stack.pop();
                        var bchar = stack.pop();
                        y = stack.pop();
                        x = stack.pop();
                        cmds.add(FontRenderOps.SAVE);
                        cmds.add(FontRenderOps.TRANSLATE, [x, y]);
                        var cmap = lookupCmap(
                           font.cmap,
                           String.fromCharCode(
                              font.glyphNameMap[StandardEncoding[achar]],
                           ),
                        );
                        compileCharString(
                           font.glyphs[cmap.glyphId],
                           cmds,
                           font,
                           cmap.glyphId,
                        );
                        cmds.add(FontRenderOps.RESTORE);
                        cmap = lookupCmap(
                           font.cmap,
                           String.fromCharCode(
                              font.glyphNameMap[StandardEncoding[bchar]],
                           ),
                        );
                        compileCharString(
                           font.glyphs[cmap.glyphId],
                           cmds,
                           font,
                           cmap.glyphId,
                        );
                     }
                     return;
                  case 18:
                     stems += stack.length >> 1;
                     stackClean = true;
                     break;
                  case 19:
                     stems += stack.length >> 1;
                     i += (stems + 7) >> 3;
                     stackClean = true;
                     break;
                  case 20:
                     stems += stack.length >> 1;
                     i += (stems + 7) >> 3;
                     stackClean = true;
                     break;
                  case 21:
                     y += stack.pop();
                     x += stack.pop();
                     moveTo(x, y);
                     stackClean = true;
                     break;
                  case 22:
                     x += stack.pop();
                     moveTo(x, y);
                     stackClean = true;
                     break;
                  case 23:
                     stems += stack.length >> 1;
                     stackClean = true;
                     break;
                  case 24:
                     while (stack.length > 2) {
                        xa = x + stack.shift();
                        ya = y + stack.shift();
                        xb = xa + stack.shift();
                        yb = ya + stack.shift();
                        x = xb + stack.shift();
                        y = yb + stack.shift();
                        bezierCurveTo(xa, ya, xb, yb, x, y);
                     }
                     x += stack.shift();
                     y += stack.shift();
                     lineTo(x, y);
                     break;
                  case 25:
                     while (stack.length > 6) {
                        x += stack.shift();
                        y += stack.shift();
                        lineTo(x, y);
                     }
                     xa = x + stack.shift();
                     ya = y + stack.shift();
                     xb = xa + stack.shift();
                     yb = ya + stack.shift();
                     x = xb + stack.shift();
                     y = yb + stack.shift();
                     bezierCurveTo(xa, ya, xb, yb, x, y);
                     break;
                  case 26:
                     if (stack.length % 2) {
                        x += stack.shift();
                     }
                     while (stack.length > 0) {
                        xa = x;
                        ya = y + stack.shift();
                        xb = xa + stack.shift();
                        yb = ya + stack.shift();
                        x = xb;
                        y = yb + stack.shift();
                        bezierCurveTo(xa, ya, xb, yb, x, y);
                     }
                     break;
                  case 27:
                     if (stack.length % 2) {
                        y += stack.shift();
                     }
                     while (stack.length > 0) {
                        xa = x + stack.shift();
                        ya = y;
                        xb = xa + stack.shift();
                        yb = ya + stack.shift();
                        x = xb + stack.shift();
                        y = yb;
                        bezierCurveTo(xa, ya, xb, yb, x, y);
                     }
                     break;
                  case 28:
                     stack.push(((code[i] << 24) | (code[i + 1] << 16)) >> 16);
                     i += 2;
                     break;
                  case 29:
                     n = stack.pop() + font.gsubrsBias;
                     subrCode = font.gsubrs[n];
                     if (subrCode) {
                        parse(subrCode);
                     }
                     break;
                  case 30:
                     while (stack.length > 0) {
                        xa = x;
                        ya = y + stack.shift();
                        xb = xa + stack.shift();
                        yb = ya + stack.shift();
                        x = xb + stack.shift();
                        y = yb + (stack.length === 1 ? stack.shift() : 0);
                        bezierCurveTo(xa, ya, xb, yb, x, y);
                        if (stack.length === 0) {
                           break;
                        }
                        xa = x + stack.shift();
                        ya = y;
                        xb = xa + stack.shift();
                        yb = ya + stack.shift();
                        y = yb + stack.shift();
                        x = xb + (stack.length === 1 ? stack.shift() : 0);
                        bezierCurveTo(xa, ya, xb, yb, x, y);
                     }
                     break;
                  case 31:
                     while (stack.length > 0) {
                        xa = x + stack.shift();
                        ya = y;
                        xb = xa + stack.shift();
                        yb = ya + stack.shift();
                        y = yb + stack.shift();
                        x = xb + (stack.length === 1 ? stack.shift() : 0);
                        bezierCurveTo(xa, ya, xb, yb, x, y);
                        if (stack.length === 0) {
                           break;
                        }
                        xa = x;
                        ya = y + stack.shift();
                        xb = xa + stack.shift();
                        yb = ya + stack.shift();
                        x = xb + stack.shift();
                        y = yb + (stack.length === 1 ? stack.shift() : 0);
                        bezierCurveTo(xa, ya, xb, yb, x, y);
                     }
                     break;
                  default:
                     if (v < 32) {
                        throw new FormatError("unknown operator: ".concat(v));
                     }
                     if (v < 247) {
                        stack.push(v - 139);
                     } else if (v < 251) {
                        stack.push((v - 247) * 256 + code[i++] + 108);
                     } else if (v < 255) {
                        stack.push(-(v - 251) * 256 - code[i++] - 108);
                     } else {
                        stack.push(
                           ((code[i] << 24) |
                              (code[i + 1] << 16) |
                              (code[i + 2] << 8) |
                              code[i + 3]) /
                           65536,
                        );
                        i += 4;
                     }
                     break;
               }
               if (stackClean) {
                  stack.length = 0;
               }
            }
         }
         parse(charStringCode);
      }
      var NOOP = [];
      var Commands = /*#__PURE__*/ (function () {
         function Commands() {
            _classCallCheck(this, Commands);
            _defineProperty(this, "cmds", []);
         }
         return _createClass(Commands, [
            {
               key: "add",
               value: function add(cmd, args) {
                  if (args) {
                     if (!isNumberArray(args, null)) {
                        var _this$cmds;
                        warn(
                           'Commands.add - "'
                              .concat(cmd, '" has at least one non-number arg: "')
                              .concat(args, '".'),
                        );
                        var newArgs = args.map(function (arg) {
                           return typeof arg === "number" ? arg : 0;
                        });
                        (_this$cmds = this.cmds).push.apply(
                           _this$cmds,
                           [cmd].concat(_toConsumableArray(newArgs)),
                        );
                     } else {
                        var _this$cmds2;
                        (_this$cmds2 = this.cmds).push.apply(
                           _this$cmds2,
                           [cmd].concat(_toConsumableArray(args)),
                        );
                     }
                  } else {
                     this.cmds.push(cmd);
                  }
               },
            },
         ]);
      })();
      var CompiledFont = /*#__PURE__*/ (function () {
         function CompiledFont(fontMatrix) {
            _classCallCheck(this, CompiledFont);
            if (this.constructor === CompiledFont) {
               unreachable("Cannot initialize CompiledFont.");
            }
            this.fontMatrix = fontMatrix;
            this.compiledGlyphs = Object.create(null);
            this.compiledCharCodeToGlyphId = Object.create(null);
         }
         return _createClass(CompiledFont, [
            {
               key: "getPathJs",
               value: function getPathJs(unicode) {
                  var _this$compiledCharCod, _this$compiledCharCod2;
                  var _lookupCmap = lookupCmap(this.cmap, unicode),
                     charCode = _lookupCmap.charCode,
                     glyphId = _lookupCmap.glyphId;
                  var fn = this.compiledGlyphs[glyphId],
                     compileEx;
                  if (!fn) {
                     try {
                        fn = this.compileGlyph(this.glyphs[glyphId], glyphId);
                     } catch (ex) {
                        fn = NOOP;
                        compileEx = ex;
                     }
                     this.compiledGlyphs[glyphId] = fn;
                  }
                  (_this$compiledCharCod2 = (_this$compiledCharCod =
                     this.compiledCharCodeToGlyphId)[charCode]) !== null &&
                  _this$compiledCharCod2 !== void 0
                     ? _this$compiledCharCod2
                     : (_this$compiledCharCod[charCode] = glyphId);
                  if (compileEx) {
                     throw compileEx;
                  }
                  return fn;
               },
            },
            {
               key: "compileGlyph",
               value: function compileGlyph(code, glyphId) {
                  if (!code || code.length === 0 || code[0] === 14) {
                     return NOOP;
                  }
                  var fontMatrix = this.fontMatrix;
                  if (this.isCFFCIDFont) {
                     var fdIndex = this.fdSelect.getFDIndex(glyphId);
                     if (fdIndex >= 0 && fdIndex < this.fdArray.length) {
                        var fontDict = this.fdArray[fdIndex];
                        fontMatrix =
                           fontDict.getByName("FontMatrix") || FONT_IDENTITY_MATRIX;
                     } else {
                        warn("Invalid fd index for glyph index.");
                     }
                  }
                  var cmds = new Commands();
                  cmds.add(FontRenderOps.SAVE);
                  cmds.add(FontRenderOps.TRANSFORM, fontMatrix.slice());
                  cmds.add(FontRenderOps.SCALE);
                  this.compileGlyphImpl(code, cmds, glyphId);
                  cmds.add(FontRenderOps.RESTORE);
                  return cmds.cmds;
               },
            },
            {
               key: "compileGlyphImpl",
               value: function compileGlyphImpl() {
                  unreachable("Children classes should implement this.");
               },
            },
            {
               key: "hasBuiltPath",
               value: function hasBuiltPath(unicode) {
                  var _lookupCmap2 = lookupCmap(this.cmap, unicode),
                     charCode = _lookupCmap2.charCode,
                     glyphId = _lookupCmap2.glyphId;
                  return (
                     this.compiledGlyphs[glyphId] !== undefined &&
                     this.compiledCharCodeToGlyphId[charCode] !== undefined
                  );
               },
            },
         ]);
      })();
      var TrueTypeCompiled = /*#__PURE__*/ (function (_CompiledFont) {
         function TrueTypeCompiled(glyphs, cmap, fontMatrix) {
            var _this30;
            _classCallCheck(this, TrueTypeCompiled);
            _this30 = _callSuper(this, TrueTypeCompiled, [
               fontMatrix || [0.000488, 0, 0, 0.000488, 0, 0],
            ]);
            _this30.glyphs = glyphs;
            _this30.cmap = cmap;
            return _this30;
         }
         _inherits(TrueTypeCompiled, _CompiledFont);
         return _createClass(TrueTypeCompiled, [
            {
               key: "compileGlyphImpl",
               value: function compileGlyphImpl(code, cmds) {
                  compileGlyf(code, cmds, this);
               },
            },
         ]);
      })(CompiledFont);
      var Type2Compiled = /*#__PURE__*/ (function (_CompiledFont2) {
         function Type2Compiled(cffInfo, cmap, fontMatrix, glyphNameMap) {
            var _this31;
            _classCallCheck(this, Type2Compiled);
            _this31 = _callSuper(this, Type2Compiled, [
               fontMatrix || [0.001, 0, 0, 0.001, 0, 0],
            ]);
            _this31.glyphs = cffInfo.glyphs;
            _this31.gsubrs = cffInfo.gsubrs || [];
            _this31.subrs = cffInfo.subrs || [];
            _this31.cmap = cmap;
            _this31.glyphNameMap = glyphNameMap || getGlyphsUnicode();
            _this31.gsubrsBias = getSubroutineBias(_this31.gsubrs);
            _this31.subrsBias = getSubroutineBias(_this31.subrs);
            _this31.isCFFCIDFont = cffInfo.isCFFCIDFont;
            _this31.fdSelect = cffInfo.fdSelect;
            _this31.fdArray = cffInfo.fdArray;
            return _this31;
         }
         _inherits(Type2Compiled, _CompiledFont2);
         return _createClass(Type2Compiled, [
            {
               key: "compileGlyphImpl",
               value: function compileGlyphImpl(code, cmds, glyphId) {
                  compileCharString(code, cmds, this, glyphId);
               },
            },
         ]);
      })(CompiledFont);
      var FontRendererFactory = /*#__PURE__*/ (function () {
         function FontRendererFactory() {
            _classCallCheck(this, FontRendererFactory);
         }
         return _createClass(FontRendererFactory, null, [
            {
               key: "create",
               value: function create(font, seacAnalysisEnabled) {
                  var data = new Uint8Array(font.data);
                  var cmap, glyf, loca, cff, indexToLocFormat, unitsPerEm;
                  var numTables = getUint16(data, 4);
                  for (var i = 0, p = 12; i < numTables; i++, p += 16) {
                     var tag = bytesToString(data.subarray(p, p + 4));
                     var offset = getUint32(data, p + 8);
                     var length = getUint32(data, p + 12);
                     switch (tag) {
                        case "cmap":
                           cmap = parseCmap(data, offset, offset + length);
                           break;
                        case "glyf":
                           glyf = data.subarray(offset, offset + length);
                           break;
                        case "loca":
                           loca = data.subarray(offset, offset + length);
                           break;
                        case "head":
                           unitsPerEm = getUint16(data, offset + 18);
                           indexToLocFormat = getUint16(data, offset + 50);
                           break;
                        case "CFF ":
                           cff = parseCff(
                              data,
                              offset,
                              offset + length,
                              seacAnalysisEnabled,
                           );
                           break;
                     }
                  }
                  if (glyf) {
                     var fontMatrix = !unitsPerEm
                        ? font.fontMatrix
                        : [1 / unitsPerEm, 0, 0, 1 / unitsPerEm, 0, 0];
                     return new TrueTypeCompiled(
                        parseGlyfTable(glyf, loca, indexToLocFormat),
                        cmap,
                        fontMatrix,
                     );
                  }
                  return new Type2Compiled(
                     cff,
                     cmap,
                     font.fontMatrix,
                     font.glyphNameMap,
                  );
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/metrics.js
      var getMetrics = getLookupTableFactory(function (t) {
         t.Courier = 600;
         t["Courier-Bold"] = 600;
         t["Courier-BoldOblique"] = 600;
         t["Courier-Oblique"] = 600;
         t.Helvetica = getLookupTableFactory(function (t) {
            t.space = 278;
            t.exclam = 278;
            t.quotedbl = 355;
            t.numbersign = 556;
            t.dollar = 556;
            t.percent = 889;
            t.ampersand = 667;
            t.quoteright = 222;
            t.parenleft = 333;
            t.parenright = 333;
            t.asterisk = 389;
            t.plus = 584;
            t.comma = 278;
            t.hyphen = 333;
            t.period = 278;
            t.slash = 278;
            t.zero = 556;
            t.one = 556;
            t.two = 556;
            t.three = 556;
            t.four = 556;
            t.five = 556;
            t.six = 556;
            t.seven = 556;
            t.eight = 556;
            t.nine = 556;
            t.colon = 278;
            t.semicolon = 278;
            t.less = 584;
            t.equal = 584;
            t.greater = 584;
            t.question = 556;
            t.at = 1015;
            t.A = 667;
            t.B = 667;
            t.C = 722;
            t.D = 722;
            t.E = 667;
            t.F = 611;
            t.G = 778;
            t.H = 722;
            t.I = 278;
            t.J = 500;
            t.K = 667;
            t.L = 556;
            t.M = 833;
            t.N = 722;
            t.O = 778;
            t.P = 667;
            t.Q = 778;
            t.R = 722;
            t.S = 667;
            t.T = 611;
            t.U = 722;
            t.V = 667;
            t.W = 944;
            t.X = 667;
            t.Y = 667;
            t.Z = 611;
            t.bracketleft = 278;
            t.backslash = 278;
            t.bracketright = 278;
            t.asciicircum = 469;
            t.underscore = 556;
            t.quoteleft = 222;
            t.a = 556;
            t.b = 556;
            t.c = 500;
            t.d = 556;
            t.e = 556;
            t.f = 278;
            t.g = 556;
            t.h = 556;
            t.i = 222;
            t.j = 222;
            t.k = 500;
            t.l = 222;
            t.m = 833;
            t.n = 556;
            t.o = 556;
            t.p = 556;
            t.q = 556;
            t.r = 333;
            t.s = 500;
            t.t = 278;
            t.u = 556;
            t.v = 500;
            t.w = 722;
            t.x = 500;
            t.y = 500;
            t.z = 500;
            t.braceleft = 334;
            t.bar = 260;
            t.braceright = 334;
            t.asciitilde = 584;
            t.exclamdown = 333;
            t.cent = 556;
            t.sterling = 556;
            t.fraction = 167;
            t.yen = 556;
            t.florin = 556;
            t.section = 556;
            t.currency = 556;
            t.quotesingle = 191;
            t.quotedblleft = 333;
            t.guillemotleft = 556;
            t.guilsinglleft = 333;
            t.guilsinglright = 333;
            t.fi = 500;
            t.fl = 500;
            t.endash = 556;
            t.dagger = 556;
            t.daggerdbl = 556;
            t.periodcentered = 278;
            t.paragraph = 537;
            t.bullet = 350;
            t.quotesinglbase = 222;
            t.quotedblbase = 333;
            t.quotedblright = 333;
            t.guillemotright = 556;
            t.ellipsis = 1000;
            t.perthousand = 1000;
            t.questiondown = 611;
            t.grave = 333;
            t.acute = 333;
            t.circumflex = 333;
            t.tilde = 333;
            t.macron = 333;
            t.breve = 333;
            t.dotaccent = 333;
            t.dieresis = 333;
            t.ring = 333;
            t.cedilla = 333;
            t.hungarumlaut = 333;
            t.ogonek = 333;
            t.caron = 333;
            t.emdash = 1000;
            t.AE = 1000;
            t.ordfeminine = 370;
            t.Lslash = 556;
            t.Oslash = 778;
            t.OE = 1000;
            t.ordmasculine = 365;
            t.ae = 889;
            t.dotlessi = 278;
            t.lslash = 222;
            t.oslash = 611;
            t.oe = 944;
            t.germandbls = 611;
            t.Idieresis = 278;
            t.eacute = 556;
            t.abreve = 556;
            t.uhungarumlaut = 556;
            t.ecaron = 556;
            t.Ydieresis = 667;
            t.divide = 584;
            t.Yacute = 667;
            t.Acircumflex = 667;
            t.aacute = 556;
            t.Ucircumflex = 722;
            t.yacute = 500;
            t.scommaaccent = 500;
            t.ecircumflex = 556;
            t.Uring = 722;
            t.Udieresis = 722;
            t.aogonek = 556;
            t.Uacute = 722;
            t.uogonek = 556;
            t.Edieresis = 667;
            t.Dcroat = 722;
            t.commaaccent = 250;
            t.copyright = 737;
            t.Emacron = 667;
            t.ccaron = 500;
            t.aring = 556;
            t.Ncommaaccent = 722;
            t.lacute = 222;
            t.agrave = 556;
            t.Tcommaaccent = 611;
            t.Cacute = 722;
            t.atilde = 556;
            t.Edotaccent = 667;
            t.scaron = 500;
            t.scedilla = 500;
            t.iacute = 278;
            t.lozenge = 471;
            t.Rcaron = 722;
            t.Gcommaaccent = 778;
            t.ucircumflex = 556;
            t.acircumflex = 556;
            t.Amacron = 667;
            t.rcaron = 333;
            t.ccedilla = 500;
            t.Zdotaccent = 611;
            t.Thorn = 667;
            t.Omacron = 778;
            t.Racute = 722;
            t.Sacute = 667;
            t.dcaron = 643;
            t.Umacron = 722;
            t.uring = 556;
            t.threesuperior = 333;
            t.Ograve = 778;
            t.Agrave = 667;
            t.Abreve = 667;
            t.multiply = 584;
            t.uacute = 556;
            t.Tcaron = 611;
            t.partialdiff = 476;
            t.ydieresis = 500;
            t.Nacute = 722;
            t.icircumflex = 278;
            t.Ecircumflex = 667;
            t.adieresis = 556;
            t.edieresis = 556;
            t.cacute = 500;
            t.nacute = 556;
            t.umacron = 556;
            t.Ncaron = 722;
            t.Iacute = 278;
            t.plusminus = 584;
            t.brokenbar = 260;
            t.registered = 737;
            t.Gbreve = 778;
            t.Idotaccent = 278;
            t.summation = 600;
            t.Egrave = 667;
            t.racute = 333;
            t.omacron = 556;
            t.Zacute = 611;
            t.Zcaron = 611;
            t.greaterequal = 549;
            t.Eth = 722;
            t.Ccedilla = 722;
            t.lcommaaccent = 222;
            t.tcaron = 317;
            t.eogonek = 556;
            t.Uogonek = 722;
            t.Aacute = 667;
            t.Adieresis = 667;
            t.egrave = 556;
            t.zacute = 500;
            t.iogonek = 222;
            t.Oacute = 778;
            t.oacute = 556;
            t.amacron = 556;
            t.sacute = 500;
            t.idieresis = 278;
            t.Ocircumflex = 778;
            t.Ugrave = 722;
            t.Delta = 612;
            t.thorn = 556;
            t.twosuperior = 333;
            t.Odieresis = 778;
            t.mu = 556;
            t.igrave = 278;
            t.ohungarumlaut = 556;
            t.Eogonek = 667;
            t.dcroat = 556;
            t.threequarters = 834;
            t.Scedilla = 667;
            t.lcaron = 299;
            t.Kcommaaccent = 667;
            t.Lacute = 556;
            t.trademark = 1000;
            t.edotaccent = 556;
            t.Igrave = 278;
            t.Imacron = 278;
            t.Lcaron = 556;
            t.onehalf = 834;
            t.lessequal = 549;
            t.ocircumflex = 556;
            t.ntilde = 556;
            t.Uhungarumlaut = 722;
            t.Eacute = 667;
            t.emacron = 556;
            t.gbreve = 556;
            t.onequarter = 834;
            t.Scaron = 667;
            t.Scommaaccent = 667;
            t.Ohungarumlaut = 778;
            t.degree = 400;
            t.ograve = 556;
            t.Ccaron = 722;
            t.ugrave = 556;
            t.radical = 453;
            t.Dcaron = 722;
            t.rcommaaccent = 333;
            t.Ntilde = 722;
            t.otilde = 556;
            t.Rcommaaccent = 722;
            t.Lcommaaccent = 556;
            t.Atilde = 667;
            t.Aogonek = 667;
            t.Aring = 667;
            t.Otilde = 778;
            t.zdotaccent = 500;
            t.Ecaron = 667;
            t.Iogonek = 278;
            t.kcommaaccent = 500;
            t.minus = 584;
            t.Icircumflex = 278;
            t.ncaron = 556;
            t.tcommaaccent = 278;
            t.logicalnot = 584;
            t.odieresis = 556;
            t.udieresis = 556;
            t.notequal = 549;
            t.gcommaaccent = 556;
            t.eth = 556;
            t.zcaron = 500;
            t.ncommaaccent = 556;
            t.onesuperior = 333;
            t.imacron = 278;
            t.Euro = 556;
         });
         t["Helvetica-Bold"] = getLookupTableFactory(function (t) {
            t.space = 278;
            t.exclam = 333;
            t.quotedbl = 474;
            t.numbersign = 556;
            t.dollar = 556;
            t.percent = 889;
            t.ampersand = 722;
            t.quoteright = 278;
            t.parenleft = 333;
            t.parenright = 333;
            t.asterisk = 389;
            t.plus = 584;
            t.comma = 278;
            t.hyphen = 333;
            t.period = 278;
            t.slash = 278;
            t.zero = 556;
            t.one = 556;
            t.two = 556;
            t.three = 556;
            t.four = 556;
            t.five = 556;
            t.six = 556;
            t.seven = 556;
            t.eight = 556;
            t.nine = 556;
            t.colon = 333;
            t.semicolon = 333;
            t.less = 584;
            t.equal = 584;
            t.greater = 584;
            t.question = 611;
            t.at = 975;
            t.A = 722;
            t.B = 722;
            t.C = 722;
            t.D = 722;
            t.E = 667;
            t.F = 611;
            t.G = 778;
            t.H = 722;
            t.I = 278;
            t.J = 556;
            t.K = 722;
            t.L = 611;
            t.M = 833;
            t.N = 722;
            t.O = 778;
            t.P = 667;
            t.Q = 778;
            t.R = 722;
            t.S = 667;
            t.T = 611;
            t.U = 722;
            t.V = 667;
            t.W = 944;
            t.X = 667;
            t.Y = 667;
            t.Z = 611;
            t.bracketleft = 333;
            t.backslash = 278;
            t.bracketright = 333;
            t.asciicircum = 584;
            t.underscore = 556;
            t.quoteleft = 278;
            t.a = 556;
            t.b = 611;
            t.c = 556;
            t.d = 611;
            t.e = 556;
            t.f = 333;
            t.g = 611;
            t.h = 611;
            t.i = 278;
            t.j = 278;
            t.k = 556;
            t.l = 278;
            t.m = 889;
            t.n = 611;
            t.o = 611;
            t.p = 611;
            t.q = 611;
            t.r = 389;
            t.s = 556;
            t.t = 333;
            t.u = 611;
            t.v = 556;
            t.w = 778;
            t.x = 556;
            t.y = 556;
            t.z = 500;
            t.braceleft = 389;
            t.bar = 280;
            t.braceright = 389;
            t.asciitilde = 584;
            t.exclamdown = 333;
            t.cent = 556;
            t.sterling = 556;
            t.fraction = 167;
            t.yen = 556;
            t.florin = 556;
            t.section = 556;
            t.currency = 556;
            t.quotesingle = 238;
            t.quotedblleft = 500;
            t.guillemotleft = 556;
            t.guilsinglleft = 333;
            t.guilsinglright = 333;
            t.fi = 611;
            t.fl = 611;
            t.endash = 556;
            t.dagger = 556;
            t.daggerdbl = 556;
            t.periodcentered = 278;
            t.paragraph = 556;
            t.bullet = 350;
            t.quotesinglbase = 278;
            t.quotedblbase = 500;
            t.quotedblright = 500;
            t.guillemotright = 556;
            t.ellipsis = 1000;
            t.perthousand = 1000;
            t.questiondown = 611;
            t.grave = 333;
            t.acute = 333;
            t.circumflex = 333;
            t.tilde = 333;
            t.macron = 333;
            t.breve = 333;
            t.dotaccent = 333;
            t.dieresis = 333;
            t.ring = 333;
            t.cedilla = 333;
            t.hungarumlaut = 333;
            t.ogonek = 333;
            t.caron = 333;
            t.emdash = 1000;
            t.AE = 1000;
            t.ordfeminine = 370;
            t.Lslash = 611;
            t.Oslash = 778;
            t.OE = 1000;
            t.ordmasculine = 365;
            t.ae = 889;
            t.dotlessi = 278;
            t.lslash = 278;
            t.oslash = 611;
            t.oe = 944;
            t.germandbls = 611;
            t.Idieresis = 278;
            t.eacute = 556;
            t.abreve = 556;
            t.uhungarumlaut = 611;
            t.ecaron = 556;
            t.Ydieresis = 667;
            t.divide = 584;
            t.Yacute = 667;
            t.Acircumflex = 722;
            t.aacute = 556;
            t.Ucircumflex = 722;
            t.yacute = 556;
            t.scommaaccent = 556;
            t.ecircumflex = 556;
            t.Uring = 722;
            t.Udieresis = 722;
            t.aogonek = 556;
            t.Uacute = 722;
            t.uogonek = 611;
            t.Edieresis = 667;
            t.Dcroat = 722;
            t.commaaccent = 250;
            t.copyright = 737;
            t.Emacron = 667;
            t.ccaron = 556;
            t.aring = 556;
            t.Ncommaaccent = 722;
            t.lacute = 278;
            t.agrave = 556;
            t.Tcommaaccent = 611;
            t.Cacute = 722;
            t.atilde = 556;
            t.Edotaccent = 667;
            t.scaron = 556;
            t.scedilla = 556;
            t.iacute = 278;
            t.lozenge = 494;
            t.Rcaron = 722;
            t.Gcommaaccent = 778;
            t.ucircumflex = 611;
            t.acircumflex = 556;
            t.Amacron = 722;
            t.rcaron = 389;
            t.ccedilla = 556;
            t.Zdotaccent = 611;
            t.Thorn = 667;
            t.Omacron = 778;
            t.Racute = 722;
            t.Sacute = 667;
            t.dcaron = 743;
            t.Umacron = 722;
            t.uring = 611;
            t.threesuperior = 333;
            t.Ograve = 778;
            t.Agrave = 722;
            t.Abreve = 722;
            t.multiply = 584;
            t.uacute = 611;
            t.Tcaron = 611;
            t.partialdiff = 494;
            t.ydieresis = 556;
            t.Nacute = 722;
            t.icircumflex = 278;
            t.Ecircumflex = 667;
            t.adieresis = 556;
            t.edieresis = 556;
            t.cacute = 556;
            t.nacute = 611;
            t.umacron = 611;
            t.Ncaron = 722;
            t.Iacute = 278;
            t.plusminus = 584;
            t.brokenbar = 280;
            t.registered = 737;
            t.Gbreve = 778;
            t.Idotaccent = 278;
            t.summation = 600;
            t.Egrave = 667;
            t.racute = 389;
            t.omacron = 611;
            t.Zacute = 611;
            t.Zcaron = 611;
            t.greaterequal = 549;
            t.Eth = 722;
            t.Ccedilla = 722;
            t.lcommaaccent = 278;
            t.tcaron = 389;
            t.eogonek = 556;
            t.Uogonek = 722;
            t.Aacute = 722;
            t.Adieresis = 722;
            t.egrave = 556;
            t.zacute = 500;
            t.iogonek = 278;
            t.Oacute = 778;
            t.oacute = 611;
            t.amacron = 556;
            t.sacute = 556;
            t.idieresis = 278;
            t.Ocircumflex = 778;
            t.Ugrave = 722;
            t.Delta = 612;
            t.thorn = 611;
            t.twosuperior = 333;
            t.Odieresis = 778;
            t.mu = 611;
            t.igrave = 278;
            t.ohungarumlaut = 611;
            t.Eogonek = 667;
            t.dcroat = 611;
            t.threequarters = 834;
            t.Scedilla = 667;
            t.lcaron = 400;
            t.Kcommaaccent = 722;
            t.Lacute = 611;
            t.trademark = 1000;
            t.edotaccent = 556;
            t.Igrave = 278;
            t.Imacron = 278;
            t.Lcaron = 611;
            t.onehalf = 834;
            t.lessequal = 549;
            t.ocircumflex = 611;
            t.ntilde = 611;
            t.Uhungarumlaut = 722;
            t.Eacute = 667;
            t.emacron = 556;
            t.gbreve = 611;
            t.onequarter = 834;
            t.Scaron = 667;
            t.Scommaaccent = 667;
            t.Ohungarumlaut = 778;
            t.degree = 400;
            t.ograve = 611;
            t.Ccaron = 722;
            t.ugrave = 611;
            t.radical = 549;
            t.Dcaron = 722;
            t.rcommaaccent = 389;
            t.Ntilde = 722;
            t.otilde = 611;
            t.Rcommaaccent = 722;
            t.Lcommaaccent = 611;
            t.Atilde = 722;
            t.Aogonek = 722;
            t.Aring = 722;
            t.Otilde = 778;
            t.zdotaccent = 500;
            t.Ecaron = 667;
            t.Iogonek = 278;
            t.kcommaaccent = 556;
            t.minus = 584;
            t.Icircumflex = 278;
            t.ncaron = 611;
            t.tcommaaccent = 333;
            t.logicalnot = 584;
            t.odieresis = 611;
            t.udieresis = 611;
            t.notequal = 549;
            t.gcommaaccent = 611;
            t.eth = 611;
            t.zcaron = 500;
            t.ncommaaccent = 611;
            t.onesuperior = 333;
            t.imacron = 278;
            t.Euro = 556;
         });
         t["Helvetica-BoldOblique"] = getLookupTableFactory(function (t) {
            t.space = 278;
            t.exclam = 333;
            t.quotedbl = 474;
            t.numbersign = 556;
            t.dollar = 556;
            t.percent = 889;
            t.ampersand = 722;
            t.quoteright = 278;
            t.parenleft = 333;
            t.parenright = 333;
            t.asterisk = 389;
            t.plus = 584;
            t.comma = 278;
            t.hyphen = 333;
            t.period = 278;
            t.slash = 278;
            t.zero = 556;
            t.one = 556;
            t.two = 556;
            t.three = 556;
            t.four = 556;
            t.five = 556;
            t.six = 556;
            t.seven = 556;
            t.eight = 556;
            t.nine = 556;
            t.colon = 333;
            t.semicolon = 333;
            t.less = 584;
            t.equal = 584;
            t.greater = 584;
            t.question = 611;
            t.at = 975;
            t.A = 722;
            t.B = 722;
            t.C = 722;
            t.D = 722;
            t.E = 667;
            t.F = 611;
            t.G = 778;
            t.H = 722;
            t.I = 278;
            t.J = 556;
            t.K = 722;
            t.L = 611;
            t.M = 833;
            t.N = 722;
            t.O = 778;
            t.P = 667;
            t.Q = 778;
            t.R = 722;
            t.S = 667;
            t.T = 611;
            t.U = 722;
            t.V = 667;
            t.W = 944;
            t.X = 667;
            t.Y = 667;
            t.Z = 611;
            t.bracketleft = 333;
            t.backslash = 278;
            t.bracketright = 333;
            t.asciicircum = 584;
            t.underscore = 556;
            t.quoteleft = 278;
            t.a = 556;
            t.b = 611;
            t.c = 556;
            t.d = 611;
            t.e = 556;
            t.f = 333;
            t.g = 611;
            t.h = 611;
            t.i = 278;
            t.j = 278;
            t.k = 556;
            t.l = 278;
            t.m = 889;
            t.n = 611;
            t.o = 611;
            t.p = 611;
            t.q = 611;
            t.r = 389;
            t.s = 556;
            t.t = 333;
            t.u = 611;
            t.v = 556;
            t.w = 778;
            t.x = 556;
            t.y = 556;
            t.z = 500;
            t.braceleft = 389;
            t.bar = 280;
            t.braceright = 389;
            t.asciitilde = 584;
            t.exclamdown = 333;
            t.cent = 556;
            t.sterling = 556;
            t.fraction = 167;
            t.yen = 556;
            t.florin = 556;
            t.section = 556;
            t.currency = 556;
            t.quotesingle = 238;
            t.quotedblleft = 500;
            t.guillemotleft = 556;
            t.guilsinglleft = 333;
            t.guilsinglright = 333;
            t.fi = 611;
            t.fl = 611;
            t.endash = 556;
            t.dagger = 556;
            t.daggerdbl = 556;
            t.periodcentered = 278;
            t.paragraph = 556;
            t.bullet = 350;
            t.quotesinglbase = 278;
            t.quotedblbase = 500;
            t.quotedblright = 500;
            t.guillemotright = 556;
            t.ellipsis = 1000;
            t.perthousand = 1000;
            t.questiondown = 611;
            t.grave = 333;
            t.acute = 333;
            t.circumflex = 333;
            t.tilde = 333;
            t.macron = 333;
            t.breve = 333;
            t.dotaccent = 333;
            t.dieresis = 333;
            t.ring = 333;
            t.cedilla = 333;
            t.hungarumlaut = 333;
            t.ogonek = 333;
            t.caron = 333;
            t.emdash = 1000;
            t.AE = 1000;
            t.ordfeminine = 370;
            t.Lslash = 611;
            t.Oslash = 778;
            t.OE = 1000;
            t.ordmasculine = 365;
            t.ae = 889;
            t.dotlessi = 278;
            t.lslash = 278;
            t.oslash = 611;
            t.oe = 944;
            t.germandbls = 611;
            t.Idieresis = 278;
            t.eacute = 556;
            t.abreve = 556;
            t.uhungarumlaut = 611;
            t.ecaron = 556;
            t.Ydieresis = 667;
            t.divide = 584;
            t.Yacute = 667;
            t.Acircumflex = 722;
            t.aacute = 556;
            t.Ucircumflex = 722;
            t.yacute = 556;
            t.scommaaccent = 556;
            t.ecircumflex = 556;
            t.Uring = 722;
            t.Udieresis = 722;
            t.aogonek = 556;
            t.Uacute = 722;
            t.uogonek = 611;
            t.Edieresis = 667;
            t.Dcroat = 722;
            t.commaaccent = 250;
            t.copyright = 737;
            t.Emacron = 667;
            t.ccaron = 556;
            t.aring = 556;
            t.Ncommaaccent = 722;
            t.lacute = 278;
            t.agrave = 556;
            t.Tcommaaccent = 611;
            t.Cacute = 722;
            t.atilde = 556;
            t.Edotaccent = 667;
            t.scaron = 556;
            t.scedilla = 556;
            t.iacute = 278;
            t.lozenge = 494;
            t.Rcaron = 722;
            t.Gcommaaccent = 778;
            t.ucircumflex = 611;
            t.acircumflex = 556;
            t.Amacron = 722;
            t.rcaron = 389;
            t.ccedilla = 556;
            t.Zdotaccent = 611;
            t.Thorn = 667;
            t.Omacron = 778;
            t.Racute = 722;
            t.Sacute = 667;
            t.dcaron = 743;
            t.Umacron = 722;
            t.uring = 611;
            t.threesuperior = 333;
            t.Ograve = 778;
            t.Agrave = 722;
            t.Abreve = 722;
            t.multiply = 584;
            t.uacute = 611;
            t.Tcaron = 611;
            t.partialdiff = 494;
            t.ydieresis = 556;
            t.Nacute = 722;
            t.icircumflex = 278;
            t.Ecircumflex = 667;
            t.adieresis = 556;
            t.edieresis = 556;
            t.cacute = 556;
            t.nacute = 611;
            t.umacron = 611;
            t.Ncaron = 722;
            t.Iacute = 278;
            t.plusminus = 584;
            t.brokenbar = 280;
            t.registered = 737;
            t.Gbreve = 778;
            t.Idotaccent = 278;
            t.summation = 600;
            t.Egrave = 667;
            t.racute = 389;
            t.omacron = 611;
            t.Zacute = 611;
            t.Zcaron = 611;
            t.greaterequal = 549;
            t.Eth = 722;
            t.Ccedilla = 722;
            t.lcommaaccent = 278;
            t.tcaron = 389;
            t.eogonek = 556;
            t.Uogonek = 722;
            t.Aacute = 722;
            t.Adieresis = 722;
            t.egrave = 556;
            t.zacute = 500;
            t.iogonek = 278;
            t.Oacute = 778;
            t.oacute = 611;
            t.amacron = 556;
            t.sacute = 556;
            t.idieresis = 278;
            t.Ocircumflex = 778;
            t.Ugrave = 722;
            t.Delta = 612;
            t.thorn = 611;
            t.twosuperior = 333;
            t.Odieresis = 778;
            t.mu = 611;
            t.igrave = 278;
            t.ohungarumlaut = 611;
            t.Eogonek = 667;
            t.dcroat = 611;
            t.threequarters = 834;
            t.Scedilla = 667;
            t.lcaron = 400;
            t.Kcommaaccent = 722;
            t.Lacute = 611;
            t.trademark = 1000;
            t.edotaccent = 556;
            t.Igrave = 278;
            t.Imacron = 278;
            t.Lcaron = 611;
            t.onehalf = 834;
            t.lessequal = 549;
            t.ocircumflex = 611;
            t.ntilde = 611;
            t.Uhungarumlaut = 722;
            t.Eacute = 667;
            t.emacron = 556;
            t.gbreve = 611;
            t.onequarter = 834;
            t.Scaron = 667;
            t.Scommaaccent = 667;
            t.Ohungarumlaut = 778;
            t.degree = 400;
            t.ograve = 611;
            t.Ccaron = 722;
            t.ugrave = 611;
            t.radical = 549;
            t.Dcaron = 722;
            t.rcommaaccent = 389;
            t.Ntilde = 722;
            t.otilde = 611;
            t.Rcommaaccent = 722;
            t.Lcommaaccent = 611;
            t.Atilde = 722;
            t.Aogonek = 722;
            t.Aring = 722;
            t.Otilde = 778;
            t.zdotaccent = 500;
            t.Ecaron = 667;
            t.Iogonek = 278;
            t.kcommaaccent = 556;
            t.minus = 584;
            t.Icircumflex = 278;
            t.ncaron = 611;
            t.tcommaaccent = 333;
            t.logicalnot = 584;
            t.odieresis = 611;
            t.udieresis = 611;
            t.notequal = 549;
            t.gcommaaccent = 611;
            t.eth = 611;
            t.zcaron = 500;
            t.ncommaaccent = 611;
            t.onesuperior = 333;
            t.imacron = 278;
            t.Euro = 556;
         });
         t["Helvetica-Oblique"] = getLookupTableFactory(function (t) {
            t.space = 278;
            t.exclam = 278;
            t.quotedbl = 355;
            t.numbersign = 556;
            t.dollar = 556;
            t.percent = 889;
            t.ampersand = 667;
            t.quoteright = 222;
            t.parenleft = 333;
            t.parenright = 333;
            t.asterisk = 389;
            t.plus = 584;
            t.comma = 278;
            t.hyphen = 333;
            t.period = 278;
            t.slash = 278;
            t.zero = 556;
            t.one = 556;
            t.two = 556;
            t.three = 556;
            t.four = 556;
            t.five = 556;
            t.six = 556;
            t.seven = 556;
            t.eight = 556;
            t.nine = 556;
            t.colon = 278;
            t.semicolon = 278;
            t.less = 584;
            t.equal = 584;
            t.greater = 584;
            t.question = 556;
            t.at = 1015;
            t.A = 667;
            t.B = 667;
            t.C = 722;
            t.D = 722;
            t.E = 667;
            t.F = 611;
            t.G = 778;
            t.H = 722;
            t.I = 278;
            t.J = 500;
            t.K = 667;
            t.L = 556;
            t.M = 833;
            t.N = 722;
            t.O = 778;
            t.P = 667;
            t.Q = 778;
            t.R = 722;
            t.S = 667;
            t.T = 611;
            t.U = 722;
            t.V = 667;
            t.W = 944;
            t.X = 667;
            t.Y = 667;
            t.Z = 611;
            t.bracketleft = 278;
            t.backslash = 278;
            t.bracketright = 278;
            t.asciicircum = 469;
            t.underscore = 556;
            t.quoteleft = 222;
            t.a = 556;
            t.b = 556;
            t.c = 500;
            t.d = 556;
            t.e = 556;
            t.f = 278;
            t.g = 556;
            t.h = 556;
            t.i = 222;
            t.j = 222;
            t.k = 500;
            t.l = 222;
            t.m = 833;
            t.n = 556;
            t.o = 556;
            t.p = 556;
            t.q = 556;
            t.r = 333;
            t.s = 500;
            t.t = 278;
            t.u = 556;
            t.v = 500;
            t.w = 722;
            t.x = 500;
            t.y = 500;
            t.z = 500;
            t.braceleft = 334;
            t.bar = 260;
            t.braceright = 334;
            t.asciitilde = 584;
            t.exclamdown = 333;
            t.cent = 556;
            t.sterling = 556;
            t.fraction = 167;
            t.yen = 556;
            t.florin = 556;
            t.section = 556;
            t.currency = 556;
            t.quotesingle = 191;
            t.quotedblleft = 333;
            t.guillemotleft = 556;
            t.guilsinglleft = 333;
            t.guilsinglright = 333;
            t.fi = 500;
            t.fl = 500;
            t.endash = 556;
            t.dagger = 556;
            t.daggerdbl = 556;
            t.periodcentered = 278;
            t.paragraph = 537;
            t.bullet = 350;
            t.quotesinglbase = 222;
            t.quotedblbase = 333;
            t.quotedblright = 333;
            t.guillemotright = 556;
            t.ellipsis = 1000;
            t.perthousand = 1000;
            t.questiondown = 611;
            t.grave = 333;
            t.acute = 333;
            t.circumflex = 333;
            t.tilde = 333;
            t.macron = 333;
            t.breve = 333;
            t.dotaccent = 333;
            t.dieresis = 333;
            t.ring = 333;
            t.cedilla = 333;
            t.hungarumlaut = 333;
            t.ogonek = 333;
            t.caron = 333;
            t.emdash = 1000;
            t.AE = 1000;
            t.ordfeminine = 370;
            t.Lslash = 556;
            t.Oslash = 778;
            t.OE = 1000;
            t.ordmasculine = 365;
            t.ae = 889;
            t.dotlessi = 278;
            t.lslash = 222;
            t.oslash = 611;
            t.oe = 944;
            t.germandbls = 611;
            t.Idieresis = 278;
            t.eacute = 556;
            t.abreve = 556;
            t.uhungarumlaut = 556;
            t.ecaron = 556;
            t.Ydieresis = 667;
            t.divide = 584;
            t.Yacute = 667;
            t.Acircumflex = 667;
            t.aacute = 556;
            t.Ucircumflex = 722;
            t.yacute = 500;
            t.scommaaccent = 500;
            t.ecircumflex = 556;
            t.Uring = 722;
            t.Udieresis = 722;
            t.aogonek = 556;
            t.Uacute = 722;
            t.uogonek = 556;
            t.Edieresis = 667;
            t.Dcroat = 722;
            t.commaaccent = 250;
            t.copyright = 737;
            t.Emacron = 667;
            t.ccaron = 500;
            t.aring = 556;
            t.Ncommaaccent = 722;
            t.lacute = 222;
            t.agrave = 556;
            t.Tcommaaccent = 611;
            t.Cacute = 722;
            t.atilde = 556;
            t.Edotaccent = 667;
            t.scaron = 500;
            t.scedilla = 500;
            t.iacute = 278;
            t.lozenge = 471;
            t.Rcaron = 722;
            t.Gcommaaccent = 778;
            t.ucircumflex = 556;
            t.acircumflex = 556;
            t.Amacron = 667;
            t.rcaron = 333;
            t.ccedilla = 500;
            t.Zdotaccent = 611;
            t.Thorn = 667;
            t.Omacron = 778;
            t.Racute = 722;
            t.Sacute = 667;
            t.dcaron = 643;
            t.Umacron = 722;
            t.uring = 556;
            t.threesuperior = 333;
            t.Ograve = 778;
            t.Agrave = 667;
            t.Abreve = 667;
            t.multiply = 584;
            t.uacute = 556;
            t.Tcaron = 611;
            t.partialdiff = 476;
            t.ydieresis = 500;
            t.Nacute = 722;
            t.icircumflex = 278;
            t.Ecircumflex = 667;
            t.adieresis = 556;
            t.edieresis = 556;
            t.cacute = 500;
            t.nacute = 556;
            t.umacron = 556;
            t.Ncaron = 722;
            t.Iacute = 278;
            t.plusminus = 584;
            t.brokenbar = 260;
            t.registered = 737;
            t.Gbreve = 778;
            t.Idotaccent = 278;
            t.summation = 600;
            t.Egrave = 667;
            t.racute = 333;
            t.omacron = 556;
            t.Zacute = 611;
            t.Zcaron = 611;
            t.greaterequal = 549;
            t.Eth = 722;
            t.Ccedilla = 722;
            t.lcommaaccent = 222;
            t.tcaron = 317;
            t.eogonek = 556;
            t.Uogonek = 722;
            t.Aacute = 667;
            t.Adieresis = 667;
            t.egrave = 556;
            t.zacute = 500;
            t.iogonek = 222;
            t.Oacute = 778;
            t.oacute = 556;
            t.amacron = 556;
            t.sacute = 500;
            t.idieresis = 278;
            t.Ocircumflex = 778;
            t.Ugrave = 722;
            t.Delta = 612;
            t.thorn = 556;
            t.twosuperior = 333;
            t.Odieresis = 778;
            t.mu = 556;
            t.igrave = 278;
            t.ohungarumlaut = 556;
            t.Eogonek = 667;
            t.dcroat = 556;
            t.threequarters = 834;
            t.Scedilla = 667;
            t.lcaron = 299;
            t.Kcommaaccent = 667;
            t.Lacute = 556;
            t.trademark = 1000;
            t.edotaccent = 556;
            t.Igrave = 278;
            t.Imacron = 278;
            t.Lcaron = 556;
            t.onehalf = 834;
            t.lessequal = 549;
            t.ocircumflex = 556;
            t.ntilde = 556;
            t.Uhungarumlaut = 722;
            t.Eacute = 667;
            t.emacron = 556;
            t.gbreve = 556;
            t.onequarter = 834;
            t.Scaron = 667;
            t.Scommaaccent = 667;
            t.Ohungarumlaut = 778;
            t.degree = 400;
            t.ograve = 556;
            t.Ccaron = 722;
            t.ugrave = 556;
            t.radical = 453;
            t.Dcaron = 722;
            t.rcommaaccent = 333;
            t.Ntilde = 722;
            t.otilde = 556;
            t.Rcommaaccent = 722;
            t.Lcommaaccent = 556;
            t.Atilde = 667;
            t.Aogonek = 667;
            t.Aring = 667;
            t.Otilde = 778;
            t.zdotaccent = 500;
            t.Ecaron = 667;
            t.Iogonek = 278;
            t.kcommaaccent = 500;
            t.minus = 584;
            t.Icircumflex = 278;
            t.ncaron = 556;
            t.tcommaaccent = 278;
            t.logicalnot = 584;
            t.odieresis = 556;
            t.udieresis = 556;
            t.notequal = 549;
            t.gcommaaccent = 556;
            t.eth = 556;
            t.zcaron = 500;
            t.ncommaaccent = 556;
            t.onesuperior = 333;
            t.imacron = 278;
            t.Euro = 556;
         });
         t.Symbol = getLookupTableFactory(function (t) {
            t.space = 250;
            t.exclam = 333;
            t.universal = 713;
            t.numbersign = 500;
            t.existential = 549;
            t.percent = 833;
            t.ampersand = 778;
            t.suchthat = 439;
            t.parenleft = 333;
            t.parenright = 333;
            t.asteriskmath = 500;
            t.plus = 549;
            t.comma = 250;
            t.minus = 549;
            t.period = 250;
            t.slash = 278;
            t.zero = 500;
            t.one = 500;
            t.two = 500;
            t.three = 500;
            t.four = 500;
            t.five = 500;
            t.six = 500;
            t.seven = 500;
            t.eight = 500;
            t.nine = 500;
            t.colon = 278;
            t.semicolon = 278;
            t.less = 549;
            t.equal = 549;
            t.greater = 549;
            t.question = 444;
            t.congruent = 549;
            t.Alpha = 722;
            t.Beta = 667;
            t.Chi = 722;
            t.Delta = 612;
            t.Epsilon = 611;
            t.Phi = 763;
            t.Gamma = 603;
            t.Eta = 722;
            t.Iota = 333;
            t.theta1 = 631;
            t.Kappa = 722;
            t.Lambda = 686;
            t.Mu = 889;
            t.Nu = 722;
            t.Omicron = 722;
            t.Pi = 768;
            t.Theta = 741;
            t.Rho = 556;
            t.Sigma = 592;
            t.Tau = 611;
            t.Upsilon = 690;
            t.sigma1 = 439;
            t.Omega = 768;
            t.Xi = 645;
            t.Psi = 795;
            t.Zeta = 611;
            t.bracketleft = 333;
            t.therefore = 863;
            t.bracketright = 333;
            t.perpendicular = 658;
            t.underscore = 500;
            t.radicalex = 500;
            t.alpha = 631;
            t.beta = 549;
            t.chi = 549;
            t.delta = 494;
            t.epsilon = 439;
            t.phi = 521;
            t.gamma = 411;
            t.eta = 603;
            t.iota = 329;
            t.phi1 = 603;
            t.kappa = 549;
            t.lambda = 549;
            t.mu = 576;
            t.nu = 521;
            t.omicron = 549;
            t.pi = 549;
            t.theta = 521;
            t.rho = 549;
            t.sigma = 603;
            t.tau = 439;
            t.upsilon = 576;
            t.omega1 = 713;
            t.omega = 686;
            t.xi = 493;
            t.psi = 686;
            t.zeta = 494;
            t.braceleft = 480;
            t.bar = 200;
            t.braceright = 480;
            t.similar = 549;
            t.Euro = 750;
            t.Upsilon1 = 620;
            t.minute = 247;
            t.lessequal = 549;
            t.fraction = 167;
            t.infinity = 713;
            t.florin = 500;
            t.club = 753;
            t.diamond = 753;
            t.heart = 753;
            t.spade = 753;
            t.arrowboth = 1042;
            t.arrowleft = 987;
            t.arrowup = 603;
            t.arrowright = 987;
            t.arrowdown = 603;
            t.degree = 400;
            t.plusminus = 549;
            t.second = 411;
            t.greaterequal = 549;
            t.multiply = 549;
            t.proportional = 713;
            t.partialdiff = 494;
            t.bullet = 460;
            t.divide = 549;
            t.notequal = 549;
            t.equivalence = 549;
            t.approxequal = 549;
            t.ellipsis = 1000;
            t.arrowvertex = 603;
            t.arrowhorizex = 1000;
            t.carriagereturn = 658;
            t.aleph = 823;
            t.Ifraktur = 686;
            t.Rfraktur = 795;
            t.weierstrass = 987;
            t.circlemultiply = 768;
            t.circleplus = 768;
            t.emptyset = 823;
            t.intersection = 768;
            t.union = 768;
            t.propersuperset = 713;
            t.reflexsuperset = 713;
            t.notsubset = 713;
            t.propersubset = 713;
            t.reflexsubset = 713;
            t.element = 713;
            t.notelement = 713;
            t.angle = 768;
            t.gradient = 713;
            t.registerserif = 790;
            t.copyrightserif = 790;
            t.trademarkserif = 890;
            t.product = 823;
            t.radical = 549;
            t.dotmath = 250;
            t.logicalnot = 713;
            t.logicaland = 603;
            t.logicalor = 603;
            t.arrowdblboth = 1042;
            t.arrowdblleft = 987;
            t.arrowdblup = 603;
            t.arrowdblright = 987;
            t.arrowdbldown = 603;
            t.lozenge = 494;
            t.angleleft = 329;
            t.registersans = 790;
            t.copyrightsans = 790;
            t.trademarksans = 786;
            t.summation = 713;
            t.parenlefttp = 384;
            t.parenleftex = 384;
            t.parenleftbt = 384;
            t.bracketlefttp = 384;
            t.bracketleftex = 384;
            t.bracketleftbt = 384;
            t.bracelefttp = 494;
            t.braceleftmid = 494;
            t.braceleftbt = 494;
            t.braceex = 494;
            t.angleright = 329;
            t.integral = 274;
            t.integraltp = 686;
            t.integralex = 686;
            t.integralbt = 686;
            t.parenrighttp = 384;
            t.parenrightex = 384;
            t.parenrightbt = 384;
            t.bracketrighttp = 384;
            t.bracketrightex = 384;
            t.bracketrightbt = 384;
            t.bracerighttp = 494;
            t.bracerightmid = 494;
            t.bracerightbt = 494;
            t.apple = 790;
         });
         t["Times-Roman"] = getLookupTableFactory(function (t) {
            t.space = 250;
            t.exclam = 333;
            t.quotedbl = 408;
            t.numbersign = 500;
            t.dollar = 500;
            t.percent = 833;
            t.ampersand = 778;
            t.quoteright = 333;
            t.parenleft = 333;
            t.parenright = 333;
            t.asterisk = 500;
            t.plus = 564;
            t.comma = 250;
            t.hyphen = 333;
            t.period = 250;
            t.slash = 278;
            t.zero = 500;
            t.one = 500;
            t.two = 500;
            t.three = 500;
            t.four = 500;
            t.five = 500;
            t.six = 500;
            t.seven = 500;
            t.eight = 500;
            t.nine = 500;
            t.colon = 278;
            t.semicolon = 278;
            t.less = 564;
            t.equal = 564;
            t.greater = 564;
            t.question = 444;
            t.at = 921;
            t.A = 722;
            t.B = 667;
            t.C = 667;
            t.D = 722;
            t.E = 611;
            t.F = 556;
            t.G = 722;
            t.H = 722;
            t.I = 333;
            t.J = 389;
            t.K = 722;
            t.L = 611;
            t.M = 889;
            t.N = 722;
            t.O = 722;
            t.P = 556;
            t.Q = 722;
            t.R = 667;
            t.S = 556;
            t.T = 611;
            t.U = 722;
            t.V = 722;
            t.W = 944;
            t.X = 722;
            t.Y = 722;
            t.Z = 611;
            t.bracketleft = 333;
            t.backslash = 278;
            t.bracketright = 333;
            t.asciicircum = 469;
            t.underscore = 500;
            t.quoteleft = 333;
            t.a = 444;
            t.b = 500;
            t.c = 444;
            t.d = 500;
            t.e = 444;
            t.f = 333;
            t.g = 500;
            t.h = 500;
            t.i = 278;
            t.j = 278;
            t.k = 500;
            t.l = 278;
            t.m = 778;
            t.n = 500;
            t.o = 500;
            t.p = 500;
            t.q = 500;
            t.r = 333;
            t.s = 389;
            t.t = 278;
            t.u = 500;
            t.v = 500;
            t.w = 722;
            t.x = 500;
            t.y = 500;
            t.z = 444;
            t.braceleft = 480;
            t.bar = 200;
            t.braceright = 480;
            t.asciitilde = 541;
            t.exclamdown = 333;
            t.cent = 500;
            t.sterling = 500;
            t.fraction = 167;
            t.yen = 500;
            t.florin = 500;
            t.section = 500;
            t.currency = 500;
            t.quotesingle = 180;
            t.quotedblleft = 444;
            t.guillemotleft = 500;
            t.guilsinglleft = 333;
            t.guilsinglright = 333;
            t.fi = 556;
            t.fl = 556;
            t.endash = 500;
            t.dagger = 500;
            t.daggerdbl = 500;
            t.periodcentered = 250;
            t.paragraph = 453;
            t.bullet = 350;
            t.quotesinglbase = 333;
            t.quotedblbase = 444;
            t.quotedblright = 444;
            t.guillemotright = 500;
            t.ellipsis = 1000;
            t.perthousand = 1000;
            t.questiondown = 444;
            t.grave = 333;
            t.acute = 333;
            t.circumflex = 333;
            t.tilde = 333;
            t.macron = 333;
            t.breve = 333;
            t.dotaccent = 333;
            t.dieresis = 333;
            t.ring = 333;
            t.cedilla = 333;
            t.hungarumlaut = 333;
            t.ogonek = 333;
            t.caron = 333;
            t.emdash = 1000;
            t.AE = 889;
            t.ordfeminine = 276;
            t.Lslash = 611;
            t.Oslash = 722;
            t.OE = 889;
            t.ordmasculine = 310;
            t.ae = 667;
            t.dotlessi = 278;
            t.lslash = 278;
            t.oslash = 500;
            t.oe = 722;
            t.germandbls = 500;
            t.Idieresis = 333;
            t.eacute = 444;
            t.abreve = 444;
            t.uhungarumlaut = 500;
            t.ecaron = 444;
            t.Ydieresis = 722;
            t.divide = 564;
            t.Yacute = 722;
            t.Acircumflex = 722;
            t.aacute = 444;
            t.Ucircumflex = 722;
            t.yacute = 500;
            t.scommaaccent = 389;
            t.ecircumflex = 444;
            t.Uring = 722;
            t.Udieresis = 722;
            t.aogonek = 444;
            t.Uacute = 722;
            t.uogonek = 500;
            t.Edieresis = 611;
            t.Dcroat = 722;
            t.commaaccent = 250;
            t.copyright = 760;
            t.Emacron = 611;
            t.ccaron = 444;
            t.aring = 444;
            t.Ncommaaccent = 722;
            t.lacute = 278;
            t.agrave = 444;
            t.Tcommaaccent = 611;
            t.Cacute = 667;
            t.atilde = 444;
            t.Edotaccent = 611;
            t.scaron = 389;
            t.scedilla = 389;
            t.iacute = 278;
            t.lozenge = 471;
            t.Rcaron = 667;
            t.Gcommaaccent = 722;
            t.ucircumflex = 500;
            t.acircumflex = 444;
            t.Amacron = 722;
            t.rcaron = 333;
            t.ccedilla = 444;
            t.Zdotaccent = 611;
            t.Thorn = 556;
            t.Omacron = 722;
            t.Racute = 667;
            t.Sacute = 556;
            t.dcaron = 588;
            t.Umacron = 722;
            t.uring = 500;
            t.threesuperior = 300;
            t.Ograve = 722;
            t.Agrave = 722;
            t.Abreve = 722;
            t.multiply = 564;
            t.uacute = 500;
            t.Tcaron = 611;
            t.partialdiff = 476;
            t.ydieresis = 500;
            t.Nacute = 722;
            t.icircumflex = 278;
            t.Ecircumflex = 611;
            t.adieresis = 444;
            t.edieresis = 444;
            t.cacute = 444;
            t.nacute = 500;
            t.umacron = 500;
            t.Ncaron = 722;
            t.Iacute = 333;
            t.plusminus = 564;
            t.brokenbar = 200;
            t.registered = 760;
            t.Gbreve = 722;
            t.Idotaccent = 333;
            t.summation = 600;
            t.Egrave = 611;
            t.racute = 333;
            t.omacron = 500;
            t.Zacute = 611;
            t.Zcaron = 611;
            t.greaterequal = 549;
            t.Eth = 722;
            t.Ccedilla = 667;
            t.lcommaaccent = 278;
            t.tcaron = 326;
            t.eogonek = 444;
            t.Uogonek = 722;
            t.Aacute = 722;
            t.Adieresis = 722;
            t.egrave = 444;
            t.zacute = 444;
            t.iogonek = 278;
            t.Oacute = 722;
            t.oacute = 500;
            t.amacron = 444;
            t.sacute = 389;
            t.idieresis = 278;
            t.Ocircumflex = 722;
            t.Ugrave = 722;
            t.Delta = 612;
            t.thorn = 500;
            t.twosuperior = 300;
            t.Odieresis = 722;
            t.mu = 500;
            t.igrave = 278;
            t.ohungarumlaut = 500;
            t.Eogonek = 611;
            t.dcroat = 500;
            t.threequarters = 750;
            t.Scedilla = 556;
            t.lcaron = 344;
            t.Kcommaaccent = 722;
            t.Lacute = 611;
            t.trademark = 980;
            t.edotaccent = 444;
            t.Igrave = 333;
            t.Imacron = 333;
            t.Lcaron = 611;
            t.onehalf = 750;
            t.lessequal = 549;
            t.ocircumflex = 500;
            t.ntilde = 500;
            t.Uhungarumlaut = 722;
            t.Eacute = 611;
            t.emacron = 444;
            t.gbreve = 500;
            t.onequarter = 750;
            t.Scaron = 556;
            t.Scommaaccent = 556;
            t.Ohungarumlaut = 722;
            t.degree = 400;
            t.ograve = 500;
            t.Ccaron = 667;
            t.ugrave = 500;
            t.radical = 453;
            t.Dcaron = 722;
            t.rcommaaccent = 333;
            t.Ntilde = 722;
            t.otilde = 500;
            t.Rcommaaccent = 667;
            t.Lcommaaccent = 611;
            t.Atilde = 722;
            t.Aogonek = 722;
            t.Aring = 722;
            t.Otilde = 722;
            t.zdotaccent = 444;
            t.Ecaron = 611;
            t.Iogonek = 333;
            t.kcommaaccent = 500;
            t.minus = 564;
            t.Icircumflex = 333;
            t.ncaron = 500;
            t.tcommaaccent = 278;
            t.logicalnot = 564;
            t.odieresis = 500;
            t.udieresis = 500;
            t.notequal = 549;
            t.gcommaaccent = 500;
            t.eth = 500;
            t.zcaron = 444;
            t.ncommaaccent = 500;
            t.onesuperior = 300;
            t.imacron = 278;
            t.Euro = 500;
         });
         t["Times-Bold"] = getLookupTableFactory(function (t) {
            t.space = 250;
            t.exclam = 333;
            t.quotedbl = 555;
            t.numbersign = 500;
            t.dollar = 500;
            t.percent = 1000;
            t.ampersand = 833;
            t.quoteright = 333;
            t.parenleft = 333;
            t.parenright = 333;
            t.asterisk = 500;
            t.plus = 570;
            t.comma = 250;
            t.hyphen = 333;
            t.period = 250;
            t.slash = 278;
            t.zero = 500;
            t.one = 500;
            t.two = 500;
            t.three = 500;
            t.four = 500;
            t.five = 500;
            t.six = 500;
            t.seven = 500;
            t.eight = 500;
            t.nine = 500;
            t.colon = 333;
            t.semicolon = 333;
            t.less = 570;
            t.equal = 570;
            t.greater = 570;
            t.question = 500;
            t.at = 930;
            t.A = 722;
            t.B = 667;
            t.C = 722;
            t.D = 722;
            t.E = 667;
            t.F = 611;
            t.G = 778;
            t.H = 778;
            t.I = 389;
            t.J = 500;
            t.K = 778;
            t.L = 667;
            t.M = 944;
            t.N = 722;
            t.O = 778;
            t.P = 611;
            t.Q = 778;
            t.R = 722;
            t.S = 556;
            t.T = 667;
            t.U = 722;
            t.V = 722;
            t.W = 1000;
            t.X = 722;
            t.Y = 722;
            t.Z = 667;
            t.bracketleft = 333;
            t.backslash = 278;
            t.bracketright = 333;
            t.asciicircum = 581;
            t.underscore = 500;
            t.quoteleft = 333;
            t.a = 500;
            t.b = 556;
            t.c = 444;
            t.d = 556;
            t.e = 444;
            t.f = 333;
            t.g = 500;
            t.h = 556;
            t.i = 278;
            t.j = 333;
            t.k = 556;
            t.l = 278;
            t.m = 833;
            t.n = 556;
            t.o = 500;
            t.p = 556;
            t.q = 556;
            t.r = 444;
            t.s = 389;
            t.t = 333;
            t.u = 556;
            t.v = 500;
            t.w = 722;
            t.x = 500;
            t.y = 500;
            t.z = 444;
            t.braceleft = 394;
            t.bar = 220;
            t.braceright = 394;
            t.asciitilde = 520;
            t.exclamdown = 333;
            t.cent = 500;
            t.sterling = 500;
            t.fraction = 167;
            t.yen = 500;
            t.florin = 500;
            t.section = 500;
            t.currency = 500;
            t.quotesingle = 278;
            t.quotedblleft = 500;
            t.guillemotleft = 500;
            t.guilsinglleft = 333;
            t.guilsinglright = 333;
            t.fi = 556;
            t.fl = 556;
            t.endash = 500;
            t.dagger = 500;
            t.daggerdbl = 500;
            t.periodcentered = 250;
            t.paragraph = 540;
            t.bullet = 350;
            t.quotesinglbase = 333;
            t.quotedblbase = 500;
            t.quotedblright = 500;
            t.guillemotright = 500;
            t.ellipsis = 1000;
            t.perthousand = 1000;
            t.questiondown = 500;
            t.grave = 333;
            t.acute = 333;
            t.circumflex = 333;
            t.tilde = 333;
            t.macron = 333;
            t.breve = 333;
            t.dotaccent = 333;
            t.dieresis = 333;
            t.ring = 333;
            t.cedilla = 333;
            t.hungarumlaut = 333;
            t.ogonek = 333;
            t.caron = 333;
            t.emdash = 1000;
            t.AE = 1000;
            t.ordfeminine = 300;
            t.Lslash = 667;
            t.Oslash = 778;
            t.OE = 1000;
            t.ordmasculine = 330;
            t.ae = 722;
            t.dotlessi = 278;
            t.lslash = 278;
            t.oslash = 500;
            t.oe = 722;
            t.germandbls = 556;
            t.Idieresis = 389;
            t.eacute = 444;
            t.abreve = 500;
            t.uhungarumlaut = 556;
            t.ecaron = 444;
            t.Ydieresis = 722;
            t.divide = 570;
            t.Yacute = 722;
            t.Acircumflex = 722;
            t.aacute = 500;
            t.Ucircumflex = 722;
            t.yacute = 500;
            t.scommaaccent = 389;
            t.ecircumflex = 444;
            t.Uring = 722;
            t.Udieresis = 722;
            t.aogonek = 500;
            t.Uacute = 722;
            t.uogonek = 556;
            t.Edieresis = 667;
            t.Dcroat = 722;
            t.commaaccent = 250;
            t.copyright = 747;
            t.Emacron = 667;
            t.ccaron = 444;
            t.aring = 500;
            t.Ncommaaccent = 722;
            t.lacute = 278;
            t.agrave = 500;
            t.Tcommaaccent = 667;
            t.Cacute = 722;
            t.atilde = 500;
            t.Edotaccent = 667;
            t.scaron = 389;
            t.scedilla = 389;
            t.iacute = 278;
            t.lozenge = 494;
            t.Rcaron = 722;
            t.Gcommaaccent = 778;
            t.ucircumflex = 556;
            t.acircumflex = 500;
            t.Amacron = 722;
            t.rcaron = 444;
            t.ccedilla = 444;
            t.Zdotaccent = 667;
            t.Thorn = 611;
            t.Omacron = 778;
            t.Racute = 722;
            t.Sacute = 556;
            t.dcaron = 672;
            t.Umacron = 722;
            t.uring = 556;
            t.threesuperior = 300;
            t.Ograve = 778;
            t.Agrave = 722;
            t.Abreve = 722;
            t.multiply = 570;
            t.uacute = 556;
            t.Tcaron = 667;
            t.partialdiff = 494;
            t.ydieresis = 500;
            t.Nacute = 722;
            t.icircumflex = 278;
            t.Ecircumflex = 667;
            t.adieresis = 500;
            t.edieresis = 444;
            t.cacute = 444;
            t.nacute = 556;
            t.umacron = 556;
            t.Ncaron = 722;
            t.Iacute = 389;
            t.plusminus = 570;
            t.brokenbar = 220;
            t.registered = 747;
            t.Gbreve = 778;
            t.Idotaccent = 389;
            t.summation = 600;
            t.Egrave = 667;
            t.racute = 444;
            t.omacron = 500;
            t.Zacute = 667;
            t.Zcaron = 667;
            t.greaterequal = 549;
            t.Eth = 722;
            t.Ccedilla = 722;
            t.lcommaaccent = 278;
            t.tcaron = 416;
            t.eogonek = 444;
            t.Uogonek = 722;
            t.Aacute = 722;
            t.Adieresis = 722;
            t.egrave = 444;
            t.zacute = 444;
            t.iogonek = 278;
            t.Oacute = 778;
            t.oacute = 500;
            t.amacron = 500;
            t.sacute = 389;
            t.idieresis = 278;
            t.Ocircumflex = 778;
            t.Ugrave = 722;
            t.Delta = 612;
            t.thorn = 556;
            t.twosuperior = 300;
            t.Odieresis = 778;
            t.mu = 556;
            t.igrave = 278;
            t.ohungarumlaut = 500;
            t.Eogonek = 667;
            t.dcroat = 556;
            t.threequarters = 750;
            t.Scedilla = 556;
            t.lcaron = 394;
            t.Kcommaaccent = 778;
            t.Lacute = 667;
            t.trademark = 1000;
            t.edotaccent = 444;
            t.Igrave = 389;
            t.Imacron = 389;
            t.Lcaron = 667;
            t.onehalf = 750;
            t.lessequal = 549;
            t.ocircumflex = 500;
            t.ntilde = 556;
            t.Uhungarumlaut = 722;
            t.Eacute = 667;
            t.emacron = 444;
            t.gbreve = 500;
            t.onequarter = 750;
            t.Scaron = 556;
            t.Scommaaccent = 556;
            t.Ohungarumlaut = 778;
            t.degree = 400;
            t.ograve = 500;
            t.Ccaron = 722;
            t.ugrave = 556;
            t.radical = 549;
            t.Dcaron = 722;
            t.rcommaaccent = 444;
            t.Ntilde = 722;
            t.otilde = 500;
            t.Rcommaaccent = 722;
            t.Lcommaaccent = 667;
            t.Atilde = 722;
            t.Aogonek = 722;
            t.Aring = 722;
            t.Otilde = 778;
            t.zdotaccent = 444;
            t.Ecaron = 667;
            t.Iogonek = 389;
            t.kcommaaccent = 556;
            t.minus = 570;
            t.Icircumflex = 389;
            t.ncaron = 556;
            t.tcommaaccent = 333;
            t.logicalnot = 570;
            t.odieresis = 500;
            t.udieresis = 556;
            t.notequal = 549;
            t.gcommaaccent = 500;
            t.eth = 500;
            t.zcaron = 444;
            t.ncommaaccent = 556;
            t.onesuperior = 300;
            t.imacron = 278;
            t.Euro = 500;
         });
         t["Times-BoldItalic"] = getLookupTableFactory(function (t) {
            t.space = 250;
            t.exclam = 389;
            t.quotedbl = 555;
            t.numbersign = 500;
            t.dollar = 500;
            t.percent = 833;
            t.ampersand = 778;
            t.quoteright = 333;
            t.parenleft = 333;
            t.parenright = 333;
            t.asterisk = 500;
            t.plus = 570;
            t.comma = 250;
            t.hyphen = 333;
            t.period = 250;
            t.slash = 278;
            t.zero = 500;
            t.one = 500;
            t.two = 500;
            t.three = 500;
            t.four = 500;
            t.five = 500;
            t.six = 500;
            t.seven = 500;
            t.eight = 500;
            t.nine = 500;
            t.colon = 333;
            t.semicolon = 333;
            t.less = 570;
            t.equal = 570;
            t.greater = 570;
            t.question = 500;
            t.at = 832;
            t.A = 667;
            t.B = 667;
            t.C = 667;
            t.D = 722;
            t.E = 667;
            t.F = 667;
            t.G = 722;
            t.H = 778;
            t.I = 389;
            t.J = 500;
            t.K = 667;
            t.L = 611;
            t.M = 889;
            t.N = 722;
            t.O = 722;
            t.P = 611;
            t.Q = 722;
            t.R = 667;
            t.S = 556;
            t.T = 611;
            t.U = 722;
            t.V = 667;
            t.W = 889;
            t.X = 667;
            t.Y = 611;
            t.Z = 611;
            t.bracketleft = 333;
            t.backslash = 278;
            t.bracketright = 333;
            t.asciicircum = 570;
            t.underscore = 500;
            t.quoteleft = 333;
            t.a = 500;
            t.b = 500;
            t.c = 444;
            t.d = 500;
            t.e = 444;
            t.f = 333;
            t.g = 500;
            t.h = 556;
            t.i = 278;
            t.j = 278;
            t.k = 500;
            t.l = 278;
            t.m = 778;
            t.n = 556;
            t.o = 500;
            t.p = 500;
            t.q = 500;
            t.r = 389;
            t.s = 389;
            t.t = 278;
            t.u = 556;
            t.v = 444;
            t.w = 667;
            t.x = 500;
            t.y = 444;
            t.z = 389;
            t.braceleft = 348;
            t.bar = 220;
            t.braceright = 348;
            t.asciitilde = 570;
            t.exclamdown = 389;
            t.cent = 500;
            t.sterling = 500;
            t.fraction = 167;
            t.yen = 500;
            t.florin = 500;
            t.section = 500;
            t.currency = 500;
            t.quotesingle = 278;
            t.quotedblleft = 500;
            t.guillemotleft = 500;
            t.guilsinglleft = 333;
            t.guilsinglright = 333;
            t.fi = 556;
            t.fl = 556;
            t.endash = 500;
            t.dagger = 500;
            t.daggerdbl = 500;
            t.periodcentered = 250;
            t.paragraph = 500;
            t.bullet = 350;
            t.quotesinglbase = 333;
            t.quotedblbase = 500;
            t.quotedblright = 500;
            t.guillemotright = 500;
            t.ellipsis = 1000;
            t.perthousand = 1000;
            t.questiondown = 500;
            t.grave = 333;
            t.acute = 333;
            t.circumflex = 333;
            t.tilde = 333;
            t.macron = 333;
            t.breve = 333;
            t.dotaccent = 333;
            t.dieresis = 333;
            t.ring = 333;
            t.cedilla = 333;
            t.hungarumlaut = 333;
            t.ogonek = 333;
            t.caron = 333;
            t.emdash = 1000;
            t.AE = 944;
            t.ordfeminine = 266;
            t.Lslash = 611;
            t.Oslash = 722;
            t.OE = 944;
            t.ordmasculine = 300;
            t.ae = 722;
            t.dotlessi = 278;
            t.lslash = 278;
            t.oslash = 500;
            t.oe = 722;
            t.germandbls = 500;
            t.Idieresis = 389;
            t.eacute = 444;
            t.abreve = 500;
            t.uhungarumlaut = 556;
            t.ecaron = 444;
            t.Ydieresis = 611;
            t.divide = 570;
            t.Yacute = 611;
            t.Acircumflex = 667;
            t.aacute = 500;
            t.Ucircumflex = 722;
            t.yacute = 444;
            t.scommaaccent = 389;
            t.ecircumflex = 444;
            t.Uring = 722;
            t.Udieresis = 722;
            t.aogonek = 500;
            t.Uacute = 722;
            t.uogonek = 556;
            t.Edieresis = 667;
            t.Dcroat = 722;
            t.commaaccent = 250;
            t.copyright = 747;
            t.Emacron = 667;
            t.ccaron = 444;
            t.aring = 500;
            t.Ncommaaccent = 722;
            t.lacute = 278;
            t.agrave = 500;
            t.Tcommaaccent = 611;
            t.Cacute = 667;
            t.atilde = 500;
            t.Edotaccent = 667;
            t.scaron = 389;
            t.scedilla = 389;
            t.iacute = 278;
            t.lozenge = 494;
            t.Rcaron = 667;
            t.Gcommaaccent = 722;
            t.ucircumflex = 556;
            t.acircumflex = 500;
            t.Amacron = 667;
            t.rcaron = 389;
            t.ccedilla = 444;
            t.Zdotaccent = 611;
            t.Thorn = 611;
            t.Omacron = 722;
            t.Racute = 667;
            t.Sacute = 556;
            t.dcaron = 608;
            t.Umacron = 722;
            t.uring = 556;
            t.threesuperior = 300;
            t.Ograve = 722;
            t.Agrave = 667;
            t.Abreve = 667;
            t.multiply = 570;
            t.uacute = 556;
            t.Tcaron = 611;
            t.partialdiff = 494;
            t.ydieresis = 444;
            t.Nacute = 722;
            t.icircumflex = 278;
            t.Ecircumflex = 667;
            t.adieresis = 500;
            t.edieresis = 444;
            t.cacute = 444;
            t.nacute = 556;
            t.umacron = 556;
            t.Ncaron = 722;
            t.Iacute = 389;
            t.plusminus = 570;
            t.brokenbar = 220;
            t.registered = 747;
            t.Gbreve = 722;
            t.Idotaccent = 389;
            t.summation = 600;
            t.Egrave = 667;
            t.racute = 389;
            t.omacron = 500;
            t.Zacute = 611;
            t.Zcaron = 611;
            t.greaterequal = 549;
            t.Eth = 722;
            t.Ccedilla = 667;
            t.lcommaaccent = 278;
            t.tcaron = 366;
            t.eogonek = 444;
            t.Uogonek = 722;
            t.Aacute = 667;
            t.Adieresis = 667;
            t.egrave = 444;
            t.zacute = 389;
            t.iogonek = 278;
            t.Oacute = 722;
            t.oacute = 500;
            t.amacron = 500;
            t.sacute = 389;
            t.idieresis = 278;
            t.Ocircumflex = 722;
            t.Ugrave = 722;
            t.Delta = 612;
            t.thorn = 500;
            t.twosuperior = 300;
            t.Odieresis = 722;
            t.mu = 576;
            t.igrave = 278;
            t.ohungarumlaut = 500;
            t.Eogonek = 667;
            t.dcroat = 500;
            t.threequarters = 750;
            t.Scedilla = 556;
            t.lcaron = 382;
            t.Kcommaaccent = 667;
            t.Lacute = 611;
            t.trademark = 1000;
            t.edotaccent = 444;
            t.Igrave = 389;
            t.Imacron = 389;
            t.Lcaron = 611;
            t.onehalf = 750;
            t.lessequal = 549;
            t.ocircumflex = 500;
            t.ntilde = 556;
            t.Uhungarumlaut = 722;
            t.Eacute = 667;
            t.emacron = 444;
            t.gbreve = 500;
            t.onequarter = 750;
            t.Scaron = 556;
            t.Scommaaccent = 556;
            t.Ohungarumlaut = 722;
            t.degree = 400;
            t.ograve = 500;
            t.Ccaron = 667;
            t.ugrave = 556;
            t.radical = 549;
            t.Dcaron = 722;
            t.rcommaaccent = 389;
            t.Ntilde = 722;
            t.otilde = 500;
            t.Rcommaaccent = 667;
            t.Lcommaaccent = 611;
            t.Atilde = 667;
            t.Aogonek = 667;
            t.Aring = 667;
            t.Otilde = 722;
            t.zdotaccent = 389;
            t.Ecaron = 667;
            t.Iogonek = 389;
            t.kcommaaccent = 500;
            t.minus = 606;
            t.Icircumflex = 389;
            t.ncaron = 556;
            t.tcommaaccent = 278;
            t.logicalnot = 606;
            t.odieresis = 500;
            t.udieresis = 556;
            t.notequal = 549;
            t.gcommaaccent = 500;
            t.eth = 500;
            t.zcaron = 389;
            t.ncommaaccent = 556;
            t.onesuperior = 300;
            t.imacron = 278;
            t.Euro = 500;
         });
         t["Times-Italic"] = getLookupTableFactory(function (t) {
            t.space = 250;
            t.exclam = 333;
            t.quotedbl = 420;
            t.numbersign = 500;
            t.dollar = 500;
            t.percent = 833;
            t.ampersand = 778;
            t.quoteright = 333;
            t.parenleft = 333;
            t.parenright = 333;
            t.asterisk = 500;
            t.plus = 675;
            t.comma = 250;
            t.hyphen = 333;
            t.period = 250;
            t.slash = 278;
            t.zero = 500;
            t.one = 500;
            t.two = 500;
            t.three = 500;
            t.four = 500;
            t.five = 500;
            t.six = 500;
            t.seven = 500;
            t.eight = 500;
            t.nine = 500;
            t.colon = 333;
            t.semicolon = 333;
            t.less = 675;
            t.equal = 675;
            t.greater = 675;
            t.question = 500;
            t.at = 920;
            t.A = 611;
            t.B = 611;
            t.C = 667;
            t.D = 722;
            t.E = 611;
            t.F = 611;
            t.G = 722;
            t.H = 722;
            t.I = 333;
            t.J = 444;
            t.K = 667;
            t.L = 556;
            t.M = 833;
            t.N = 667;
            t.O = 722;
            t.P = 611;
            t.Q = 722;
            t.R = 611;
            t.S = 500;
            t.T = 556;
            t.U = 722;
            t.V = 611;
            t.W = 833;
            t.X = 611;
            t.Y = 556;
            t.Z = 556;
            t.bracketleft = 389;
            t.backslash = 278;
            t.bracketright = 389;
            t.asciicircum = 422;
            t.underscore = 500;
            t.quoteleft = 333;
            t.a = 500;
            t.b = 500;
            t.c = 444;
            t.d = 500;
            t.e = 444;
            t.f = 278;
            t.g = 500;
            t.h = 500;
            t.i = 278;
            t.j = 278;
            t.k = 444;
            t.l = 278;
            t.m = 722;
            t.n = 500;
            t.o = 500;
            t.p = 500;
            t.q = 500;
            t.r = 389;
            t.s = 389;
            t.t = 278;
            t.u = 500;
            t.v = 444;
            t.w = 667;
            t.x = 444;
            t.y = 444;
            t.z = 389;
            t.braceleft = 400;
            t.bar = 275;
            t.braceright = 400;
            t.asciitilde = 541;
            t.exclamdown = 389;
            t.cent = 500;
            t.sterling = 500;
            t.fraction = 167;
            t.yen = 500;
            t.florin = 500;
            t.section = 500;
            t.currency = 500;
            t.quotesingle = 214;
            t.quotedblleft = 556;
            t.guillemotleft = 500;
            t.guilsinglleft = 333;
            t.guilsinglright = 333;
            t.fi = 500;
            t.fl = 500;
            t.endash = 500;
            t.dagger = 500;
            t.daggerdbl = 500;
            t.periodcentered = 250;
            t.paragraph = 523;
            t.bullet = 350;
            t.quotesinglbase = 333;
            t.quotedblbase = 556;
            t.quotedblright = 556;
            t.guillemotright = 500;
            t.ellipsis = 889;
            t.perthousand = 1000;
            t.questiondown = 500;
            t.grave = 333;
            t.acute = 333;
            t.circumflex = 333;
            t.tilde = 333;
            t.macron = 333;
            t.breve = 333;
            t.dotaccent = 333;
            t.dieresis = 333;
            t.ring = 333;
            t.cedilla = 333;
            t.hungarumlaut = 333;
            t.ogonek = 333;
            t.caron = 333;
            t.emdash = 889;
            t.AE = 889;
            t.ordfeminine = 276;
            t.Lslash = 556;
            t.Oslash = 722;
            t.OE = 944;
            t.ordmasculine = 310;
            t.ae = 667;
            t.dotlessi = 278;
            t.lslash = 278;
            t.oslash = 500;
            t.oe = 667;
            t.germandbls = 500;
            t.Idieresis = 333;
            t.eacute = 444;
            t.abreve = 500;
            t.uhungarumlaut = 500;
            t.ecaron = 444;
            t.Ydieresis = 556;
            t.divide = 675;
            t.Yacute = 556;
            t.Acircumflex = 611;
            t.aacute = 500;
            t.Ucircumflex = 722;
            t.yacute = 444;
            t.scommaaccent = 389;
            t.ecircumflex = 444;
            t.Uring = 722;
            t.Udieresis = 722;
            t.aogonek = 500;
            t.Uacute = 722;
            t.uogonek = 500;
            t.Edieresis = 611;
            t.Dcroat = 722;
            t.commaaccent = 250;
            t.copyright = 760;
            t.Emacron = 611;
            t.ccaron = 444;
            t.aring = 500;
            t.Ncommaaccent = 667;
            t.lacute = 278;
            t.agrave = 500;
            t.Tcommaaccent = 556;
            t.Cacute = 667;
            t.atilde = 500;
            t.Edotaccent = 611;
            t.scaron = 389;
            t.scedilla = 389;
            t.iacute = 278;
            t.lozenge = 471;
            t.Rcaron = 611;
            t.Gcommaaccent = 722;
            t.ucircumflex = 500;
            t.acircumflex = 500;
            t.Amacron = 611;
            t.rcaron = 389;
            t.ccedilla = 444;
            t.Zdotaccent = 556;
            t.Thorn = 611;
            t.Omacron = 722;
            t.Racute = 611;
            t.Sacute = 500;
            t.dcaron = 544;
            t.Umacron = 722;
            t.uring = 500;
            t.threesuperior = 300;
            t.Ograve = 722;
            t.Agrave = 611;
            t.Abreve = 611;
            t.multiply = 675;
            t.uacute = 500;
            t.Tcaron = 556;
            t.partialdiff = 476;
            t.ydieresis = 444;
            t.Nacute = 667;
            t.icircumflex = 278;
            t.Ecircumflex = 611;
            t.adieresis = 500;
            t.edieresis = 444;
            t.cacute = 444;
            t.nacute = 500;
            t.umacron = 500;
            t.Ncaron = 667;
            t.Iacute = 333;
            t.plusminus = 675;
            t.brokenbar = 275;
            t.registered = 760;
            t.Gbreve = 722;
            t.Idotaccent = 333;
            t.summation = 600;
            t.Egrave = 611;
            t.racute = 389;
            t.omacron = 500;
            t.Zacute = 556;
            t.Zcaron = 556;
            t.greaterequal = 549;
            t.Eth = 722;
            t.Ccedilla = 667;
            t.lcommaaccent = 278;
            t.tcaron = 300;
            t.eogonek = 444;
            t.Uogonek = 722;
            t.Aacute = 611;
            t.Adieresis = 611;
            t.egrave = 444;
            t.zacute = 389;
            t.iogonek = 278;
            t.Oacute = 722;
            t.oacute = 500;
            t.amacron = 500;
            t.sacute = 389;
            t.idieresis = 278;
            t.Ocircumflex = 722;
            t.Ugrave = 722;
            t.Delta = 612;
            t.thorn = 500;
            t.twosuperior = 300;
            t.Odieresis = 722;
            t.mu = 500;
            t.igrave = 278;
            t.ohungarumlaut = 500;
            t.Eogonek = 611;
            t.dcroat = 500;
            t.threequarters = 750;
            t.Scedilla = 500;
            t.lcaron = 300;
            t.Kcommaaccent = 667;
            t.Lacute = 556;
            t.trademark = 980;
            t.edotaccent = 444;
            t.Igrave = 333;
            t.Imacron = 333;
            t.Lcaron = 611;
            t.onehalf = 750;
            t.lessequal = 549;
            t.ocircumflex = 500;
            t.ntilde = 500;
            t.Uhungarumlaut = 722;
            t.Eacute = 611;
            t.emacron = 444;
            t.gbreve = 500;
            t.onequarter = 750;
            t.Scaron = 500;
            t.Scommaaccent = 500;
            t.Ohungarumlaut = 722;
            t.degree = 400;
            t.ograve = 500;
            t.Ccaron = 667;
            t.ugrave = 500;
            t.radical = 453;
            t.Dcaron = 722;
            t.rcommaaccent = 389;
            t.Ntilde = 667;
            t.otilde = 500;
            t.Rcommaaccent = 611;
            t.Lcommaaccent = 556;
            t.Atilde = 611;
            t.Aogonek = 611;
            t.Aring = 611;
            t.Otilde = 722;
            t.zdotaccent = 389;
            t.Ecaron = 611;
            t.Iogonek = 333;
            t.kcommaaccent = 444;
            t.minus = 675;
            t.Icircumflex = 333;
            t.ncaron = 500;
            t.tcommaaccent = 278;
            t.logicalnot = 675;
            t.odieresis = 500;
            t.udieresis = 500;
            t.notequal = 549;
            t.gcommaaccent = 500;
            t.eth = 500;
            t.zcaron = 389;
            t.ncommaaccent = 500;
            t.onesuperior = 300;
            t.imacron = 278;
            t.Euro = 500;
         });
         t.ZapfDingbats = getLookupTableFactory(function (t) {
            t.space = 278;
            t.a1 = 974;
            t.a2 = 961;
            t.a202 = 974;
            t.a3 = 980;
            t.a4 = 719;
            t.a5 = 789;
            t.a119 = 790;
            t.a118 = 791;
            t.a117 = 690;
            t.a11 = 960;
            t.a12 = 939;
            t.a13 = 549;
            t.a14 = 855;
            t.a15 = 911;
            t.a16 = 933;
            t.a105 = 911;
            t.a17 = 945;
            t.a18 = 974;
            t.a19 = 755;
            t.a20 = 846;
            t.a21 = 762;
            t.a22 = 761;
            t.a23 = 571;
            t.a24 = 677;
            t.a25 = 763;
            t.a26 = 760;
            t.a27 = 759;
            t.a28 = 754;
            t.a6 = 494;
            t.a7 = 552;
            t.a8 = 537;
            t.a9 = 577;
            t.a10 = 692;
            t.a29 = 786;
            t.a30 = 788;
            t.a31 = 788;
            t.a32 = 790;
            t.a33 = 793;
            t.a34 = 794;
            t.a35 = 816;
            t.a36 = 823;
            t.a37 = 789;
            t.a38 = 841;
            t.a39 = 823;
            t.a40 = 833;
            t.a41 = 816;
            t.a42 = 831;
            t.a43 = 923;
            t.a44 = 744;
            t.a45 = 723;
            t.a46 = 749;
            t.a47 = 790;
            t.a48 = 792;
            t.a49 = 695;
            t.a50 = 776;
            t.a51 = 768;
            t.a52 = 792;
            t.a53 = 759;
            t.a54 = 707;
            t.a55 = 708;
            t.a56 = 682;
            t.a57 = 701;
            t.a58 = 826;
            t.a59 = 815;
            t.a60 = 789;
            t.a61 = 789;
            t.a62 = 707;
            t.a63 = 687;
            t.a64 = 696;
            t.a65 = 689;
            t.a66 = 786;
            t.a67 = 787;
            t.a68 = 713;
            t.a69 = 791;
            t.a70 = 785;
            t.a71 = 791;
            t.a72 = 873;
            t.a73 = 761;
            t.a74 = 762;
            t.a203 = 762;
            t.a75 = 759;
            t.a204 = 759;
            t.a76 = 892;
            t.a77 = 892;
            t.a78 = 788;
            t.a79 = 784;
            t.a81 = 438;
            t.a82 = 138;
            t.a83 = 277;
            t.a84 = 415;
            t.a97 = 392;
            t.a98 = 392;
            t.a99 = 668;
            t.a100 = 668;
            t.a89 = 390;
            t.a90 = 390;
            t.a93 = 317;
            t.a94 = 317;
            t.a91 = 276;
            t.a92 = 276;
            t.a205 = 509;
            t.a85 = 509;
            t.a206 = 410;
            t.a86 = 410;
            t.a87 = 234;
            t.a88 = 234;
            t.a95 = 334;
            t.a96 = 334;
            t.a101 = 732;
            t.a102 = 544;
            t.a103 = 544;
            t.a104 = 910;
            t.a106 = 667;
            t.a107 = 760;
            t.a108 = 760;
            t.a112 = 776;
            t.a111 = 595;
            t.a110 = 694;
            t.a109 = 626;
            t.a120 = 788;
            t.a121 = 788;
            t.a122 = 788;
            t.a123 = 788;
            t.a124 = 788;
            t.a125 = 788;
            t.a126 = 788;
            t.a127 = 788;
            t.a128 = 788;
            t.a129 = 788;
            t.a130 = 788;
            t.a131 = 788;
            t.a132 = 788;
            t.a133 = 788;
            t.a134 = 788;
            t.a135 = 788;
            t.a136 = 788;
            t.a137 = 788;
            t.a138 = 788;
            t.a139 = 788;
            t.a140 = 788;
            t.a141 = 788;
            t.a142 = 788;
            t.a143 = 788;
            t.a144 = 788;
            t.a145 = 788;
            t.a146 = 788;
            t.a147 = 788;
            t.a148 = 788;
            t.a149 = 788;
            t.a150 = 788;
            t.a151 = 788;
            t.a152 = 788;
            t.a153 = 788;
            t.a154 = 788;
            t.a155 = 788;
            t.a156 = 788;
            t.a157 = 788;
            t.a158 = 788;
            t.a159 = 788;
            t.a160 = 894;
            t.a161 = 838;
            t.a163 = 1016;
            t.a164 = 458;
            t.a196 = 748;
            t.a165 = 924;
            t.a192 = 748;
            t.a166 = 918;
            t.a167 = 927;
            t.a168 = 928;
            t.a169 = 928;
            t.a170 = 834;
            t.a171 = 873;
            t.a172 = 828;
            t.a173 = 924;
            t.a162 = 924;
            t.a174 = 917;
            t.a175 = 930;
            t.a176 = 931;
            t.a177 = 463;
            t.a178 = 883;
            t.a179 = 836;
            t.a193 = 836;
            t.a180 = 867;
            t.a199 = 867;
            t.a181 = 696;
            t.a200 = 696;
            t.a182 = 874;
            t.a201 = 874;
            t.a183 = 760;
            t.a184 = 946;
            t.a197 = 771;
            t.a185 = 865;
            t.a194 = 771;
            t.a198 = 888;
            t.a186 = 967;
            t.a195 = 888;
            t.a187 = 831;
            t.a188 = 873;
            t.a189 = 927;
            t.a190 = 970;
            t.a191 = 918;
         });
      });
      var getFontBasicMetrics = getLookupTableFactory(function (t) {
         t.Courier = { ascent: 629, descent: -157, capHeight: 562, xHeight: -426 };
         t["Courier-Bold"] = {
            ascent: 629,
            descent: -157,
            capHeight: 562,
            xHeight: 439,
         };
         t["Courier-Oblique"] = {
            ascent: 629,
            descent: -157,
            capHeight: 562,
            xHeight: 426,
         };
         t["Courier-BoldOblique"] = {
            ascent: 629,
            descent: -157,
            capHeight: 562,
            xHeight: 426,
         };
         t.Helvetica = {
            ascent: 718,
            descent: -207,
            capHeight: 718,
            xHeight: 523,
         };
         t["Helvetica-Bold"] = {
            ascent: 718,
            descent: -207,
            capHeight: 718,
            xHeight: 532,
         };
         t["Helvetica-Oblique"] = {
            ascent: 718,
            descent: -207,
            capHeight: 718,
            xHeight: 523,
         };
         t["Helvetica-BoldOblique"] = {
            ascent: 718,
            descent: -207,
            capHeight: 718,
            xHeight: 532,
         };
         t["Times-Roman"] = {
            ascent: 683,
            descent: -217,
            capHeight: 662,
            xHeight: 450,
         };
         t["Times-Bold"] = {
            ascent: 683,
            descent: -217,
            capHeight: 676,
            xHeight: 461,
         };
         t["Times-Italic"] = {
            ascent: 683,
            descent: -217,
            capHeight: 653,
            xHeight: 441,
         };
         t["Times-BoldItalic"] = {
            ascent: 683,
            descent: -217,
            capHeight: 669,
            xHeight: 462,
         };
         t.Symbol = {
            ascent: Math.NaN,
            descent: Math.NaN,
            capHeight: Math.NaN,
            xHeight: Math.NaN,
         };
         t.ZapfDingbats = {
            ascent: Math.NaN,
            descent: Math.NaN,
            capHeight: Math.NaN,
            xHeight: Math.NaN,
         };
      }); // CONCATENATED MODULE: ./src/core/glyf.js
      var ON_CURVE_POINT = 1 << 0;
      var X_SHORT_VECTOR = 1 << 1;
      var Y_SHORT_VECTOR = 1 << 2;
      var REPEAT_FLAG = 1 << 3;
      var X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR = 1 << 4;
      var Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR = 1 << 5;
      var OVERLAP_SIMPLE = 1 << 6;
      var ARG_1_AND_2_ARE_WORDS = 1 << 0;
      var ARGS_ARE_XY_VALUES = 1 << 1;
      var WE_HAVE_A_SCALE = 1 << 3;
      var MORE_COMPONENTS = 1 << 5;
      var WE_HAVE_AN_X_AND_Y_SCALE = 1 << 6;
      var WE_HAVE_A_TWO_BY_TWO = 1 << 7;
      var WE_HAVE_INSTRUCTIONS = 1 << 8;
      var GlyfTable = /*#__PURE__*/ (function () {
         function GlyfTable(_ref24) {
            var glyfTable = _ref24.glyfTable,
               isGlyphLocationsLong = _ref24.isGlyphLocationsLong,
               locaTable = _ref24.locaTable,
               numGlyphs = _ref24.numGlyphs;
            _classCallCheck(this, GlyfTable);
            this.glyphs = [];
            var loca = new DataView(
               locaTable.buffer,
               locaTable.byteOffset,
               locaTable.byteLength,
            );
            var glyf = new DataView(
               glyfTable.buffer,
               glyfTable.byteOffset,
               glyfTable.byteLength,
            );
            var offsetSize = isGlyphLocationsLong ? 4 : 2;
            var prev = isGlyphLocationsLong
               ? loca.getUint32(0)
               : 2 * loca.getUint16(0);
            var pos = 0;
            for (var i = 0; i < numGlyphs; i++) {
               pos += offsetSize;
               var next = isGlyphLocationsLong
                  ? loca.getUint32(pos)
                  : 2 * loca.getUint16(pos);
               if (next === prev) {
                  this.glyphs.push(new Glyph({}));
                  continue;
               }
               var glyph = Glyph.parse(prev, glyf);
               this.glyphs.push(glyph);
               prev = next;
            }
         }
         return _createClass(GlyfTable, [
            {
               key: "getSize",
               value: function getSize() {
                  return this.glyphs.reduce(function (a, g) {
                     var size = g.getSize();
                     return a + ((size + 3) & ~3);
                  }, 0);
               },
            },
            {
               key: "write",
               value: function write() {
                  var totalSize = this.getSize();
                  var glyfTable = new DataView(new ArrayBuffer(totalSize));
                  var isLocationLong = totalSize > 0x1fffe;
                  var offsetSize = isLocationLong ? 4 : 2;
                  var locaTable = new DataView(
                     new ArrayBuffer((this.glyphs.length + 1) * offsetSize),
                  );
                  if (isLocationLong) {
                     locaTable.setUint32(0, 0);
                  } else {
                     locaTable.setUint16(0, 0);
                  }
                  var pos = 0;
                  var locaIndex = 0;
                  var _iterator31 = _createForOfIteratorHelper(this.glyphs),
                     _step31;
                  try {
                     for (_iterator31.s(); !(_step31 = _iterator31.n()).done; ) {
                        var glyph = _step31.value;
                        pos += glyph.write(pos, glyfTable);
                        pos = (pos + 3) & ~3;
                        locaIndex += offsetSize;
                        if (isLocationLong) {
                           locaTable.setUint32(locaIndex, pos);
                        } else {
                           locaTable.setUint16(locaIndex, pos >> 1);
                        }
                     }
                  } catch (err) {
                     _iterator31.e(err);
                  } finally {
                     _iterator31.f();
                  }
                  return {
                     isLocationLong: isLocationLong,
                     loca: new Uint8Array(locaTable.buffer),
                     glyf: new Uint8Array(glyfTable.buffer),
                  };
               },
            },
            {
               key: "scale",
               value: function scale(factors) {
                  for (var i = 0, ii = this.glyphs.length; i < ii; i++) {
                     this.glyphs[i].scale(factors[i]);
                  }
               },
            },
         ]);
      })();
      var Glyph = /*#__PURE__*/ (function () {
         function Glyph(_ref25) {
            var _ref25$header = _ref25.header,
               header = _ref25$header === void 0 ? null : _ref25$header,
               _ref25$simple = _ref25.simple,
               simple = _ref25$simple === void 0 ? null : _ref25$simple,
               _ref25$composites = _ref25.composites,
               composites = _ref25$composites === void 0 ? null : _ref25$composites;
            _classCallCheck(this, Glyph);
            this.header = header;
            this.simple = simple;
            this.composites = composites;
         }
         return _createClass(
            Glyph,
            [
               {
                  key: "getSize",
                  value: function getSize() {
                     if (!this.header) {
                        return 0;
                     }
                     var size = this.simple
                        ? this.simple.getSize()
                        : this.composites.reduce(function (a, c) {
                           return a + c.getSize();
                        }, 0);
                     return this.header.getSize() + size;
                  },
               },
               {
                  key: "write",
                  value: function write(pos, buf) {
                     if (!this.header) {
                        return 0;
                     }
                     var spos = pos;
                     pos += this.header.write(pos, buf);
                     if (this.simple) {
                        pos += this.simple.write(pos, buf);
                     } else {
                        var _iterator32 = _createForOfIteratorHelper(this.composites),
                           _step32;
                        try {
                           for (_iterator32.s(); !(_step32 = _iterator32.n()).done; ) {
                              var composite = _step32.value;
                              pos += composite.write(pos, buf);
                           }
                        } catch (err) {
                           _iterator32.e(err);
                        } finally {
                           _iterator32.f();
                        }
                     }
                     return pos - spos;
                  },
               },
               {
                  key: "scale",
                  value: function scale(factor) {
                     if (!this.header) {
                        return;
                     }
                     var xMiddle = (this.header.xMin + this.header.xMax) / 2;
                     this.header.scale(xMiddle, factor);
                     if (this.simple) {
                        this.simple.scale(xMiddle, factor);
                     } else {
                        var _iterator33 = _createForOfIteratorHelper(this.composites),
                           _step33;
                        try {
                           for (_iterator33.s(); !(_step33 = _iterator33.n()).done; ) {
                              var composite = _step33.value;
                              composite.scale(xMiddle, factor);
                           }
                        } catch (err) {
                           _iterator33.e(err);
                        } finally {
                           _iterator33.f();
                        }
                     }
                  },
               },
            ],
            [
               {
                  key: "parse",
                  value: function parse(pos, glyf) {
                     var _GlyphHeader$parse = GlyphHeader.parse(pos, glyf),
                        _GlyphHeader$parse2 = _slicedToArray(_GlyphHeader$parse, 2),
                        read = _GlyphHeader$parse2[0],
                        header = _GlyphHeader$parse2[1];
                     pos += read;
                     if (header.numberOfContours < 0) {
                        var composites = [];
                        while (true) {
                           var _CompositeGlyph$parse = CompositeGlyph.parse(pos, glyf),
                              _CompositeGlyph$parse2 = _slicedToArray(
                                 _CompositeGlyph$parse,
                                 2,
                              ),
                              n = _CompositeGlyph$parse2[0],
                              composite = _CompositeGlyph$parse2[1];
                           pos += n;
                           composites.push(composite);
                           if (!(composite.flags & MORE_COMPONENTS)) {
                              break;
                           }
                        }
                        return new Glyph({ header: header, composites: composites });
                     }
                     var simple = SimpleGlyph.parse(
                        pos,
                        glyf,
                        header.numberOfContours,
                     );
                     return new Glyph({ header: header, simple: simple });
                  },
               },
            ],
         );
      })();
      var GlyphHeader = /*#__PURE__*/ (function () {
         function GlyphHeader(_ref26) {
            var numberOfContours = _ref26.numberOfContours,
               xMin = _ref26.xMin,
               yMin = _ref26.yMin,
               xMax = _ref26.xMax,
               yMax = _ref26.yMax;
            _classCallCheck(this, GlyphHeader);
            this.numberOfContours = numberOfContours;
            this.xMin = xMin;
            this.yMin = yMin;
            this.xMax = xMax;
            this.yMax = yMax;
         }
         return _createClass(
            GlyphHeader,
            [
               {
                  key: "getSize",
                  value: function getSize() {
                     return 10;
                  },
               },
               {
                  key: "write",
                  value: function write(pos, buf) {
                     buf.setInt16(pos, this.numberOfContours);
                     buf.setInt16(pos + 2, this.xMin);
                     buf.setInt16(pos + 4, this.yMin);
                     buf.setInt16(pos + 6, this.xMax);
                     buf.setInt16(pos + 8, this.yMax);
                     return 10;
                  },
               },
               {
                  key: "scale",
                  value: function scale(x, factor) {
                     this.xMin = Math.round(x + (this.xMin - x) * factor);
                     this.xMax = Math.round(x + (this.xMax - x) * factor);
                  },
               },
            ],
            [
               {
                  key: "parse",
                  value: function parse(pos, glyf) {
                     return [
                        10,
                        new GlyphHeader({
                           numberOfContours: glyf.getInt16(pos),
                           xMin: glyf.getInt16(pos + 2),
                           yMin: glyf.getInt16(pos + 4),
                           xMax: glyf.getInt16(pos + 6),
                           yMax: glyf.getInt16(pos + 8),
                        }),
                     ];
                  },
               },
            ],
         );
      })();
      var Contour = /*#__PURE__*/ _createClass(function Contour(_ref27) {
         var flags = _ref27.flags,
            xCoordinates = _ref27.xCoordinates,
            yCoordinates = _ref27.yCoordinates;
         _classCallCheck(this, Contour);
         this.xCoordinates = xCoordinates;
         this.yCoordinates = yCoordinates;
         this.flags = flags;
      });
      var SimpleGlyph = /*#__PURE__*/ (function () {
         function SimpleGlyph(_ref28) {
            var contours = _ref28.contours,
               instructions = _ref28.instructions;
            _classCallCheck(this, SimpleGlyph);
            this.contours = contours;
            this.instructions = instructions;
         }
         return _createClass(
            SimpleGlyph,
            [
               {
                  key: "getSize",
                  value: function getSize() {
                     var size =
                        this.contours.length * 2 + 2 + this.instructions.length;
                     var lastX = 0;
                     var lastY = 0;
                     var _iterator34 = _createForOfIteratorHelper(this.contours),
                        _step34;
                     try {
                        for (_iterator34.s(); !(_step34 = _iterator34.n()).done; ) {
                           var contour = _step34.value;
                           size += contour.flags.length;
                           for (
                              var i = 0, ii = contour.xCoordinates.length;
                              i < ii;
                              i++
                           ) {
                              var x = contour.xCoordinates[i];
                              var y = contour.yCoordinates[i];
                              var abs = Math.abs(x - lastX);
                              if (abs > 255) {
                                 size += 2;
                              } else if (abs > 0) {
                                 size += 1;
                              }
                              lastX = x;
                              abs = Math.abs(y - lastY);
                              if (abs > 255) {
                                 size += 2;
                              } else if (abs > 0) {
                                 size += 1;
                              }
                              lastY = y;
                           }
                        }
                     } catch (err) {
                        _iterator34.e(err);
                     } finally {
                        _iterator34.f();
                     }
                     return size;
                  },
               },
               {
                  key: "write",
                  value: function write(pos, buf) {
                     var spos = pos;
                     var xCoordinates = [];
                     var yCoordinates = [];
                     var flags = [];
                     var lastX = 0;
                     var lastY = 0;
                     var _iterator35 = _createForOfIteratorHelper(this.contours),
                        _step35;
                     try {
                        for (_iterator35.s(); !(_step35 = _iterator35.n()).done; ) {
                           var contour = _step35.value;
                           for (
                              var _i20 = 0, _ii4 = contour.xCoordinates.length;
                              _i20 < _ii4;
                              _i20++
                           ) {
                              var _flag3 = contour.flags[_i20];
                              var _x16 = contour.xCoordinates[_i20];
                              var delta = _x16 - lastX;
                              if (delta === 0) {
                                 _flag3 |= X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR;
                                 xCoordinates.push(0);
                              } else {
                                 var abs = Math.abs(delta);
                                 if (abs <= 255) {
                                    _flag3 |=
                                       delta >= 0
                                          ? X_SHORT_VECTOR |
                                          X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR
                                          : X_SHORT_VECTOR;
                                    xCoordinates.push(abs);
                                 } else {
                                    xCoordinates.push(delta);
                                 }
                              }
                              lastX = _x16;
                              var _y = contour.yCoordinates[_i20];
                              delta = _y - lastY;
                              if (delta === 0) {
                                 _flag3 |= Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR;
                                 yCoordinates.push(0);
                              } else {
                                 var _abs = Math.abs(delta);
                                 if (_abs <= 255) {
                                    _flag3 |=
                                       delta >= 0
                                          ? Y_SHORT_VECTOR |
                                          Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR
                                          : Y_SHORT_VECTOR;
                                    yCoordinates.push(_abs);
                                 } else {
                                    yCoordinates.push(delta);
                                 }
                              }
                              lastY = _y;
                              flags.push(_flag3);
                           }
                           buf.setUint16(pos, xCoordinates.length - 1);
                           pos += 2;
                        }
                     } catch (err) {
                        _iterator35.e(err);
                     } finally {
                        _iterator35.f();
                     }
                     buf.setUint16(pos, this.instructions.length);
                     pos += 2;
                     if (this.instructions.length) {
                        new Uint8Array(buf.buffer, 0, buf.buffer.byteLength).set(
                           this.instructions,
                           pos,
                        );
                        pos += this.instructions.length;
                     }
                     for (var _i18 = 0, _flags = flags; _i18 < _flags.length; _i18++) {
                        var flag = _flags[_i18];
                        buf.setUint8(pos++, flag);
                     }
                     for (var i = 0, ii = xCoordinates.length; i < ii; i++) {
                        var x = xCoordinates[i];
                        var _flag = flags[i];
                        if (_flag & X_SHORT_VECTOR) {
                           buf.setUint8(pos++, x);
                        } else if (!(_flag & X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR)) {
                           buf.setInt16(pos, x);
                           pos += 2;
                        }
                     }
                     for (
                        var _i19 = 0, _ii3 = yCoordinates.length;
                        _i19 < _ii3;
                        _i19++
                     ) {
                        var y = yCoordinates[_i19];
                        var _flag2 = flags[_i19];
                        if (_flag2 & Y_SHORT_VECTOR) {
                           buf.setUint8(pos++, y);
                        } else if (!(_flag2 & Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR)) {
                           buf.setInt16(pos, y);
                           pos += 2;
                        }
                     }
                     return pos - spos;
                  },
               },
               {
                  key: "scale",
                  value: function scale(x, factor) {
                     var _iterator36 = _createForOfIteratorHelper(this.contours),
                        _step36;
                     try {
                        for (_iterator36.s(); !(_step36 = _iterator36.n()).done; ) {
                           var contour = _step36.value;
                           if (contour.xCoordinates.length === 0) {
                              continue;
                           }
                           for (
                              var i = 0, ii = contour.xCoordinates.length;
                              i < ii;
                              i++
                           ) {
                              contour.xCoordinates[i] = Math.round(
                                 x + (contour.xCoordinates[i] - x) * factor,
                              );
                           }
                        }
                     } catch (err) {
                        _iterator36.e(err);
                     } finally {
                        _iterator36.f();
                     }
                  },
               },
            ],
            [
               {
                  key: "parse",
                  value: function parse(pos, glyf, numberOfContours) {
                     var endPtsOfContours = [];
                     for (var i = 0; i < numberOfContours; i++) {
                        var endPt = glyf.getUint16(pos);
                        pos += 2;
                        endPtsOfContours.push(endPt);
                     }
                     var numberOfPt = endPtsOfContours[numberOfContours - 1] + 1;
                     var instructionLength = glyf.getUint16(pos);
                     pos += 2;
                     var instructions = new Uint8Array(glyf).slice(
                        pos,
                        pos + instructionLength,
                     );
                     pos += instructionLength;
                     var flags = [];
                     for (var _i21 = 0; _i21 < numberOfPt; pos++, _i21++) {
                        var flag = glyf.getUint8(pos);
                        flags.push(flag);
                        if (flag & REPEAT_FLAG) {
                           var count = glyf.getUint8(++pos);
                           flag ^= REPEAT_FLAG;
                           for (var m = 0; m < count; m++) {
                              flags.push(flag);
                           }
                           _i21 += count;
                        }
                     }
                     var allXCoordinates = [];
                     var xCoordinates = [];
                     var yCoordinates = [];
                     var pointFlags = [];
                     var contours = [];
                     var endPtsOfContoursIndex = 0;
                     var lastCoordinate = 0;
                     for (var _i22 = 0; _i22 < numberOfPt; _i22++) {
                        var _flag4 = flags[_i22];
                        if (_flag4 & X_SHORT_VECTOR) {
                           var x = glyf.getUint8(pos++);
                           lastCoordinate +=
                              _flag4 & X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR ? x : -x;
                           xCoordinates.push(lastCoordinate);
                        } else if (_flag4 & X_IS_SAME_OR_POSITIVE_X_SHORT_VECTOR) {
                           xCoordinates.push(lastCoordinate);
                        } else {
                           lastCoordinate += glyf.getInt16(pos);
                           pos += 2;
                           xCoordinates.push(lastCoordinate);
                        }
                        if (endPtsOfContours[endPtsOfContoursIndex] === _i22) {
                           endPtsOfContoursIndex++;
                           allXCoordinates.push(xCoordinates);
                           xCoordinates = [];
                        }
                     }
                     lastCoordinate = 0;
                     endPtsOfContoursIndex = 0;
                     for (var _i23 = 0; _i23 < numberOfPt; _i23++) {
                        var _flag5 = flags[_i23];
                        if (_flag5 & Y_SHORT_VECTOR) {
                           var y = glyf.getUint8(pos++);
                           lastCoordinate +=
                              _flag5 & Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR ? y : -y;
                           yCoordinates.push(lastCoordinate);
                        } else if (_flag5 & Y_IS_SAME_OR_POSITIVE_Y_SHORT_VECTOR) {
                           yCoordinates.push(lastCoordinate);
                        } else {
                           lastCoordinate += glyf.getInt16(pos);
                           pos += 2;
                           yCoordinates.push(lastCoordinate);
                        }
                        pointFlags.push(
                           (_flag5 & ON_CURVE_POINT) | (_flag5 & OVERLAP_SIMPLE),
                        );
                        if (endPtsOfContours[endPtsOfContoursIndex] === _i23) {
                           xCoordinates = allXCoordinates[endPtsOfContoursIndex];
                           endPtsOfContoursIndex++;
                           contours.push(
                              new Contour({
                                 flags: pointFlags,
                                 xCoordinates: xCoordinates,
                                 yCoordinates: yCoordinates,
                              }),
                           );
                           yCoordinates = [];
                           pointFlags = [];
                        }
                     }
                     return new SimpleGlyph({
                        contours: contours,
                        instructions: instructions,
                     });
                  },
               },
            ],
         );
      })();
      var CompositeGlyph = /*#__PURE__*/ (function () {
         function CompositeGlyph(_ref29) {
            var flags = _ref29.flags,
               glyphIndex = _ref29.glyphIndex,
               argument1 = _ref29.argument1,
               argument2 = _ref29.argument2,
               transf = _ref29.transf,
               instructions = _ref29.instructions;
            _classCallCheck(this, CompositeGlyph);
            this.flags = flags;
            this.glyphIndex = glyphIndex;
            this.argument1 = argument1;
            this.argument2 = argument2;
            this.transf = transf;
            this.instructions = instructions;
         }
         return _createClass(
            CompositeGlyph,
            [
               {
                  key: "getSize",
                  value: function getSize() {
                     var size = 2 + 2 + this.transf.length * 2;
                     if (this.flags & WE_HAVE_INSTRUCTIONS) {
                        size += 2 + this.instructions.length;
                     }
                     size += 2;
                     if (this.flags & 2) {
                        if (
                           !(
                              this.argument1 >= -128 &&
                              this.argument1 <= 127 &&
                              this.argument2 >= -128 &&
                              this.argument2 <= 127
                           )
                        ) {
                           size += 2;
                        }
                     } else if (
                        !(
                           this.argument1 >= 0 &&
                           this.argument1 <= 255 &&
                           this.argument2 >= 0 &&
                           this.argument2 <= 255
                        )
                     ) {
                        size += 2;
                     }
                     return size;
                  },
               },
               {
                  key: "write",
                  value: function write(pos, buf) {
                     var spos = pos;
                     if (this.flags & ARGS_ARE_XY_VALUES) {
                        if (
                           !(
                              this.argument1 >= -128 &&
                              this.argument1 <= 127 &&
                              this.argument2 >= -128 &&
                              this.argument2 <= 127
                           )
                        ) {
                           this.flags |= ARG_1_AND_2_ARE_WORDS;
                        }
                     } else if (
                        !(
                           this.argument1 >= 0 &&
                           this.argument1 <= 255 &&
                           this.argument2 >= 0 &&
                           this.argument2 <= 255
                        )
                     ) {
                        this.flags |= ARG_1_AND_2_ARE_WORDS;
                     }
                     buf.setUint16(pos, this.flags);
                     buf.setUint16(pos + 2, this.glyphIndex);
                     pos += 4;
                     if (this.flags & ARG_1_AND_2_ARE_WORDS) {
                        if (this.flags & ARGS_ARE_XY_VALUES) {
                           buf.setInt16(pos, this.argument1);
                           buf.setInt16(pos + 2, this.argument2);
                        } else {
                           buf.setUint16(pos, this.argument1);
                           buf.setUint16(pos + 2, this.argument2);
                        }
                        pos += 4;
                     } else {
                        buf.setUint8(pos, this.argument1);
                        buf.setUint8(pos + 1, this.argument2);
                        pos += 2;
                     }
                     if (this.flags & WE_HAVE_INSTRUCTIONS) {
                        buf.setUint16(pos, this.instructions.length);
                        pos += 2;
                        if (this.instructions.length) {
                           new Uint8Array(buf.buffer, 0, buf.buffer.byteLength).set(
                              this.instructions,
                              pos,
                           );
                           pos += this.instructions.length;
                        }
                     }
                     return pos - spos;
                  },
               },
               { key: "scale", value: function scale(x, factor) {} },
            ],
            [
               {
                  key: "parse",
                  value: function parse(pos, glyf) {
                     var spos = pos;
                     var transf = [];
                     var flags = glyf.getUint16(pos);
                     var glyphIndex = glyf.getUint16(pos + 2);
                     pos += 4;
                     var argument1, argument2;
                     if (flags & ARG_1_AND_2_ARE_WORDS) {
                        if (flags & ARGS_ARE_XY_VALUES) {
                           argument1 = glyf.getInt16(pos);
                           argument2 = glyf.getInt16(pos + 2);
                        } else {
                           argument1 = glyf.getUint16(pos);
                           argument2 = glyf.getUint16(pos + 2);
                        }
                        pos += 4;
                        flags ^= ARG_1_AND_2_ARE_WORDS;
                     } else {
                        if (flags & ARGS_ARE_XY_VALUES) {
                           argument1 = glyf.getInt8(pos);
                           argument2 = glyf.getInt8(pos + 1);
                        } else {
                           argument1 = glyf.getUint8(pos);
                           argument2 = glyf.getUint8(pos + 1);
                        }
                        pos += 2;
                     }
                     if (flags & WE_HAVE_A_SCALE) {
                        transf.push(glyf.getUint16(pos));
                        pos += 2;
                     } else if (flags & WE_HAVE_AN_X_AND_Y_SCALE) {
                        transf.push(glyf.getUint16(pos), glyf.getUint16(pos + 2));
                        pos += 4;
                     } else if (flags & WE_HAVE_A_TWO_BY_TWO) {
                        transf.push(
                           glyf.getUint16(pos),
                           glyf.getUint16(pos + 2),
                           glyf.getUint16(pos + 4),
                           glyf.getUint16(pos + 6),
                        );
                        pos += 8;
                     }
                     var instructions = null;
                     if (flags & WE_HAVE_INSTRUCTIONS) {
                        var instructionLength = glyf.getUint16(pos);
                        pos += 2;
                        instructions = new Uint8Array(glyf).slice(
                           pos,
                           pos + instructionLength,
                        );
                        pos += instructionLength;
                     }
                     return [
                        pos - spos,
                        new CompositeGlyph({
                           flags: flags,
                           glyphIndex: glyphIndex,
                           argument1: argument1,
                           argument2: argument2,
                           transf: transf,
                           instructions: instructions,
                        }),
                     ];
                  },
               },
            ],
         );
      })(); // CONCATENATED MODULE: ./src/core/opentype_file_builder.js
      function writeInt16(dest, offset, num) {
         dest[offset] = (num >> 8) & 0xff;
         dest[offset + 1] = num & 0xff;
      }
      function writeInt32(dest, offset, num) {
         dest[offset] = (num >> 24) & 0xff;
         dest[offset + 1] = (num >> 16) & 0xff;
         dest[offset + 2] = (num >> 8) & 0xff;
         dest[offset + 3] = num & 0xff;
      }
      function writeData(dest, offset, data) {
         if (data instanceof Uint8Array) {
            dest.set(data, offset);
         } else if (typeof data === "string") {
            for (var i = 0, ii = data.length; i < ii; i++) {
               dest[offset++] = data.charCodeAt(i) & 0xff;
            }
         } else {
            var _iterator37 = _createForOfIteratorHelper(data),
               _step37;
            try {
               for (_iterator37.s(); !(_step37 = _iterator37.n()).done; ) {
                  var num = _step37.value;
                  dest[offset++] = num & 0xff;
               }
            } catch (err) {
               _iterator37.e(err);
            } finally {
               _iterator37.f();
            }
         }
      }
      var OTF_HEADER_SIZE = 12;
      var OTF_TABLE_ENTRY_SIZE = 16;
      var OpenTypeFileBuilder = /*#__PURE__*/ (function () {
         function OpenTypeFileBuilder(sfnt) {
            _classCallCheck(this, OpenTypeFileBuilder);
            this.sfnt = sfnt;
            this.tables = Object.create(null);
         }
         return _createClass(
            OpenTypeFileBuilder,
            [
               {
                  key: "toArray",
                  value: function toArray() {
                     var sfnt = this.sfnt;
                     var tables = this.tables;
                     var tablesNames = Object.keys(tables);
                     tablesNames.sort();
                     var numTables = tablesNames.length;
                     var i, j, jj, table, tableName;
                     var offset = OTF_HEADER_SIZE + numTables * OTF_TABLE_ENTRY_SIZE;
                     var tableOffsets = [offset];
                     for (i = 0; i < numTables; i++) {
                        table = tables[tablesNames[i]];
                        var paddedLength = ((table.length + 3) & ~3) >>> 0;
                        offset += paddedLength;
                        tableOffsets.push(offset);
                     }
                     var file = new Uint8Array(offset);
                     for (i = 0; i < numTables; i++) {
                        table = tables[tablesNames[i]];
                        writeData(file, tableOffsets[i], table);
                     }
                     if (sfnt === "true") {
                        sfnt = string32(0x00010000);
                     }
                     file[0] = sfnt.charCodeAt(0) & 0xff;
                     file[1] = sfnt.charCodeAt(1) & 0xff;
                     file[2] = sfnt.charCodeAt(2) & 0xff;
                     file[3] = sfnt.charCodeAt(3) & 0xff;
                     writeInt16(file, 4, numTables);
                     var searchParams = OpenTypeFileBuilder.getSearchParams(
                        numTables,
                        16,
                     );
                     writeInt16(file, 6, searchParams.range);
                     writeInt16(file, 8, searchParams.entry);
                     writeInt16(file, 10, searchParams.rangeShift);
                     offset = OTF_HEADER_SIZE;
                     for (i = 0; i < numTables; i++) {
                        tableName = tablesNames[i];
                        file[offset] = tableName.charCodeAt(0) & 0xff;
                        file[offset + 1] = tableName.charCodeAt(1) & 0xff;
                        file[offset + 2] = tableName.charCodeAt(2) & 0xff;
                        file[offset + 3] = tableName.charCodeAt(3) & 0xff;
                        var checksum = 0;
                        for (
                           j = tableOffsets[i], jj = tableOffsets[i + 1];
                           j < jj;
                           j += 4
                        ) {
                           var quad = readUint32(file, j);
                           checksum = (checksum + quad) >>> 0;
                        }
                        writeInt32(file, offset + 4, checksum);
                        writeInt32(file, offset + 8, tableOffsets[i]);
                        writeInt32(file, offset + 12, tables[tableName].length);
                        offset += OTF_TABLE_ENTRY_SIZE;
                     }
                     return file;
                  },
               },
               {
                  key: "addTable",
                  value: function addTable(tag, data) {
                     if (tag in this.tables) {
                        throw new Error("Table " + tag + " already exists");
                     }
                     this.tables[tag] = data;
                  },
               },
            ],
            [
               {
                  key: "getSearchParams",
                  value: function getSearchParams(entriesCount, entrySize) {
                     var maxPower2 = 1,
                        log2 = 0;
                     while ((maxPower2 ^ entriesCount) > maxPower2) {
                        maxPower2 <<= 1;
                        log2++;
                     }
                     var searchRange = maxPower2 * entrySize;
                     return {
                        range: searchRange,
                        entry: log2,
                        rangeShift: entrySize * entriesCount - searchRange,
                     };
                  },
               },
            ],
         );
      })(); // CONCATENATED MODULE: ./src/core/type1_parser.js
      var HINTING_ENABLED = false;
      var COMMAND_MAP = {
         hstem: [1],
         vstem: [3],
         vmoveto: [4],
         rlineto: [5],
         hlineto: [6],
         vlineto: [7],
         rrcurveto: [8],
         callsubr: [10],
         flex: [12, 35],
         drop: [12, 18],
         endchar: [14],
         rmoveto: [21],
         hmoveto: [22],
         vhcurveto: [30],
         hvcurveto: [31],
      };
      var Type1CharString = /*#__PURE__*/ (function () {
         function Type1CharString() {
            _classCallCheck(this, Type1CharString);
            this.width = 0;
            this.lsb = 0;
            this.flexing = false;
            this.output = [];
            this.stack = [];
         }
         return _createClass(Type1CharString, [
            {
               key: "convert",
               value: function convert(encoded, subrs, seacAnalysisEnabled) {
                  var count = encoded.length;
                  var error = false;
                  var wx, sbx, subrNumber;
                  for (var i = 0; i < count; i++) {
                     var value = encoded[i];
                     if (value < 32) {
                        if (value === 12) {
                           value = (value << 8) + encoded[++i];
                        }
                        switch (value) {
                           case 1:
                              if (!HINTING_ENABLED) {
                                 this.stack = [];
                                 break;
                              }
                              error = this.executeCommand(2, COMMAND_MAP.hstem);
                              break;
                           case 3:
                              if (!HINTING_ENABLED) {
                                 this.stack = [];
                                 break;
                              }
                              error = this.executeCommand(2, COMMAND_MAP.vstem);
                              break;
                           case 4:
                              if (this.flexing) {
                                 if (this.stack.length < 1) {
                                    error = true;
                                    break;
                                 }
                                 var dy = this.stack.pop();
                                 this.stack.push(0, dy);
                                 break;
                              }
                              error = this.executeCommand(1, COMMAND_MAP.vmoveto);
                              break;
                           case 5:
                              error = this.executeCommand(2, COMMAND_MAP.rlineto);
                              break;
                           case 6:
                              error = this.executeCommand(1, COMMAND_MAP.hlineto);
                              break;
                           case 7:
                              error = this.executeCommand(1, COMMAND_MAP.vlineto);
                              break;
                           case 8:
                              error = this.executeCommand(6, COMMAND_MAP.rrcurveto);
                              break;
                           case 9:
                              this.stack = [];
                              break;
                           case 10:
                              if (this.stack.length < 1) {
                                 error = true;
                                 break;
                              }
                              subrNumber = this.stack.pop();
                              if (!subrs[subrNumber]) {
                                 error = true;
                                 break;
                              }
                              error = this.convert(
                                 subrs[subrNumber],
                                 subrs,
                                 seacAnalysisEnabled,
                              );
                              break;
                           case 11:
                              return error;
                           case 13:
                              if (this.stack.length < 2) {
                                 error = true;
                                 break;
                              }
                              wx = this.stack.pop();
                              sbx = this.stack.pop();
                              this.lsb = sbx;
                              this.width = wx;
                              this.stack.push(wx, sbx);
                              error = this.executeCommand(2, COMMAND_MAP.hmoveto);
                              break;
                           case 14:
                              this.output.push(COMMAND_MAP.endchar[0]);
                              break;
                           case 21:
                              if (this.flexing) {
                                 break;
                              }
                              error = this.executeCommand(2, COMMAND_MAP.rmoveto);
                              break;
                           case 22:
                              if (this.flexing) {
                                 this.stack.push(0);
                                 break;
                              }
                              error = this.executeCommand(1, COMMAND_MAP.hmoveto);
                              break;
                           case 30:
                              error = this.executeCommand(4, COMMAND_MAP.vhcurveto);
                              break;
                           case 31:
                              error = this.executeCommand(4, COMMAND_MAP.hvcurveto);
                              break;
                           case (12 << 8) + 0:
                              this.stack = [];
                              break;
                           case (12 << 8) + 1:
                              if (!HINTING_ENABLED) {
                                 this.stack = [];
                                 break;
                              }
                              error = this.executeCommand(2, COMMAND_MAP.vstem);
                              break;
                           case (12 << 8) + 2:
                              if (!HINTING_ENABLED) {
                                 this.stack = [];
                                 break;
                              }
                              error = this.executeCommand(2, COMMAND_MAP.hstem);
                              break;
                           case (12 << 8) + 6:
                              if (seacAnalysisEnabled) {
                                 var asb = this.stack.at(-5);
                                 this.seac = this.stack.splice(-4, 4);
                                 this.seac[0] += this.lsb - asb;
                                 error = this.executeCommand(0, COMMAND_MAP.endchar);
                              } else {
                                 error = this.executeCommand(4, COMMAND_MAP.endchar);
                              }
                              break;
                           case (12 << 8) + 7:
                              if (this.stack.length < 4) {
                                 error = true;
                                 break;
                              }
                              this.stack.pop();
                              wx = this.stack.pop();
                              var sby = this.stack.pop();
                              sbx = this.stack.pop();
                              this.lsb = sbx;
                              this.width = wx;
                              this.stack.push(wx, sbx, sby);
                              error = this.executeCommand(3, COMMAND_MAP.rmoveto);
                              break;
                           case (12 << 8) + 12:
                              if (this.stack.length < 2) {
                                 error = true;
                                 break;
                              }
                              var num2 = this.stack.pop();
                              var num1 = this.stack.pop();
                              this.stack.push(num1 / num2);
                              break;
                           case (12 << 8) + 16:
                              if (this.stack.length < 2) {
                                 error = true;
                                 break;
                              }
                              subrNumber = this.stack.pop();
                              var numArgs = this.stack.pop();
                              if (subrNumber === 0 && numArgs === 3) {
                                 var flexArgs = this.stack.splice(-17, 17);
                                 this.stack.push(
                                    flexArgs[2] + flexArgs[0],
                                    flexArgs[3] + flexArgs[1],
                                    flexArgs[4],
                                    flexArgs[5],
                                    flexArgs[6],
                                    flexArgs[7],
                                    flexArgs[8],
                                    flexArgs[9],
                                    flexArgs[10],
                                    flexArgs[11],
                                    flexArgs[12],
                                    flexArgs[13],
                                    flexArgs[14],
                                 );
                                 error = this.executeCommand(13, COMMAND_MAP.flex, true);
                                 this.flexing = false;
                                 this.stack.push(flexArgs[15], flexArgs[16]);
                              } else if (subrNumber === 1 && numArgs === 0) {
                                 this.flexing = true;
                              }
                              break;
                           case (12 << 8) + 17:
                              break;
                           case (12 << 8) + 33:
                              this.stack = [];
                              break;
                           default:
                              warn(
                                 'Unknown type 1 charstring command of "' + value + '"',
                              );
                              break;
                        }
                        if (error) {
                           break;
                        }
                        continue;
                     } else if (value <= 246) {
                        value -= 139;
                     } else if (value <= 250) {
                        value = (value - 247) * 256 + encoded[++i] + 108;
                     } else if (value <= 254) {
                        value = -((value - 251) * 256) - encoded[++i] - 108;
                     } else {
                        value =
                           ((encoded[++i] & 0xff) << 24) |
                           ((encoded[++i] & 0xff) << 16) |
                           ((encoded[++i] & 0xff) << 8) |
                           ((encoded[++i] & 0xff) << 0);
                     }
                     this.stack.push(value);
                  }
                  return error;
               },
            },
            {
               key: "executeCommand",
               value: function executeCommand(howManyArgs, command, keepStack) {
                  var _this$output;
                  var stackLength = this.stack.length;
                  if (howManyArgs > stackLength) {
                     return true;
                  }
                  var start = stackLength - howManyArgs;
                  for (var i = start; i < stackLength; i++) {
                     var value = this.stack[i];
                     if (Number.isInteger(value)) {
                        this.output.push(28, (value >> 8) & 0xff, value & 0xff);
                     } else {
                        value = (65536 * value) | 0;
                        this.output.push(
                           255,
                           (value >> 24) & 0xff,
                           (value >> 16) & 0xff,
                           (value >> 8) & 0xff,
                           value & 0xff,
                        );
                     }
                  }
                  (_this$output = this.output).push.apply(
                     _this$output,
                     _toConsumableArray(command),
                  );
                  if (keepStack) {
                     this.stack.splice(start, howManyArgs);
                  } else {
                     this.stack.length = 0;
                  }
                  return false;
               },
            },
         ]);
      })();
      var EEXEC_ENCRYPT_KEY = 55665;
      var CHAR_STRS_ENCRYPT_KEY = 4330;
      function isHexDigit(code) {
         return (
            (code >= 48 && code <= 57) ||
            (code >= 65 && code <= 70) ||
            (code >= 97 && code <= 102)
         );
      }
      function decrypt(data, key, discardNumber) {
         if (discardNumber >= data.length) {
            return new Uint8Array(0);
         }
         var c1 = 52845,
            c2 = 22719;
         var r = key | 0,
            i,
            j;
         for (i = 0; i < discardNumber; i++) {
            r = ((data[i] + r) * c1 + c2) & ((1 << 16) - 1);
         }
         var count = data.length - discardNumber;
         var decrypted = new Uint8Array(count);
         for (i = discardNumber, j = 0; j < count; i++, j++) {
            var value = data[i];
            decrypted[j] = value ^ (r >> 8);
            r = ((value + r) * c1 + c2) & ((1 << 16) - 1);
         }
         return decrypted;
      }
      function decryptAscii(data, key, discardNumber) {
         var c1 = 52845,
            c2 = 22719;
         var r = key | 0;
         var count = data.length,
            maybeLength = count >>> 1;
         var decrypted = new Uint8Array(maybeLength);
         var i, j;
         for (i = 0, j = 0; i < count; i++) {
            var digit1 = data[i];
            if (!isHexDigit(digit1)) {
               continue;
            }
            i++;
            var digit2 = void 0;
            while (i < count && !isHexDigit((digit2 = data[i]))) {
               i++;
            }
            if (i < count) {
               var value = parseInt(String.fromCharCode(digit1, digit2), 16);
               decrypted[j++] = value ^ (r >> 8);
               r = ((value + r) * c1 + c2) & ((1 << 16) - 1);
            }
         }
         return decrypted.slice(discardNumber, j);
      }
      function isSpecial(c) {
         return (
            c === 0x2f ||
            c === 0x5b ||
            c === 0x5d ||
            c === 0x7b ||
            c === 0x7d ||
            c === 0x28 ||
            c === 0x29
         );
      }
      var Type1Parser = /*#__PURE__*/ (function () {
         function Type1Parser(stream, encrypted, seacAnalysisEnabled) {
            _classCallCheck(this, Type1Parser);
            if (encrypted) {
               var data = stream.getBytes();
               var isBinary = !(
                  (isHexDigit(data[0]) || isWhiteSpace(data[0])) &&
                  isHexDigit(data[1]) &&
                  isHexDigit(data[2]) &&
                  isHexDigit(data[3]) &&
                  isHexDigit(data[4]) &&
                  isHexDigit(data[5]) &&
                  isHexDigit(data[6]) &&
                  isHexDigit(data[7])
               );
               stream = new Stream(
                  isBinary
                     ? decrypt(data, EEXEC_ENCRYPT_KEY, 4)
                     : decryptAscii(data, EEXEC_ENCRYPT_KEY, 4),
               );
            }
            this.seacAnalysisEnabled = !!seacAnalysisEnabled;
            this.stream = stream;
            this.nextChar();
         }
         return _createClass(Type1Parser, [
            {
               key: "readNumberArray",
               value: function readNumberArray() {
                  this.getToken();
                  var array = [];
                  while (true) {
                     var token = this.getToken();
                     if (token === null || token === "]" || token === "}") {
                        break;
                     }
                     array.push(parseFloat(token || 0));
                  }
                  return array;
               },
            },
            {
               key: "readNumber",
               value: function readNumber() {
                  var token = this.getToken();
                  return parseFloat(token || 0);
               },
            },
            {
               key: "readInt",
               value: function readInt() {
                  var token = this.getToken();
                  return parseInt(token || 0, 10) | 0;
               },
            },
            {
               key: "readBoolean",
               value: function readBoolean() {
                  var token = this.getToken();
                  return token === "true" ? 1 : 0;
               },
            },
            {
               key: "nextChar",
               value: function nextChar() {
                  return (this.currentChar = this.stream.getByte());
               },
            },
            {
               key: "prevChar",
               value: function prevChar() {
                  this.stream.skip(-2);
                  return (this.currentChar = this.stream.getByte());
               },
            },
            {
               key: "getToken",
               value: function getToken() {
                  var comment = false;
                  var ch = this.currentChar;
                  while (true) {
                     if (ch === -1) {
                        return null;
                     }
                     if (comment) {
                        if (ch === 0x0a || ch === 0x0d) {
                           comment = false;
                        }
                     } else if (ch === 0x25) {
                        comment = true;
                     } else if (!isWhiteSpace(ch)) {
                        break;
                     }
                     ch = this.nextChar();
                  }
                  if (isSpecial(ch)) {
                     this.nextChar();
                     return String.fromCharCode(ch);
                  }
                  var token = "";
                  do {
                     token += String.fromCharCode(ch);
                     ch = this.nextChar();
                  } while (ch >= 0 && !isWhiteSpace(ch) && !isSpecial(ch));
                  return token;
               },
            },
            {
               key: "readCharStrings",
               value: function readCharStrings(bytes, lenIV) {
                  if (lenIV === -1) {
                     return bytes;
                  }
                  return decrypt(bytes, CHAR_STRS_ENCRYPT_KEY, lenIV);
               },
            },
            {
               key: "extractFontProgram",
               value: function extractFontProgram(properties) {
                  var stream = this.stream;
                  var subrs = [],
                     charstrings = [];
                  var privateData = Object.create(null);
                  privateData.lenIV = 4;
                  var program = {
                     subrs: [],
                     charstrings: [],
                     properties: { privateData: privateData },
                  };
                  var token, length, data, lenIV;
                  while ((token = this.getToken()) !== null) {
                     if (token !== "/") {
                        continue;
                     }
                     token = this.getToken();
                     switch (token) {
                        case "CharStrings":
                           this.getToken();
                           this.getToken();
                           this.getToken();
                           this.getToken();
                           while (true) {
                              token = this.getToken();
                              if (token === null || token === "end") {
                                 break;
                              }
                              if (token !== "/") {
                                 continue;
                              }
                              var glyph = this.getToken();
                              length = this.readInt();
                              this.getToken();
                              data =
                                 length > 0 ? stream.getBytes(length) : new Uint8Array(0);
                              lenIV = program.properties.privateData.lenIV;
                              var encoded = this.readCharStrings(data, lenIV);
                              this.nextChar();
                              token = this.getToken();
                              if (token === "noaccess") {
                                 this.getToken();
                              } else if (token === "/") {
                                 this.prevChar();
                              }
                              charstrings.push({ glyph: glyph, encoded: encoded });
                           }
                           break;
                        case "Subrs":
                           this.readInt();
                           this.getToken();
                           while (this.getToken() === "dup") {
                              var index = this.readInt();
                              length = this.readInt();
                              this.getToken();
                              data =
                                 length > 0 ? stream.getBytes(length) : new Uint8Array(0);
                              lenIV = program.properties.privateData.lenIV;
                              var _encoded = this.readCharStrings(data, lenIV);
                              this.nextChar();
                              token = this.getToken();
                              if (token === "noaccess") {
                                 this.getToken();
                              }
                              subrs[index] = _encoded;
                           }
                           break;
                        case "BlueValues":
                        case "OtherBlues":
                        case "FamilyBlues":
                        case "FamilyOtherBlues":
                           var blueArray = this.readNumberArray();
                           if (
                              blueArray.length > 0 &&
                              blueArray.length % 2 === 0 &&
                              HINTING_ENABLED
                           ) {
                              program.properties.privateData[token] = blueArray;
                           }
                           break;
                        case "StemSnapH":
                        case "StemSnapV":
                           program.properties.privateData[token] =
                              this.readNumberArray();
                           break;
                        case "StdHW":
                        case "StdVW":
                           program.properties.privateData[token] =
                              this.readNumberArray()[0];
                           break;
                        case "BlueShift":
                        case "lenIV":
                        case "BlueFuzz":
                        case "BlueScale":
                        case "LanguageGroup":
                           program.properties.privateData[token] = this.readNumber();
                           break;
                        case "ExpansionFactor":
                           program.properties.privateData[token] =
                              this.readNumber() || 0.06;
                           break;
                        case "ForceBold":
                           program.properties.privateData[token] = this.readBoolean();
                           break;
                     }
                  }
                  for (
                     var _i24 = 0, _charstrings = charstrings;
                     _i24 < _charstrings.length;
                     _i24++
                  ) {
                     var _charstrings$_i = _charstrings[_i24],
                        _encoded2 = _charstrings$_i.encoded,
                        _glyph = _charstrings$_i.glyph;
                     var charString = new Type1CharString();
                     var error = charString.convert(
                        _encoded2,
                        subrs,
                        this.seacAnalysisEnabled,
                     );
                     var output = charString.output;
                     if (error) {
                        output = [14];
                     }
                     var charStringObject = {
                        glyphName: _glyph,
                        charstring: output,
                        width: charString.width,
                        lsb: charString.lsb,
                        seac: charString.seac,
                     };
                     if (_glyph === ".notdef") {
                        program.charstrings.unshift(charStringObject);
                     } else {
                        program.charstrings.push(charStringObject);
                     }
                     if (properties.builtInEncoding) {
                        var _index = properties.builtInEncoding.indexOf(_glyph);
                        if (
                           _index > -1 &&
                           properties.widths[_index] === undefined &&
                           _index >= properties.firstChar &&
                           _index <= properties.lastChar
                        ) {
                           properties.widths[_index] = charString.width;
                        }
                     }
                  }
                  return program;
               },
            },
            {
               key: "extractFontHeader",
               value: function extractFontHeader(properties) {
                  var token;
                  while ((token = this.getToken()) !== null) {
                     if (token !== "/") {
                        continue;
                     }
                     token = this.getToken();
                     switch (token) {
                        case "FontMatrix":
                           var matrix = this.readNumberArray();
                           properties.fontMatrix = matrix;
                           break;
                        case "Encoding":
                           var encodingArg = this.getToken();
                           var encoding = void 0;
                           if (!/^\d+$/.test(encodingArg)) {
                              encoding = getEncoding(encodingArg);
                           } else {
                              encoding = [];
                              var size = parseInt(encodingArg, 10) | 0;
                              this.getToken();
                              for (var j = 0; j < size; j++) {
                                 token = this.getToken();
                                 while (token !== "dup" && token !== "def") {
                                    token = this.getToken();
                                    if (token === null) {
                                       return;
                                    }
                                 }
                                 if (token === "def") {
                                    break;
                                 }
                                 var index = this.readInt();
                                 this.getToken();
                                 var glyph = this.getToken();
                                 encoding[index] = glyph;
                                 this.getToken();
                              }
                           }
                           properties.builtInEncoding = encoding;
                           break;
                        case "FontBBox":
                           var fontBBox = this.readNumberArray();
                           properties.ascent = Math.max(fontBBox[3], fontBBox[1]);
                           properties.descent = Math.min(fontBBox[1], fontBBox[3]);
                           properties.ascentScaled = true;
                           break;
                     }
                  }
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/type1_font.js
      function findBlock(streamBytes, signature, startIndex) {
         var streamBytesLength = streamBytes.length;
         var signatureLength = signature.length;
         var scanLength = streamBytesLength - signatureLength;
         var i = startIndex,
            found = false;
         while (i < scanLength) {
            var j = 0;
            while (j < signatureLength && streamBytes[i + j] === signature[j]) {
               j++;
            }
            if (j >= signatureLength) {
               i += j;
               while (i < streamBytesLength && isWhiteSpace(streamBytes[i])) {
                  i++;
               }
               found = true;
               break;
            }
            i++;
         }
         return { found: found, length: i };
      }
      function getHeaderBlock(stream, suggestedLength) {
         var EEXEC_SIGNATURE = [0x65, 0x65, 0x78, 0x65, 0x63];
         var streamStartPos = stream.pos;
         var headerBytes, headerBytesLength, block;
         try {
            headerBytes = stream.getBytes(suggestedLength);
            headerBytesLength = headerBytes.length;
         } catch (_unused6) {}
         if (headerBytesLength === suggestedLength) {
            block = findBlock(
               headerBytes,
               EEXEC_SIGNATURE,
               suggestedLength - 2 * EEXEC_SIGNATURE.length,
            );
            if (block.found && block.length === suggestedLength) {
               return { stream: new Stream(headerBytes), length: suggestedLength };
            }
         }
         warn('Invalid "Length1" property in Type1 font -- trying to recover.');
         stream.pos = streamStartPos;
         var SCAN_BLOCK_LENGTH = 2048;
         var actualLength;
         while (true) {
            var scanBytes = stream.peekBytes(SCAN_BLOCK_LENGTH);
            block = findBlock(scanBytes, EEXEC_SIGNATURE, 0);
            if (block.length === 0) {
               break;
            }
            stream.pos += block.length;
            if (block.found) {
               actualLength = stream.pos - streamStartPos;
               break;
            }
         }
         stream.pos = streamStartPos;
         if (actualLength) {
            return {
               stream: new Stream(stream.getBytes(actualLength)),
               length: actualLength,
            };
         }
         warn(
            'Unable to recover "Length1" property in Type1 font -- using as is.',
         );
         return {
            stream: new Stream(stream.getBytes(suggestedLength)),
            length: suggestedLength,
         };
      }
      function getEexecBlock(stream, suggestedLength) {
         var eexecBytes = stream.getBytes();
         if (eexecBytes.length === 0) {
            throw new FormatError("getEexecBlock - no font program found.");
         }
         return { stream: new Stream(eexecBytes), length: eexecBytes.length };
      }
      var Type1Font = /*#__PURE__*/ (function () {
         function Type1Font(name, file, properties) {
            _classCallCheck(this, Type1Font);
            var PFB_HEADER_SIZE = 6;
            var headerBlockLength = properties.length1;
            var eexecBlockLength = properties.length2;
            var pfbHeader = file.peekBytes(PFB_HEADER_SIZE);
            var pfbHeaderPresent = pfbHeader[0] === 0x80 && pfbHeader[1] === 0x01;
            if (pfbHeaderPresent) {
               file.skip(PFB_HEADER_SIZE);
               headerBlockLength =
                  (pfbHeader[5] << 24) |
                  (pfbHeader[4] << 16) |
                  (pfbHeader[3] << 8) |
                  pfbHeader[2];
            }
            var headerBlock = getHeaderBlock(file, headerBlockLength);
            var headerBlockParser = new Type1Parser(
               headerBlock.stream,
               false,
               SEAC_ANALYSIS_ENABLED,
            );
            headerBlockParser.extractFontHeader(properties);
            if (pfbHeaderPresent) {
               pfbHeader = file.getBytes(PFB_HEADER_SIZE);
               eexecBlockLength =
                  (pfbHeader[5] << 24) |
                  (pfbHeader[4] << 16) |
                  (pfbHeader[3] << 8) |
                  pfbHeader[2];
            }
            var eexecBlock = getEexecBlock(file, eexecBlockLength);
            var eexecBlockParser = new Type1Parser(
               eexecBlock.stream,
               true,
               SEAC_ANALYSIS_ENABLED,
            );
            var data = eexecBlockParser.extractFontProgram(properties);
            for (var key in data.properties) {
               properties[key] = data.properties[key];
            }
            var charstrings = data.charstrings;
            var type2Charstrings = this.getType2Charstrings(charstrings);
            var subrs = this.getType2Subrs(data.subrs);
            this.charstrings = charstrings;
            this.data = this.wrap(
               name,
               type2Charstrings,
               this.charstrings,
               subrs,
               properties,
            );
            this.seacs = this.getSeacs(data.charstrings);
         }
         return _createClass(Type1Font, [
            {
               key: "numGlyphs",
               get: function get() {
                  return this.charstrings.length + 1;
               },
            },
            {
               key: "getCharset",
               value: function getCharset() {
                  var charset = [".notdef"];
                  var _iterator38 = _createForOfIteratorHelper(this.charstrings),
                     _step38;
                  try {
                     for (_iterator38.s(); !(_step38 = _iterator38.n()).done; ) {
                        var glyphName = _step38.value.glyphName;
                        charset.push(glyphName);
                     }
                  } catch (err) {
                     _iterator38.e(err);
                  } finally {
                     _iterator38.f();
                  }
                  return charset;
               },
            },
            {
               key: "getGlyphMapping",
               value: function getGlyphMapping(properties) {
                  var charstrings = this.charstrings;
                  if (properties.composite) {
                     var charCodeToGlyphId = Object.create(null);
                     for (
                        var _glyphId = 0, charstringsLen = charstrings.length;
                        _glyphId < charstringsLen;
                        _glyphId++
                     ) {
                        var charCode = properties.cMap.charCodeOf(_glyphId);
                        charCodeToGlyphId[charCode] = _glyphId + 1;
                     }
                     return charCodeToGlyphId;
                  }
                  var glyphNames = [".notdef"];
                  var builtInEncoding, glyphId;
                  for (glyphId = 0; glyphId < charstrings.length; glyphId++) {
                     glyphNames.push(charstrings[glyphId].glyphName);
                  }
                  var encoding = properties.builtInEncoding;
                  if (encoding) {
                     builtInEncoding = Object.create(null);
                     for (var _charCode in encoding) {
                        glyphId = glyphNames.indexOf(encoding[_charCode]);
                        if (glyphId >= 0) {
                           builtInEncoding[_charCode] = glyphId;
                        }
                     }
                  }
                  return type1FontGlyphMapping(
                     properties,
                     builtInEncoding,
                     glyphNames,
                  );
               },
            },
            {
               key: "hasGlyphId",
               value: function hasGlyphId(id) {
                  if (id < 0 || id >= this.numGlyphs) {
                     return false;
                  }
                  if (id === 0) {
                     return true;
                  }
                  var glyph = this.charstrings[id - 1];
                  return glyph.charstring.length > 0;
               },
            },
            {
               key: "getSeacs",
               value: function getSeacs(charstrings) {
                  var seacMap = [];
                  for (var i = 0, ii = charstrings.length; i < ii; i++) {
                     var charstring = charstrings[i];
                     if (charstring.seac) {
                        seacMap[i + 1] = charstring.seac;
                     }
                  }
                  return seacMap;
               },
            },
            {
               key: "getType2Charstrings",
               value: function getType2Charstrings(type1Charstrings) {
                  var type2Charstrings = [];
                  var _iterator39 = _createForOfIteratorHelper(type1Charstrings),
                     _step39;
                  try {
                     for (_iterator39.s(); !(_step39 = _iterator39.n()).done; ) {
                        var type1Charstring = _step39.value;
                        type2Charstrings.push(type1Charstring.charstring);
                     }
                  } catch (err) {
                     _iterator39.e(err);
                  } finally {
                     _iterator39.f();
                  }
                  return type2Charstrings;
               },
            },
            {
               key: "getType2Subrs",
               value: function getType2Subrs(type1Subrs) {
                  var bias = 0;
                  var count = type1Subrs.length;
                  if (count < 1133) {
                     bias = 107;
                  } else if (count < 33769) {
                     bias = 1131;
                  } else {
                     bias = 32768;
                  }
                  var type2Subrs = [];
                  var i;
                  for (i = 0; i < bias; i++) {
                     type2Subrs.push([0x0b]);
                  }
                  for (i = 0; i < count; i++) {
                     type2Subrs.push(type1Subrs[i]);
                  }
                  return type2Subrs;
               },
            },
            {
               key: "wrap",
               value: function wrap(name, glyphs, charstrings, subrs, properties) {
                  var cff = new CFF();
                  cff.header = new CFFHeader(1, 0, 4, 4);
                  cff.names = [name];
                  var topDict = new CFFTopDict();
                  topDict.setByName("version", 391);
                  topDict.setByName("Notice", 392);
                  topDict.setByName("FullName", 393);
                  topDict.setByName("FamilyName", 394);
                  topDict.setByName("Weight", 395);
                  topDict.setByName("Encoding", null);
                  topDict.setByName("FontMatrix", properties.fontMatrix);
                  topDict.setByName("FontBBox", properties.bbox);
                  topDict.setByName("charset", null);
                  topDict.setByName("CharStrings", null);
                  topDict.setByName("Private", null);
                  cff.topDict = topDict;
                  var strings = new CFFStrings();
                  strings.add("Version 0.11");
                  strings.add("See original notice");
                  strings.add(name);
                  strings.add(name);
                  strings.add("Medium");
                  cff.strings = strings;
                  cff.globalSubrIndex = new CFFIndex();
                  var count = glyphs.length;
                  var charsetArray = [".notdef"];
                  var i, ii;
                  for (i = 0; i < count; i++) {
                     var glyphName = charstrings[i].glyphName;
                     var index = CFFStandardStrings.indexOf(glyphName);
                     if (index === -1) {
                        strings.add(glyphName);
                     }
                     charsetArray.push(glyphName);
                  }
                  cff.charset = new CFFCharset(false, 0, charsetArray);
                  var charStringsIndex = new CFFIndex();
                  charStringsIndex.add([0x8b, 0x0e]);
                  for (i = 0; i < count; i++) {
                     charStringsIndex.add(glyphs[i]);
                  }
                  cff.charStrings = charStringsIndex;
                  var privateDict = new CFFPrivateDict();
                  privateDict.setByName("Subrs", null);
                  var fields = [
                     "BlueValues",
                     "OtherBlues",
                     "FamilyBlues",
                     "FamilyOtherBlues",
                     "StemSnapH",
                     "StemSnapV",
                     "BlueShift",
                     "BlueFuzz",
                     "BlueScale",
                     "LanguageGroup",
                     "ExpansionFactor",
                     "ForceBold",
                     "StdHW",
                     "StdVW",
                  ];
                  for (i = 0, ii = fields.length; i < ii; i++) {
                     var field = fields[i];
                     if (!(field in properties.privateData)) {
                        continue;
                     }
                     var value = properties.privateData[field];
                     if (Array.isArray(value)) {
                        for (var j = value.length - 1; j > 0; j--) {
                           value[j] -= value[j - 1];
                        }
                     }
                     privateDict.setByName(field, value);
                  }
                  cff.topDict.privateDict = privateDict;
                  var subrIndex = new CFFIndex();
                  for (i = 0, ii = subrs.length; i < ii; i++) {
                     subrIndex.add(subrs[i]);
                  }
                  privateDict.subrsIndex = subrIndex;
                  var compiler = new CFFCompiler(cff);
                  return compiler.compile();
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/fonts.js
      var PRIVATE_USE_AREAS = [
         [0xe000, 0xf8ff],
         [0x100000, 0x10fffd],
      ];
      var PDF_GLYPH_SPACE_UNITS = 1000;
      var EXPORT_DATA_PROPERTIES = [
         "ascent",
         "bbox",
         "black",
         "bold",
         "charProcOperatorList",
         "composite",
         "cssFontInfo",
         "data",
         "defaultVMetrics",
         "defaultWidth",
         "descent",
         "fallbackName",
         "fontMatrix",
         "isInvalidPDFjsFont",
         "isType3Font",
         "italic",
         "loadedName",
         "mimetype",
         "missingFile",
         "name",
         "remeasure",
         "subtype",
         "systemFontInfo",
         "type",
         "vertical",
      ];
      var EXPORT_DATA_EXTRA_PROPERTIES = [
         "cMap",
         "defaultEncoding",
         "differences",
         "isMonospace",
         "isSerifFont",
         "isSymbolicFont",
         "seacMap",
         "toFontChar",
         "toUnicode",
         "vmetrics",
         "widths",
      ];
      function adjustWidths(properties) {
         if (!properties.fontMatrix) {
            return;
         }
         if (properties.fontMatrix[0] === FONT_IDENTITY_MATRIX[0]) {
            return;
         }
         var scale = 0.001 / properties.fontMatrix[0];
         var glyphsWidths = properties.widths;
         for (var glyph in glyphsWidths) {
            glyphsWidths[glyph] *= scale;
         }
         properties.defaultWidth *= scale;
      }
      function adjustTrueTypeToUnicode(properties, isSymbolicFont, nameRecords) {
         if (properties.isInternalFont) {
            return;
         }
         if (properties.hasIncludedToUnicodeMap) {
            return;
         }
         if (properties.hasEncoding) {
            return;
         }
         if (properties.toUnicode instanceof IdentityToUnicodeMap) {
            return;
         }
         if (!isSymbolicFont) {
            return;
         }
         if (nameRecords.length === 0) {
            return;
         }
         if (properties.defaultEncoding === WinAnsiEncoding) {
            return;
         }
         var _iterator40 = _createForOfIteratorHelper(nameRecords),
            _step40;
         try {
            for (_iterator40.s(); !(_step40 = _iterator40.n()).done; ) {
               var r = _step40.value;
               if (!isWinNameRecord(r)) {
                  return;
               }
            }
         } catch (err) {
            _iterator40.e(err);
         } finally {
            _iterator40.f();
         }
         var encoding = WinAnsiEncoding;
         var toUnicode = [],
            glyphsUnicodeMap = getGlyphsUnicode();
         for (var charCode in encoding) {
            var glyphName = encoding[charCode];
            if (glyphName === "") {
               continue;
            }
            var unicode = glyphsUnicodeMap[glyphName];
            if (unicode === undefined) {
               continue;
            }
            toUnicode[charCode] = String.fromCharCode(unicode);
         }
         if (toUnicode.length > 0) {
            properties.toUnicode.amend(toUnicode);
         }
      }
      function adjustType1ToUnicode(properties, builtInEncoding) {
         if (properties.isInternalFont) {
            return;
         }
         if (properties.hasIncludedToUnicodeMap) {
            return;
         }
         if (builtInEncoding === properties.defaultEncoding) {
            return;
         }
         if (properties.toUnicode instanceof IdentityToUnicodeMap) {
            return;
         }
         var toUnicode = [],
            glyphsUnicodeMap = getGlyphsUnicode();
         for (var charCode in builtInEncoding) {
            if (properties.hasEncoding) {
               if (
                  properties.baseEncodingName ||
                  properties.differences[charCode] !== undefined
               ) {
                  continue;
               }
            }
            var glyphName = builtInEncoding[charCode];
            var unicode = getUnicodeForGlyph(glyphName, glyphsUnicodeMap);
            if (unicode !== -1) {
               toUnicode[charCode] = String.fromCharCode(unicode);
            }
         }
         if (toUnicode.length > 0) {
            properties.toUnicode.amend(toUnicode);
         }
      }
      function amendFallbackToUnicode(properties) {
         if (!properties.fallbackToUnicode) {
            return;
         }
         if (properties.toUnicode instanceof IdentityToUnicodeMap) {
            return;
         }
         var toUnicode = [];
         for (var charCode in properties.fallbackToUnicode) {
            if (properties.toUnicode.has(charCode)) {
               continue;
            }
            toUnicode[charCode] = properties.fallbackToUnicode[charCode];
         }
         if (toUnicode.length > 0) {
            properties.toUnicode.amend(toUnicode);
         }
      }
      var fonts_Glyph = /*#__PURE__*/ (function () {
         function fonts_Glyph(
            originalCharCode,
            fontChar,
            unicode,
            accent,
            width,
            vmetric,
            operatorListId,
            isSpace,
            isInFont,
         ) {
            _classCallCheck(this, fonts_Glyph);
            this.originalCharCode = originalCharCode;
            this.fontChar = fontChar;
            this.unicode = unicode;
            this.accent = accent;
            this.width = width;
            this.vmetric = vmetric;
            this.operatorListId = operatorListId;
            this.isSpace = isSpace;
            this.isInFont = isInFont;
         }
         return _createClass(fonts_Glyph, [
            {
               key: "category",
               get: function get() {
                  return shadow(
                     this,
                     "category",
                     getCharUnicodeCategory(this.unicode),
                     true,
                  );
               },
            },
         ]);
      })();
      function int16(b0, b1) {
         return (b0 << 8) + b1;
      }
      function writeSignedInt16(bytes, index, value) {
         bytes[index + 1] = value;
         bytes[index] = value >>> 8;
      }
      function signedInt16(b0, b1) {
         var value = (b0 << 8) + b1;
         return value & (1 << 15) ? value - 0x10000 : value;
      }
      function writeUint32(bytes, index, value) {
         bytes[index + 3] = value & 0xff;
         bytes[index + 2] = value >>> 8;
         bytes[index + 1] = value >>> 16;
         bytes[index] = value >>> 24;
      }
      function int32(b0, b1, b2, b3) {
         return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;
      }
      function string16(value) {
         return String.fromCharCode((value >> 8) & 0xff, value & 0xff);
      }
      function safeString16(value) {
         if (value > 0x7fff) {
            value = 0x7fff;
         } else if (value < -0x8000) {
            value = -0x8000;
         }
         return String.fromCharCode((value >> 8) & 0xff, value & 0xff);
      }
      function isTrueTypeFile(file) {
         var header = file.peekBytes(4);
         return (
            readUint32(header, 0) === 0x00010000 || bytesToString(header) === "true"
         );
      }
      function isTrueTypeCollectionFile(file) {
         var header = file.peekBytes(4);
         return bytesToString(header) === "ttcf";
      }
      function isOpenTypeFile(file) {
         var header = file.peekBytes(4);
         return bytesToString(header) === "OTTO";
      }
      function isType1File(file) {
         var header = file.peekBytes(2);
         if (header[0] === 0x25 && header[1] === 0x21) {
            return true;
         }
         if (header[0] === 0x80 && header[1] === 0x01) {
            return true;
         }
         return false;
      }
      function isCFFFile(file) {
         var header = file.peekBytes(4);
         if (header[0] >= 1 && header[3] >= 1 && header[3] <= 4) {
            return true;
         }
         return false;
      }
      function getFontFileType(file, _ref30) {
         var type = _ref30.type,
            subtype = _ref30.subtype,
            composite = _ref30.composite;
         var fileType, fileSubtype;
         if (isTrueTypeFile(file) || isTrueTypeCollectionFile(file)) {
            fileType = composite ? "CIDFontType2" : "TrueType";
         } else if (isOpenTypeFile(file)) {
            fileType = composite ? "CIDFontType2" : "OpenType";
         } else if (isType1File(file)) {
            if (composite) {
               fileType = "CIDFontType0";
            } else {
               fileType = type === "MMType1" ? "MMType1" : "Type1";
            }
         } else if (isCFFFile(file)) {
            if (composite) {
               fileType = "CIDFontType0";
               fileSubtype = "CIDFontType0C";
            } else {
               fileType = type === "MMType1" ? "MMType1" : "Type1";
               fileSubtype = "Type1C";
            }
         } else {
            warn(
               "getFontFileType: Unable to detect correct font file Type/Subtype.",
            );
            fileType = type;
            fileSubtype = subtype;
         }
         return [fileType, fileSubtype];
      }
      function applyStandardFontGlyphMap(map, glyphMap) {
         for (var charCode in glyphMap) {
            map[+charCode] = glyphMap[charCode];
         }
      }
      function buildToFontChar(encoding, glyphsUnicodeMap, differences) {
         var toFontChar = [];
         var unicode;
         for (var i = 0, ii = encoding.length; i < ii; i++) {
            unicode = getUnicodeForGlyph(encoding[i], glyphsUnicodeMap);
            if (unicode !== -1) {
               toFontChar[i] = unicode;
            }
         }
         for (var charCode in differences) {
            unicode = getUnicodeForGlyph(differences[charCode], glyphsUnicodeMap);
            if (unicode !== -1) {
               toFontChar[+charCode] = unicode;
            }
         }
         return toFontChar;
      }
      function isMacNameRecord(r) {
         return r.platform === 1 && r.encoding === 0 && r.language === 0;
      }
      function isWinNameRecord(r) {
         return r.platform === 3 && r.encoding === 1 && r.language === 0x409;
      }
      function convertCidString(charCode, cid) {
         var shouldThrow =
            arguments.length > 2 && arguments[2] !== undefined
               ? arguments[2]
               : false;
         switch (cid.length) {
            case 1:
               return cid.charCodeAt(0);
            case 2:
               return (cid.charCodeAt(0) << 8) | cid.charCodeAt(1);
         }
         var msg = "Unsupported CID string (charCode "
            .concat(charCode, '): "')
            .concat(cid, '".');
         if (shouldThrow) {
            throw new FormatError(msg);
         }
         warn(msg);
         return cid;
      }
      function adjustMapping(
         charCodeToGlyphId,
         hasGlyph,
         newGlyphZeroId,
         toUnicode,
      ) {
         var newMap = Object.create(null);
         var toUnicodeExtraMap = new Map();
         var toFontChar = [];
         var usedGlyphIds = new Set();
         var privateUseAreaIndex = 0;
         var privateUseOffetStart = PRIVATE_USE_AREAS[privateUseAreaIndex][0];
         var nextAvailableFontCharCode = privateUseOffetStart;
         var privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];
         var isInPrivateArea = function isInPrivateArea(code) {
            return (
               (PRIVATE_USE_AREAS[0][0] <= code &&
                  code <= PRIVATE_USE_AREAS[0][1]) ||
               (PRIVATE_USE_AREAS[1][0] <= code && code <= PRIVATE_USE_AREAS[1][1])
            );
         };
         for (var originalCharCode in charCodeToGlyphId) {
            originalCharCode |= 0;
            var glyphId = charCodeToGlyphId[originalCharCode];
            if (!hasGlyph(glyphId)) {
               continue;
            }
            if (nextAvailableFontCharCode > privateUseOffetEnd) {
               privateUseAreaIndex++;
               if (privateUseAreaIndex >= PRIVATE_USE_AREAS.length) {
                  warn("Ran out of space in font private use area.");
                  break;
               }
               nextAvailableFontCharCode = PRIVATE_USE_AREAS[privateUseAreaIndex][0];
               privateUseOffetEnd = PRIVATE_USE_AREAS[privateUseAreaIndex][1];
            }
            var fontCharCode = nextAvailableFontCharCode++;
            if (glyphId === 0) {
               glyphId = newGlyphZeroId;
            }
            var unicode = toUnicode.get(originalCharCode);
            if (typeof unicode === "string") {
               unicode = unicode.codePointAt(0);
            }
            if (
               unicode &&
               !isInPrivateArea(unicode) &&
               !usedGlyphIds.has(glyphId)
            ) {
               toUnicodeExtraMap.set(unicode, glyphId);
               usedGlyphIds.add(glyphId);
            }
            newMap[fontCharCode] = glyphId;
            toFontChar[originalCharCode] = fontCharCode;
         }
         return {
            toFontChar: toFontChar,
            charCodeToGlyphId: newMap,
            toUnicodeExtraMap: toUnicodeExtraMap,
            nextAvailableFontCharCode: nextAvailableFontCharCode,
         };
      }
      function getRanges(glyphs, toUnicodeExtraMap, numGlyphs) {
         var codes = [];
         for (var charCode in glyphs) {
            if (glyphs[charCode] >= numGlyphs) {
               continue;
            }
            codes.push({ fontCharCode: charCode | 0, glyphId: glyphs[charCode] });
         }
         if (toUnicodeExtraMap) {
            var _iterator41 = _createForOfIteratorHelper(toUnicodeExtraMap),
               _step41;
            try {
               for (_iterator41.s(); !(_step41 = _iterator41.n()).done; ) {
                  var _step41$value = _slicedToArray(_step41.value, 2),
                     unicode = _step41$value[0],
                     glyphId = _step41$value[1];
                  if (glyphId >= numGlyphs) {
                     continue;
                  }
                  codes.push({ fontCharCode: unicode, glyphId: glyphId });
               }
            } catch (err) {
               _iterator41.e(err);
            } finally {
               _iterator41.f();
            }
         }
         if (codes.length === 0) {
            codes.push({ fontCharCode: 0, glyphId: 0 });
         }
         codes.sort(function fontGetRangesSort(a, b) {
            return a.fontCharCode - b.fontCharCode;
         });
         var ranges = [];
         var length = codes.length;
         for (var n = 0; n < length; ) {
            var start = codes[n].fontCharCode;
            var codeIndices = [codes[n].glyphId];
            ++n;
            var end = start;
            while (n < length && end + 1 === codes[n].fontCharCode) {
               codeIndices.push(codes[n].glyphId);
               ++end;
               ++n;
               if (end === 0xffff) {
                  break;
               }
            }
            ranges.push([start, end, codeIndices]);
         }
         return ranges;
      }
      function createCmapTable(glyphs, toUnicodeExtraMap, numGlyphs) {
         var ranges = getRanges(glyphs, toUnicodeExtraMap, numGlyphs);
         var numTables = ranges.at(-1)[1] > 0xffff ? 2 : 1;
         var cmap =
            "\x00\x00" +
            string16(numTables) +
            "\x00\x03" +
            "\x00\x01" +
            string32(4 + numTables * 8);
         var i, ii, j, jj;
         for (i = ranges.length - 1; i >= 0; --i) {
            if (ranges[i][0] <= 0xffff) {
               break;
            }
         }
         var bmpLength = i + 1;
         if (ranges[i][0] < 0xffff && ranges[i][1] === 0xffff) {
            ranges[i][1] = 0xfffe;
         }
         var trailingRangesCount = ranges[i][1] < 0xffff ? 1 : 0;
         var segCount = bmpLength + trailingRangesCount;
         var searchParams = OpenTypeFileBuilder.getSearchParams(segCount, 2);
         var startCount = "";
         var endCount = "";
         var idDeltas = "";
         var idRangeOffsets = "";
         var glyphsIds = "";
         var bias = 0;
         var range, start, end, codes;
         for (i = 0, ii = bmpLength; i < ii; i++) {
            range = ranges[i];
            start = range[0];
            end = range[1];
            startCount += string16(start);
            endCount += string16(end);
            codes = range[2];
            var contiguous = true;
            for (j = 1, jj = codes.length; j < jj; ++j) {
               if (codes[j] !== codes[j - 1] + 1) {
                  contiguous = false;
                  break;
               }
            }
            if (!contiguous) {
               var offset = (segCount - i) * 2 + bias * 2;
               bias += end - start + 1;
               idDeltas += string16(0);
               idRangeOffsets += string16(offset);
               for (j = 0, jj = codes.length; j < jj; ++j) {
                  glyphsIds += string16(codes[j]);
               }
            } else {
               var startCode = codes[0];
               idDeltas += string16((startCode - start) & 0xffff);
               idRangeOffsets += string16(0);
            }
         }
         if (trailingRangesCount > 0) {
            endCount += "\xFF\xFF";
            startCount += "\xFF\xFF";
            idDeltas += "\x00\x01";
            idRangeOffsets += "\x00\x00";
         }
         var format314 =
            "\x00\x00" +
            string16(2 * segCount) +
            string16(searchParams.range) +
            string16(searchParams.entry) +
            string16(searchParams.rangeShift) +
            endCount +
            "\x00\x00" +
            startCount +
            idDeltas +
            idRangeOffsets +
            glyphsIds;
         var format31012 = "";
         var header31012 = "";
         if (numTables > 1) {
            cmap +=
               "\x00\x03" +
               "\x00\x0A" +
               string32(4 + numTables * 8 + 4 + format314.length);
            format31012 = "";
            for (i = 0, ii = ranges.length; i < ii; i++) {
               range = ranges[i];
               start = range[0];
               codes = range[2];
               var code = codes[0];
               for (j = 1, jj = codes.length; j < jj; ++j) {
                  if (codes[j] !== codes[j - 1] + 1) {
                     end = range[0] + j - 1;
                     format31012 += string32(start) + string32(end) + string32(code);
                     start = end + 1;
                     code = codes[j];
                  }
               }
               format31012 += string32(start) + string32(range[1]) + string32(code);
            }
            header31012 =
               "\x00\x0C" +
               "\x00\x00" +
               string32(format31012.length + 16) +
               "\x00\x00\x00\x00" +
               string32(format31012.length / 12);
         }
         return (
            cmap +
            "\x00\x04" +
            string16(format314.length + 4) +
            format314 +
            header31012 +
            format31012
         );
      }
      function validateOS2Table(os2, file) {
         file.pos = (file.start || 0) + os2.offset;
         var version = file.getUint16();
         file.skip(60);
         var selection = file.getUint16();
         if (version < 4 && selection & 0x0300) {
            return false;
         }
         var firstChar = file.getUint16();
         var lastChar = file.getUint16();
         if (firstChar > lastChar) {
            return false;
         }
         file.skip(6);
         var usWinAscent = file.getUint16();
         if (usWinAscent === 0) {
            return false;
         }
         os2.data[8] = os2.data[9] = 0;
         return true;
      }
      function createOS2Table(properties, charstrings, override) {
         override ||
         (override = { unitsPerEm: 0, yMax: 0, yMin: 0, ascent: 0, descent: 0 });
         var ulUnicodeRange1 = 0;
         var ulUnicodeRange2 = 0;
         var ulUnicodeRange3 = 0;
         var ulUnicodeRange4 = 0;
         var firstCharIndex = null;
         var lastCharIndex = 0;
         var position = -1;
         if (charstrings) {
            for (var code in charstrings) {
               code |= 0;
               if (firstCharIndex > code || !firstCharIndex) {
                  firstCharIndex = code;
               }
               if (lastCharIndex < code) {
                  lastCharIndex = code;
               }
               position = getUnicodeRangeFor(code, position);
               if (position < 32) {
                  ulUnicodeRange1 |= 1 << position;
               } else if (position < 64) {
                  ulUnicodeRange2 |= 1 << (position - 32);
               } else if (position < 96) {
                  ulUnicodeRange3 |= 1 << (position - 64);
               } else if (position < 123) {
                  ulUnicodeRange4 |= 1 << (position - 96);
               } else {
                  throw new FormatError(
                     "Unicode ranges Bits > 123 are reserved for internal usage",
                  );
               }
            }
            if (lastCharIndex > 0xffff) {
               lastCharIndex = 0xffff;
            }
         } else {
            firstCharIndex = 0;
            lastCharIndex = 255;
         }
         var bbox = properties.bbox || [0, 0, 0, 0];
         var unitsPerEm =
            override.unitsPerEm ||
            1 / (properties.fontMatrix || FONT_IDENTITY_MATRIX)[0];
         var scale = properties.ascentScaled
            ? 1.0
            : unitsPerEm / PDF_GLYPH_SPACE_UNITS;
         var typoAscent =
            override.ascent || Math.round(scale * (properties.ascent || bbox[3]));
         var typoDescent =
            override.descent || Math.round(scale * (properties.descent || bbox[1]));
         if (typoDescent > 0 && properties.descent > 0 && bbox[1] < 0) {
            typoDescent = -typoDescent;
         }
         var winAscent = override.yMax || typoAscent;
         var winDescent = -override.yMin || -typoDescent;
         return (
            "\x00\x03" +
            "\x02\x24" +
            "\x01\xF4" +
            "\x00\x05" +
            "\x00\x00" +
            "\x02\x8A" +
            "\x02\xBB" +
            "\x00\x00" +
            "\x00\x8C" +
            "\x02\x8A" +
            "\x02\xBB" +
            "\x00\x00" +
            "\x01\xDF" +
            "\x00\x31" +
            "\x01\x02" +
            "\x00\x00" +
            "\x00\x00\x06" +
            String.fromCharCode(properties.fixedPitch ? 0x09 : 0x00) +
            "\x00\x00\x00\x00\x00\x00" +
            string32(ulUnicodeRange1) +
            string32(ulUnicodeRange2) +
            string32(ulUnicodeRange3) +
            string32(ulUnicodeRange4) +
            "\x2A\x32\x31\x2A" +
            string16(properties.italicAngle ? 1 : 0) +
            string16(firstCharIndex || properties.firstChar) +
            string16(lastCharIndex || properties.lastChar) +
            string16(typoAscent) +
            string16(typoDescent) +
            "\x00\x64" +
            string16(winAscent) +
            string16(winDescent) +
            "\x00\x00\x00\x00" +
            "\x00\x00\x00\x00" +
            string16(properties.xHeight) +
            string16(properties.capHeight) +
            string16(0) +
            string16(firstCharIndex || properties.firstChar) +
            "\x00\x03"
         );
      }
      function createPostTable(properties) {
         var angle = Math.floor(properties.italicAngle * Math.pow(2, 16));
         return (
            "\x00\x03\x00\x00" +
            string32(angle) +
            "\x00\x00" +
            "\x00\x00" +
            string32(properties.fixedPitch ? 1 : 0) +
            "\x00\x00\x00\x00" +
            "\x00\x00\x00\x00" +
            "\x00\x00\x00\x00" +
            "\x00\x00\x00\x00"
         );
      }
      function createPostscriptName(name) {
         return name.replaceAll(/[^\x21-\x7E]|[[\](){}<>/%]/g, "").slice(0, 63);
      }
      function createNameTable(name, proto) {
         if (!proto) {
            proto = [[], []];
         }
         var strings = [
            proto[0][0] || "Original licence",
            proto[0][1] || name,
            proto[0][2] || "Unknown",
            proto[0][3] || "uniqueID",
            proto[0][4] || name,
            proto[0][5] || "Version 0.11",
            proto[0][6] || createPostscriptName(name),
            proto[0][7] || "Unknown",
            proto[0][8] || "Unknown",
            proto[0][9] || "Unknown",
         ];
         var stringsUnicode = [];
         var i, ii, j, jj, str;
         for (i = 0, ii = strings.length; i < ii; i++) {
            str = proto[1][i] || strings[i];
            var strBufUnicode = [];
            for (j = 0, jj = str.length; j < jj; j++) {
               strBufUnicode.push(string16(str.charCodeAt(j)));
            }
            stringsUnicode.push(strBufUnicode.join(""));
         }
         var names = [strings, stringsUnicode];
         var platforms = ["\x00\x01", "\x00\x03"];
         var encodings = ["\x00\x00", "\x00\x01"];
         var languages = ["\x00\x00", "\x04\x09"];
         var namesRecordCount = strings.length * platforms.length;
         var nameTable =
            "\x00\x00" +
            string16(namesRecordCount) +
            string16(namesRecordCount * 12 + 6);
         var strOffset = 0;
         for (i = 0, ii = platforms.length; i < ii; i++) {
            var strs = names[i];
            for (j = 0, jj = strs.length; j < jj; j++) {
               str = strs[j];
               var nameRecord =
                  platforms[i] +
                  encodings[i] +
                  languages[i] +
                  string16(j) +
                  string16(str.length) +
                  string16(strOffset);
               nameTable += nameRecord;
               strOffset += str.length;
            }
         }
         nameTable += strings.join("") + stringsUnicode.join("");
         return nameTable;
      }
      var Font = /*#__PURE__*/ (function () {
         function Font(name, file, properties) {
            var _this$systemFontInfo;
            _classCallCheck(this, Font);
            this.name = name;
            this.psName = null;
            this.mimetype = null;
            this.disableFontFace = false;
            this.loadedName = properties.loadedName;
            this.isType3Font = properties.isType3Font;
            this.missingFile = false;
            this.cssFontInfo = properties.cssFontInfo;
            this._charsCache = Object.create(null);
            this._glyphCache = Object.create(null);
            var isSerifFont = !!(properties.flags & FontFlags.Serif);
            if (!isSerifFont && !properties.isSimulatedFlags) {
               var baseName = name.replaceAll(/[,_]/g, "-").split("-", 1)[0],
                  serifFonts = getSerifFonts();
               var _iterator42 = _createForOfIteratorHelper(baseName.split("+")),
                  _step42;
               try {
                  for (_iterator42.s(); !(_step42 = _iterator42.n()).done; ) {
                     var namePart = _step42.value;
                     if (serifFonts[namePart]) {
                        isSerifFont = true;
                        break;
                     }
                  }
               } catch (err) {
                  _iterator42.e(err);
               } finally {
                  _iterator42.f();
               }
            }
            this.isSerifFont = isSerifFont;
            this.isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);
            this.isMonospace = !!(properties.flags & FontFlags.FixedPitch);
            var type = properties.type,
               subtype = properties.subtype;
            this.type = type;
            this.subtype = subtype;
            this.systemFontInfo = properties.systemFontInfo;
            var matches = name.match(/^InvalidPDFjsFont_(.*)_\d+$/);
            this.isInvalidPDFjsFont = !!matches;
            if (this.isInvalidPDFjsFont) {
               this.fallbackName = matches[1];
            } else if (this.isMonospace) {
               this.fallbackName = "monospace";
            } else if (this.isSerifFont) {
               this.fallbackName = "serif";
            } else {
               this.fallbackName = "sans-serif";
            }
            if (
               (_this$systemFontInfo = this.systemFontInfo) !== null &&
               _this$systemFontInfo !== void 0 &&
               _this$systemFontInfo.guessFallback
            ) {
               this.systemFontInfo.guessFallback = false;
               this.systemFontInfo.css += ",".concat(this.fallbackName);
            }
            this.differences = properties.differences;
            this.widths = properties.widths;
            this.defaultWidth = properties.defaultWidth;
            this.composite = properties.composite;
            this.cMap = properties.cMap;
            this.capHeight = properties.capHeight / PDF_GLYPH_SPACE_UNITS;
            this.ascent = properties.ascent / PDF_GLYPH_SPACE_UNITS;
            this.descent = properties.descent / PDF_GLYPH_SPACE_UNITS;
            this.lineHeight = this.ascent - this.descent;
            this.fontMatrix = properties.fontMatrix;
            this.bbox = properties.bbox;
            this.defaultEncoding = properties.defaultEncoding;
            this.toUnicode = properties.toUnicode;
            this.toFontChar = [];
            if (properties.type === "Type3") {
               for (var charCode = 0; charCode < 256; charCode++) {
                  this.toFontChar[charCode] =
                     this.differences[charCode] ||
                     properties.defaultEncoding[charCode];
               }
               return;
            }
            this.cidEncoding = properties.cidEncoding || "";
            this.vertical = !!properties.vertical;
            if (this.vertical) {
               this.vmetrics = properties.vmetrics;
               this.defaultVMetrics = properties.defaultVMetrics;
            }
            if (!file || file.isEmpty) {
               if (file) {
                  warn(
                     'Font file is empty in "' + name + '" (' + this.loadedName + ")",
                  );
               }
               this.fallbackToSystemFont(properties);
               return;
            }
            var _getFontFileType = getFontFileType(file, properties);
            var _getFontFileType2 = _slicedToArray(_getFontFileType, 2);
            type = _getFontFileType2[0];
            subtype = _getFontFileType2[1];
            if (type !== this.type || subtype !== this.subtype) {
               info(
                  "Inconsistent font file Type/SubType, expected: " +
                  ""
                     .concat(this.type, "/")
                     .concat(this.subtype, " but found: ")
                     .concat(type, "/")
                     .concat(subtype, "."),
               );
            }
            var data;
            try {
               switch (type) {
                  case "MMType1":
                     info("MMType1 font (" + name + "), falling back to Type1.");
                  case "Type1":
                  case "CIDFontType0":
                     this.mimetype = "font/opentype";
                     var cff =
                        subtype === "Type1C" || subtype === "CIDFontType0C"
                           ? new CFFFont(file, properties)
                           : new Type1Font(name, file, properties);
                     adjustWidths(properties);
                     data = this.convert(name, cff, properties);
                     break;
                  case "OpenType":
                  case "TrueType":
                  case "CIDFontType2":
                     this.mimetype = "font/opentype";
                     data = this.checkAndRepair(name, file, properties);
                     if (this.isOpenType) {
                        adjustWidths(properties);
                        type = "OpenType";
                     }
                     break;
                  default:
                     throw new FormatError("Font ".concat(type, " is not supported"));
               }
            } catch (e) {
               warn(e);
               this.fallbackToSystemFont(properties);
               return;
            }
            amendFallbackToUnicode(properties);
            this.data = data;
            this.type = type;
            this.subtype = subtype;
            this.fontMatrix = properties.fontMatrix;
            this.widths = properties.widths;
            this.defaultWidth = properties.defaultWidth;
            this.toUnicode = properties.toUnicode;
            this.seacMap = properties.seacMap;
         }
         return _createClass(Font, [
            {
               key: "renderer",
               get: function get() {
                  var renderer = FontRendererFactory.create(
                     this,
                     SEAC_ANALYSIS_ENABLED,
                  );
                  return shadow(this, "renderer", renderer);
               },
            },
            {
               key: "exportData",
               value: function exportData() {
                  var extraProperties =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : false;
                  var exportDataProperties = extraProperties
                     ? [].concat(EXPORT_DATA_PROPERTIES, EXPORT_DATA_EXTRA_PROPERTIES)
                     : EXPORT_DATA_PROPERTIES;
                  var data = Object.create(null);
                  var property, value;
                  var _iterator43 = _createForOfIteratorHelper(exportDataProperties),
                     _step43;
                  try {
                     for (_iterator43.s(); !(_step43 = _iterator43.n()).done; ) {
                        property = _step43.value;
                        value = this[property];
                        if (value !== undefined) {
                           data[property] = value;
                        }
                     }
                  } catch (err) {
                     _iterator43.e(err);
                  } finally {
                     _iterator43.f();
                  }
                  return data;
               },
            },
            {
               key: "fallbackToSystemFont",
               value: function fallbackToSystemFont(properties) {
                  var _this32 = this;
                  this.missingFile = true;
                  var name = this.name,
                     type = this.type;
                  var fontName = normalizeFontName(name);
                  var stdFontMap = getStdFontMap(),
                     nonStdFontMap = getNonStdFontMap();
                  var isStandardFont = !!stdFontMap[fontName];
                  var isMappedToStandardFont = !!(
                     nonStdFontMap[fontName] && stdFontMap[nonStdFontMap[fontName]]
                  );
                  fontName =
                     stdFontMap[fontName] || nonStdFontMap[fontName] || fontName;
                  var fontBasicMetricsMap = getFontBasicMetrics();
                  var metrics = fontBasicMetricsMap[fontName];
                  if (metrics) {
                     if (isNaN(this.ascent)) {
                        this.ascent = metrics.ascent / PDF_GLYPH_SPACE_UNITS;
                     }
                     if (isNaN(this.descent)) {
                        this.descent = metrics.descent / PDF_GLYPH_SPACE_UNITS;
                     }
                     if (isNaN(this.capHeight)) {
                        this.capHeight = metrics.capHeight / PDF_GLYPH_SPACE_UNITS;
                     }
                  }
                  this.bold = /bold/gi.test(fontName);
                  this.italic = /oblique|italic/gi.test(fontName);
                  this.black = /Black/g.test(name);
                  var isNarrow = /Narrow/g.test(name);
                  this.remeasure =
                     (!isStandardFont || isNarrow) &&
                     Object.keys(this.widths).length > 0;
                  if (
                     (isStandardFont || isMappedToStandardFont) &&
                     type === "CIDFontType2" &&
                     this.cidEncoding.startsWith("Identity-")
                  ) {
                     var cidToGidMap = properties.cidToGidMap;
                     var map = [];
                     applyStandardFontGlyphMap(map, getGlyphMapForStandardFonts());
                     if (/Arial-?Black/i.test(name)) {
                        applyStandardFontGlyphMap(
                           map,
                           getSupplementalGlyphMapForArialBlack(),
                        );
                     } else if (/Calibri/i.test(name)) {
                        applyStandardFontGlyphMap(
                           map,
                           getSupplementalGlyphMapForCalibri(),
                        );
                     }
                     if (cidToGidMap) {
                        for (var charCode in map) {
                           var cid = map[charCode];
                           if (cidToGidMap[cid] !== undefined) {
                              map[+charCode] = cidToGidMap[cid];
                           }
                        }
                        if (
                           cidToGidMap.length !== this.toUnicode.length &&
                           properties.hasIncludedToUnicodeMap &&
                           this.toUnicode instanceof IdentityToUnicodeMap
                        ) {
                           this.toUnicode.forEach(function (charCode, unicodeCharCode) {
                              var cid = map[charCode];
                              if (cidToGidMap[cid] === undefined) {
                                 map[+charCode] = unicodeCharCode;
                              }
                           });
                        }
                     }
                     if (!(this.toUnicode instanceof IdentityToUnicodeMap)) {
                        this.toUnicode.forEach(function (charCode, unicodeCharCode) {
                           map[+charCode] = unicodeCharCode;
                        });
                     }
                     this.toFontChar = map;
                     this.toUnicode = new ToUnicodeMap(map);
                  } else if (/Symbol/i.test(fontName)) {
                     this.toFontChar = buildToFontChar(
                        SymbolSetEncoding,
                        getGlyphsUnicode(),
                        this.differences,
                     );
                  } else if (/Dingbats/i.test(fontName)) {
                     this.toFontChar = buildToFontChar(
                        ZapfDingbatsEncoding,
                        getDingbatsGlyphsUnicode(),
                        this.differences,
                     );
                  } else if (isStandardFont) {
                     var _map = buildToFontChar(
                        this.defaultEncoding,
                        getGlyphsUnicode(),
                        this.differences,
                     );
                     if (
                        type === "CIDFontType2" &&
                        !this.cidEncoding.startsWith("Identity-") &&
                        !(this.toUnicode instanceof IdentityToUnicodeMap)
                     ) {
                        this.toUnicode.forEach(function (charCode, unicodeCharCode) {
                           _map[+charCode] = unicodeCharCode;
                        });
                     }
                     this.toFontChar = _map;
                  } else {
                     var glyphsUnicodeMap = getGlyphsUnicode();
                     var _map2 = [];
                     this.toUnicode.forEach(function (charCode, unicodeCharCode) {
                        if (!_this32.composite) {
                           var glyphName =
                              _this32.differences[charCode] ||
                              _this32.defaultEncoding[charCode];
                           var unicode = getUnicodeForGlyph(glyphName, glyphsUnicodeMap);
                           if (unicode !== -1) {
                              unicodeCharCode = unicode;
                           }
                        }
                        _map2[+charCode] = unicodeCharCode;
                     });
                     if (
                        this.composite &&
                        this.toUnicode instanceof IdentityToUnicodeMap
                     ) {
                        if (/Tahoma|Verdana/i.test(name)) {
                           applyStandardFontGlyphMap(
                              _map2,
                              getGlyphMapForStandardFonts(),
                           );
                        }
                     }
                     this.toFontChar = _map2;
                  }
                  amendFallbackToUnicode(properties);
                  this.loadedName = fontName.split("-", 1)[0];
               },
            },
            {
               key: "checkAndRepair",
               value: function checkAndRepair(name, font, properties) {
                  var _properties$scaleFact, _this$cssFontInfo;
                  var VALID_TABLES = [
                     "OS/2",
                     "cmap",
                     "head",
                     "hhea",
                     "hmtx",
                     "maxp",
                     "name",
                     "post",
                     "loca",
                     "glyf",
                     "fpgm",
                     "prep",
                     "cvt ",
                     "CFF ",
                  ];
                  function readTables(file, numTables) {
                     var tables = Object.create(null);
                     tables["OS/2"] = null;
                     tables.cmap = null;
                     tables.head = null;
                     tables.hhea = null;
                     tables.hmtx = null;
                     tables.maxp = null;
                     tables.name = null;
                     tables.post = null;
                     for (var i = 0; i < numTables; i++) {
                        var table = readTableEntry(file);
                        if (!VALID_TABLES.includes(table.tag)) {
                           continue;
                        }
                        if (table.length === 0) {
                           continue;
                        }
                        tables[table.tag] = table;
                     }
                     return tables;
                  }
                  function readTableEntry(file) {
                     var tag = file.getString(4);
                     var checksum = file.getInt32() >>> 0;
                     var offset = file.getInt32() >>> 0;
                     var length = file.getInt32() >>> 0;
                     var previousPosition = file.pos;
                     file.pos = file.start || 0;
                     file.skip(offset);
                     var data = file.getBytes(length);
                     file.pos = previousPosition;
                     if (tag === "head") {
                        data[8] = data[9] = data[10] = data[11] = 0;
                        data[17] |= 0x20;
                     }
                     return {
                        tag: tag,
                        checksum: checksum,
                        length: length,
                        offset: offset,
                        data: data,
                     };
                  }
                  function readOpenTypeHeader(ttf) {
                     return {
                        version: ttf.getString(4),
                        numTables: ttf.getUint16(),
                        searchRange: ttf.getUint16(),
                        entrySelector: ttf.getUint16(),
                        rangeShift: ttf.getUint16(),
                     };
                  }
                  function readTrueTypeCollectionHeader(ttc) {
                     var ttcTag = ttc.getString(4);
                     assert(ttcTag === "ttcf", "Must be a TrueType Collection font.");
                     var majorVersion = ttc.getUint16();
                     var minorVersion = ttc.getUint16();
                     var numFonts = ttc.getInt32() >>> 0;
                     var offsetTable = [];
                     for (var i = 0; i < numFonts; i++) {
                        offsetTable.push(ttc.getInt32() >>> 0);
                     }
                     var header = {
                        ttcTag: ttcTag,
                        majorVersion: majorVersion,
                        minorVersion: minorVersion,
                        numFonts: numFonts,
                        offsetTable: offsetTable,
                     };
                     switch (majorVersion) {
                        case 1:
                           return header;
                        case 2:
                           header.dsigTag = ttc.getInt32() >>> 0;
                           header.dsigLength = ttc.getInt32() >>> 0;
                           header.dsigOffset = ttc.getInt32() >>> 0;
                           return header;
                     }
                     throw new FormatError(
                        "Invalid TrueType Collection majorVersion: ".concat(
                           majorVersion,
                           ".",
                        ),
                     );
                  }
                  function readTrueTypeCollectionData(ttc, fontName) {
                     var _readTrueTypeCollecti = readTrueTypeCollectionHeader(ttc),
                        numFonts = _readTrueTypeCollecti.numFonts,
                        offsetTable = _readTrueTypeCollecti.offsetTable;
                     var fontNameParts = fontName.split("+");
                     var fallbackData;
                     for (var i = 0; i < numFonts; i++) {
                        ttc.pos = (ttc.start || 0) + offsetTable[i];
                        var potentialHeader = readOpenTypeHeader(ttc);
                        var potentialTables = readTables(
                           ttc,
                           potentialHeader.numTables,
                        );
                        if (!potentialTables.name) {
                           throw new FormatError(
                              'TrueType Collection font must contain a "name" table.',
                           );
                        }
                        var _readNameTable = readNameTable(potentialTables.name),
                           _readNameTable2 = _slicedToArray(_readNameTable, 1),
                           nameTable = _readNameTable2[0];
                        for (var j = 0, jj = nameTable.length; j < jj; j++) {
                           for (var k = 0, kk = nameTable[j].length; k < kk; k++) {
                              var _nameTable$j$k;
                              var nameEntry =
                                 (_nameTable$j$k = nameTable[j][k]) === null ||
                                 _nameTable$j$k === void 0
                                    ? void 0
                                    : _nameTable$j$k.replaceAll(/\s/g, "");
                              if (!nameEntry) {
                                 continue;
                              }
                              if (nameEntry === fontName) {
                                 return {
                                    header: potentialHeader,
                                    tables: potentialTables,
                                 };
                              }
                              if (fontNameParts.length < 2) {
                                 continue;
                              }
                              var _iterator44 = _createForOfIteratorHelper(fontNameParts),
                                 _step44;
                              try {
                                 for (
                                    _iterator44.s();
                                    !(_step44 = _iterator44.n()).done;

                                 ) {
                                    var part = _step44.value;
                                    if (nameEntry === part) {
                                       fallbackData = {
                                          name: part,
                                          header: potentialHeader,
                                          tables: potentialTables,
                                       };
                                    }
                                 }
                              } catch (err) {
                                 _iterator44.e(err);
                              } finally {
                                 _iterator44.f();
                              }
                           }
                        }
                     }
                     if (fallbackData) {
                        warn(
                           'TrueType Collection does not contain "'.concat(
                              fontName,
                              '" font, ',
                           ) +
                           'falling back to "'.concat(
                              fallbackData.name,
                              '" font instead.',
                           ),
                        );
                        return {
                           header: fallbackData.header,
                           tables: fallbackData.tables,
                        };
                     }
                     throw new FormatError(
                        'TrueType Collection does not contain "'.concat(
                           fontName,
                           '" font.',
                        ),
                     );
                  }
                  function readCmapTable(cmap, file, isSymbolicFont, hasEncoding) {
                     if (!cmap) {
                        warn("No cmap table available.");
                        return {
                           platformId: -1,
                           encodingId: -1,
                           mappings: [],
                           hasShortCmap: false,
                        };
                     }
                     var segment;
                     var start = (file.start || 0) + cmap.offset;
                     file.pos = start;
                     file.skip(2);
                     var numTables = file.getUint16();
                     var potentialTable;
                     var canBreak = false;
                     for (var i = 0; i < numTables; i++) {
                        var _potentialTable, _potentialTable2;
                        var platformId = file.getUint16();
                        var encodingId = file.getUint16();
                        var offset = file.getInt32() >>> 0;
                        var useTable = false;
                        if (
                           ((_potentialTable = potentialTable) === null ||
                           _potentialTable === void 0
                              ? void 0
                              : _potentialTable.platformId) === platformId &&
                           ((_potentialTable2 = potentialTable) === null ||
                           _potentialTable2 === void 0
                              ? void 0
                              : _potentialTable2.encodingId) === encodingId
                        ) {
                           continue;
                        }
                        if (
                           platformId === 0 &&
                           (encodingId === 0 || encodingId === 1 || encodingId === 3)
                        ) {
                           useTable = true;
                        } else if (platformId === 1 && encodingId === 0) {
                           useTable = true;
                        } else if (
                           platformId === 3 &&
                           encodingId === 1 &&
                           (hasEncoding || !potentialTable)
                        ) {
                           useTable = true;
                           if (!isSymbolicFont) {
                              canBreak = true;
                           }
                        } else if (
                           isSymbolicFont &&
                           platformId === 3 &&
                           encodingId === 0
                        ) {
                           useTable = true;
                           var correctlySorted = true;
                           if (i < numTables - 1) {
                              var nextBytes = file.peekBytes(2),
                                 nextPlatformId = int16(nextBytes[0], nextBytes[1]);
                              if (nextPlatformId < platformId) {
                                 correctlySorted = false;
                              }
                           }
                           if (correctlySorted) {
                              canBreak = true;
                           }
                        }
                        if (useTable) {
                           potentialTable = {
                              platformId: platformId,
                              encodingId: encodingId,
                              offset: offset,
                           };
                        }
                        if (canBreak) {
                           break;
                        }
                     }
                     if (potentialTable) {
                        file.pos = start + potentialTable.offset;
                     }
                     if (!potentialTable || file.peekByte() === -1) {
                        warn("Could not find a preferred cmap table.");
                        return {
                           platformId: -1,
                           encodingId: -1,
                           mappings: [],
                           hasShortCmap: false,
                        };
                     }
                     var format = file.getUint16();
                     var hasShortCmap = false;
                     var mappings = [];
                     var j, glyphId;
                     if (format === 0) {
                        file.skip(2 + 2);
                        for (j = 0; j < 256; j++) {
                           var index = file.getByte();
                           if (!index) {
                              continue;
                           }
                           mappings.push({ charCode: j, glyphId: index });
                        }
                        hasShortCmap = true;
                     } else if (format === 2) {
                        file.skip(2 + 2);
                        var subHeaderKeys = [];
                        var maxSubHeaderKey = 0;
                        for (var _i25 = 0; _i25 < 256; _i25++) {
                           var subHeaderKey = file.getUint16() >> 3;
                           subHeaderKeys.push(subHeaderKey);
                           maxSubHeaderKey = Math.max(subHeaderKey, maxSubHeaderKey);
                        }
                        var subHeaders = [];
                        for (var _i26 = 0; _i26 <= maxSubHeaderKey; _i26++) {
                           subHeaders.push({
                              firstCode: file.getUint16(),
                              entryCount: file.getUint16(),
                              idDelta: signedInt16(file.getByte(), file.getByte()),
                              idRangePos: file.pos + file.getUint16(),
                           });
                        }
                        for (var _i27 = 0; _i27 < 256; _i27++) {
                           if (subHeaderKeys[_i27] === 0) {
                              file.pos = subHeaders[0].idRangePos + 2 * _i27;
                              glyphId = file.getUint16();
                              mappings.push({ charCode: _i27, glyphId: glyphId });
                           } else {
                              var s = subHeaders[subHeaderKeys[_i27]];
                              for (j = 0; j < s.entryCount; j++) {
                                 var charCode = (_i27 << 8) + j + s.firstCode;
                                 file.pos = s.idRangePos + 2 * j;
                                 glyphId = file.getUint16();
                                 if (glyphId !== 0) {
                                    glyphId = (glyphId + s.idDelta) % 65536;
                                 }
                                 mappings.push({ charCode: charCode, glyphId: glyphId });
                              }
                           }
                        }
                     } else if (format === 4) {
                        file.skip(2 + 2);
                        var segCount = file.getUint16() >> 1;
                        file.skip(6);
                        var segments = [];
                        var segIndex;
                        for (segIndex = 0; segIndex < segCount; segIndex++) {
                           segments.push({ end: file.getUint16() });
                        }
                        file.skip(2);
                        for (segIndex = 0; segIndex < segCount; segIndex++) {
                           segments[segIndex].start = file.getUint16();
                        }
                        for (segIndex = 0; segIndex < segCount; segIndex++) {
                           segments[segIndex].delta = file.getUint16();
                        }
                        var offsetsCount = 0,
                           offsetIndex;
                        for (segIndex = 0; segIndex < segCount; segIndex++) {
                           segment = segments[segIndex];
                           var rangeOffset = file.getUint16();
                           if (!rangeOffset) {
                              segment.offsetIndex = -1;
                              continue;
                           }
                           offsetIndex = (rangeOffset >> 1) - (segCount - segIndex);
                           segment.offsetIndex = offsetIndex;
                           offsetsCount = Math.max(
                              offsetsCount,
                              offsetIndex + segment.end - segment.start + 1,
                           );
                        }
                        var offsets = [];
                        for (j = 0; j < offsetsCount; j++) {
                           offsets.push(file.getUint16());
                        }
                        for (segIndex = 0; segIndex < segCount; segIndex++) {
                           segment = segments[segIndex];
                           start = segment.start;
                           var end = segment.end;
                           var delta = segment.delta;
                           offsetIndex = segment.offsetIndex;
                           for (j = start; j <= end; j++) {
                              if (j === 0xffff) {
                                 continue;
                              }
                              glyphId =
                                 offsetIndex < 0 ? j : offsets[offsetIndex + j - start];
                              glyphId = (glyphId + delta) & 0xffff;
                              mappings.push({ charCode: j, glyphId: glyphId });
                           }
                        }
                     } else if (format === 6) {
                        file.skip(2 + 2);
                        var firstCode = file.getUint16();
                        var entryCount = file.getUint16();
                        for (j = 0; j < entryCount; j++) {
                           glyphId = file.getUint16();
                           var _charCode2 = firstCode + j;
                           mappings.push({ charCode: _charCode2, glyphId: glyphId });
                        }
                     } else if (format === 12) {
                        file.skip(2 + 4 + 4);
                        var nGroups = file.getInt32() >>> 0;
                        for (j = 0; j < nGroups; j++) {
                           var startCharCode = file.getInt32() >>> 0;
                           var endCharCode = file.getInt32() >>> 0;
                           var glyphCode = file.getInt32() >>> 0;
                           for (
                              var _charCode3 = startCharCode;
                              _charCode3 <= endCharCode;
                              _charCode3++
                           ) {
                              mappings.push({
                                 charCode: _charCode3,
                                 glyphId: glyphCode++,
                              });
                           }
                        }
                     } else {
                        warn("cmap table has unsupported format: " + format);
                        return {
                           platformId: -1,
                           encodingId: -1,
                           mappings: [],
                           hasShortCmap: false,
                        };
                     }
                     mappings.sort(function (a, b) {
                        return a.charCode - b.charCode;
                     });
                     for (var _i28 = 1; _i28 < mappings.length; _i28++) {
                        if (mappings[_i28 - 1].charCode === mappings[_i28].charCode) {
                           mappings.splice(_i28, 1);
                           _i28--;
                        }
                     }
                     return {
                        platformId: potentialTable.platformId,
                        encodingId: potentialTable.encodingId,
                        mappings: mappings,
                        hasShortCmap: hasShortCmap,
                     };
                  }
                  function sanitizeMetrics(
                     file,
                     header,
                     metrics,
                     headTable,
                     numGlyphs,
                     dupFirstEntry,
                  ) {
                     if (!header) {
                        if (metrics) {
                           metrics.data = null;
                        }
                        return;
                     }
                     file.pos = (file.start || 0) + header.offset;
                     file.pos += 4;
                     file.pos += 2;
                     file.pos += 2;
                     file.pos += 2;
                     file.pos += 2;
                     file.pos += 2;
                     file.pos += 2;
                     file.pos += 2;
                     file.pos += 2;
                     file.pos += 2;
                     var caretOffset = file.getUint16();
                     file.pos += 8;
                     file.pos += 2;
                     var numOfMetrics = file.getUint16();
                     if (caretOffset !== 0) {
                        var macStyle = int16(headTable.data[44], headTable.data[45]);
                        if (!(macStyle & 2)) {
                           header.data[22] = 0;
                           header.data[23] = 0;
                        }
                     }
                     if (numOfMetrics > numGlyphs) {
                        info(
                           "The numOfMetrics (".concat(
                              numOfMetrics,
                              ") should not be ",
                           ) + "greater than the numGlyphs (".concat(numGlyphs, ")."),
                        );
                        numOfMetrics = numGlyphs;
                        header.data[34] = (numOfMetrics & 0xff00) >> 8;
                        header.data[35] = numOfMetrics & 0x00ff;
                     }
                     var numOfSidebearings = numGlyphs - numOfMetrics;
                     var numMissing =
                        numOfSidebearings - ((metrics.length - numOfMetrics * 4) >> 1);
                     if (numMissing > 0) {
                        var entries = new Uint8Array(metrics.length + numMissing * 2);
                        entries.set(metrics.data);
                        if (dupFirstEntry) {
                           entries[metrics.length] = metrics.data[2];
                           entries[metrics.length + 1] = metrics.data[3];
                        }
                        metrics.data = entries;
                     }
                  }
                  function sanitizeGlyph(
                     source,
                     sourceStart,
                     sourceEnd,
                     dest,
                     destStart,
                     hintsValid,
                  ) {
                     var glyphProfile = { length: 0, sizeOfInstructions: 0 };
                     if (
                        sourceStart < 0 ||
                        sourceStart >= source.length ||
                        sourceEnd > source.length ||
                        sourceEnd - sourceStart <= 12
                     ) {
                        return glyphProfile;
                     }
                     var glyf = source.subarray(sourceStart, sourceEnd);
                     var xMin = signedInt16(glyf[2], glyf[3]);
                     var yMin = signedInt16(glyf[4], glyf[5]);
                     var xMax = signedInt16(glyf[6], glyf[7]);
                     var yMax = signedInt16(glyf[8], glyf[9]);
                     if (xMin > xMax) {
                        writeSignedInt16(glyf, 2, xMax);
                        writeSignedInt16(glyf, 6, xMin);
                     }
                     if (yMin > yMax) {
                        writeSignedInt16(glyf, 4, yMax);
                        writeSignedInt16(glyf, 8, yMin);
                     }
                     var contoursCount = signedInt16(glyf[0], glyf[1]);
                     if (contoursCount < 0) {
                        if (contoursCount < -1) {
                           return glyphProfile;
                        }
                        dest.set(glyf, destStart);
                        glyphProfile.length = glyf.length;
                        return glyphProfile;
                     }
                     var i,
                        j = 10,
                        flagsCount = 0;
                     for (i = 0; i < contoursCount; i++) {
                        var endPoint = (glyf[j] << 8) | glyf[j + 1];
                        flagsCount = endPoint + 1;
                        j += 2;
                     }
                     var instructionsStart = j;
                     var instructionsLength = (glyf[j] << 8) | glyf[j + 1];
                     glyphProfile.sizeOfInstructions = instructionsLength;
                     j += 2 + instructionsLength;
                     var instructionsEnd = j;
                     var coordinatesLength = 0;
                     for (i = 0; i < flagsCount; i++) {
                        var flag = glyf[j++];
                        if (flag & 0xc0) {
                           glyf[j - 1] = flag & 0x3f;
                        }
                        var xLength = 2;
                        if (flag & 2) {
                           xLength = 1;
                        } else if (flag & 16) {
                           xLength = 0;
                        }
                        var yLength = 2;
                        if (flag & 4) {
                           yLength = 1;
                        } else if (flag & 32) {
                           yLength = 0;
                        }
                        var xyLength = xLength + yLength;
                        coordinatesLength += xyLength;
                        if (flag & 8) {
                           var repeat = glyf[j++];
                           if (repeat === 0) {
                              glyf[j - 1] ^= 8;
                           }
                           i += repeat;
                           coordinatesLength += repeat * xyLength;
                        }
                     }
                     if (coordinatesLength === 0) {
                        return glyphProfile;
                     }
                     var glyphDataLength = j + coordinatesLength;
                     if (glyphDataLength > glyf.length) {
                        return glyphProfile;
                     }
                     if (!hintsValid && instructionsLength > 0) {
                        dest.set(glyf.subarray(0, instructionsStart), destStart);
                        dest.set([0, 0], destStart + instructionsStart);
                        dest.set(
                           glyf.subarray(instructionsEnd, glyphDataLength),
                           destStart + instructionsStart + 2,
                        );
                        glyphDataLength -= instructionsLength;
                        if (glyf.length - glyphDataLength > 3) {
                           glyphDataLength = (glyphDataLength + 3) & ~3;
                        }
                        glyphProfile.length = glyphDataLength;
                        return glyphProfile;
                     }
                     if (glyf.length - glyphDataLength > 3) {
                        glyphDataLength = (glyphDataLength + 3) & ~3;
                        dest.set(glyf.subarray(0, glyphDataLength), destStart);
                        glyphProfile.length = glyphDataLength;
                        return glyphProfile;
                     }
                     dest.set(glyf, destStart);
                     glyphProfile.length = glyf.length;
                     return glyphProfile;
                  }
                  function sanitizeHead(head, numGlyphs, locaLength) {
                     var data = head.data;
                     var version = int32(data[0], data[1], data[2], data[3]);
                     if (version >> 16 !== 1) {
                        info(
                           "Attempting to fix invalid version in head table: " + version,
                        );
                        data[0] = 0;
                        data[1] = 1;
                        data[2] = 0;
                        data[3] = 0;
                     }
                     var indexToLocFormat = int16(data[50], data[51]);
                     if (indexToLocFormat < 0 || indexToLocFormat > 1) {
                        info(
                           "Attempting to fix invalid indexToLocFormat in head table: " +
                           indexToLocFormat,
                        );
                        var numGlyphsPlusOne = numGlyphs + 1;
                        if (locaLength === numGlyphsPlusOne << 1) {
                           data[50] = 0;
                           data[51] = 0;
                        } else if (locaLength === numGlyphsPlusOne << 2) {
                           data[50] = 0;
                           data[51] = 1;
                        } else {
                           throw new FormatError(
                              "Could not fix indexToLocFormat: " + indexToLocFormat,
                           );
                        }
                     }
                  }
                  function sanitizeGlyphLocations(
                     loca,
                     glyf,
                     numGlyphs,
                     isGlyphLocationsLong,
                     hintsValid,
                     dupFirstEntry,
                     maxSizeOfInstructions,
                  ) {
                     var itemSize, itemDecode, itemEncode;
                     if (isGlyphLocationsLong) {
                        itemSize = 4;
                        itemDecode = function fontItemDecodeLong(data, offset) {
                           return (
                              (data[offset] << 24) |
                              (data[offset + 1] << 16) |
                              (data[offset + 2] << 8) |
                              data[offset + 3]
                           );
                        };
                        itemEncode = function fontItemEncodeLong(data, offset, value) {
                           data[offset] = (value >>> 24) & 0xff;
                           data[offset + 1] = (value >> 16) & 0xff;
                           data[offset + 2] = (value >> 8) & 0xff;
                           data[offset + 3] = value & 0xff;
                        };
                     } else {
                        itemSize = 2;
                        itemDecode = function fontItemDecode(data, offset) {
                           return (data[offset] << 9) | (data[offset + 1] << 1);
                        };
                        itemEncode = function fontItemEncode(data, offset, value) {
                           data[offset] = (value >> 9) & 0xff;
                           data[offset + 1] = (value >> 1) & 0xff;
                        };
                     }
                     var numGlyphsOut = dupFirstEntry ? numGlyphs + 1 : numGlyphs;
                     var locaDataSize = itemSize * (1 + numGlyphsOut);
                     var locaData = new Uint8Array(locaDataSize);
                     locaData.set(loca.data.subarray(0, locaDataSize));
                     loca.data = locaData;
                     var oldGlyfData = glyf.data;
                     var oldGlyfDataLength = oldGlyfData.length;
                     var newGlyfData = new Uint8Array(oldGlyfDataLength);
                     var i, j;
                     var locaEntries = [];
                     for (i = 0, j = 0; i < numGlyphs + 1; i++, j += itemSize) {
                        var offset = itemDecode(locaData, j);
                        if (offset > oldGlyfDataLength) {
                           offset = oldGlyfDataLength;
                        }
                        locaEntries.push({ index: i, offset: offset, endOffset: 0 });
                     }
                     locaEntries.sort(function (a, b) {
                        return a.offset - b.offset;
                     });
                     for (i = 0; i < numGlyphs; i++) {
                        locaEntries[i].endOffset = locaEntries[i + 1].offset;
                     }
                     locaEntries.sort(function (a, b) {
                        return a.index - b.index;
                     });
                     for (i = 0; i < numGlyphs; i++) {
                        var _locaEntries$i = locaEntries[i],
                           _offset = _locaEntries$i.offset,
                           endOffset = _locaEntries$i.endOffset;
                        if (_offset !== 0 || endOffset !== 0) {
                           break;
                        }
                        var nextOffset = locaEntries[i + 1].offset;
                        if (nextOffset === 0) {
                           continue;
                        }
                        locaEntries[i].endOffset = nextOffset;
                        break;
                     }
                     var last = locaEntries.at(-2);
                     if (last.offset !== 0 && last.endOffset === 0) {
                        last.endOffset = oldGlyfDataLength;
                     }
                     var missingGlyphs = Object.create(null);
                     var writeOffset = 0;
                     itemEncode(locaData, 0, writeOffset);
                     for (i = 0, j = itemSize; i < numGlyphs; i++, j += itemSize) {
                        var glyphProfile = sanitizeGlyph(
                           oldGlyfData,
                           locaEntries[i].offset,
                           locaEntries[i].endOffset,
                           newGlyfData,
                           writeOffset,
                           hintsValid,
                        );
                        var newLength = glyphProfile.length;
                        if (newLength === 0) {
                           missingGlyphs[i] = true;
                        }
                        if (glyphProfile.sizeOfInstructions > maxSizeOfInstructions) {
                           maxSizeOfInstructions = glyphProfile.sizeOfInstructions;
                        }
                        writeOffset += newLength;
                        itemEncode(locaData, j, writeOffset);
                     }
                     if (writeOffset === 0) {
                        var simpleGlyph = new Uint8Array([
                           0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0,
                        ]);
                        for (
                           i = 0, j = itemSize;
                           i < numGlyphsOut;
                           i++, j += itemSize
                        ) {
                           itemEncode(locaData, j, simpleGlyph.length);
                        }
                        glyf.data = simpleGlyph;
                     } else if (dupFirstEntry) {
                        var firstEntryLength = itemDecode(locaData, itemSize);
                        if (newGlyfData.length > firstEntryLength + writeOffset) {
                           glyf.data = newGlyfData.subarray(
                              0,
                              firstEntryLength + writeOffset,
                           );
                        } else {
                           glyf.data = new Uint8Array(firstEntryLength + writeOffset);
                           glyf.data.set(newGlyfData.subarray(0, writeOffset));
                        }
                        glyf.data.set(
                           newGlyfData.subarray(0, firstEntryLength),
                           writeOffset,
                        );
                        itemEncode(
                           loca.data,
                           locaData.length - itemSize,
                           writeOffset + firstEntryLength,
                        );
                     } else {
                        glyf.data = newGlyfData.subarray(0, writeOffset);
                     }
                     return {
                        missingGlyphs: missingGlyphs,
                        maxSizeOfInstructions: maxSizeOfInstructions,
                     };
                  }
                  function readPostScriptTable(post, propertiesObj, maxpNumGlyphs) {
                     var start = (font.start || 0) + post.offset;
                     font.pos = start;
                     var length = post.length,
                        end = start + length;
                     var version = font.getInt32();
                     font.skip(28);
                     var glyphNames;
                     var valid = true;
                     var i;
                     switch (version) {
                        case 0x00010000:
                           glyphNames = MacStandardGlyphOrdering;
                           break;
                        case 0x00020000:
                           var _numGlyphs = font.getUint16();
                           if (_numGlyphs !== maxpNumGlyphs) {
                              valid = false;
                              break;
                           }
                           var glyphNameIndexes = [];
                           for (i = 0; i < _numGlyphs; ++i) {
                              var index = font.getUint16();
                              if (index >= 32768) {
                                 valid = false;
                                 break;
                              }
                              glyphNameIndexes.push(index);
                           }
                           if (!valid) {
                              break;
                           }
                           var customNames = [],
                              strBuf = [];
                           while (font.pos < end) {
                              var stringLength = font.getByte();
                              strBuf.length = stringLength;
                              for (i = 0; i < stringLength; ++i) {
                                 strBuf[i] = String.fromCharCode(font.getByte());
                              }
                              customNames.push(strBuf.join(""));
                           }
                           glyphNames = [];
                           for (i = 0; i < _numGlyphs; ++i) {
                              var j = glyphNameIndexes[i];
                              if (j < 258) {
                                 glyphNames.push(MacStandardGlyphOrdering[j]);
                                 continue;
                              }
                              glyphNames.push(customNames[j - 258]);
                           }
                           break;
                        case 0x00030000:
                           break;
                        default:
                           warn("Unknown/unsupported post table version " + version);
                           valid = false;
                           if (propertiesObj.defaultEncoding) {
                              glyphNames = propertiesObj.defaultEncoding;
                           }
                           break;
                     }
                     propertiesObj.glyphNames = glyphNames;
                     return valid;
                  }
                  function readNameTable(nameTable) {
                     var start = (font.start || 0) + nameTable.offset;
                     font.pos = start;
                     var names = [[], []],
                        records = [];
                     var length = nameTable.length,
                        end = start + length;
                     var format = font.getUint16();
                     var FORMAT_0_HEADER_LENGTH = 6;
                     if (format !== 0 || length < FORMAT_0_HEADER_LENGTH) {
                        return [names, records];
                     }
                     var numRecords = font.getUint16();
                     var stringsStart = font.getUint16();
                     var NAME_RECORD_LENGTH = 12;
                     var i, ii;
                     for (
                        i = 0;
                        i < numRecords && font.pos + NAME_RECORD_LENGTH <= end;
                        i++
                     ) {
                        var r = {
                           platform: font.getUint16(),
                           encoding: font.getUint16(),
                           language: font.getUint16(),
                           name: font.getUint16(),
                           length: font.getUint16(),
                           offset: font.getUint16(),
                        };
                        if (isMacNameRecord(r) || isWinNameRecord(r)) {
                           records.push(r);
                        }
                     }
                     for (i = 0, ii = records.length; i < ii; i++) {
                        var record = records[i];
                        if (record.length <= 0) {
                           continue;
                        }
                        var pos = start + stringsStart + record.offset;
                        if (pos + record.length > end) {
                           continue;
                        }
                        font.pos = pos;
                        var nameIndex = record.name;
                        if (record.encoding) {
                           var str = "";
                           for (var j = 0, jj = record.length; j < jj; j += 2) {
                              str += String.fromCharCode(font.getUint16());
                           }
                           names[1][nameIndex] = str;
                        } else {
                           names[0][nameIndex] = font.getString(record.length);
                        }
                     }
                     return [names, records];
                  }
                  var TTOpsStackDeltas = [
                     0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 0, 0, -2, -5, -1, -1, -1,
                     -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, -1, 1, -1, -999, 0,
                     1, 0, -1, -2, 0, -1, -2, -1, -1, 0, -1, -1, 0, 0, -999, -999, -1,
                     -1, -1, -1, -2, -999, -2, -2, -999, 0, -2, -2, 0, 0, -2, 0, -2, 0,
                     0, 0, -2, -1, -1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0,
                     -1, 0, -1, -1, 0, -999, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0,
                     0, 0, 0, 0, 0, 0, -2, -999, -999, -999, -999, -999, -1, -1, -2,
                     -2, 0, 0, 0, 0, -1, -1, -999, -2, -2, 0, 0, -1, -2, -2, 0, 0, 0,
                     -1, -1, -1, -2,
                  ];
                  function sanitizeTTProgram(table, ttContext) {
                     var data = table.data;
                     var i = 0,
                        j,
                        n,
                        b,
                        funcId,
                        pc,
                        lastEndf = 0,
                        lastDeff = 0;
                     var stack = [];
                     var callstack = [];
                     var functionsCalled = [];
                     var tooComplexToFollowFunctions =
                        ttContext.tooComplexToFollowFunctions;
                     var inFDEF = false,
                        ifLevel = 0,
                        inELSE = 0;
                     for (var ii = data.length; i < ii; ) {
                        var op = data[i++];
                        if (op === 0x40) {
                           n = data[i++];
                           if (inFDEF || inELSE) {
                              i += n;
                           } else {
                              for (j = 0; j < n; j++) {
                                 stack.push(data[i++]);
                              }
                           }
                        } else if (op === 0x41) {
                           n = data[i++];
                           if (inFDEF || inELSE) {
                              i += n * 2;
                           } else {
                              for (j = 0; j < n; j++) {
                                 b = data[i++];
                                 stack.push((b << 8) | data[i++]);
                              }
                           }
                        } else if ((op & 0xf8) === 0xb0) {
                           n = op - 0xb0 + 1;
                           if (inFDEF || inELSE) {
                              i += n;
                           } else {
                              for (j = 0; j < n; j++) {
                                 stack.push(data[i++]);
                              }
                           }
                        } else if ((op & 0xf8) === 0xb8) {
                           n = op - 0xb8 + 1;
                           if (inFDEF || inELSE) {
                              i += n * 2;
                           } else {
                              for (j = 0; j < n; j++) {
                                 b = data[i++];
                                 stack.push((b << 8) | data[i++]);
                              }
                           }
                        } else if (op === 0x2b && !tooComplexToFollowFunctions) {
                           if (!inFDEF && !inELSE) {
                              funcId = stack.at(-1);
                              if (isNaN(funcId)) {
                                 info("TT: CALL empty stack (or invalid entry).");
                              } else {
                                 ttContext.functionsUsed[funcId] = true;
                                 if (funcId in ttContext.functionsStackDeltas) {
                                    var newStackLength =
                                       stack.length + ttContext.functionsStackDeltas[funcId];
                                    if (newStackLength < 0) {
                                       warn("TT: CALL invalid functions stack delta.");
                                       ttContext.hintsValid = false;
                                       return;
                                    }
                                    stack.length = newStackLength;
                                 } else if (
                                    funcId in ttContext.functionsDefined &&
                                    !functionsCalled.includes(funcId)
                                 ) {
                                    callstack.push({
                                       data: data,
                                       i: i,
                                       stackTop: stack.length - 1,
                                    });
                                    functionsCalled.push(funcId);
                                    pc = ttContext.functionsDefined[funcId];
                                    if (!pc) {
                                       warn("TT: CALL non-existent function");
                                       ttContext.hintsValid = false;
                                       return;
                                    }
                                    data = pc.data;
                                    i = pc.i;
                                 }
                              }
                           }
                        } else if (op === 0x2c && !tooComplexToFollowFunctions) {
                           if (inFDEF || inELSE) {
                              warn("TT: nested FDEFs not allowed");
                              tooComplexToFollowFunctions = true;
                           }
                           inFDEF = true;
                           lastDeff = i;
                           funcId = stack.pop();
                           ttContext.functionsDefined[funcId] = { data: data, i: i };
                        } else if (op === 0x2d) {
                           if (inFDEF) {
                              inFDEF = false;
                              lastEndf = i;
                           } else {
                              pc = callstack.pop();
                              if (!pc) {
                                 warn("TT: ENDF bad stack");
                                 ttContext.hintsValid = false;
                                 return;
                              }
                              funcId = functionsCalled.pop();
                              data = pc.data;
                              i = pc.i;
                              ttContext.functionsStackDeltas[funcId] =
                                 stack.length - pc.stackTop;
                           }
                        } else if (op === 0x89) {
                           if (inFDEF || inELSE) {
                              warn("TT: nested IDEFs not allowed");
                              tooComplexToFollowFunctions = true;
                           }
                           inFDEF = true;
                           lastDeff = i;
                        } else if (op === 0x58) {
                           ++ifLevel;
                        } else if (op === 0x1b) {
                           inELSE = ifLevel;
                        } else if (op === 0x59) {
                           if (inELSE === ifLevel) {
                              inELSE = 0;
                           }
                           --ifLevel;
                        } else if (op === 0x1c) {
                           if (!inFDEF && !inELSE) {
                              var offset = stack.at(-1);
                              if (offset > 0) {
                                 i += offset - 1;
                              }
                           }
                        }
                        if (!inFDEF && !inELSE) {
                           var stackDelta = 0;
                           if (op <= 0x8e) {
                              stackDelta = TTOpsStackDeltas[op];
                           } else if (op >= 0xc0 && op <= 0xdf) {
                              stackDelta = -1;
                           } else if (op >= 0xe0) {
                              stackDelta = -2;
                           }
                           if (op >= 0x71 && op <= 0x75) {
                              n = stack.pop();
                              if (!isNaN(n)) {
                                 stackDelta = -n * 2;
                              }
                           }
                           while (stackDelta < 0 && stack.length > 0) {
                              stack.pop();
                              stackDelta++;
                           }
                           while (stackDelta > 0) {
                              stack.push(NaN);
                              stackDelta--;
                           }
                        }
                     }
                     ttContext.tooComplexToFollowFunctions =
                        tooComplexToFollowFunctions;
                     var content = [data];
                     if (i > data.length) {
                        content.push(new Uint8Array(i - data.length));
                     }
                     if (lastDeff > lastEndf) {
                        warn("TT: complementing a missing function tail");
                        content.push(new Uint8Array([0x22, 0x2d]));
                     }
                     foldTTTable(table, content);
                  }
                  function checkInvalidFunctions(ttContext, maxFunctionDefs) {
                     if (ttContext.tooComplexToFollowFunctions) {
                        return;
                     }
                     if (ttContext.functionsDefined.length > maxFunctionDefs) {
                        warn("TT: more functions defined than expected");
                        ttContext.hintsValid = false;
                        return;
                     }
                     for (
                        var j = 0, jj = ttContext.functionsUsed.length;
                        j < jj;
                        j++
                     ) {
                        if (j > maxFunctionDefs) {
                           warn("TT: invalid function id: " + j);
                           ttContext.hintsValid = false;
                           return;
                        }
                        if (
                           ttContext.functionsUsed[j] &&
                           !ttContext.functionsDefined[j]
                        ) {
                           warn("TT: undefined function: " + j);
                           ttContext.hintsValid = false;
                           return;
                        }
                     }
                  }
                  function foldTTTable(table, content) {
                     if (content.length > 1) {
                        var newLength = 0;
                        var j, jj;
                        for (j = 0, jj = content.length; j < jj; j++) {
                           newLength += content[j].length;
                        }
                        newLength = (newLength + 3) & ~3;
                        var result = new Uint8Array(newLength);
                        var pos = 0;
                        for (j = 0, jj = content.length; j < jj; j++) {
                           result.set(content[j], pos);
                           pos += content[j].length;
                        }
                        table.data = result;
                        table.length = newLength;
                     }
                  }
                  function sanitizeTTPrograms(fpgm, prep, cvt, maxFunctionDefs) {
                     var ttContext = {
                        functionsDefined: [],
                        functionsUsed: [],
                        functionsStackDeltas: [],
                        tooComplexToFollowFunctions: false,
                        hintsValid: true,
                     };
                     if (fpgm) {
                        sanitizeTTProgram(fpgm, ttContext);
                     }
                     if (prep) {
                        sanitizeTTProgram(prep, ttContext);
                     }
                     if (fpgm) {
                        checkInvalidFunctions(ttContext, maxFunctionDefs);
                     }
                     if (cvt && cvt.length & 1) {
                        var cvtData = new Uint8Array(cvt.length + 1);
                        cvtData.set(cvt.data);
                        cvt.data = cvtData;
                     }
                     return ttContext.hintsValid;
                  }
                  font = new Stream(new Uint8Array(font.getBytes()));
                  var header, tables;
                  if (isTrueTypeCollectionFile(font)) {
                     var ttcData = readTrueTypeCollectionData(font, this.name);
                     header = ttcData.header;
                     tables = ttcData.tables;
                  } else {
                     header = readOpenTypeHeader(font);
                     tables = readTables(font, header.numTables);
                  }
                  var cff, cffFile;
                  var isTrueType = !tables["CFF "];
                  if (!isTrueType) {
                     var _properties$cidToGidM;
                     var isComposite =
                        properties.composite &&
                        (((_properties$cidToGidM = properties.cidToGidMap) === null ||
                           _properties$cidToGidM === void 0
                              ? void 0
                              : _properties$cidToGidM.length) > 0 ||
                           !(properties.cMap instanceof IdentityCMap));
                     if (
                        (header.version === "OTTO" && !isComposite) ||
                        !tables.head ||
                        !tables.hhea ||
                        !tables.maxp ||
                        !tables.post
                     ) {
                        cffFile = new Stream(tables["CFF "].data);
                        cff = new CFFFont(cffFile, properties);
                        adjustWidths(properties);
                        return this.convert(name, cff, properties);
                     }
                     delete tables.glyf;
                     delete tables.loca;
                     delete tables.fpgm;
                     delete tables.prep;
                     delete tables["cvt "];
                     this.isOpenType = true;
                  } else {
                     if (!tables.loca) {
                        throw new FormatError('Required "loca" table is not found');
                     }
                     if (!tables.glyf) {
                        warn(
                           'Required "glyf" table is not found -- trying to recover.',
                        );
                        tables.glyf = { tag: "glyf", data: new Uint8Array(0) };
                     }
                     this.isOpenType = false;
                  }
                  if (!tables.maxp) {
                     throw new FormatError('Required "maxp" table is not found');
                  }
                  font.pos = (font.start || 0) + tables.maxp.offset;
                  var version = font.getInt32();
                  var numGlyphs = font.getUint16();
                  if (version !== 0x00010000 && version !== 0x00005000) {
                     if (tables.maxp.length === 6) {
                        version = 0x0005000;
                     } else if (tables.maxp.length >= 32) {
                        version = 0x00010000;
                     } else {
                        throw new FormatError(
                           '"maxp" table has a wrong version number',
                        );
                     }
                     writeUint32(tables.maxp.data, 0, version);
                  }
                  if (
                     ((_properties$scaleFact = properties.scaleFactors) === null ||
                     _properties$scaleFact === void 0
                        ? void 0
                        : _properties$scaleFact.length) === numGlyphs &&
                     isTrueType
                  ) {
                     var scaleFactors = properties.scaleFactors;
                     var isGlyphLocationsLong = int16(
                        tables.head.data[50],
                        tables.head.data[51],
                     );
                     var glyphs = new GlyfTable({
                        glyfTable: tables.glyf.data,
                        isGlyphLocationsLong: isGlyphLocationsLong,
                        locaTable: tables.loca.data,
                        numGlyphs: numGlyphs,
                     });
                     glyphs.scale(scaleFactors);
                     var _glyphs$write = glyphs.write(),
                        glyf = _glyphs$write.glyf,
                        loca = _glyphs$write.loca,
                        isLocationLong = _glyphs$write.isLocationLong;
                     tables.glyf.data = glyf;
                     tables.loca.data = loca;
                     if (isLocationLong !== !!isGlyphLocationsLong) {
                        tables.head.data[50] = 0;
                        tables.head.data[51] = isLocationLong ? 1 : 0;
                     }
                     var metrics = tables.hmtx.data;
                     for (var i = 0; i < numGlyphs; i++) {
                        var j = 4 * i;
                        var advanceWidth = Math.round(
                           scaleFactors[i] * int16(metrics[j], metrics[j + 1]),
                        );
                        metrics[j] = (advanceWidth >> 8) & 0xff;
                        metrics[j + 1] = advanceWidth & 0xff;
                        var lsb = Math.round(
                           scaleFactors[i] * signedInt16(metrics[j + 2], metrics[j + 3]),
                        );
                        writeSignedInt16(metrics, j + 2, lsb);
                     }
                  }
                  var numGlyphsOut = numGlyphs + 1;
                  var dupFirstEntry = true;
                  if (numGlyphsOut > 0xffff) {
                     dupFirstEntry = false;
                     numGlyphsOut = numGlyphs;
                     warn("Not enough space in glyfs to duplicate first glyph.");
                  }
                  var maxFunctionDefs = 0;
                  var maxSizeOfInstructions = 0;
                  if (version >= 0x00010000 && tables.maxp.length >= 32) {
                     font.pos += 8;
                     var maxZones = font.getUint16();
                     if (maxZones > 2) {
                        tables.maxp.data[14] = 0;
                        tables.maxp.data[15] = 2;
                     }
                     font.pos += 4;
                     maxFunctionDefs = font.getUint16();
                     font.pos += 4;
                     maxSizeOfInstructions = font.getUint16();
                  }
                  tables.maxp.data[4] = numGlyphsOut >> 8;
                  tables.maxp.data[5] = numGlyphsOut & 255;
                  var hintsValid = sanitizeTTPrograms(
                     tables.fpgm,
                     tables.prep,
                     tables["cvt "],
                     maxFunctionDefs,
                  );
                  if (!hintsValid) {
                     delete tables.fpgm;
                     delete tables.prep;
                     delete tables["cvt "];
                  }
                  sanitizeMetrics(
                     font,
                     tables.hhea,
                     tables.hmtx,
                     tables.head,
                     numGlyphsOut,
                     dupFirstEntry,
                  );
                  if (!tables.head) {
                     throw new FormatError('Required "head" table is not found');
                  }
                  sanitizeHead(
                     tables.head,
                     numGlyphs,
                     isTrueType ? tables.loca.length : 0,
                  );
                  var missingGlyphs = Object.create(null);
                  if (isTrueType) {
                     var _isGlyphLocationsLong = int16(
                        tables.head.data[50],
                        tables.head.data[51],
                     );
                     var glyphsInfo = sanitizeGlyphLocations(
                        tables.loca,
                        tables.glyf,
                        numGlyphs,
                        _isGlyphLocationsLong,
                        hintsValid,
                        dupFirstEntry,
                        maxSizeOfInstructions,
                     );
                     missingGlyphs = glyphsInfo.missingGlyphs;
                     if (version >= 0x00010000 && tables.maxp.length >= 32) {
                        tables.maxp.data[26] = glyphsInfo.maxSizeOfInstructions >> 8;
                        tables.maxp.data[27] = glyphsInfo.maxSizeOfInstructions & 255;
                     }
                  }
                  if (!tables.hhea) {
                     throw new FormatError('Required "hhea" table is not found');
                  }
                  if (tables.hhea.data[10] === 0 && tables.hhea.data[11] === 0) {
                     tables.hhea.data[10] = 0xff;
                     tables.hhea.data[11] = 0xff;
                  }
                  var metricsOverride = {
                     unitsPerEm: int16(tables.head.data[18], tables.head.data[19]),
                     yMax: signedInt16(tables.head.data[42], tables.head.data[43]),
                     yMin: signedInt16(tables.head.data[38], tables.head.data[39]),
                     ascent: signedInt16(tables.hhea.data[4], tables.hhea.data[5]),
                     descent: signedInt16(tables.hhea.data[6], tables.hhea.data[7]),
                     lineGap: signedInt16(tables.hhea.data[8], tables.hhea.data[9]),
                  };
                  this.ascent = metricsOverride.ascent / metricsOverride.unitsPerEm;
                  this.descent = metricsOverride.descent / metricsOverride.unitsPerEm;
                  this.lineGap = metricsOverride.lineGap / metricsOverride.unitsPerEm;
                  if (
                     (_this$cssFontInfo = this.cssFontInfo) !== null &&
                     _this$cssFontInfo !== void 0 &&
                     _this$cssFontInfo.lineHeight
                  ) {
                     this.lineHeight = this.cssFontInfo.metrics.lineHeight;
                     this.lineGap = this.cssFontInfo.metrics.lineGap;
                  } else {
                     this.lineHeight = this.ascent - this.descent + this.lineGap;
                  }
                  if (tables.post) {
                     readPostScriptTable(tables.post, properties, numGlyphs);
                  }
                  tables.post = { tag: "post", data: createPostTable(properties) };
                  var charCodeToGlyphId = [];
                  function hasGlyph(glyphId) {
                     return !missingGlyphs[glyphId];
                  }
                  if (properties.composite) {
                     var cidToGidMap = properties.cidToGidMap || [];
                     var isCidToGidMapEmpty = cidToGidMap.length === 0;
                     properties.cMap.forEach(function (charCode, cid) {
                        if (typeof cid === "string") {
                           cid = convertCidString(charCode, cid, true);
                        }
                        if (cid > 0xffff) {
                           throw new FormatError("Max size of CID is 65,535");
                        }
                        var glyphId = -1;
                        if (isCidToGidMapEmpty) {
                           glyphId = cid;
                        } else if (cidToGidMap[cid] !== undefined) {
                           glyphId = cidToGidMap[cid];
                        }
                        if (glyphId >= 0 && glyphId < numGlyphs && hasGlyph(glyphId)) {
                           charCodeToGlyphId[charCode] = glyphId;
                        }
                     });
                  } else {
                     var cmapTable = readCmapTable(
                        tables.cmap,
                        font,
                        this.isSymbolicFont,
                        properties.hasEncoding,
                     );
                     var cmapPlatformId = cmapTable.platformId;
                     var cmapEncodingId = cmapTable.encodingId;
                     var cmapMappings = cmapTable.mappings;
                     var baseEncoding = [],
                        forcePostTable = false;
                     if (
                        properties.hasEncoding &&
                        (properties.baseEncodingName === "MacRomanEncoding" ||
                           properties.baseEncodingName === "WinAnsiEncoding")
                     ) {
                        baseEncoding = getEncoding(properties.baseEncodingName);
                     }
                     if (
                        properties.hasEncoding &&
                        !this.isSymbolicFont &&
                        ((cmapPlatformId === 3 && cmapEncodingId === 1) ||
                           (cmapPlatformId === 1 && cmapEncodingId === 0))
                     ) {
                        var glyphsUnicodeMap = getGlyphsUnicode();
                        for (var charCode = 0; charCode < 256; charCode++) {
                           var glyphName = void 0;
                           if (this.differences[charCode] !== undefined) {
                              glyphName = this.differences[charCode];
                           } else if (
                              baseEncoding.length &&
                              baseEncoding[charCode] !== ""
                           ) {
                              glyphName = baseEncoding[charCode];
                           } else {
                              glyphName = StandardEncoding[charCode];
                           }
                           if (!glyphName) {
                              continue;
                           }
                           var standardGlyphName = recoverGlyphName(
                              glyphName,
                              glyphsUnicodeMap,
                           );
                           var unicodeOrCharCode = void 0;
                           if (cmapPlatformId === 3 && cmapEncodingId === 1) {
                              unicodeOrCharCode = glyphsUnicodeMap[standardGlyphName];
                           } else if (cmapPlatformId === 1 && cmapEncodingId === 0) {
                              unicodeOrCharCode =
                                 MacRomanEncoding.indexOf(standardGlyphName);
                           }
                           if (unicodeOrCharCode === undefined) {
                              if (
                                 !properties.glyphNames &&
                                 properties.hasIncludedToUnicodeMap &&
                                 !(this.toUnicode instanceof IdentityToUnicodeMap)
                              ) {
                                 var unicode = this.toUnicode.get(charCode);
                                 if (unicode) {
                                    unicodeOrCharCode = unicode.codePointAt(0);
                                 }
                              }
                              if (unicodeOrCharCode === undefined) {
                                 continue;
                              }
                           }
                           var _iterator45 = _createForOfIteratorHelper(cmapMappings),
                              _step45;
                           try {
                              for (_iterator45.s(); !(_step45 = _iterator45.n()).done; ) {
                                 var mapping = _step45.value;
                                 if (mapping.charCode !== unicodeOrCharCode) {
                                    continue;
                                 }
                                 charCodeToGlyphId[charCode] = mapping.glyphId;
                                 break;
                              }
                           } catch (err) {
                              _iterator45.e(err);
                           } finally {
                              _iterator45.f();
                           }
                        }
                     } else if (cmapPlatformId === 0) {
                        var _iterator46 = _createForOfIteratorHelper(cmapMappings),
                           _step46;
                        try {
                           for (_iterator46.s(); !(_step46 = _iterator46.n()).done; ) {
                              var _mapping = _step46.value;
                              charCodeToGlyphId[_mapping.charCode] = _mapping.glyphId;
                           }
                        } catch (err) {
                           _iterator46.e(err);
                        } finally {
                           _iterator46.f();
                        }
                        forcePostTable = true;
                     } else if (cmapPlatformId === 3 && cmapEncodingId === 0) {
                        var _iterator47 = _createForOfIteratorHelper(cmapMappings),
                           _step47;
                        try {
                           for (_iterator47.s(); !(_step47 = _iterator47.n()).done; ) {
                              var _mapping2 = _step47.value;
                              var _charCode4 = _mapping2.charCode;
                              if (_charCode4 >= 0xf000 && _charCode4 <= 0xf0ff) {
                                 _charCode4 &= 0xff;
                              }
                              charCodeToGlyphId[_charCode4] = _mapping2.glyphId;
                           }
                        } catch (err) {
                           _iterator47.e(err);
                        } finally {
                           _iterator47.f();
                        }
                     } else {
                        var _iterator48 = _createForOfIteratorHelper(cmapMappings),
                           _step48;
                        try {
                           for (_iterator48.s(); !(_step48 = _iterator48.n()).done; ) {
                              var _mapping3 = _step48.value;
                              charCodeToGlyphId[_mapping3.charCode] = _mapping3.glyphId;
                           }
                        } catch (err) {
                           _iterator48.e(err);
                        } finally {
                           _iterator48.f();
                        }
                     }
                     if (
                        properties.glyphNames &&
                        (baseEncoding.length || this.differences.length)
                     ) {
                        for (var _i29 = 0; _i29 < 256; ++_i29) {
                           if (
                              !forcePostTable &&
                              charCodeToGlyphId[_i29] !== undefined
                           ) {
                              continue;
                           }
                           var _glyphName = this.differences[_i29] || baseEncoding[_i29];
                           if (!_glyphName) {
                              continue;
                           }
                           var glyphId = properties.glyphNames.indexOf(_glyphName);
                           if (glyphId > 0 && hasGlyph(glyphId)) {
                              charCodeToGlyphId[_i29] = glyphId;
                           }
                        }
                     }
                  }
                  if (charCodeToGlyphId.length === 0) {
                     charCodeToGlyphId[0] = 0;
                  }
                  var glyphZeroId = numGlyphsOut - 1;
                  if (!dupFirstEntry) {
                     glyphZeroId = 0;
                  }
                  if (!properties.cssFontInfo) {
                     var newMapping = adjustMapping(
                        charCodeToGlyphId,
                        hasGlyph,
                        glyphZeroId,
                        this.toUnicode,
                     );
                     this.toFontChar = newMapping.toFontChar;
                     tables.cmap = {
                        tag: "cmap",
                        data: createCmapTable(
                           newMapping.charCodeToGlyphId,
                           newMapping.toUnicodeExtraMap,
                           numGlyphsOut,
                        ),
                     };
                     if (!tables["OS/2"] || !validateOS2Table(tables["OS/2"], font)) {
                        tables["OS/2"] = {
                           tag: "OS/2",
                           data: createOS2Table(
                              properties,
                              newMapping.charCodeToGlyphId,
                              metricsOverride,
                           ),
                        };
                     }
                  }
                  if (!isTrueType) {
                     try {
                        cffFile = new Stream(tables["CFF "].data);
                        var parser = new CFFParser(
                           cffFile,
                           properties,
                           SEAC_ANALYSIS_ENABLED,
                        );
                        cff = parser.parse();
                        cff.duplicateFirstGlyph();
                        var compiler = new CFFCompiler(cff);
                        tables["CFF "].data = compiler.compile();
                     } catch (_unused7) {
                        warn("Failed to compile font " + properties.loadedName);
                     }
                  }
                  if (!tables.name) {
                     tables.name = { tag: "name", data: createNameTable(this.name) };
                  } else {
                     var _readNameTable3 = readNameTable(tables.name),
                        _readNameTable4 = _slicedToArray(_readNameTable3, 2),
                        namePrototype = _readNameTable4[0],
                        nameRecords = _readNameTable4[1];
                     tables.name.data = createNameTable(name, namePrototype);
                     this.psName = namePrototype[0][6] || null;
                     if (!properties.composite) {
                        adjustTrueTypeToUnicode(
                           properties,
                           this.isSymbolicFont,
                           nameRecords,
                        );
                     }
                  }
                  var builder = new OpenTypeFileBuilder(header.version);
                  for (var tableTag in tables) {
                     builder.addTable(tableTag, tables[tableTag].data);
                  }
                  return builder.toArray();
               },
            },
            {
               key: "convert",
               value: function convert(fontName, font, properties) {
                  properties.fixedPitch = false;
                  if (properties.builtInEncoding) {
                     adjustType1ToUnicode(properties, properties.builtInEncoding);
                  }
                  var glyphZeroId = 1;
                  if (font instanceof CFFFont) {
                     glyphZeroId = font.numGlyphs - 1;
                  }
                  var mapping = font.getGlyphMapping(properties);
                  var newMapping = null;
                  var newCharCodeToGlyphId = mapping;
                  var toUnicodeExtraMap = null;
                  if (!properties.cssFontInfo) {
                     newMapping = adjustMapping(
                        mapping,
                        font.hasGlyphId.bind(font),
                        glyphZeroId,
                        this.toUnicode,
                     );
                     this.toFontChar = newMapping.toFontChar;
                     newCharCodeToGlyphId = newMapping.charCodeToGlyphId;
                     toUnicodeExtraMap = newMapping.toUnicodeExtraMap;
                  }
                  var numGlyphs = font.numGlyphs;
                  function getCharCodes(charCodeToGlyphId, glyphId) {
                     var charCodes = null;
                     for (var charCode in charCodeToGlyphId) {
                        if (glyphId === charCodeToGlyphId[charCode]) {
                           (charCodes || (charCodes = [])).push(charCode | 0);
                        }
                     }
                     return charCodes;
                  }
                  function createCharCode(charCodeToGlyphId, glyphId) {
                     for (var charCode in charCodeToGlyphId) {
                        if (glyphId === charCodeToGlyphId[charCode]) {
                           return charCode | 0;
                        }
                     }
                     newMapping.charCodeToGlyphId[
                        newMapping.nextAvailableFontCharCode
                        ] = glyphId;
                     return newMapping.nextAvailableFontCharCode++;
                  }
                  var seacs = font.seacs;
                  if (
                     newMapping &&
                     SEAC_ANALYSIS_ENABLED &&
                     seacs !== null &&
                     seacs !== void 0 &&
                     seacs.length
                  ) {
                     var matrix = properties.fontMatrix || FONT_IDENTITY_MATRIX;
                     var charset = font.getCharset();
                     var seacMap = Object.create(null);
                     for (var glyphId in seacs) {
                        glyphId |= 0;
                        var seac = seacs[glyphId];
                        var baseGlyphName = StandardEncoding[seac[2]];
                        var accentGlyphName = StandardEncoding[seac[3]];
                        var baseGlyphId = charset.indexOf(baseGlyphName);
                        var accentGlyphId = charset.indexOf(accentGlyphName);
                        if (baseGlyphId < 0 || accentGlyphId < 0) {
                           continue;
                        }
                        var accentOffset = {
                           x: seac[0] * matrix[0] + seac[1] * matrix[2] + matrix[4],
                           y: seac[0] * matrix[1] + seac[1] * matrix[3] + matrix[5],
                        };
                        var charCodes = getCharCodes(mapping, glyphId);
                        if (!charCodes) {
                           continue;
                        }
                        var _iterator49 = _createForOfIteratorHelper(charCodes),
                           _step49;
                        try {
                           for (_iterator49.s(); !(_step49 = _iterator49.n()).done; ) {
                              var charCode = _step49.value;
                              var charCodeToGlyphId = newMapping.charCodeToGlyphId;
                              var baseFontCharCode = createCharCode(
                                 charCodeToGlyphId,
                                 baseGlyphId,
                              );
                              var accentFontCharCode = createCharCode(
                                 charCodeToGlyphId,
                                 accentGlyphId,
                              );
                              seacMap[charCode] = {
                                 baseFontCharCode: baseFontCharCode,
                                 accentFontCharCode: accentFontCharCode,
                                 accentOffset: accentOffset,
                              };
                           }
                        } catch (err) {
                           _iterator49.e(err);
                        } finally {
                           _iterator49.f();
                        }
                     }
                     properties.seacMap = seacMap;
                  }
                  var unitsPerEm =
                     1 / (properties.fontMatrix || FONT_IDENTITY_MATRIX)[0];
                  var builder = new OpenTypeFileBuilder("\x4F\x54\x54\x4F");
                  builder.addTable("CFF ", font.data);
                  builder.addTable(
                     "OS/2",
                     createOS2Table(properties, newCharCodeToGlyphId),
                  );
                  builder.addTable(
                     "cmap",
                     createCmapTable(
                        newCharCodeToGlyphId,
                        toUnicodeExtraMap,
                        numGlyphs,
                     ),
                  );
                  builder.addTable(
                     "head",
                     "\x00\x01\x00\x00" +
                     "\x00\x00\x10\x00" +
                     "\x00\x00\x00\x00" +
                     "\x5F\x0F\x3C\xF5" +
                     "\x00\x00" +
                     safeString16(unitsPerEm) +
                     "\x00\x00\x00\x00\x9e\x0b\x7e\x27" +
                     "\x00\x00\x00\x00\x9e\x0b\x7e\x27" +
                     "\x00\x00" +
                     safeString16(properties.descent) +
                     "\x0F\xFF" +
                     safeString16(properties.ascent) +
                     string16(properties.italicAngle ? 2 : 0) +
                     "\x00\x11" +
                     "\x00\x00" +
                     "\x00\x00" +
                     "\x00\x00",
                  );
                  builder.addTable(
                     "hhea",
                     "\x00\x01\x00\x00" +
                     safeString16(properties.ascent) +
                     safeString16(properties.descent) +
                     "\x00\x00" +
                     "\xFF\xFF" +
                     "\x00\x00" +
                     "\x00\x00" +
                     "\x00\x00" +
                     safeString16(properties.capHeight) +
                     safeString16(
                        Math.tan(properties.italicAngle) * properties.xHeight,
                     ) +
                     "\x00\x00" +
                     "\x00\x00" +
                     "\x00\x00" +
                     "\x00\x00" +
                     "\x00\x00" +
                     "\x00\x00" +
                     string16(numGlyphs),
                  );
                  builder.addTable(
                     "hmtx",
                     (function fontFieldsHmtx() {
                        var charstrings = font.charstrings;
                        var cffWidths = font.cff ? font.cff.widths : null;
                        var hmtx = "\x00\x00\x00\x00";
                        for (var i = 1, ii = numGlyphs; i < ii; i++) {
                           var width = 0;
                           if (charstrings) {
                              var charstring = charstrings[i - 1];
                              width = "width" in charstring ? charstring.width : 0;
                           } else if (cffWidths) {
                              width = Math.ceil(cffWidths[i] || 0);
                           }
                           hmtx += string16(width) + string16(0);
                        }
                        return hmtx;
                     })(),
                  );
                  builder.addTable("maxp", "\x00\x00\x50\x00" + string16(numGlyphs));
                  builder.addTable("name", createNameTable(fontName));
                  builder.addTable("post", createPostTable(properties));
                  return builder.toArray();
               },
            },
            {
               key: "spaceWidth",
               get: function get() {
                  var possibleSpaceReplacements = ["space", "minus", "one", "i", "I"];
                  var width;
                  for (
                     var _i30 = 0, _possibleSpaceReplace = possibleSpaceReplacements;
                     _i30 < _possibleSpaceReplace.length;
                     _i30++
                  ) {
                     var glyphName = _possibleSpaceReplace[_i30];
                     if (glyphName in this.widths) {
                        width = this.widths[glyphName];
                        break;
                     }
                     var glyphsUnicodeMap = getGlyphsUnicode();
                     var glyphUnicode = glyphsUnicodeMap[glyphName];
                     var charcode = 0;
                     if (this.composite && this.cMap.contains(glyphUnicode)) {
                        charcode = this.cMap.lookup(glyphUnicode);
                        if (typeof charcode === "string") {
                           charcode = convertCidString(glyphUnicode, charcode);
                        }
                     }
                     if (!charcode && this.toUnicode) {
                        charcode = this.toUnicode.charCodeOf(glyphUnicode);
                     }
                     if (charcode <= 0) {
                        charcode = glyphUnicode;
                     }
                     width = this.widths[charcode];
                     if (width) {
                        break;
                     }
                  }
                  return shadow(this, "spaceWidth", width || this.defaultWidth);
               },
            },
            {
               key: "_charToGlyph",
               value: function _charToGlyph(charcode) {
                  var _glyph2, _this$cMap, _this$vmetrics, _this$seacMap;
                  var isSpace =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : false;
                  var glyph = this._glyphCache[charcode];
                  if (
                     ((_glyph2 = glyph) === null || _glyph2 === void 0
                        ? void 0
                        : _glyph2.isSpace) === isSpace
                  ) {
                     return glyph;
                  }
                  var fontCharCode, width, operatorListId;
                  var widthCode = charcode;
                  if (
                     (_this$cMap = this.cMap) !== null &&
                     _this$cMap !== void 0 &&
                     _this$cMap.contains(charcode)
                  ) {
                     widthCode = this.cMap.lookup(charcode);
                     if (typeof widthCode === "string") {
                        widthCode = convertCidString(charcode, widthCode);
                     }
                  }
                  width = this.widths[widthCode];
                  if (typeof width !== "number") {
                     width = this.defaultWidth;
                  }
                  var vmetric =
                     (_this$vmetrics = this.vmetrics) === null ||
                     _this$vmetrics === void 0
                        ? void 0
                        : _this$vmetrics[widthCode];
                  var unicode = this.toUnicode.get(charcode) || charcode;
                  if (typeof unicode === "number") {
                     unicode = String.fromCharCode(unicode);
                  }
                  var isInFont = this.toFontChar[charcode] !== undefined;
                  fontCharCode = this.toFontChar[charcode] || charcode;
                  if (this.missingFile) {
                     var glyphName =
                        this.differences[charcode] || this.defaultEncoding[charcode];
                     if (
                        (glyphName === ".notdef" || glyphName === "") &&
                        this.type === "Type1"
                     ) {
                        fontCharCode = 0x20;
                     }
                     fontCharCode = mapSpecialUnicodeValues(fontCharCode);
                  }
                  if (this.isType3Font) {
                     operatorListId = fontCharCode;
                  }
                  var accent = null;
                  if (
                     (_this$seacMap = this.seacMap) !== null &&
                     _this$seacMap !== void 0 &&
                     _this$seacMap[charcode]
                  ) {
                     isInFont = true;
                     var seac = this.seacMap[charcode];
                     fontCharCode = seac.baseFontCharCode;
                     accent = {
                        fontChar: String.fromCodePoint(seac.accentFontCharCode),
                        offset: seac.accentOffset,
                     };
                  }
                  var fontChar = "";
                  if (typeof fontCharCode === "number") {
                     if (fontCharCode <= 0x10ffff) {
                        fontChar = String.fromCodePoint(fontCharCode);
                     } else {
                        warn(
                           "charToGlyph - invalid fontCharCode: ".concat(fontCharCode),
                        );
                     }
                  }
                  glyph = new fonts_Glyph(
                     charcode,
                     fontChar,
                     unicode,
                     accent,
                     width,
                     vmetric,
                     operatorListId,
                     isSpace,
                     isInFont,
                  );
                  return (this._glyphCache[charcode] = glyph);
               },
            },
            {
               key: "charsToGlyphs",
               value: function charsToGlyphs(chars) {
                  var glyphs = this._charsCache[chars];
                  if (glyphs) {
                     return glyphs;
                  }
                  glyphs = [];
                  if (this.cMap) {
                     var c = Object.create(null),
                        ii = chars.length;
                     var i = 0;
                     while (i < ii) {
                        this.cMap.readCharCode(chars, i, c);
                        var charcode = c.charcode,
                           length = c.length;
                        i += length;
                        var glyph = this._charToGlyph(
                           charcode,
                           length === 1 && chars.charCodeAt(i - 1) === 0x20,
                        );
                        glyphs.push(glyph);
                     }
                  } else {
                     for (var _i31 = 0, _ii5 = chars.length; _i31 < _ii5; ++_i31) {
                        var _charcode = chars.charCodeAt(_i31);
                        var _glyph3 = this._charToGlyph(_charcode, _charcode === 0x20);
                        glyphs.push(_glyph3);
                     }
                  }
                  return (this._charsCache[chars] = glyphs);
               },
            },
            {
               key: "getCharPositions",
               value: function getCharPositions(chars) {
                  var positions = [];
                  if (this.cMap) {
                     var c = Object.create(null);
                     var i = 0;
                     while (i < chars.length) {
                        this.cMap.readCharCode(chars, i, c);
                        var length = c.length;
                        positions.push([i, i + length]);
                        i += length;
                     }
                  } else {
                     for (var _i32 = 0, ii = chars.length; _i32 < ii; ++_i32) {
                        positions.push([_i32, _i32 + 1]);
                     }
                  }
                  return positions;
               },
            },
            {
               key: "glyphCacheValues",
               get: function get() {
                  return Object.values(this._glyphCache);
               },
            },
            {
               key: "encodeString",
               value: function encodeString(str) {
                  var _this33 = this;
                  var buffers = [];
                  var currentBuf = [];
                  var hasCurrentBufErrors = function hasCurrentBufErrors() {
                     return buffers.length % 2 === 1;
                  };
                  var getCharCode =
                     this.toUnicode instanceof IdentityToUnicodeMap
                        ? function (unicode) {
                           return _this33.toUnicode.charCodeOf(unicode);
                        }
                        : function (unicode) {
                           return _this33.toUnicode.charCodeOf(
                              String.fromCodePoint(unicode),
                           );
                        };
                  for (var i = 0, ii = str.length; i < ii; i++) {
                     var unicode = str.codePointAt(i);
                     if (unicode > 0xd7ff && (unicode < 0xe000 || unicode > 0xfffd)) {
                        i++;
                     }
                     if (this.toUnicode) {
                        var charCode = getCharCode(unicode);
                        if (charCode !== -1) {
                           if (hasCurrentBufErrors()) {
                              buffers.push(currentBuf.join(""));
                              currentBuf.length = 0;
                           }
                           var charCodeLength = this.cMap
                              ? this.cMap.getCharCodeLength(charCode)
                              : 1;
                           for (var j = charCodeLength - 1; j >= 0; j--) {
                              currentBuf.push(
                                 String.fromCharCode((charCode >> (8 * j)) & 0xff),
                              );
                           }
                           continue;
                        }
                     }
                     if (!hasCurrentBufErrors()) {
                        buffers.push(currentBuf.join(""));
                        currentBuf.length = 0;
                     }
                     currentBuf.push(String.fromCodePoint(unicode));
                  }
                  buffers.push(currentBuf.join(""));
                  return buffers;
               },
            },
         ]);
      })();
      var ErrorFont = /*#__PURE__*/ (function () {
         function ErrorFont(error) {
            _classCallCheck(this, ErrorFont);
            this.error = error;
            this.loadedName = "g_font_error";
            this.missingFile = true;
         }
         return _createClass(ErrorFont, [
            {
               key: "charsToGlyphs",
               value: function charsToGlyphs() {
                  return [];
               },
            },
            {
               key: "encodeString",
               value: function encodeString(chars) {
                  return [chars];
               },
            },
            {
               key: "exportData",
               value: function exportData() {
                  var extraProperties =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : false;
                  return { error: this.error };
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/pattern.js
      var ShadingType = {
         FUNCTION_BASED: 1,
         AXIAL: 2,
         RADIAL: 3,
         FREE_FORM_MESH: 4,
         LATTICE_FORM_MESH: 5,
         COONS_PATCH_MESH: 6,
         TENSOR_PATCH_MESH: 7,
      };
      var Pattern = /*#__PURE__*/ (function () {
         function Pattern() {
            _classCallCheck(this, Pattern);
            unreachable("Cannot initialize Pattern.");
         }
         return _createClass(Pattern, null, [
            {
               key: "parseShading",
               value: function parseShading(
                  shading,
                  xref,
                  res,
                  pdfFunctionFactory,
                  localColorSpaceCache,
               ) {
                  var dict = shading instanceof BaseStream ? shading.dict : shading;
                  var type = dict.get("ShadingType");
                  try {
                     switch (type) {
                        case ShadingType.AXIAL:
                        case ShadingType.RADIAL:
                           return new RadialAxialShading(
                              dict,
                              xref,
                              res,
                              pdfFunctionFactory,
                              localColorSpaceCache,
                           );
                        case ShadingType.FREE_FORM_MESH:
                        case ShadingType.LATTICE_FORM_MESH:
                        case ShadingType.COONS_PATCH_MESH:
                        case ShadingType.TENSOR_PATCH_MESH:
                           return new MeshShading(
                              shading,
                              xref,
                              res,
                              pdfFunctionFactory,
                              localColorSpaceCache,
                           );
                        default:
                           throw new FormatError("Unsupported ShadingType: " + type);
                     }
                  } catch (ex) {
                     if (ex instanceof MissingDataException) {
                        throw ex;
                     }
                     warn(ex);
                     return new DummyShading();
                  }
               },
            },
         ]);
      })();
      var BaseShading = /*#__PURE__*/ (function () {
         function BaseShading() {
            _classCallCheck(this, BaseShading);
            if (this.constructor === BaseShading) {
               unreachable("Cannot initialize BaseShading.");
            }
         }
         return _createClass(BaseShading, [
            {
               key: "getIR",
               value: function getIR() {
                  unreachable("Abstract method `getIR` called.");
               },
            },
         ]);
      })();
      _defineProperty(BaseShading, "SMALL_NUMBER", 1e-6);
      var RadialAxialShading = /*#__PURE__*/ (function (_BaseShading2) {
         function RadialAxialShading(
            dict,
            xref,
            resources,
            pdfFunctionFactory,
            localColorSpaceCache,
         ) {
            var _this34;
            _classCallCheck(this, RadialAxialShading);
            _this34 = _callSuper(this, RadialAxialShading);
            _this34.coordsArr = dict.getArray("Coords");
            _this34.shadingType = dict.get("ShadingType");
            var cs = ColorSpace.parse({
               cs: dict.getRaw("CS") || dict.getRaw("ColorSpace"),
               xref: xref,
               resources: resources,
               pdfFunctionFactory: pdfFunctionFactory,
               localColorSpaceCache: localColorSpaceCache,
            });
            var bbox = dict.getArray("BBox");
            _this34.bbox =
               Array.isArray(bbox) && bbox.length === 4
                  ? Util.normalizeRect(bbox)
                  : null;
            var t0 = 0.0,
               t1 = 1.0;
            if (dict.has("Domain")) {
               var domainArr = dict.getArray("Domain");
               t0 = domainArr[0];
               t1 = domainArr[1];
            }
            var extendStart = false,
               extendEnd = false;
            if (dict.has("Extend")) {
               var extendArr = dict.getArray("Extend");
               extendStart = extendArr[0];
               extendEnd = extendArr[1];
            }
            if (
               _this34.shadingType === ShadingType.RADIAL &&
               (!extendStart || !extendEnd)
            ) {
               var _this34$coordsArr = _slicedToArray(_this34.coordsArr, 6),
                  x1 = _this34$coordsArr[0],
                  y1 = _this34$coordsArr[1],
                  r1 = _this34$coordsArr[2],
                  x2 = _this34$coordsArr[3],
                  y2 = _this34$coordsArr[4],
                  r2 = _this34$coordsArr[5];
               var distance = Math.hypot(x1 - x2, y1 - y2);
               if (r1 <= r2 + distance && r2 <= r1 + distance) {
                  warn("Unsupported radial gradient.");
               }
            }
            _this34.extendStart = extendStart;
            _this34.extendEnd = extendEnd;
            var fnObj = dict.getRaw("Function");
            var fn = pdfFunctionFactory.createFromArray(fnObj);
            var NUMBER_OF_SAMPLES = 840;
            var step = (t1 - t0) / NUMBER_OF_SAMPLES;
            var colorStops = (_this34.colorStops = []);
            if (t0 >= t1 || step <= 0) {
               info("Bad shading domain.");
               return _possibleConstructorReturn(_this34);
            }
            var color = new Float32Array(cs.numComps),
               ratio = new Float32Array(1);
            var rgbColor;
            var iBase = 0;
            ratio[0] = t0;
            fn(ratio, 0, color, 0);
            var rgbBase = cs.getRgb(color, 0);
            var cssColorBase = Util.makeHexColor(
               rgbBase[0],
               rgbBase[1],
               rgbBase[2],
            );
            colorStops.push([0, cssColorBase]);
            var iPrev = 1;
            ratio[0] = t0 + step;
            fn(ratio, 0, color, 0);
            var rgbPrev = cs.getRgb(color, 0);
            var maxSlopeR = rgbPrev[0] - rgbBase[0] + 1;
            var maxSlopeG = rgbPrev[1] - rgbBase[1] + 1;
            var maxSlopeB = rgbPrev[2] - rgbBase[2] + 1;
            var minSlopeR = rgbPrev[0] - rgbBase[0] - 1;
            var minSlopeG = rgbPrev[1] - rgbBase[1] - 1;
            var minSlopeB = rgbPrev[2] - rgbBase[2] - 1;
            for (var i = 2; i < NUMBER_OF_SAMPLES; i++) {
               ratio[0] = t0 + i * step;
               fn(ratio, 0, color, 0);
               rgbColor = cs.getRgb(color, 0);
               var run = i - iBase;
               maxSlopeR = Math.min(maxSlopeR, (rgbColor[0] - rgbBase[0] + 1) / run);
               maxSlopeG = Math.min(maxSlopeG, (rgbColor[1] - rgbBase[1] + 1) / run);
               maxSlopeB = Math.min(maxSlopeB, (rgbColor[2] - rgbBase[2] + 1) / run);
               minSlopeR = Math.max(minSlopeR, (rgbColor[0] - rgbBase[0] - 1) / run);
               minSlopeG = Math.max(minSlopeG, (rgbColor[1] - rgbBase[1] - 1) / run);
               minSlopeB = Math.max(minSlopeB, (rgbColor[2] - rgbBase[2] - 1) / run);
               var slopesExist =
                  minSlopeR <= maxSlopeR &&
                  minSlopeG <= maxSlopeG &&
                  minSlopeB <= maxSlopeB;
               if (!slopesExist) {
                  var _cssColor = Util.makeHexColor(
                     rgbPrev[0],
                     rgbPrev[1],
                     rgbPrev[2],
                  );
                  colorStops.push([iPrev / NUMBER_OF_SAMPLES, _cssColor]);
                  maxSlopeR = rgbColor[0] - rgbPrev[0] + 1;
                  maxSlopeG = rgbColor[1] - rgbPrev[1] + 1;
                  maxSlopeB = rgbColor[2] - rgbPrev[2] + 1;
                  minSlopeR = rgbColor[0] - rgbPrev[0] - 1;
                  minSlopeG = rgbColor[1] - rgbPrev[1] - 1;
                  minSlopeB = rgbColor[2] - rgbPrev[2] - 1;
                  iBase = iPrev;
                  rgbBase = rgbPrev;
               }
               iPrev = i;
               rgbPrev = rgbColor;
            }
            var cssColor = Util.makeHexColor(rgbPrev[0], rgbPrev[1], rgbPrev[2]);
            colorStops.push([1, cssColor]);
            var background = "transparent";
            if (dict.has("Background")) {
               rgbColor = cs.getRgb(dict.get("Background"), 0);
               background = Util.makeHexColor(rgbColor[0], rgbColor[1], rgbColor[2]);
            }
            if (!extendStart) {
               colorStops.unshift([0, background]);
               colorStops[1][0] += BaseShading.SMALL_NUMBER;
            }
            if (!extendEnd) {
               colorStops.at(-1)[0] -= BaseShading.SMALL_NUMBER;
               colorStops.push([1, background]);
            }
            _this34.colorStops = colorStops;
            return _this34;
         }
         _inherits(RadialAxialShading, _BaseShading2);
         return _createClass(RadialAxialShading, [
            {
               key: "getIR",
               value: function getIR() {
                  var coordsArr = this.coordsArr;
                  var shadingType = this.shadingType;
                  var type, p0, p1, r0, r1;
                  if (shadingType === ShadingType.AXIAL) {
                     p0 = [coordsArr[0], coordsArr[1]];
                     p1 = [coordsArr[2], coordsArr[3]];
                     r0 = null;
                     r1 = null;
                     type = "axial";
                  } else if (shadingType === ShadingType.RADIAL) {
                     p0 = [coordsArr[0], coordsArr[1]];
                     p1 = [coordsArr[3], coordsArr[4]];
                     r0 = coordsArr[2];
                     r1 = coordsArr[5];
                     type = "radial";
                  } else {
                     unreachable("getPattern type unknown: ".concat(shadingType));
                  }
                  return [
                     "RadialAxial",
                     type,
                     this.bbox,
                     this.colorStops,
                     p0,
                     p1,
                     r0,
                     r1,
                  ];
               },
            },
         ]);
      })(BaseShading);
      var MeshStreamReader = /*#__PURE__*/ (function () {
         function MeshStreamReader(stream, context) {
            _classCallCheck(this, MeshStreamReader);
            this.stream = stream;
            this.context = context;
            this.buffer = 0;
            this.bufferLength = 0;
            var numComps = context.numComps;
            this.tmpCompsBuf = new Float32Array(numComps);
            var csNumComps = context.colorSpace.numComps;
            this.tmpCsCompsBuf = context.colorFn
               ? new Float32Array(csNumComps)
               : this.tmpCompsBuf;
         }
         return _createClass(MeshStreamReader, [
            {
               key: "hasData",
               get: function get() {
                  if (this.stream.end) {
                     return this.stream.pos < this.stream.end;
                  }
                  if (this.bufferLength > 0) {
                     return true;
                  }
                  var nextByte = this.stream.getByte();
                  if (nextByte < 0) {
                     return false;
                  }
                  this.buffer = nextByte;
                  this.bufferLength = 8;
                  return true;
               },
            },
            {
               key: "readBits",
               value: function readBits(n) {
                  var buffer = this.buffer;
                  var bufferLength = this.bufferLength;
                  if (n === 32) {
                     if (bufferLength === 0) {
                        return (
                           ((this.stream.getByte() << 24) |
                              (this.stream.getByte() << 16) |
                              (this.stream.getByte() << 8) |
                              this.stream.getByte()) >>>
                           0
                        );
                     }
                     buffer =
                        (buffer << 24) |
                        (this.stream.getByte() << 16) |
                        (this.stream.getByte() << 8) |
                        this.stream.getByte();
                     var nextByte = this.stream.getByte();
                     this.buffer = nextByte & ((1 << bufferLength) - 1);
                     return (
                        ((buffer << (8 - bufferLength)) |
                           ((nextByte & 0xff) >> bufferLength)) >>>
                        0
                     );
                  }
                  if (n === 8 && bufferLength === 0) {
                     return this.stream.getByte();
                  }
                  while (bufferLength < n) {
                     buffer = (buffer << 8) | this.stream.getByte();
                     bufferLength += 8;
                  }
                  bufferLength -= n;
                  this.bufferLength = bufferLength;
                  this.buffer = buffer & ((1 << bufferLength) - 1);
                  return buffer >> bufferLength;
               },
            },
            {
               key: "align",
               value: function align() {
                  this.buffer = 0;
                  this.bufferLength = 0;
               },
            },
            {
               key: "readFlag",
               value: function readFlag() {
                  return this.readBits(this.context.bitsPerFlag);
               },
            },
            {
               key: "readCoordinate",
               value: function readCoordinate() {
                  var bitsPerCoordinate = this.context.bitsPerCoordinate;
                  var xi = this.readBits(bitsPerCoordinate);
                  var yi = this.readBits(bitsPerCoordinate);
                  var decode = this.context.decode;
                  var scale =
                     bitsPerCoordinate < 32
                        ? 1 / ((1 << bitsPerCoordinate) - 1)
                        : 2.3283064365386963e-10;
                  return [
                     xi * scale * (decode[1] - decode[0]) + decode[0],
                     yi * scale * (decode[3] - decode[2]) + decode[2],
                  ];
               },
            },
            {
               key: "readComponents",
               value: function readComponents() {
                  var numComps = this.context.numComps;
                  var bitsPerComponent = this.context.bitsPerComponent;
                  var scale =
                     bitsPerComponent < 32
                        ? 1 / ((1 << bitsPerComponent) - 1)
                        : 2.3283064365386963e-10;
                  var decode = this.context.decode;
                  var components = this.tmpCompsBuf;
                  for (var i = 0, j = 4; i < numComps; i++, j += 2) {
                     var ci = this.readBits(bitsPerComponent);
                     components[i] =
                        ci * scale * (decode[j + 1] - decode[j]) + decode[j];
                  }
                  var color = this.tmpCsCompsBuf;
                  if (this.context.colorFn) {
                     this.context.colorFn(components, 0, color, 0);
                  }
                  return this.context.colorSpace.getRgb(color, 0);
               },
            },
         ]);
      })();
      var bCache = Object.create(null);
      function buildB(count) {
         var lut = [];
         for (var i = 0; i <= count; i++) {
            var t = i / count,
               t_ = 1 - t;
            lut.push(
               new Float32Array([
                  Math.pow(t_, 3),
                  3 * t * Math.pow(t_, 2),
                  3 * Math.pow(t, 2) * t_,
                  Math.pow(t, 3),
               ]),
            );
         }
         return lut;
      }
      function getB(count) {
         var _bCache;
         return (_bCache = bCache)[count] || (_bCache[count] = buildB(count));
      }
      function clearPatternCaches() {
         bCache = Object.create(null);
      }
      var MeshShading = /*#__PURE__*/ (function (_BaseShading3) {
         function MeshShading(
            stream,
            xref,
            resources,
            pdfFunctionFactory,
            localColorSpaceCache,
         ) {
            var _this35;
            _classCallCheck(this, MeshShading);
            _this35 = _callSuper(this, MeshShading);
            if (!(stream instanceof BaseStream)) {
               throw new FormatError("Mesh data is not a stream");
            }
            var dict = stream.dict;
            _this35.shadingType = dict.get("ShadingType");
            var bbox = dict.getArray("BBox");
            _this35.bbox =
               Array.isArray(bbox) && bbox.length === 4
                  ? Util.normalizeRect(bbox)
                  : null;
            var cs = ColorSpace.parse({
               cs: dict.getRaw("CS") || dict.getRaw("ColorSpace"),
               xref: xref,
               resources: resources,
               pdfFunctionFactory: pdfFunctionFactory,
               localColorSpaceCache: localColorSpaceCache,
            });
            _this35.background = dict.has("Background")
               ? cs.getRgb(dict.get("Background"), 0)
               : null;
            var fnObj = dict.getRaw("Function");
            var fn = fnObj ? pdfFunctionFactory.createFromArray(fnObj) : null;
            _this35.coords = [];
            _this35.colors = [];
            _this35.figures = [];
            var decodeContext = {
               bitsPerCoordinate: dict.get("BitsPerCoordinate"),
               bitsPerComponent: dict.get("BitsPerComponent"),
               bitsPerFlag: dict.get("BitsPerFlag"),
               decode: dict.getArray("Decode"),
               colorFn: fn,
               colorSpace: cs,
               numComps: fn ? 1 : cs.numComps,
            };
            var reader = new MeshStreamReader(stream, decodeContext);
            var patchMesh = false;
            switch (_this35.shadingType) {
               case ShadingType.FREE_FORM_MESH:
                  _this35._decodeType4Shading(reader);
                  break;
               case ShadingType.LATTICE_FORM_MESH:
                  var verticesPerRow = dict.get("VerticesPerRow") | 0;
                  if (verticesPerRow < 2) {
                     throw new FormatError("Invalid VerticesPerRow");
                  }
                  _this35._decodeType5Shading(reader, verticesPerRow);
                  break;
               case ShadingType.COONS_PATCH_MESH:
                  _this35._decodeType6Shading(reader);
                  patchMesh = true;
                  break;
               case ShadingType.TENSOR_PATCH_MESH:
                  _this35._decodeType7Shading(reader);
                  patchMesh = true;
                  break;
               default:
                  unreachable("Unsupported mesh type.");
                  break;
            }
            if (patchMesh) {
               _this35._updateBounds();
               for (var i = 0, ii = _this35.figures.length; i < ii; i++) {
                  _this35._buildFigureFromPatch(i);
               }
            }
            _this35._updateBounds();
            _this35._packData();
            return _this35;
         }
         _inherits(MeshShading, _BaseShading3);
         return _createClass(MeshShading, [
            {
               key: "_decodeType4Shading",
               value: function _decodeType4Shading(reader) {
                  var coords = this.coords;
                  var colors = this.colors;
                  var operators = [];
                  var ps = [];
                  var verticesLeft = 0;
                  while (reader.hasData) {
                     var f = reader.readFlag();
                     var coord = reader.readCoordinate();
                     var color = reader.readComponents();
                     if (verticesLeft === 0) {
                        if (!(0 <= f && f <= 2)) {
                           throw new FormatError("Unknown type4 flag");
                        }
                        switch (f) {
                           case 0:
                              verticesLeft = 3;
                              break;
                           case 1:
                              ps.push(ps.at(-2), ps.at(-1));
                              verticesLeft = 1;
                              break;
                           case 2:
                              ps.push(ps.at(-3), ps.at(-1));
                              verticesLeft = 1;
                              break;
                        }
                        operators.push(f);
                     }
                     ps.push(coords.length);
                     coords.push(coord);
                     colors.push(color);
                     verticesLeft--;
                     reader.align();
                  }
                  this.figures.push({
                     type: "triangles",
                     coords: new Int32Array(ps),
                     colors: new Int32Array(ps),
                  });
               },
            },
            {
               key: "_decodeType5Shading",
               value: function _decodeType5Shading(reader, verticesPerRow) {
                  var coords = this.coords;
                  var colors = this.colors;
                  var ps = [];
                  while (reader.hasData) {
                     var coord = reader.readCoordinate();
                     var color = reader.readComponents();
                     ps.push(coords.length);
                     coords.push(coord);
                     colors.push(color);
                  }
                  this.figures.push({
                     type: "lattice",
                     coords: new Int32Array(ps),
                     colors: new Int32Array(ps),
                     verticesPerRow: verticesPerRow,
                  });
               },
            },
            {
               key: "_decodeType6Shading",
               value: function _decodeType6Shading(reader) {
                  var coords = this.coords;
                  var colors = this.colors;
                  var ps = new Int32Array(16);
                  var cs = new Int32Array(4);
                  while (reader.hasData) {
                     var f = reader.readFlag();
                     if (!(0 <= f && f <= 3)) {
                        throw new FormatError("Unknown type6 flag");
                     }
                     var pi = coords.length;
                     for (var i = 0, ii = f !== 0 ? 8 : 12; i < ii; i++) {
                        coords.push(reader.readCoordinate());
                     }
                     var ci = colors.length;
                     for (var _i33 = 0, _ii6 = f !== 0 ? 2 : 4; _i33 < _ii6; _i33++) {
                        colors.push(reader.readComponents());
                     }
                     var tmp1 = void 0,
                        tmp2 = void 0,
                        tmp3 = void 0,
                        tmp4 = void 0;
                     switch (f) {
                        case 0:
                           ps[12] = pi + 3;
                           ps[13] = pi + 4;
                           ps[14] = pi + 5;
                           ps[15] = pi + 6;
                           ps[8] = pi + 2;
                           ps[11] = pi + 7;
                           ps[4] = pi + 1;
                           ps[7] = pi + 8;
                           ps[0] = pi;
                           ps[1] = pi + 11;
                           ps[2] = pi + 10;
                           ps[3] = pi + 9;
                           cs[2] = ci + 1;
                           cs[3] = ci + 2;
                           cs[0] = ci;
                           cs[1] = ci + 3;
                           break;
                        case 1:
                           tmp1 = ps[12];
                           tmp2 = ps[13];
                           tmp3 = ps[14];
                           tmp4 = ps[15];
                           ps[12] = tmp4;
                           ps[13] = pi + 0;
                           ps[14] = pi + 1;
                           ps[15] = pi + 2;
                           ps[8] = tmp3;
                           ps[11] = pi + 3;
                           ps[4] = tmp2;
                           ps[7] = pi + 4;
                           ps[0] = tmp1;
                           ps[1] = pi + 7;
                           ps[2] = pi + 6;
                           ps[3] = pi + 5;
                           tmp1 = cs[2];
                           tmp2 = cs[3];
                           cs[2] = tmp2;
                           cs[3] = ci;
                           cs[0] = tmp1;
                           cs[1] = ci + 1;
                           break;
                        case 2:
                           tmp1 = ps[15];
                           tmp2 = ps[11];
                           ps[12] = ps[3];
                           ps[13] = pi + 0;
                           ps[14] = pi + 1;
                           ps[15] = pi + 2;
                           ps[8] = ps[7];
                           ps[11] = pi + 3;
                           ps[4] = tmp2;
                           ps[7] = pi + 4;
                           ps[0] = tmp1;
                           ps[1] = pi + 7;
                           ps[2] = pi + 6;
                           ps[3] = pi + 5;
                           tmp1 = cs[3];
                           cs[2] = cs[1];
                           cs[3] = ci;
                           cs[0] = tmp1;
                           cs[1] = ci + 1;
                           break;
                        case 3:
                           ps[12] = ps[0];
                           ps[13] = pi + 0;
                           ps[14] = pi + 1;
                           ps[15] = pi + 2;
                           ps[8] = ps[1];
                           ps[11] = pi + 3;
                           ps[4] = ps[2];
                           ps[7] = pi + 4;
                           ps[0] = ps[3];
                           ps[1] = pi + 7;
                           ps[2] = pi + 6;
                           ps[3] = pi + 5;
                           cs[2] = cs[0];
                           cs[3] = ci;
                           cs[0] = cs[1];
                           cs[1] = ci + 1;
                           break;
                     }
                     ps[5] = coords.length;
                     coords.push([
                        (-4 * coords[ps[0]][0] -
                           coords[ps[15]][0] +
                           6 * (coords[ps[4]][0] + coords[ps[1]][0]) -
                           2 * (coords[ps[12]][0] + coords[ps[3]][0]) +
                           3 * (coords[ps[13]][0] + coords[ps[7]][0])) /
                        9,
                        (-4 * coords[ps[0]][1] -
                           coords[ps[15]][1] +
                           6 * (coords[ps[4]][1] + coords[ps[1]][1]) -
                           2 * (coords[ps[12]][1] + coords[ps[3]][1]) +
                           3 * (coords[ps[13]][1] + coords[ps[7]][1])) /
                        9,
                     ]);
                     ps[6] = coords.length;
                     coords.push([
                        (-4 * coords[ps[3]][0] -
                           coords[ps[12]][0] +
                           6 * (coords[ps[2]][0] + coords[ps[7]][0]) -
                           2 * (coords[ps[0]][0] + coords[ps[15]][0]) +
                           3 * (coords[ps[4]][0] + coords[ps[14]][0])) /
                        9,
                        (-4 * coords[ps[3]][1] -
                           coords[ps[12]][1] +
                           6 * (coords[ps[2]][1] + coords[ps[7]][1]) -
                           2 * (coords[ps[0]][1] + coords[ps[15]][1]) +
                           3 * (coords[ps[4]][1] + coords[ps[14]][1])) /
                        9,
                     ]);
                     ps[9] = coords.length;
                     coords.push([
                        (-4 * coords[ps[12]][0] -
                           coords[ps[3]][0] +
                           6 * (coords[ps[8]][0] + coords[ps[13]][0]) -
                           2 * (coords[ps[0]][0] + coords[ps[15]][0]) +
                           3 * (coords[ps[11]][0] + coords[ps[1]][0])) /
                        9,
                        (-4 * coords[ps[12]][1] -
                           coords[ps[3]][1] +
                           6 * (coords[ps[8]][1] + coords[ps[13]][1]) -
                           2 * (coords[ps[0]][1] + coords[ps[15]][1]) +
                           3 * (coords[ps[11]][1] + coords[ps[1]][1])) /
                        9,
                     ]);
                     ps[10] = coords.length;
                     coords.push([
                        (-4 * coords[ps[15]][0] -
                           coords[ps[0]][0] +
                           6 * (coords[ps[11]][0] + coords[ps[14]][0]) -
                           2 * (coords[ps[12]][0] + coords[ps[3]][0]) +
                           3 * (coords[ps[2]][0] + coords[ps[8]][0])) /
                        9,
                        (-4 * coords[ps[15]][1] -
                           coords[ps[0]][1] +
                           6 * (coords[ps[11]][1] + coords[ps[14]][1]) -
                           2 * (coords[ps[12]][1] + coords[ps[3]][1]) +
                           3 * (coords[ps[2]][1] + coords[ps[8]][1])) /
                        9,
                     ]);
                     this.figures.push({
                        type: "patch",
                        coords: new Int32Array(ps),
                        colors: new Int32Array(cs),
                     });
                  }
               },
            },
            {
               key: "_decodeType7Shading",
               value: function _decodeType7Shading(reader) {
                  var coords = this.coords;
                  var colors = this.colors;
                  var ps = new Int32Array(16);
                  var cs = new Int32Array(4);
                  while (reader.hasData) {
                     var f = reader.readFlag();
                     if (!(0 <= f && f <= 3)) {
                        throw new FormatError("Unknown type7 flag");
                     }
                     var pi = coords.length;
                     for (var i = 0, ii = f !== 0 ? 12 : 16; i < ii; i++) {
                        coords.push(reader.readCoordinate());
                     }
                     var ci = colors.length;
                     for (var _i34 = 0, _ii7 = f !== 0 ? 2 : 4; _i34 < _ii7; _i34++) {
                        colors.push(reader.readComponents());
                     }
                     var tmp1 = void 0,
                        tmp2 = void 0,
                        tmp3 = void 0,
                        tmp4 = void 0;
                     switch (f) {
                        case 0:
                           ps[12] = pi + 3;
                           ps[13] = pi + 4;
                           ps[14] = pi + 5;
                           ps[15] = pi + 6;
                           ps[8] = pi + 2;
                           ps[9] = pi + 13;
                           ps[10] = pi + 14;
                           ps[11] = pi + 7;
                           ps[4] = pi + 1;
                           ps[5] = pi + 12;
                           ps[6] = pi + 15;
                           ps[7] = pi + 8;
                           ps[0] = pi;
                           ps[1] = pi + 11;
                           ps[2] = pi + 10;
                           ps[3] = pi + 9;
                           cs[2] = ci + 1;
                           cs[3] = ci + 2;
                           cs[0] = ci;
                           cs[1] = ci + 3;
                           break;
                        case 1:
                           tmp1 = ps[12];
                           tmp2 = ps[13];
                           tmp3 = ps[14];
                           tmp4 = ps[15];
                           ps[12] = tmp4;
                           ps[13] = pi + 0;
                           ps[14] = pi + 1;
                           ps[15] = pi + 2;
                           ps[8] = tmp3;
                           ps[9] = pi + 9;
                           ps[10] = pi + 10;
                           ps[11] = pi + 3;
                           ps[4] = tmp2;
                           ps[5] = pi + 8;
                           ps[6] = pi + 11;
                           ps[7] = pi + 4;
                           ps[0] = tmp1;
                           ps[1] = pi + 7;
                           ps[2] = pi + 6;
                           ps[3] = pi + 5;
                           tmp1 = cs[2];
                           tmp2 = cs[3];
                           cs[2] = tmp2;
                           cs[3] = ci;
                           cs[0] = tmp1;
                           cs[1] = ci + 1;
                           break;
                        case 2:
                           tmp1 = ps[15];
                           tmp2 = ps[11];
                           ps[12] = ps[3];
                           ps[13] = pi + 0;
                           ps[14] = pi + 1;
                           ps[15] = pi + 2;
                           ps[8] = ps[7];
                           ps[9] = pi + 9;
                           ps[10] = pi + 10;
                           ps[11] = pi + 3;
                           ps[4] = tmp2;
                           ps[5] = pi + 8;
                           ps[6] = pi + 11;
                           ps[7] = pi + 4;
                           ps[0] = tmp1;
                           ps[1] = pi + 7;
                           ps[2] = pi + 6;
                           ps[3] = pi + 5;
                           tmp1 = cs[3];
                           cs[2] = cs[1];
                           cs[3] = ci;
                           cs[0] = tmp1;
                           cs[1] = ci + 1;
                           break;
                        case 3:
                           ps[12] = ps[0];
                           ps[13] = pi + 0;
                           ps[14] = pi + 1;
                           ps[15] = pi + 2;
                           ps[8] = ps[1];
                           ps[9] = pi + 9;
                           ps[10] = pi + 10;
                           ps[11] = pi + 3;
                           ps[4] = ps[2];
                           ps[5] = pi + 8;
                           ps[6] = pi + 11;
                           ps[7] = pi + 4;
                           ps[0] = ps[3];
                           ps[1] = pi + 7;
                           ps[2] = pi + 6;
                           ps[3] = pi + 5;
                           cs[2] = cs[0];
                           cs[3] = ci;
                           cs[0] = cs[1];
                           cs[1] = ci + 1;
                           break;
                     }
                     this.figures.push({
                        type: "patch",
                        coords: new Int32Array(ps),
                        colors: new Int32Array(cs),
                     });
                  }
               },
            },
            {
               key: "_buildFigureFromPatch",
               value: function _buildFigureFromPatch(index) {
                  var figure = this.figures[index];
                  assert(figure.type === "patch", "Unexpected patch mesh figure");
                  var coords = this.coords,
                     colors = this.colors;
                  var pi = figure.coords;
                  var ci = figure.colors;
                  var figureMinX = Math.min(
                     coords[pi[0]][0],
                     coords[pi[3]][0],
                     coords[pi[12]][0],
                     coords[pi[15]][0],
                  );
                  var figureMinY = Math.min(
                     coords[pi[0]][1],
                     coords[pi[3]][1],
                     coords[pi[12]][1],
                     coords[pi[15]][1],
                  );
                  var figureMaxX = Math.max(
                     coords[pi[0]][0],
                     coords[pi[3]][0],
                     coords[pi[12]][0],
                     coords[pi[15]][0],
                  );
                  var figureMaxY = Math.max(
                     coords[pi[0]][1],
                     coords[pi[3]][1],
                     coords[pi[12]][1],
                     coords[pi[15]][1],
                  );
                  var splitXBy = Math.ceil(
                     ((figureMaxX - figureMinX) * MeshShading.TRIANGLE_DENSITY) /
                     (this.bounds[2] - this.bounds[0]),
                  );
                  splitXBy = Math.max(
                     MeshShading.MIN_SPLIT_PATCH_CHUNKS_AMOUNT,
                     Math.min(MeshShading.MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitXBy),
                  );
                  var splitYBy = Math.ceil(
                     ((figureMaxY - figureMinY) * MeshShading.TRIANGLE_DENSITY) /
                     (this.bounds[3] - this.bounds[1]),
                  );
                  splitYBy = Math.max(
                     MeshShading.MIN_SPLIT_PATCH_CHUNKS_AMOUNT,
                     Math.min(MeshShading.MAX_SPLIT_PATCH_CHUNKS_AMOUNT, splitYBy),
                  );
                  var verticesPerRow = splitXBy + 1;
                  var figureCoords = new Int32Array((splitYBy + 1) * verticesPerRow);
                  var figureColors = new Int32Array((splitYBy + 1) * verticesPerRow);
                  var k = 0;
                  var cl = new Uint8Array(3),
                     cr = new Uint8Array(3);
                  var c0 = colors[ci[0]],
                     c1 = colors[ci[1]],
                     c2 = colors[ci[2]],
                     c3 = colors[ci[3]];
                  var bRow = getB(splitYBy),
                     bCol = getB(splitXBy);
                  for (var row = 0; row <= splitYBy; row++) {
                     cl[0] = ((c0[0] * (splitYBy - row) + c2[0] * row) / splitYBy) | 0;
                     cl[1] = ((c0[1] * (splitYBy - row) + c2[1] * row) / splitYBy) | 0;
                     cl[2] = ((c0[2] * (splitYBy - row) + c2[2] * row) / splitYBy) | 0;
                     cr[0] = ((c1[0] * (splitYBy - row) + c3[0] * row) / splitYBy) | 0;
                     cr[1] = ((c1[1] * (splitYBy - row) + c3[1] * row) / splitYBy) | 0;
                     cr[2] = ((c1[2] * (splitYBy - row) + c3[2] * row) / splitYBy) | 0;
                     for (var col = 0; col <= splitXBy; col++, k++) {
                        if (
                           (row === 0 || row === splitYBy) &&
                           (col === 0 || col === splitXBy)
                        ) {
                           continue;
                        }
                        var x = 0,
                           y = 0;
                        var q = 0;
                        for (var i = 0; i <= 3; i++) {
                           for (var j = 0; j <= 3; j++, q++) {
                              var m = bRow[row][i] * bCol[col][j];
                              x += coords[pi[q]][0] * m;
                              y += coords[pi[q]][1] * m;
                           }
                        }
                        figureCoords[k] = coords.length;
                        coords.push([x, y]);
                        figureColors[k] = colors.length;
                        var newColor = new Uint8Array(3);
                        newColor[0] =
                           ((cl[0] * (splitXBy - col) + cr[0] * col) / splitXBy) | 0;
                        newColor[1] =
                           ((cl[1] * (splitXBy - col) + cr[1] * col) / splitXBy) | 0;
                        newColor[2] =
                           ((cl[2] * (splitXBy - col) + cr[2] * col) / splitXBy) | 0;
                        colors.push(newColor);
                     }
                  }
                  figureCoords[0] = pi[0];
                  figureColors[0] = ci[0];
                  figureCoords[splitXBy] = pi[3];
                  figureColors[splitXBy] = ci[1];
                  figureCoords[verticesPerRow * splitYBy] = pi[12];
                  figureColors[verticesPerRow * splitYBy] = ci[2];
                  figureCoords[verticesPerRow * splitYBy + splitXBy] = pi[15];
                  figureColors[verticesPerRow * splitYBy + splitXBy] = ci[3];
                  this.figures[index] = {
                     type: "lattice",
                     coords: figureCoords,
                     colors: figureColors,
                     verticesPerRow: verticesPerRow,
                  };
               },
            },
            {
               key: "_updateBounds",
               value: function _updateBounds() {
                  var minX = this.coords[0][0],
                     minY = this.coords[0][1],
                     maxX = minX,
                     maxY = minY;
                  for (var i = 1, ii = this.coords.length; i < ii; i++) {
                     var x = this.coords[i][0],
                        y = this.coords[i][1];
                     minX = minX > x ? x : minX;
                     minY = minY > y ? y : minY;
                     maxX = maxX < x ? x : maxX;
                     maxY = maxY < y ? y : maxY;
                  }
                  this.bounds = [minX, minY, maxX, maxY];
               },
            },
            {
               key: "_packData",
               value: function _packData() {
                  var i, ii, j, jj;
                  var coords = this.coords;
                  var coordsPacked = new Float32Array(coords.length * 2);
                  for (i = 0, j = 0, ii = coords.length; i < ii; i++) {
                     var xy = coords[i];
                     coordsPacked[j++] = xy[0];
                     coordsPacked[j++] = xy[1];
                  }
                  this.coords = coordsPacked;
                  var colors = this.colors;
                  var colorsPacked = new Uint8Array(colors.length * 3);
                  for (i = 0, j = 0, ii = colors.length; i < ii; i++) {
                     var c = colors[i];
                     colorsPacked[j++] = c[0];
                     colorsPacked[j++] = c[1];
                     colorsPacked[j++] = c[2];
                  }
                  this.colors = colorsPacked;
                  var figures = this.figures;
                  for (i = 0, ii = figures.length; i < ii; i++) {
                     var figure = figures[i],
                        ps = figure.coords,
                        cs = figure.colors;
                     for (j = 0, jj = ps.length; j < jj; j++) {
                        ps[j] *= 2;
                        cs[j] *= 3;
                     }
                  }
               },
            },
            {
               key: "getIR",
               value: function getIR() {
                  var bounds = this.bounds;
                  if (bounds[2] - bounds[0] === 0 || bounds[3] - bounds[1] === 0) {
                     throw new FormatError(
                        "Invalid MeshShading bounds: [".concat(bounds, "]."),
                     );
                  }
                  return [
                     "Mesh",
                     this.shadingType,
                     this.coords,
                     this.colors,
                     this.figures,
                     bounds,
                     this.bbox,
                     this.background,
                  ];
               },
            },
         ]);
      })(BaseShading);
      _defineProperty(MeshShading, "MIN_SPLIT_PATCH_CHUNKS_AMOUNT", 3);
      _defineProperty(MeshShading, "MAX_SPLIT_PATCH_CHUNKS_AMOUNT", 20);
      _defineProperty(MeshShading, "TRIANGLE_DENSITY", 20);
      var DummyShading = /*#__PURE__*/ (function (_BaseShading4) {
         function DummyShading() {
            _classCallCheck(this, DummyShading);
            return _callSuper(this, DummyShading, arguments);
         }
         _inherits(DummyShading, _BaseShading4);
         return _createClass(DummyShading, [
            {
               key: "getIR",
               value: function getIR() {
                  return ["Dummy"];
               },
            },
         ]);
      })(BaseShading);
      function getTilingPatternIR(operatorList, dict, color) {
         var matrix = dict.getArray("Matrix");
         var bbox = Util.normalizeRect(dict.getArray("BBox"));
         var xstep = dict.get("XStep");
         var ystep = dict.get("YStep");
         var paintType = dict.get("PaintType");
         var tilingType = dict.get("TilingType");
         if (bbox[2] - bbox[0] === 0 || bbox[3] - bbox[1] === 0) {
            throw new FormatError(
               "Invalid getTilingPatternIR /BBox array: [".concat(bbox, "]."),
            );
         }
         return [
            "TilingPattern",
            color,
            operatorList,
            matrix,
            bbox,
            xstep,
            ystep,
            paintType,
            tilingType,
         ];
      } // CONCATENATED MODULE: ./src/core/calibri_factors.js
      var CalibriBoldFactors = [
         1.3877, 1, 1, 1, 0.97801, 0.92482, 0.89552, 0.91133, 0.81988, 0.97566,
         0.98152, 0.93548, 0.93548, 1.2798, 0.85284, 0.92794, 1, 0.96134, 1.54657,
         0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133,
         0.91133, 0.91133, 0.82845, 0.82845, 0.85284, 0.85284, 0.85284, 0.75859,
         0.92138, 0.83908, 0.7762, 0.73293, 0.87289, 0.73133, 0.7514, 0.81921,
         0.87356, 0.95958, 0.59526, 0.75727, 0.69225, 1.04924, 0.9121, 0.86943,
         0.79795, 0.88198, 0.77958, 0.70864, 0.81055, 0.90399, 0.88653, 0.96017,
         0.82577, 0.77892, 0.78257, 0.97507, 1.54657, 0.97507, 0.85284, 0.89552,
         0.90176, 0.88762, 0.8785, 0.75241, 0.8785, 0.90518, 0.95015, 0.77618,
         0.8785, 0.88401, 0.91916, 0.86304, 0.88401, 0.91488, 0.8785, 0.8801,
         0.8785, 0.8785, 0.91343, 0.7173, 1.04106, 0.8785, 0.85075, 0.95794,
         0.82616, 0.85162, 0.79492, 0.88331, 1.69808, 0.88331, 0.85284, 0.97801,
         0.89552, 0.91133, 0.89552, 0.91133, 1.7801, 0.89552, 1.24487, 1.13254,
         1.12401, 0.96839, 0.85284, 0.68787, 0.70645, 0.85592, 0.90747, 1.01466,
         1.0088, 0.90323, 1, 1.07463, 1, 0.91056, 0.75806, 1.19118, 0.96839,
         0.78864, 0.82845, 0.84133, 0.75859, 0.83908, 0.83908, 0.83908, 0.83908,
         0.83908, 0.83908, 0.77539, 0.73293, 0.73133, 0.73133, 0.73133, 0.73133,
         0.95958, 0.95958, 0.95958, 0.95958, 0.88506, 0.9121, 0.86943, 0.86943,
         0.86943, 0.86943, 0.86943, 0.85284, 0.87508, 0.90399, 0.90399, 0.90399,
         0.90399, 0.77892, 0.79795, 0.90807, 0.88762, 0.88762, 0.88762, 0.88762,
         0.88762, 0.88762, 0.8715, 0.75241, 0.90518, 0.90518, 0.90518, 0.90518,
         0.88401, 0.88401, 0.88401, 0.88401, 0.8785, 0.8785, 0.8801, 0.8801,
         0.8801, 0.8801, 0.8801, 0.90747, 0.89049, 0.8785, 0.8785, 0.8785, 0.8785,
         0.85162, 0.8785, 0.85162, 0.83908, 0.88762, 0.83908, 0.88762, 0.83908,
         0.88762, 0.73293, 0.75241, 0.73293, 0.75241, 0.73293, 0.75241, 0.73293,
         0.75241, 0.87289, 0.83016, 0.88506, 0.93125, 0.73133, 0.90518, 0.73133,
         0.90518, 0.73133, 0.90518, 0.73133, 0.90518, 0.73133, 0.90518, 0.81921,
         0.77618, 0.81921, 0.77618, 0.81921, 0.77618, 1, 1, 0.87356, 0.8785,
         0.91075, 0.89608, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958, 0.88401,
         0.95958, 0.88401, 0.95958, 0.88401, 0.76229, 0.90167, 0.59526, 0.91916, 1,
         1, 0.86304, 0.69225, 0.88401, 1, 1, 0.70424, 0.79468, 0.91926, 0.88175,
         0.70823, 0.94903, 0.9121, 0.8785, 1, 1, 0.9121, 0.8785, 0.87802, 0.88656,
         0.8785, 0.86943, 0.8801, 0.86943, 0.8801, 0.86943, 0.8801, 0.87402,
         0.89291, 0.77958, 0.91343, 1, 1, 0.77958, 0.91343, 0.70864, 0.7173,
         0.70864, 0.7173, 0.70864, 0.7173, 0.70864, 0.7173, 1, 1, 0.81055, 0.75841,
         0.81055, 1.06452, 0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785,
         0.90399, 0.8785, 0.90399, 0.8785, 0.90399, 0.8785, 0.96017, 0.95794,
         0.77892, 0.85162, 0.77892, 0.78257, 0.79492, 0.78257, 0.79492, 0.78257,
         0.79492, 0.9297, 0.56892, 0.83908, 0.88762, 0.77539, 0.8715, 0.87508,
         0.89049, 1, 1, 0.81055, 1.04106, 1.20528, 1.20528, 1, 1.15543, 0.70674,
         0.98387, 0.94721, 1.33431, 1.45894, 0.95161, 1.06303, 0.83908, 0.80352,
         0.57184, 0.6965, 0.56289, 0.82001, 0.56029, 0.81235, 1.02988, 0.83908,
         0.7762, 0.68156, 0.80367, 0.73133, 0.78257, 0.87356, 0.86943, 0.95958,
         0.75727, 0.89019, 1.04924, 0.9121, 0.7648, 0.86943, 0.87356, 0.79795,
         0.78275, 0.81055, 0.77892, 0.9762, 0.82577, 0.99819, 0.84896, 0.95958,
         0.77892, 0.96108, 1.01407, 0.89049, 1.02988, 0.94211, 0.96108, 0.8936,
         0.84021, 0.87842, 0.96399, 0.79109, 0.89049, 1.00813, 1.02988, 0.86077,
         0.87445, 0.92099, 0.84723, 0.86513, 0.8801, 0.75638, 0.85714, 0.78216,
         0.79586, 0.87965, 0.94211, 0.97747, 0.78287, 0.97926, 0.84971, 1.02988,
         0.94211, 0.8801, 0.94211, 0.84971, 0.73133, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 0.90264, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90518, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90548, 1, 1, 1, 1, 1, 1, 0.96017,
         0.95794, 0.96017, 0.95794, 0.96017, 0.95794, 0.77892, 0.85162, 1, 1,
         0.89552, 0.90527, 1, 0.90363, 0.92794, 0.92794, 0.92794, 0.92794, 0.87012,
         0.87012, 0.87012, 0.89552, 0.89552, 1.42259, 0.71143, 1.06152, 1, 1,
         1.03372, 1.03372, 0.97171, 1.4956, 2.2807, 0.93835, 0.83406, 0.91133,
         0.84107, 0.91133, 1, 1, 1, 0.72021, 1, 1.23108, 0.83489, 0.88525, 0.88525,
         0.81499, 0.90527, 1.81055, 0.90527, 1.81055, 1.31006, 1.53711, 0.94434,
         1.08696, 1, 0.95018, 0.77192, 0.85284, 0.90747, 1.17534, 0.69825, 0.9716,
         1.37077, 0.90747, 0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284,
         0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1,
         1, 1, 1.08004, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 0.90727, 0.90727, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      ];
      var CalibriBoldMetrics = { lineHeight: 1.2207, lineGap: 0.2207 };
      var CalibriBoldItalicFactors = [
         1.3877, 1, 1, 1, 0.97801, 0.92482, 0.89552, 0.91133, 0.81988, 0.97566,
         0.98152, 0.93548, 0.93548, 1.2798, 0.85284, 0.92794, 1, 0.96134, 1.56239,
         0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133,
         0.91133, 0.91133, 0.82845, 0.82845, 0.85284, 0.85284, 0.85284, 0.75859,
         0.92138, 0.83908, 0.7762, 0.71805, 0.87289, 0.73133, 0.7514, 0.81921,
         0.87356, 0.95958, 0.59526, 0.75727, 0.69225, 1.04924, 0.90872, 0.85938,
         0.79795, 0.87068, 0.77958, 0.69766, 0.81055, 0.90399, 0.88653, 0.96068,
         0.82577, 0.77892, 0.78257, 0.97507, 1.529, 0.97507, 0.85284, 0.89552,
         0.90176, 0.94908, 0.86411, 0.74012, 0.86411, 0.88323, 0.95015, 0.86411,
         0.86331, 0.88401, 0.91916, 0.86304, 0.88401, 0.9039, 0.86331, 0.86331,
         0.86411, 0.86411, 0.90464, 0.70852, 1.04106, 0.86331, 0.84372, 0.95794,
         0.82616, 0.84548, 0.79492, 0.88331, 1.69808, 0.88331, 0.85284, 0.97801,
         0.89552, 0.91133, 0.89552, 0.91133, 1.7801, 0.89552, 1.24487, 1.13254,
         1.19129, 0.96839, 0.85284, 0.68787, 0.70645, 0.85592, 0.90747, 1.01466,
         1.0088, 0.90323, 1, 1.07463, 1, 0.91056, 0.75806, 1.19118, 0.96839,
         0.78864, 0.82845, 0.84133, 0.75859, 0.83908, 0.83908, 0.83908, 0.83908,
         0.83908, 0.83908, 0.77539, 0.71805, 0.73133, 0.73133, 0.73133, 0.73133,
         0.95958, 0.95958, 0.95958, 0.95958, 0.88506, 0.90872, 0.85938, 0.85938,
         0.85938, 0.85938, 0.85938, 0.85284, 0.87068, 0.90399, 0.90399, 0.90399,
         0.90399, 0.77892, 0.79795, 0.90807, 0.94908, 0.94908, 0.94908, 0.94908,
         0.94908, 0.94908, 0.85887, 0.74012, 0.88323, 0.88323, 0.88323, 0.88323,
         0.88401, 0.88401, 0.88401, 0.88401, 0.8785, 0.86331, 0.86331, 0.86331,
         0.86331, 0.86331, 0.86331, 0.90747, 0.89049, 0.86331, 0.86331, 0.86331,
         0.86331, 0.84548, 0.86411, 0.84548, 0.83908, 0.94908, 0.83908, 0.94908,
         0.83908, 0.94908, 0.71805, 0.74012, 0.71805, 0.74012, 0.71805, 0.74012,
         0.71805, 0.74012, 0.87289, 0.79538, 0.88506, 0.92726, 0.73133, 0.88323,
         0.73133, 0.88323, 0.73133, 0.88323, 0.73133, 0.88323, 0.73133, 0.88323,
         0.81921, 0.86411, 0.81921, 0.86411, 0.81921, 0.86411, 1, 1, 0.87356,
         0.86331, 0.91075, 0.8777, 0.95958, 0.88401, 0.95958, 0.88401, 0.95958,
         0.88401, 0.95958, 0.88401, 0.95958, 0.88401, 0.76467, 0.90167, 0.59526,
         0.91916, 1, 1, 0.86304, 0.69225, 0.88401, 1, 1, 0.70424, 0.77312, 0.91926,
         0.88175, 0.70823, 0.94903, 0.90872, 0.86331, 1, 1, 0.90872, 0.86331,
         0.86906, 0.88116, 0.86331, 0.85938, 0.86331, 0.85938, 0.86331, 0.85938,
         0.86331, 0.87402, 0.86549, 0.77958, 0.90464, 1, 1, 0.77958, 0.90464,
         0.69766, 0.70852, 0.69766, 0.70852, 0.69766, 0.70852, 0.69766, 0.70852, 1,
         1, 0.81055, 0.75841, 0.81055, 1.06452, 0.90399, 0.86331, 0.90399, 0.86331,
         0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331, 0.90399, 0.86331,
         0.96068, 0.95794, 0.77892, 0.84548, 0.77892, 0.78257, 0.79492, 0.78257,
         0.79492, 0.78257, 0.79492, 0.9297, 0.56892, 0.83908, 0.94908, 0.77539,
         0.85887, 0.87068, 0.89049, 1, 1, 0.81055, 1.04106, 1.20528, 1.20528, 1,
         1.15543, 0.70088, 0.98387, 0.94721, 1.33431, 1.45894, 0.95161, 1.48387,
         0.83908, 0.80352, 0.57118, 0.6965, 0.56347, 0.79179, 0.55853, 0.80346,
         1.02988, 0.83908, 0.7762, 0.67174, 0.86036, 0.73133, 0.78257, 0.87356,
         0.86441, 0.95958, 0.75727, 0.89019, 1.04924, 0.90872, 0.74889, 0.85938,
         0.87891, 0.79795, 0.7957, 0.81055, 0.77892, 0.97447, 0.82577, 0.97466,
         0.87179, 0.95958, 0.77892, 0.94252, 0.95612, 0.8753, 1.02988, 0.92733,
         0.94252, 0.87411, 0.84021, 0.8728, 0.95612, 0.74081, 0.8753, 1.02189,
         1.02988, 0.84814, 0.87445, 0.91822, 0.84723, 0.85668, 0.86331, 0.81344,
         0.87581, 0.76422, 0.82046, 0.96057, 0.92733, 0.99375, 0.78022, 0.95452,
         0.86015, 1.02988, 0.92733, 0.86331, 0.92733, 0.86015, 0.73133, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 0.90631, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 0.88323, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.85174, 1, 1, 1, 1, 1,
         1, 0.96068, 0.95794, 0.96068, 0.95794, 0.96068, 0.95794, 0.77892, 0.84548,
         1, 1, 0.89552, 0.90527, 1, 0.90363, 0.92794, 0.92794, 0.92794, 0.89807,
         0.87012, 0.87012, 0.87012, 0.89552, 0.89552, 1.42259, 0.71094, 1.06152, 1,
         1, 1.03372, 1.03372, 0.97171, 1.4956, 2.2807, 0.92972, 0.83406, 0.91133,
         0.83326, 0.91133, 1, 1, 1, 0.72021, 1, 1.23108, 0.83489, 0.88525, 0.88525,
         0.81499, 0.90616, 1.81055, 0.90527, 1.81055, 1.3107, 1.53711, 0.94434,
         1.08696, 1, 0.95018, 0.77192, 0.85284, 0.90747, 1.17534, 0.69825, 0.9716,
         1.37077, 0.90747, 0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284,
         0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1,
         1, 1, 1.08004, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 0.90727, 0.90727, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      ];
      var CalibriBoldItalicMetrics = { lineHeight: 1.2207, lineGap: 0.2207 };
      var CalibriItalicFactors = [
         1.3877, 1, 1, 1, 1.17223, 1.1293, 0.89552, 0.91133, 0.80395, 1.02269,
         1.15601, 0.91056, 0.91056, 1.2798, 0.85284, 0.89807, 1, 0.90861, 1.39543,
         0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133,
         0.91133, 0.91133, 0.96309, 0.96309, 0.85284, 0.85284, 0.85284, 0.83319,
         0.88071, 0.8675, 0.81552, 0.72346, 0.85193, 0.73206, 0.7522, 0.81105,
         0.86275, 0.90685, 0.6377, 0.77892, 0.75593, 1.02638, 0.89249, 0.84118,
         0.77452, 0.85374, 0.75186, 0.67789, 0.79776, 0.88844, 0.85066, 0.94309,
         0.77818, 0.7306, 0.76659, 1.10369, 1.38313, 1.10369, 1.06139, 0.89552,
         0.8739, 0.9245, 0.9245, 0.83203, 0.9245, 0.85865, 1.09842, 0.9245, 0.9245,
         1.03297, 1.07692, 0.90918, 1.03297, 0.94959, 0.9245, 0.92274, 0.9245,
         0.9245, 1.02933, 0.77832, 1.20562, 0.9245, 0.8916, 0.98986, 0.86621,
         0.89453, 0.79004, 0.94152, 1.77256, 0.94152, 0.85284, 0.97801, 0.89552,
         0.91133, 0.89552, 0.91133, 1.91729, 0.89552, 1.17889, 1.13254, 1.16359,
         0.92098, 0.85284, 0.68787, 0.71353, 0.84737, 0.90747, 1.0088, 1.0044,
         0.87683, 1, 1.09091, 1, 0.92229, 0.739, 1.15642, 0.92098, 0.76288,
         0.80504, 0.80972, 0.75859, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675,
         0.76318, 0.72346, 0.73206, 0.73206, 0.73206, 0.73206, 0.90685, 0.90685,
         0.90685, 0.90685, 0.86477, 0.89249, 0.84118, 0.84118, 0.84118, 0.84118,
         0.84118, 0.85284, 0.84557, 0.88844, 0.88844, 0.88844, 0.88844, 0.7306,
         0.77452, 0.86331, 0.9245, 0.9245, 0.9245, 0.9245, 0.9245, 0.9245, 0.84843,
         0.83203, 0.85865, 0.85865, 0.85865, 0.85865, 0.82601, 0.82601, 0.82601,
         0.82601, 0.94469, 0.9245, 0.92274, 0.92274, 0.92274, 0.92274, 0.92274,
         0.90747, 0.86651, 0.9245, 0.9245, 0.9245, 0.9245, 0.89453, 0.9245,
         0.89453, 0.8675, 0.9245, 0.8675, 0.9245, 0.8675, 0.9245, 0.72346, 0.83203,
         0.72346, 0.83203, 0.72346, 0.83203, 0.72346, 0.83203, 0.85193, 0.8875,
         0.86477, 0.99034, 0.73206, 0.85865, 0.73206, 0.85865, 0.73206, 0.85865,
         0.73206, 0.85865, 0.73206, 0.85865, 0.81105, 0.9245, 0.81105, 0.9245,
         0.81105, 0.9245, 1, 1, 0.86275, 0.9245, 0.90872, 0.93591, 0.90685,
         0.82601, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 1.03297, 0.90685,
         0.82601, 0.77896, 1.05611, 0.6377, 1.07692, 1, 1, 0.90918, 0.75593,
         1.03297, 1, 1, 0.76032, 0.9375, 0.98156, 0.93407, 0.77261, 1.11429,
         0.89249, 0.9245, 1, 1, 0.89249, 0.9245, 0.92534, 0.86698, 0.9245, 0.84118,
         0.92274, 0.84118, 0.92274, 0.84118, 0.92274, 0.8667, 0.86291, 0.75186,
         1.02933, 1, 1, 0.75186, 1.02933, 0.67789, 0.77832, 0.67789, 0.77832,
         0.67789, 0.77832, 0.67789, 0.77832, 1, 1, 0.79776, 0.97655, 0.79776,
         1.23023, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.88844,
         0.9245, 0.88844, 0.9245, 0.88844, 0.9245, 0.94309, 0.98986, 0.7306,
         0.89453, 0.7306, 0.76659, 0.79004, 0.76659, 0.79004, 0.76659, 0.79004,
         1.09231, 0.54873, 0.8675, 0.9245, 0.76318, 0.84843, 0.84557, 0.86651, 1,
         1, 0.79776, 1.20562, 1.18622, 1.18622, 1, 1.1437, 0.67009, 0.96334,
         0.93695, 1.35191, 1.40909, 0.95161, 1.48387, 0.8675, 0.90861, 0.6192,
         0.7363, 0.64824, 0.82411, 0.56321, 0.85696, 1.23516, 0.8675, 0.81552,
         0.7286, 0.84134, 0.73206, 0.76659, 0.86275, 0.84369, 0.90685, 0.77892,
         0.85871, 1.02638, 0.89249, 0.75828, 0.84118, 0.85984, 0.77452, 0.76466,
         0.79776, 0.7306, 0.90782, 0.77818, 0.903, 0.87291, 0.90685, 0.7306,
         0.99058, 1.03667, 0.94635, 1.23516, 0.9849, 0.99058, 0.92393, 0.8916,
         0.942, 1.03667, 0.75026, 0.94635, 1.0297, 1.23516, 0.90918, 0.94048,
         0.98217, 0.89746, 0.84153, 0.92274, 0.82507, 0.88832, 0.84438, 0.88178,
         1.03525, 0.9849, 1.00225, 0.78086, 0.97248, 0.89404, 1.23516, 0.9849,
         0.92274, 0.9849, 0.89404, 0.73206, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         0.89693, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.85865, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 0.90933, 1, 1, 1, 1, 1, 1, 0.94309, 0.98986,
         0.94309, 0.98986, 0.94309, 0.98986, 0.7306, 0.89453, 1, 1, 0.89552,
         0.90527, 1, 0.90186, 1.12308, 1.12308, 1.12308, 1.12308, 1.2566, 1.2566,
         1.2566, 0.89552, 0.89552, 1.42259, 0.68994, 1.03809, 1, 1, 1.0176, 1.0176,
         1.11523, 1.4956, 2.01462, 0.97858, 0.82616, 0.91133, 0.83437, 0.91133, 1,
         1, 1, 0.70508, 1, 1.23108, 0.79801, 0.84426, 0.84426, 0.774, 0.90572,
         1.81055, 0.90749, 1.81055, 1.28809, 1.55469, 0.94434, 1.07806, 1, 0.97094,
         0.7589, 0.85284, 0.90747, 1.19658, 0.69825, 0.97622, 1.33512, 0.90747,
         0.90747, 0.85284, 0.90747, 0.90747, 1.44947, 0.85284, 0.8941, 0.8941,
         0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1, 1, 1, 1.0336,
         0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.05859,
         1.05859, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      ];
      var CalibriItalicMetrics = { lineHeight: 1.2207, lineGap: 0.2207 };
      var CalibriRegularFactors = [
         1.3877, 1, 1, 1, 1.17223, 1.1293, 0.89552, 0.91133, 0.80395, 1.02269,
         1.15601, 0.91056, 0.91056, 1.2798, 0.85284, 0.89807, 1, 0.90861, 1.39016,
         0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133, 0.91133,
         0.91133, 0.91133, 0.96309, 0.96309, 0.85284, 0.85284, 0.85284, 0.83319,
         0.88071, 0.8675, 0.81552, 0.73834, 0.85193, 0.73206, 0.7522, 0.81105,
         0.86275, 0.90685, 0.6377, 0.77892, 0.75593, 1.02638, 0.89385, 0.85122,
         0.77452, 0.86503, 0.75186, 0.68887, 0.79776, 0.88844, 0.85066, 0.94258,
         0.77818, 0.7306, 0.76659, 1.10369, 1.39016, 1.10369, 1.06139, 0.89552,
         0.8739, 0.86128, 0.94469, 0.8457, 0.94469, 0.89464, 1.09842, 0.84636,
         0.94469, 1.03297, 1.07692, 0.90918, 1.03297, 0.95897, 0.94469, 0.9482,
         0.94469, 0.94469, 1.04692, 0.78223, 1.20562, 0.94469, 0.90332, 0.98986,
         0.86621, 0.90527, 0.79004, 0.94152, 1.77256, 0.94152, 0.85284, 0.97801,
         0.89552, 0.91133, 0.89552, 0.91133, 1.91729, 0.89552, 1.17889, 1.13254,
         1.08707, 0.92098, 0.85284, 0.68787, 0.71353, 0.84737, 0.90747, 1.0088,
         1.0044, 0.87683, 1, 1.09091, 1, 0.92229, 0.739, 1.15642, 0.92098, 0.76288,
         0.80504, 0.80972, 0.75859, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675, 0.8675,
         0.76318, 0.73834, 0.73206, 0.73206, 0.73206, 0.73206, 0.90685, 0.90685,
         0.90685, 0.90685, 0.86477, 0.89385, 0.85122, 0.85122, 0.85122, 0.85122,
         0.85122, 0.85284, 0.85311, 0.88844, 0.88844, 0.88844, 0.88844, 0.7306,
         0.77452, 0.86331, 0.86128, 0.86128, 0.86128, 0.86128, 0.86128, 0.86128,
         0.8693, 0.8457, 0.89464, 0.89464, 0.89464, 0.89464, 0.82601, 0.82601,
         0.82601, 0.82601, 0.94469, 0.94469, 0.9482, 0.9482, 0.9482, 0.9482,
         0.9482, 0.90747, 0.86651, 0.94469, 0.94469, 0.94469, 0.94469, 0.90527,
         0.94469, 0.90527, 0.8675, 0.86128, 0.8675, 0.86128, 0.8675, 0.86128,
         0.73834, 0.8457, 0.73834, 0.8457, 0.73834, 0.8457, 0.73834, 0.8457,
         0.85193, 0.92454, 0.86477, 0.9921, 0.73206, 0.89464, 0.73206, 0.89464,
         0.73206, 0.89464, 0.73206, 0.89464, 0.73206, 0.89464, 0.81105, 0.84636,
         0.81105, 0.84636, 0.81105, 0.84636, 1, 1, 0.86275, 0.94469, 0.90872,
         0.95786, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685, 0.82601, 0.90685,
         1.03297, 0.90685, 0.82601, 0.77741, 1.05611, 0.6377, 1.07692, 1, 1,
         0.90918, 0.75593, 1.03297, 1, 1, 0.76032, 0.90452, 0.98156, 1.11842,
         0.77261, 1.11429, 0.89385, 0.94469, 1, 1, 0.89385, 0.94469, 0.95877,
         0.86901, 0.94469, 0.85122, 0.9482, 0.85122, 0.9482, 0.85122, 0.9482,
         0.8667, 0.90016, 0.75186, 1.04692, 1, 1, 0.75186, 1.04692, 0.68887,
         0.78223, 0.68887, 0.78223, 0.68887, 0.78223, 0.68887, 0.78223, 1, 1,
         0.79776, 0.92188, 0.79776, 1.23023, 0.88844, 0.94469, 0.88844, 0.94469,
         0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469, 0.88844, 0.94469,
         0.94258, 0.98986, 0.7306, 0.90527, 0.7306, 0.76659, 0.79004, 0.76659,
         0.79004, 0.76659, 0.79004, 1.09231, 0.54873, 0.8675, 0.86128, 0.76318,
         0.8693, 0.85311, 0.86651, 1, 1, 0.79776, 1.20562, 1.18622, 1.18622, 1,
         1.1437, 0.67742, 0.96334, 0.93695, 1.35191, 1.40909, 0.95161, 1.48387,
         0.86686, 0.90861, 0.62267, 0.74359, 0.65649, 0.85498, 0.56963, 0.88254,
         1.23516, 0.8675, 0.81552, 0.75443, 0.84503, 0.73206, 0.76659, 0.86275,
         0.85122, 0.90685, 0.77892, 0.85746, 1.02638, 0.89385, 0.75657, 0.85122,
         0.86275, 0.77452, 0.74171, 0.79776, 0.7306, 0.95165, 0.77818, 0.89772,
         0.88831, 0.90685, 0.7306, 0.98142, 1.02191, 0.96576, 1.23516, 0.99018,
         0.98142, 0.9236, 0.89258, 0.94035, 1.02191, 0.78848, 0.96576, 0.9561,
         1.23516, 0.90918, 0.92578, 0.95424, 0.89746, 0.83969, 0.9482, 0.80113,
         0.89442, 0.85208, 0.86155, 0.98022, 0.99018, 1.00452, 0.81209, 0.99247,
         0.89181, 1.23516, 0.99018, 0.9482, 0.99018, 0.89181, 0.73206, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 0.88844, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 0.89464, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.96766, 1, 1, 1, 1, 1,
         1, 0.94258, 0.98986, 0.94258, 0.98986, 0.94258, 0.98986, 0.7306, 0.90527,
         1, 1, 0.89552, 0.90527, 1, 0.90186, 1.12308, 1.12308, 1.12308, 1.12308,
         1.2566, 1.2566, 1.2566, 0.89552, 0.89552, 1.42259, 0.69043, 1.03809, 1, 1,
         1.0176, 1.0176, 1.11523, 1.4956, 2.01462, 0.99331, 0.82616, 0.91133,
         0.84286, 0.91133, 1, 1, 1, 0.70508, 1, 1.23108, 0.79801, 0.84426, 0.84426,
         0.774, 0.90527, 1.81055, 0.90527, 1.81055, 1.28809, 1.55469, 0.94434,
         1.07806, 1, 0.97094, 0.7589, 0.85284, 0.90747, 1.19658, 0.69825, 0.97622,
         1.33512, 0.90747, 0.90747, 0.85356, 0.90747, 0.90747, 1.44947, 0.85284,
         0.8941, 0.8941, 0.70572, 0.8, 0.70572, 0.70572, 0.70572, 0.70572, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.99862, 0.99862, 1, 1, 1,
         1, 1, 1.0336, 0.91027, 1, 1, 1, 0.99862, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1.05859, 1.05859, 1, 1, 1, 1.07185, 0.99413, 0.96334, 1.08065, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1,
      ];
      var CalibriRegularMetrics = { lineHeight: 1.2207, lineGap: 0.2207 }; // CONCATENATED MODULE: ./src/core/helvetica_factors.js
      var HelveticaBoldFactors = [
         0.76116, 1, 1, 1.0006, 0.99998, 0.99974, 0.99973, 0.99973, 0.99982,
         0.99977, 1.00087, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998,
         1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973,
         0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.00003, 1.00003, 1.00003,
         1.00026, 0.9999, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00026,
         1.00022, 0.99977, 1.0006, 0.99973, 0.99977, 1.00026, 0.99999, 0.99977,
         1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001,
         1.00016, 1.00001, 1.00001, 1.00026, 0.99998, 1.0006, 0.99998, 1.00003,
         0.99973, 0.99998, 0.99973, 1.00026, 0.99973, 1.00026, 0.99973, 0.99998,
         1.00026, 1.00026, 1.0006, 1.0006, 0.99973, 1.0006, 0.99982, 1.00026,
         1.00026, 1.00026, 1.00026, 0.99959, 0.99973, 0.99998, 1.00026, 0.99973,
         1.00022, 0.99973, 0.99973, 1, 0.99959, 1.00077, 0.99959, 1.00003, 0.99998,
         0.99973, 0.99973, 0.99973, 0.99973, 1.00077, 0.99973, 0.99998, 1.00025,
         0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1,
         0.99998, 1, 0.99973, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002,
         1.00002, 1.00002, 1.00026, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977,
         0.99977, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006,
         1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022,
         1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001,
         1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973,
         0.99982, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006,
         1.0006, 1.0006, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026,
         1.00026, 1.06409, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 0.99973,
         1.00026, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973,
         0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973,
         0.99977, 1.03374, 0.99977, 1.00026, 1.00001, 0.99973, 1.00001, 0.99973,
         1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 1.00026,
         1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 0.99977, 1.00026,
         0.99977, 1.00026, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006,
         1.0006, 1.0006, 1.0006, 1.00042, 0.99973, 0.99973, 1.0006, 0.99977,
         0.99973, 0.99973, 1.00026, 1.0006, 1.00026, 1.0006, 1.00026, 1.03828,
         1.00026, 0.99999, 1.00026, 1.0006, 0.99977, 1.00026, 0.99977, 1.00026,
         0.99977, 1.00026, 0.9993, 0.9998, 1.00026, 1.00022, 1.00026, 1.00022,
         1.00026, 1.00022, 1.00026, 1, 1.00016, 0.99977, 0.99959, 0.99977, 0.99959,
         0.99977, 0.99959, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973,
         1.00001, 0.99973, 1.00026, 0.99998, 1.00026, 0.8121, 1.00026, 0.99998,
         0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026,
         0.99977, 1.00026, 0.99977, 1.00026, 1.00016, 1.00022, 1.00001, 0.99973,
         1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 1.0006, 0.99973, 0.99977,
         0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 0.99973, 1.00026, 0.99998,
         0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998,
         0.99998, 0.99998, 1.00034, 0.99977, 1, 0.99997, 1.00026, 1.00078, 1.00036,
         0.99973, 1.00013, 1.0006, 0.99977, 0.99977, 0.99988, 0.85148, 1.00001,
         1.00026, 0.99977, 1.00022, 1.0006, 0.99977, 1.00001, 0.99999, 0.99977,
         1.00069, 1.00022, 0.99977, 1.00001, 0.99984, 1.00026, 1.00001, 1.00024,
         1.00001, 0.9999, 1, 1.0006, 1.00001, 1.00041, 0.99962, 1.00026, 1.0006,
         0.99995, 1.00041, 0.99942, 0.99973, 0.99927, 1.00082, 0.99902, 1.00026,
         1.00087, 1.0006, 1.00069, 0.99973, 0.99867, 0.99973, 0.9993, 1.00026,
         1.00049, 1.00056, 1, 0.99988, 0.99935, 0.99995, 0.99954, 1.00055, 0.99945,
         1.00032, 1.0006, 0.99995, 1.00026, 0.99995, 1.00032, 1.00001, 1.00008,
         0.99971, 1.00019, 0.9994, 1.00001, 1.0006, 1.00044, 0.99973, 1.00023,
         1.00047, 1, 0.99942, 0.99561, 0.99989, 1.00035, 0.99977, 1.00035, 0.99977,
         1.00019, 0.99944, 1.00001, 1.00021, 0.99926, 1.00035, 1.00035, 0.99942,
         1.00048, 0.99999, 0.99977, 1.00022, 1.00035, 1.00001, 0.99977, 1.00026,
         0.99989, 1.00057, 1.00001, 0.99936, 1.00052, 1.00012, 0.99996, 1.00043, 1,
         1.00035, 0.9994, 0.99976, 1.00035, 0.99973, 1.00052, 1.00041, 1.00119,
         1.00037, 0.99973, 1.00002, 0.99986, 1.00041, 1.00041, 0.99902, 0.9996,
         1.00034, 0.99999, 1.00026, 0.99999, 1.00026, 0.99973, 1.00052, 0.99973, 1,
         0.99973, 1.00041, 1.00075, 0.9994, 1.0003, 0.99999, 1, 1.00041, 0.99955,
         1, 0.99915, 0.99973, 0.99973, 1.00026, 1.00119, 0.99955, 0.99973, 1.0006,
         0.99911, 1.0006, 1.00026, 0.99972, 1.00026, 0.99902, 1.00041, 0.99973,
         0.99999, 1, 1, 1.00038, 1.0005, 1.00016, 1.00022, 1.00016, 1.00022,
         1.00016, 1.00022, 1.00001, 0.99973, 1, 1, 0.99973, 1, 1, 0.99955, 1.0006,
         1.0006, 1.0006, 1.0006, 1, 1, 1, 0.99973, 0.99973, 0.99972, 1, 1, 1.00106,
         0.99999, 0.99998, 0.99998, 0.99999, 0.99998, 1.66475, 1, 0.99973, 0.99973,
         1.00023, 0.99973, 0.99971, 1.00047, 1.00023, 1, 0.99991, 0.99984, 1.00002,
         1.00002, 1.00002, 1.00002, 1, 1, 1, 1, 1, 1, 1, 0.99972, 1, 1.20985,
         1.39713, 1.00003, 1.00031, 1.00015, 1, 0.99561, 1.00027, 1.00031, 1.00031,
         0.99915, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999, 1.41144,
         1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1,
         0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026, 0.99972, 0.99999,
         0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953,
         0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998, 0.99998,
         0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      ];
      var HelveticaBoldMetrics = { lineHeight: 1.2, lineGap: 0.2 };
      var HelveticaBoldItalicFactors = [
         0.76116, 1, 1, 1.0006, 0.99998, 0.99974, 0.99973, 0.99973, 0.99982,
         0.99977, 1.00087, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998,
         1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973,
         0.99973, 0.99973, 0.99973, 0.99973, 0.99998, 1, 1.00003, 1.00003, 1.00003,
         1.00026, 0.9999, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001, 1.00026,
         1.00022, 0.99977, 1.0006, 0.99973, 0.99977, 1.00026, 0.99999, 0.99977,
         1.00022, 1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001,
         1.00016, 1.00001, 1.00001, 1.00026, 0.99998, 1.0006, 0.99998, 1.00003,
         0.99973, 0.99998, 0.99973, 1.00026, 0.99973, 1.00026, 0.99973, 0.99998,
         1.00026, 1.00026, 1.0006, 1.0006, 0.99973, 1.0006, 0.99982, 1.00026,
         1.00026, 1.00026, 1.00026, 0.99959, 0.99973, 0.99998, 1.00026, 0.99973,
         1.00022, 0.99973, 0.99973, 1, 0.99959, 1.00077, 0.99959, 1.00003, 0.99998,
         0.99973, 0.99973, 0.99973, 0.99973, 1.00077, 0.99973, 0.99998, 1.00025,
         0.99968, 0.99973, 1.00003, 1.00025, 0.60299, 1.00024, 1.06409, 1, 1,
         0.99998, 1, 0.99973, 1.0006, 0.99998, 1, 0.99936, 0.99973, 1.00002,
         1.00002, 1.00002, 1.00026, 0.99977, 0.99977, 0.99977, 0.99977, 0.99977,
         0.99977, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001, 1.0006, 1.0006,
         1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022, 1.00022, 1.00022,
         1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977, 0.99977, 1.00001,
         1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973,
         0.99982, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1.0006,
         1.0006, 1.0006, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026,
         1.00026, 1.06409, 1.00026, 1.00026, 1.00026, 1.00026, 1.00026, 0.99973,
         1.00026, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973,
         0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973,
         0.99977, 1.0044, 0.99977, 1.00026, 1.00001, 0.99973, 1.00001, 0.99973,
         1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00022, 1.00026,
         1.00022, 1.00026, 1.00022, 1.00026, 1.00022, 1.00026, 0.99977, 1.00026,
         0.99977, 1.00026, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 1.0006,
         1.0006, 1.0006, 1.0006, 0.99971, 0.99973, 0.99973, 1.0006, 0.99977,
         0.99973, 0.99973, 1.00026, 1.0006, 1.00026, 1.0006, 1.00026, 1.01011,
         1.00026, 0.99999, 1.00026, 1.0006, 0.99977, 1.00026, 0.99977, 1.00026,
         0.99977, 1.00026, 0.9993, 0.9998, 1.00026, 1.00022, 1.00026, 1.00022,
         1.00026, 1.00022, 1.00026, 1, 1.00016, 0.99977, 0.99959, 0.99977, 0.99959,
         0.99977, 0.99959, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973,
         1.00001, 0.99973, 1.00026, 0.99998, 1.00026, 0.8121, 1.00026, 0.99998,
         0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026, 0.99977, 1.00026,
         0.99977, 1.00026, 0.99977, 1.00026, 1.00016, 1.00022, 1.00001, 0.99973,
         1.00001, 1.00026, 1, 1.00026, 1, 1.00026, 1, 1.0006, 0.99973, 0.99977,
         0.99973, 1, 0.99982, 1.00022, 1.00026, 1.00001, 0.99973, 1.00026, 0.99998,
         0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998,
         0.99998, 0.99998, 0.99998, 0.99977, 1, 1, 1.00026, 0.99969, 0.99972,
         0.99981, 0.9998, 1.0006, 0.99977, 0.99977, 1.00022, 0.91155, 1.00001,
         1.00026, 0.99977, 1.00022, 1.0006, 0.99977, 1.00001, 0.99999, 0.99977,
         0.99966, 1.00022, 1.00032, 1.00001, 0.99944, 1.00026, 1.00001, 0.99968,
         1.00001, 1.00047, 1, 1.0006, 1.00001, 0.99981, 1.00101, 1.00026, 1.0006,
         0.99948, 0.99981, 1.00064, 0.99973, 0.99942, 1.00101, 1.00061, 1.00026,
         1.00069, 1.0006, 1.00014, 0.99973, 1.01322, 0.99973, 1.00065, 1.00026,
         1.00012, 0.99923, 1, 1.00064, 1.00076, 0.99948, 1.00055, 1.00063, 1.00007,
         0.99943, 1.0006, 0.99948, 1.00026, 0.99948, 0.99943, 1.00001, 1.00001,
         1.00029, 1.00038, 1.00035, 1.00001, 1.0006, 1.0006, 0.99973, 0.99978,
         1.00001, 1.00057, 0.99989, 0.99967, 0.99964, 0.99967, 0.99977, 0.99999,
         0.99977, 1.00038, 0.99977, 1.00001, 0.99973, 1.00066, 0.99967, 0.99967,
         1.00041, 0.99998, 0.99999, 0.99977, 1.00022, 0.99967, 1.00001, 0.99977,
         1.00026, 0.99964, 1.00031, 1.00001, 0.99999, 0.99999, 1, 1.00023, 1, 1,
         0.99999, 1.00035, 1.00001, 0.99999, 0.99973, 0.99977, 0.99999, 1.00058,
         0.99973, 0.99973, 0.99955, 0.9995, 1.00026, 1.00026, 1.00032, 0.99989,
         1.00034, 0.99999, 1.00026, 1.00026, 1.00026, 0.99973, 0.45998, 0.99973,
         1.00026, 0.99973, 1.00001, 0.99999, 0.99982, 0.99994, 0.99996, 1, 1.00042,
         1.00044, 1.00029, 1.00023, 0.99973, 0.99973, 1.00026, 0.99949, 1.00002,
         0.99973, 1.0006, 1.0006, 1.0006, 0.99975, 1.00026, 1.00026, 1.00032,
         0.98685, 0.99973, 1.00026, 1, 1, 0.99966, 1.00044, 1.00016, 1.00022,
         1.00016, 1.00022, 1.00016, 1.00022, 1.00001, 0.99973, 1, 1, 0.99973, 1, 1,
         0.99955, 1.0006, 1.0006, 1.0006, 1.0006, 1, 1, 1, 0.99973, 0.99973,
         0.99972, 1, 1, 1.00106, 0.99999, 0.99998, 0.99998, 0.99999, 0.99998,
         1.66475, 1, 0.99973, 0.99973, 1, 0.99973, 0.99971, 0.99978, 1, 1, 0.99991,
         0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1.00098, 1, 1, 1, 1.00049, 1,
         1, 0.99972, 1, 1.20985, 1.39713, 1.00003, 1.00031, 1.00015, 1, 0.99561,
         1.00027, 1.00031, 1.00031, 0.99915, 1.00031, 1.00031, 0.99999, 1.00003,
         0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579,
         1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026,
         1.00026, 1.00026, 0.99972, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1,
         0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1,
         1, 1, 1, 0.99998, 0.99998, 0.99998, 0.99998, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1,
      ];
      var HelveticaBoldItalicMetrics = { lineHeight: 1.35, lineGap: 0.2 };
      var HelveticaItalicFactors = [
         0.76116, 1, 1, 1.0006, 1.0006, 1.00006, 0.99973, 0.99973, 0.99982,
         1.00001, 1.00043, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998,
         1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973,
         0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1, 1.00003, 1.00003, 1.00003,
         0.99973, 0.99987, 1.00001, 1.00001, 0.99977, 0.99977, 1.00001, 1.00026,
         1.00022, 0.99977, 1.0006, 1, 1.00001, 0.99973, 0.99999, 0.99977, 1.00022,
         1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016,
         1.00001, 1.00001, 1.00026, 1.0006, 1.0006, 1.0006, 0.99949, 0.99973,
         0.99998, 0.99973, 0.99973, 1, 0.99973, 0.99973, 1.0006, 0.99973, 0.99973,
         0.99924, 0.99924, 1, 0.99924, 0.99999, 0.99973, 0.99973, 0.99973, 0.99973,
         0.99998, 1, 1.0006, 0.99973, 1, 0.99977, 1, 1, 1, 1.00005, 1.0009,
         1.00005, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.0009,
         0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299,
         1.00024, 1.06409, 1, 1, 0.99998, 1, 0.9998, 1.0006, 0.99998, 1, 0.99936,
         0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 1.00001, 1.00001, 1.00001,
         1.00001, 1.00001, 1.00001, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001,
         1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022,
         1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977,
         0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973,
         0.99973, 0.99973, 0.99982, 1, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006,
         1.0006, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973,
         0.99973, 0.99973, 1.06409, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 1,
         0.99973, 1, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 0.99977,
         1, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1.0288, 0.99977, 0.99973,
         1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973,
         1.00001, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973,
         1.00022, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.0006, 1.0006,
         1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 0.99924, 1.0006, 1.0006, 0.99946,
         1.00034, 1, 0.99924, 1.00001, 1, 1, 0.99973, 0.99924, 0.99973, 0.99924,
         0.99973, 1.06311, 0.99973, 1.00024, 0.99973, 0.99924, 0.99977, 0.99973,
         0.99977, 0.99973, 0.99977, 0.99973, 1.00041, 0.9998, 0.99973, 1.00022,
         0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1, 1.00016, 0.99977, 0.99998,
         0.99977, 0.99998, 0.99977, 0.99998, 1.00001, 1, 1.00001, 1, 1.00001, 1,
         1.00001, 1, 1.00026, 1.0006, 1.00026, 0.89547, 1.00026, 1.0006, 0.99977,
         0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977,
         0.99973, 0.99977, 0.99973, 1.00016, 0.99977, 1.00001, 1, 1.00001, 1.00026,
         1, 1.00026, 1, 1.00026, 1, 0.99924, 0.99973, 1.00001, 0.99973, 1, 0.99982,
         1.00022, 1.00026, 1.00001, 1, 1.00026, 1.0006, 0.99998, 0.99998, 0.99998,
         0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998,
         1.00001, 1, 1.00054, 0.99977, 1.00084, 1.00007, 0.99973, 1.00013, 0.99924,
         1.00001, 1.00001, 0.99945, 0.91221, 1.00001, 1.00026, 0.99977, 1.00022,
         1.0006, 1.00001, 1.00001, 0.99999, 0.99977, 0.99933, 1.00022, 1.00054,
         1.00001, 1.00065, 1.00026, 1.00001, 1.0001, 1.00001, 1.00052, 1, 1.0006,
         1.00001, 0.99945, 0.99897, 0.99968, 0.99924, 1.00036, 0.99945, 0.99949, 1,
         1.0006, 0.99897, 0.99918, 0.99968, 0.99911, 0.99924, 1, 0.99962, 1.01487,
         1, 1.0005, 0.99973, 1.00012, 1.00043, 1, 0.99995, 0.99994, 1.00036,
         0.99947, 1.00019, 1.00063, 1.00025, 0.99924, 1.00036, 0.99973, 1.00036,
         1.00025, 1.00001, 1.00001, 1.00027, 1.0001, 1.00068, 1.00001, 1.0006,
         1.0006, 1, 1.00008, 0.99957, 0.99972, 0.9994, 0.99954, 0.99975, 1.00051,
         1.00001, 1.00019, 1.00001, 1.0001, 0.99986, 1.00001, 1.00001, 1.00038,
         0.99954, 0.99954, 0.9994, 1.00066, 0.99999, 0.99977, 1.00022, 1.00054,
         1.00001, 0.99977, 1.00026, 0.99975, 1.0001, 1.00001, 0.99993, 0.9995,
         0.99955, 1.00016, 0.99978, 0.99974, 1.00019, 1.00022, 0.99955, 1.00053,
         0.99973, 1.00089, 1.00005, 0.99967, 1.00048, 0.99973, 1.00002, 1.00034,
         0.99973, 0.99973, 0.99964, 1.00006, 1.00066, 0.99947, 0.99973, 0.98894,
         0.99973, 1, 0.44898, 1, 0.99946, 1, 1.00039, 1.00082, 0.99991, 0.99991,
         0.99985, 1.00022, 1.00023, 1.00061, 1.00006, 0.99966, 0.99973, 0.99973,
         0.99973, 1.00019, 1.0008, 1, 0.99924, 0.99924, 0.99924, 0.99983, 1.00044,
         0.99973, 0.99964, 0.98332, 1, 0.99973, 1, 1, 0.99962, 0.99895, 1.00016,
         0.99977, 1.00016, 0.99977, 1.00016, 0.99977, 1.00001, 1, 1, 1, 0.99973, 1,
         1, 0.99955, 0.99924, 0.99924, 0.99924, 0.99924, 0.99998, 0.99998, 0.99998,
         0.99973, 0.99973, 0.99972, 1, 1, 1.00267, 0.99999, 0.99998, 0.99998, 1,
         0.99998, 1.66475, 1, 0.99973, 0.99973, 1.00023, 0.99973, 1.00423, 0.99925,
         0.99999, 1, 0.99991, 0.99984, 1.00002, 1.00002, 1.00002, 1.00002, 1.00049,
         1, 1.00245, 1, 1, 1, 1, 0.96329, 1, 1.20985, 1.39713, 1.00003, 0.8254,
         1.00015, 1, 1.00035, 1.00027, 1.00031, 1.00031, 1.00003, 1.00031, 1.00031,
         0.99999, 1.00003, 0.99999, 0.99999, 1.41144, 1.6, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.40579, 1.40579, 1.36625, 0.99999, 1, 0.99861, 0.99861, 1,
         1.00026, 1.00026, 1.00026, 1.00026, 0.95317, 0.99999, 0.99999, 0.99999,
         0.99999, 1.40483, 1, 0.99977, 1.00054, 1, 1, 0.99953, 0.99962, 1.00042,
         0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 0.99998, 0.99998, 0.99998, 0.99998, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1,
      ];
      var HelveticaItalicMetrics = { lineHeight: 1.35, lineGap: 0.2 };
      var HelveticaRegularFactors = [
         0.76116, 1, 1, 1.0006, 1.0006, 1.00006, 0.99973, 0.99973, 0.99982,
         1.00001, 1.00043, 0.99998, 0.99998, 0.99959, 1.00003, 1.0006, 0.99998,
         1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973,
         0.99973, 0.99973, 0.99973, 0.99973, 1.0006, 1, 1.00003, 1.00003, 1.00003,
         0.99973, 0.99987, 1.00001, 1.00001, 0.99977, 0.99977, 1.00001, 1.00026,
         1.00022, 0.99977, 1.0006, 1, 1.00001, 0.99973, 0.99999, 0.99977, 1.00022,
         1.00001, 1.00022, 0.99977, 1.00001, 1.00026, 0.99977, 1.00001, 1.00016,
         1.00001, 1.00001, 1.00026, 1.0006, 1.0006, 1.0006, 0.99949, 0.99973,
         0.99998, 0.99973, 0.99973, 1, 0.99973, 0.99973, 1.0006, 0.99973, 0.99973,
         0.99924, 0.99924, 1, 0.99924, 0.99999, 0.99973, 0.99973, 0.99973, 0.99973,
         0.99998, 1, 1.0006, 0.99973, 1, 0.99977, 1, 1, 1, 1.00005, 1.0009,
         1.00005, 1.00003, 0.99998, 0.99973, 0.99973, 0.99973, 0.99973, 1.0009,
         0.99973, 0.99998, 1.00025, 0.99968, 0.99973, 1.00003, 1.00025, 0.60299,
         1.00024, 1.06409, 1, 1, 0.99998, 1, 0.9998, 1.0006, 0.99998, 1, 0.99936,
         0.99973, 1.00002, 1.00002, 1.00002, 1.00026, 1.00001, 1.00001, 1.00001,
         1.00001, 1.00001, 1.00001, 1, 0.99977, 1.00001, 1.00001, 1.00001, 1.00001,
         1.0006, 1.0006, 1.0006, 1.0006, 0.99977, 0.99977, 1.00022, 1.00022,
         1.00022, 1.00022, 1.00022, 1.00003, 1.00022, 0.99977, 0.99977, 0.99977,
         0.99977, 1.00001, 1.00001, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973,
         0.99973, 0.99973, 0.99982, 1, 0.99973, 0.99973, 0.99973, 0.99973, 1.0006,
         1.0006, 1.0006, 1.0006, 0.99973, 0.99973, 0.99973, 0.99973, 0.99973,
         0.99973, 0.99973, 1.06409, 1.00026, 0.99973, 0.99973, 0.99973, 0.99973, 1,
         0.99973, 1, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 0.99977,
         1, 0.99977, 1, 0.99977, 1, 0.99977, 1, 0.99977, 1.04596, 0.99977, 0.99973,
         1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973, 1.00001, 0.99973,
         1.00001, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1.00022, 0.99973,
         1.00022, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 1.0006, 1.0006,
         1.0006, 1.0006, 1.0006, 1.0006, 1.0006, 0.99924, 1.0006, 1.0006, 1.00019,
         1.00034, 1, 0.99924, 1.00001, 1, 1, 0.99973, 0.99924, 0.99973, 0.99924,
         0.99973, 1.02572, 0.99973, 1.00005, 0.99973, 0.99924, 0.99977, 0.99973,
         0.99977, 0.99973, 0.99977, 0.99973, 0.99999, 0.9998, 0.99973, 1.00022,
         0.99973, 1.00022, 0.99973, 1.00022, 0.99973, 1, 1.00016, 0.99977, 0.99998,
         0.99977, 0.99998, 0.99977, 0.99998, 1.00001, 1, 1.00001, 1, 1.00001, 1,
         1.00001, 1, 1.00026, 1.0006, 1.00026, 0.84533, 1.00026, 1.0006, 0.99977,
         0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977, 0.99973, 0.99977,
         0.99973, 0.99977, 0.99973, 1.00016, 0.99977, 1.00001, 1, 1.00001, 1.00026,
         1, 1.00026, 1, 1.00026, 1, 0.99924, 0.99973, 1.00001, 0.99973, 1, 0.99982,
         1.00022, 1.00026, 1.00001, 1, 1.00026, 1.0006, 0.99998, 0.99998, 0.99998,
         0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998, 0.99998,
         0.99928, 1, 0.99977, 1.00013, 1.00055, 0.99947, 0.99945, 0.99941, 0.99924,
         1.00001, 1.00001, 1.0004, 0.91621, 1.00001, 1.00026, 0.99977, 1.00022,
         1.0006, 1.00001, 1.00005, 0.99999, 0.99977, 1.00015, 1.00022, 0.99977,
         1.00001, 0.99973, 1.00026, 1.00001, 1.00019, 1.00001, 0.99946, 1, 1.0006,
         1.00001, 0.99978, 1.00045, 0.99973, 0.99924, 1.00023, 0.99978, 0.99966, 1,
         1.00065, 1.00045, 1.00019, 0.99973, 0.99973, 0.99924, 1, 1, 0.96499, 1,
         1.00055, 0.99973, 1.00008, 1.00027, 1, 0.9997, 0.99995, 1.00023, 0.99933,
         1.00019, 1.00015, 1.00031, 0.99924, 1.00023, 0.99973, 1.00023, 1.00031,
         1.00001, 0.99928, 1.00029, 1.00092, 1.00035, 1.00001, 1.0006, 1.0006, 1,
         0.99988, 0.99975, 1, 1.00082, 0.99561, 0.9996, 1.00035, 1.00001, 0.99962,
         1.00001, 1.00092, 0.99964, 1.00001, 0.99963, 0.99999, 1.00035, 1.00035,
         1.00082, 0.99962, 0.99999, 0.99977, 1.00022, 1.00035, 1.00001, 0.99977,
         1.00026, 0.9996, 0.99967, 1.00001, 1.00034, 1.00074, 1.00054, 1.00053,
         1.00063, 0.99971, 0.99962, 1.00035, 0.99975, 0.99977, 0.99973, 1.00043,
         0.99953, 1.0007, 0.99915, 0.99973, 1.00008, 0.99892, 1.00073, 1.00073,
         1.00114, 0.99915, 1.00073, 0.99955, 0.99973, 1.00092, 0.99973, 1, 0.99998,
         1, 1.0003, 1, 1.00043, 1.00001, 0.99969, 1.0003, 1, 1.00035, 1.00001,
         0.9995, 1, 1.00092, 0.99973, 0.99973, 0.99973, 1.0007, 0.9995, 1, 0.99924,
         1.0006, 0.99924, 0.99972, 1.00062, 0.99973, 1.00114, 1.00073, 1, 0.99955,
         1, 1, 1.00047, 0.99968, 1.00016, 0.99977, 1.00016, 0.99977, 1.00016,
         0.99977, 1.00001, 1, 1, 1, 0.99973, 1, 1, 0.99955, 0.99924, 0.99924,
         0.99924, 0.99924, 0.99998, 0.99998, 0.99998, 0.99973, 0.99973, 0.99972, 1,
         1, 1.00267, 0.99999, 0.99998, 0.99998, 1, 0.99998, 1.66475, 1, 0.99973,
         0.99973, 1.00023, 0.99973, 0.99971, 0.99925, 1.00023, 1, 0.99991, 0.99984,
         1.00002, 1.00002, 1.00002, 1.00002, 1, 1, 1, 1, 1, 1, 1, 0.96329, 1,
         1.20985, 1.39713, 1.00003, 0.8254, 1.00015, 1, 1.00035, 1.00027, 1.00031,
         1.00031, 0.99915, 1.00031, 1.00031, 0.99999, 1.00003, 0.99999, 0.99999,
         1.41144, 1.6, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.41144,
         1.41144, 1.41144, 1.41144, 1.41144, 1.41144, 1.40579, 1.40579, 1.36625,
         0.99999, 1, 0.99861, 0.99861, 1, 1.00026, 1.00026, 1.00026, 1.00026,
         0.95317, 0.99999, 0.99999, 0.99999, 0.99999, 1.40483, 1, 0.99977, 1.00054,
         1, 1, 0.99953, 0.99962, 1.00042, 0.9995, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      ];
      var HelveticaRegularMetrics = { lineHeight: 1.2, lineGap: 0.2 }; // CONCATENATED MODULE: ./src/core/liberationsans_widths.js
      var LiberationSansBoldWidths = [
         365, 0, 333, 278, 333, 474, 556, 556, 889, 722, 238, 333, 333, 389, 584,
         278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 333,
         333, 584, 584, 584, 611, 975, 722, 722, 722, 722, 667, 611, 778, 722, 278,
         556, 722, 611, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667,
         667, 611, 333, 278, 333, 584, 556, 333, 556, 611, 556, 611, 556, 333, 611,
         611, 278, 278, 556, 278, 889, 611, 611, 611, 611, 389, 556, 333, 611, 556,
         778, 556, 556, 500, 389, 280, 389, 584, 333, 556, 556, 556, 556, 280, 556,
         333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 556, 278,
         333, 333, 365, 556, 834, 834, 834, 611, 722, 722, 722, 722, 722, 722,
         1000, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778,
         778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556,
         556, 556, 556, 889, 556, 556, 556, 556, 556, 278, 278, 278, 278, 611, 611,
         611, 611, 611, 611, 611, 549, 611, 611, 611, 611, 611, 556, 611, 556, 722,
         556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 719,
         722, 611, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 611, 778,
         611, 778, 611, 778, 611, 722, 611, 722, 611, 278, 278, 278, 278, 278, 278,
         278, 278, 278, 278, 785, 556, 556, 278, 722, 556, 556, 611, 278, 611, 278,
         611, 385, 611, 479, 611, 278, 722, 611, 722, 611, 722, 611, 708, 723, 611,
         778, 611, 778, 611, 778, 611, 1000, 944, 722, 389, 722, 389, 722, 389,
         667, 556, 667, 556, 667, 556, 667, 556, 611, 333, 611, 479, 611, 333, 722,
         611, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 944, 778, 667, 556,
         667, 611, 500, 611, 500, 611, 500, 278, 556, 722, 556, 1000, 889, 778,
         611, 667, 556, 611, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
         465, 722, 333, 853, 906, 474, 825, 927, 838, 278, 722, 722, 601, 719, 667,
         611, 722, 778, 278, 722, 667, 833, 722, 644, 778, 722, 667, 600, 611, 667,
         821, 667, 809, 802, 278, 667, 615, 451, 611, 278, 582, 615, 610, 556, 606,
         475, 460, 611, 541, 278, 558, 556, 612, 556, 445, 611, 766, 619, 520, 684,
         446, 582, 715, 576, 753, 845, 278, 582, 611, 582, 845, 667, 669, 885, 567,
         711, 667, 278, 276, 556, 1094, 1062, 875, 610, 722, 622, 719, 722, 719,
         722, 567, 712, 667, 904, 626, 719, 719, 610, 702, 833, 722, 778, 719, 667,
         722, 611, 622, 854, 667, 730, 703, 1005, 1019, 870, 979, 719, 711, 1031,
         719, 556, 618, 615, 417, 635, 556, 709, 497, 615, 615, 500, 635, 740, 604,
         611, 604, 611, 556, 490, 556, 875, 556, 615, 581, 833, 844, 729, 854, 615,
         552, 854, 583, 556, 556, 611, 417, 552, 556, 278, 281, 278, 969, 906, 611,
         500, 615, 556, 604, 778, 611, 487, 447, 944, 778, 944, 778, 944, 778, 667,
         556, 333, 333, 556, 1000, 1000, 552, 278, 278, 278, 278, 500, 500, 500,
         556, 556, 350, 1000, 1000, 240, 479, 333, 333, 604, 333, 167, 396, 556,
         556, 1094, 556, 885, 489, 1115, 1000, 768, 600, 834, 834, 834, 834, 1000,
         500, 1000, 500, 1000, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979,
         722, 274, 549, 549, 583, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708,
         708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
         708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
         708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604,
         604, 354, 354, 1000, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354,
         1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 611, 611,
         333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 333, 333, 333, 333, 333,
         333, 333, 333,
      ];
      var LiberationSansBoldMapping = [
         -1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
         47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
         65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
         83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
         101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
         116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164,
         165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180,
         181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
         196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
         211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
         226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
         241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
         256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
         271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
         286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
         301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315,
         316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
         331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
         346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
         361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
         376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511,
         536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901,
         902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918,
         919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934,
         935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
         950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
         965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027,
         1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
         1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
         1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
         1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
         1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
         1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
         1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
         1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169,
         7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212,
         8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226,
         8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356,
         8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542,
         8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722,
         8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976,
         8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524,
         9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562,
         9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574,
         9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617,
         9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674,
         9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827,
         9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ];
      var LiberationSansBoldItalicWidths = [
         365, 0, 333, 278, 333, 474, 556, 556, 889, 722, 238, 333, 333, 389, 584,
         278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 333,
         333, 584, 584, 584, 611, 975, 722, 722, 722, 722, 667, 611, 778, 722, 278,
         556, 722, 611, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944, 667,
         667, 611, 333, 278, 333, 584, 556, 333, 556, 611, 556, 611, 556, 333, 611,
         611, 278, 278, 556, 278, 889, 611, 611, 611, 611, 389, 556, 333, 611, 556,
         778, 556, 556, 500, 389, 280, 389, 584, 333, 556, 556, 556, 556, 280, 556,
         333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 556, 278,
         333, 333, 365, 556, 834, 834, 834, 611, 722, 722, 722, 722, 722, 722,
         1000, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778,
         778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556,
         556, 556, 556, 889, 556, 556, 556, 556, 556, 278, 278, 278, 278, 611, 611,
         611, 611, 611, 611, 611, 549, 611, 611, 611, 611, 611, 556, 611, 556, 722,
         556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 740,
         722, 611, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 611, 778,
         611, 778, 611, 778, 611, 722, 611, 722, 611, 278, 278, 278, 278, 278, 278,
         278, 278, 278, 278, 782, 556, 556, 278, 722, 556, 556, 611, 278, 611, 278,
         611, 396, 611, 479, 611, 278, 722, 611, 722, 611, 722, 611, 708, 723, 611,
         778, 611, 778, 611, 778, 611, 1000, 944, 722, 389, 722, 389, 722, 389,
         667, 556, 667, 556, 667, 556, 667, 556, 611, 333, 611, 479, 611, 333, 722,
         611, 722, 611, 722, 611, 722, 611, 722, 611, 722, 611, 944, 778, 667, 556,
         667, 611, 500, 611, 500, 611, 500, 278, 556, 722, 556, 1000, 889, 778,
         611, 667, 556, 611, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
         333, 722, 333, 854, 906, 473, 844, 930, 847, 278, 722, 722, 610, 671, 667,
         611, 722, 778, 278, 722, 667, 833, 722, 657, 778, 718, 667, 590, 611, 667,
         822, 667, 829, 781, 278, 667, 620, 479, 611, 278, 591, 620, 621, 556, 610,
         479, 492, 611, 558, 278, 566, 556, 603, 556, 450, 611, 712, 605, 532, 664,
         409, 591, 704, 578, 773, 834, 278, 591, 611, 591, 834, 667, 667, 886, 614,
         719, 667, 278, 278, 556, 1094, 1042, 854, 622, 719, 677, 719, 722, 708,
         722, 614, 722, 667, 927, 643, 719, 719, 615, 687, 833, 722, 778, 719, 667,
         722, 611, 677, 781, 667, 729, 708, 979, 989, 854, 1000, 708, 719, 1042,
         729, 556, 619, 604, 534, 618, 556, 736, 510, 611, 611, 507, 622, 740, 604,
         611, 611, 611, 556, 889, 556, 885, 556, 646, 583, 889, 935, 707, 854, 594,
         552, 865, 589, 556, 556, 611, 469, 563, 556, 278, 278, 278, 969, 906, 611,
         507, 619, 556, 611, 778, 611, 575, 467, 944, 778, 944, 778, 944, 778, 667,
         556, 333, 333, 556, 1000, 1000, 552, 278, 278, 278, 278, 500, 500, 500,
         556, 556, 350, 1000, 1000, 240, 479, 333, 333, 604, 333, 167, 396, 556,
         556, 1104, 556, 885, 516, 1146, 1000, 768, 600, 834, 834, 834, 834, 999,
         500, 1000, 500, 1000, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979,
         722, 274, 549, 549, 583, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708,
         708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
         708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
         708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604,
         604, 354, 354, 1000, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354,
         1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 611, 611,
         333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 333, 333, 333, 333, 333,
         333, 333, 333,
      ];
      var LiberationSansBoldItalicMapping = [
         -1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
         47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
         65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
         83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
         101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
         116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164,
         165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180,
         181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
         196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
         211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
         226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
         241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
         256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
         271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
         286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
         301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315,
         316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
         331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
         346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
         361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
         376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511,
         536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901,
         902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918,
         919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934,
         935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
         950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
         965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027,
         1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
         1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
         1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
         1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
         1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
         1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
         1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
         1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169,
         7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212,
         8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226,
         8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356,
         8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542,
         8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722,
         8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976,
         8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524,
         9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562,
         9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574,
         9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617,
         9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674,
         9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827,
         9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ];
      var LiberationSansItalicWidths = [
         365, 0, 333, 278, 278, 355, 556, 556, 889, 667, 191, 333, 333, 389, 584,
         278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 278,
         278, 584, 584, 584, 556, 1015, 667, 667, 722, 722, 667, 611, 778, 722,
         278, 500, 667, 556, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944,
         667, 667, 611, 278, 278, 278, 469, 556, 333, 556, 556, 500, 556, 556, 278,
         556, 556, 222, 222, 500, 222, 833, 556, 556, 556, 556, 333, 500, 278, 556,
         500, 722, 500, 500, 500, 334, 260, 334, 584, 333, 556, 556, 556, 556, 260,
         556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 537,
         278, 333, 333, 365, 556, 834, 834, 834, 611, 667, 667, 667, 667, 667, 667,
         1000, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778,
         778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556,
         556, 556, 556, 889, 500, 556, 556, 556, 556, 278, 278, 278, 278, 556, 556,
         556, 556, 556, 556, 556, 549, 611, 556, 556, 556, 556, 500, 556, 500, 667,
         556, 667, 556, 667, 556, 722, 500, 722, 500, 722, 500, 722, 500, 722, 625,
         722, 556, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 556, 778,
         556, 778, 556, 778, 556, 722, 556, 722, 556, 278, 278, 278, 278, 278, 278,
         278, 222, 278, 278, 733, 444, 500, 222, 667, 500, 500, 556, 222, 556, 222,
         556, 281, 556, 400, 556, 222, 722, 556, 722, 556, 722, 556, 615, 723, 556,
         778, 556, 778, 556, 778, 556, 1000, 944, 722, 333, 722, 333, 722, 333,
         667, 500, 667, 500, 667, 500, 667, 500, 611, 278, 611, 354, 611, 278, 722,
         556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 944, 722, 667, 500,
         667, 611, 500, 611, 500, 611, 500, 222, 556, 667, 556, 1000, 889, 778,
         611, 667, 500, 611, 278, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
         333, 667, 278, 789, 846, 389, 794, 865, 775, 222, 667, 667, 570, 671, 667,
         611, 722, 778, 278, 667, 667, 833, 722, 648, 778, 725, 667, 600, 611, 667,
         837, 667, 831, 761, 278, 667, 570, 439, 555, 222, 550, 570, 571, 500, 556,
         439, 463, 555, 542, 222, 500, 492, 548, 500, 447, 556, 670, 573, 486, 603,
         374, 550, 652, 546, 728, 779, 222, 550, 556, 550, 779, 667, 667, 843, 544,
         708, 667, 278, 278, 500, 1066, 982, 844, 589, 715, 639, 724, 667, 651,
         667, 544, 704, 667, 917, 614, 715, 715, 589, 686, 833, 722, 778, 725, 667,
         722, 611, 639, 795, 667, 727, 673, 920, 923, 805, 886, 651, 694, 1022,
         682, 556, 562, 522, 493, 553, 556, 688, 465, 556, 556, 472, 564, 686, 550,
         556, 556, 556, 500, 833, 500, 835, 500, 572, 518, 830, 851, 621, 736, 526,
         492, 752, 534, 556, 556, 556, 378, 496, 500, 222, 222, 222, 910, 828, 556,
         472, 565, 500, 556, 778, 556, 492, 339, 944, 722, 944, 722, 944, 722, 667,
         500, 333, 333, 556, 1000, 1000, 552, 222, 222, 222, 222, 333, 333, 333,
         556, 556, 350, 1000, 1000, 188, 354, 333, 333, 500, 333, 167, 365, 556,
         556, 1094, 556, 885, 323, 1083, 1000, 768, 600, 834, 834, 834, 834, 1000,
         500, 998, 500, 1000, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979,
         719, 274, 549, 549, 584, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708,
         708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
         708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
         708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604,
         604, 354, 354, 1000, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354,
         1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 500, 500,
         333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 294, 294, 324, 324, 316,
         328, 398, 285,
      ];
      var LiberationSansItalicMapping = [
         -1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
         47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
         65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
         83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
         101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
         116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164,
         165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180,
         181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
         196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
         211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
         226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
         241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
         256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
         271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
         286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
         301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315,
         316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
         331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
         346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
         361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
         376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511,
         536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901,
         902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918,
         919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934,
         935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
         950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
         965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027,
         1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
         1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
         1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
         1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
         1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
         1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
         1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
         1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169,
         7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212,
         8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226,
         8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356,
         8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542,
         8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722,
         8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976,
         8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524,
         9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562,
         9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574,
         9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617,
         9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674,
         9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827,
         9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ];
      var LiberationSansRegularWidths = [
         365, 0, 333, 278, 278, 355, 556, 556, 889, 667, 191, 333, 333, 389, 584,
         278, 333, 278, 278, 556, 556, 556, 556, 556, 556, 556, 556, 556, 556, 278,
         278, 584, 584, 584, 556, 1015, 667, 667, 722, 722, 667, 611, 778, 722,
         278, 500, 667, 556, 833, 722, 778, 667, 778, 722, 667, 611, 722, 667, 944,
         667, 667, 611, 278, 278, 278, 469, 556, 333, 556, 556, 500, 556, 556, 278,
         556, 556, 222, 222, 500, 222, 833, 556, 556, 556, 556, 333, 500, 278, 556,
         500, 722, 500, 500, 500, 334, 260, 334, 584, 333, 556, 556, 556, 556, 260,
         556, 333, 737, 370, 556, 584, 737, 552, 400, 549, 333, 333, 333, 576, 537,
         278, 333, 333, 365, 556, 834, 834, 834, 611, 667, 667, 667, 667, 667, 667,
         1000, 722, 667, 667, 667, 667, 278, 278, 278, 278, 722, 722, 778, 778,
         778, 778, 778, 584, 778, 722, 722, 722, 722, 667, 667, 611, 556, 556, 556,
         556, 556, 556, 889, 500, 556, 556, 556, 556, 278, 278, 278, 278, 556, 556,
         556, 556, 556, 556, 556, 549, 611, 556, 556, 556, 556, 500, 556, 500, 667,
         556, 667, 556, 667, 556, 722, 500, 722, 500, 722, 500, 722, 500, 722, 615,
         722, 556, 667, 556, 667, 556, 667, 556, 667, 556, 667, 556, 778, 556, 778,
         556, 778, 556, 778, 556, 722, 556, 722, 556, 278, 278, 278, 278, 278, 278,
         278, 222, 278, 278, 735, 444, 500, 222, 667, 500, 500, 556, 222, 556, 222,
         556, 292, 556, 334, 556, 222, 722, 556, 722, 556, 722, 556, 604, 723, 556,
         778, 556, 778, 556, 778, 556, 1000, 944, 722, 333, 722, 333, 722, 333,
         667, 500, 667, 500, 667, 500, 667, 500, 611, 278, 611, 375, 611, 278, 722,
         556, 722, 556, 722, 556, 722, 556, 722, 556, 722, 556, 944, 722, 667, 500,
         667, 611, 500, 611, 500, 611, 500, 222, 556, 667, 556, 1000, 889, 778,
         611, 667, 500, 611, 278, 333, 333, 333, 333, 333, 333, 333, 333, 333, 333,
         333, 667, 278, 784, 838, 384, 774, 855, 752, 222, 667, 667, 551, 668, 667,
         611, 722, 778, 278, 667, 668, 833, 722, 650, 778, 722, 667, 618, 611, 667,
         798, 667, 835, 748, 278, 667, 578, 446, 556, 222, 547, 578, 575, 500, 557,
         446, 441, 556, 556, 222, 500, 500, 576, 500, 448, 556, 690, 569, 482, 617,
         395, 547, 648, 525, 713, 781, 222, 547, 556, 547, 781, 667, 667, 865, 542,
         719, 667, 278, 278, 500, 1057, 1010, 854, 583, 722, 635, 719, 667, 656,
         667, 542, 677, 667, 923, 604, 719, 719, 583, 656, 833, 722, 778, 719, 667,
         722, 611, 635, 760, 667, 740, 667, 917, 938, 792, 885, 656, 719, 1010,
         722, 556, 573, 531, 365, 583, 556, 669, 458, 559, 559, 438, 583, 688, 552,
         556, 542, 556, 500, 458, 500, 823, 500, 573, 521, 802, 823, 625, 719, 521,
         510, 750, 542, 556, 556, 556, 365, 510, 500, 222, 278, 222, 906, 812, 556,
         438, 559, 500, 552, 778, 556, 489, 411, 944, 722, 944, 722, 944, 722, 667,
         500, 333, 333, 556, 1000, 1000, 552, 222, 222, 222, 222, 333, 333, 333,
         556, 556, 350, 1000, 1000, 188, 354, 333, 333, 500, 333, 167, 365, 556,
         556, 1094, 556, 885, 323, 1073, 1000, 768, 600, 834, 834, 834, 834, 1000,
         500, 1000, 500, 1000, 500, 500, 494, 612, 823, 713, 584, 549, 713, 979,
         719, 274, 549, 549, 583, 549, 549, 604, 584, 604, 604, 708, 625, 708, 708,
         708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
         708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708,
         708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 708, 729, 604,
         604, 354, 354, 1000, 990, 990, 990, 990, 494, 604, 604, 604, 604, 354,
         1021, 1052, 917, 750, 750, 531, 656, 594, 510, 500, 750, 750, 500, 500,
         333, 333, 333, 333, 333, 333, 333, 333, 222, 222, 294, 294, 324, 324, 316,
         328, 398, 285,
      ];
      var LiberationSansRegularMapping = [
         -1, -1, -1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46,
         47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64,
         65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82,
         83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100,
         101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115,
         116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 161, 162, 163, 164,
         165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180,
         181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195,
         196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210,
         211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
         226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
         241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255,
         256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270,
         271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285,
         286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300,
         301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315,
         316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330,
         331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345,
         346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360,
         361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375,
         376, 377, 378, 379, 380, 381, 382, 383, 402, 506, 507, 508, 509, 510, 511,
         536, 537, 538, 539, 710, 711, 713, 728, 729, 730, 731, 732, 733, 900, 901,
         902, 903, 904, 905, 906, 908, 910, 911, 912, 913, 914, 915, 916, 917, 918,
         919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934,
         935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949,
         950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964,
         965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 1024, 1025, 1026, 1027,
         1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
         1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
         1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
         1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075,
         1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,
         1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
         1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111,
         1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1138, 1139, 1168, 1169,
         7808, 7809, 7810, 7811, 7812, 7813, 7922, 7923, 8208, 8209, 8211, 8212,
         8213, 8215, 8216, 8217, 8218, 8219, 8220, 8221, 8222, 8224, 8225, 8226,
         8230, 8240, 8242, 8243, 8249, 8250, 8252, 8254, 8260, 8319, 8355, 8356,
         8359, 8364, 8453, 8467, 8470, 8482, 8486, 8494, 8539, 8540, 8541, 8542,
         8592, 8593, 8594, 8595, 8596, 8597, 8616, 8706, 8710, 8719, 8721, 8722,
         8730, 8734, 8735, 8745, 8747, 8776, 8800, 8801, 8804, 8805, 8962, 8976,
         8992, 8993, 9472, 9474, 9484, 9488, 9492, 9496, 9500, 9508, 9516, 9524,
         9532, 9552, 9553, 9554, 9555, 9556, 9557, 9558, 9559, 9560, 9561, 9562,
         9563, 9564, 9565, 9566, 9567, 9568, 9569, 9570, 9571, 9572, 9573, 9574,
         9575, 9576, 9577, 9578, 9579, 9580, 9600, 9604, 9608, 9612, 9616, 9617,
         9618, 9619, 9632, 9633, 9642, 9643, 9644, 9650, 9658, 9660, 9668, 9674,
         9675, 9679, 9688, 9689, 9702, 9786, 9787, 9788, 9792, 9794, 9824, 9827,
         9829, 9830, 9834, 9835, 9836, 61441, 61442, 61445, -1, -1, -1, -1, -1, -1,
         -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
      ]; // CONCATENATED MODULE: ./src/core/myriadpro_factors.js
      var MyriadProBoldFactors = [
         1.36898, 1, 1, 0.72706, 0.80479, 0.83734, 0.98894, 0.99793, 0.9897,
         0.93884, 0.86209, 0.94292, 0.94292, 1.16661, 1.02058, 0.93582, 0.96694,
         0.93582, 1.19137, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793, 0.99793,
         0.99793, 0.99793, 0.99793, 0.99793, 0.78076, 0.78076, 1.02058, 1.02058,
         1.02058, 0.72851, 0.78966, 0.90838, 0.83637, 0.82391, 0.96376, 0.80061,
         0.86275, 0.8768, 0.95407, 1.0258, 0.73901, 0.85022, 0.83655, 1.0156,
         0.95546, 0.92179, 0.87107, 0.92179, 0.82114, 0.8096, 0.89713, 0.94438,
         0.95353, 0.94083, 0.91905, 0.90406, 0.9446, 0.94292, 1.18777, 0.94292,
         1.02058, 0.89903, 0.90088, 0.94938, 0.97898, 0.81093, 0.97571, 0.94938,
         1.024, 0.9577, 0.95933, 0.98621, 1.0474, 0.97455, 0.98981, 0.9672,
         0.95933, 0.9446, 0.97898, 0.97407, 0.97646, 0.78036, 1.10208, 0.95442,
         0.95298, 0.97579, 0.9332, 0.94039, 0.938, 0.80687, 1.01149, 0.80687,
         1.02058, 0.80479, 0.99793, 0.99793, 0.99793, 0.99793, 1.01149, 1.00872,
         0.90088, 0.91882, 1.0213, 0.8361, 1.02058, 0.62295, 0.54324, 0.89022,
         1.08595, 1, 1, 0.90088, 1, 0.97455, 0.93582, 0.90088, 1, 1.05686, 0.8361,
         0.99642, 0.99642, 0.99642, 0.72851, 0.90838, 0.90838, 0.90838, 0.90838,
         0.90838, 0.90838, 0.868, 0.82391, 0.80061, 0.80061, 0.80061, 0.80061,
         1.0258, 1.0258, 1.0258, 1.0258, 0.97484, 0.95546, 0.92179, 0.92179,
         0.92179, 0.92179, 0.92179, 1.02058, 0.92179, 0.94438, 0.94438, 0.94438,
         0.94438, 0.90406, 0.86958, 0.98225, 0.94938, 0.94938, 0.94938, 0.94938,
         0.94938, 0.94938, 0.9031, 0.81093, 0.94938, 0.94938, 0.94938, 0.94938,
         0.98621, 0.98621, 0.98621, 0.98621, 0.93969, 0.95933, 0.9446, 0.9446,
         0.9446, 0.9446, 0.9446, 1.08595, 0.9446, 0.95442, 0.95442, 0.95442,
         0.95442, 0.94039, 0.97898, 0.94039, 0.90838, 0.94938, 0.90838, 0.94938,
         0.90838, 0.94938, 0.82391, 0.81093, 0.82391, 0.81093, 0.82391, 0.81093,
         0.82391, 0.81093, 0.96376, 0.84313, 0.97484, 0.97571, 0.80061, 0.94938,
         0.80061, 0.94938, 0.80061, 0.94938, 0.80061, 0.94938, 0.80061, 0.94938,
         0.8768, 0.9577, 0.8768, 0.9577, 0.8768, 0.9577, 1, 1, 0.95407, 0.95933,
         0.97069, 0.95933, 1.0258, 0.98621, 1.0258, 0.98621, 1.0258, 0.98621,
         1.0258, 0.98621, 1.0258, 0.98621, 0.887, 1.01591, 0.73901, 1.0474, 1, 1,
         0.97455, 0.83655, 0.98981, 1, 1, 0.83655, 0.73977, 0.83655, 0.73903,
         0.84638, 1.033, 0.95546, 0.95933, 1, 1, 0.95546, 0.95933, 0.8271, 0.95417,
         0.95933, 0.92179, 0.9446, 0.92179, 0.9446, 0.92179, 0.9446, 0.936,
         0.91964, 0.82114, 0.97646, 1, 1, 0.82114, 0.97646, 0.8096, 0.78036,
         0.8096, 0.78036, 1, 1, 0.8096, 0.78036, 1, 1, 0.89713, 0.77452, 0.89713,
         1.10208, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94438,
         0.95442, 0.94438, 0.95442, 0.94438, 0.95442, 0.94083, 0.97579, 0.90406,
         0.94039, 0.90406, 0.9446, 0.938, 0.9446, 0.938, 0.9446, 0.938, 1, 0.99793,
         0.90838, 0.94938, 0.868, 0.9031, 0.92179, 0.9446, 1, 1, 0.89713, 1.10208,
         0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088,
         0.90088, 0.90989, 0.9358, 0.91945, 0.83181, 0.75261, 0.87992, 0.82976,
         0.96034, 0.83689, 0.97268, 1.0078, 0.90838, 0.83637, 0.8019, 0.90157,
         0.80061, 0.9446, 0.95407, 0.92436, 1.0258, 0.85022, 0.97153, 1.0156,
         0.95546, 0.89192, 0.92179, 0.92361, 0.87107, 0.96318, 0.89713, 0.93704,
         0.95638, 0.91905, 0.91709, 0.92796, 1.0258, 0.93704, 0.94836, 1.0373,
         0.95933, 1.0078, 0.95871, 0.94836, 0.96174, 0.92601, 0.9498, 0.98607,
         0.95776, 0.95933, 1.05453, 1.0078, 0.98275, 0.9314, 0.95617, 0.91701,
         1.05993, 0.9446, 0.78367, 0.9553, 1, 0.86832, 1.0128, 0.95871, 0.99394,
         0.87548, 0.96361, 0.86774, 1.0078, 0.95871, 0.9446, 0.95871, 0.86774, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         0.94083, 0.97579, 0.94083, 0.97579, 0.94083, 0.97579, 0.90406, 0.94039,
         0.96694, 1, 0.89903, 1, 1, 1, 0.93582, 0.93582, 0.93582, 1, 0.908, 0.908,
         0.918, 0.94219, 0.94219, 0.96544, 1, 1.285, 1, 1, 0.81079, 0.81079, 1, 1,
         0.74854, 1, 1, 1, 1, 0.99793, 1, 1, 1, 0.65, 1, 1.36145, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1.17173, 1, 0.80535, 0.76169, 1.02058, 1.0732, 1.05486, 1,
         1, 1.30692, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1.16161, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      ];
      var MyriadProBoldMetrics = { lineHeight: 1.2, lineGap: 0.2 };
      var MyriadProBoldItalicFactors = [
         1.36898, 1, 1, 0.66227, 0.80779, 0.81625, 0.97276, 0.97276, 0.97733,
         0.92222, 0.83266, 0.94292, 0.94292, 1.16148, 1.02058, 0.93582, 0.96694,
         0.93582, 1.17337, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276, 0.97276,
         0.97276, 0.97276, 0.97276, 0.97276, 0.78076, 0.78076, 1.02058, 1.02058,
         1.02058, 0.71541, 0.76813, 0.85576, 0.80591, 0.80729, 0.94299, 0.77512,
         0.83655, 0.86523, 0.92222, 0.98621, 0.71743, 0.81698, 0.79726, 0.98558,
         0.92222, 0.90637, 0.83809, 0.90637, 0.80729, 0.76463, 0.86275, 0.90699,
         0.91605, 0.9154, 0.85308, 0.85458, 0.90531, 0.94292, 1.21296, 0.94292,
         1.02058, 0.89903, 1.18616, 0.99613, 0.91677, 0.78216, 0.91677, 0.90083,
         0.98796, 0.9135, 0.92168, 0.95381, 0.98981, 0.95298, 0.95381, 0.93459,
         0.92168, 0.91513, 0.92004, 0.91677, 0.95077, 0.748, 1.04502, 0.91677,
         0.92061, 0.94236, 0.89544, 0.89364, 0.9, 0.80687, 0.8578, 0.80687,
         1.02058, 0.80779, 0.97276, 0.97276, 0.97276, 0.97276, 0.8578, 0.99973,
         1.18616, 0.91339, 1.08074, 0.82891, 1.02058, 0.55509, 0.71526, 0.89022,
         1.08595, 1, 1, 1.18616, 1, 0.96736, 0.93582, 1.18616, 1, 1.04864, 0.82711,
         0.99043, 0.99043, 0.99043, 0.71541, 0.85576, 0.85576, 0.85576, 0.85576,
         0.85576, 0.85576, 0.845, 0.80729, 0.77512, 0.77512, 0.77512, 0.77512,
         0.98621, 0.98621, 0.98621, 0.98621, 0.95961, 0.92222, 0.90637, 0.90637,
         0.90637, 0.90637, 0.90637, 1.02058, 0.90251, 0.90699, 0.90699, 0.90699,
         0.90699, 0.85458, 0.83659, 0.94951, 0.99613, 0.99613, 0.99613, 0.99613,
         0.99613, 0.99613, 0.85811, 0.78216, 0.90083, 0.90083, 0.90083, 0.90083,
         0.95381, 0.95381, 0.95381, 0.95381, 0.9135, 0.92168, 0.91513, 0.91513,
         0.91513, 0.91513, 0.91513, 1.08595, 0.91677, 0.91677, 0.91677, 0.91677,
         0.91677, 0.89364, 0.92332, 0.89364, 0.85576, 0.99613, 0.85576, 0.99613,
         0.85576, 0.99613, 0.80729, 0.78216, 0.80729, 0.78216, 0.80729, 0.78216,
         0.80729, 0.78216, 0.94299, 0.76783, 0.95961, 0.91677, 0.77512, 0.90083,
         0.77512, 0.90083, 0.77512, 0.90083, 0.77512, 0.90083, 0.77512, 0.90083,
         0.86523, 0.9135, 0.86523, 0.9135, 0.86523, 0.9135, 1, 1, 0.92222, 0.92168,
         0.92222, 0.92168, 0.98621, 0.95381, 0.98621, 0.95381, 0.98621, 0.95381,
         0.98621, 0.95381, 0.98621, 0.95381, 0.86036, 0.97096, 0.71743, 0.98981, 1,
         1, 0.95298, 0.79726, 0.95381, 1, 1, 0.79726, 0.6894, 0.79726, 0.74321,
         0.81691, 1.0006, 0.92222, 0.92168, 1, 1, 0.92222, 0.92168, 0.79464,
         0.92098, 0.92168, 0.90637, 0.91513, 0.90637, 0.91513, 0.90637, 0.91513,
         0.909, 0.87514, 0.80729, 0.95077, 1, 1, 0.80729, 0.95077, 0.76463, 0.748,
         0.76463, 0.748, 1, 1, 0.76463, 0.748, 1, 1, 0.86275, 0.72651, 0.86275,
         1.04502, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.90699,
         0.91677, 0.90699, 0.91677, 0.90699, 0.91677, 0.9154, 0.94236, 0.85458,
         0.89364, 0.85458, 0.90531, 0.9, 0.90531, 0.9, 0.90531, 0.9, 1, 0.97276,
         0.85576, 0.99613, 0.845, 0.85811, 0.90251, 0.91677, 1, 1, 0.86275,
         1.04502, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616, 1.18616,
         1.18616, 1.18616, 1.00899, 1.30628, 0.85576, 0.80178, 0.66862, 0.7927,
         0.69323, 0.88127, 0.72459, 0.89711, 0.95381, 0.85576, 0.80591, 0.7805,
         0.94729, 0.77512, 0.90531, 0.92222, 0.90637, 0.98621, 0.81698, 0.92655,
         0.98558, 0.92222, 0.85359, 0.90637, 0.90976, 0.83809, 0.94523, 0.86275,
         0.83509, 0.93157, 0.85308, 0.83392, 0.92346, 0.98621, 0.83509, 0.92886,
         0.91324, 0.92168, 0.95381, 0.90646, 0.92886, 0.90557, 0.86847, 0.90276,
         0.91324, 0.86842, 0.92168, 0.99531, 0.95381, 0.9224, 0.85408, 0.92699,
         0.86847, 1.0051, 0.91513, 0.80487, 0.93481, 1, 0.88159, 1.05214, 0.90646,
         0.97355, 0.81539, 0.89398, 0.85923, 0.95381, 0.90646, 0.91513, 0.90646,
         0.85923, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 0.9154, 0.94236, 0.9154, 0.94236, 0.9154, 0.94236, 0.85458,
         0.89364, 0.96694, 1, 0.89903, 1, 1, 1, 0.91782, 0.91782, 0.91782, 1,
         0.896, 0.896, 0.896, 0.9332, 0.9332, 0.95973, 1, 1.26, 1, 1, 0.80479,
         0.80178, 1, 1, 0.85633, 1, 1, 1, 1, 0.97276, 1, 1, 1, 0.698, 1, 1.36145,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.14542, 1, 0.79199, 0.78694, 1.02058,
         1.03493, 1.05486, 1, 1, 1.23026, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.20006, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      ];
      var MyriadProBoldItalicMetrics = { lineHeight: 1.2, lineGap: 0.2 };
      var MyriadProItalicFactors = [
         1.36898, 1, 1, 0.65507, 0.84943, 0.85639, 0.88465, 0.88465, 0.86936,
         0.88307, 0.86948, 0.85283, 0.85283, 1.06383, 1.02058, 0.75945, 0.9219,
         0.75945, 1.17337, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465, 0.88465,
         0.88465, 0.88465, 0.88465, 0.88465, 0.75945, 0.75945, 1.02058, 1.02058,
         1.02058, 0.69046, 0.70926, 0.85158, 0.77812, 0.76852, 0.89591, 0.70466,
         0.76125, 0.80094, 0.86822, 0.83864, 0.728, 0.77212, 0.79475, 0.93637,
         0.87514, 0.8588, 0.76013, 0.8588, 0.72421, 0.69866, 0.77598, 0.85991,
         0.80811, 0.87832, 0.78112, 0.77512, 0.8562, 1.0222, 1.18417, 1.0222,
         1.27014, 0.89903, 1.15012, 0.93859, 0.94399, 0.846, 0.94399, 0.81453,
         1.0186, 0.94219, 0.96017, 1.03075, 1.02175, 0.912, 1.03075, 0.96998,
         0.96017, 0.93859, 0.94399, 0.94399, 0.95493, 0.746, 1.12658, 0.94578,
         0.91, 0.979, 0.882, 0.882, 0.83, 0.85034, 0.83537, 0.85034, 1.02058,
         0.70869, 0.88465, 0.88465, 0.88465, 0.88465, 0.83537, 0.90083, 1.15012,
         0.9161, 0.94565, 0.73541, 1.02058, 0.53609, 0.69353, 0.79519, 1.08595, 1,
         1, 1.15012, 1, 0.91974, 0.75945, 1.15012, 1, 0.9446, 0.73361, 0.9005,
         0.9005, 0.9005, 0.62864, 0.85158, 0.85158, 0.85158, 0.85158, 0.85158,
         0.85158, 0.773, 0.76852, 0.70466, 0.70466, 0.70466, 0.70466, 0.83864,
         0.83864, 0.83864, 0.83864, 0.90561, 0.87514, 0.8588, 0.8588, 0.8588,
         0.8588, 0.8588, 1.02058, 0.85751, 0.85991, 0.85991, 0.85991, 0.85991,
         0.77512, 0.76013, 0.88075, 0.93859, 0.93859, 0.93859, 0.93859, 0.93859,
         0.93859, 0.8075, 0.846, 0.81453, 0.81453, 0.81453, 0.81453, 0.82424,
         0.82424, 0.82424, 0.82424, 0.9278, 0.96017, 0.93859, 0.93859, 0.93859,
         0.93859, 0.93859, 1.08595, 0.8562, 0.94578, 0.94578, 0.94578, 0.94578,
         0.882, 0.94578, 0.882, 0.85158, 0.93859, 0.85158, 0.93859, 0.85158,
         0.93859, 0.76852, 0.846, 0.76852, 0.846, 0.76852, 0.846, 0.76852, 0.846,
         0.89591, 0.8544, 0.90561, 0.94399, 0.70466, 0.81453, 0.70466, 0.81453,
         0.70466, 0.81453, 0.70466, 0.81453, 0.70466, 0.81453, 0.80094, 0.94219,
         0.80094, 0.94219, 0.80094, 0.94219, 1, 1, 0.86822, 0.96017, 0.86822,
         0.96017, 0.83864, 0.82424, 0.83864, 0.82424, 0.83864, 0.82424, 0.83864,
         1.03075, 0.83864, 0.82424, 0.81402, 1.02738, 0.728, 1.02175, 1, 1, 0.912,
         0.79475, 1.03075, 1, 1, 0.79475, 0.83911, 0.79475, 0.66266, 0.80553,
         1.06676, 0.87514, 0.96017, 1, 1, 0.87514, 0.96017, 0.86865, 0.87396,
         0.96017, 0.8588, 0.93859, 0.8588, 0.93859, 0.8588, 0.93859, 0.867,
         0.84759, 0.72421, 0.95493, 1, 1, 0.72421, 0.95493, 0.69866, 0.746,
         0.69866, 0.746, 1, 1, 0.69866, 0.746, 1, 1, 0.77598, 0.88417, 0.77598,
         1.12658, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.85991,
         0.94578, 0.85991, 0.94578, 0.85991, 0.94578, 0.87832, 0.979, 0.77512,
         0.882, 0.77512, 0.8562, 0.83, 0.8562, 0.83, 0.8562, 0.83, 1, 0.88465,
         0.85158, 0.93859, 0.773, 0.8075, 0.85751, 0.8562, 1, 1, 0.77598, 1.12658,
         1.15012, 1.15012, 1.15012, 1.15012, 1.15012, 1.15313, 1.15012, 1.15012,
         1.15012, 1.08106, 1.03901, 0.85158, 0.77025, 0.62264, 0.7646, 0.65351,
         0.86026, 0.69461, 0.89947, 1.03075, 0.85158, 0.77812, 0.76449, 0.88836,
         0.70466, 0.8562, 0.86822, 0.8588, 0.83864, 0.77212, 0.85308, 0.93637,
         0.87514, 0.82352, 0.8588, 0.85701, 0.76013, 0.89058, 0.77598, 0.8156,
         0.82565, 0.78112, 0.77899, 0.89386, 0.83864, 0.8156, 0.9486, 0.92388,
         0.96186, 1.03075, 0.91123, 0.9486, 0.93298, 0.878, 0.93942, 0.92388,
         0.84596, 0.96186, 0.95119, 1.03075, 0.922, 0.88787, 0.95829, 0.88,
         0.93559, 0.93859, 0.78815, 0.93758, 1, 0.89217, 1.03737, 0.91123, 0.93969,
         0.77487, 0.85769, 0.86799, 1.03075, 0.91123, 0.93859, 0.91123, 0.86799, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         0.87832, 0.979, 0.87832, 0.979, 0.87832, 0.979, 0.77512, 0.882, 0.9219, 1,
         0.89903, 1, 1, 1, 0.87321, 0.87321, 0.87321, 1, 1.027, 1.027, 1.027,
         0.86847, 0.86847, 0.79121, 1, 1.124, 1, 1, 0.73572, 0.73572, 1, 1,
         0.85034, 1, 1, 1, 1, 0.88465, 1, 1, 1, 0.669, 1, 1.36145, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1.04828, 1, 0.74948, 0.75187, 1.02058, 0.98391, 1.02119,
         1, 1, 1.06233, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1.05233, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      ];
      var MyriadProItalicMetrics = { lineHeight: 1.2, lineGap: 0.2 };
      var MyriadProRegularFactors = [
         1.36898, 1, 1, 0.76305, 0.82784, 0.94935, 0.89364, 0.92241, 0.89073,
         0.90706, 0.98472, 0.85283, 0.85283, 1.0664, 1.02058, 0.74505, 0.9219,
         0.74505, 1.23456, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241, 0.92241,
         0.92241, 0.92241, 0.92241, 0.92241, 0.74505, 0.74505, 1.02058, 1.02058,
         1.02058, 0.73002, 0.72601, 0.91755, 0.8126, 0.80314, 0.92222, 0.73764,
         0.79726, 0.83051, 0.90284, 0.86023, 0.74, 0.8126, 0.84869, 0.96518,
         0.91115, 0.8858, 0.79761, 0.8858, 0.74498, 0.73914, 0.81363, 0.89591,
         0.83659, 0.89633, 0.85608, 0.8111, 0.90531, 1.0222, 1.22736, 1.0222,
         1.27014, 0.89903, 0.90088, 0.86667, 1.0231, 0.896, 1.01411, 0.90083,
         1.05099, 1.00512, 0.99793, 1.05326, 1.09377, 0.938, 1.06226, 1.00119,
         0.99793, 0.98714, 1.0231, 1.01231, 0.98196, 0.792, 1.19137, 0.99074,
         0.962, 1.01915, 0.926, 0.942, 0.856, 0.85034, 0.92006, 0.85034, 1.02058,
         0.69067, 0.92241, 0.92241, 0.92241, 0.92241, 0.92006, 0.9332, 0.90088,
         0.91882, 0.93484, 0.75339, 1.02058, 0.56866, 0.54324, 0.79519, 1.08595, 1,
         1, 0.90088, 1, 0.95325, 0.74505, 0.90088, 1, 0.97198, 0.75339, 0.91009,
         0.91009, 0.91009, 0.66466, 0.91755, 0.91755, 0.91755, 0.91755, 0.91755,
         0.91755, 0.788, 0.80314, 0.73764, 0.73764, 0.73764, 0.73764, 0.86023,
         0.86023, 0.86023, 0.86023, 0.92915, 0.91115, 0.8858, 0.8858, 0.8858,
         0.8858, 0.8858, 1.02058, 0.8858, 0.89591, 0.89591, 0.89591, 0.89591,
         0.8111, 0.79611, 0.89713, 0.86667, 0.86667, 0.86667, 0.86667, 0.86667,
         0.86667, 0.86936, 0.896, 0.90083, 0.90083, 0.90083, 0.90083, 0.84224,
         0.84224, 0.84224, 0.84224, 0.97276, 0.99793, 0.98714, 0.98714, 0.98714,
         0.98714, 0.98714, 1.08595, 0.89876, 0.99074, 0.99074, 0.99074, 0.99074,
         0.942, 1.0231, 0.942, 0.91755, 0.86667, 0.91755, 0.86667, 0.91755,
         0.86667, 0.80314, 0.896, 0.80314, 0.896, 0.80314, 0.896, 0.80314, 0.896,
         0.92222, 0.93372, 0.92915, 1.01411, 0.73764, 0.90083, 0.73764, 0.90083,
         0.73764, 0.90083, 0.73764, 0.90083, 0.73764, 0.90083, 0.83051, 1.00512,
         0.83051, 1.00512, 0.83051, 1.00512, 1, 1, 0.90284, 0.99793, 0.90976,
         0.99793, 0.86023, 0.84224, 0.86023, 0.84224, 0.86023, 0.84224, 0.86023,
         1.05326, 0.86023, 0.84224, 0.82873, 1.07469, 0.74, 1.09377, 1, 1, 0.938,
         0.84869, 1.06226, 1, 1, 0.84869, 0.83704, 0.84869, 0.81441, 0.85588,
         1.08927, 0.91115, 0.99793, 1, 1, 0.91115, 0.99793, 0.91887, 0.90991,
         0.99793, 0.8858, 0.98714, 0.8858, 0.98714, 0.8858, 0.98714, 0.894,
         0.91434, 0.74498, 0.98196, 1, 1, 0.74498, 0.98196, 0.73914, 0.792,
         0.73914, 0.792, 1, 1, 0.73914, 0.792, 1, 1, 0.81363, 0.904, 0.81363,
         1.19137, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89591,
         0.99074, 0.89591, 0.99074, 0.89591, 0.99074, 0.89633, 1.01915, 0.8111,
         0.942, 0.8111, 0.90531, 0.856, 0.90531, 0.856, 0.90531, 0.856, 1, 0.92241,
         0.91755, 0.86667, 0.788, 0.86936, 0.8858, 0.89876, 1, 1, 0.81363, 1.19137,
         0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088, 0.90088,
         0.90088, 0.90388, 1.03901, 0.92138, 0.78105, 0.7154, 0.86169, 0.80513,
         0.94007, 0.82528, 0.98612, 1.06226, 0.91755, 0.8126, 0.81884, 0.92819,
         0.73764, 0.90531, 0.90284, 0.8858, 0.86023, 0.8126, 0.91172, 0.96518,
         0.91115, 0.83089, 0.8858, 0.87791, 0.79761, 0.89297, 0.81363, 0.88157,
         0.89992, 0.85608, 0.81992, 0.94307, 0.86023, 0.88157, 0.95308, 0.98699,
         0.99793, 1.06226, 0.95817, 0.95308, 0.97358, 0.928, 0.98088, 0.98699,
         0.92761, 0.99793, 0.96017, 1.06226, 0.986, 0.944, 0.95978, 0.938, 0.96705,
         0.98714, 0.80442, 0.98972, 1, 0.89762, 1.04552, 0.95817, 0.99007, 0.87064,
         0.91879, 0.88888, 1.06226, 0.95817, 0.98714, 0.95817, 0.88888, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.89633,
         1.01915, 0.89633, 1.01915, 0.89633, 1.01915, 0.8111, 0.942, 0.9219, 1,
         0.89903, 1, 1, 1, 0.93173, 0.93173, 0.93173, 1, 1.06304, 1.06304, 1.06904,
         0.89903, 0.89903, 0.80549, 1, 1.156, 1, 1, 0.76575, 0.76575, 1, 1,
         0.72458, 1, 1, 1, 1, 0.92241, 1, 1, 1, 0.619, 1, 1.36145, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1.07257, 1, 0.74705, 0.71119, 1.02058, 1.024, 1.02119,
         1, 1, 1.1536, 1.08595, 1.08595, 1, 1.08595, 1.08595, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1.05638, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      ];
      var MyriadProRegularMetrics = { lineHeight: 1.2, lineGap: 0.2 }; // CONCATENATED MODULE: ./src/core/segoeui_factors.js
      var SegoeuiBoldFactors = [
         1.76738, 1, 1, 0.99297, 0.9824, 1.04016, 1.06497, 1.03424, 0.97529,
         1.17647, 1.23203, 1.1085, 1.1085, 1.16939, 1.2107, 0.9754, 1.21408,
         0.9754, 1.59578, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424, 1.03424,
         1.03424, 1.03424, 1.03424, 1.03424, 0.81378, 0.81378, 1.2107, 1.2107,
         1.2107, 0.71703, 0.97847, 0.97363, 0.88776, 0.8641, 1.02096, 0.79795,
         0.85132, 0.914, 1.06085, 1.1406, 0.8007, 0.89858, 0.83693, 1.14889,
         1.09398, 0.97489, 0.92094, 0.97489, 0.90399, 0.84041, 0.95923, 1.00135, 1,
         1.06467, 0.98243, 0.90996, 0.99361, 1.1085, 1.56942, 1.1085, 1.2107,
         0.74627, 0.94282, 0.96752, 1.01519, 0.86304, 1.01359, 0.97278, 1.15103,
         1.01359, 0.98561, 1.02285, 1.02285, 1.00527, 1.02285, 1.0302, 0.99041,
         1.0008, 1.01519, 1.01359, 1.02258, 0.79104, 1.16862, 0.99041, 0.97454,
         1.02511, 0.99298, 0.96752, 0.95801, 0.94856, 1.16579, 0.94856, 1.2107,
         0.9824, 1.03424, 1.03424, 1, 1.03424, 1.16579, 0.8727, 1.3871, 1.18622,
         1.10818, 1.04478, 1.2107, 1.18622, 0.75155, 0.94994, 1.28826, 1.21408,
         1.21408, 0.91056, 1, 0.91572, 0.9754, 0.64663, 1.18328, 1.24866, 1.04478,
         1.14169, 1.15749, 1.17389, 0.71703, 0.97363, 0.97363, 0.97363, 0.97363,
         0.97363, 0.97363, 0.93506, 0.8641, 0.79795, 0.79795, 0.79795, 0.79795,
         1.1406, 1.1406, 1.1406, 1.1406, 1.02096, 1.09398, 0.97426, 0.97426,
         0.97426, 0.97426, 0.97426, 1.2107, 0.97489, 1.00135, 1.00135, 1.00135,
         1.00135, 0.90996, 0.92094, 1.02798, 0.96752, 0.96752, 0.96752, 0.96752,
         0.96752, 0.96752, 0.93136, 0.86304, 0.97278, 0.97278, 0.97278, 0.97278,
         1.02285, 1.02285, 1.02285, 1.02285, 0.97122, 0.99041, 1, 1, 1, 1, 1,
         1.28826, 1.0008, 0.99041, 0.99041, 0.99041, 0.99041, 0.96752, 1.01519,
         0.96752, 0.97363, 0.96752, 0.97363, 0.96752, 0.97363, 0.96752, 0.8641,
         0.86304, 0.8641, 0.86304, 0.8641, 0.86304, 0.8641, 0.86304, 1.02096,
         1.03057, 1.02096, 1.03517, 0.79795, 0.97278, 0.79795, 0.97278, 0.79795,
         0.97278, 0.79795, 0.97278, 0.79795, 0.97278, 0.914, 1.01359, 0.914,
         1.01359, 0.914, 1.01359, 1, 1, 1.06085, 0.98561, 1.06085, 1.00879, 1.1406,
         1.02285, 1.1406, 1.02285, 1.1406, 1.02285, 1.1406, 1.02285, 1.1406,
         1.02285, 0.97138, 1.08692, 0.8007, 1.02285, 1, 1, 1.00527, 0.83693,
         1.02285, 1, 1, 0.83693, 0.9455, 0.83693, 0.90418, 0.83693, 1.13005,
         1.09398, 0.99041, 1, 1, 1.09398, 0.99041, 0.96692, 1.09251, 0.99041,
         0.97489, 1.0008, 0.97489, 1.0008, 0.97489, 1.0008, 0.93994, 0.97931,
         0.90399, 1.02258, 1, 1, 0.90399, 1.02258, 0.84041, 0.79104, 0.84041,
         0.79104, 0.84041, 0.79104, 0.84041, 0.79104, 1, 1, 0.95923, 1.07034,
         0.95923, 1.16862, 1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041,
         1.00135, 0.99041, 1.00135, 0.99041, 1.00135, 0.99041, 1.06467, 1.02511,
         0.90996, 0.96752, 0.90996, 0.99361, 0.95801, 0.99361, 0.95801, 0.99361,
         0.95801, 1.07733, 1.03424, 0.97363, 0.96752, 0.93506, 0.93136, 0.97489,
         1.0008, 1, 1, 0.95923, 1.16862, 1.15103, 1.15103, 1.01173, 1.03959,
         0.75953, 0.81378, 0.79912, 1.15103, 1.21994, 0.95161, 0.87815, 1.01149,
         0.81525, 0.7676, 0.98167, 1.01134, 1.02546, 0.84097, 1.03089, 1.18102,
         0.97363, 0.88776, 0.85134, 0.97826, 0.79795, 0.99361, 1.06085, 0.97489,
         1.1406, 0.89858, 1.0388, 1.14889, 1.09398, 0.86039, 0.97489, 1.0595,
         0.92094, 0.94793, 0.95923, 0.90996, 0.99346, 0.98243, 1.02112, 0.95493,
         1.1406, 0.90996, 1.03574, 1.02597, 1.0008, 1.18102, 1.06628, 1.03574,
         1.0192, 1.01932, 1.00886, 0.97531, 1.0106, 1.0008, 1.13189, 1.18102,
         1.02277, 0.98683, 1.0016, 0.99561, 1.07237, 1.0008, 0.90434, 0.99921,
         0.93803, 0.8965, 1.23085, 1.06628, 1.04983, 0.96268, 1.0499, 0.98439,
         1.18102, 1.06628, 1.0008, 1.06628, 0.98439, 0.79795, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1.09466, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         0.97278, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.02065, 1, 1, 1, 1, 1, 1,
         1.06467, 1.02511, 1.06467, 1.02511, 1.06467, 1.02511, 0.90996, 0.96752, 1,
         1.21408, 0.89903, 1, 1, 0.75155, 1.04394, 1.04394, 1.04394, 1.04394,
         0.98633, 0.98633, 0.98633, 0.73047, 0.73047, 1.20642, 0.91211, 1.25635,
         1.222, 1.02956, 1.03372, 1.03372, 0.96039, 1.24633, 1, 1.12454, 0.93503,
         1.03424, 1.19687, 1.03424, 1, 1, 1, 0.771, 1, 1, 1.15749, 1.15749,
         1.15749, 1.10948, 0.86279, 0.94434, 0.86279, 0.94434, 0.86182, 1, 1,
         1.16897, 1, 0.96085, 0.90137, 1.2107, 1.18416, 1.13973, 0.69825, 0.9716,
         2.10339, 1.29004, 1.29004, 1.21172, 1.29004, 1.29004, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1,
         0.99862, 0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.18874, 1.42603,
         1, 1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296,
         1.34163, 1, 1, 1, 1.09193, 1.09193, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1,
      ];
      var SegoeuiBoldMetrics = { lineHeight: 1.33008, lineGap: 0 };
      var SegoeuiBoldItalicFactors = [
         1.76738, 1, 1, 0.98946, 1.03959, 1.04016, 1.02809, 1.036, 0.97639,
         1.10953, 1.23203, 1.11144, 1.11144, 1.16939, 1.21237, 0.9754, 1.21261,
         0.9754, 1.59754, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036, 1.036,
         1.036, 1.036, 0.81378, 0.81378, 1.21237, 1.21237, 1.21237, 0.73541,
         0.97847, 0.97363, 0.89723, 0.87897, 1.0426, 0.79429, 0.85292, 0.91149,
         1.05815, 1.1406, 0.79631, 0.90128, 0.83853, 1.04396, 1.10615, 0.97552,
         0.94436, 0.97552, 0.88641, 0.80527, 0.96083, 1.00135, 1, 1.06777, 0.9817,
         0.91142, 0.99361, 1.11144, 1.57293, 1.11144, 1.21237, 0.74627, 1.31818,
         1.06585, 0.97042, 0.83055, 0.97042, 0.93503, 1.1261, 0.97042, 0.97922,
         1.14236, 0.94552, 1.01054, 1.14236, 1.02471, 0.97922, 0.94165, 0.97042,
         0.97042, 1.0276, 0.78929, 1.1261, 0.97922, 0.95874, 1.02197, 0.98507,
         0.96752, 0.97168, 0.95107, 1.16579, 0.95107, 1.21237, 1.03959, 1.036,
         1.036, 1, 1.036, 1.16579, 0.87357, 1.31818, 1.18754, 1.26781, 1.05356,
         1.21237, 1.18622, 0.79487, 0.94994, 1.29004, 1.24047, 1.24047, 1.31818, 1,
         0.91484, 0.9754, 1.31818, 1.1349, 1.24866, 1.05356, 1.13934, 1.15574,
         1.17389, 0.73541, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363, 0.97363,
         0.94385, 0.87897, 0.79429, 0.79429, 0.79429, 0.79429, 1.1406, 1.1406,
         1.1406, 1.1406, 1.0426, 1.10615, 0.97552, 0.97552, 0.97552, 0.97552,
         0.97552, 1.21237, 0.97552, 1.00135, 1.00135, 1.00135, 1.00135, 0.91142,
         0.94436, 0.98721, 1.06585, 1.06585, 1.06585, 1.06585, 1.06585, 1.06585,
         0.96705, 0.83055, 0.93503, 0.93503, 0.93503, 0.93503, 1.14236, 1.14236,
         1.14236, 1.14236, 0.93125, 0.97922, 0.94165, 0.94165, 0.94165, 0.94165,
         0.94165, 1.29004, 0.94165, 0.97922, 0.97922, 0.97922, 0.97922, 0.96752,
         0.97042, 0.96752, 0.97363, 1.06585, 0.97363, 1.06585, 0.97363, 1.06585,
         0.87897, 0.83055, 0.87897, 0.83055, 0.87897, 0.83055, 0.87897, 0.83055,
         1.0426, 1.0033, 1.0426, 0.97042, 0.79429, 0.93503, 0.79429, 0.93503,
         0.79429, 0.93503, 0.79429, 0.93503, 0.79429, 0.93503, 0.91149, 0.97042,
         0.91149, 0.97042, 0.91149, 0.97042, 1, 1, 1.05815, 0.97922, 1.05815,
         0.97922, 1.1406, 1.14236, 1.1406, 1.14236, 1.1406, 1.14236, 1.1406,
         1.14236, 1.1406, 1.14236, 0.97441, 1.04302, 0.79631, 1.01582, 1, 1,
         1.01054, 0.83853, 1.14236, 1, 1, 0.83853, 1.09125, 0.83853, 0.90418,
         0.83853, 1.19508, 1.10615, 0.97922, 1, 1, 1.10615, 0.97922, 1.01034,
         1.10466, 0.97922, 0.97552, 0.94165, 0.97552, 0.94165, 0.97552, 0.94165,
         0.91602, 0.91981, 0.88641, 1.0276, 1, 1, 0.88641, 1.0276, 0.80527,
         0.78929, 0.80527, 0.78929, 0.80527, 0.78929, 0.80527, 0.78929, 1, 1,
         0.96083, 1.05403, 0.95923, 1.16862, 1.00135, 0.97922, 1.00135, 0.97922,
         1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922, 1.00135, 0.97922,
         1.06777, 1.02197, 0.91142, 0.96752, 0.91142, 0.99361, 0.97168, 0.99361,
         0.97168, 0.99361, 0.97168, 1.23199, 1.036, 0.97363, 1.06585, 0.94385,
         0.96705, 0.97552, 0.94165, 1, 1, 0.96083, 1.1261, 1.31818, 1.31818,
         1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 1.31818, 0.95161,
         1.27126, 1.00811, 0.83284, 0.77702, 0.99137, 0.95253, 1.0347, 0.86142,
         1.07205, 1.14236, 0.97363, 0.89723, 0.86869, 1.09818, 0.79429, 0.99361,
         1.05815, 0.97552, 1.1406, 0.90128, 1.06662, 1.04396, 1.10615, 0.84918,
         0.97552, 1.04694, 0.94436, 0.98015, 0.96083, 0.91142, 1.00356, 0.9817,
         1.01945, 0.98999, 1.1406, 0.91142, 1.04961, 0.9898, 1.00639, 1.14236,
         1.07514, 1.04961, 0.99607, 1.02897, 1.008, 0.9898, 0.95134, 1.00639,
         1.11121, 1.14236, 1.00518, 0.97981, 1.02186, 1, 1.08578, 0.94165, 0.99314,
         0.98387, 0.93028, 0.93377, 1.35125, 1.07514, 1.10687, 0.93491, 1.04232,
         1.00351, 1.14236, 1.07514, 0.94165, 1.07514, 1.00351, 0.79429, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1.09097, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 0.93503, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.96609, 1, 1, 1, 1, 1,
         1, 1.06777, 1.02197, 1.06777, 1.02197, 1.06777, 1.02197, 0.91142, 0.96752,
         1, 1.21261, 0.89903, 1, 1, 0.75155, 1.04745, 1.04745, 1.04745, 1.04394,
         0.98633, 0.98633, 0.98633, 0.72959, 0.72959, 1.20502, 0.91406, 1.26514,
         1.222, 1.02956, 1.03372, 1.03372, 0.96039, 1.24633, 1, 1.09125, 0.93327,
         1.03336, 1.16541, 1.036, 1, 1, 1, 0.771, 1, 1, 1.15574, 1.15574, 1.15574,
         1.15574, 0.86364, 0.94434, 0.86279, 0.94434, 0.86224, 1, 1, 1.16798, 1,
         0.96085, 0.90068, 1.21237, 1.18416, 1.13904, 0.69825, 0.9716, 2.10339,
         1.29004, 1.29004, 1.21339, 1.29004, 1.29004, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862,
         0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.18775, 1.42603, 1,
         1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296,
         1.34163, 1, 1, 1, 1.13269, 1.13269, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1,
      ];
      var SegoeuiBoldItalicMetrics = { lineHeight: 1.33008, lineGap: 0 };
      var SegoeuiItalicFactors = [
         1.76738, 1, 1, 0.98946, 1.14763, 1.05365, 1.06234, 0.96927, 0.92586,
         1.15373, 1.18414, 0.91349, 0.91349, 1.07403, 1.17308, 0.78383, 1.20088,
         0.78383, 1.42531, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927,
         0.96927, 0.96927, 0.96927, 0.96927, 0.78383, 0.78383, 1.17308, 1.17308,
         1.17308, 0.77349, 0.94565, 0.94729, 0.85944, 0.88506, 0.9858, 0.74817,
         0.80016, 0.88449, 0.98039, 0.95782, 0.69238, 0.89898, 0.83231, 0.98183,
         1.03989, 0.96924, 0.86237, 0.96924, 0.80595, 0.74524, 0.86091, 0.95402,
         0.94143, 0.98448, 0.8858, 0.83089, 0.93285, 1.0949, 1.39016, 1.0949,
         1.45994, 0.74627, 1.04839, 0.97454, 0.97454, 0.87207, 0.97454, 0.87533,
         1.06151, 0.97454, 1.00176, 1.16484, 1.08132, 0.98047, 1.16484, 1.02989,
         1.01054, 0.96225, 0.97454, 0.97454, 1.06598, 0.79004, 1.16344, 1.00351,
         0.94629, 0.9973, 0.91016, 0.96777, 0.9043, 0.91082, 0.92481, 0.91082,
         1.17308, 0.95748, 0.96927, 0.96927, 1, 0.96927, 0.92481, 0.80597, 1.04839,
         1.23393, 1.1781, 0.9245, 1.17308, 1.20808, 0.63218, 0.94261, 1.24822,
         1.09971, 1.09971, 1.04839, 1, 0.85273, 0.78032, 1.04839, 1.09971, 1.22326,
         0.9245, 1.09836, 1.13525, 1.15222, 0.70424, 0.94729, 0.94729, 0.94729,
         0.94729, 0.94729, 0.94729, 0.85498, 0.88506, 0.74817, 0.74817, 0.74817,
         0.74817, 0.95782, 0.95782, 0.95782, 0.95782, 0.9858, 1.03989, 0.96924,
         0.96924, 0.96924, 0.96924, 0.96924, 1.17308, 0.96924, 0.95402, 0.95402,
         0.95402, 0.95402, 0.83089, 0.86237, 0.88409, 0.97454, 0.97454, 0.97454,
         0.97454, 0.97454, 0.97454, 0.92916, 0.87207, 0.87533, 0.87533, 0.87533,
         0.87533, 0.93146, 0.93146, 0.93146, 0.93146, 0.93854, 1.01054, 0.96225,
         0.96225, 0.96225, 0.96225, 0.96225, 1.24822, 0.8761, 1.00351, 1.00351,
         1.00351, 1.00351, 0.96777, 0.97454, 0.96777, 0.94729, 0.97454, 0.94729,
         0.97454, 0.94729, 0.97454, 0.88506, 0.87207, 0.88506, 0.87207, 0.88506,
         0.87207, 0.88506, 0.87207, 0.9858, 0.95391, 0.9858, 0.97454, 0.74817,
         0.87533, 0.74817, 0.87533, 0.74817, 0.87533, 0.74817, 0.87533, 0.74817,
         0.87533, 0.88449, 0.97454, 0.88449, 0.97454, 0.88449, 0.97454, 1, 1,
         0.98039, 1.00176, 0.98039, 1.00176, 0.95782, 0.93146, 0.95782, 0.93146,
         0.95782, 0.93146, 0.95782, 1.16484, 0.95782, 0.93146, 0.84421, 1.12761,
         0.69238, 1.08132, 1, 1, 0.98047, 0.83231, 1.16484, 1, 1, 0.84723, 1.04861,
         0.84723, 0.78755, 0.83231, 1.23736, 1.03989, 1.01054, 1, 1, 1.03989,
         1.01054, 0.9857, 1.03849, 1.01054, 0.96924, 0.96225, 0.96924, 0.96225,
         0.96924, 0.96225, 0.92383, 0.90171, 0.80595, 1.06598, 1, 1, 0.80595,
         1.06598, 0.74524, 0.79004, 0.74524, 0.79004, 0.74524, 0.79004, 0.74524,
         0.79004, 1, 1, 0.86091, 1.02759, 0.85771, 1.16344, 0.95402, 1.00351,
         0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351, 0.95402, 1.00351,
         0.95402, 1.00351, 0.98448, 0.9973, 0.83089, 0.96777, 0.83089, 0.93285,
         0.9043, 0.93285, 0.9043, 0.93285, 0.9043, 1.31868, 0.96927, 0.94729,
         0.97454, 0.85498, 0.92916, 0.96924, 0.8761, 1, 1, 0.86091, 1.16344,
         1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839, 1.04839,
         1.04839, 0.81965, 0.81965, 0.94729, 0.78032, 0.71022, 0.90883, 0.84171,
         0.99877, 0.77596, 1.05734, 1.2, 0.94729, 0.85944, 0.82791, 0.9607,
         0.74817, 0.93285, 0.98039, 0.96924, 0.95782, 0.89898, 0.98316, 0.98183,
         1.03989, 0.78614, 0.96924, 0.97642, 0.86237, 0.86075, 0.86091, 0.83089,
         0.90082, 0.8858, 0.97296, 1.01284, 0.95782, 0.83089, 1.0976, 1.04,
         1.03342, 1.2, 1.0675, 1.0976, 0.98205, 1.03809, 1.05097, 1.04, 0.95364,
         1.03342, 1.05401, 1.2, 1.02148, 1.0119, 1.04724, 1.0127, 1.02732, 0.96225,
         0.8965, 0.97783, 0.93574, 0.94818, 1.30679, 1.0675, 1.11826, 0.99821,
         1.0557, 1.0326, 1.2, 1.0675, 0.96225, 1.0675, 1.0326, 0.74817, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1.03754, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 0.87533, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.98705, 1, 1, 1, 1, 1,
         1, 0.98448, 0.9973, 0.98448, 0.9973, 0.98448, 0.9973, 0.83089, 0.96777, 1,
         1.20088, 0.89903, 1, 1, 0.75155, 0.94945, 0.94945, 0.94945, 0.94945,
         1.12317, 1.12317, 1.12317, 0.67603, 0.67603, 1.15621, 0.73584, 1.21191,
         1.22135, 1.06483, 0.94868, 0.94868, 0.95996, 1.24633, 1, 1.07497, 0.87709,
         0.96927, 1.01473, 0.96927, 1, 1, 1, 0.77295, 1, 1, 1.09836, 1.09836,
         1.09836, 1.01522, 0.86321, 0.94434, 0.8649, 0.94434, 0.86182, 1, 1, 1.083,
         1, 0.91578, 0.86438, 1.17308, 1.18416, 1.14589, 0.69825, 0.97622, 1.96791,
         1.24822, 1.24822, 1.17308, 1.24822, 1.24822, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862,
         0.99862, 1, 0.87025, 0.87025, 0.87025, 0.87025, 1.17984, 1.42603, 1,
         1.42603, 1.42603, 0.99862, 1, 1, 1, 1, 1, 1.2886, 1.04315, 1.15296,
         1.34163, 1, 1, 1, 1.10742, 1.10742, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1,
      ];
      var SegoeuiItalicMetrics = { lineHeight: 1.33008, lineGap: 0 };
      var SegoeuiRegularFactors = [
         1.76738, 1, 1, 0.98594, 1.02285, 1.10454, 1.06234, 0.96927, 0.92037,
         1.19985, 1.2046, 0.90616, 0.90616, 1.07152, 1.1714, 0.78032, 1.20088,
         0.78032, 1.40246, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927, 0.96927,
         0.96927, 0.96927, 0.96927, 0.96927, 0.78032, 0.78032, 1.1714, 1.1714,
         1.1714, 0.80597, 0.94084, 0.96706, 0.85944, 0.85734, 0.97093, 0.75842,
         0.79936, 0.88198, 0.9831, 0.95782, 0.71387, 0.86969, 0.84636, 1.07796,
         1.03584, 0.96924, 0.83968, 0.96924, 0.82826, 0.79649, 0.85771, 0.95132,
         0.93119, 0.98965, 0.88433, 0.8287, 0.93365, 1.08612, 1.3638, 1.08612,
         1.45786, 0.74627, 0.80499, 0.91484, 1.05707, 0.92383, 1.05882, 0.9403,
         1.12654, 1.05882, 1.01756, 1.09011, 1.09011, 0.99414, 1.09011, 1.034,
         1.01756, 1.05356, 1.05707, 1.05882, 1.04399, 0.84863, 1.21968, 1.01756,
         0.95801, 1.00068, 0.91797, 0.96777, 0.9043, 0.90351, 0.92105, 0.90351,
         1.1714, 0.85337, 0.96927, 0.96927, 0.99912, 0.96927, 0.92105, 0.80597,
         1.2434, 1.20808, 1.05937, 0.90957, 1.1714, 1.20808, 0.75155, 0.94261,
         1.24644, 1.09971, 1.09971, 0.84751, 1, 0.85273, 0.78032, 0.61584, 1.05425,
         1.17914, 0.90957, 1.08665, 1.11593, 1.14169, 0.73381, 0.96706, 0.96706,
         0.96706, 0.96706, 0.96706, 0.96706, 0.86035, 0.85734, 0.75842, 0.75842,
         0.75842, 0.75842, 0.95782, 0.95782, 0.95782, 0.95782, 0.97093, 1.03584,
         0.96924, 0.96924, 0.96924, 0.96924, 0.96924, 1.1714, 0.96924, 0.95132,
         0.95132, 0.95132, 0.95132, 0.8287, 0.83968, 0.89049, 0.91484, 0.91484,
         0.91484, 0.91484, 0.91484, 0.91484, 0.93575, 0.92383, 0.9403, 0.9403,
         0.9403, 0.9403, 0.8717, 0.8717, 0.8717, 0.8717, 1.00527, 1.01756, 1.05356,
         1.05356, 1.05356, 1.05356, 1.05356, 1.24644, 0.95923, 1.01756, 1.01756,
         1.01756, 1.01756, 0.96777, 1.05707, 0.96777, 0.96706, 0.91484, 0.96706,
         0.91484, 0.96706, 0.91484, 0.85734, 0.92383, 0.85734, 0.92383, 0.85734,
         0.92383, 0.85734, 0.92383, 0.97093, 1.0969, 0.97093, 1.05882, 0.75842,
         0.9403, 0.75842, 0.9403, 0.75842, 0.9403, 0.75842, 0.9403, 0.75842,
         0.9403, 0.88198, 1.05882, 0.88198, 1.05882, 0.88198, 1.05882, 1, 1,
         0.9831, 1.01756, 0.9831, 1.01756, 0.95782, 0.8717, 0.95782, 0.8717,
         0.95782, 0.8717, 0.95782, 1.09011, 0.95782, 0.8717, 0.84784, 1.11551,
         0.71387, 1.09011, 1, 1, 0.99414, 0.84636, 1.09011, 1, 1, 0.84636, 1.0536,
         0.84636, 0.94298, 0.84636, 1.23297, 1.03584, 1.01756, 1, 1, 1.03584,
         1.01756, 1.00323, 1.03444, 1.01756, 0.96924, 1.05356, 0.96924, 1.05356,
         0.96924, 1.05356, 0.93066, 0.98293, 0.82826, 1.04399, 1, 1, 0.82826,
         1.04399, 0.79649, 0.84863, 0.79649, 0.84863, 0.79649, 0.84863, 0.79649,
         0.84863, 1, 1, 0.85771, 1.17318, 0.85771, 1.21968, 0.95132, 1.01756,
         0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756, 0.95132, 1.01756,
         0.95132, 1.01756, 0.98965, 1.00068, 0.8287, 0.96777, 0.8287, 0.93365,
         0.9043, 0.93365, 0.9043, 0.93365, 0.9043, 1.08571, 0.96927, 0.96706,
         0.91484, 0.86035, 0.93575, 0.96924, 0.95923, 1, 1, 0.85771, 1.21968,
         1.11437, 1.11437, 0.93109, 0.91202, 0.60411, 0.84164, 0.55572, 1.01173,
         0.97361, 0.81818, 0.81818, 0.96635, 0.78032, 0.72727, 0.92366, 0.98601,
         1.03405, 0.77968, 1.09799, 1.2, 0.96706, 0.85944, 0.85638, 0.96491,
         0.75842, 0.93365, 0.9831, 0.96924, 0.95782, 0.86969, 0.94152, 1.07796,
         1.03584, 0.78437, 0.96924, 0.98715, 0.83968, 0.83491, 0.85771, 0.8287,
         0.94492, 0.88433, 0.9287, 1.0098, 0.95782, 0.8287, 1.0625, 0.98248,
         1.03424, 1.2, 1.01071, 1.0625, 0.95246, 1.03809, 1.04912, 0.98248,
         1.00221, 1.03424, 1.05443, 1.2, 1.04785, 0.99609, 1.00169, 1.05176,
         0.99346, 1.05356, 0.9087, 1.03004, 0.95542, 0.93117, 1.23362, 1.01071,
         1.07831, 1.02512, 1.05205, 1.03502, 1.2, 1.01071, 1.05356, 1.01071,
         1.03502, 0.75842, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.03719, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.9403, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1.04021, 1, 1, 1, 1, 1, 1, 0.98965, 1.00068, 0.98965, 1.00068,
         0.98965, 1.00068, 0.8287, 0.96777, 1, 1.20088, 0.89903, 1, 1, 0.75155,
         1.03077, 1.03077, 1.03077, 1.03077, 1.13196, 1.13196, 1.13196, 0.67428,
         0.67428, 1.16039, 0.73291, 1.20996, 1.22135, 1.06483, 0.94868, 0.94868,
         0.95996, 1.24633, 1, 1.07497, 0.87796, 0.96927, 1.01518, 0.96927, 1, 1, 1,
         0.77295, 1, 1, 1.10539, 1.10539, 1.11358, 1.06967, 0.86279, 0.94434,
         0.86279, 0.94434, 0.86182, 1, 1, 1.083, 1, 0.91578, 0.86507, 1.1714,
         1.18416, 1.14589, 0.69825, 0.97622, 1.9697, 1.24822, 1.24822, 1.17238,
         1.24822, 1.24822, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1.42603, 1, 0.99862, 0.99862, 1, 0.87025, 0.87025,
         0.87025, 0.87025, 1.18083, 1.42603, 1, 1.42603, 1.42603, 0.99862, 1, 1, 1,
         1, 1, 1.2886, 1.04315, 1.15296, 1.34163, 1, 1, 1, 1.10938, 1.10938, 1, 1,
         1, 1.05425, 1.09971, 1.09971, 1.09971, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
      ];
      var SegoeuiRegularMetrics = { lineHeight: 1.33008, lineGap: 0 }; // CONCATENATED MODULE: ./src/core/xfa_fonts.js
      var getXFAFontMap = getLookupTableFactory(function (t) {
         t["MyriadPro-Regular"] = t["PdfJS-Fallback-Regular"] = {
            name: "LiberationSans-Regular",
            factors: MyriadProRegularFactors,
            baseWidths: LiberationSansRegularWidths,
            baseMapping: LiberationSansRegularMapping,
            metrics: MyriadProRegularMetrics,
         };
         t["MyriadPro-Bold"] = t["PdfJS-Fallback-Bold"] = {
            name: "LiberationSans-Bold",
            factors: MyriadProBoldFactors,
            baseWidths: LiberationSansBoldWidths,
            baseMapping: LiberationSansBoldMapping,
            metrics: MyriadProBoldMetrics,
         };
         t["MyriadPro-It"] =
            t["MyriadPro-Italic"] =
               t["PdfJS-Fallback-Italic"] =
                  {
                     name: "LiberationSans-Italic",
                     factors: MyriadProItalicFactors,
                     baseWidths: LiberationSansItalicWidths,
                     baseMapping: LiberationSansItalicMapping,
                     metrics: MyriadProItalicMetrics,
                  };
         t["MyriadPro-BoldIt"] =
            t["MyriadPro-BoldItalic"] =
               t["PdfJS-Fallback-BoldItalic"] =
                  {
                     name: "LiberationSans-BoldItalic",
                     factors: MyriadProBoldItalicFactors,
                     baseWidths: LiberationSansBoldItalicWidths,
                     baseMapping: LiberationSansBoldItalicMapping,
                     metrics: MyriadProBoldItalicMetrics,
                  };
         t.ArialMT =
            t.Arial =
               t["Arial-Regular"] =
                  {
                     name: "LiberationSans-Regular",
                     baseWidths: LiberationSansRegularWidths,
                     baseMapping: LiberationSansRegularMapping,
                  };
         t["Arial-BoldMT"] = t["Arial-Bold"] = {
            name: "LiberationSans-Bold",
            baseWidths: LiberationSansBoldWidths,
            baseMapping: LiberationSansBoldMapping,
         };
         t["Arial-ItalicMT"] = t["Arial-Italic"] = {
            name: "LiberationSans-Italic",
            baseWidths: LiberationSansItalicWidths,
            baseMapping: LiberationSansItalicMapping,
         };
         t["Arial-BoldItalicMT"] = t["Arial-BoldItalic"] = {
            name: "LiberationSans-BoldItalic",
            baseWidths: LiberationSansBoldItalicWidths,
            baseMapping: LiberationSansBoldItalicMapping,
         };
         t["Calibri-Regular"] = {
            name: "LiberationSans-Regular",
            factors: CalibriRegularFactors,
            baseWidths: LiberationSansRegularWidths,
            baseMapping: LiberationSansRegularMapping,
            metrics: CalibriRegularMetrics,
         };
         t["Calibri-Bold"] = {
            name: "LiberationSans-Bold",
            factors: CalibriBoldFactors,
            baseWidths: LiberationSansBoldWidths,
            baseMapping: LiberationSansBoldMapping,
            metrics: CalibriBoldMetrics,
         };
         t["Calibri-Italic"] = {
            name: "LiberationSans-Italic",
            factors: CalibriItalicFactors,
            baseWidths: LiberationSansItalicWidths,
            baseMapping: LiberationSansItalicMapping,
            metrics: CalibriItalicMetrics,
         };
         t["Calibri-BoldItalic"] = {
            name: "LiberationSans-BoldItalic",
            factors: CalibriBoldItalicFactors,
            baseWidths: LiberationSansBoldItalicWidths,
            baseMapping: LiberationSansBoldItalicMapping,
            metrics: CalibriBoldItalicMetrics,
         };
         t["Segoeui-Regular"] = {
            name: "LiberationSans-Regular",
            factors: SegoeuiRegularFactors,
            baseWidths: LiberationSansRegularWidths,
            baseMapping: LiberationSansRegularMapping,
            metrics: SegoeuiRegularMetrics,
         };
         t["Segoeui-Bold"] = {
            name: "LiberationSans-Bold",
            factors: SegoeuiBoldFactors,
            baseWidths: LiberationSansBoldWidths,
            baseMapping: LiberationSansBoldMapping,
            metrics: SegoeuiBoldMetrics,
         };
         t["Segoeui-Italic"] = {
            name: "LiberationSans-Italic",
            factors: SegoeuiItalicFactors,
            baseWidths: LiberationSansItalicWidths,
            baseMapping: LiberationSansItalicMapping,
            metrics: SegoeuiItalicMetrics,
         };
         t["Segoeui-BoldItalic"] = {
            name: "LiberationSans-BoldItalic",
            factors: SegoeuiBoldItalicFactors,
            baseWidths: LiberationSansBoldItalicWidths,
            baseMapping: LiberationSansBoldItalicMapping,
            metrics: SegoeuiBoldItalicMetrics,
         };
         t["Helvetica-Regular"] = t.Helvetica = {
            name: "LiberationSans-Regular",
            factors: HelveticaRegularFactors,
            baseWidths: LiberationSansRegularWidths,
            baseMapping: LiberationSansRegularMapping,
            metrics: HelveticaRegularMetrics,
         };
         t["Helvetica-Bold"] = {
            name: "LiberationSans-Bold",
            factors: HelveticaBoldFactors,
            baseWidths: LiberationSansBoldWidths,
            baseMapping: LiberationSansBoldMapping,
            metrics: HelveticaBoldMetrics,
         };
         t["Helvetica-Italic"] = {
            name: "LiberationSans-Italic",
            factors: HelveticaItalicFactors,
            baseWidths: LiberationSansItalicWidths,
            baseMapping: LiberationSansItalicMapping,
            metrics: HelveticaItalicMetrics,
         };
         t["Helvetica-BoldItalic"] = {
            name: "LiberationSans-BoldItalic",
            factors: HelveticaBoldItalicFactors,
            baseWidths: LiberationSansBoldItalicWidths,
            baseMapping: LiberationSansBoldItalicMapping,
            metrics: HelveticaBoldItalicMetrics,
         };
      });
      function getXfaFontName(name) {
         var fontName = normalizeFontName(name);
         var fontMap = getXFAFontMap();
         return fontMap[fontName];
      }
      function getXfaFontWidths(name) {
         var info = getXfaFontName(name);
         if (!info) {
            return null;
         }
         var baseWidths = info.baseWidths,
            baseMapping = info.baseMapping,
            factors = info.factors;
         var rescaledBaseWidths = !factors
            ? baseWidths
            : baseWidths.map(function (w, i) {
               return w * factors[i];
            });
         var currentCode = -2;
         var currentArray;
         var newWidths = [];
         var _iterator50 = _createForOfIteratorHelper(
               baseMapping
                  .map(function (charUnicode, index) {
                     return [charUnicode, index];
                  })
                  .sort(function (_ref31, _ref32) {
                     var _ref33 = _slicedToArray(_ref31, 1),
                        unicode1 = _ref33[0];
                     var _ref34 = _slicedToArray(_ref32, 1),
                        unicode2 = _ref34[0];
                     return unicode1 - unicode2;
                  }),
            ),
            _step50;
         try {
            for (_iterator50.s(); !(_step50 = _iterator50.n()).done; ) {
               var _step50$value = _slicedToArray(_step50.value, 2),
                  unicode = _step50$value[0],
                  glyphIndex = _step50$value[1];
               if (unicode === -1) {
                  continue;
               }
               if (unicode === currentCode + 1) {
                  currentArray.push(rescaledBaseWidths[glyphIndex]);
                  currentCode += 1;
               } else {
                  currentCode = unicode;
                  currentArray = [rescaledBaseWidths[glyphIndex]];
                  newWidths.push(unicode, currentArray);
               }
            }
         } catch (err) {
            _iterator50.e(err);
         } finally {
            _iterator50.f();
         }
         return newWidths;
      }
      function getXfaFontDict(name) {
         var widths = getXfaFontWidths(name);
         var dict = new Dict(null);
         dict.set("BaseFont", Name.get(name));
         dict.set("Type", Name.get("Font"));
         dict.set("Subtype", Name.get("CIDFontType2"));
         dict.set("Encoding", Name.get("Identity-H"));
         dict.set("CIDToGIDMap", Name.get("Identity"));
         dict.set("W", widths);
         dict.set("FirstChar", widths[0]);
         dict.set("LastChar", widths.at(-2) + widths.at(-1).length - 1);
         var descriptor = new Dict(null);
         dict.set("FontDescriptor", descriptor);
         var systemInfo = new Dict(null);
         systemInfo.set("Ordering", "Identity");
         systemInfo.set("Registry", "Adobe");
         systemInfo.set("Supplement", 0);
         dict.set("CIDSystemInfo", systemInfo);
         return dict;
      } // CONCATENATED MODULE: ./src/core/ps_parser.js
      var PostScriptParser = /*#__PURE__*/ (function () {
         function PostScriptParser(lexer) {
            _classCallCheck(this, PostScriptParser);
            this.lexer = lexer;
            this.operators = [];
            this.token = null;
            this.prev = null;
         }
         return _createClass(PostScriptParser, [
            {
               key: "nextToken",
               value: function nextToken() {
                  this.prev = this.token;
                  this.token = this.lexer.getToken();
               },
            },
            {
               key: "accept",
               value: function accept(type) {
                  if (this.token.type === type) {
                     this.nextToken();
                     return true;
                  }
                  return false;
               },
            },
            {
               key: "expect",
               value: function expect(type) {
                  if (this.accept(type)) {
                     return true;
                  }
                  throw new FormatError(
                     "Unexpected symbol: found "
                        .concat(this.token.type, " expected ")
                        .concat(type, "."),
                  );
               },
            },
            {
               key: "parse",
               value: function parse() {
                  this.nextToken();
                  this.expect(PostScriptTokenTypes.LBRACE);
                  this.parseBlock();
                  this.expect(PostScriptTokenTypes.RBRACE);
                  return this.operators;
               },
            },
            {
               key: "parseBlock",
               value: function parseBlock() {
                  while (true) {
                     if (this.accept(PostScriptTokenTypes.NUMBER)) {
                        this.operators.push(this.prev.value);
                     } else if (this.accept(PostScriptTokenTypes.OPERATOR)) {
                        this.operators.push(this.prev.value);
                     } else if (this.accept(PostScriptTokenTypes.LBRACE)) {
                        this.parseCondition();
                     } else {
                        return;
                     }
                  }
               },
            },
            {
               key: "parseCondition",
               value: function parseCondition() {
                  var conditionLocation = this.operators.length;
                  this.operators.push(null, null);
                  this.parseBlock();
                  this.expect(PostScriptTokenTypes.RBRACE);
                  if (this.accept(PostScriptTokenTypes.IF)) {
                     this.operators[conditionLocation] = this.operators.length;
                     this.operators[conditionLocation + 1] = "jz";
                  } else if (this.accept(PostScriptTokenTypes.LBRACE)) {
                     var jumpLocation = this.operators.length;
                     this.operators.push(null, null);
                     var endOfTrue = this.operators.length;
                     this.parseBlock();
                     this.expect(PostScriptTokenTypes.RBRACE);
                     this.expect(PostScriptTokenTypes.IFELSE);
                     this.operators[jumpLocation] = this.operators.length;
                     this.operators[jumpLocation + 1] = "j";
                     this.operators[conditionLocation] = endOfTrue;
                     this.operators[conditionLocation + 1] = "jz";
                  } else {
                     throw new FormatError("PS Function: error parsing conditional.");
                  }
               },
            },
         ]);
      })();
      var PostScriptTokenTypes = {
         LBRACE: 0,
         RBRACE: 1,
         NUMBER: 2,
         OPERATOR: 3,
         IF: 4,
         IFELSE: 5,
      };
      var PostScriptToken = /*#__PURE__*/ (function () {
         function PostScriptToken(type, value) {
            _classCallCheck(this, PostScriptToken);
            this.type = type;
            this.value = value;
         }
         return _createClass(PostScriptToken, null, [
            {
               key: "opCache",
               get: function get() {
                  return shadow(this, "opCache", Object.create(null));
               },
            },
            {
               key: "getOperator",
               value: function getOperator(op) {
                  var _PostScriptToken$opCa;
                  return (
                     (_PostScriptToken$opCa = PostScriptToken.opCache)[op] ||
                     (_PostScriptToken$opCa[op] = new PostScriptToken(
                        PostScriptTokenTypes.OPERATOR,
                        op,
                     ))
                  );
               },
            },
            {
               key: "LBRACE",
               get: function get() {
                  return shadow(
                     this,
                     "LBRACE",
                     new PostScriptToken(PostScriptTokenTypes.LBRACE, "{"),
                  );
               },
            },
            {
               key: "RBRACE",
               get: function get() {
                  return shadow(
                     this,
                     "RBRACE",
                     new PostScriptToken(PostScriptTokenTypes.RBRACE, "}"),
                  );
               },
            },
            {
               key: "IF",
               get: function get() {
                  return shadow(
                     this,
                     "IF",
                     new PostScriptToken(PostScriptTokenTypes.IF, "IF"),
                  );
               },
            },
            {
               key: "IFELSE",
               get: function get() {
                  return shadow(
                     this,
                     "IFELSE",
                     new PostScriptToken(PostScriptTokenTypes.IFELSE, "IFELSE"),
                  );
               },
            },
         ]);
      })();
      var PostScriptLexer = /*#__PURE__*/ (function () {
         function PostScriptLexer(stream) {
            _classCallCheck(this, PostScriptLexer);
            this.stream = stream;
            this.nextChar();
            this.strBuf = [];
         }
         return _createClass(PostScriptLexer, [
            {
               key: "nextChar",
               value: function nextChar() {
                  return (this.currentChar = this.stream.getByte());
               },
            },
            {
               key: "getToken",
               value: function getToken() {
                  var comment = false;
                  var ch = this.currentChar;
                  while (true) {
                     if (ch < 0) {
                        return EOF;
                     }
                     if (comment) {
                        if (ch === 0x0a || ch === 0x0d) {
                           comment = false;
                        }
                     } else if (ch === 0x25) {
                        comment = true;
                     } else if (!isWhiteSpace(ch)) {
                        break;
                     }
                     ch = this.nextChar();
                  }
                  switch (ch | 0) {
                     case 0x30:
                     case 0x31:
                     case 0x32:
                     case 0x33:
                     case 0x34:
                     case 0x35:
                     case 0x36:
                     case 0x37:
                     case 0x38:
                     case 0x39:
                     case 0x2b:
                     case 0x2d:
                     case 0x2e:
                        return new PostScriptToken(
                           PostScriptTokenTypes.NUMBER,
                           this.getNumber(),
                        );
                     case 0x7b:
                        this.nextChar();
                        return PostScriptToken.LBRACE;
                     case 0x7d:
                        this.nextChar();
                        return PostScriptToken.RBRACE;
                  }
                  var strBuf = this.strBuf;
                  strBuf.length = 0;
                  strBuf[0] = String.fromCharCode(ch);
                  while (
                     (ch = this.nextChar()) >= 0 &&
                     ((ch >= 0x41 && ch <= 0x5a) || (ch >= 0x61 && ch <= 0x7a))
                     ) {
                     strBuf.push(String.fromCharCode(ch));
                  }
                  var str = strBuf.join("");
                  switch (str.toLowerCase()) {
                     case "if":
                        return PostScriptToken.IF;
                     case "ifelse":
                        return PostScriptToken.IFELSE;
                     default:
                        return PostScriptToken.getOperator(str);
                  }
               },
            },
            {
               key: "getNumber",
               value: function getNumber() {
                  var ch = this.currentChar;
                  var strBuf = this.strBuf;
                  strBuf.length = 0;
                  strBuf[0] = String.fromCharCode(ch);
                  while ((ch = this.nextChar()) >= 0) {
                     if ((ch >= 0x30 && ch <= 0x39) || ch === 0x2d || ch === 0x2e) {
                        strBuf.push(String.fromCharCode(ch));
                     } else {
                        break;
                     }
                  }
                  var value = parseFloat(strBuf.join(""));
                  if (isNaN(value)) {
                     throw new FormatError(
                        "Invalid floating point number: ".concat(value),
                     );
                  }
                  return value;
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/image_utils.js
      var BaseLocalCache = /*#__PURE__*/ (function () {
         function BaseLocalCache(options) {
            _classCallCheck(this, BaseLocalCache);
            if (this.constructor === BaseLocalCache) {
               unreachable("Cannot initialize BaseLocalCache.");
            }
            this._onlyRefs =
               (options === null || options === void 0
                  ? void 0
                  : options.onlyRefs) === true;
            if (!this._onlyRefs) {
               this._nameRefMap = new Map();
               this._imageMap = new Map();
            }
            this._imageCache = new RefSetCache();
         }
         return _createClass(BaseLocalCache, [
            {
               key: "getByName",
               value: function getByName(name) {
                  if (this._onlyRefs) {
                     unreachable("Should not call `getByName` method.");
                  }
                  var ref = this._nameRefMap.get(name);
                  if (ref) {
                     return this.getByRef(ref);
                  }
                  return this._imageMap.get(name) || null;
               },
            },
            {
               key: "getByRef",
               value: function getByRef(ref) {
                  return this._imageCache.get(ref) || null;
               },
            },
            {
               key: "set",
               value: function set(name, ref, data) {
                  unreachable("Abstract method `set` called.");
               },
            },
         ]);
      })();
      var LocalImageCache = /*#__PURE__*/ (function (_BaseLocalCache) {
         function LocalImageCache() {
            _classCallCheck(this, LocalImageCache);
            return _callSuper(this, LocalImageCache, arguments);
         }
         _inherits(LocalImageCache, _BaseLocalCache);
         return _createClass(LocalImageCache, [
            {
               key: "set",
               value: function set(name) {
                  var ref =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : null;
                  var data = arguments.length > 2 ? arguments[2] : undefined;
                  if (typeof name !== "string") {
                     throw new Error(
                        'LocalImageCache.set - expected "name" argument.',
                     );
                  }
                  if (ref) {
                     if (this._imageCache.has(ref)) {
                        return;
                     }
                     this._nameRefMap.set(name, ref);
                     this._imageCache.put(ref, data);
                     return;
                  }
                  if (this._imageMap.has(name)) {
                     return;
                  }
                  this._imageMap.set(name, data);
               },
            },
         ]);
      })(BaseLocalCache);
      var LocalColorSpaceCache = /*#__PURE__*/ (function (_BaseLocalCache2) {
         function LocalColorSpaceCache() {
            _classCallCheck(this, LocalColorSpaceCache);
            return _callSuper(this, LocalColorSpaceCache, arguments);
         }
         _inherits(LocalColorSpaceCache, _BaseLocalCache2);
         return _createClass(LocalColorSpaceCache, [
            {
               key: "set",
               value: function set() {
                  var name =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : null;
                  var ref =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : null;
                  var data = arguments.length > 2 ? arguments[2] : undefined;
                  if (typeof name !== "string" && !ref) {
                     throw new Error(
                        'LocalColorSpaceCache.set - expected "name" and/or "ref" argument.',
                     );
                  }
                  if (ref) {
                     if (this._imageCache.has(ref)) {
                        return;
                     }
                     if (name !== null) {
                        this._nameRefMap.set(name, ref);
                     }
                     this._imageCache.put(ref, data);
                     return;
                  }
                  if (this._imageMap.has(name)) {
                     return;
                  }
                  this._imageMap.set(name, data);
               },
            },
         ]);
      })(BaseLocalCache);
      var LocalFunctionCache = /*#__PURE__*/ (function (_BaseLocalCache3) {
         function LocalFunctionCache(options) {
            _classCallCheck(this, LocalFunctionCache);
            return _callSuper(this, LocalFunctionCache, [{ onlyRefs: true }]);
         }
         _inherits(LocalFunctionCache, _BaseLocalCache3);
         return _createClass(LocalFunctionCache, [
            {
               key: "set",
               value: function set() {
                  var name =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : null;
                  var ref = arguments.length > 1 ? arguments[1] : undefined;
                  var data = arguments.length > 2 ? arguments[2] : undefined;
                  if (!ref) {
                     throw new Error(
                        'LocalFunctionCache.set - expected "ref" argument.',
                     );
                  }
                  if (this._imageCache.has(ref)) {
                     return;
                  }
                  this._imageCache.put(ref, data);
               },
            },
         ]);
      })(BaseLocalCache);
      var LocalGStateCache = /*#__PURE__*/ (function (_BaseLocalCache4) {
         function LocalGStateCache() {
            _classCallCheck(this, LocalGStateCache);
            return _callSuper(this, LocalGStateCache, arguments);
         }
         _inherits(LocalGStateCache, _BaseLocalCache4);
         return _createClass(LocalGStateCache, [
            {
               key: "set",
               value: function set(name) {
                  var ref =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : null;
                  var data = arguments.length > 2 ? arguments[2] : undefined;
                  if (typeof name !== "string") {
                     throw new Error(
                        'LocalGStateCache.set - expected "name" argument.',
                     );
                  }
                  if (ref) {
                     if (this._imageCache.has(ref)) {
                        return;
                     }
                     this._nameRefMap.set(name, ref);
                     this._imageCache.put(ref, data);
                     return;
                  }
                  if (this._imageMap.has(name)) {
                     return;
                  }
                  this._imageMap.set(name, data);
               },
            },
         ]);
      })(BaseLocalCache);
      var LocalTilingPatternCache = /*#__PURE__*/ (function (_BaseLocalCache5) {
         function LocalTilingPatternCache(options) {
            _classCallCheck(this, LocalTilingPatternCache);
            return _callSuper(this, LocalTilingPatternCache, [{ onlyRefs: true }]);
         }
         _inherits(LocalTilingPatternCache, _BaseLocalCache5);
         return _createClass(LocalTilingPatternCache, [
            {
               key: "set",
               value: function set() {
                  var name =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : null;
                  var ref = arguments.length > 1 ? arguments[1] : undefined;
                  var data = arguments.length > 2 ? arguments[2] : undefined;
                  if (!ref) {
                     throw new Error(
                        'LocalTilingPatternCache.set - expected "ref" argument.',
                     );
                  }
                  if (this._imageCache.has(ref)) {
                     return;
                  }
                  this._imageCache.put(ref, data);
               },
            },
         ]);
      })(BaseLocalCache);
      var RegionalImageCache = /*#__PURE__*/ (function (_BaseLocalCache6) {
         function RegionalImageCache(options) {
            _classCallCheck(this, RegionalImageCache);
            return _callSuper(this, RegionalImageCache, [{ onlyRefs: true }]);
         }
         _inherits(RegionalImageCache, _BaseLocalCache6);
         return _createClass(RegionalImageCache, [
            {
               key: "set",
               value: function set() {
                  var name =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : null;
                  var ref = arguments.length > 1 ? arguments[1] : undefined;
                  var data = arguments.length > 2 ? arguments[2] : undefined;
                  if (!ref) {
                     throw new Error(
                        'RegionalImageCache.set - expected "ref" argument.',
                     );
                  }
                  if (this._imageCache.has(ref)) {
                     return;
                  }
                  this._imageCache.put(ref, data);
               },
            },
         ]);
      })(BaseLocalCache);
      var GlobalImageCache = /*#__PURE__*/ (function () {
         function GlobalImageCache() {
            _classCallCheck(this, GlobalImageCache);
            this._refCache = new RefSetCache();
            this._imageCache = new RefSetCache();
         }
         return _createClass(GlobalImageCache, [
            {
               key: "_byteSize",
               get: function get() {
                  var byteSize = 0;
                  var _iterator51 = _createForOfIteratorHelper(this._imageCache),
                     _step51;
                  try {
                     for (_iterator51.s(); !(_step51 = _iterator51.n()).done; ) {
                        var imageData = _step51.value;
                        byteSize += imageData.byteSize;
                     }
                  } catch (err) {
                     _iterator51.e(err);
                  } finally {
                     _iterator51.f();
                  }
                  return byteSize;
               },
            },
            {
               key: "_cacheLimitReached",
               get: function get() {
                  if (this._imageCache.size < GlobalImageCache.MIN_IMAGES_TO_CACHE) {
                     return false;
                  }
                  if (this._byteSize < GlobalImageCache.MAX_BYTE_SIZE) {
                     return false;
                  }
                  return true;
               },
            },
            {
               key: "shouldCache",
               value: function shouldCache(ref, pageIndex) {
                  var pageIndexSet = this._refCache.get(ref);
                  if (!pageIndexSet) {
                     pageIndexSet = new Set();
                     this._refCache.put(ref, pageIndexSet);
                  }
                  pageIndexSet.add(pageIndex);
                  if (pageIndexSet.size < GlobalImageCache.NUM_PAGES_THRESHOLD) {
                     return false;
                  }
                  if (!this._imageCache.has(ref) && this._cacheLimitReached) {
                     return false;
                  }
                  return true;
               },
            },
            {
               key: "addByteSize",
               value: function addByteSize(ref, byteSize) {
                  var imageData = this._imageCache.get(ref);
                  if (!imageData) {
                     return;
                  }
                  if (imageData.byteSize) {
                     return;
                  }
                  imageData.byteSize = byteSize;
               },
            },
            {
               key: "getData",
               value: function getData(ref, pageIndex) {
                  var pageIndexSet = this._refCache.get(ref);
                  if (!pageIndexSet) {
                     return null;
                  }
                  if (pageIndexSet.size < GlobalImageCache.NUM_PAGES_THRESHOLD) {
                     return null;
                  }
                  var imageData = this._imageCache.get(ref);
                  if (!imageData) {
                     return null;
                  }
                  pageIndexSet.add(pageIndex);
                  return imageData;
               },
            },
            {
               key: "setData",
               value: function setData(ref, data) {
                  if (!this._refCache.has(ref)) {
                     throw new Error(
                        'GlobalImageCache.setData - expected "shouldCache" to have been called.',
                     );
                  }
                  if (this._imageCache.has(ref)) {
                     return;
                  }
                  if (this._cacheLimitReached) {
                     warn("GlobalImageCache.setData - cache limit reached.");
                     return;
                  }
                  this._imageCache.put(ref, data);
               },
            },
            {
               key: "clear",
               value: function clear() {
                  var onlyData =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : false;
                  if (!onlyData) {
                     this._refCache.clear();
                  }
                  this._imageCache.clear();
               },
            },
         ]);
      })();
      _defineProperty(GlobalImageCache, "NUM_PAGES_THRESHOLD", 2);
      _defineProperty(GlobalImageCache, "MIN_IMAGES_TO_CACHE", 10);
      _defineProperty(
         GlobalImageCache,
         "MAX_BYTE_SIZE",
         5 * MAX_IMAGE_SIZE_TO_CACHE,
      ); // CONCATENATED MODULE: ./src/core/function.js
      var PDFFunctionFactory = /*#__PURE__*/ (function () {
         function PDFFunctionFactory(_ref35) {
            var xref = _ref35.xref,
               _ref35$isEvalSupporte = _ref35.isEvalSupported,
               isEvalSupported =
                  _ref35$isEvalSupporte === void 0 ? true : _ref35$isEvalSupporte;
            _classCallCheck(this, PDFFunctionFactory);
            this.xref = xref;
            this.isEvalSupported = isEvalSupported !== false;
         }
         return _createClass(PDFFunctionFactory, [
            {
               key: "create",
               value: function create(fn) {
                  var cachedFunction = this.getCached(fn);
                  if (cachedFunction) {
                     return cachedFunction;
                  }
                  var parsedFunction = PDFFunction.parse({
                     xref: this.xref,
                     isEvalSupported: this.isEvalSupported,
                     fn: fn instanceof Ref ? this.xref.fetch(fn) : fn,
                  });
                  this._cache(fn, parsedFunction);
                  return parsedFunction;
               },
            },
            {
               key: "createFromArray",
               value: function createFromArray(fnObj) {
                  var cachedFunction = this.getCached(fnObj);
                  if (cachedFunction) {
                     return cachedFunction;
                  }
                  var parsedFunction = PDFFunction.parseArray({
                     xref: this.xref,
                     isEvalSupported: this.isEvalSupported,
                     fnObj: fnObj instanceof Ref ? this.xref.fetch(fnObj) : fnObj,
                  });
                  this._cache(fnObj, parsedFunction);
                  return parsedFunction;
               },
            },
            {
               key: "getCached",
               value: function getCached(cacheKey) {
                  var fnRef;
                  if (cacheKey instanceof Ref) {
                     fnRef = cacheKey;
                  } else if (cacheKey instanceof Dict) {
                     fnRef = cacheKey.objId;
                  } else if (cacheKey instanceof BaseStream) {
                     var _cacheKey$dict;
                     fnRef =
                        (_cacheKey$dict = cacheKey.dict) === null ||
                        _cacheKey$dict === void 0
                           ? void 0
                           : _cacheKey$dict.objId;
                  }
                  if (fnRef) {
                     var localFunction = this._localFunctionCache.getByRef(fnRef);
                     if (localFunction) {
                        return localFunction;
                     }
                  }
                  return null;
               },
            },
            {
               key: "_cache",
               value: function _cache(cacheKey, parsedFunction) {
                  if (!parsedFunction) {
                     throw new Error(
                        'PDFFunctionFactory._cache - expected "parsedFunction" argument.',
                     );
                  }
                  var fnRef;
                  if (cacheKey instanceof Ref) {
                     fnRef = cacheKey;
                  } else if (cacheKey instanceof Dict) {
                     fnRef = cacheKey.objId;
                  } else if (cacheKey instanceof BaseStream) {
                     var _cacheKey$dict2;
                     fnRef =
                        (_cacheKey$dict2 = cacheKey.dict) === null ||
                        _cacheKey$dict2 === void 0
                           ? void 0
                           : _cacheKey$dict2.objId;
                  }
                  if (fnRef) {
                     this._localFunctionCache.set(null, fnRef, parsedFunction);
                  }
               },
            },
            {
               key: "_localFunctionCache",
               get: function get() {
                  return shadow(
                     this,
                     "_localFunctionCache",
                     new LocalFunctionCache(),
                  );
               },
            },
         ]);
      })();
      function toNumberArray(arr) {
         if (!Array.isArray(arr)) {
            return null;
         }
         if (!isNumberArray(arr, null)) {
            return arr.map(function (x) {
               return +x;
            });
         }
         return arr;
      }
      var PDFFunction = /*#__PURE__*/ (function () {
         function PDFFunction() {
            _classCallCheck(this, PDFFunction);
         }
         return _createClass(PDFFunction, null, [
            {
               key: "getSampleArray",
               value: function getSampleArray(size, outputSize, bps, stream) {
                  var i, ii;
                  var length = 1;
                  for (i = 0, ii = size.length; i < ii; i++) {
                     length *= size[i];
                  }
                  length *= outputSize;
                  var array = new Array(length);
                  var codeSize = 0;
                  var codeBuf = 0;
                  var sampleMul = 1.0 / (Math.pow(2.0, bps) - 1);
                  var strBytes = stream.getBytes((length * bps + 7) / 8);
                  var strIdx = 0;
                  for (i = 0; i < length; i++) {
                     while (codeSize < bps) {
                        codeBuf <<= 8;
                        codeBuf |= strBytes[strIdx++];
                        codeSize += 8;
                     }
                     codeSize -= bps;
                     array[i] = (codeBuf >> codeSize) * sampleMul;
                     codeBuf &= (1 << codeSize) - 1;
                  }
                  return array;
               },
            },
            {
               key: "parse",
               value: function parse(_ref36) {
                  var xref = _ref36.xref,
                     isEvalSupported = _ref36.isEvalSupported,
                     fn = _ref36.fn;
                  var dict = fn.dict || fn;
                  var typeNum = dict.get("FunctionType");
                  switch (typeNum) {
                     case 0:
                        return this.constructSampled({
                           xref: xref,
                           isEvalSupported: isEvalSupported,
                           fn: fn,
                           dict: dict,
                        });
                     case 1:
                        break;
                     case 2:
                        return this.constructInterpolated({
                           xref: xref,
                           isEvalSupported: isEvalSupported,
                           dict: dict,
                        });
                     case 3:
                        return this.constructStiched({
                           xref: xref,
                           isEvalSupported: isEvalSupported,
                           dict: dict,
                        });
                     case 4:
                        return this.constructPostScript({
                           xref: xref,
                           isEvalSupported: isEvalSupported,
                           fn: fn,
                           dict: dict,
                        });
                  }
                  throw new FormatError("Unknown type of function");
               },
            },
            {
               key: "parseArray",
               value: function parseArray(_ref37) {
                  var xref = _ref37.xref,
                     isEvalSupported = _ref37.isEvalSupported,
                     fnObj = _ref37.fnObj;
                  if (!Array.isArray(fnObj)) {
                     return this.parse({
                        xref: xref,
                        isEvalSupported: isEvalSupported,
                        fn: fnObj,
                     });
                  }
                  var fnArray = [];
                  var _iterator52 = _createForOfIteratorHelper(fnObj),
                     _step52;
                  try {
                     for (_iterator52.s(); !(_step52 = _iterator52.n()).done; ) {
                        var fn = _step52.value;
                        fnArray.push(
                           this.parse({
                              xref: xref,
                              isEvalSupported: isEvalSupported,
                              fn: xref.fetchIfRef(fn),
                           }),
                        );
                     }
                  } catch (err) {
                     _iterator52.e(err);
                  } finally {
                     _iterator52.f();
                  }
                  return function (src, srcOffset, dest, destOffset) {
                     for (var i = 0, ii = fnArray.length; i < ii; i++) {
                        fnArray[i](src, srcOffset, dest, destOffset + i);
                     }
                  };
               },
            },
            {
               key: "constructSampled",
               value: function constructSampled(_ref38) {
                  var xref = _ref38.xref,
                     isEvalSupported = _ref38.isEvalSupported,
                     fn = _ref38.fn,
                     dict = _ref38.dict;
                  function toMultiArray(arr) {
                     var inputLength = arr.length;
                     var out = [];
                     var index = 0;
                     for (var i = 0; i < inputLength; i += 2) {
                        out[index++] = [arr[i], arr[i + 1]];
                     }
                     return out;
                  }
                  function interpolate(x, xmin, xmax, ymin, ymax) {
                     return ymin + (x - xmin) * ((ymax - ymin) / (xmax - xmin));
                  }
                  var domain = toNumberArray(dict.getArray("Domain"));
                  var range = toNumberArray(dict.getArray("Range"));
                  if (!domain || !range) {
                     throw new FormatError("No domain or range");
                  }
                  var inputSize = domain.length / 2;
                  var outputSize = range.length / 2;
                  domain = toMultiArray(domain);
                  range = toMultiArray(range);
                  var size = toNumberArray(dict.getArray("Size"));
                  var bps = dict.get("BitsPerSample");
                  var order = dict.get("Order") || 1;
                  if (order !== 1) {
                     info("No support for cubic spline interpolation: " + order);
                  }
                  var encode = toNumberArray(dict.getArray("Encode"));
                  if (!encode) {
                     encode = [];
                     for (var i = 0; i < inputSize; ++i) {
                        encode.push([0, size[i] - 1]);
                     }
                  } else {
                     encode = toMultiArray(encode);
                  }
                  var decode = toNumberArray(dict.getArray("Decode"));
                  decode = !decode ? range : toMultiArray(decode);
                  var samples = this.getSampleArray(size, outputSize, bps, fn);
                  return function constructSampledFn(
                     src,
                     srcOffset,
                     dest,
                     destOffset,
                  ) {
                     var cubeVertices = 1 << inputSize;
                     var cubeN = new Float64Array(cubeVertices);
                     var cubeVertex = new Uint32Array(cubeVertices);
                     var i, j;
                     for (j = 0; j < cubeVertices; j++) {
                        cubeN[j] = 1;
                     }
                     var k = outputSize,
                        pos = 1;
                     for (i = 0; i < inputSize; ++i) {
                        var domain_2i = domain[i][0];
                        var domain_2i_1 = domain[i][1];
                        var xi = Math.min(
                           Math.max(src[srcOffset + i], domain_2i),
                           domain_2i_1,
                        );
                        var e = interpolate(
                           xi,
                           domain_2i,
                           domain_2i_1,
                           encode[i][0],
                           encode[i][1],
                        );
                        var size_i = size[i];
                        e = Math.min(Math.max(e, 0), size_i - 1);
                        var e0 = e < size_i - 1 ? Math.floor(e) : e - 1;
                        var n0 = e0 + 1 - e;
                        var n1 = e - e0;
                        var offset0 = e0 * k;
                        var offset1 = offset0 + k;
                        for (j = 0; j < cubeVertices; j++) {
                           if (j & pos) {
                              cubeN[j] *= n1;
                              cubeVertex[j] += offset1;
                           } else {
                              cubeN[j] *= n0;
                              cubeVertex[j] += offset0;
                           }
                        }
                        k *= size_i;
                        pos <<= 1;
                     }
                     for (j = 0; j < outputSize; ++j) {
                        var rj = 0;
                        for (i = 0; i < cubeVertices; i++) {
                           rj += samples[cubeVertex[i] + j] * cubeN[i];
                        }
                        rj = interpolate(rj, 0, 1, decode[j][0], decode[j][1]);
                        dest[destOffset + j] = Math.min(
                           Math.max(rj, range[j][0]),
                           range[j][1],
                        );
                     }
                  };
               },
            },
            {
               key: "constructInterpolated",
               value: function constructInterpolated(_ref39) {
                  var xref = _ref39.xref,
                     isEvalSupported = _ref39.isEvalSupported,
                     dict = _ref39.dict;
                  var c0 = toNumberArray(dict.getArray("C0")) || [0];
                  var c1 = toNumberArray(dict.getArray("C1")) || [1];
                  var n = dict.get("N");
                  var diff = [];
                  for (var i = 0, ii = c0.length; i < ii; ++i) {
                     diff.push(c1[i] - c0[i]);
                  }
                  var length = diff.length;
                  return function constructInterpolatedFn(
                     src,
                     srcOffset,
                     dest,
                     destOffset,
                  ) {
                     var x = n === 1 ? src[srcOffset] : Math.pow(src[srcOffset], n);
                     for (var j = 0; j < length; ++j) {
                        dest[destOffset + j] = c0[j] + x * diff[j];
                     }
                  };
               },
            },
            {
               key: "constructStiched",
               value: function constructStiched(_ref40) {
                  var xref = _ref40.xref,
                     isEvalSupported = _ref40.isEvalSupported,
                     dict = _ref40.dict;
                  var domain = toNumberArray(dict.getArray("Domain"));
                  if (!domain) {
                     throw new FormatError("No domain");
                  }
                  var inputSize = domain.length / 2;
                  if (inputSize !== 1) {
                     throw new FormatError("Bad domain for stiched function");
                  }
                  var fns = [];
                  var _iterator53 = _createForOfIteratorHelper(dict.get("Functions")),
                     _step53;
                  try {
                     for (_iterator53.s(); !(_step53 = _iterator53.n()).done; ) {
                        var fn = _step53.value;
                        fns.push(
                           this.parse({
                              xref: xref,
                              isEvalSupported: isEvalSupported,
                              fn: xref.fetchIfRef(fn),
                           }),
                        );
                     }
                  } catch (err) {
                     _iterator53.e(err);
                  } finally {
                     _iterator53.f();
                  }
                  var bounds = toNumberArray(dict.getArray("Bounds"));
                  var encode = toNumberArray(dict.getArray("Encode"));
                  var tmpBuf = new Float32Array(1);
                  return function constructStichedFn(
                     src,
                     srcOffset,
                     dest,
                     destOffset,
                  ) {
                     var clip = function constructStichedFromIRClip(v, min, max) {
                        if (v > max) {
                           v = max;
                        } else if (v < min) {
                           v = min;
                        }
                        return v;
                     };
                     var v = clip(src[srcOffset], domain[0], domain[1]);
                     var length = bounds.length;
                     var i;
                     for (i = 0; i < length; ++i) {
                        if (v < bounds[i]) {
                           break;
                        }
                     }
                     var dmin = domain[0];
                     if (i > 0) {
                        dmin = bounds[i - 1];
                     }
                     var dmax = domain[1];
                     if (i < bounds.length) {
                        dmax = bounds[i];
                     }
                     var rmin = encode[2 * i];
                     var rmax = encode[2 * i + 1];
                     tmpBuf[0] =
                        dmin === dmax
                           ? rmin
                           : rmin + ((v - dmin) * (rmax - rmin)) / (dmax - dmin);
                     fns[i](tmpBuf, 0, dest, destOffset);
                  };
               },
            },
            {
               key: "constructPostScript",
               value: function constructPostScript(_ref41) {
                  var xref = _ref41.xref,
                     isEvalSupported = _ref41.isEvalSupported,
                     fn = _ref41.fn,
                     dict = _ref41.dict;
                  var domain = toNumberArray(dict.getArray("Domain"));
                  var range = toNumberArray(dict.getArray("Range"));
                  if (!domain) {
                     throw new FormatError("No domain.");
                  }
                  if (!range) {
                     throw new FormatError("No range.");
                  }
                  var lexer = new PostScriptLexer(fn);
                  var parser = new PostScriptParser(lexer);
                  var code = parser.parse();
                  if (isEvalSupported && FeatureTest.isEvalSupported) {
                     var compiled = new PostScriptCompiler().compile(
                        code,
                        domain,
                        range,
                     );
                     if (compiled) {
                        return new Function(
                           "src",
                           "srcOffset",
                           "dest",
                           "destOffset",
                           compiled,
                        );
                     }
                  }
                  info("Unable to compile PS function");
                  var numOutputs = range.length >> 1;
                  var numInputs = domain.length >> 1;
                  var evaluator = new PostScriptEvaluator(code);
                  var cache = Object.create(null);
                  var MAX_CACHE_SIZE = 2048 * 4;
                  var cache_available = MAX_CACHE_SIZE;
                  var tmpBuf = new Float32Array(numInputs);
                  return function constructPostScriptFn(
                     src,
                     srcOffset,
                     dest,
                     destOffset,
                  ) {
                     var i, value;
                     var key = "";
                     var input = tmpBuf;
                     for (i = 0; i < numInputs; i++) {
                        value = src[srcOffset + i];
                        input[i] = value;
                        key += value + "_";
                     }
                     var cachedValue = cache[key];
                     if (cachedValue !== undefined) {
                        dest.set(cachedValue, destOffset);
                        return;
                     }
                     var output = new Float32Array(numOutputs);
                     var stack = evaluator.execute(input);
                     var stackIndex = stack.length - numOutputs;
                     for (i = 0; i < numOutputs; i++) {
                        value = stack[stackIndex + i];
                        var bound = range[i * 2];
                        if (value < bound) {
                           value = bound;
                        } else {
                           bound = range[i * 2 + 1];
                           if (value > bound) {
                              value = bound;
                           }
                        }
                        output[i] = value;
                     }
                     if (cache_available > 0) {
                        cache_available--;
                        cache[key] = output;
                     }
                     dest.set(output, destOffset);
                  };
               },
            },
         ]);
      })();
      function isPDFFunction(v) {
         var fnDict;
         if (v instanceof Dict) {
            fnDict = v;
         } else if (v instanceof BaseStream) {
            fnDict = v.dict;
         } else {
            return false;
         }
         return fnDict.has("FunctionType");
      }
      var PostScriptStack = /*#__PURE__*/ (function () {
         function PostScriptStack(initialStack) {
            _classCallCheck(this, PostScriptStack);
            this.stack = initialStack ? Array.from(initialStack) : [];
         }
         return _createClass(PostScriptStack, [
            {
               key: "push",
               value: function push(value) {
                  if (this.stack.length >= PostScriptStack.MAX_STACK_SIZE) {
                     throw new Error("PostScript function stack overflow.");
                  }
                  this.stack.push(value);
               },
            },
            {
               key: "pop",
               value: function pop() {
                  if (this.stack.length <= 0) {
                     throw new Error("PostScript function stack underflow.");
                  }
                  return this.stack.pop();
               },
            },
            {
               key: "copy",
               value: function copy(n) {
                  if (this.stack.length + n >= PostScriptStack.MAX_STACK_SIZE) {
                     throw new Error("PostScript function stack overflow.");
                  }
                  var stack = this.stack;
                  for (var i = stack.length - n, j = n - 1; j >= 0; j--, i++) {
                     stack.push(stack[i]);
                  }
               },
            },
            {
               key: "index",
               value: function index(n) {
                  this.push(this.stack[this.stack.length - n - 1]);
               },
            },
            {
               key: "roll",
               value: function roll(n, p) {
                  var stack = this.stack;
                  var l = stack.length - n;
                  var r = stack.length - 1;
                  var c = l + (p - Math.floor(p / n) * n);
                  for (var i = l, j = r; i < j; i++, j--) {
                     var t = stack[i];
                     stack[i] = stack[j];
                     stack[j] = t;
                  }
                  for (var _i35 = l, _j2 = c - 1; _i35 < _j2; _i35++, _j2--) {
                     var _t4 = stack[_i35];
                     stack[_i35] = stack[_j2];
                     stack[_j2] = _t4;
                  }
                  for (var _i36 = c, _j3 = r; _i36 < _j3; _i36++, _j3--) {
                     var _t5 = stack[_i36];
                     stack[_i36] = stack[_j3];
                     stack[_j3] = _t5;
                  }
               },
            },
         ]);
      })();
      _defineProperty(PostScriptStack, "MAX_STACK_SIZE", 100);
      var PostScriptEvaluator = /*#__PURE__*/ (function () {
         function PostScriptEvaluator(operators) {
            _classCallCheck(this, PostScriptEvaluator);
            this.operators = operators;
         }
         return _createClass(PostScriptEvaluator, [
            {
               key: "execute",
               value: function execute(initialStack) {
                  var stack = new PostScriptStack(initialStack);
                  var counter = 0;
                  var operators = this.operators;
                  var length = operators.length;
                  var operator, a, b;
                  while (counter < length) {
                     operator = operators[counter++];
                     if (typeof operator === "number") {
                        stack.push(operator);
                        continue;
                     }
                     switch (operator) {
                        case "jz":
                           b = stack.pop();
                           a = stack.pop();
                           if (!a) {
                              counter = b;
                           }
                           break;
                        case "j":
                           a = stack.pop();
                           counter = a;
                           break;
                        case "abs":
                           a = stack.pop();
                           stack.push(Math.abs(a));
                           break;
                        case "add":
                           b = stack.pop();
                           a = stack.pop();
                           stack.push(a + b);
                           break;
                        case "and":
                           b = stack.pop();
                           a = stack.pop();
                           if (typeof a === "boolean" && typeof b === "boolean") {
                              stack.push(a && b);
                           } else {
                              stack.push(a & b);
                           }
                           break;
                        case "atan":
                           b = stack.pop();
                           a = stack.pop();
                           a = (Math.atan2(a, b) / Math.PI) * 180;
                           if (a < 0) {
                              a += 360;
                           }
                           stack.push(a);
                           break;
                        case "bitshift":
                           b = stack.pop();
                           a = stack.pop();
                           if (a > 0) {
                              stack.push(a << b);
                           } else {
                              stack.push(a >> b);
                           }
                           break;
                        case "ceiling":
                           a = stack.pop();
                           stack.push(Math.ceil(a));
                           break;
                        case "copy":
                           a = stack.pop();
                           stack.copy(a);
                           break;
                        case "cos":
                           a = stack.pop();
                           stack.push(Math.cos(((a % 360) / 180) * Math.PI));
                           break;
                        case "cvi":
                           a = stack.pop() | 0;
                           stack.push(a);
                           break;
                        case "cvr":
                           break;
                        case "div":
                           b = stack.pop();
                           a = stack.pop();
                           stack.push(a / b);
                           break;
                        case "dup":
                           stack.copy(1);
                           break;
                        case "eq":
                           b = stack.pop();
                           a = stack.pop();
                           stack.push(a === b);
                           break;
                        case "exch":
                           stack.roll(2, 1);
                           break;
                        case "exp":
                           b = stack.pop();
                           a = stack.pop();
                           stack.push(Math.pow(a, b));
                           break;
                        case "false":
                           stack.push(false);
                           break;
                        case "floor":
                           a = stack.pop();
                           stack.push(Math.floor(a));
                           break;
                        case "ge":
                           b = stack.pop();
                           a = stack.pop();
                           stack.push(a >= b);
                           break;
                        case "gt":
                           b = stack.pop();
                           a = stack.pop();
                           stack.push(a > b);
                           break;
                        case "idiv":
                           b = stack.pop();
                           a = stack.pop();
                           stack.push((a / b) | 0);
                           break;
                        case "index":
                           a = stack.pop();
                           stack.index(a);
                           break;
                        case "le":
                           b = stack.pop();
                           a = stack.pop();
                           stack.push(a <= b);
                           break;
                        case "ln":
                           a = stack.pop();
                           stack.push(Math.log(a));
                           break;
                        case "log":
                           a = stack.pop();
                           stack.push(Math.log10(a));
                           break;
                        case "lt":
                           b = stack.pop();
                           a = stack.pop();
                           stack.push(a < b);
                           break;
                        case "mod":
                           b = stack.pop();
                           a = stack.pop();
                           stack.push(a % b);
                           break;
                        case "mul":
                           b = stack.pop();
                           a = stack.pop();
                           stack.push(a * b);
                           break;
                        case "ne":
                           b = stack.pop();
                           a = stack.pop();
                           stack.push(a !== b);
                           break;
                        case "neg":
                           a = stack.pop();
                           stack.push(-a);
                           break;
                        case "not":
                           a = stack.pop();
                           if (typeof a === "boolean") {
                              stack.push(!a);
                           } else {
                              stack.push(~a);
                           }
                           break;
                        case "or":
                           b = stack.pop();
                           a = stack.pop();
                           if (typeof a === "boolean" && typeof b === "boolean") {
                              stack.push(a || b);
                           } else {
                              stack.push(a | b);
                           }
                           break;
                        case "pop":
                           stack.pop();
                           break;
                        case "roll":
                           b = stack.pop();
                           a = stack.pop();
                           stack.roll(a, b);
                           break;
                        case "round":
                           a = stack.pop();
                           stack.push(Math.round(a));
                           break;
                        case "sin":
                           a = stack.pop();
                           stack.push(Math.sin(((a % 360) / 180) * Math.PI));
                           break;
                        case "sqrt":
                           a = stack.pop();
                           stack.push(Math.sqrt(a));
                           break;
                        case "sub":
                           b = stack.pop();
                           a = stack.pop();
                           stack.push(a - b);
                           break;
                        case "true":
                           stack.push(true);
                           break;
                        case "truncate":
                           a = stack.pop();
                           a = a < 0 ? Math.ceil(a) : Math.floor(a);
                           stack.push(a);
                           break;
                        case "xor":
                           b = stack.pop();
                           a = stack.pop();
                           if (typeof a === "boolean" && typeof b === "boolean") {
                              stack.push(a !== b);
                           } else {
                              stack.push(a ^ b);
                           }
                           break;
                        default:
                           throw new FormatError("Unknown operator ".concat(operator));
                     }
                  }
                  return stack.stack;
               },
            },
         ]);
      })();
      var AstNode = /*#__PURE__*/ (function () {
         function AstNode(type) {
            _classCallCheck(this, AstNode);
            this.type = type;
         }
         return _createClass(AstNode, [
            {
               key: "visit",
               value: function visit(visitor) {
                  unreachable("abstract method");
               },
            },
         ]);
      })();
      var AstArgument = /*#__PURE__*/ (function (_AstNode) {
         function AstArgument(index, min, max) {
            var _this36;
            _classCallCheck(this, AstArgument);
            _this36 = _callSuper(this, AstArgument, ["args"]);
            _this36.index = index;
            _this36.min = min;
            _this36.max = max;
            return _this36;
         }
         _inherits(AstArgument, _AstNode);
         return _createClass(AstArgument, [
            {
               key: "visit",
               value: function visit(visitor) {
                  visitor.visitArgument(this);
               },
            },
         ]);
      })(AstNode);
      var AstLiteral = /*#__PURE__*/ (function (_AstNode2) {
         function AstLiteral(number) {
            var _this37;
            _classCallCheck(this, AstLiteral);
            _this37 = _callSuper(this, AstLiteral, ["literal"]);
            _this37.number = number;
            _this37.min = number;
            _this37.max = number;
            return _this37;
         }
         _inherits(AstLiteral, _AstNode2);
         return _createClass(AstLiteral, [
            {
               key: "visit",
               value: function visit(visitor) {
                  visitor.visitLiteral(this);
               },
            },
         ]);
      })(AstNode);
      var AstBinaryOperation = /*#__PURE__*/ (function (_AstNode3) {
         function AstBinaryOperation(op, arg1, arg2, min, max) {
            var _this38;
            _classCallCheck(this, AstBinaryOperation);
            _this38 = _callSuper(this, AstBinaryOperation, ["binary"]);
            _this38.op = op;
            _this38.arg1 = arg1;
            _this38.arg2 = arg2;
            _this38.min = min;
            _this38.max = max;
            return _this38;
         }
         _inherits(AstBinaryOperation, _AstNode3);
         return _createClass(AstBinaryOperation, [
            {
               key: "visit",
               value: function visit(visitor) {
                  visitor.visitBinaryOperation(this);
               },
            },
         ]);
      })(AstNode);
      var AstMin = /*#__PURE__*/ (function (_AstNode4) {
         function AstMin(arg, max) {
            var _this39;
            _classCallCheck(this, AstMin);
            _this39 = _callSuper(this, AstMin, ["max"]);
            _this39.arg = arg;
            _this39.min = arg.min;
            _this39.max = max;
            return _this39;
         }
         _inherits(AstMin, _AstNode4);
         return _createClass(AstMin, [
            {
               key: "visit",
               value: function visit(visitor) {
                  visitor.visitMin(this);
               },
            },
         ]);
      })(AstNode);
      var AstVariable = /*#__PURE__*/ (function (_AstNode5) {
         function AstVariable(index, min, max) {
            var _this40;
            _classCallCheck(this, AstVariable);
            _this40 = _callSuper(this, AstVariable, ["var"]);
            _this40.index = index;
            _this40.min = min;
            _this40.max = max;
            return _this40;
         }
         _inherits(AstVariable, _AstNode5);
         return _createClass(AstVariable, [
            {
               key: "visit",
               value: function visit(visitor) {
                  visitor.visitVariable(this);
               },
            },
         ]);
      })(AstNode);
      var AstVariableDefinition = /*#__PURE__*/ (function (_AstNode6) {
         function AstVariableDefinition(variable, arg) {
            var _this41;
            _classCallCheck(this, AstVariableDefinition);
            _this41 = _callSuper(this, AstVariableDefinition, ["definition"]);
            _this41.variable = variable;
            _this41.arg = arg;
            return _this41;
         }
         _inherits(AstVariableDefinition, _AstNode6);
         return _createClass(AstVariableDefinition, [
            {
               key: "visit",
               value: function visit(visitor) {
                  visitor.visitVariableDefinition(this);
               },
            },
         ]);
      })(AstNode);
      var ExpressionBuilderVisitor = /*#__PURE__*/ (function () {
         function ExpressionBuilderVisitor() {
            _classCallCheck(this, ExpressionBuilderVisitor);
            this.parts = [];
         }
         return _createClass(ExpressionBuilderVisitor, [
            {
               key: "visitArgument",
               value: function visitArgument(arg) {
                  this.parts.push(
                     "Math.max(",
                     arg.min,
                     ", Math.min(",
                     arg.max,
                     ", src[srcOffset + ",
                     arg.index,
                     "]))",
                  );
               },
            },
            {
               key: "visitVariable",
               value: function visitVariable(variable) {
                  this.parts.push("v", variable.index);
               },
            },
            {
               key: "visitLiteral",
               value: function visitLiteral(literal) {
                  this.parts.push(literal.number);
               },
            },
            {
               key: "visitBinaryOperation",
               value: function visitBinaryOperation(operation) {
                  this.parts.push("(");
                  operation.arg1.visit(this);
                  this.parts.push(" ", operation.op, " ");
                  operation.arg2.visit(this);
                  this.parts.push(")");
               },
            },
            {
               key: "visitVariableDefinition",
               value: function visitVariableDefinition(definition) {
                  this.parts.push("var ");
                  definition.variable.visit(this);
                  this.parts.push(" = ");
                  definition.arg.visit(this);
                  this.parts.push(";");
               },
            },
            {
               key: "visitMin",
               value: function visitMin(max) {
                  this.parts.push("Math.min(");
                  max.arg.visit(this);
                  this.parts.push(", ", max.max, ")");
               },
            },
            {
               key: "toString",
               value: function toString() {
                  return this.parts.join("");
               },
            },
         ]);
      })();
      function buildAddOperation(num1, num2) {
         if (num2.type === "literal" && num2.number === 0) {
            return num1;
         }
         if (num1.type === "literal" && num1.number === 0) {
            return num2;
         }
         if (num2.type === "literal" && num1.type === "literal") {
            return new AstLiteral(num1.number + num2.number);
         }
         return new AstBinaryOperation(
            "+",
            num1,
            num2,
            num1.min + num2.min,
            num1.max + num2.max,
         );
      }
      function buildMulOperation(num1, num2) {
         if (num2.type === "literal") {
            if (num2.number === 0) {
               return new AstLiteral(0);
            } else if (num2.number === 1) {
               return num1;
            } else if (num1.type === "literal") {
               return new AstLiteral(num1.number * num2.number);
            }
         }
         if (num1.type === "literal") {
            if (num1.number === 0) {
               return new AstLiteral(0);
            } else if (num1.number === 1) {
               return num2;
            }
         }
         var min = Math.min(
            num1.min * num2.min,
            num1.min * num2.max,
            num1.max * num2.min,
            num1.max * num2.max,
         );
         var max = Math.max(
            num1.min * num2.min,
            num1.min * num2.max,
            num1.max * num2.min,
            num1.max * num2.max,
         );
         return new AstBinaryOperation("*", num1, num2, min, max);
      }
      function buildSubOperation(num1, num2) {
         if (num2.type === "literal") {
            if (num2.number === 0) {
               return num1;
            } else if (num1.type === "literal") {
               return new AstLiteral(num1.number - num2.number);
            }
         }
         if (
            num2.type === "binary" &&
            num2.op === "-" &&
            num1.type === "literal" &&
            num1.number === 1 &&
            num2.arg1.type === "literal" &&
            num2.arg1.number === 1
         ) {
            return num2.arg2;
         }
         return new AstBinaryOperation(
            "-",
            num1,
            num2,
            num1.min - num2.max,
            num1.max - num2.min,
         );
      }
      function buildMinOperation(num1, max) {
         if (num1.min >= max) {
            return new AstLiteral(max);
         } else if (num1.max <= max) {
            return num1;
         }
         return new AstMin(num1, max);
      }
      var PostScriptCompiler = /*#__PURE__*/ (function () {
         function PostScriptCompiler() {
            _classCallCheck(this, PostScriptCompiler);
         }
         return _createClass(PostScriptCompiler, [
            {
               key: "compile",
               value: function compile(code, domain, range) {
                  var stack = [];
                  var instructions = [];
                  var inputSize = domain.length >> 1,
                     outputSize = range.length >> 1;
                  var lastRegister = 0;
                  var n, j;
                  var num1, num2, ast1, ast2, tmpVar, item;
                  for (var i = 0; i < inputSize; i++) {
                     stack.push(new AstArgument(i, domain[i * 2], domain[i * 2 + 1]));
                  }
                  for (var _i37 = 0, ii = code.length; _i37 < ii; _i37++) {
                     item = code[_i37];
                     if (typeof item === "number") {
                        stack.push(new AstLiteral(item));
                        continue;
                     }
                     switch (item) {
                        case "add":
                           if (stack.length < 2) {
                              return null;
                           }
                           num2 = stack.pop();
                           num1 = stack.pop();
                           stack.push(buildAddOperation(num1, num2));
                           break;
                        case "cvr":
                           if (stack.length < 1) {
                              return null;
                           }
                           break;
                        case "mul":
                           if (stack.length < 2) {
                              return null;
                           }
                           num2 = stack.pop();
                           num1 = stack.pop();
                           stack.push(buildMulOperation(num1, num2));
                           break;
                        case "sub":
                           if (stack.length < 2) {
                              return null;
                           }
                           num2 = stack.pop();
                           num1 = stack.pop();
                           stack.push(buildSubOperation(num1, num2));
                           break;
                        case "exch":
                           if (stack.length < 2) {
                              return null;
                           }
                           ast1 = stack.pop();
                           ast2 = stack.pop();
                           stack.push(ast1, ast2);
                           break;
                        case "pop":
                           if (stack.length < 1) {
                              return null;
                           }
                           stack.pop();
                           break;
                        case "index":
                           if (stack.length < 1) {
                              return null;
                           }
                           num1 = stack.pop();
                           if (num1.type !== "literal") {
                              return null;
                           }
                           n = num1.number;
                           if (n < 0 || !Number.isInteger(n) || stack.length < n) {
                              return null;
                           }
                           ast1 = stack[stack.length - n - 1];
                           if (ast1.type === "literal" || ast1.type === "var") {
                              stack.push(ast1);
                              break;
                           }
                           tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);
                           stack[stack.length - n - 1] = tmpVar;
                           stack.push(tmpVar);
                           instructions.push(new AstVariableDefinition(tmpVar, ast1));
                           break;
                        case "dup":
                           if (stack.length < 1) {
                              return null;
                           }
                           if (
                              typeof code[_i37 + 1] === "number" &&
                              code[_i37 + 2] === "gt" &&
                              code[_i37 + 3] === _i37 + 7 &&
                              code[_i37 + 4] === "jz" &&
                              code[_i37 + 5] === "pop" &&
                              code[_i37 + 6] === code[_i37 + 1]
                           ) {
                              num1 = stack.pop();
                              stack.push(buildMinOperation(num1, code[_i37 + 1]));
                              _i37 += 6;
                              break;
                           }
                           ast1 = stack.at(-1);
                           if (ast1.type === "literal" || ast1.type === "var") {
                              stack.push(ast1);
                              break;
                           }
                           tmpVar = new AstVariable(lastRegister++, ast1.min, ast1.max);
                           stack[stack.length - 1] = tmpVar;
                           stack.push(tmpVar);
                           instructions.push(new AstVariableDefinition(tmpVar, ast1));
                           break;
                        case "roll":
                           if (stack.length < 2) {
                              return null;
                           }
                           num2 = stack.pop();
                           num1 = stack.pop();
                           if (num2.type !== "literal" || num1.type !== "literal") {
                              return null;
                           }
                           j = num2.number;
                           n = num1.number;
                           if (
                              n <= 0 ||
                              !Number.isInteger(n) ||
                              !Number.isInteger(j) ||
                              stack.length < n
                           ) {
                              return null;
                           }
                           j = ((j % n) + n) % n;
                           if (j === 0) {
                              break;
                           }
                           stack.push.apply(
                              stack,
                              _toConsumableArray(stack.splice(stack.length - n, n - j)),
                           );
                           break;
                        default:
                           return null;
                     }
                  }
                  if (stack.length !== outputSize) {
                     return null;
                  }
                  var result = [];
                  for (
                     var _i38 = 0, _instructions = instructions;
                     _i38 < _instructions.length;
                     _i38++
                  ) {
                     var instruction = _instructions[_i38];
                     var statementBuilder = new ExpressionBuilderVisitor();
                     instruction.visit(statementBuilder);
                     result.push(statementBuilder.toString());
                  }
                  for (var _i39 = 0, _ii8 = stack.length; _i39 < _ii8; _i39++) {
                     var expr = stack[_i39],
                        _statementBuilder = new ExpressionBuilderVisitor();
                     expr.visit(_statementBuilder);
                     var min = range[_i39 * 2],
                        max = range[_i39 * 2 + 1];
                     var out = [_statementBuilder.toString()];
                     if (min > expr.min) {
                        out.unshift("Math.max(", min, ", ");
                        out.push(")");
                     }
                     if (max < expr.max) {
                        out.unshift("Math.min(", max, ", ");
                        out.push(")");
                     }
                     out.unshift("dest[destOffset + ", _i39, "] = ");
                     out.push(";");
                     result.push(out.join(""));
                  }
                  return result.join("\n");
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/bidi.js
      var baseTypes = [
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "S",
         "B",
         "S",
         "WS",
         "B",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "B",
         "B",
         "B",
         "S",
         "WS",
         "ON",
         "ON",
         "ET",
         "ET",
         "ET",
         "ON",
         "ON",
         "ON",
         "ON",
         "ON",
         "ES",
         "CS",
         "ES",
         "CS",
         "CS",
         "EN",
         "EN",
         "EN",
         "EN",
         "EN",
         "EN",
         "EN",
         "EN",
         "EN",
         "EN",
         "CS",
         "ON",
         "ON",
         "ON",
         "ON",
         "ON",
         "ON",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "ON",
         "ON",
         "ON",
         "ON",
         "ON",
         "ON",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "ON",
         "ON",
         "ON",
         "ON",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "B",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "BN",
         "CS",
         "ON",
         "ET",
         "ET",
         "ET",
         "ET",
         "ON",
         "ON",
         "ON",
         "ON",
         "L",
         "ON",
         "ON",
         "BN",
         "ON",
         "ON",
         "ET",
         "ET",
         "EN",
         "EN",
         "ON",
         "L",
         "ON",
         "ON",
         "ON",
         "EN",
         "L",
         "ON",
         "ON",
         "ON",
         "ON",
         "ON",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "ON",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "ON",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
         "L",
      ];
      var arabicTypes = [
         "AN",
         "AN",
         "AN",
         "AN",
         "AN",
         "AN",
         "ON",
         "ON",
         "AL",
         "ET",
         "ET",
         "AL",
         "CS",
         "AL",
         "ON",
         "ON",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "AL",
         "AL",
         "",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "AN",
         "AN",
         "AN",
         "AN",
         "AN",
         "AN",
         "AN",
         "AN",
         "AN",
         "AN",
         "ET",
         "AN",
         "AN",
         "AL",
         "AL",
         "AL",
         "NSM",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "AN",
         "ON",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "AL",
         "AL",
         "NSM",
         "NSM",
         "ON",
         "NSM",
         "NSM",
         "NSM",
         "NSM",
         "AL",
         "AL",
         "EN",
         "EN",
         "EN",
         "EN",
         "EN",
         "EN",
         "EN",
         "EN",
         "EN",
         "EN",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
         "AL",
      ];
      function isOdd(i) {
         return (i & 1) !== 0;
      }
      function isEven(i) {
         return (i & 1) === 0;
      }
      function findUnequal(arr, start, value) {
         var j, jj;
         for (j = start, jj = arr.length; j < jj; ++j) {
            if (arr[j] !== value) {
               return j;
            }
         }
         return j;
      }
      function setValues(arr, start, end, value) {
         for (var j = start; j < end; ++j) {
            arr[j] = value;
         }
      }
      function reverseValues(arr, start, end) {
         for (var i = start, j = end - 1; i < j; ++i, --j) {
            var temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
         }
      }
      function createBidiText(str, isLTR) {
         var vertical =
            arguments.length > 2 && arguments[2] !== undefined
               ? arguments[2]
               : false;
         var dir = "ltr";
         if (vertical) {
            dir = "ttb";
         } else if (!isLTR) {
            dir = "rtl";
         }
         return { str: str, dir: dir };
      }
      var chars = [];
      var types = [];
      function bidi(str) {
         var startLevel =
            arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
         var vertical =
            arguments.length > 2 && arguments[2] !== undefined
               ? arguments[2]
               : false;
         var isLTR = true;
         var strLength = str.length;
         if (strLength === 0 || vertical) {
            return createBidiText(str, isLTR, vertical);
         }
         chars.length = strLength;
         types.length = strLength;
         var numBidi = 0;
         var i, ii;
         for (i = 0; i < strLength; ++i) {
            chars[i] = str.charAt(i);
            var charCode = str.charCodeAt(i);
            var charType = "L";
            if (charCode <= 0x00ff) {
               charType = baseTypes[charCode];
            } else if (0x0590 <= charCode && charCode <= 0x05f4) {
               charType = "R";
            } else if (0x0600 <= charCode && charCode <= 0x06ff) {
               charType = arabicTypes[charCode & 0xff];
               if (!charType) {
                  warn("Bidi: invalid Unicode character " + charCode.toString(16));
               }
            } else if (
               (0x0700 <= charCode && charCode <= 0x08ac) ||
               (0xfb50 <= charCode && charCode <= 0xfdff) ||
               (0xfe70 <= charCode && charCode <= 0xfeff)
            ) {
               charType = "AL";
            }
            if (charType === "R" || charType === "AL" || charType === "AN") {
               numBidi++;
            }
            types[i] = charType;
         }
         if (numBidi === 0) {
            isLTR = true;
            return createBidiText(str, isLTR);
         }
         if (startLevel === -1) {
            if (numBidi / strLength < 0.3 && strLength > 4) {
               isLTR = true;
               startLevel = 0;
            } else {
               isLTR = false;
               startLevel = 1;
            }
         }
         var levels = [];
         for (i = 0; i < strLength; ++i) {
            levels[i] = startLevel;
         }
         var e = isOdd(startLevel) ? "R" : "L";
         var sor = e;
         var eor = sor;
         var lastType = sor;
         for (i = 0; i < strLength; ++i) {
            if (types[i] === "NSM") {
               types[i] = lastType;
            } else {
               lastType = types[i];
            }
         }
         lastType = sor;
         var t;
         for (i = 0; i < strLength; ++i) {
            t = types[i];
            if (t === "EN") {
               types[i] = lastType === "AL" ? "AN" : "EN";
            } else if (t === "R" || t === "L" || t === "AL") {
               lastType = t;
            }
         }
         for (i = 0; i < strLength; ++i) {
            t = types[i];
            if (t === "AL") {
               types[i] = "R";
            }
         }
         for (i = 1; i < strLength - 1; ++i) {
            if (
               types[i] === "ES" &&
               types[i - 1] === "EN" &&
               types[i + 1] === "EN"
            ) {
               types[i] = "EN";
            }
            if (
               types[i] === "CS" &&
               (types[i - 1] === "EN" || types[i - 1] === "AN") &&
               types[i + 1] === types[i - 1]
            ) {
               types[i] = types[i - 1];
            }
         }
         for (i = 0; i < strLength; ++i) {
            if (types[i] === "EN") {
               for (var j = i - 1; j >= 0; --j) {
                  if (types[j] !== "ET") {
                     break;
                  }
                  types[j] = "EN";
               }
               for (var _j4 = i + 1; _j4 < strLength; ++_j4) {
                  if (types[_j4] !== "ET") {
                     break;
                  }
                  types[_j4] = "EN";
               }
            }
         }
         for (i = 0; i < strLength; ++i) {
            t = types[i];
            if (t === "WS" || t === "ES" || t === "ET" || t === "CS") {
               types[i] = "ON";
            }
         }
         lastType = sor;
         for (i = 0; i < strLength; ++i) {
            t = types[i];
            if (t === "EN") {
               types[i] = lastType === "L" ? "L" : "EN";
            } else if (t === "R" || t === "L") {
               lastType = t;
            }
         }
         for (i = 0; i < strLength; ++i) {
            if (types[i] === "ON") {
               var end = findUnequal(types, i + 1, "ON");
               var before = sor;
               if (i > 0) {
                  before = types[i - 1];
               }
               var after = eor;
               if (end + 1 < strLength) {
                  after = types[end + 1];
               }
               if (before !== "L") {
                  before = "R";
               }
               if (after !== "L") {
                  after = "R";
               }
               if (before === after) {
                  setValues(types, i, end, before);
               }
               i = end - 1;
            }
         }
         for (i = 0; i < strLength; ++i) {
            if (types[i] === "ON") {
               types[i] = e;
            }
         }
         for (i = 0; i < strLength; ++i) {
            t = types[i];
            if (isEven(levels[i])) {
               if (t === "R") {
                  levels[i] += 1;
               } else if (t === "AN" || t === "EN") {
                  levels[i] += 2;
               }
            } else if (t === "L" || t === "AN" || t === "EN") {
               levels[i] += 1;
            }
         }
         var highestLevel = -1;
         var lowestOddLevel = 99;
         var level;
         for (i = 0, ii = levels.length; i < ii; ++i) {
            level = levels[i];
            if (highestLevel < level) {
               highestLevel = level;
            }
            if (lowestOddLevel > level && isOdd(level)) {
               lowestOddLevel = level;
            }
         }
         for (level = highestLevel; level >= lowestOddLevel; --level) {
            var start = -1;
            for (i = 0, ii = levels.length; i < ii; ++i) {
               if (levels[i] < level) {
                  if (start >= 0) {
                     reverseValues(chars, start, i);
                     start = -1;
                  }
               } else if (start < 0) {
                  start = i;
               }
            }
            if (start >= 0) {
               reverseValues(chars, start, levels.length);
            }
         }
         for (i = 0, ii = chars.length; i < ii; ++i) {
            var ch = chars[i];
            if (ch === "<" || ch === ">") {
               chars[i] = "";
            }
         }
         return createBidiText(chars.join(""), isLTR);
      } // CONCATENATED MODULE: ./src/core/font_substitutions.js
      var NORMAL = { style: "normal", weight: "normal" };
      var BOLD = { style: "normal", weight: "bold" };
      var ITALIC = { style: "italic", weight: "normal" };
      var BOLDITALIC = { style: "italic", weight: "bold" };
      var substitutionMap = new Map([
         [
            "Times-Roman",
            {
               local: [
                  "Times New Roman",
                  "Times-Roman",
                  "Times",
                  "Liberation Serif",
                  "Nimbus Roman",
                  "Nimbus Roman L",
                  "Tinos",
                  "Thorndale",
                  "TeX Gyre Termes",
                  "FreeSerif",
                  "Linux Libertine O",
                  "Libertinus Serif",
                  "DejaVu Serif",
                  "Bitstream Vera Serif",
                  "Ubuntu",
               ],
               style: NORMAL,
               ultimate: "serif",
            },
         ],
         ["Times-Bold", { alias: "Times-Roman", style: BOLD, ultimate: "serif" }],
         [
            "Times-Italic",
            { alias: "Times-Roman", style: ITALIC, ultimate: "serif" },
         ],
         [
            "Times-BoldItalic",
            { alias: "Times-Roman", style: BOLDITALIC, ultimate: "serif" },
         ],
         [
            "Helvetica",
            {
               local: [
                  "Helvetica",
                  "Helvetica Neue",
                  "Arial",
                  "Arial Nova",
                  "Liberation Sans",
                  "Arimo",
                  "Nimbus Sans",
                  "Nimbus Sans L",
                  "A030",
                  "TeX Gyre Heros",
                  "FreeSans",
                  "DejaVu Sans",
                  "Albany",
                  "Bitstream Vera Sans",
                  "Arial Unicode MS",
                  "Microsoft Sans Serif",
                  "Apple Symbols",
                  "Cantarell",
               ],
               path: "LiberationSans-Regular.ttf",
               style: NORMAL,
               ultimate: "sans-serif",
            },
         ],
         [
            "Helvetica-Bold",
            {
               alias: "Helvetica",
               path: "LiberationSans-Bold.ttf",
               style: BOLD,
               ultimate: "sans-serif",
            },
         ],
         [
            "Helvetica-Oblique",
            {
               alias: "Helvetica",
               path: "LiberationSans-Italic.ttf",
               style: ITALIC,
               ultimate: "sans-serif",
            },
         ],
         [
            "Helvetica-BoldOblique",
            {
               alias: "Helvetica",
               path: "LiberationSans-BoldItalic.ttf",
               style: BOLDITALIC,
               ultimate: "sans-serif",
            },
         ],
         [
            "Courier",
            {
               local: [
                  "Courier",
                  "Courier New",
                  "Liberation Mono",
                  "Nimbus Mono",
                  "Nimbus Mono L",
                  "Cousine",
                  "Cumberland",
                  "TeX Gyre Cursor",
                  "FreeMono",
                  "Linux Libertine Mono O",
                  "Libertinus Mono",
               ],
               style: NORMAL,
               ultimate: "monospace",
            },
         ],
         [
            "Courier-Bold",
            { alias: "Courier", style: BOLD, ultimate: "monospace" },
         ],
         [
            "Courier-Oblique",
            { alias: "Courier", style: ITALIC, ultimate: "monospace" },
         ],
         [
            "Courier-BoldOblique",
            { alias: "Courier", style: BOLDITALIC, ultimate: "monospace" },
         ],
         [
            "ArialBlack",
            {
               local: ["Arial Black"],
               style: { style: "normal", weight: "900" },
               fallback: "Helvetica-Bold",
            },
         ],
         ["ArialBlack-Bold", { alias: "ArialBlack" }],
         [
            "ArialBlack-Italic",
            {
               alias: "ArialBlack",
               style: { style: "italic", weight: "900" },
               fallback: "Helvetica-BoldOblique",
            },
         ],
         ["ArialBlack-BoldItalic", { alias: "ArialBlack-Italic" }],
         [
            "ArialNarrow",
            {
               local: [
                  "Arial Narrow",
                  "Liberation Sans Narrow",
                  "Helvetica Condensed",
                  "Nimbus Sans Narrow",
                  "TeX Gyre Heros Cn",
               ],
               style: NORMAL,
               fallback: "Helvetica",
            },
         ],
         [
            "ArialNarrow-Bold",
            { alias: "ArialNarrow", style: BOLD, fallback: "Helvetica-Bold" },
         ],
         [
            "ArialNarrow-Italic",
            { alias: "ArialNarrow", style: ITALIC, fallback: "Helvetica-Oblique" },
         ],
         [
            "ArialNarrow-BoldItalic",
            {
               alias: "ArialNarrow",
               style: BOLDITALIC,
               fallback: "Helvetica-BoldOblique",
            },
         ],
         [
            "Calibri",
            { local: ["Calibri", "Carlito"], style: NORMAL, fallback: "Helvetica" },
         ],
         [
            "Calibri-Bold",
            { alias: "Calibri", style: BOLD, fallback: "Helvetica-Bold" },
         ],
         [
            "Calibri-Italic",
            { alias: "Calibri", style: ITALIC, fallback: "Helvetica-Oblique" },
         ],
         [
            "Calibri-BoldItalic",
            {
               alias: "Calibri",
               style: BOLDITALIC,
               fallback: "Helvetica-BoldOblique",
            },
         ],
         ["Wingdings", { local: ["Wingdings", "URW Dingbats"], style: NORMAL }],
         ["Wingdings-Regular", { alias: "Wingdings" }],
         ["Wingdings-Bold", { alias: "Wingdings" }],
      ]);
      var fontAliases = new Map([["Arial-Black", "ArialBlack"]]);
      function getStyleToAppend(style) {
         switch (style) {
            case BOLD:
               return "Bold";
            case ITALIC:
               return "Italic";
            case BOLDITALIC:
               return "Bold Italic";
            default:
               if (
                  (style === null || style === void 0 ? void 0 : style.weight) ===
                  "bold"
               ) {
                  return "Bold";
               }
               if (
                  (style === null || style === void 0 ? void 0 : style.style) ===
                  "italic"
               ) {
                  return "Italic";
               }
         }
         return "";
      }
      function getFamilyName(str) {
         var keywords = new Set([
            "thin",
            "extralight",
            "ultralight",
            "demilight",
            "semilight",
            "light",
            "book",
            "regular",
            "normal",
            "medium",
            "demibold",
            "semibold",
            "bold",
            "extrabold",
            "ultrabold",
            "black",
            "heavy",
            "extrablack",
            "ultrablack",
            "roman",
            "italic",
            "oblique",
            "ultracondensed",
            "extracondensed",
            "condensed",
            "semicondensed",
            "normal",
            "semiexpanded",
            "expanded",
            "extraexpanded",
            "ultraexpanded",
            "bolditalic",
         ]);
         return str
            .split(/[- ,+]+/g)
            .filter(function (tok) {
               return !keywords.has(tok.toLowerCase());
            })
            .join(" ");
      }
      function generateFont(_ref42, src, localFontPath) {
         var alias = _ref42.alias,
            local = _ref42.local,
            path = _ref42.path,
            fallback = _ref42.fallback,
            style = _ref42.style,
            ultimate = _ref42.ultimate;
         var useFallback =
            arguments.length > 3 && arguments[3] !== undefined
               ? arguments[3]
               : true;
         var usePath =
            arguments.length > 4 && arguments[4] !== undefined
               ? arguments[4]
               : true;
         var append =
            arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";
         var result = { style: null, ultimate: null };
         if (local) {
            var extra = append ? " ".concat(append) : "";
            var _iterator54 = _createForOfIteratorHelper(local),
               _step54;
            try {
               for (_iterator54.s(); !(_step54 = _iterator54.n()).done; ) {
                  var name = _step54.value;
                  src.push("local(".concat(name).concat(extra, ")"));
               }
            } catch (err) {
               _iterator54.e(err);
            } finally {
               _iterator54.f();
            }
         }
         if (alias) {
            var substitution = substitutionMap.get(alias);
            var aliasAppend = append || getStyleToAppend(style);
            Object.assign(
               result,
               generateFont(
                  substitution,
                  src,
                  localFontPath,
                  useFallback && !fallback,
                  usePath && !path,
                  aliasAppend,
               ),
            );
         }
         if (style) {
            result.style = style;
         }
         if (ultimate) {
            result.ultimate = ultimate;
         }
         if (useFallback && fallback) {
            var fallbackInfo = substitutionMap.get(fallback);
            var _generateFont = generateFont(
                  fallbackInfo,
                  src,
                  localFontPath,
                  useFallback,
                  usePath && !path,
                  append,
               ),
               fallbackUltimate = _generateFont.ultimate;
            result.ultimate || (result.ultimate = fallbackUltimate);
         }
         if (usePath && path && localFontPath) {
            src.push("url(".concat(localFontPath).concat(path, ")"));
         }
         return result;
      }
      function getFontSubstitution(
         systemFontCache,
         idFactory,
         localFontPath,
         baseFontName,
         standardFontName,
         type,
      ) {
         if (baseFontName.startsWith("InvalidPDFjsFont_")) {
            return null;
         }
         if (
            (type === "TrueType" || type === "Type1") &&
            /^[A-Z]{6}\+/.test(baseFontName)
         ) {
            baseFontName = baseFontName.slice(7);
         }
         baseFontName = normalizeFontName(baseFontName);
         var key = baseFontName;
         var substitutionInfo = systemFontCache.get(key);
         if (substitutionInfo) {
            return substitutionInfo;
         }
         var substitution = substitutionMap.get(baseFontName);
         if (!substitution) {
            var _iterator55 = _createForOfIteratorHelper(fontAliases),
               _step55;
            try {
               for (_iterator55.s(); !(_step55 = _iterator55.n()).done; ) {
                  var _step55$value = _slicedToArray(_step55.value, 2),
                     alias = _step55$value[0],
                     subst = _step55$value[1];
                  if (baseFontName.startsWith(alias)) {
                     baseFontName = ""
                        .concat(subst)
                        .concat(baseFontName.substring(alias.length));
                     substitution = substitutionMap.get(baseFontName);
                     break;
                  }
               }
            } catch (err) {
               _iterator55.e(err);
            } finally {
               _iterator55.f();
            }
         }
         var mustAddBaseFont = false;
         if (!substitution) {
            substitution = substitutionMap.get(standardFontName);
            mustAddBaseFont = true;
         }
         var loadedName = ""
            .concat(idFactory.getDocId(), "_s")
            .concat(idFactory.createFontId());
         if (!substitution) {
            if (!validateFontName(baseFontName)) {
               warn(
                  "Cannot substitute the font because of its name: ".concat(
                     baseFontName,
                  ),
               );
               systemFontCache.set(key, null);
               return null;
            }
            var bold = /bold/gi.test(baseFontName);
            var italic = /oblique|italic/gi.test(baseFontName);
            var _style =
               (bold && italic && BOLDITALIC) ||
               (bold && BOLD) ||
               (italic && ITALIC) ||
               NORMAL;
            substitutionInfo = {
               css: '"'.concat(getFamilyName(baseFontName), '",').concat(loadedName),
               guessFallback: true,
               loadedName: loadedName,
               baseFontName: baseFontName,
               src: "local(".concat(baseFontName, ")"),
               style: _style,
            };
            systemFontCache.set(key, substitutionInfo);
            return substitutionInfo;
         }
         var src = [];
         if (mustAddBaseFont && validateFontName(baseFontName)) {
            src.push("local(".concat(baseFontName, ")"));
         }
         var _generateFont2 = generateFont(substitution, src, localFontPath),
            style = _generateFont2.style,
            ultimate = _generateFont2.ultimate;
         var guessFallback = ultimate === null;
         var fallback = guessFallback ? "" : ",".concat(ultimate);
         substitutionInfo = {
            css: '"'
               .concat(getFamilyName(baseFontName), '",')
               .concat(loadedName)
               .concat(fallback),
            guessFallback: guessFallback,
            loadedName: loadedName,
            baseFontName: baseFontName,
            src: src.join(","),
            style: style,
         };
         systemFontCache.set(key, substitutionInfo);
         return substitutionInfo;
      } // CONCATENATED MODULE: ./src/core/image_resizer.js
      var MIN_IMAGE_DIM = 2048;
      var MAX_IMAGE_DIM = 65537;
      var MAX_ERROR = 128;
      var ImageResizer = /*#__PURE__*/ (function () {
         function ImageResizer(imgData, isMask) {
            _classCallCheck(this, ImageResizer);
            this._imgData = imgData;
            this._isMask = isMask;
         }
         return _createClass(
            ImageResizer,
            [
               {
                  key: "_createImage",
                  value: (function () {
                     var _createImage2 = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee5() {
                           var data,
                              blob,
                              bitmapPromise,
                              MAX_AREA,
                              MAX_DIM,
                              imgData,
                              width,
                              height,
                              minFactor,
                              firstFactor,
                              factor,
                              N,
                              steps,
                              newWidth,
                              newHeight,
                              bitmap,
                              _iterator56,
                              _step56,
                              step,
                              prevWidth,
                              prevHeight,
                              canvas,
                              ctx;
                           return _regenerator().w(
                              function (_context7) {
                                 while (1)
                                    switch (_context7.n) {
                                       case 0:
                                          data = this._encodeBMP();
                                          blob = new Blob([data.buffer], {
                                             type: "image/bmp",
                                          });
                                          bitmapPromise = createImageBitmap(blob);
                                          ((MAX_AREA = ImageResizer.MAX_AREA),
                                             (MAX_DIM = ImageResizer.MAX_DIM));
                                          imgData = this._imgData;
                                          ((width = imgData.width),
                                             (height = imgData.height));
                                          minFactor = Math.max(
                                             width / MAX_DIM,
                                             height / MAX_DIM,
                                             Math.sqrt((width * height) / MAX_AREA),
                                          );
                                          firstFactor = Math.max(minFactor, 2);
                                          factor =
                                             Math.round(10 * (minFactor + 1.25)) /
                                             10 /
                                             firstFactor;
                                          N = Math.floor(Math.log2(factor));
                                          steps = new Array(N + 2).fill(2);
                                          steps[0] = firstFactor;
                                          steps.splice(-1, 1, factor / (1 << N));
                                          newWidth = width;
                                          newHeight = height;
                                          _context7.n = 1;
                                          return bitmapPromise;
                                       case 1:
                                          bitmap = _context7.v;
                                          _iterator56 = _createForOfIteratorHelper(steps);
                                          try {
                                             for (
                                                _iterator56.s();
                                                !(_step56 = _iterator56.n()).done;

                                             ) {
                                                step = _step56.value;
                                                prevWidth = newWidth;
                                                prevHeight = newHeight;
                                                newWidth = Math.floor(newWidth / step) - 1;
                                                newHeight = Math.floor(newHeight / step) - 1;
                                                canvas = new OffscreenCanvas(
                                                   newWidth,
                                                   newHeight,
                                                );
                                                ctx = canvas.getContext("2d");
                                                ctx.drawImage(
                                                   bitmap,
                                                   0,
                                                   0,
                                                   prevWidth,
                                                   prevHeight,
                                                   0,
                                                   0,
                                                   newWidth,
                                                   newHeight,
                                                );
                                                bitmap = canvas.transferToImageBitmap();
                                             }
                                          } catch (err) {
                                             _iterator56.e(err);
                                          } finally {
                                             _iterator56.f();
                                          }
                                          imgData.data = null;
                                          imgData.bitmap = bitmap;
                                          imgData.width = newWidth;
                                          imgData.height = newHeight;
                                          return _context7.a(2, imgData);
                                    }
                              },
                              _callee5,
                              this,
                           );
                        }),
                     );
                     function _createImage() {
                        return _createImage2.apply(this, arguments);
                     }
                     return _createImage;
                  })(),
               },
               {
                  key: "_encodeBMP",
                  value: function _encodeBMP() {
                     var _this$_imgData = this._imgData,
                        width = _this$_imgData.width,
                        height = _this$_imgData.height,
                        kind = _this$_imgData.kind;
                     var data = this._imgData.data;
                     var bitPerPixel;
                     var colorTable = new Uint8Array(0);
                     var maskTable = colorTable;
                     var compression = 0;
                     switch (kind) {
                        case ImageKind.GRAYSCALE_1BPP: {
                           bitPerPixel = 1;
                           colorTable = new Uint8Array(
                              this._isMask
                                 ? [255, 255, 255, 255, 0, 0, 0, 0]
                                 : [0, 0, 0, 0, 255, 255, 255, 255],
                           );
                           var rowLen = (width + 7) >> 3;
                           var rowSize = (rowLen + 3) & -4;
                           if (rowLen !== rowSize) {
                              var newData = new Uint8Array(rowSize * height);
                              var k = 0;
                              for (
                                 var _i40 = 0, ii = height * rowLen;
                                 _i40 < ii;
                                 _i40 += rowLen, k += rowSize
                              ) {
                                 newData.set(data.subarray(_i40, _i40 + rowLen), k);
                              }
                              data = newData;
                           }
                           break;
                        }
                        case ImageKind.RGB_24BPP: {
                           bitPerPixel = 24;
                           if (width & 3) {
                              var _rowLen = 3 * width;
                              var _rowSize = (_rowLen + 3) & -4;
                              var extraLen = _rowSize - _rowLen;
                              var _newData = new Uint8Array(_rowSize * height);
                              var _k = 0;
                              for (
                                 var _i41 = 0, _ii9 = height * _rowLen;
                                 _i41 < _ii9;
                                 _i41 += _rowLen
                              ) {
                                 var row = data.subarray(_i41, _i41 + _rowLen);
                                 for (var j = 0; j < _rowLen; j += 3) {
                                    _newData[_k++] = row[j + 2];
                                    _newData[_k++] = row[j + 1];
                                    _newData[_k++] = row[j];
                                 }
                                 _k += extraLen;
                              }
                              data = _newData;
                           } else {
                              for (
                                 var _i42 = 0, _ii0 = data.length;
                                 _i42 < _ii0;
                                 _i42 += 3
                              ) {
                                 var tmp = data[_i42];
                                 data[_i42] = data[_i42 + 2];
                                 data[_i42 + 2] = tmp;
                              }
                           }
                           break;
                        }
                        case ImageKind.RGBA_32BPP:
                           bitPerPixel = 32;
                           compression = 3;
                           maskTable = new Uint8Array(4 + 4 + 4 + 4 + 52);
                           var _view = new DataView(maskTable.buffer);
                           if (FeatureTest.isLittleEndian) {
                              _view.setUint32(0, 0x000000ff, true);
                              _view.setUint32(4, 0x0000ff00, true);
                              _view.setUint32(8, 0x00ff0000, true);
                              _view.setUint32(12, 0xff000000, true);
                           } else {
                              _view.setUint32(0, 0xff000000, true);
                              _view.setUint32(4, 0x00ff0000, true);
                              _view.setUint32(8, 0x0000ff00, true);
                              _view.setUint32(12, 0x000000ff, true);
                           }
                           break;
                        default:
                           throw new Error("invalid format");
                     }
                     var i = 0;
                     var headerLength = 40 + maskTable.length;
                     var fileLength =
                        14 + headerLength + colorTable.length + data.length;
                     var bmpData = new Uint8Array(fileLength);
                     var view = new DataView(bmpData.buffer);
                     view.setUint16(i, 0x4d42, true);
                     i += 2;
                     view.setUint32(i, fileLength, true);
                     i += 4;
                     view.setUint32(i, 0, true);
                     i += 4;
                     view.setUint32(i, 14 + headerLength + colorTable.length, true);
                     i += 4;
                     view.setUint32(i, headerLength, true);
                     i += 4;
                     view.setInt32(i, width, true);
                     i += 4;
                     view.setInt32(i, -height, true);
                     i += 4;
                     view.setUint16(i, 1, true);
                     i += 2;
                     view.setUint16(i, bitPerPixel, true);
                     i += 2;
                     view.setUint32(i, compression, true);
                     i += 4;
                     view.setUint32(i, 0, true);
                     i += 4;
                     view.setInt32(i, 0, true);
                     i += 4;
                     view.setInt32(i, 0, true);
                     i += 4;
                     view.setUint32(i, colorTable.length / 4, true);
                     i += 4;
                     view.setUint32(i, 0, true);
                     i += 4;
                     bmpData.set(maskTable, i);
                     i += maskTable.length;
                     bmpData.set(colorTable, i);
                     i += colorTable.length;
                     bmpData.set(data, i);
                     return bmpData;
                  },
               },
            ],
            [
               {
                  key: "needsToBeResized",
                  value: function needsToBeResized(width, height) {
                     if (
                        width <= this._goodSquareLength &&
                        height <= this._goodSquareLength
                     ) {
                        return false;
                     }
                     var MAX_DIM = this.MAX_DIM;
                     if (width > MAX_DIM || height > MAX_DIM) {
                        return true;
                     }
                     var area = width * height;
                     if (this._hasMaxArea) {
                        return area > this.MAX_AREA;
                     }
                     if (area < Math.pow(this._goodSquareLength, 2)) {
                        return false;
                     }
                     if (this._areGoodDims(width, height)) {
                        this._goodSquareLength = Math.max(
                           this._goodSquareLength,
                           Math.floor(Math.sqrt(width * height)),
                        );
                        return false;
                     }
                     this._goodSquareLength = this._guessMax(
                        this._goodSquareLength,
                        MAX_DIM,
                        MAX_ERROR,
                        0,
                     );
                     var maxArea = (this.MAX_AREA = Math.pow(
                        this._goodSquareLength,
                        2,
                     ));
                     return area > maxArea;
                  },
               },
               {
                  key: "MAX_DIM",
                  get: function get() {
                     return shadow(
                        this,
                        "MAX_DIM",
                        this._guessMax(MIN_IMAGE_DIM, MAX_IMAGE_DIM, 0, 1),
                     );
                  },
               },
               {
                  key: "MAX_AREA",
                  get: function get() {
                     this._hasMaxArea = true;
                     return shadow(
                        this,
                        "MAX_AREA",
                        Math.pow(
                           this._guessMax(
                              ImageResizer._goodSquareLength,
                              this.MAX_DIM,
                              MAX_ERROR,
                              0,
                           ),
                           2,
                        ),
                     );
                  },
                  set: function set(area) {
                     if (area >= 0) {
                        this._hasMaxArea = true;
                        shadow(this, "MAX_AREA", area);
                     }
                  },
               },
               {
                  key: "setMaxArea",
                  value: function setMaxArea(area) {
                     if (!this._hasMaxArea) {
                        this.MAX_AREA = area >> 2;
                     }
                  },
               },
               {
                  key: "_areGoodDims",
                  value: function _areGoodDims(width, height) {
                     try {
                        var canvas = new OffscreenCanvas(width, height);
                        var ctx = canvas.getContext("2d");
                        ctx.fillRect(0, 0, 1, 1);
                        var opacity = ctx.getImageData(0, 0, 1, 1).data[3];
                        canvas.width = canvas.height = 1;
                        return opacity !== 0;
                     } catch (_unused8) {
                        return false;
                     }
                  },
               },
               {
                  key: "_guessMax",
                  value: function _guessMax(start, end, tolerance, defaultHeight) {
                     while (start + tolerance + 1 < end) {
                        var middle = Math.floor((start + end) / 2);
                        var height = defaultHeight || middle;
                        if (this._areGoodDims(middle, height)) {
                           start = middle;
                        } else {
                           end = middle;
                        }
                     }
                     return start;
                  },
               },
               {
                  key: "createImage",
                  value: (function () {
                     var _createImage3 = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee6(imgData) {
                           var isMask,
                              _args8 = arguments;
                           return _regenerator().w(function (_context8) {
                              while (1)
                                 switch (_context8.n) {
                                    case 0:
                                       isMask =
                                          _args8.length > 1 && _args8[1] !== undefined
                                             ? _args8[1]
                                             : false;
                                       return _context8.a(
                                          2,
                                          new ImageResizer(imgData, isMask)._createImage(),
                                       );
                                 }
                           }, _callee6);
                        }),
                     );
                     function createImage(_x17) {
                        return _createImage3.apply(this, arguments);
                     }
                     return createImage;
                  })(),
               },
            ],
         );
      })();
      ImageResizer._goodSquareLength = MIN_IMAGE_DIM; // CONCATENATED MODULE: ./src/shared/murmurhash3.js
      var SEED = 0xc3d2e1f0;
      var MASK_HIGH = 0xffff0000;
      var MASK_LOW = 0xffff;
      var MurmurHash3_64 = /*#__PURE__*/ (function () {
         function MurmurHash3_64(seed) {
            _classCallCheck(this, MurmurHash3_64);
            this.h1 = seed ? seed & 0xffffffff : SEED;
            this.h2 = seed ? seed & 0xffffffff : SEED;
         }
         return _createClass(MurmurHash3_64, [
            {
               key: "update",
               value: function update(input) {
                  var data, length;
                  if (typeof input === "string") {
                     data = new Uint8Array(input.length * 2);
                     length = 0;
                     for (var i = 0, ii = input.length; i < ii; i++) {
                        var code = input.charCodeAt(i);
                        if (code <= 0xff) {
                           data[length++] = code;
                        } else {
                           data[length++] = code >>> 8;
                           data[length++] = code & 0xff;
                        }
                     }
                  } else if (ArrayBuffer.isView(input)) {
                     data = input.slice();
                     length = data.byteLength;
                  } else {
                     throw new Error(
                        "Invalid data format, must be a string or TypedArray.",
                     );
                  }
                  var blockCounts = length >> 2;
                  var tailLength = length - blockCounts * 4;
                  var dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);
                  var k1 = 0,
                     k2 = 0;
                  var h1 = this.h1,
                     h2 = this.h2;
                  var C1 = 0xcc9e2d51,
                     C2 = 0x1b873593;
                  var C1_LOW = C1 & MASK_LOW,
                     C2_LOW = C2 & MASK_LOW;
                  for (var _i43 = 0; _i43 < blockCounts; _i43++) {
                     if (_i43 & 1) {
                        k1 = dataUint32[_i43];
                        k1 = ((k1 * C1) & MASK_HIGH) | ((k1 * C1_LOW) & MASK_LOW);
                        k1 = (k1 << 15) | (k1 >>> 17);
                        k1 = ((k1 * C2) & MASK_HIGH) | ((k1 * C2_LOW) & MASK_LOW);
                        h1 ^= k1;
                        h1 = (h1 << 13) | (h1 >>> 19);
                        h1 = h1 * 5 + 0xe6546b64;
                     } else {
                        k2 = dataUint32[_i43];
                        k2 = ((k2 * C1) & MASK_HIGH) | ((k2 * C1_LOW) & MASK_LOW);
                        k2 = (k2 << 15) | (k2 >>> 17);
                        k2 = ((k2 * C2) & MASK_HIGH) | ((k2 * C2_LOW) & MASK_LOW);
                        h2 ^= k2;
                        h2 = (h2 << 13) | (h2 >>> 19);
                        h2 = h2 * 5 + 0xe6546b64;
                     }
                  }
                  k1 = 0;
                  switch (tailLength) {
                     case 3:
                        k1 ^= data[blockCounts * 4 + 2] << 16;
                     case 2:
                        k1 ^= data[blockCounts * 4 + 1] << 8;
                     case 1:
                        k1 ^= data[blockCounts * 4];
                        k1 = ((k1 * C1) & MASK_HIGH) | ((k1 * C1_LOW) & MASK_LOW);
                        k1 = (k1 << 15) | (k1 >>> 17);
                        k1 = ((k1 * C2) & MASK_HIGH) | ((k1 * C2_LOW) & MASK_LOW);
                        if (blockCounts & 1) {
                           h1 ^= k1;
                        } else {
                           h2 ^= k1;
                        }
                  }
                  this.h1 = h1;
                  this.h2 = h2;
               },
            },
            {
               key: "hexdigest",
               value: function hexdigest() {
                  var h1 = this.h1,
                     h2 = this.h2;
                  h1 ^= h2 >>> 1;
                  h1 = ((h1 * 0xed558ccd) & MASK_HIGH) | ((h1 * 0x8ccd) & MASK_LOW);
                  h2 =
                     ((h2 * 0xff51afd7) & MASK_HIGH) |
                     (((((h2 << 16) | (h1 >>> 16)) * 0xafd7ed55) & MASK_HIGH) >>> 16);
                  h1 ^= h2 >>> 1;
                  h1 = ((h1 * 0x1a85ec53) & MASK_HIGH) | ((h1 * 0xec53) & MASK_LOW);
                  h2 =
                     ((h2 * 0xc4ceb9fe) & MASK_HIGH) |
                     (((((h2 << 16) | (h1 >>> 16)) * 0xb9fe1a85) & MASK_HIGH) >>> 16);
                  h1 ^= h2 >>> 1;
                  return (
                     (h1 >>> 0).toString(16).padStart(8, "0") +
                     (h2 >>> 0).toString(16).padStart(8, "0")
                  );
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/operator_list.js
      function addState(parentState, pattern, checkFn, iterateFn, processFn) {
         var state = parentState;
         for (var i = 0, ii = pattern.length - 1; i < ii; i++) {
            var _state;
            var item = pattern[i];
            state = (_state = state)[item] || (_state[item] = []);
         }
         state[pattern.at(-1)] = {
            checkFn: checkFn,
            iterateFn: iterateFn,
            processFn: processFn,
         };
      }
      var InitialState = [];
      addState(
         InitialState,
         [OPS.save, OPS.transform, OPS.paintInlineImageXObject, OPS.restore],
         null,
         function iterateInlineImageGroup(context, i) {
            var fnArray = context.fnArray;
            var iFirstSave = context.iCurr - 3;
            var pos = (i - iFirstSave) % 4;
            switch (pos) {
               case 0:
                  return fnArray[i] === OPS.save;
               case 1:
                  return fnArray[i] === OPS.transform;
               case 2:
                  return fnArray[i] === OPS.paintInlineImageXObject;
               case 3:
                  return fnArray[i] === OPS.restore;
            }
            throw new Error("iterateInlineImageGroup - invalid pos: ".concat(pos));
         },
         function foundInlineImageGroup(context, i) {
            var MIN_IMAGES_IN_INLINE_IMAGES_BLOCK = 10;
            var MAX_IMAGES_IN_INLINE_IMAGES_BLOCK = 200;
            var MAX_WIDTH = 1000;
            var IMAGE_PADDING = 1;
            var fnArray = context.fnArray,
               argsArray = context.argsArray;
            var curr = context.iCurr;
            var iFirstSave = curr - 3;
            var iFirstTransform = curr - 2;
            var iFirstPIIXO = curr - 1;
            var count = Math.min(
               Math.floor((i - iFirstSave) / 4),
               MAX_IMAGES_IN_INLINE_IMAGES_BLOCK,
            );
            if (count < MIN_IMAGES_IN_INLINE_IMAGES_BLOCK) {
               return i - ((i - iFirstSave) % 4);
            }
            var maxX = 0;
            var map = [];
            var maxLineHeight = 0;
            var currentX = IMAGE_PADDING,
               currentY = IMAGE_PADDING;
            for (var q = 0; q < count; q++) {
               var transform = argsArray[iFirstTransform + (q << 2)];
               var _img = argsArray[iFirstPIIXO + (q << 2)][0];
               if (currentX + _img.width > MAX_WIDTH) {
                  maxX = Math.max(maxX, currentX);
                  currentY += maxLineHeight + 2 * IMAGE_PADDING;
                  currentX = 0;
                  maxLineHeight = 0;
               }
               map.push({
                  transform: transform,
                  x: currentX,
                  y: currentY,
                  w: _img.width,
                  h: _img.height,
               });
               currentX += _img.width + 2 * IMAGE_PADDING;
               maxLineHeight = Math.max(maxLineHeight, _img.height);
            }
            var imgWidth = Math.max(maxX, currentX) + IMAGE_PADDING;
            var imgHeight = currentY + maxLineHeight + IMAGE_PADDING;
            var imgData = new Uint8Array(imgWidth * imgHeight * 4);
            var imgRowSize = imgWidth << 2;
            for (var _q = 0; _q < count; _q++) {
               var data = argsArray[iFirstPIIXO + (_q << 2)][0].data;
               var rowSize = map[_q].w << 2;
               var dataOffset = 0;
               var offset = (map[_q].x + map[_q].y * imgWidth) << 2;
               imgData.set(data.subarray(0, rowSize), offset - imgRowSize);
               for (var k = 0, kk = map[_q].h; k < kk; k++) {
                  imgData.set(
                     data.subarray(dataOffset, dataOffset + rowSize),
                     offset,
                  );
                  dataOffset += rowSize;
                  offset += imgRowSize;
               }
               imgData.set(data.subarray(dataOffset - rowSize, dataOffset), offset);
               while (offset >= 0) {
                  data[offset - 4] = data[offset];
                  data[offset - 3] = data[offset + 1];
                  data[offset - 2] = data[offset + 2];
                  data[offset - 1] = data[offset + 3];
                  data[offset + rowSize] = data[offset + rowSize - 4];
                  data[offset + rowSize + 1] = data[offset + rowSize - 3];
                  data[offset + rowSize + 2] = data[offset + rowSize - 2];
                  data[offset + rowSize + 3] = data[offset + rowSize - 1];
                  offset -= imgRowSize;
               }
            }
            var img = { width: imgWidth, height: imgHeight };
            if (context.isOffscreenCanvasSupported) {
               var canvas = new OffscreenCanvas(imgWidth, imgHeight);
               var ctx = canvas.getContext("2d");
               ctx.putImageData(
                  new ImageData(
                     new Uint8ClampedArray(imgData.buffer),
                     imgWidth,
                     imgHeight,
                  ),
                  0,
                  0,
               );
               img.bitmap = canvas.transferToImageBitmap();
               img.data = null;
            } else {
               img.kind = ImageKind.RGBA_32BPP;
               img.data = imgData;
            }
            fnArray.splice(iFirstSave, count * 4, OPS.paintInlineImageXObjectGroup);
            argsArray.splice(iFirstSave, count * 4, [img, map]);
            return iFirstSave + 1;
         },
      );
      addState(
         InitialState,
         [OPS.save, OPS.transform, OPS.paintImageMaskXObject, OPS.restore],
         null,
         function iterateImageMaskGroup(context, i) {
            var fnArray = context.fnArray;
            var iFirstSave = context.iCurr - 3;
            var pos = (i - iFirstSave) % 4;
            switch (pos) {
               case 0:
                  return fnArray[i] === OPS.save;
               case 1:
                  return fnArray[i] === OPS.transform;
               case 2:
                  return fnArray[i] === OPS.paintImageMaskXObject;
               case 3:
                  return fnArray[i] === OPS.restore;
            }
            throw new Error("iterateImageMaskGroup - invalid pos: ".concat(pos));
         },
         function foundImageMaskGroup(context, i) {
            var MIN_IMAGES_IN_MASKS_BLOCK = 10;
            var MAX_IMAGES_IN_MASKS_BLOCK = 100;
            var MAX_SAME_IMAGES_IN_MASKS_BLOCK = 1000;
            var fnArray = context.fnArray,
               argsArray = context.argsArray;
            var curr = context.iCurr;
            var iFirstSave = curr - 3;
            var iFirstTransform = curr - 2;
            var iFirstPIMXO = curr - 1;
            var count = Math.floor((i - iFirstSave) / 4);
            if (count < MIN_IMAGES_IN_MASKS_BLOCK) {
               return i - ((i - iFirstSave) % 4);
            }
            var isSameImage = false;
            var iTransform, transformArgs;
            var firstPIMXOArg0 = argsArray[iFirstPIMXO][0];
            var firstTransformArg0 = argsArray[iFirstTransform][0],
               firstTransformArg1 = argsArray[iFirstTransform][1],
               firstTransformArg2 = argsArray[iFirstTransform][2],
               firstTransformArg3 = argsArray[iFirstTransform][3];
            if (firstTransformArg1 === firstTransformArg2) {
               isSameImage = true;
               iTransform = iFirstTransform + 4;
               var iPIMXO = iFirstPIMXO + 4;
               for (var q = 1; q < count; q++, iTransform += 4, iPIMXO += 4) {
                  transformArgs = argsArray[iTransform];
                  if (
                     argsArray[iPIMXO][0] !== firstPIMXOArg0 ||
                     transformArgs[0] !== firstTransformArg0 ||
                     transformArgs[1] !== firstTransformArg1 ||
                     transformArgs[2] !== firstTransformArg2 ||
                     transformArgs[3] !== firstTransformArg3
                  ) {
                     if (q < MIN_IMAGES_IN_MASKS_BLOCK) {
                        isSameImage = false;
                     } else {
                        count = q;
                     }
                     break;
                  }
               }
            }
            if (isSameImage) {
               count = Math.min(count, MAX_SAME_IMAGES_IN_MASKS_BLOCK);
               var positions = new Float32Array(count * 2);
               iTransform = iFirstTransform;
               for (var _q2 = 0; _q2 < count; _q2++, iTransform += 4) {
                  transformArgs = argsArray[iTransform];
                  positions[_q2 << 1] = transformArgs[4];
                  positions[(_q2 << 1) + 1] = transformArgs[5];
               }
               fnArray.splice(
                  iFirstSave,
                  count * 4,
                  OPS.paintImageMaskXObjectRepeat,
               );
               argsArray.splice(iFirstSave, count * 4, [
                  firstPIMXOArg0,
                  firstTransformArg0,
                  firstTransformArg1,
                  firstTransformArg2,
                  firstTransformArg3,
                  positions,
               ]);
            } else {
               count = Math.min(count, MAX_IMAGES_IN_MASKS_BLOCK);
               var images = [];
               for (var _q3 = 0; _q3 < count; _q3++) {
                  transformArgs = argsArray[iFirstTransform + (_q3 << 2)];
                  var maskParams = argsArray[iFirstPIMXO + (_q3 << 2)][0];
                  images.push({
                     data: maskParams.data,
                     width: maskParams.width,
                     height: maskParams.height,
                     interpolate: maskParams.interpolate,
                     count: maskParams.count,
                     transform: transformArgs,
                  });
               }
               fnArray.splice(iFirstSave, count * 4, OPS.paintImageMaskXObjectGroup);
               argsArray.splice(iFirstSave, count * 4, [images]);
            }
            return iFirstSave + 1;
         },
      );
      addState(
         InitialState,
         [OPS.save, OPS.transform, OPS.paintImageXObject, OPS.restore],
         function (context) {
            var argsArray = context.argsArray;
            var iFirstTransform = context.iCurr - 2;
            return (
               argsArray[iFirstTransform][1] === 0 &&
               argsArray[iFirstTransform][2] === 0
            );
         },
         function iterateImageGroup(context, i) {
            var fnArray = context.fnArray,
               argsArray = context.argsArray;
            var iFirstSave = context.iCurr - 3;
            var pos = (i - iFirstSave) % 4;
            switch (pos) {
               case 0:
                  return fnArray[i] === OPS.save;
               case 1:
                  if (fnArray[i] !== OPS.transform) {
                     return false;
                  }
                  var iFirstTransform = context.iCurr - 2;
                  var firstTransformArg0 = argsArray[iFirstTransform][0];
                  var firstTransformArg3 = argsArray[iFirstTransform][3];
                  if (
                     argsArray[i][0] !== firstTransformArg0 ||
                     argsArray[i][1] !== 0 ||
                     argsArray[i][2] !== 0 ||
                     argsArray[i][3] !== firstTransformArg3
                  ) {
                     return false;
                  }
                  return true;
               case 2:
                  if (fnArray[i] !== OPS.paintImageXObject) {
                     return false;
                  }
                  var iFirstPIXO = context.iCurr - 1;
                  var firstPIXOArg0 = argsArray[iFirstPIXO][0];
                  if (argsArray[i][0] !== firstPIXOArg0) {
                     return false;
                  }
                  return true;
               case 3:
                  return fnArray[i] === OPS.restore;
            }
            throw new Error("iterateImageGroup - invalid pos: ".concat(pos));
         },
         function (context, i) {
            var MIN_IMAGES_IN_BLOCK = 3;
            var MAX_IMAGES_IN_BLOCK = 1000;
            var fnArray = context.fnArray,
               argsArray = context.argsArray;
            var curr = context.iCurr;
            var iFirstSave = curr - 3;
            var iFirstTransform = curr - 2;
            var iFirstPIXO = curr - 1;
            var firstPIXOArg0 = argsArray[iFirstPIXO][0];
            var firstTransformArg0 = argsArray[iFirstTransform][0];
            var firstTransformArg3 = argsArray[iFirstTransform][3];
            var count = Math.min(
               Math.floor((i - iFirstSave) / 4),
               MAX_IMAGES_IN_BLOCK,
            );
            if (count < MIN_IMAGES_IN_BLOCK) {
               return i - ((i - iFirstSave) % 4);
            }
            var positions = new Float32Array(count * 2);
            var iTransform = iFirstTransform;
            for (var q = 0; q < count; q++, iTransform += 4) {
               var transformArgs = argsArray[iTransform];
               positions[q << 1] = transformArgs[4];
               positions[(q << 1) + 1] = transformArgs[5];
            }
            var args = [
               firstPIXOArg0,
               firstTransformArg0,
               firstTransformArg3,
               positions,
            ];
            fnArray.splice(iFirstSave, count * 4, OPS.paintImageXObjectRepeat);
            argsArray.splice(iFirstSave, count * 4, args);
            return iFirstSave + 1;
         },
      );
      addState(
         InitialState,
         [
            OPS.beginText,
            OPS.setFont,
            OPS.setTextMatrix,
            OPS.showText,
            OPS.endText,
         ],
         null,
         function iterateShowTextGroup(context, i) {
            var fnArray = context.fnArray,
               argsArray = context.argsArray;
            var iFirstSave = context.iCurr - 4;
            var pos = (i - iFirstSave) % 5;
            switch (pos) {
               case 0:
                  return fnArray[i] === OPS.beginText;
               case 1:
                  return fnArray[i] === OPS.setFont;
               case 2:
                  return fnArray[i] === OPS.setTextMatrix;
               case 3:
                  if (fnArray[i] !== OPS.showText) {
                     return false;
                  }
                  var iFirstSetFont = context.iCurr - 3;
                  var firstSetFontArg0 = argsArray[iFirstSetFont][0];
                  var firstSetFontArg1 = argsArray[iFirstSetFont][1];
                  if (
                     argsArray[i][0] !== firstSetFontArg0 ||
                     argsArray[i][1] !== firstSetFontArg1
                  ) {
                     return false;
                  }
                  return true;
               case 4:
                  return fnArray[i] === OPS.endText;
            }
            throw new Error("iterateShowTextGroup - invalid pos: ".concat(pos));
         },
         function (context, i) {
            var MIN_CHARS_IN_BLOCK = 3;
            var MAX_CHARS_IN_BLOCK = 1000;
            var fnArray = context.fnArray,
               argsArray = context.argsArray;
            var curr = context.iCurr;
            var iFirstBeginText = curr - 4;
            var iFirstSetFont = curr - 3;
            var iFirstSetTextMatrix = curr - 2;
            var iFirstShowText = curr - 1;
            var iFirstEndText = curr;
            var firstSetFontArg0 = argsArray[iFirstSetFont][0];
            var firstSetFontArg1 = argsArray[iFirstSetFont][1];
            var count = Math.min(
               Math.floor((i - iFirstBeginText) / 5),
               MAX_CHARS_IN_BLOCK,
            );
            if (count < MIN_CHARS_IN_BLOCK) {
               return i - ((i - iFirstBeginText) % 5);
            }
            var iFirst = iFirstBeginText;
            if (
               iFirstBeginText >= 4 &&
               fnArray[iFirstBeginText - 4] === fnArray[iFirstSetFont] &&
               fnArray[iFirstBeginText - 3] === fnArray[iFirstSetTextMatrix] &&
               fnArray[iFirstBeginText - 2] === fnArray[iFirstShowText] &&
               fnArray[iFirstBeginText - 1] === fnArray[iFirstEndText] &&
               argsArray[iFirstBeginText - 4][0] === firstSetFontArg0 &&
               argsArray[iFirstBeginText - 4][1] === firstSetFontArg1
            ) {
               count++;
               iFirst -= 5;
            }
            var iEndText = iFirst + 4;
            for (var q = 1; q < count; q++) {
               fnArray.splice(iEndText, 3);
               argsArray.splice(iEndText, 3);
               iEndText += 2;
            }
            return iEndText + 1;
         },
      );
      var NullOptimizer = /*#__PURE__*/ (function () {
         function NullOptimizer(queue) {
            _classCallCheck(this, NullOptimizer);
            this.queue = queue;
         }
         return _createClass(NullOptimizer, [
            { key: "_optimize", value: function _optimize() {} },
            {
               key: "push",
               value: function push(fn, args) {
                  this.queue.fnArray.push(fn);
                  this.queue.argsArray.push(args);
                  this._optimize();
               },
            },
            { key: "flush", value: function flush() {} },
            { key: "reset", value: function reset() {} },
         ]);
      })();
      var QueueOptimizer = /*#__PURE__*/ (function (_NullOptimizer) {
         function QueueOptimizer(queue) {
            var _this42;
            _classCallCheck(this, QueueOptimizer);
            _this42 = _callSuper(this, QueueOptimizer, [queue]);
            _this42.state = null;
            _this42.context = {
               iCurr: 0,
               fnArray: queue.fnArray,
               argsArray: queue.argsArray,
               isOffscreenCanvasSupported: false,
            };
            _this42.match = null;
            _this42.lastProcessed = 0;
            return _this42;
         }
         _inherits(QueueOptimizer, _NullOptimizer);
         return _createClass(QueueOptimizer, [
            {
               key: "isOffscreenCanvasSupported",
               set: function set(value) {
                  this.context.isOffscreenCanvasSupported = value;
               },
            },
            {
               key: "_optimize",
               value: function _optimize() {
                  var fnArray = this.queue.fnArray;
                  var i = this.lastProcessed,
                     ii = fnArray.length;
                  var state = this.state;
                  var match = this.match;
                  if (!state && !match && i + 1 === ii && !InitialState[fnArray[i]]) {
                     this.lastProcessed = ii;
                     return;
                  }
                  var context = this.context;
                  while (i < ii) {
                     if (match) {
                        var iterate = (0, match.iterateFn)(context, i);
                        if (iterate) {
                           i++;
                           continue;
                        }
                        i = (0, match.processFn)(context, i + 1);
                        ii = fnArray.length;
                        match = null;
                        state = null;
                        if (i >= ii) {
                           break;
                        }
                     }
                     state = (state || InitialState)[fnArray[i]];
                     if (!state || Array.isArray(state)) {
                        i++;
                        continue;
                     }
                     context.iCurr = i;
                     i++;
                     if (state.checkFn && !(0, state.checkFn)(context)) {
                        state = null;
                        continue;
                     }
                     match = state;
                     state = null;
                  }
                  this.state = state;
                  this.match = match;
                  this.lastProcessed = i;
               },
            },
            {
               key: "flush",
               value: function flush() {
                  while (this.match) {
                     var length = this.queue.fnArray.length;
                     this.lastProcessed = (0, this.match.processFn)(
                        this.context,
                        length,
                     );
                     this.match = null;
                     this.state = null;
                     this._optimize();
                  }
               },
            },
            {
               key: "reset",
               value: function reset() {
                  this.state = null;
                  this.match = null;
                  this.lastProcessed = 0;
               },
            },
         ]);
      })(NullOptimizer);
      var OperatorList = /*#__PURE__*/ (function () {
         function OperatorList() {
            var intent =
               arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
            var streamSink = arguments.length > 1 ? arguments[1] : undefined;
            _classCallCheck(this, OperatorList);
            this._streamSink = streamSink;
            this.fnArray = [];
            this.argsArray = [];
            this.optimizer =
               streamSink && !(intent & RenderingIntentFlag.OPLIST)
                  ? new QueueOptimizer(this)
                  : new NullOptimizer(this);
            this.dependencies = new Set();
            this._totalLength = 0;
            this.weight = 0;
            this._resolved = streamSink ? null : Promise.resolve();
         }
         return _createClass(OperatorList, [
            {
               key: "isOffscreenCanvasSupported",
               set: function set(value) {
                  this.optimizer.isOffscreenCanvasSupported = value;
               },
            },
            {
               key: "length",
               get: function get() {
                  return this.argsArray.length;
               },
            },
            {
               key: "ready",
               get: function get() {
                  return this._resolved || this._streamSink.ready;
               },
            },
            {
               key: "totalLength",
               get: function get() {
                  return this._totalLength + this.length;
               },
            },
            {
               key: "addOp",
               value: function addOp(fn, args) {
                  this.optimizer.push(fn, args);
                  this.weight++;
                  if (this._streamSink) {
                     if (this.weight >= OperatorList.CHUNK_SIZE) {
                        this.flush();
                     } else if (
                        this.weight >= OperatorList.CHUNK_SIZE_ABOUT &&
                        (fn === OPS.restore || fn === OPS.endText)
                     ) {
                        this.flush();
                     }
                  }
               },
            },
            {
               key: "addImageOps",
               value: function addImageOps(fn, args, optionalContent) {
                  if (optionalContent !== undefined) {
                     this.addOp(OPS.beginMarkedContentProps, ["OC", optionalContent]);
                  }
                  this.addOp(fn, args);
                  if (optionalContent !== undefined) {
                     this.addOp(OPS.endMarkedContent, []);
                  }
               },
            },
            {
               key: "addDependency",
               value: function addDependency(dependency) {
                  if (this.dependencies.has(dependency)) {
                     return;
                  }
                  this.dependencies.add(dependency);
                  this.addOp(OPS.dependency, [dependency]);
               },
            },
            {
               key: "addDependencies",
               value: function addDependencies(dependencies) {
                  var _iterator57 = _createForOfIteratorHelper(dependencies),
                     _step57;
                  try {
                     for (_iterator57.s(); !(_step57 = _iterator57.n()).done; ) {
                        var dependency = _step57.value;
                        this.addDependency(dependency);
                     }
                  } catch (err) {
                     _iterator57.e(err);
                  } finally {
                     _iterator57.f();
                  }
               },
            },
            {
               key: "addOpList",
               value: function addOpList(opList) {
                  if (!(opList instanceof OperatorList)) {
                     warn('addOpList - ignoring invalid "opList" parameter.');
                     return;
                  }
                  var _iterator58 = _createForOfIteratorHelper(opList.dependencies),
                     _step58;
                  try {
                     for (_iterator58.s(); !(_step58 = _iterator58.n()).done; ) {
                        var dependency = _step58.value;
                        this.dependencies.add(dependency);
                     }
                  } catch (err) {
                     _iterator58.e(err);
                  } finally {
                     _iterator58.f();
                  }
                  for (var i = 0, ii = opList.length; i < ii; i++) {
                     this.addOp(opList.fnArray[i], opList.argsArray[i]);
                  }
               },
            },
            {
               key: "getIR",
               value: function getIR() {
                  return {
                     fnArray: this.fnArray,
                     argsArray: this.argsArray,
                     length: this.length,
                  };
               },
            },
            {
               key: "_transfers",
               get: function get() {
                  var _arg$data;
                  var transfers = [];
                  var fnArray = this.fnArray,
                     argsArray = this.argsArray,
                     length = this.length;
                  for (var i = 0; i < length; i++) {
                     switch (fnArray[i]) {
                        case OPS.paintInlineImageXObject:
                        case OPS.paintInlineImageXObjectGroup:
                        case OPS.paintImageMaskXObject:
                           var arg = argsArray[i][0];
                           if (
                              !arg.cached &&
                              ((_arg$data = arg.data) === null || _arg$data === void 0
                                 ? void 0
                                 : _arg$data.buffer) instanceof ArrayBuffer
                           ) {
                              transfers.push(arg.data.buffer);
                           }
                           break;
                     }
                  }
                  return transfers;
               },
            },
            {
               key: "flush",
               value: function flush() {
                  var lastChunk =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : false;
                  var separateAnnots =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : null;
                  this.optimizer.flush();
                  var length = this.length;
                  this._totalLength += length;
                  this._streamSink.enqueue(
                     {
                        fnArray: this.fnArray,
                        argsArray: this.argsArray,
                        lastChunk: lastChunk,
                        separateAnnots: separateAnnots,
                        length: length,
                     },
                     1,
                     this._transfers,
                  );
                  this.dependencies.clear();
                  this.fnArray.length = 0;
                  this.argsArray.length = 0;
                  this.weight = 0;
                  this.optimizer.reset();
               },
            },
         ]);
      })();
      _OperatorList = OperatorList;
      _defineProperty(OperatorList, "CHUNK_SIZE", 1000);
      _defineProperty(
         OperatorList,
         "CHUNK_SIZE_ABOUT",
         _OperatorList.CHUNK_SIZE - 5,
      ); // CONCATENATED MODULE: ./src/core/image.js
      function decodeAndClamp(value, addend, coefficient, max) {
         value = addend + value * coefficient;
         if (value < 0) {
            value = 0;
         } else if (value > max) {
            value = max;
         }
         return value;
      }
      function resizeImageMask(src, bpc, w1, h1, w2, h2) {
         var length = w2 * h2;
         var dest;
         if (bpc <= 8) {
            dest = new Uint8Array(length);
         } else if (bpc <= 16) {
            dest = new Uint16Array(length);
         } else {
            dest = new Uint32Array(length);
         }
         var xRatio = w1 / w2;
         var yRatio = h1 / h2;
         var i,
            j,
            py,
            newIndex = 0,
            oldIndex;
         var xScaled = new Uint16Array(w2);
         var w1Scanline = w1;
         for (i = 0; i < w2; i++) {
            xScaled[i] = Math.floor(i * xRatio);
         }
         for (i = 0; i < h2; i++) {
            py = Math.floor(i * yRatio) * w1Scanline;
            for (j = 0; j < w2; j++) {
               oldIndex = py + xScaled[j];
               dest[newIndex++] = src[oldIndex];
            }
         }
         return dest;
      }
      var PDFImage = /*#__PURE__*/ (function () {
         function PDFImage(_ref43) {
            var xref = _ref43.xref,
               res = _ref43.res,
               image = _ref43.image,
               _ref43$isInline = _ref43.isInline,
               isInline = _ref43$isInline === void 0 ? false : _ref43$isInline,
               _ref43$smask = _ref43.smask,
               smask = _ref43$smask === void 0 ? null : _ref43$smask,
               _ref43$mask = _ref43.mask,
               mask = _ref43$mask === void 0 ? null : _ref43$mask,
               _ref43$isMask = _ref43.isMask,
               isMask = _ref43$isMask === void 0 ? false : _ref43$isMask,
               pdfFunctionFactory = _ref43.pdfFunctionFactory,
               localColorSpaceCache = _ref43.localColorSpaceCache;
            _classCallCheck(this, PDFImage);
            this.image = image;
            var jpxDecode = false;
            var dict = image.dict;
            var filter = dict.get("F", "Filter");
            var filterName;
            if (filter instanceof Name) {
               filterName = filter.name;
            } else if (Array.isArray(filter)) {
               var filterZero = xref.fetchIfRef(filter[0]);
               if (filterZero instanceof Name) {
                  filterName = filterZero.name;
               }
            }
            switch (filterName) {
               case "JPXDecode":
                  var _JpxImage$parseImageP = JpxImage.parseImageProperties(
                     image.stream,
                  );
                  image.width = _JpxImage$parseImageP.width;
                  image.height = _JpxImage$parseImageP.height;
                  image.numComps = _JpxImage$parseImageP.componentsCount;
                  image.bitsPerComponent = _JpxImage$parseImageP.bitsPerComponent;
                  image.stream.reset();
                  jpxDecode = true;
                  break;
               case "JBIG2Decode":
                  image.bitsPerComponent = 1;
                  image.numComps = 1;
                  break;
            }
            var width = dict.get("W", "Width");
            var height = dict.get("H", "Height");
            if (
               Number.isInteger(image.width) &&
               image.width > 0 &&
               Number.isInteger(image.height) &&
               image.height > 0 &&
               (image.width !== width || image.height !== height)
            ) {
               warn(
                  "PDFImage - using the Width/Height of the image data, " +
                  "rather than the image dictionary.",
               );
               width = image.width;
               height = image.height;
            }
            if (width < 1 || height < 1) {
               throw new FormatError(
                  "Invalid image width: "
                     .concat(width, " or height: ")
                     .concat(height),
               );
            }
            this.width = width;
            this.height = height;
            this.interpolate = dict.get("I", "Interpolate");
            this.imageMask = dict.get("IM", "ImageMask") || false;
            this.matte = dict.get("Matte") || false;
            var bitsPerComponent = image.bitsPerComponent;
            if (!bitsPerComponent) {
               bitsPerComponent = dict.get("BPC", "BitsPerComponent");
               if (!bitsPerComponent) {
                  if (this.imageMask) {
                     bitsPerComponent = 1;
                  } else {
                     throw new FormatError(
                        "Bits per component missing in image: ".concat(this.imageMask),
                     );
                  }
               }
            }
            this.bpc = bitsPerComponent;
            if (!this.imageMask) {
               var colorSpace = dict.getRaw("CS") || dict.getRaw("ColorSpace");
               if (!colorSpace) {
                  info("JPX images (which do not require color spaces)");
                  switch (image.numComps) {
                     case 1:
                        colorSpace = Name.get("DeviceGray");
                        break;
                     case 3:
                        colorSpace = Name.get("DeviceRGB");
                        break;
                     case 4:
                        colorSpace = Name.get("DeviceCMYK");
                        break;
                     default:
                        throw new Error(
                           "JPX images with ".concat(
                              image.numComps,
                              " color components not supported.",
                           ),
                        );
                  }
               }
               this.colorSpace = ColorSpace.parse({
                  cs: colorSpace,
                  xref: xref,
                  resources: isInline ? res : null,
                  pdfFunctionFactory: pdfFunctionFactory,
                  localColorSpaceCache: localColorSpaceCache,
               });
               this.numComps = this.colorSpace.numComps;
               this.ignoreColorSpace =
                  jpxDecode && this.colorSpace.name === "Indexed";
            }
            this.decode = dict.getArray("D", "Decode");
            this.needsDecode = false;
            if (
               this.decode &&
               ((this.colorSpace &&
                     !this.colorSpace.isDefaultDecode(this.decode, bitsPerComponent)) ||
                  (isMask && !ColorSpace.isDefaultDecode(this.decode, 1)))
            ) {
               var _this$colorSpace;
               this.needsDecode = true;
               var max = (1 << bitsPerComponent) - 1;
               this.decodeCoefficients = [];
               this.decodeAddends = [];
               var isIndexed =
                  ((_this$colorSpace = this.colorSpace) === null ||
                  _this$colorSpace === void 0
                     ? void 0
                     : _this$colorSpace.name) === "Indexed";
               for (var i = 0, j = 0; i < this.decode.length; i += 2, ++j) {
                  var dmin = this.decode[i];
                  var dmax = this.decode[i + 1];
                  this.decodeCoefficients[j] = isIndexed
                     ? (dmax - dmin) / max
                     : dmax - dmin;
                  this.decodeAddends[j] = isIndexed ? dmin : max * dmin;
               }
            }
            if (smask) {
               this.smask = new PDFImage({
                  xref: xref,
                  res: res,
                  image: smask,
                  isInline: isInline,
                  pdfFunctionFactory: pdfFunctionFactory,
                  localColorSpaceCache: localColorSpaceCache,
               });
            } else if (mask) {
               if (mask instanceof BaseStream) {
                  var maskDict = mask.dict,
                     imageMask = maskDict.get("IM", "ImageMask");
                  if (!imageMask) {
                     warn("Ignoring /Mask in image without /ImageMask.");
                  } else {
                     this.mask = new PDFImage({
                        xref: xref,
                        res: res,
                        image: mask,
                        isInline: isInline,
                        isMask: true,
                        pdfFunctionFactory: pdfFunctionFactory,
                        localColorSpaceCache: localColorSpaceCache,
                     });
                  }
               } else {
                  this.mask = mask;
               }
            }
         }
         return _createClass(
            PDFImage,
            [
               {
                  key: "drawWidth",
                  get: function get() {
                     var _this$smask, _this$mask;
                     return Math.max(
                        this.width,
                        ((_this$smask = this.smask) === null || _this$smask === void 0
                           ? void 0
                           : _this$smask.width) || 0,
                        ((_this$mask = this.mask) === null || _this$mask === void 0
                           ? void 0
                           : _this$mask.width) || 0,
                     );
                  },
               },
               {
                  key: "drawHeight",
                  get: function get() {
                     var _this$smask2, _this$mask2;
                     return Math.max(
                        this.height,
                        ((_this$smask2 = this.smask) === null || _this$smask2 === void 0
                           ? void 0
                           : _this$smask2.height) || 0,
                        ((_this$mask2 = this.mask) === null || _this$mask2 === void 0
                           ? void 0
                           : _this$mask2.height) || 0,
                     );
                  },
               },
               {
                  key: "decodeBuffer",
                  value: function decodeBuffer(buffer) {
                     var bpc = this.bpc;
                     var numComps = this.numComps;
                     var decodeAddends = this.decodeAddends;
                     var decodeCoefficients = this.decodeCoefficients;
                     var max = (1 << bpc) - 1;
                     var i, ii;
                     if (bpc === 1) {
                        for (i = 0, ii = buffer.length; i < ii; i++) {
                           buffer[i] = +!buffer[i];
                        }
                        return;
                     }
                     var index = 0;
                     for (i = 0, ii = this.width * this.height; i < ii; i++) {
                        for (var j = 0; j < numComps; j++) {
                           buffer[index] = decodeAndClamp(
                              buffer[index],
                              decodeAddends[j],
                              decodeCoefficients[j],
                              max,
                           );
                           index++;
                        }
                     }
                  },
               },
               {
                  key: "getComponents",
                  value: function getComponents(buffer) {
                     var bpc = this.bpc;
                     if (bpc === 8) {
                        return buffer;
                     }
                     var width = this.width;
                     var height = this.height;
                     var numComps = this.numComps;
                     var length = width * height * numComps;
                     var bufferPos = 0;
                     var output;
                     if (bpc <= 8) {
                        output = new Uint8Array(length);
                     } else if (bpc <= 16) {
                        output = new Uint16Array(length);
                     } else {
                        output = new Uint32Array(length);
                     }
                     var rowComps = width * numComps;
                     var max = (1 << bpc) - 1;
                     var i = 0,
                        ii,
                        buf;
                     if (bpc === 1) {
                        var mask, loop1End, loop2End;
                        for (var j = 0; j < height; j++) {
                           loop1End = i + (rowComps & ~7);
                           loop2End = i + rowComps;
                           while (i < loop1End) {
                              buf = buffer[bufferPos++];
                              output[i] = (buf >> 7) & 1;
                              output[i + 1] = (buf >> 6) & 1;
                              output[i + 2] = (buf >> 5) & 1;
                              output[i + 3] = (buf >> 4) & 1;
                              output[i + 4] = (buf >> 3) & 1;
                              output[i + 5] = (buf >> 2) & 1;
                              output[i + 6] = (buf >> 1) & 1;
                              output[i + 7] = buf & 1;
                              i += 8;
                           }
                           if (i < loop2End) {
                              buf = buffer[bufferPos++];
                              mask = 128;
                              while (i < loop2End) {
                                 output[i++] = +!!(buf & mask);
                                 mask >>= 1;
                              }
                           }
                        }
                     } else {
                        var bits = 0;
                        buf = 0;
                        for (i = 0, ii = length; i < ii; ++i) {
                           if (i % rowComps === 0) {
                              buf = 0;
                              bits = 0;
                           }
                           while (bits < bpc) {
                              buf = (buf << 8) | buffer[bufferPos++];
                              bits += 8;
                           }
                           var remainingBits = bits - bpc;
                           var value = buf >> remainingBits;
                           if (value < 0) {
                              value = 0;
                           } else if (value > max) {
                              value = max;
                           }
                           output[i] = value;
                           buf &= (1 << remainingBits) - 1;
                           bits = remainingBits;
                        }
                     }
                     return output;
                  },
               },
               {
                  key: "fillOpacity",
                  value: function fillOpacity(
                     rgbaBuf,
                     width,
                     height,
                     actualHeight,
                     image,
                  ) {
                     var smask = this.smask;
                     var mask = this.mask;
                     var alphaBuf, sw, sh, i, ii, j;
                     if (smask) {
                        sw = smask.width;
                        sh = smask.height;
                        alphaBuf = new Uint8ClampedArray(sw * sh);
                        smask.fillGrayBuffer(alphaBuf);
                        if (sw !== width || sh !== height) {
                           alphaBuf = resizeImageMask(
                              alphaBuf,
                              smask.bpc,
                              sw,
                              sh,
                              width,
                              height,
                           );
                        }
                     } else if (mask) {
                        if (mask instanceof PDFImage) {
                           sw = mask.width;
                           sh = mask.height;
                           alphaBuf = new Uint8ClampedArray(sw * sh);
                           mask.numComps = 1;
                           mask.fillGrayBuffer(alphaBuf);
                           for (i = 0, ii = sw * sh; i < ii; ++i) {
                              alphaBuf[i] = 255 - alphaBuf[i];
                           }
                           if (sw !== width || sh !== height) {
                              alphaBuf = resizeImageMask(
                                 alphaBuf,
                                 mask.bpc,
                                 sw,
                                 sh,
                                 width,
                                 height,
                              );
                           }
                        } else if (Array.isArray(mask)) {
                           alphaBuf = new Uint8ClampedArray(width * height);
                           var numComps = this.numComps;
                           for (i = 0, ii = width * height; i < ii; ++i) {
                              var opacity = 0;
                              var imageOffset = i * numComps;
                              for (j = 0; j < numComps; ++j) {
                                 var color = image[imageOffset + j];
                                 var maskOffset = j * 2;
                                 if (
                                    color < mask[maskOffset] ||
                                    color > mask[maskOffset + 1]
                                 ) {
                                    opacity = 255;
                                    break;
                                 }
                              }
                              alphaBuf[i] = opacity;
                           }
                        } else {
                           throw new FormatError("Unknown mask format.");
                        }
                     }
                     if (alphaBuf) {
                        for (
                           i = 0, j = 3, ii = width * actualHeight;
                           i < ii;
                           ++i, j += 4
                        ) {
                           rgbaBuf[j] = alphaBuf[i];
                        }
                     } else {
                        for (
                           i = 0, j = 3, ii = width * actualHeight;
                           i < ii;
                           ++i, j += 4
                        ) {
                           rgbaBuf[j] = 255;
                        }
                     }
                  },
               },
               {
                  key: "undoPreblend",
                  value: function undoPreblend(buffer, width, height) {
                     var _this$smask3;
                     var matte =
                        (_this$smask3 = this.smask) === null || _this$smask3 === void 0
                           ? void 0
                           : _this$smask3.matte;
                     if (!matte) {
                        return;
                     }
                     var matteRgb = this.colorSpace.getRgb(matte, 0);
                     var matteR = matteRgb[0];
                     var matteG = matteRgb[1];
                     var matteB = matteRgb[2];
                     var length = width * height * 4;
                     for (var i = 0; i < length; i += 4) {
                        var alpha = buffer[i + 3];
                        if (alpha === 0) {
                           buffer[i] = 255;
                           buffer[i + 1] = 255;
                           buffer[i + 2] = 255;
                           continue;
                        }
                        var k = 255 / alpha;
                        buffer[i] = (buffer[i] - matteR) * k + matteR;
                        buffer[i + 1] = (buffer[i + 1] - matteG) * k + matteG;
                        buffer[i + 2] = (buffer[i + 2] - matteB) * k + matteB;
                     }
                  },
               },
               {
                  key: "createImageData",
                  value: (function () {
                     var _createImageData = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee7() {
                           var forceRGBA,
                              isOffscreenCanvasSupported,
                              drawWidth,
                              drawHeight,
                              imgData,
                              numComps,
                              originalWidth,
                              originalHeight,
                              bpc,
                              rowBytes,
                              mustBeResized,
                              kind,
                              _data,
                              buffer,
                              i,
                              ii,
                              imageLength,
                              isHandled,
                              rgba,
                              imgArray,
                              actualHeight,
                              comps,
                              alpha01,
                              maybeUndoPreblend,
                              canvas,
                              ctx,
                              canvasImgData,
                              data,
                              arr,
                              bitmap,
                              _args9 = arguments,
                              _t6,
                              _t7;
                           return _regenerator().w(
                              function (_context9) {
                                 while (1)
                                    switch (_context9.n) {
                                       case 0:
                                          forceRGBA =
                                             _args9.length > 0 && _args9[0] !== undefined
                                                ? _args9[0]
                                                : false;
                                          isOffscreenCanvasSupported =
                                             _args9.length > 1 && _args9[1] !== undefined
                                                ? _args9[1]
                                                : false;
                                          drawWidth = this.drawWidth;
                                          drawHeight = this.drawHeight;
                                          imgData = {
                                             width: drawWidth,
                                             height: drawHeight,
                                             interpolate: this.interpolate,
                                             kind: 0,
                                             data: null,
                                          };
                                          numComps = this.numComps;
                                          originalWidth = this.width;
                                          originalHeight = this.height;
                                          bpc = this.bpc;
                                          rowBytes =
                                             (originalWidth * numComps * bpc + 7) >> 3;
                                          mustBeResized =
                                             isOffscreenCanvasSupported &&
                                             ImageResizer.needsToBeResized(
                                                drawWidth,
                                                drawHeight,
                                             );
                                          if (forceRGBA) {
                                             _context9.n = 13;
                                             break;
                                          }
                                          if (
                                             this.colorSpace.name === "DeviceGray" &&
                                             bpc === 1
                                          ) {
                                             kind = ImageKind.GRAYSCALE_1BPP;
                                          } else if (
                                             this.colorSpace.name === "DeviceRGB" &&
                                             bpc === 8 &&
                                             !this.needsDecode
                                          ) {
                                             kind = ImageKind.RGB_24BPP;
                                          }
                                          if (
                                             !(
                                                kind &&
                                                !this.smask &&
                                                !this.mask &&
                                                drawWidth === originalWidth &&
                                                drawHeight === originalHeight
                                             )
                                          ) {
                                             _context9.n = 3;
                                             break;
                                          }
                                          _data = this.getImageBytes(
                                             originalHeight * rowBytes,
                                             {},
                                          );
                                          if (!isOffscreenCanvasSupported) {
                                             _context9.n = 2;
                                             break;
                                          }
                                          if (!mustBeResized) {
                                             _context9.n = 1;
                                             break;
                                          }
                                          return _context9.a(
                                             2,
                                             ImageResizer.createImage(
                                                {
                                                   data: _data,
                                                   kind: kind,
                                                   width: drawWidth,
                                                   height: drawHeight,
                                                   interpolate: this.interpolate,
                                                },
                                                this.needsDecode,
                                             ),
                                          );
                                       case 1:
                                          return _context9.a(
                                             2,
                                             this.createBitmap(
                                                kind,
                                                originalWidth,
                                                originalHeight,
                                                _data,
                                             ),
                                          );
                                       case 2:
                                          imgData.kind = kind;
                                          imgData.data = _data;
                                          if (this.needsDecode) {
                                             assert(
                                                kind === ImageKind.GRAYSCALE_1BPP,
                                                "PDFImage.createImageData: The image must be grayscale.",
                                             );
                                             buffer = imgData.data;
                                             for (i = 0, ii = buffer.length; i < ii; i++) {
                                                buffer[i] ^= 0xff;
                                             }
                                          }
                                          return _context9.a(2, imgData);
                                       case 3:
                                          if (
                                             !(
                                                this.image instanceof JpegStream &&
                                                !this.smask &&
                                                !this.mask &&
                                                !this.needsDecode
                                             )
                                          ) {
                                             _context9.n = 13;
                                             break;
                                          }
                                          imageLength = originalHeight * rowBytes;
                                          if (
                                             !(isOffscreenCanvasSupported && !mustBeResized)
                                          ) {
                                             _context9.n = 9;
                                             break;
                                          }
                                          isHandled = false;
                                          _t6 = this.colorSpace.name;
                                          _context9.n =
                                             _t6 === "DeviceGray"
                                                ? 4
                                                : _t6 === "DeviceRGB"
                                                   ? 5
                                                   : _t6 === "DeviceCMYK"
                                                      ? 6
                                                      : 7;
                                          break;
                                       case 4:
                                          imageLength *= 4;
                                          isHandled = true;
                                          return _context9.a(3, 7);
                                       case 5:
                                          imageLength = (imageLength / 3) * 4;
                                          isHandled = true;
                                          return _context9.a(3, 7);
                                       case 6:
                                          isHandled = true;
                                          return _context9.a(3, 7);
                                       case 7:
                                          if (!isHandled) {
                                             _context9.n = 8;
                                             break;
                                          }
                                          rgba = this.getImageBytes(imageLength, {
                                             drawWidth: drawWidth,
                                             drawHeight: drawHeight,
                                             forceRGBA: true,
                                          });
                                          return _context9.a(
                                             2,
                                             this.createBitmap(
                                                ImageKind.RGBA_32BPP,
                                                drawWidth,
                                                drawHeight,
                                                rgba,
                                             ),
                                          );
                                       case 8:
                                          _context9.n = 13;
                                          break;
                                       case 9:
                                          _t7 = this.colorSpace.name;
                                          _context9.n =
                                             _t7 === "DeviceGray"
                                                ? 10
                                                : _t7 === "DeviceRGB"
                                                   ? 11
                                                   : _t7 === "DeviceCMYK"
                                                      ? 11
                                                      : 13;
                                          break;
                                       case 10:
                                          imageLength *= 3;
                                       case 11:
                                          imgData.kind = ImageKind.RGB_24BPP;
                                          imgData.data = this.getImageBytes(imageLength, {
                                             drawWidth: drawWidth,
                                             drawHeight: drawHeight,
                                             forceRGB: true,
                                          });
                                          if (!mustBeResized) {
                                             _context9.n = 12;
                                             break;
                                          }
                                          return _context9.a(
                                             2,
                                             ImageResizer.createImage(imgData),
                                          );
                                       case 12:
                                          return _context9.a(2, imgData);
                                       case 13:
                                          imgArray = this.getImageBytes(
                                             originalHeight * rowBytes,
                                             { internal: true },
                                          );
                                          actualHeight =
                                             0 |
                                             (((imgArray.length / rowBytes) * drawHeight) /
                                                originalHeight);
                                          comps = this.getComponents(imgArray);
                                          if (isOffscreenCanvasSupported && !mustBeResized) {
                                             canvas = new OffscreenCanvas(
                                                drawWidth,
                                                drawHeight,
                                             );
                                             ctx = canvas.getContext("2d");
                                             canvasImgData = ctx.createImageData(
                                                drawWidth,
                                                drawHeight,
                                             );
                                             data = canvasImgData.data;
                                          }
                                          imgData.kind = ImageKind.RGBA_32BPP;
                                          if (!forceRGBA && !this.smask && !this.mask) {
                                             if (
                                                !isOffscreenCanvasSupported ||
                                                mustBeResized
                                             ) {
                                                imgData.kind = ImageKind.RGB_24BPP;
                                                data = new Uint8ClampedArray(
                                                   drawWidth * drawHeight * 3,
                                                );
                                                alpha01 = 0;
                                             } else {
                                                arr = new Uint32Array(data.buffer);
                                                arr.fill(
                                                   FeatureTest.isLittleEndian
                                                      ? 0xff000000
                                                      : 0x000000ff,
                                                );
                                                alpha01 = 1;
                                             }
                                             maybeUndoPreblend = false;
                                          } else {
                                             if (
                                                !isOffscreenCanvasSupported ||
                                                mustBeResized
                                             ) {
                                                data = new Uint8ClampedArray(
                                                   drawWidth * drawHeight * 4,
                                                );
                                             }
                                             alpha01 = 1;
                                             maybeUndoPreblend = true;
                                             this.fillOpacity(
                                                data,
                                                drawWidth,
                                                drawHeight,
                                                actualHeight,
                                                comps,
                                             );
                                          }
                                          if (this.needsDecode) {
                                             this.decodeBuffer(comps);
                                          }
                                          this.colorSpace.fillRgb(
                                             data,
                                             originalWidth,
                                             originalHeight,
                                             drawWidth,
                                             drawHeight,
                                             actualHeight,
                                             bpc,
                                             comps,
                                             alpha01,
                                          );
                                          if (maybeUndoPreblend) {
                                             this.undoPreblend(data, drawWidth, actualHeight);
                                          }
                                          if (
                                             !(isOffscreenCanvasSupported && !mustBeResized)
                                          ) {
                                             _context9.n = 14;
                                             break;
                                          }
                                          ctx.putImageData(canvasImgData, 0, 0);
                                          bitmap = canvas.transferToImageBitmap();
                                          return _context9.a(2, {
                                             data: null,
                                             width: drawWidth,
                                             height: drawHeight,
                                             bitmap: bitmap,
                                             interpolate: this.interpolate,
                                          });
                                       case 14:
                                          imgData.data = data;
                                          if (!mustBeResized) {
                                             _context9.n = 15;
                                             break;
                                          }
                                          return _context9.a(
                                             2,
                                             ImageResizer.createImage(imgData),
                                          );
                                       case 15:
                                          return _context9.a(2, imgData);
                                    }
                              },
                              _callee7,
                              this,
                           );
                        }),
                     );
                     function createImageData() {
                        return _createImageData.apply(this, arguments);
                     }
                     return createImageData;
                  })(),
               },
               {
                  key: "fillGrayBuffer",
                  value: function fillGrayBuffer(buffer) {
                     var numComps = this.numComps;
                     if (numComps !== 1) {
                        throw new FormatError(
                           "Reading gray scale from a color image: ".concat(numComps),
                        );
                     }
                     var width = this.width;
                     var height = this.height;
                     var bpc = this.bpc;
                     var rowBytes = (width * numComps * bpc + 7) >> 3;
                     var imgArray = this.getImageBytes(height * rowBytes, {
                        internal: true,
                     });
                     var comps = this.getComponents(imgArray);
                     var i, length;
                     if (bpc === 1) {
                        length = width * height;
                        if (this.needsDecode) {
                           for (i = 0; i < length; ++i) {
                              buffer[i] = (comps[i] - 1) & 255;
                           }
                        } else {
                           for (i = 0; i < length; ++i) {
                              buffer[i] = -comps[i] & 255;
                           }
                        }
                        return;
                     }
                     if (this.needsDecode) {
                        this.decodeBuffer(comps);
                     }
                     length = width * height;
                     var scale = 255 / ((1 << bpc) - 1);
                     for (i = 0; i < length; ++i) {
                        buffer[i] = scale * comps[i];
                     }
                  },
               },
               {
                  key: "createBitmap",
                  value: function createBitmap(kind, width, height, src) {
                     var canvas = new OffscreenCanvas(width, height);
                     var ctx = canvas.getContext("2d");
                     var imgData;
                     if (kind === ImageKind.RGBA_32BPP) {
                        imgData = new ImageData(src, width, height);
                     } else {
                        imgData = ctx.createImageData(width, height);
                        convertToRGBA({
                           kind: kind,
                           src: src,
                           dest: new Uint32Array(imgData.data.buffer),
                           width: width,
                           height: height,
                           inverseDecode: this.needsDecode,
                        });
                     }
                     ctx.putImageData(imgData, 0, 0);
                     var bitmap = canvas.transferToImageBitmap();
                     return {
                        data: null,
                        width: width,
                        height: height,
                        bitmap: bitmap,
                        interpolate: this.interpolate,
                     };
                  },
               },
               {
                  key: "getImageBytes",
                  value: function getImageBytes(length, _ref44) {
                     var drawWidth = _ref44.drawWidth,
                        drawHeight = _ref44.drawHeight,
                        _ref44$forceRGBA = _ref44.forceRGBA,
                        forceRGBA =
                           _ref44$forceRGBA === void 0 ? false : _ref44$forceRGBA,
                        _ref44$forceRGB = _ref44.forceRGB,
                        forceRGB = _ref44$forceRGB === void 0 ? false : _ref44$forceRGB,
                        _ref44$internal = _ref44.internal,
                        internal = _ref44$internal === void 0 ? false : _ref44$internal;
                     this.image.reset();
                     this.image.drawWidth = drawWidth || this.width;
                     this.image.drawHeight = drawHeight || this.height;
                     this.image.forceRGBA = !!forceRGBA;
                     this.image.forceRGB = !!forceRGB;
                     var imageBytes = this.image.getBytes(
                        length,
                        this.ignoreColorSpace,
                     );
                     if (internal || this.image instanceof DecodeStream) {
                        return imageBytes;
                     }
                     assert(
                        imageBytes instanceof Uint8Array,
                        'PDFImage.getImageBytes: Unsupported "imageBytes" type.',
                     );
                     return new Uint8Array(imageBytes);
                  },
               },
            ],
            [
               {
                  key: "buildImage",
                  value: (function () {
                     var _buildImage = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee8(_ref45) {
                           var xref,
                              res,
                              image,
                              _ref45$isInline,
                              isInline,
                              pdfFunctionFactory,
                              localColorSpaceCache,
                              imageData,
                              smaskData,
                              maskData,
                              smask,
                              mask;
                           return _regenerator().w(function (_context0) {
                              while (1)
                                 switch (_context0.n) {
                                    case 0:
                                       ((xref = _ref45.xref),
                                          (res = _ref45.res),
                                          (image = _ref45.image),
                                          (_ref45$isInline = _ref45.isInline),
                                          (isInline =
                                             _ref45$isInline === void 0
                                                ? false
                                                : _ref45$isInline),
                                          (pdfFunctionFactory = _ref45.pdfFunctionFactory),
                                          (localColorSpaceCache =
                                             _ref45.localColorSpaceCache));
                                       imageData = image;
                                       smaskData = null;
                                       maskData = null;
                                       smask = image.dict.get("SMask");
                                       mask = image.dict.get("Mask");
                                       if (smask) {
                                          if (smask instanceof BaseStream) {
                                             smaskData = smask;
                                          } else {
                                             warn("Unsupported /SMask format.");
                                          }
                                       } else if (mask) {
                                          if (
                                             mask instanceof BaseStream ||
                                             Array.isArray(mask)
                                          ) {
                                             maskData = mask;
                                          } else {
                                             warn("Unsupported /Mask format.");
                                          }
                                       }
                                       return _context0.a(
                                          2,
                                          new PDFImage({
                                             xref: xref,
                                             res: res,
                                             image: imageData,
                                             isInline: isInline,
                                             smask: smaskData,
                                             mask: maskData,
                                             pdfFunctionFactory: pdfFunctionFactory,
                                             localColorSpaceCache: localColorSpaceCache,
                                          }),
                                       );
                                 }
                           }, _callee8);
                        }),
                     );
                     function buildImage(_x18) {
                        return _buildImage.apply(this, arguments);
                     }
                     return buildImage;
                  })(),
               },
               {
                  key: "createRawMask",
                  value: function createRawMask(_ref46) {
                     var imgArray = _ref46.imgArray,
                        width = _ref46.width,
                        height = _ref46.height,
                        imageIsFromDecodeStream = _ref46.imageIsFromDecodeStream,
                        inverseDecode = _ref46.inverseDecode,
                        interpolate = _ref46.interpolate;
                     var computedLength = ((width + 7) >> 3) * height;
                     var actualLength = imgArray.byteLength;
                     var haveFullData = computedLength === actualLength;
                     var data, i;
                     if (imageIsFromDecodeStream && (!inverseDecode || haveFullData)) {
                        data = imgArray;
                     } else if (!inverseDecode) {
                        data = new Uint8Array(imgArray);
                     } else {
                        data = new Uint8Array(computedLength);
                        data.set(imgArray);
                        data.fill(0xff, actualLength);
                     }
                     if (inverseDecode) {
                        for (i = 0; i < actualLength; i++) {
                           data[i] ^= 0xff;
                        }
                     }
                     return {
                        data: data,
                        width: width,
                        height: height,
                        interpolate: interpolate,
                     };
                  },
               },
               {
                  key: "createMask",
                  value: (function () {
                     var _createMask = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee9(_ref47) {
                           var imgArray,
                              width,
                              height,
                              imageIsFromDecodeStream,
                              inverseDecode,
                              interpolate,
                              _ref47$isOffscreenCan,
                              isOffscreenCanvasSupported,
                              isSingleOpaquePixel,
                              data,
                              canvas,
                              ctx,
                              imgData,
                              bitmap;
                           return _regenerator().w(
                              function (_context1) {
                                 while (1)
                                    switch (_context1.n) {
                                       case 0:
                                          ((imgArray = _ref47.imgArray),
                                             (width = _ref47.width),
                                             (height = _ref47.height),
                                             (imageIsFromDecodeStream =
                                                _ref47.imageIsFromDecodeStream),
                                             (inverseDecode = _ref47.inverseDecode),
                                             (interpolate = _ref47.interpolate),
                                             (_ref47$isOffscreenCan =
                                                _ref47.isOffscreenCanvasSupported),
                                             (isOffscreenCanvasSupported =
                                                _ref47$isOffscreenCan === void 0
                                                   ? false
                                                   : _ref47$isOffscreenCan));
                                          isSingleOpaquePixel =
                                             width === 1 &&
                                             height === 1 &&
                                             inverseDecode ===
                                             (imgArray.length === 0 ||
                                                !!(imgArray[0] & 128));
                                          if (!isSingleOpaquePixel) {
                                             _context1.n = 1;
                                             break;
                                          }
                                          return _context1.a(2, {
                                             isSingleOpaquePixel: isSingleOpaquePixel,
                                          });
                                       case 1:
                                          if (!isOffscreenCanvasSupported) {
                                             _context1.n = 3;
                                             break;
                                          }
                                          if (!ImageResizer.needsToBeResized(width, height)) {
                                             _context1.n = 2;
                                             break;
                                          }
                                          data = new Uint8ClampedArray(width * height * 4);
                                          convertBlackAndWhiteToRGBA({
                                             src: imgArray,
                                             dest: data,
                                             width: width,
                                             height: height,
                                             nonBlackColor: 0,
                                             inverseDecode: inverseDecode,
                                          });
                                          return _context1.a(
                                             2,
                                             ImageResizer.createImage({
                                                kind: ImageKind.RGBA_32BPP,
                                                data: data,
                                                width: width,
                                                height: height,
                                                interpolate: interpolate,
                                             }),
                                          );
                                       case 2:
                                          canvas = new OffscreenCanvas(width, height);
                                          ctx = canvas.getContext("2d");
                                          imgData = ctx.createImageData(width, height);
                                          convertBlackAndWhiteToRGBA({
                                             src: imgArray,
                                             dest: imgData.data,
                                             width: width,
                                             height: height,
                                             nonBlackColor: 0,
                                             inverseDecode: inverseDecode,
                                          });
                                          ctx.putImageData(imgData, 0, 0);
                                          bitmap = canvas.transferToImageBitmap();
                                          return _context1.a(2, {
                                             data: null,
                                             width: width,
                                             height: height,
                                             interpolate: interpolate,
                                             bitmap: bitmap,
                                          });
                                       case 3:
                                          return _context1.a(
                                             2,
                                             this.createRawMask({
                                                imgArray: imgArray,
                                                width: width,
                                                height: height,
                                                inverseDecode: inverseDecode,
                                                imageIsFromDecodeStream:
                                                imageIsFromDecodeStream,
                                                interpolate: interpolate,
                                             }),
                                          );
                                    }
                              },
                              _callee9,
                              this,
                           );
                        }),
                     );
                     function createMask(_x19) {
                        return _createMask.apply(this, arguments);
                     }
                     return createMask;
                  })(),
               },
            ],
         );
      })(); // CONCATENATED MODULE: ./src/core/evaluator.js
      var DefaultPartialEvaluatorOptions = Object.freeze({
         maxImageSize: -1,
         disableFontFace: false,
         ignoreErrors: false,
         isEvalSupported: true,
         isOffscreenCanvasSupported: false,
         canvasMaxAreaInBytes: -1,
         fontExtraProperties: false,
         useSystemFonts: true,
         cMapUrl: null,
         standardFontDataUrl: null,
      });
      var PatternType = { TILING: 1, SHADING: 2 };
      var TEXT_CHUNK_BATCH_SIZE = 10;
      var deferred = Promise.resolve();
      function normalizeBlendMode(value) {
         var parsingArray =
            arguments.length > 1 && arguments[1] !== undefined
               ? arguments[1]
               : false;
         if (Array.isArray(value)) {
            var _iterator59 = _createForOfIteratorHelper(value),
               _step59;
            try {
               for (_iterator59.s(); !(_step59 = _iterator59.n()).done; ) {
                  var val = _step59.value;
                  var maybeBM = normalizeBlendMode(val, true);
                  if (maybeBM) {
                     return maybeBM;
                  }
               }
            } catch (err) {
               _iterator59.e(err);
            } finally {
               _iterator59.f();
            }
            warn("Unsupported blend mode Array: ".concat(value));
            return "source-over";
         }
         if (!(value instanceof Name)) {
            if (parsingArray) {
               return null;
            }
            return "source-over";
         }
         switch (value.name) {
            case "Normal":
            case "Compatible":
               return "source-over";
            case "Multiply":
               return "multiply";
            case "Screen":
               return "screen";
            case "Overlay":
               return "overlay";
            case "Darken":
               return "darken";
            case "Lighten":
               return "lighten";
            case "ColorDodge":
               return "color-dodge";
            case "ColorBurn":
               return "color-burn";
            case "HardLight":
               return "hard-light";
            case "SoftLight":
               return "soft-light";
            case "Difference":
               return "difference";
            case "Exclusion":
               return "exclusion";
            case "Hue":
               return "hue";
            case "Saturation":
               return "saturation";
            case "Color":
               return "color";
            case "Luminosity":
               return "luminosity";
         }
         if (parsingArray) {
            return null;
         }
         warn("Unsupported blend mode: ".concat(value.name));
         return "source-over";
      }
      function incrementCachedImageMaskCount(data) {
         var _data$args$;
         if (
            data.fn === OPS.paintImageMaskXObject &&
            ((_data$args$ = data.args[0]) === null || _data$args$ === void 0
               ? void 0
               : _data$args$.count) > 0
         ) {
            data.args[0].count++;
         }
      }
      var TimeSlotManager = /*#__PURE__*/ (function () {
         function TimeSlotManager() {
            _classCallCheck(this, TimeSlotManager);
            this.reset();
         }
         return _createClass(TimeSlotManager, [
            {
               key: "check",
               value: function check() {
                  if (++this.checked < TimeSlotManager.CHECK_TIME_EVERY) {
                     return false;
                  }
                  this.checked = 0;
                  return this.endTime <= Date.now();
               },
            },
            {
               key: "reset",
               value: function reset() {
                  this.endTime = Date.now() + TimeSlotManager.TIME_SLOT_DURATION_MS;
                  this.checked = 0;
               },
            },
         ]);
      })();
      _defineProperty(TimeSlotManager, "TIME_SLOT_DURATION_MS", 20);
      _defineProperty(TimeSlotManager, "CHECK_TIME_EVERY", 100);
      var PartialEvaluator = /*#__PURE__*/ (function () {
         function PartialEvaluator(_ref48) {
            var xref = _ref48.xref,
               handler = _ref48.handler,
               pageIndex = _ref48.pageIndex,
               idFactory = _ref48.idFactory,
               fontCache = _ref48.fontCache,
               builtInCMapCache = _ref48.builtInCMapCache,
               standardFontDataCache = _ref48.standardFontDataCache,
               globalImageCache = _ref48.globalImageCache,
               systemFontCache = _ref48.systemFontCache,
               _ref48$options = _ref48.options,
               options = _ref48$options === void 0 ? null : _ref48$options;
            _classCallCheck(this, PartialEvaluator);
            this.xref = xref;
            this.handler = handler;
            this.pageIndex = pageIndex;
            this.idFactory = idFactory;
            this.fontCache = fontCache;
            this.builtInCMapCache = builtInCMapCache;
            this.standardFontDataCache = standardFontDataCache;
            this.globalImageCache = globalImageCache;
            this.systemFontCache = systemFontCache;
            this.options = options || DefaultPartialEvaluatorOptions;
            this.parsingType3Font = false;
            this._regionalImageCache = new RegionalImageCache();
            this._fetchBuiltInCMapBound = this.fetchBuiltInCMap.bind(this);
            ImageResizer.setMaxArea(this.options.canvasMaxAreaInBytes);
         }
         return _createClass(
            PartialEvaluator,
            [
               {
                  key: "_pdfFunctionFactory",
                  get: function get() {
                     var pdfFunctionFactory = new PDFFunctionFactory({
                        xref: this.xref,
                        isEvalSupported: this.options.isEvalSupported,
                     });
                     return shadow(this, "_pdfFunctionFactory", pdfFunctionFactory);
                  },
               },
               {
                  key: "clone",
                  value: function clone() {
                     var newOptions =
                        arguments.length > 0 && arguments[0] !== undefined
                           ? arguments[0]
                           : null;
                     var newEvaluator = Object.create(this);
                     newEvaluator.options = Object.assign(
                        Object.create(null),
                        this.options,
                        newOptions,
                     );
                     return newEvaluator;
                  },
               },
               {
                  key: "hasBlendModes",
                  value: function hasBlendModes(resources, nonBlendModesSet) {
                     if (!(resources instanceof Dict)) {
                        return false;
                     }
                     if (resources.objId && nonBlendModesSet.has(resources.objId)) {
                        return false;
                     }
                     var processed = new RefSet(nonBlendModesSet);
                     if (resources.objId) {
                        processed.put(resources.objId);
                     }
                     var nodes = [resources],
                        xref = this.xref;
                     while (nodes.length) {
                        var node = nodes.shift();
                        var graphicStates = node.get("ExtGState");
                        if (graphicStates instanceof Dict) {
                           var _iterator60 = _createForOfIteratorHelper(
                                 graphicStates.getRawValues(),
                              ),
                              _step60;
                           try {
                              for (_iterator60.s(); !(_step60 = _iterator60.n()).done; ) {
                                 var graphicState = _step60.value;
                                 if (graphicState instanceof Ref) {
                                    if (processed.has(graphicState)) {
                                       continue;
                                    }
                                    try {
                                       graphicState = xref.fetch(graphicState);
                                    } catch (ex) {
                                       processed.put(graphicState);
                                       info(
                                          'hasBlendModes - ignoring ExtGState: "'.concat(
                                             ex,
                                             '".',
                                          ),
                                       );
                                       continue;
                                    }
                                 }
                                 if (!(graphicState instanceof Dict)) {
                                    continue;
                                 }
                                 if (graphicState.objId) {
                                    processed.put(graphicState.objId);
                                 }
                                 var bm = graphicState.get("BM");
                                 if (bm instanceof Name) {
                                    if (bm.name !== "Normal") {
                                       return true;
                                    }
                                    continue;
                                 }
                                 if (bm !== undefined && Array.isArray(bm)) {
                                    var _iterator61 = _createForOfIteratorHelper(bm),
                                       _step61;
                                    try {
                                       for (
                                          _iterator61.s();
                                          !(_step61 = _iterator61.n()).done;

                                       ) {
                                          var element = _step61.value;
                                          if (
                                             element instanceof Name &&
                                             element.name !== "Normal"
                                          ) {
                                             return true;
                                          }
                                       }
                                    } catch (err) {
                                       _iterator61.e(err);
                                    } finally {
                                       _iterator61.f();
                                    }
                                 }
                              }
                           } catch (err) {
                              _iterator60.e(err);
                           } finally {
                              _iterator60.f();
                           }
                        }
                        var xObjects = node.get("XObject");
                        if (!(xObjects instanceof Dict)) {
                           continue;
                        }
                        var _iterator62 = _createForOfIteratorHelper(
                              xObjects.getRawValues(),
                           ),
                           _step62;
                        try {
                           for (_iterator62.s(); !(_step62 = _iterator62.n()).done; ) {
                              var xObject = _step62.value;
                              if (xObject instanceof Ref) {
                                 if (processed.has(xObject)) {
                                    continue;
                                 }
                                 try {
                                    xObject = xref.fetch(xObject);
                                 } catch (ex) {
                                    processed.put(xObject);
                                    info(
                                       'hasBlendModes - ignoring XObject: "'.concat(
                                          ex,
                                          '".',
                                       ),
                                    );
                                    continue;
                                 }
                              }
                              if (!(xObject instanceof BaseStream)) {
                                 continue;
                              }
                              if (xObject.dict.objId) {
                                 processed.put(xObject.dict.objId);
                              }
                              var xResources = xObject.dict.get("Resources");
                              if (!(xResources instanceof Dict)) {
                                 continue;
                              }
                              if (xResources.objId && processed.has(xResources.objId)) {
                                 continue;
                              }
                              nodes.push(xResources);
                              if (xResources.objId) {
                                 processed.put(xResources.objId);
                              }
                           }
                        } catch (err) {
                           _iterator62.e(err);
                        } finally {
                           _iterator62.f();
                        }
                     }
                     var _iterator63 = _createForOfIteratorHelper(processed),
                        _step63;
                     try {
                        for (_iterator63.s(); !(_step63 = _iterator63.n()).done; ) {
                           var ref = _step63.value;
                           nonBlendModesSet.put(ref);
                        }
                     } catch (err) {
                        _iterator63.e(err);
                     } finally {
                        _iterator63.f();
                     }
                     return false;
                  },
               },
               {
                  key: "fetchBuiltInCMap",
                  value: (function () {
                     var _fetchBuiltInCMap = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee0(name) {
                           var cachedData, data, url, response, _t8, _t9, _t0, _t1;
                           return _regenerator().w(
                              function (_context10) {
                                 while (1)
                                    switch (_context10.n) {
                                       case 0:
                                          cachedData = this.builtInCMapCache.get(name);
                                          if (!cachedData) {
                                             _context10.n = 1;
                                             break;
                                          }
                                          return _context10.a(2, cachedData);
                                       case 1:
                                          if (!(this.options.cMapUrl !== null)) {
                                             _context10.n = 5;
                                             break;
                                          }
                                          url = ""
                                             .concat(this.options.cMapUrl)
                                             .concat(name, ".bcmap");
                                          _context10.n = 2;
                                          return fetch(url);
                                       case 2:
                                          response = _context10.v;
                                          if (response.ok) {
                                             _context10.n = 3;
                                             break;
                                          }
                                          throw new Error(
                                             'fetchBuiltInCMap: failed to fetch file "'
                                                .concat(url, '" with "')
                                                .concat(response.statusText, '".'),
                                          );
                                       case 3:
                                          _t8 = Uint8Array;
                                          _context10.n = 4;
                                          return response.arrayBuffer();
                                       case 4:
                                          _t9 = _context10.v;
                                          _t0 = new _t8(_t9);
                                          _t1 = CMapCompressionType.BINARY;
                                          data = { cMapData: _t0, compressionType: _t1 };
                                          _context10.n = 7;
                                          break;
                                       case 5:
                                          _context10.n = 6;
                                          return this.handler.sendWithPromise(
                                             "FetchBuiltInCMap",
                                             { name: name },
                                          );
                                       case 6:
                                          data = _context10.v;
                                       case 7:
                                          if (
                                             data.compressionType !== CMapCompressionType.NONE
                                          ) {
                                             this.builtInCMapCache.set(name, data);
                                          }
                                          return _context10.a(2, data);
                                    }
                              },
                              _callee0,
                              this,
                           );
                        }),
                     );
                     function fetchBuiltInCMap(_x20) {
                        return _fetchBuiltInCMap.apply(this, arguments);
                     }
                     return fetchBuiltInCMap;
                  })(),
               },
               {
                  key: "fetchStandardFontData",
                  value: (function () {
                     var _fetchStandardFontData = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee1(name) {
                           var cachedData,
                              standardFontNameToFileName,
                              filename,
                              data,
                              url,
                              response,
                              _t10,
                              _t11,
                              _t12;
                           return _regenerator().w(
                              function (_context11) {
                                 while (1)
                                    switch ((_context11.p = _context11.n)) {
                                       case 0:
                                          cachedData = this.standardFontDataCache.get(name);
                                          if (!cachedData) {
                                             _context11.n = 1;
                                             break;
                                          }
                                          return _context11.a(2, new Stream(cachedData));
                                       case 1:
                                          if (
                                             !(
                                                this.options.useSystemFonts &&
                                                name !== "Symbol" &&
                                                name !== "ZapfDingbats"
                                             )
                                          ) {
                                             _context11.n = 2;
                                             break;
                                          }
                                          return _context11.a(2, null);
                                       case 2:
                                          ((standardFontNameToFileName =
                                             getFontNameToFileMap()),
                                             (filename = standardFontNameToFileName[name]));
                                          if (!(this.options.standardFontDataUrl !== null)) {
                                             _context11.n = 7;
                                             break;
                                          }
                                          url = ""
                                             .concat(this.options.standardFontDataUrl)
                                             .concat(filename);
                                          _context11.n = 3;
                                          return fetch(url);
                                       case 3:
                                          response = _context11.v;
                                          if (response.ok) {
                                             _context11.n = 4;
                                             break;
                                          }
                                          warn(
                                             'fetchStandardFontData: failed to fetch file "'
                                                .concat(url, '" with "')
                                                .concat(response.statusText, '".'),
                                          );
                                          _context11.n = 6;
                                          break;
                                       case 4:
                                          _t10 = Uint8Array;
                                          _context11.n = 5;
                                          return response.arrayBuffer();
                                       case 5:
                                          _t11 = _context11.v;
                                          data = new _t10(_t11);
                                       case 6:
                                          _context11.n = 10;
                                          break;
                                       case 7:
                                          _context11.p = 7;
                                          _context11.n = 8;
                                          return this.handler.sendWithPromise(
                                             "FetchStandardFontData",
                                             { filename: filename },
                                          );
                                       case 8:
                                          data = _context11.v;
                                          _context11.n = 10;
                                          break;
                                       case 9:
                                          _context11.p = 9;
                                          _t12 = _context11.v;
                                          warn(
                                             'fetchStandardFontData: failed to fetch file "'
                                                .concat(filename, '" with "')
                                                .concat(_t12, '".'),
                                          );
                                       case 10:
                                          if (data) {
                                             _context11.n = 11;
                                             break;
                                          }
                                          return _context11.a(2, null);
                                       case 11:
                                          this.standardFontDataCache.set(name, data);
                                          return _context11.a(2, new Stream(data));
                                    }
                              },
                              _callee1,
                              this,
                              [[7, 9]],
                           );
                        }),
                     );
                     function fetchStandardFontData(_x21) {
                        return _fetchStandardFontData.apply(this, arguments);
                     }
                     return fetchStandardFontData;
                  })(),
               },
               {
                  key: "buildFormXObject",
                  value: (function () {
                     var _buildFormXObject = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(
                           function _callee10(
                              resources,
                              xobj,
                              smask,
                              operatorList,
                              task,
                              initialState,
                              localColorSpaceCache,
                           ) {
                              var dict,
                                 matrix,
                                 bbox,
                                 optionalContent,
                                 groupOptions,
                                 group,
                                 groupSubtype,
                                 colorSpace,
                                 cs,
                                 cachedColorSpace,
                                 args;
                              return _regenerator().w(
                                 function (_context12) {
                                    while (1)
                                       switch (_context12.n) {
                                          case 0:
                                             dict = xobj.dict;
                                             matrix = dict.getArray("Matrix");
                                             bbox = dict.getArray("BBox");
                                             bbox =
                                                Array.isArray(bbox) && bbox.length === 4
                                                   ? Util.normalizeRect(bbox)
                                                   : null;
                                             if (!dict.has("OC")) {
                                                _context12.n = 2;
                                                break;
                                             }
                                             _context12.n = 1;
                                             return this.parseMarkedContentProps(
                                                dict.get("OC"),
                                                resources,
                                             );
                                          case 1:
                                             optionalContent = _context12.v;
                                          case 2:
                                             if (optionalContent !== undefined) {
                                                operatorList.addOp(
                                                   OPS.beginMarkedContentProps,
                                                   ["OC", optionalContent],
                                                );
                                             }
                                             group = dict.get("Group");
                                             if (!group) {
                                                _context12.n = 6;
                                                break;
                                             }
                                             groupOptions = {
                                                matrix: matrix,
                                                bbox: bbox,
                                                smask: smask,
                                                isolated: false,
                                                knockout: false,
                                             };
                                             groupSubtype = group.get("S");
                                             colorSpace = null;
                                             if (!isName(groupSubtype, "Transparency")) {
                                                _context12.n = 5;
                                                break;
                                             }
                                             groupOptions.isolated = group.get("I") || false;
                                             groupOptions.knockout = group.get("K") || false;
                                             if (!group.has("CS")) {
                                                _context12.n = 5;
                                                break;
                                             }
                                             cs = group.getRaw("CS");
                                             cachedColorSpace = ColorSpace.getCached(
                                                cs,
                                                this.xref,
                                                localColorSpaceCache,
                                             );
                                             if (!cachedColorSpace) {
                                                _context12.n = 3;
                                                break;
                                             }
                                             colorSpace = cachedColorSpace;
                                             _context12.n = 5;
                                             break;
                                          case 3:
                                             _context12.n = 4;
                                             return this.parseColorSpace({
                                                cs: cs,
                                                resources: resources,
                                                localColorSpaceCache: localColorSpaceCache,
                                             });
                                          case 4:
                                             colorSpace = _context12.v;
                                          case 5:
                                             if (
                                                smask !== null &&
                                                smask !== void 0 &&
                                                smask.backdrop
                                             ) {
                                                colorSpace ||
                                                (colorSpace = ColorSpace.singletons.rgb);
                                                smask.backdrop = colorSpace.getRgb(
                                                   smask.backdrop,
                                                   0,
                                                );
                                             }
                                             operatorList.addOp(OPS.beginGroup, [
                                                groupOptions,
                                             ]);
                                          case 6:
                                             args = group ? [matrix, null] : [matrix, bbox];
                                             operatorList.addOp(
                                                OPS.paintFormXObjectBegin,
                                                args,
                                             );
                                             _context12.n = 7;
                                             return this.getOperatorList({
                                                stream: xobj,
                                                task: task,
                                                resources: dict.get("Resources") || resources,
                                                operatorList: operatorList,
                                                initialState: initialState,
                                             });
                                          case 7:
                                             operatorList.addOp(OPS.paintFormXObjectEnd, []);
                                             if (group) {
                                                operatorList.addOp(OPS.endGroup, [
                                                   groupOptions,
                                                ]);
                                             }
                                             if (optionalContent !== undefined) {
                                                operatorList.addOp(OPS.endMarkedContent, []);
                                             }
                                          case 8:
                                             return _context12.a(2);
                                       }
                                 },
                                 _callee10,
                                 this,
                              );
                           },
                        ),
                     );
                     function buildFormXObject(
                        _x22,
                        _x23,
                        _x24,
                        _x25,
                        _x26,
                        _x27,
                        _x28,
                     ) {
                        return _buildFormXObject.apply(this, arguments);
                     }
                     return buildFormXObject;
                  })(),
               },
               {
                  key: "_sendImgData",
                  value: function _sendImgData(objId, imgData) {
                     var cacheGlobally =
                        arguments.length > 2 && arguments[2] !== undefined
                           ? arguments[2]
                           : false;
                     var transfers = imgData
                        ? [imgData.bitmap || imgData.data.buffer]
                        : null;
                     if (this.parsingType3Font || cacheGlobally) {
                        return this.handler.send(
                           "commonobj",
                           [objId, "Image", imgData],
                           transfers,
                        );
                     }
                     return this.handler.send(
                        "obj",
                        [objId, this.pageIndex, "Image", imgData],
                        transfers,
                     );
                  },
               },
               {
                  key: "buildPaintImageXObject",
                  value: (function () {
                     var _buildPaintImageXObject = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee12(_ref49) {
                           var _this43 = this;
                           var resources,
                              image,
                              _ref49$isInline,
                              isInline,
                              operatorList,
                              cacheKey,
                              localImageCache,
                              localColorSpaceCache,
                              dict,
                              imageRef,
                              w,
                              h,
                              maxImageSize,
                              msg,
                              optionalContent,
                              imageMask,
                              imgData,
                              args,
                              interpolate,
                              bitStrideLength,
                              imgArray,
                              decode,
                              cacheData,
                              _cacheData,
                              _objId,
                              _cacheData2,
                              SMALL_IMAGE_DIMENSIONS,
                              imageObj,
                              _msg,
                              objId,
                              cacheGlobally,
                              localLength,
                              _cacheData3,
                              _t13;
                           return _regenerator().w(
                              function (_context14) {
                                 while (1)
                                    switch ((_context14.p = _context14.n)) {
                                       case 0:
                                          ((resources = _ref49.resources),
                                             (image = _ref49.image),
                                             (_ref49$isInline = _ref49.isInline),
                                             (isInline =
                                                _ref49$isInline === void 0
                                                   ? false
                                                   : _ref49$isInline),
                                             (operatorList = _ref49.operatorList),
                                             (cacheKey = _ref49.cacheKey),
                                             (localImageCache = _ref49.localImageCache),
                                             (localColorSpaceCache =
                                                _ref49.localColorSpaceCache));
                                          dict = image.dict;
                                          imageRef = dict.objId;
                                          w = dict.get("W", "Width");
                                          h = dict.get("H", "Height");
                                          if (
                                             !(
                                                !(w && typeof w === "number") ||
                                                !(h && typeof h === "number")
                                             )
                                          ) {
                                             _context14.n = 1;
                                             break;
                                          }
                                          warn(
                                             "Image dimensions are missing, or not numbers.",
                                          );
                                          return _context14.a(2);
                                       case 1:
                                          maxImageSize = this.options.maxImageSize;
                                          if (
                                             !(maxImageSize !== -1 && w * h > maxImageSize)
                                          ) {
                                             _context14.n = 3;
                                             break;
                                          }
                                          msg =
                                             "Image exceeded maximum allowed size and was removed.";
                                          if (!this.options.ignoreErrors) {
                                             _context14.n = 2;
                                             break;
                                          }
                                          warn(msg);
                                          return _context14.a(2);
                                       case 2:
                                          throw new Error(msg);
                                       case 3:
                                          if (!dict.has("OC")) {
                                             _context14.n = 5;
                                             break;
                                          }
                                          _context14.n = 4;
                                          return this.parseMarkedContentProps(
                                             dict.get("OC"),
                                             resources,
                                          );
                                       case 4:
                                          optionalContent = _context14.v;
                                       case 5:
                                          imageMask = dict.get("IM", "ImageMask") || false;
                                          if (!imageMask) {
                                             _context14.n = 9;
                                             break;
                                          }
                                          interpolate = dict.get("I", "Interpolate");
                                          bitStrideLength = (w + 7) >> 3;
                                          imgArray = image.getBytes(bitStrideLength * h);
                                          decode = dict.getArray("D", "Decode");
                                          if (!this.parsingType3Font) {
                                             _context14.n = 6;
                                             break;
                                          }
                                          imgData = PDFImage.createRawMask({
                                             imgArray: imgArray,
                                             width: w,
                                             height: h,
                                             imageIsFromDecodeStream:
                                                image instanceof DecodeStream,
                                             inverseDecode:
                                                (decode === null || decode === void 0
                                                   ? void 0
                                                   : decode[0]) > 0,
                                             interpolate: interpolate,
                                          });
                                          imgData.cached = !!cacheKey;
                                          args = [imgData];
                                          operatorList.addImageOps(
                                             OPS.paintImageMaskXObject,
                                             args,
                                             optionalContent,
                                          );
                                          if (cacheKey) {
                                             cacheData = {
                                                fn: OPS.paintImageMaskXObject,
                                                args: args,
                                                optionalContent: optionalContent,
                                             };
                                             localImageCache.set(
                                                cacheKey,
                                                imageRef,
                                                cacheData,
                                             );
                                             if (imageRef) {
                                                this._regionalImageCache.set(
                                                   null,
                                                   imageRef,
                                                   cacheData,
                                                );
                                             }
                                          }
                                          return _context14.a(2);
                                       case 6:
                                          _context14.n = 7;
                                          return PDFImage.createMask({
                                             imgArray: imgArray,
                                             width: w,
                                             height: h,
                                             imageIsFromDecodeStream:
                                                image instanceof DecodeStream,
                                             inverseDecode:
                                                (decode === null || decode === void 0
                                                   ? void 0
                                                   : decode[0]) > 0,
                                             interpolate: interpolate,
                                             isOffscreenCanvasSupported:
                                             this.options.isOffscreenCanvasSupported,
                                          });
                                       case 7:
                                          imgData = _context14.v;
                                          if (!imgData.isSingleOpaquePixel) {
                                             _context14.n = 8;
                                             break;
                                          }
                                          operatorList.addImageOps(
                                             OPS.paintSolidColorImageMask,
                                             [],
                                             optionalContent,
                                          );
                                          if (cacheKey) {
                                             _cacheData = {
                                                fn: OPS.paintSolidColorImageMask,
                                                args: [],
                                                optionalContent: optionalContent,
                                             };
                                             localImageCache.set(
                                                cacheKey,
                                                imageRef,
                                                _cacheData,
                                             );
                                             if (imageRef) {
                                                this._regionalImageCache.set(
                                                   null,
                                                   imageRef,
                                                   _cacheData,
                                                );
                                             }
                                          }
                                          return _context14.a(2);
                                       case 8:
                                          _objId = "mask_".concat(
                                             this.idFactory.createObjId(),
                                          );
                                          operatorList.addDependency(_objId);
                                          imgData.dataLen = imgData.bitmap
                                             ? imgData.width * imgData.height * 4
                                             : imgData.data.length;
                                          this._sendImgData(_objId, imgData);
                                          args = [
                                             {
                                                data: _objId,
                                                width: imgData.width,
                                                height: imgData.height,
                                                interpolate: imgData.interpolate,
                                                count: 1,
                                             },
                                          ];
                                          operatorList.addImageOps(
                                             OPS.paintImageMaskXObject,
                                             args,
                                             optionalContent,
                                          );
                                          if (cacheKey) {
                                             _cacheData2 = {
                                                fn: OPS.paintImageMaskXObject,
                                                args: args,
                                                optionalContent: optionalContent,
                                             };
                                             localImageCache.set(
                                                cacheKey,
                                                imageRef,
                                                _cacheData2,
                                             );
                                             if (imageRef) {
                                                this._regionalImageCache.set(
                                                   null,
                                                   imageRef,
                                                   _cacheData2,
                                                );
                                             }
                                          }
                                          return _context14.a(2);
                                       case 9:
                                          SMALL_IMAGE_DIMENSIONS = 200;
                                          if (
                                             !(
                                                isInline &&
                                                w + h < SMALL_IMAGE_DIMENSIONS &&
                                                !dict.has("SMask") &&
                                                !dict.has("Mask")
                                             )
                                          ) {
                                             _context14.n = 15;
                                             break;
                                          }
                                          _context14.p = 10;
                                          imageObj = new PDFImage({
                                             xref: this.xref,
                                             res: resources,
                                             image: image,
                                             isInline: isInline,
                                             pdfFunctionFactory: this._pdfFunctionFactory,
                                             localColorSpaceCache: localColorSpaceCache,
                                          });
                                          _context14.n = 11;
                                          return imageObj.createImageData(true, false);
                                       case 11:
                                          imgData = _context14.v;
                                          operatorList.isOffscreenCanvasSupported =
                                             this.options.isOffscreenCanvasSupported;
                                          operatorList.addImageOps(
                                             OPS.paintInlineImageXObject,
                                             [imgData],
                                             optionalContent,
                                          );
                                          _context14.n = 14;
                                          break;
                                       case 12:
                                          _context14.p = 12;
                                          _t13 = _context14.v;
                                          _msg = 'Unable to decode inline image: "'.concat(
                                             _t13,
                                             '".',
                                          );
                                          if (this.options.ignoreErrors) {
                                             _context14.n = 13;
                                             break;
                                          }
                                          throw new Error(_msg);
                                       case 13:
                                          warn(_msg);
                                       case 14:
                                          return _context14.a(2);
                                       case 15:
                                          ((objId = "img_".concat(
                                             this.idFactory.createObjId(),
                                          )),
                                             (cacheGlobally = false));
                                          if (this.parsingType3Font) {
                                             objId = ""
                                                .concat(this.idFactory.getDocId(), "_type3_")
                                                .concat(objId);
                                          } else if (cacheKey && imageRef) {
                                             cacheGlobally = this.globalImageCache.shouldCache(
                                                imageRef,
                                                this.pageIndex,
                                             );
                                             if (cacheGlobally) {
                                                assert(
                                                   !isInline,
                                                   "Cannot cache an inline image globally.",
                                                );
                                                objId = ""
                                                   .concat(this.idFactory.getDocId(), "_")
                                                   .concat(objId);
                                             }
                                          }
                                          operatorList.addDependency(objId);
                                          args = [objId, w, h];
                                          operatorList.addImageOps(
                                             OPS.paintImageXObject,
                                             args,
                                             optionalContent,
                                          );
                                          if (
                                             !(
                                                cacheGlobally &&
                                                (w * h > 250000 ||
                                                   dict.has("SMask") ||
                                                   dict.has("Mask"))
                                             )
                                          ) {
                                             _context14.n = 17;
                                             break;
                                          }
                                          _context14.n = 16;
                                          return this.handler.sendWithPromise("commonobj", [
                                             objId,
                                             "CopyLocalImage",
                                             { imageRef: imageRef },
                                          ]);
                                       case 16:
                                          localLength = _context14.v;
                                          if (!localLength) {
                                             _context14.n = 17;
                                             break;
                                          }
                                          this.globalImageCache.setData(imageRef, {
                                             objId: objId,
                                             fn: OPS.paintImageXObject,
                                             args: args,
                                             optionalContent: optionalContent,
                                             byteSize: 0,
                                          });
                                          this.globalImageCache.addByteSize(
                                             imageRef,
                                             localLength,
                                          );
                                          return _context14.a(2);
                                       case 17:
                                          PDFImage.buildImage({
                                             xref: this.xref,
                                             res: resources,
                                             image: image,
                                             isInline: isInline,
                                             pdfFunctionFactory: this._pdfFunctionFactory,
                                             localColorSpaceCache: localColorSpaceCache,
                                          })
                                             .then(
                                                /*#__PURE__*/ (function () {
                                                   var _ref50 = _asyncToGenerator(
                                                      /*#__PURE__*/ _regenerator().m(
                                                         function _callee11(imageObj) {
                                                            return _regenerator().w(function (
                                                               _context13,
                                                            ) {
                                                               while (1)
                                                                  switch (_context13.n) {
                                                                     case 0:
                                                                        _context13.n = 1;
                                                                        return imageObj.createImageData(
                                                                           false,
                                                                           _this43.options
                                                                              .isOffscreenCanvasSupported,
                                                                        );
                                                                     case 1:
                                                                        imgData = _context13.v;
                                                                        imgData.dataLen = imgData.bitmap
                                                                           ? imgData.width *
                                                                           imgData.height *
                                                                           4
                                                                           : imgData.data.length;
                                                                        imgData.ref = imageRef;
                                                                        if (cacheGlobally) {
                                                                           _this43.globalImageCache.addByteSize(
                                                                              imageRef,
                                                                              imgData.dataLen,
                                                                           );
                                                                        }
                                                                        return _context13.a(
                                                                           2,
                                                                           _this43._sendImgData(
                                                                              objId,
                                                                              imgData,
                                                                              cacheGlobally,
                                                                           ),
                                                                        );
                                                                  }
                                                            }, _callee11);
                                                         },
                                                      ),
                                                   );
                                                   return function (_x30) {
                                                      return _ref50.apply(this, arguments);
                                                   };
                                                })(),
                                             )
                                             ["catch"](function (reason) {
                                             warn(
                                                'Unable to decode image "'
                                                   .concat(objId, '": "')
                                                   .concat(reason, '".'),
                                             );
                                             return _this43._sendImgData(
                                                objId,
                                                null,
                                                cacheGlobally,
                                             );
                                          });
                                          if (cacheKey) {
                                             _cacheData3 = {
                                                fn: OPS.paintImageXObject,
                                                args: args,
                                                optionalContent: optionalContent,
                                             };
                                             localImageCache.set(
                                                cacheKey,
                                                imageRef,
                                                _cacheData3,
                                             );
                                             if (imageRef) {
                                                this._regionalImageCache.set(
                                                   null,
                                                   imageRef,
                                                   _cacheData3,
                                                );
                                                if (cacheGlobally) {
                                                   this.globalImageCache.setData(imageRef, {
                                                      objId: objId,
                                                      fn: OPS.paintImageXObject,
                                                      args: args,
                                                      optionalContent: optionalContent,
                                                      byteSize: 0,
                                                   });
                                                }
                                             }
                                          }
                                       case 18:
                                          return _context14.a(2);
                                    }
                              },
                              _callee12,
                              this,
                              [[10, 12]],
                           );
                        }),
                     );
                     function buildPaintImageXObject(_x29) {
                        return _buildPaintImageXObject.apply(this, arguments);
                     }
                     return buildPaintImageXObject;
                  })(),
               },
               {
                  key: "handleSMask",
                  value: function handleSMask(
                     smask,
                     resources,
                     operatorList,
                     task,
                     stateManager,
                     localColorSpaceCache,
                  ) {
                     var smaskContent = smask.get("G");
                     var smaskOptions = {
                        subtype: smask.get("S").name,
                        backdrop: smask.get("BC"),
                     };
                     var transferObj = smask.get("TR");
                     if (isPDFFunction(transferObj)) {
                        var transferFn = this._pdfFunctionFactory.create(transferObj);
                        var transferMap = new Uint8Array(256);
                        var tmp = new Float32Array(1);
                        for (var i = 0; i < 256; i++) {
                           tmp[0] = i / 255;
                           transferFn(tmp, 0, tmp, 0);
                           transferMap[i] = (tmp[0] * 255) | 0;
                        }
                        smaskOptions.transferMap = transferMap;
                     }
                     return this.buildFormXObject(
                        resources,
                        smaskContent,
                        smaskOptions,
                        operatorList,
                        task,
                        stateManager.state.clone(),
                        localColorSpaceCache,
                     );
                  },
               },
               {
                  key: "handleTransferFunction",
                  value: function handleTransferFunction(tr) {
                     var transferArray;
                     if (Array.isArray(tr)) {
                        transferArray = tr;
                     } else if (isPDFFunction(tr)) {
                        transferArray = [tr];
                     } else {
                        return null;
                     }
                     var transferMaps = [];
                     var numFns = 0,
                        numEffectfulFns = 0;
                     var _iterator64 = _createForOfIteratorHelper(transferArray),
                        _step64;
                     try {
                        for (_iterator64.s(); !(_step64 = _iterator64.n()).done; ) {
                           var entry = _step64.value;
                           var transferObj = this.xref.fetchIfRef(entry);
                           numFns++;
                           if (isName(transferObj, "Identity")) {
                              transferMaps.push(null);
                              continue;
                           } else if (!isPDFFunction(transferObj)) {
                              return null;
                           }
                           var transferFn = this._pdfFunctionFactory.create(transferObj);
                           var transferMap = new Uint8Array(256),
                              tmp = new Float32Array(1);
                           for (var j = 0; j < 256; j++) {
                              tmp[0] = j / 255;
                              transferFn(tmp, 0, tmp, 0);
                              transferMap[j] = (tmp[0] * 255) | 0;
                           }
                           transferMaps.push(transferMap);
                           numEffectfulFns++;
                        }
                     } catch (err) {
                        _iterator64.e(err);
                     } finally {
                        _iterator64.f();
                     }
                     if (!(numFns === 1 || numFns === 4)) {
                        return null;
                     }
                     if (numEffectfulFns === 0) {
                        return null;
                     }
                     return transferMaps;
                  },
               },
               {
                  key: "handleTilingType",
                  value: function handleTilingType(
                     fn,
                     color,
                     resources,
                     pattern,
                     patternDict,
                     operatorList,
                     task,
                     localTilingPatternCache,
                  ) {
                     var _this44 = this;
                     var tilingOpList = new OperatorList();
                     var patternResources = Dict.merge({
                        xref: this.xref,
                        dictArray: [patternDict.get("Resources"), resources],
                     });
                     return this.getOperatorList({
                        stream: pattern,
                        task: task,
                        resources: patternResources,
                        operatorList: tilingOpList,
                     })
                        .then(function () {
                           var operatorListIR = tilingOpList.getIR();
                           var tilingPatternIR = getTilingPatternIR(
                              operatorListIR,
                              patternDict,
                              color,
                           );
                           operatorList.addDependencies(tilingOpList.dependencies);
                           operatorList.addOp(fn, tilingPatternIR);
                           if (patternDict.objId) {
                              localTilingPatternCache.set(null, patternDict.objId, {
                                 operatorListIR: operatorListIR,
                                 dict: patternDict,
                              });
                           }
                        })
                        ["catch"](function (reason) {
                        if (reason instanceof AbortException) {
                           return;
                        }
                        if (_this44.options.ignoreErrors) {
                           warn(
                              'handleTilingType - ignoring pattern: "'.concat(
                                 reason,
                                 '".',
                              ),
                           );
                           return;
                        }
                        throw reason;
                     });
                  },
               },
               {
                  key: "handleSetFont",
                  value: (function () {
                     var _handleSetFont = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(
                           function _callee13(
                              resources,
                              fontArgs,
                              fontRef,
                              operatorList,
                              task,
                              state,
                           ) {
                              var fallbackFontDict,
                                 cssFontInfo,
                                 fontName,
                                 translated,
                                 _args15 = arguments,
                                 _t14;
                              return _regenerator().w(
                                 function (_context15) {
                                    while (1)
                                       switch ((_context15.p = _context15.n)) {
                                          case 0:
                                             fallbackFontDict =
                                                _args15.length > 6 && _args15[6] !== undefined
                                                   ? _args15[6]
                                                   : null;
                                             cssFontInfo =
                                                _args15.length > 7 && _args15[7] !== undefined
                                                   ? _args15[7]
                                                   : null;
                                             fontName =
                                                (fontArgs === null || fontArgs === void 0
                                                   ? void 0
                                                   : fontArgs[0]) instanceof Name
                                                   ? fontArgs[0].name
                                                   : null;
                                             _context15.n = 1;
                                             return this.loadFont(
                                                fontName,
                                                fontRef,
                                                resources,
                                                fallbackFontDict,
                                                cssFontInfo,
                                             );
                                          case 1:
                                             translated = _context15.v;
                                             if (!translated.font.isType3Font) {
                                                _context15.n = 5;
                                                break;
                                             }
                                             _context15.p = 2;
                                             _context15.n = 3;
                                             return translated.loadType3Data(
                                                this,
                                                resources,
                                                task,
                                             );
                                          case 3:
                                             operatorList.addDependencies(
                                                translated.type3Dependencies,
                                             );
                                             _context15.n = 5;
                                             break;
                                          case 4:
                                             _context15.p = 4;
                                             _t14 = _context15.v;
                                             translated = new TranslatedFont({
                                                loadedName: "g_font_error",
                                                font: new ErrorFont(
                                                   "Type3 font load error: ".concat(_t14),
                                                ),
                                                dict: translated.font,
                                                evaluatorOptions: this.options,
                                             });
                                          case 5:
                                             state.font = translated.font;
                                             translated.send(this.handler);
                                             return _context15.a(2, translated.loadedName);
                                       }
                                 },
                                 _callee13,
                                 this,
                                 [[2, 4]],
                              );
                           },
                        ),
                     );
                     function handleSetFont(_x31, _x32, _x33, _x34, _x35, _x36) {
                        return _handleSetFont.apply(this, arguments);
                     }
                     return handleSetFont;
                  })(),
               },
               {
                  key: "handleText",
                  value: function handleText(chars, state) {
                     var font = state.font;
                     var glyphs = font.charsToGlyphs(chars);
                     if (font.data) {
                        var isAddToPathSet = !!(
                           state.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG
                        );
                        if (
                           isAddToPathSet ||
                           state.fillColorSpace.name === "Pattern" ||
                           font.disableFontFace ||
                           this.options.disableFontFace
                        ) {
                           PartialEvaluator.buildFontPaths(
                              font,
                              glyphs,
                              this.handler,
                              this.options,
                           );
                        }
                     }
                     return glyphs;
                  },
               },
               {
                  key: "ensureStateFont",
                  value: function ensureStateFont(state) {
                     if (state.font) {
                        return;
                     }
                     var reason = new FormatError(
                        "Missing setFont (Tf) operator before text rendering operator.",
                     );
                     if (this.options.ignoreErrors) {
                        warn('ensureStateFont: "'.concat(reason, '".'));
                        return;
                     }
                     throw reason;
                  },
               },
               {
                  key: "setGState",
                  value: (function () {
                     var _setGState = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee14(_ref51) {
                           var _this45 = this;
                           var resources,
                              gState,
                              operatorList,
                              cacheKey,
                              task,
                              stateManager,
                              localGStateCache,
                              localColorSpaceCache,
                              gStateRef,
                              isSimpleGState,
                              gStateObj,
                              promise,
                              _iterator65,
                              _step65,
                              _loop,
                              _t16;
                           return _regenerator().w(
                              function (_context17) {
                                 while (1)
                                    switch ((_context17.p = _context17.n)) {
                                       case 0:
                                          ((resources = _ref51.resources),
                                             (gState = _ref51.gState),
                                             (operatorList = _ref51.operatorList),
                                             (cacheKey = _ref51.cacheKey),
                                             (task = _ref51.task),
                                             (stateManager = _ref51.stateManager),
                                             (localGStateCache = _ref51.localGStateCache),
                                             (localColorSpaceCache =
                                                _ref51.localColorSpaceCache));
                                          gStateRef = gState.objId;
                                          isSimpleGState = true;
                                          gStateObj = [];
                                          promise = Promise.resolve();
                                          _iterator65 = _createForOfIteratorHelper(
                                             gState.getKeys(),
                                          );
                                          _context17.p = 1;
                                          _loop = /*#__PURE__*/ _regenerator().m(
                                             function _loop() {
                                                var key, value, transferMaps, _t15;
                                                return _regenerator().w(function (_context16) {
                                                   while (1)
                                                      switch (_context16.n) {
                                                         case 0:
                                                            key = _step65.value;
                                                            value = gState.get(key);
                                                            _t15 = key;
                                                            _context16.n =
                                                               _t15 === "Type"
                                                                  ? 1
                                                                  : _t15 === "LW"
                                                                     ? 2
                                                                     : _t15 === "LC"
                                                                        ? 2
                                                                        : _t15 === "LJ"
                                                                           ? 2
                                                                           : _t15 === "ML"
                                                                              ? 2
                                                                              : _t15 === "D"
                                                                                 ? 2
                                                                                 : _t15 === "RI"
                                                                                    ? 2
                                                                                    : _t15 === "FL"
                                                                                       ? 2
                                                                                       : _t15 === "CA"
                                                                                          ? 2
                                                                                          : _t15 === "ca"
                                                                                             ? 2
                                                                                             : _t15 === "Font"
                                                                                                ? 3
                                                                                                : _t15 === "BM"
                                                                                                   ? 4
                                                                                                   : _t15 ===
                                                                                                   "SMask"
                                                                                                      ? 5
                                                                                                      : _t15 ===
                                                                                                      "TR"
                                                                                                         ? 7
                                                                                                         : _t15 ===
                                                                                                         "OP"
                                                                                                            ? 8
                                                                                                            : _t15 ===
                                                                                                            "op"
                                                                                                               ? 8
                                                                                                               : _t15 ===
                                                                                                               "OPM"
                                                                                                                  ? 8
                                                                                                                  : _t15 ===
                                                                                                                  "BG"
                                                                                                                     ? 8
                                                                                                                     : _t15 ===
                                                                                                                     "BG2"
                                                                                                                        ? 8
                                                                                                                        : _t15 ===
                                                                                                                        "UCR"
                                                                                                                           ? 8
                                                                                                                           : _t15 ===
                                                                                                                           "UCR2"
                                                                                                                              ? 8
                                                                                                                              : _t15 ===
                                                                                                                              "TR2"
                                                                                                                                 ? 8
                                                                                                                                 : _t15 ===
                                                                                                                                 "HT"
                                                                                                                                    ? 8
                                                                                                                                    : _t15 ===
                                                                                                                                    "SM"
                                                                                                                                       ? 8
                                                                                                                                       : _t15 ===
                                                                                                                                       "SA"
                                                                                                                                          ? 8
                                                                                                                                          : _t15 ===
                                                                                                                                          "AIS"
                                                                                                                                             ? 8
                                                                                                                                             : _t15 ===
                                                                                                                                             "TK"
                                                                                                                                                ? 8
                                                                                                                                                : 9;
                                                            break;
                                                         case 1:
                                                            return _context16.a(3, 10);
                                                         case 2:
                                                            gStateObj.push([key, value]);
                                                            return _context16.a(3, 10);
                                                         case 3:
                                                            isSimpleGState = false;
                                                            promise = promise.then(function () {
                                                               return _this45
                                                                  .handleSetFont(
                                                                     resources,
                                                                     null,
                                                                     value[0],
                                                                     operatorList,
                                                                     task,
                                                                     stateManager.state,
                                                                  )
                                                                  .then(function (loadedName) {
                                                                     operatorList.addDependency(
                                                                        loadedName,
                                                                     );
                                                                     gStateObj.push([
                                                                        key,
                                                                        [loadedName, value[1]],
                                                                     ]);
                                                                  });
                                                            });
                                                            return _context16.a(3, 10);
                                                         case 4:
                                                            gStateObj.push([
                                                               key,
                                                               normalizeBlendMode(value),
                                                            ]);
                                                            return _context16.a(3, 10);
                                                         case 5:
                                                            if (!isName(value, "None")) {
                                                               _context16.n = 6;
                                                               break;
                                                            }
                                                            gStateObj.push([key, false]);
                                                            return _context16.a(3, 10);
                                                         case 6:
                                                            if (value instanceof Dict) {
                                                               isSimpleGState = false;
                                                               promise = promise.then(function () {
                                                                  return _this45.handleSMask(
                                                                     value,
                                                                     resources,
                                                                     operatorList,
                                                                     task,
                                                                     stateManager,
                                                                     localColorSpaceCache,
                                                                  );
                                                               });
                                                               gStateObj.push([key, true]);
                                                            } else {
                                                               warn("Unsupported SMask type");
                                                            }
                                                            return _context16.a(3, 10);
                                                         case 7:
                                                            transferMaps =
                                                               _this45.handleTransferFunction(value);
                                                            gStateObj.push([key, transferMaps]);
                                                            return _context16.a(3, 10);
                                                         case 8:
                                                            info("graphic state operator " + key);
                                                            return _context16.a(3, 10);
                                                         case 9:
                                                            info(
                                                               "Unknown graphic state operator " +
                                                               key,
                                                            );
                                                            return _context16.a(3, 10);
                                                         case 10:
                                                            return _context16.a(2);
                                                      }
                                                }, _loop);
                                             },
                                          );
                                          _iterator65.s();
                                       case 2:
                                          if ((_step65 = _iterator65.n()).done) {
                                             _context17.n = 4;
                                             break;
                                          }
                                          return _context17.d(_regeneratorValues(_loop()), 3);
                                       case 3:
                                          _context17.n = 2;
                                          break;
                                       case 4:
                                          _context17.n = 6;
                                          break;
                                       case 5:
                                          _context17.p = 5;
                                          _t16 = _context17.v;
                                          _iterator65.e(_t16);
                                       case 6:
                                          _context17.p = 6;
                                          _iterator65.f();
                                          return _context17.f(6);
                                       case 7:
                                          _context17.n = 8;
                                          return promise;
                                       case 8:
                                          if (gStateObj.length > 0) {
                                             operatorList.addOp(OPS.setGState, [gStateObj]);
                                          }
                                          if (isSimpleGState) {
                                             localGStateCache.set(
                                                cacheKey,
                                                gStateRef,
                                                gStateObj,
                                             );
                                          }
                                       case 9:
                                          return _context17.a(2);
                                    }
                              },
                              _callee14,
                              null,
                              [[1, 5, 6, 7]],
                           );
                        }),
                     );
                     function setGState(_x37) {
                        return _setGState.apply(this, arguments);
                     }
                     return setGState;
                  })(),
               },
               {
                  key: "loadFont",
                  value: function loadFont(fontName, font, resources) {
                     var _this46 = this,
                        _fontID;
                     var fallbackFontDict =
                        arguments.length > 3 && arguments[3] !== undefined
                           ? arguments[3]
                           : null;
                     var cssFontInfo =
                        arguments.length > 4 && arguments[4] !== undefined
                           ? arguments[4]
                           : null;
                     var errorFont = /*#__PURE__*/ (function () {
                        var _ref52 = _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(function _callee15() {
                              return _regenerator().w(function (_context18) {
                                 while (1)
                                    switch (_context18.n) {
                                       case 0:
                                          return _context18.a(
                                             2,
                                             new TranslatedFont({
                                                loadedName: "g_font_error",
                                                font: new ErrorFont(
                                                   'Font "'.concat(
                                                      fontName,
                                                      '" is not available.',
                                                   ),
                                                ),
                                                dict: font,
                                                evaluatorOptions: _this46.options,
                                             }),
                                          );
                                    }
                              }, _callee15);
                           }),
                        );
                        return function errorFont() {
                           return _ref52.apply(this, arguments);
                        };
                     })();
                     var fontRef;
                     if (font) {
                        if (font instanceof Ref) {
                           fontRef = font;
                        }
                     } else {
                        var fontRes = resources.get("Font");
                        if (fontRes) {
                           fontRef = fontRes.getRaw(fontName);
                        }
                     }
                     if (fontRef) {
                        if (this.parsingType3Font && this.type3FontRefs.has(fontRef)) {
                           return errorFont();
                        }
                        if (this.fontCache.has(fontRef)) {
                           return this.fontCache.get(fontRef);
                        }
                        font = this.xref.fetchIfRef(fontRef);
                     }
                     if (!(font instanceof Dict)) {
                        if (!this.options.ignoreErrors && !this.parsingType3Font) {
                           warn('Font "'.concat(fontName, '" is not available.'));
                           return errorFont();
                        }
                        warn(
                           'Font "'.concat(
                              fontName,
                              '" is not available -- attempting to fallback to a default font.',
                           ),
                        );
                        font = fallbackFontDict || PartialEvaluator.fallbackFontDict;
                     }
                     if (font.cacheKey && this.fontCache.has(font.cacheKey)) {
                        return this.fontCache.get(font.cacheKey);
                     }
                     var _Promise$withResolver = Promise.withResolvers(),
                        promise = _Promise$withResolver.promise,
                        resolve = _Promise$withResolver.resolve;
                     var preEvaluatedFont;
                     try {
                        preEvaluatedFont = this.preEvaluateFont(font);
                        preEvaluatedFont.cssFontInfo = cssFontInfo;
                     } catch (reason) {
                        warn(
                           'loadFont - preEvaluateFont failed: "'.concat(reason, '".'),
                        );
                        return errorFont();
                     }
                     var _preEvaluatedFont = preEvaluatedFont,
                        descriptor = _preEvaluatedFont.descriptor,
                        hash = _preEvaluatedFont.hash;
                     var fontRefIsRef = fontRef instanceof Ref;
                     var fontID;
                     if (hash && descriptor instanceof Dict) {
                        var _fontAliases =
                           descriptor.fontAliases ||
                           (descriptor.fontAliases = Object.create(null));
                        if (_fontAliases[hash]) {
                           var aliasFontRef = _fontAliases[hash].aliasRef;
                           if (
                              fontRefIsRef &&
                              aliasFontRef &&
                              this.fontCache.has(aliasFontRef)
                           ) {
                              this.fontCache.putAlias(fontRef, aliasFontRef);
                              return this.fontCache.get(fontRef);
                           }
                        } else {
                           _fontAliases[hash] = {
                              fontID: this.idFactory.createFontId(),
                           };
                        }
                        if (fontRefIsRef) {
                           _fontAliases[hash].aliasRef = fontRef;
                        }
                        fontID = _fontAliases[hash].fontID;
                     } else {
                        fontID = this.idFactory.createFontId();
                     }
                     assert(
                        (_fontID = fontID) === null || _fontID === void 0
                           ? void 0
                           : _fontID.startsWith("f"),
                        'The "fontID" must be (correctly) defined.',
                     );
                     if (fontRefIsRef) {
                        this.fontCache.put(fontRef, promise);
                     } else {
                        font.cacheKey = "cacheKey_".concat(fontID);
                        this.fontCache.put(font.cacheKey, promise);
                     }
                     font.loadedName = ""
                        .concat(this.idFactory.getDocId(), "_")
                        .concat(fontID);
                     this.translateFont(preEvaluatedFont)
                        .then(function (translatedFont) {
                           resolve(
                              new TranslatedFont({
                                 loadedName: font.loadedName,
                                 font: translatedFont,
                                 dict: font,
                                 evaluatorOptions: _this46.options,
                              }),
                           );
                        })
                        ["catch"](function (reason) {
                        warn(
                           'loadFont - translateFont failed: "'.concat(reason, '".'),
                        );
                        resolve(
                           new TranslatedFont({
                              loadedName: font.loadedName,
                              font: new ErrorFont(
                                 reason instanceof Error ? reason.message : reason,
                              ),
                              dict: font,
                              evaluatorOptions: _this46.options,
                           }),
                        );
                     });
                     return promise;
                  },
               },
               {
                  key: "buildPath",
                  value: function buildPath(operatorList, fn, args) {
                     var parsingText =
                        arguments.length > 3 && arguments[3] !== undefined
                           ? arguments[3]
                           : false;
                     var lastIndex = operatorList.length - 1;
                     if (!args) {
                        args = [];
                     }
                     if (
                        lastIndex < 0 ||
                        operatorList.fnArray[lastIndex] !== OPS.constructPath
                     ) {
                        if (parsingText) {
                           warn(
                              'Encountered path operator "'.concat(
                                 fn,
                                 '" inside of a text object.',
                              ),
                           );
                           operatorList.addOp(OPS.save, null);
                        }
                        var minMax;
                        switch (fn) {
                           case OPS.rectangle:
                              var x = args[0] + args[2];
                              var y = args[1] + args[3];
                              minMax = [
                                 Math.min(args[0], x),
                                 Math.min(args[1], y),
                                 Math.max(args[0], x),
                                 Math.max(args[1], y),
                              ];
                              break;
                           case OPS.moveTo:
                           case OPS.lineTo:
                              minMax = [args[0], args[1], args[0], args[1]];
                              break;
                           default:
                              minMax = [Infinity, Infinity, -Infinity, -Infinity];
                              break;
                        }
                        operatorList.addOp(OPS.constructPath, [[fn], args, minMax]);
                        if (parsingText) {
                           operatorList.addOp(OPS.restore, null);
                        }
                     } else {
                        var _opArgs$;
                        var opArgs = operatorList.argsArray[lastIndex];
                        opArgs[0].push(fn);
                        (_opArgs$ = opArgs[1]).push.apply(
                           _opArgs$,
                           _toConsumableArray(args),
                        );
                        var _minMax = opArgs[2];
                        switch (fn) {
                           case OPS.rectangle:
                              var _x38 = args[0] + args[2];
                              var _y2 = args[1] + args[3];
                              _minMax[0] = Math.min(_minMax[0], args[0], _x38);
                              _minMax[1] = Math.min(_minMax[1], args[1], _y2);
                              _minMax[2] = Math.max(_minMax[2], args[0], _x38);
                              _minMax[3] = Math.max(_minMax[3], args[1], _y2);
                              break;
                           case OPS.moveTo:
                           case OPS.lineTo:
                              _minMax[0] = Math.min(_minMax[0], args[0]);
                              _minMax[1] = Math.min(_minMax[1], args[1]);
                              _minMax[2] = Math.max(_minMax[2], args[0]);
                              _minMax[3] = Math.max(_minMax[3], args[1]);
                              break;
                        }
                     }
                  },
               },
               {
                  key: "parseColorSpace",
                  value: function parseColorSpace(_ref53) {
                     var _this47 = this;
                     var cs = _ref53.cs,
                        resources = _ref53.resources,
                        localColorSpaceCache = _ref53.localColorSpaceCache;
                     return ColorSpace.parseAsync({
                        cs: cs,
                        xref: this.xref,
                        resources: resources,
                        pdfFunctionFactory: this._pdfFunctionFactory,
                        localColorSpaceCache: localColorSpaceCache,
                     })["catch"](function (reason) {
                        if (reason instanceof AbortException) {
                           return null;
                        }
                        if (_this47.options.ignoreErrors) {
                           warn(
                              'parseColorSpace - ignoring ColorSpace: "'.concat(
                                 reason,
                                 '".',
                              ),
                           );
                           return null;
                        }
                        throw reason;
                     });
                  },
               },
               {
                  key: "parseShading",
                  value: function parseShading(_ref54) {
                     var shading = _ref54.shading,
                        resources = _ref54.resources,
                        localColorSpaceCache = _ref54.localColorSpaceCache,
                        localShadingPatternCache = _ref54.localShadingPatternCache;
                     var id = localShadingPatternCache.get(shading);
                     if (id) {
                        return id;
                     }
                     var patternIR;
                     try {
                        var shadingFill = Pattern.parseShading(
                           shading,
                           this.xref,
                           resources,
                           this._pdfFunctionFactory,
                           localColorSpaceCache,
                        );
                        patternIR = shadingFill.getIR();
                     } catch (reason) {
                        if (reason instanceof AbortException) {
                           return null;
                        }
                        if (this.options.ignoreErrors) {
                           warn(
                              'parseShading - ignoring shading: "'.concat(reason, '".'),
                           );
                           localShadingPatternCache.set(shading, null);
                           return null;
                        }
                        throw reason;
                     }
                     id = "pattern_".concat(this.idFactory.createObjId());
                     if (this.parsingType3Font) {
                        id = "".concat(this.idFactory.getDocId(), "_type3_").concat(id);
                     }
                     localShadingPatternCache.set(shading, id);
                     if (this.parsingType3Font) {
                        this.handler.send("commonobj", [id, "Pattern", patternIR]);
                     } else {
                        this.handler.send("obj", [
                           id,
                           this.pageIndex,
                           "Pattern",
                           patternIR,
                        ]);
                     }
                     return id;
                  },
               },
               {
                  key: "handleColorN",
                  value: function handleColorN(
                     operatorList,
                     fn,
                     args,
                     cs,
                     patterns,
                     resources,
                     task,
                     localColorSpaceCache,
                     localTilingPatternCache,
                     localShadingPatternCache,
                  ) {
                     var patternName = args.pop();
                     if (patternName instanceof Name) {
                        var rawPattern = patterns.getRaw(patternName.name);
                        var localTilingPattern =
                           rawPattern instanceof Ref &&
                           localTilingPatternCache.getByRef(rawPattern);
                        if (localTilingPattern) {
                           try {
                              var color = cs.base ? cs.base.getRgb(args, 0) : null;
                              var tilingPatternIR = getTilingPatternIR(
                                 localTilingPattern.operatorListIR,
                                 localTilingPattern.dict,
                                 color,
                              );
                              operatorList.addOp(fn, tilingPatternIR);
                              return undefined;
                           } catch (_unused9) {}
                        }
                        var pattern = this.xref.fetchIfRef(rawPattern);
                        if (pattern) {
                           var dict =
                              pattern instanceof BaseStream ? pattern.dict : pattern;
                           var typeNum = dict.get("PatternType");
                           if (typeNum === PatternType.TILING) {
                              var _color = cs.base ? cs.base.getRgb(args, 0) : null;
                              return this.handleTilingType(
                                 fn,
                                 _color,
                                 resources,
                                 pattern,
                                 dict,
                                 operatorList,
                                 task,
                                 localTilingPatternCache,
                              );
                           } else if (typeNum === PatternType.SHADING) {
                              var shading = dict.get("Shading");
                              var objId = this.parseShading({
                                 shading: shading,
                                 resources: resources,
                                 localColorSpaceCache: localColorSpaceCache,
                                 localShadingPatternCache: localShadingPatternCache,
                              });
                              if (objId) {
                                 var matrix = dict.getArray("Matrix");
                                 operatorList.addOp(fn, ["Shading", objId, matrix]);
                              }
                              return undefined;
                           }
                           throw new FormatError(
                              "Unknown PatternType: ".concat(typeNum),
                           );
                        }
                     }
                     throw new FormatError(
                        "Unknown PatternName: ".concat(patternName),
                     );
                  },
               },
               {
                  key: "_parseVisibilityExpression",
                  value: function _parseVisibilityExpression(
                     array,
                     nestingCounter,
                     currentResult,
                  ) {
                     var MAX_NESTING = 10;
                     if (++nestingCounter > MAX_NESTING) {
                        warn("Visibility expression is too deeply nested");
                        return;
                     }
                     var length = array.length;
                     var operator = this.xref.fetchIfRef(array[0]);
                     if (length < 2 || !(operator instanceof Name)) {
                        warn("Invalid visibility expression");
                        return;
                     }
                     switch (operator.name) {
                        case "And":
                        case "Or":
                        case "Not":
                           currentResult.push(operator.name);
                           break;
                        default:
                           warn(
                              "Invalid operator ".concat(
                                 operator.name,
                                 " in visibility expression",
                              ),
                           );
                           return;
                     }
                     for (var i = 1; i < length; i++) {
                        var raw = array[i];
                        var object = this.xref.fetchIfRef(raw);
                        if (Array.isArray(object)) {
                           var nestedResult = [];
                           currentResult.push(nestedResult);
                           this._parseVisibilityExpression(
                              object,
                              nestingCounter,
                              nestedResult,
                           );
                        } else if (raw instanceof Ref) {
                           currentResult.push(raw.toString());
                        }
                     }
                  },
               },
               {
                  key: "parseMarkedContentProps",
                  value: (function () {
                     var _parseMarkedContentProps = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(
                           function _callee16(contentProperties, resources) {
                              var _optionalContent$get;
                              var optionalContent,
                                 properties,
                                 optionalContentType,
                                 expression,
                                 result,
                                 optionalContentGroups,
                                 groupIds,
                                 _iterator66,
                                 _step66,
                                 ocg;
                              return _regenerator().w(
                                 function (_context19) {
                                    while (1)
                                       switch (_context19.n) {
                                          case 0:
                                             if (!(contentProperties instanceof Name)) {
                                                _context19.n = 1;
                                                break;
                                             }
                                             properties = resources.get("Properties");
                                             optionalContent = properties.get(
                                                contentProperties.name,
                                             );
                                             _context19.n = 3;
                                             break;
                                          case 1:
                                             if (!(contentProperties instanceof Dict)) {
                                                _context19.n = 2;
                                                break;
                                             }
                                             optionalContent = contentProperties;
                                             _context19.n = 3;
                                             break;
                                          case 2:
                                             throw new FormatError(
                                                "Optional content properties malformed.",
                                             );
                                          case 3:
                                             optionalContentType =
                                                (_optionalContent$get =
                                                   optionalContent.get("Type")) === null ||
                                                _optionalContent$get === void 0
                                                   ? void 0
                                                   : _optionalContent$get.name;
                                             if (!(optionalContentType === "OCG")) {
                                                _context19.n = 4;
                                                break;
                                             }
                                             return _context19.a(2, {
                                                type: optionalContentType,
                                                id: optionalContent.objId,
                                             });
                                          case 4:
                                             if (!(optionalContentType === "OCMD")) {
                                                _context19.n = 7;
                                                break;
                                             }
                                             expression = optionalContent.get("VE");
                                             if (!Array.isArray(expression)) {
                                                _context19.n = 5;
                                                break;
                                             }
                                             result = [];
                                             this._parseVisibilityExpression(
                                                expression,
                                                0,
                                                result,
                                             );
                                             if (!(result.length > 0)) {
                                                _context19.n = 5;
                                                break;
                                             }
                                             return _context19.a(2, {
                                                type: "OCMD",
                                                expression: result,
                                             });
                                          case 5:
                                             optionalContentGroups =
                                                optionalContent.get("OCGs");
                                             if (
                                                !(
                                                   Array.isArray(optionalContentGroups) ||
                                                   optionalContentGroups instanceof Dict
                                                )
                                             ) {
                                                _context19.n = 6;
                                                break;
                                             }
                                             groupIds = [];
                                             if (Array.isArray(optionalContentGroups)) {
                                                _iterator66 = _createForOfIteratorHelper(
                                                   optionalContentGroups,
                                                );
                                                try {
                                                   for (
                                                      _iterator66.s();
                                                      !(_step66 = _iterator66.n()).done;

                                                   ) {
                                                      ocg = _step66.value;
                                                      groupIds.push(ocg.toString());
                                                   }
                                                } catch (err) {
                                                   _iterator66.e(err);
                                                } finally {
                                                   _iterator66.f();
                                                }
                                             } else {
                                                groupIds.push(optionalContentGroups.objId);
                                             }
                                             return _context19.a(2, {
                                                type: optionalContentType,
                                                ids: groupIds,
                                                policy:
                                                   optionalContent.get("P") instanceof Name
                                                      ? optionalContent.get("P").name
                                                      : null,
                                                expression: null,
                                             });
                                          case 6:
                                             if (!(optionalContentGroups instanceof Ref)) {
                                                _context19.n = 7;
                                                break;
                                             }
                                             return _context19.a(2, {
                                                type: optionalContentType,
                                                id: optionalContentGroups.toString(),
                                             });
                                          case 7:
                                             return _context19.a(2, null);
                                       }
                                 },
                                 _callee16,
                                 this,
                              );
                           },
                        ),
                     );
                     function parseMarkedContentProps(_x39, _x40) {
                        return _parseMarkedContentProps.apply(this, arguments);
                     }
                     return parseMarkedContentProps;
                  })(),
               },
               {
                  key: "getOperatorList",
                  value: function getOperatorList(_ref55) {
                     var _this48 = this;
                     var stream = _ref55.stream,
                        task = _ref55.task,
                        resources = _ref55.resources,
                        operatorList = _ref55.operatorList,
                        _ref55$initialState = _ref55.initialState,
                        initialState =
                           _ref55$initialState === void 0 ? null : _ref55$initialState,
                        _ref55$fallbackFontDi = _ref55.fallbackFontDict,
                        fallbackFontDict =
                           _ref55$fallbackFontDi === void 0
                              ? null
                              : _ref55$fallbackFontDi;
                     resources || (resources = Dict.empty);
                     initialState || (initialState = new EvalState());
                     if (!operatorList) {
                        throw new Error(
                           'getOperatorList: missing "operatorList" parameter',
                        );
                     }
                     var self = this;
                     var xref = this.xref;
                     var parsingText = false;
                     var localImageCache = new LocalImageCache();
                     var localColorSpaceCache = new LocalColorSpaceCache();
                     var localGStateCache = new LocalGStateCache();
                     var localTilingPatternCache = new LocalTilingPatternCache();
                     var localShadingPatternCache = new Map();
                     var xobjs = resources.get("XObject") || Dict.empty;
                     var patterns = resources.get("Pattern") || Dict.empty;
                     var stateManager = new StateManager(initialState);
                     var preprocessor = new EvaluatorPreprocessor(
                        stream,
                        xref,
                        stateManager,
                     );
                     var timeSlotManager = new TimeSlotManager();
                     function closePendingRestoreOPS(argument) {
                        for (
                           var i = 0, ii = preprocessor.savedStatesDepth;
                           i < ii;
                           i++
                        ) {
                           operatorList.addOp(OPS.restore, []);
                        }
                     }
                     return new Promise(function promiseBody(resolve, reject) {
                        var next = function next(promise) {
                           Promise.all([promise, operatorList.ready]).then(function () {
                              try {
                                 promiseBody(resolve, reject);
                              } catch (ex) {
                                 reject(ex);
                              }
                           }, reject);
                        };
                        task.ensureNotTerminated();
                        timeSlotManager.reset();
                        var operation = {};
                        var stop, i, ii, cs, name, isValidName;
                        while (!(stop = timeSlotManager.check())) {
                           operation.args = null;
                           if (!preprocessor.read(operation)) {
                              break;
                           }
                           var args = operation.args;
                           var fn = operation.fn;
                           switch (fn | 0) {
                              case OPS.paintXObject:
                                 isValidName = args[0] instanceof Name;
                                 name = args[0].name;
                                 if (isValidName) {
                                    var localImage = localImageCache.getByName(name);
                                    if (localImage) {
                                       operatorList.addImageOps(
                                          localImage.fn,
                                          localImage.args,
                                          localImage.optionalContent,
                                       );
                                       incrementCachedImageMaskCount(localImage);
                                       args = null;
                                       continue;
                                    }
                                 }
                                 next(
                                    new Promise(function (resolveXObject, rejectXObject) {
                                       if (!isValidName) {
                                          throw new FormatError(
                                             "XObject must be referred to by name.",
                                          );
                                       }
                                       var xobj = xobjs.getRaw(name);
                                       if (xobj instanceof Ref) {
                                          var _localImage =
                                             localImageCache.getByRef(xobj) ||
                                             self._regionalImageCache.getByRef(xobj);
                                          if (_localImage) {
                                             operatorList.addImageOps(
                                                _localImage.fn,
                                                _localImage.args,
                                                _localImage.optionalContent,
                                             );
                                             incrementCachedImageMaskCount(_localImage);
                                             resolveXObject();
                                             return;
                                          }
                                          var globalImage = self.globalImageCache.getData(
                                             xobj,
                                             self.pageIndex,
                                          );
                                          if (globalImage) {
                                             operatorList.addDependency(globalImage.objId);
                                             operatorList.addImageOps(
                                                globalImage.fn,
                                                globalImage.args,
                                                globalImage.optionalContent,
                                             );
                                             resolveXObject();
                                             return;
                                          }
                                          xobj = xref.fetch(xobj);
                                       }
                                       if (!(xobj instanceof BaseStream)) {
                                          throw new FormatError("XObject should be a stream");
                                       }
                                       var type = xobj.dict.get("Subtype");
                                       if (!(type instanceof Name)) {
                                          throw new FormatError(
                                             "XObject should have a Name subtype",
                                          );
                                       }
                                       if (type.name === "Form") {
                                          stateManager.save();
                                          self
                                             .buildFormXObject(
                                                resources,
                                                xobj,
                                                null,
                                                operatorList,
                                                task,
                                                stateManager.state.clone(),
                                                localColorSpaceCache,
                                             )
                                             .then(function () {
                                                stateManager.restore();
                                                resolveXObject();
                                             }, rejectXObject);
                                          return;
                                       } else if (type.name === "Image") {
                                          self
                                             .buildPaintImageXObject({
                                                resources: resources,
                                                image: xobj,
                                                operatorList: operatorList,
                                                cacheKey: name,
                                                localImageCache: localImageCache,
                                                localColorSpaceCache: localColorSpaceCache,
                                             })
                                             .then(resolveXObject, rejectXObject);
                                          return;
                                       } else if (type.name === "PS") {
                                          info("Ignored XObject subtype PS");
                                       } else {
                                          throw new FormatError(
                                             "Unhandled XObject subtype ".concat(type.name),
                                          );
                                       }
                                       resolveXObject();
                                    })["catch"](function (reason) {
                                       if (reason instanceof AbortException) {
                                          return;
                                       }
                                       if (self.options.ignoreErrors) {
                                          warn(
                                             'getOperatorList - ignoring XObject: "'.concat(
                                                reason,
                                                '".',
                                             ),
                                          );
                                          return;
                                       }
                                       throw reason;
                                    }),
                                 );
                                 return;
                              case OPS.setFont:
                                 var fontSize = args[1];
                                 next(
                                    self
                                       .handleSetFont(
                                          resources,
                                          args,
                                          null,
                                          operatorList,
                                          task,
                                          stateManager.state,
                                          fallbackFontDict,
                                       )
                                       .then(function (loadedName) {
                                          operatorList.addDependency(loadedName);
                                          operatorList.addOp(OPS.setFont, [
                                             loadedName,
                                             fontSize,
                                          ]);
                                       }),
                                 );
                                 return;
                              case OPS.beginText:
                                 parsingText = true;
                                 break;
                              case OPS.endText:
                                 parsingText = false;
                                 break;
                              case OPS.endInlineImage:
                                 var cacheKey = args[0].cacheKey;
                                 if (cacheKey) {
                                    var _localImage2 = localImageCache.getByName(cacheKey);
                                    if (_localImage2) {
                                       operatorList.addImageOps(
                                          _localImage2.fn,
                                          _localImage2.args,
                                          _localImage2.optionalContent,
                                       );
                                       incrementCachedImageMaskCount(_localImage2);
                                       args = null;
                                       continue;
                                    }
                                 }
                                 next(
                                    self.buildPaintImageXObject({
                                       resources: resources,
                                       image: args[0],
                                       isInline: true,
                                       operatorList: operatorList,
                                       cacheKey: cacheKey,
                                       localImageCache: localImageCache,
                                       localColorSpaceCache: localColorSpaceCache,
                                    }),
                                 );
                                 return;
                              case OPS.showText:
                                 if (!stateManager.state.font) {
                                    self.ensureStateFont(stateManager.state);
                                    continue;
                                 }
                                 args[0] = self.handleText(args[0], stateManager.state);
                                 break;
                              case OPS.showSpacedText:
                                 if (!stateManager.state.font) {
                                    self.ensureStateFont(stateManager.state);
                                    continue;
                                 }
                                 var combinedGlyphs = [];
                                 var state = stateManager.state;
                                 var _iterator67 = _createForOfIteratorHelper(args[0]),
                                    _step67;
                                 try {
                                    for (
                                       _iterator67.s();
                                       !(_step67 = _iterator67.n()).done;

                                    ) {
                                       var arrItem = _step67.value;
                                       if (typeof arrItem === "string") {
                                          var _combinedGlyphs;
                                          (_combinedGlyphs = combinedGlyphs).push.apply(
                                             _combinedGlyphs,
                                             _toConsumableArray(
                                                self.handleText(arrItem, state),
                                             ),
                                          );
                                       } else if (typeof arrItem === "number") {
                                          combinedGlyphs.push(arrItem);
                                       }
                                    }
                                 } catch (err) {
                                    _iterator67.e(err);
                                 } finally {
                                    _iterator67.f();
                                 }
                                 args[0] = combinedGlyphs;
                                 fn = OPS.showText;
                                 break;
                              case OPS.nextLineShowText:
                                 if (!stateManager.state.font) {
                                    self.ensureStateFont(stateManager.state);
                                    continue;
                                 }
                                 operatorList.addOp(OPS.nextLine);
                                 args[0] = self.handleText(args[0], stateManager.state);
                                 fn = OPS.showText;
                                 break;
                              case OPS.nextLineSetSpacingShowText:
                                 if (!stateManager.state.font) {
                                    self.ensureStateFont(stateManager.state);
                                    continue;
                                 }
                                 operatorList.addOp(OPS.nextLine);
                                 operatorList.addOp(OPS.setWordSpacing, [args.shift()]);
                                 operatorList.addOp(OPS.setCharSpacing, [args.shift()]);
                                 args[0] = self.handleText(args[0], stateManager.state);
                                 fn = OPS.showText;
                                 break;
                              case OPS.setTextRenderingMode:
                                 stateManager.state.textRenderingMode = args[0];
                                 break;
                              case OPS.setFillColorSpace: {
                                 var cachedColorSpace = ColorSpace.getCached(
                                    args[0],
                                    xref,
                                    localColorSpaceCache,
                                 );
                                 if (cachedColorSpace) {
                                    stateManager.state.fillColorSpace = cachedColorSpace;
                                    continue;
                                 }
                                 next(
                                    self
                                       .parseColorSpace({
                                          cs: args[0],
                                          resources: resources,
                                          localColorSpaceCache: localColorSpaceCache,
                                       })
                                       .then(function (colorSpace) {
                                          if (colorSpace) {
                                             stateManager.state.fillColorSpace = colorSpace;
                                          }
                                       }),
                                 );
                                 return;
                              }
                              case OPS.setStrokeColorSpace: {
                                 var _cachedColorSpace = ColorSpace.getCached(
                                    args[0],
                                    xref,
                                    localColorSpaceCache,
                                 );
                                 if (_cachedColorSpace) {
                                    stateManager.state.strokeColorSpace = _cachedColorSpace;
                                    continue;
                                 }
                                 next(
                                    self
                                       .parseColorSpace({
                                          cs: args[0],
                                          resources: resources,
                                          localColorSpaceCache: localColorSpaceCache,
                                       })
                                       .then(function (colorSpace) {
                                          if (colorSpace) {
                                             stateManager.state.strokeColorSpace = colorSpace;
                                          }
                                       }),
                                 );
                                 return;
                              }
                              case OPS.setFillColor:
                                 cs = stateManager.state.fillColorSpace;
                                 args = cs.getRgb(args, 0);
                                 fn = OPS.setFillRGBColor;
                                 break;
                              case OPS.setStrokeColor:
                                 cs = stateManager.state.strokeColorSpace;
                                 args = cs.getRgb(args, 0);
                                 fn = OPS.setStrokeRGBColor;
                                 break;
                              case OPS.setFillGray:
                                 stateManager.state.fillColorSpace =
                                    ColorSpace.singletons.gray;
                                 args = ColorSpace.singletons.gray.getRgb(args, 0);
                                 fn = OPS.setFillRGBColor;
                                 break;
                              case OPS.setStrokeGray:
                                 stateManager.state.strokeColorSpace =
                                    ColorSpace.singletons.gray;
                                 args = ColorSpace.singletons.gray.getRgb(args, 0);
                                 fn = OPS.setStrokeRGBColor;
                                 break;
                              case OPS.setFillCMYKColor:
                                 stateManager.state.fillColorSpace =
                                    ColorSpace.singletons.cmyk;
                                 args = ColorSpace.singletons.cmyk.getRgb(args, 0);
                                 fn = OPS.setFillRGBColor;
                                 break;
                              case OPS.setStrokeCMYKColor:
                                 stateManager.state.strokeColorSpace =
                                    ColorSpace.singletons.cmyk;
                                 args = ColorSpace.singletons.cmyk.getRgb(args, 0);
                                 fn = OPS.setStrokeRGBColor;
                                 break;
                              case OPS.setFillRGBColor:
                                 stateManager.state.fillColorSpace =
                                    ColorSpace.singletons.rgb;
                                 args = ColorSpace.singletons.rgb.getRgb(args, 0);
                                 break;
                              case OPS.setStrokeRGBColor:
                                 stateManager.state.strokeColorSpace =
                                    ColorSpace.singletons.rgb;
                                 args = ColorSpace.singletons.rgb.getRgb(args, 0);
                                 break;
                              case OPS.setFillColorN:
                                 cs = stateManager.state.fillColorSpace;
                                 if (cs.name === "Pattern") {
                                    next(
                                       self.handleColorN(
                                          operatorList,
                                          OPS.setFillColorN,
                                          args,
                                          cs,
                                          patterns,
                                          resources,
                                          task,
                                          localColorSpaceCache,
                                          localTilingPatternCache,
                                          localShadingPatternCache,
                                       ),
                                    );
                                    return;
                                 }
                                 args = cs.getRgb(args, 0);
                                 fn = OPS.setFillRGBColor;
                                 break;
                              case OPS.setStrokeColorN:
                                 cs = stateManager.state.strokeColorSpace;
                                 if (cs.name === "Pattern") {
                                    next(
                                       self.handleColorN(
                                          operatorList,
                                          OPS.setStrokeColorN,
                                          args,
                                          cs,
                                          patterns,
                                          resources,
                                          task,
                                          localColorSpaceCache,
                                          localTilingPatternCache,
                                          localShadingPatternCache,
                                       ),
                                    );
                                    return;
                                 }
                                 args = cs.getRgb(args, 0);
                                 fn = OPS.setStrokeRGBColor;
                                 break;
                              case OPS.shadingFill:
                                 var shadingRes = resources.get("Shading");
                                 if (!shadingRes) {
                                    throw new FormatError("No shading resource found");
                                 }
                                 var shading = shadingRes.get(args[0].name);
                                 if (!shading) {
                                    throw new FormatError("No shading object found");
                                 }
                                 var patternId = self.parseShading({
                                    shading: shading,
                                    resources: resources,
                                    localColorSpaceCache: localColorSpaceCache,
                                    localShadingPatternCache: localShadingPatternCache,
                                 });
                                 if (!patternId) {
                                    continue;
                                 }
                                 args = [patternId];
                                 fn = OPS.shadingFill;
                                 break;
                              case OPS.setGState:
                                 isValidName = args[0] instanceof Name;
                                 name = args[0].name;
                                 if (isValidName) {
                                    var localGStateObj = localGStateCache.getByName(name);
                                    if (localGStateObj) {
                                       if (localGStateObj.length > 0) {
                                          operatorList.addOp(OPS.setGState, [localGStateObj]);
                                       }
                                       args = null;
                                       continue;
                                    }
                                 }
                                 next(
                                    new Promise(function (resolveGState, rejectGState) {
                                       if (!isValidName) {
                                          throw new FormatError(
                                             "GState must be referred to by name.",
                                          );
                                       }
                                       var extGState = resources.get("ExtGState");
                                       if (!(extGState instanceof Dict)) {
                                          throw new FormatError(
                                             "ExtGState should be a dictionary.",
                                          );
                                       }
                                       var gState = extGState.get(name);
                                       if (!(gState instanceof Dict)) {
                                          throw new FormatError(
                                             "GState should be a dictionary.",
                                          );
                                       }
                                       self
                                          .setGState({
                                             resources: resources,
                                             gState: gState,
                                             operatorList: operatorList,
                                             cacheKey: name,
                                             task: task,
                                             stateManager: stateManager,
                                             localGStateCache: localGStateCache,
                                             localColorSpaceCache: localColorSpaceCache,
                                          })
                                          .then(resolveGState, rejectGState);
                                    })["catch"](function (reason) {
                                       if (reason instanceof AbortException) {
                                          return;
                                       }
                                       if (self.options.ignoreErrors) {
                                          warn(
                                             'getOperatorList - ignoring ExtGState: "'.concat(
                                                reason,
                                                '".',
                                             ),
                                          );
                                          return;
                                       }
                                       throw reason;
                                    }),
                                 );
                                 return;
                              case OPS.moveTo:
                              case OPS.lineTo:
                              case OPS.curveTo:
                              case OPS.curveTo2:
                              case OPS.curveTo3:
                              case OPS.closePath:
                              case OPS.rectangle:
                                 self.buildPath(operatorList, fn, args, parsingText);
                                 continue;
                              case OPS.markPoint:
                              case OPS.markPointProps:
                              case OPS.beginCompat:
                              case OPS.endCompat:
                                 continue;
                              case OPS.beginMarkedContentProps:
                                 if (!(args[0] instanceof Name)) {
                                    warn(
                                       "Expected name for beginMarkedContentProps arg0=".concat(
                                          args[0],
                                       ),
                                    );
                                    operatorList.addOp(OPS.beginMarkedContentProps, [
                                       "OC",
                                       null,
                                    ]);
                                    continue;
                                 }
                                 if (args[0].name === "OC") {
                                    next(
                                       self
                                          .parseMarkedContentProps(args[1], resources)
                                          .then(function (data) {
                                             operatorList.addOp(OPS.beginMarkedContentProps, [
                                                "OC",
                                                data,
                                             ]);
                                          })
                                          ["catch"](function (reason) {
                                          if (reason instanceof AbortException) {
                                             return;
                                          }
                                          if (self.options.ignoreErrors) {
                                             warn(
                                                'getOperatorList - ignoring beginMarkedContentProps: "'.concat(
                                                   reason,
                                                   '".',
                                                ),
                                             );
                                             operatorList.addOp(
                                                OPS.beginMarkedContentProps,
                                                ["OC", null],
                                             );
                                             return;
                                          }
                                          throw reason;
                                       }),
                                    );
                                    return;
                                 }
                                 args = [
                                    args[0].name,
                                    args[1] instanceof Dict ? args[1].get("MCID") : null,
                                 ];
                                 break;
                              case OPS.beginMarkedContent:
                              case OPS.endMarkedContent:
                              default:
                                 if (args !== null) {
                                    for (i = 0, ii = args.length; i < ii; i++) {
                                       if (args[i] instanceof Dict) {
                                          break;
                                       }
                                    }
                                    if (i < ii) {
                                       warn("getOperatorList - ignoring operator: " + fn);
                                       continue;
                                    }
                                 }
                           }
                           operatorList.addOp(fn, args);
                        }
                        if (stop) {
                           next(deferred);
                           return;
                        }
                        closePendingRestoreOPS();
                        resolve();
                     })["catch"](function (reason) {
                        if (reason instanceof AbortException) {
                           return;
                        }
                        if (_this48.options.ignoreErrors) {
                           warn(
                              'getOperatorList - ignoring errors during "'.concat(
                                 task.name,
                                 '" ',
                              ) + 'task: "'.concat(reason, '".'),
                           );
                           closePendingRestoreOPS();
                           return;
                        }
                        throw reason;
                     });
                  },
               },
               {
                  key: "getTextContent",
                  value: function getTextContent(_ref56) {
                     var _this49 = this;
                     var stream = _ref56.stream,
                        task = _ref56.task,
                        resources = _ref56.resources,
                        _ref56$stateManager = _ref56.stateManager,
                        stateManager =
                           _ref56$stateManager === void 0 ? null : _ref56$stateManager,
                        _ref56$includeMarkedC = _ref56.includeMarkedContent,
                        includeMarkedContent =
                           _ref56$includeMarkedC === void 0
                              ? false
                              : _ref56$includeMarkedC,
                        sink = _ref56.sink,
                        _ref56$seenStyles = _ref56.seenStyles,
                        seenStyles =
                           _ref56$seenStyles === void 0 ? new Set() : _ref56$seenStyles,
                        viewBox = _ref56.viewBox,
                        _ref56$markedContentD = _ref56.markedContentData,
                        markedContentData =
                           _ref56$markedContentD === void 0
                              ? null
                              : _ref56$markedContentD,
                        _ref56$disableNormali = _ref56.disableNormalization,
                        disableNormalization =
                           _ref56$disableNormali === void 0
                              ? false
                              : _ref56$disableNormali,
                        _ref56$keepWhiteSpace = _ref56.keepWhiteSpace,
                        keepWhiteSpace =
                           _ref56$keepWhiteSpace === void 0
                              ? false
                              : _ref56$keepWhiteSpace;
                     resources || (resources = Dict.empty);
                     stateManager ||
                     (stateManager = new StateManager(new TextState()));
                     if (includeMarkedContent) {
                        markedContentData || (markedContentData = { level: 0 });
                     }
                     var textContent = { items: [], styles: Object.create(null) };
                     var textContentItem = {
                        initialized: false,
                        str: [],
                        totalWidth: 0,
                        totalHeight: 0,
                        width: 0,
                        height: 0,
                        vertical: false,
                        prevTransform: null,
                        textAdvanceScale: 0,
                        spaceInFlowMin: 0,
                        spaceInFlowMax: 0,
                        trackingSpaceMin: Infinity,
                        negativeSpaceMax: -Infinity,
                        notASpace: -Infinity,
                        transform: null,
                        fontName: null,
                        hasEOL: false,
                     };
                     var twoLastChars = [" ", " "];
                     var twoLastCharsPos = 0;
                     function saveLastChar(_char9) {
                        var nextPos = (twoLastCharsPos + 1) % 2;
                        var ret =
                           twoLastChars[twoLastCharsPos] !== " " &&
                           twoLastChars[nextPos] === " ";
                        twoLastChars[twoLastCharsPos] = _char9;
                        twoLastCharsPos = nextPos;
                        return !keepWhiteSpace && ret;
                     }
                     function shouldAddWhitepsace() {
                        return (
                           !keepWhiteSpace &&
                           twoLastChars[twoLastCharsPos] !== " " &&
                           twoLastChars[(twoLastCharsPos + 1) % 2] === " "
                        );
                     }
                     function resetLastChars() {
                        twoLastChars[0] = twoLastChars[1] = " ";
                        twoLastCharsPos = 0;
                     }
                     var TRACKING_SPACE_FACTOR = 0.102;
                     var NOT_A_SPACE_FACTOR = 0.03;
                     var NEGATIVE_SPACE_FACTOR = -0.2;
                     var SPACE_IN_FLOW_MIN_FACTOR = 0.102;
                     var SPACE_IN_FLOW_MAX_FACTOR = 0.6;
                     var VERTICAL_SHIFT_RATIO = 0.25;
                     var self = this;
                     var xref = this.xref;
                     var showSpacedTextBuffer = [];
                     var xobjs = null;
                     var emptyXObjectCache = new LocalImageCache();
                     var emptyGStateCache = new LocalGStateCache();
                     var preprocessor = new EvaluatorPreprocessor(
                        stream,
                        xref,
                        stateManager,
                     );
                     var textState;
                     function pushWhitespace(_ref57) {
                        var _ref57$width = _ref57.width,
                           width = _ref57$width === void 0 ? 0 : _ref57$width,
                           _ref57$height = _ref57.height,
                           height = _ref57$height === void 0 ? 0 : _ref57$height,
                           _ref57$transform = _ref57.transform,
                           transform =
                              _ref57$transform === void 0
                                 ? textContentItem.prevTransform
                                 : _ref57$transform,
                           _ref57$fontName = _ref57.fontName,
                           fontName =
                              _ref57$fontName === void 0
                                 ? textContentItem.fontName
                                 : _ref57$fontName;
                        textContent.items.push({
                           str: " ",
                           dir: "ltr",
                           width: width,
                           height: height,
                           transform: transform,
                           fontName: fontName,
                           hasEOL: false,
                        });
                     }
                     function getCurrentTextTransform() {
                        var font = textState.font;
                        var tsm = [
                           textState.fontSize * textState.textHScale,
                           0,
                           0,
                           textState.fontSize,
                           0,
                           textState.textRise,
                        ];
                        if (
                           font.isType3Font &&
                           (textState.fontSize <= 1 || font.isCharBBox) &&
                           !isArrayEqual(textState.fontMatrix, FONT_IDENTITY_MATRIX)
                        ) {
                           var glyphHeight = font.bbox[3] - font.bbox[1];
                           if (glyphHeight > 0) {
                              tsm[3] *= glyphHeight * textState.fontMatrix[3];
                           }
                        }
                        return Util.transform(
                           textState.ctm,
                           Util.transform(textState.textMatrix, tsm),
                        );
                     }
                     function ensureTextContentItem() {
                        if (textContentItem.initialized) {
                           return textContentItem;
                        }
                        var _textState = textState,
                           font = _textState.font,
                           loadedName = _textState.loadedName;
                        if (!seenStyles.has(loadedName)) {
                           seenStyles.add(loadedName);
                           textContent.styles[loadedName] = {
                              fontFamily: font.fallbackName,
                              ascent: font.ascent,
                              descent: font.descent,
                              vertical: font.vertical,
                           };
                           if (self.options.fontExtraProperties && font.systemFontInfo) {
                              var style = textContent.styles[loadedName];
                              style.fontSubstitution = font.systemFontInfo.css;
                              style.fontSubstitutionLoadedName =
                                 font.systemFontInfo.loadedName;
                           }
                        }
                        textContentItem.fontName = loadedName;
                        var trm = (textContentItem.transform =
                           getCurrentTextTransform());
                        if (!font.vertical) {
                           textContentItem.width = textContentItem.totalWidth = 0;
                           textContentItem.height = textContentItem.totalHeight =
                              Math.hypot(trm[2], trm[3]);
                           textContentItem.vertical = false;
                        } else {
                           textContentItem.width = textContentItem.totalWidth =
                              Math.hypot(trm[0], trm[1]);
                           textContentItem.height = textContentItem.totalHeight = 0;
                           textContentItem.vertical = true;
                        }
                        var scaleLineX = Math.hypot(
                           textState.textLineMatrix[0],
                           textState.textLineMatrix[1],
                        );
                        var scaleCtmX = Math.hypot(textState.ctm[0], textState.ctm[1]);
                        textContentItem.textAdvanceScale = scaleCtmX * scaleLineX;
                        var _textState2 = textState,
                           fontSize = _textState2.fontSize;
                        textContentItem.trackingSpaceMin =
                           fontSize * TRACKING_SPACE_FACTOR;
                        textContentItem.notASpace = fontSize * NOT_A_SPACE_FACTOR;
                        textContentItem.negativeSpaceMax =
                           fontSize * NEGATIVE_SPACE_FACTOR;
                        textContentItem.spaceInFlowMin =
                           fontSize * SPACE_IN_FLOW_MIN_FACTOR;
                        textContentItem.spaceInFlowMax =
                           fontSize * SPACE_IN_FLOW_MAX_FACTOR;
                        textContentItem.hasEOL = false;
                        textContentItem.initialized = true;
                        return textContentItem;
                     }
                     function updateAdvanceScale() {
                        if (!textContentItem.initialized) {
                           return;
                        }
                        var scaleLineX = Math.hypot(
                           textState.textLineMatrix[0],
                           textState.textLineMatrix[1],
                        );
                        var scaleCtmX = Math.hypot(textState.ctm[0], textState.ctm[1]);
                        var scaleFactor = scaleCtmX * scaleLineX;
                        if (scaleFactor === textContentItem.textAdvanceScale) {
                           return;
                        }
                        if (!textContentItem.vertical) {
                           textContentItem.totalWidth +=
                              textContentItem.width * textContentItem.textAdvanceScale;
                           textContentItem.width = 0;
                        } else {
                           textContentItem.totalHeight +=
                              textContentItem.height * textContentItem.textAdvanceScale;
                           textContentItem.height = 0;
                        }
                        textContentItem.textAdvanceScale = scaleFactor;
                     }
                     function runBidiTransform(textChunk) {
                        var text = textChunk.str.join("");
                        if (!disableNormalization) {
                           text = normalizeUnicode(text);
                        }
                        var bidiResult = bidi(text, -1, textChunk.vertical);
                        return {
                           str: bidiResult.str,
                           dir: bidiResult.dir,
                           width: Math.abs(textChunk.totalWidth),
                           height: Math.abs(textChunk.totalHeight),
                           transform: textChunk.transform,
                           fontName: textChunk.fontName,
                           hasEOL: textChunk.hasEOL,
                        };
                     }
                     function handleSetFont(_x41, _x42) {
                        return _handleSetFont2.apply(this, arguments);
                     }
                     function _handleSetFont2() {
                        _handleSetFont2 = _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(
                              function _callee17(fontName, fontRef) {
                                 var translated, _t17;
                                 return _regenerator().w(
                                    function (_context20) {
                                       while (1)
                                          switch ((_context20.p = _context20.n)) {
                                             case 0:
                                                _context20.n = 1;
                                                return self.loadFont(
                                                   fontName,
                                                   fontRef,
                                                   resources,
                                                );
                                             case 1:
                                                translated = _context20.v;
                                                if (!translated.font.isType3Font) {
                                                   _context20.n = 5;
                                                   break;
                                                }
                                                _context20.p = 2;
                                                _context20.n = 3;
                                                return translated.loadType3Data(
                                                   self,
                                                   resources,
                                                   task,
                                                );
                                             case 3:
                                                _context20.n = 5;
                                                break;
                                             case 4:
                                                _context20.p = 4;
                                                _t17 = _context20.v;
                                             case 5:
                                                textState.loadedName = translated.loadedName;
                                                textState.font = translated.font;
                                                textState.fontMatrix =
                                                   translated.font.fontMatrix ||
                                                   FONT_IDENTITY_MATRIX;
                                             case 6:
                                                return _context20.a(2);
                                          }
                                    },
                                    _callee17,
                                    null,
                                    [[2, 4]],
                                 );
                              },
                           ),
                        );
                        return _handleSetFont2.apply(this, arguments);
                     }
                     function applyInverseRotation(x, y, matrix) {
                        var scale = Math.hypot(matrix[0], matrix[1]);
                        return [
                           (matrix[0] * x + matrix[1] * y) / scale,
                           (matrix[2] * x + matrix[3] * y) / scale,
                        ];
                     }
                     function compareWithLastPosition(glyphWidth) {
                        var _textState$font;
                        var currentTransform = getCurrentTextTransform();
                        var posX = currentTransform[4];
                        var posY = currentTransform[5];
                        if (
                           (_textState$font = textState.font) !== null &&
                           _textState$font !== void 0 &&
                           _textState$font.vertical
                        ) {
                           if (
                              posX < viewBox[0] ||
                              posX > viewBox[2] ||
                              posY + glyphWidth < viewBox[1] ||
                              posY > viewBox[3]
                           ) {
                              return false;
                           }
                        } else if (
                           posX + glyphWidth < viewBox[0] ||
                           posX > viewBox[2] ||
                           posY < viewBox[1] ||
                           posY > viewBox[3]
                        ) {
                           return false;
                        }
                        if (!textState.font || !textContentItem.prevTransform) {
                           return true;
                        }
                        var lastPosX = textContentItem.prevTransform[4];
                        var lastPosY = textContentItem.prevTransform[5];
                        if (lastPosX === posX && lastPosY === posY) {
                           return true;
                        }
                        var rotate = -1;
                        if (
                           currentTransform[0] &&
                           currentTransform[1] === 0 &&
                           currentTransform[2] === 0
                        ) {
                           rotate = currentTransform[0] > 0 ? 0 : 180;
                        } else if (
                           currentTransform[1] &&
                           currentTransform[0] === 0 &&
                           currentTransform[3] === 0
                        ) {
                           rotate = currentTransform[1] > 0 ? 90 : 270;
                        }
                        switch (rotate) {
                           case 0:
                              break;
                           case 90:
                              var _ref58 = [posY, posX];
                              posX = _ref58[0];
                              posY = _ref58[1];
                              var _ref59 = [lastPosY, lastPosX];
                              lastPosX = _ref59[0];
                              lastPosY = _ref59[1];
                              break;
                           case 180:
                              var _ref60 = [-posX, -posY, -lastPosX, -lastPosY];
                              posX = _ref60[0];
                              posY = _ref60[1];
                              lastPosX = _ref60[2];
                              lastPosY = _ref60[3];
                              break;
                           case 270:
                              var _ref61 = [-posY, -posX];
                              posX = _ref61[0];
                              posY = _ref61[1];
                              var _ref62 = [-lastPosY, -lastPosX];
                              lastPosX = _ref62[0];
                              lastPosY = _ref62[1];
                              break;
                           default:
                              var _applyInverseRotation = applyInverseRotation(
                                 posX,
                                 posY,
                                 currentTransform,
                              );
                              var _applyInverseRotation2 = _slicedToArray(
                                 _applyInverseRotation,
                                 2,
                              );
                              posX = _applyInverseRotation2[0];
                              posY = _applyInverseRotation2[1];
                              var _applyInverseRotation3 = applyInverseRotation(
                                 lastPosX,
                                 lastPosY,
                                 textContentItem.prevTransform,
                              );
                              var _applyInverseRotation4 = _slicedToArray(
                                 _applyInverseRotation3,
                                 2,
                              );
                              lastPosX = _applyInverseRotation4[0];
                              lastPosY = _applyInverseRotation4[1];
                        }
                        if (textState.font.vertical) {
                           var _advanceY =
                              (lastPosY - posY) / textContentItem.textAdvanceScale;
                           var _advanceX = posX - lastPosX;
                           var _textOrientation = Math.sign(textContentItem.height);
                           if (
                              _advanceY <
                              _textOrientation * textContentItem.negativeSpaceMax
                           ) {
                              if (Math.abs(_advanceX) > 0.5 * textContentItem.width) {
                                 appendEOL();
                                 return true;
                              }
                              resetLastChars();
                              flushTextContentItem();
                              return true;
                           }
                           if (Math.abs(_advanceX) > textContentItem.width) {
                              appendEOL();
                              return true;
                           }
                           if (
                              _advanceY <=
                              _textOrientation * textContentItem.notASpace
                           ) {
                              resetLastChars();
                           }
                           if (
                              _advanceY <=
                              _textOrientation * textContentItem.trackingSpaceMin
                           ) {
                              if (shouldAddWhitepsace()) {
                                 resetLastChars();
                                 flushTextContentItem();
                                 pushWhitespace({ height: Math.abs(_advanceY) });
                              } else {
                                 textContentItem.height += _advanceY;
                              }
                           } else if (
                              !addFakeSpaces(
                                 _advanceY,
                                 textContentItem.prevTransform,
                                 _textOrientation,
                              )
                           ) {
                              if (textContentItem.str.length === 0) {
                                 resetLastChars();
                                 pushWhitespace({ height: Math.abs(_advanceY) });
                              } else {
                                 textContentItem.height += _advanceY;
                              }
                           }
                           if (
                              Math.abs(_advanceX) >
                              textContentItem.width * VERTICAL_SHIFT_RATIO
                           ) {
                              flushTextContentItem();
                           }
                           return true;
                        }
                        var advanceX =
                           (posX - lastPosX) / textContentItem.textAdvanceScale;
                        var advanceY = posY - lastPosY;
                        var textOrientation = Math.sign(textContentItem.width);
                        if (
                           advanceX <
                           textOrientation * textContentItem.negativeSpaceMax
                        ) {
                           if (Math.abs(advanceY) > 0.5 * textContentItem.height) {
                              appendEOL();
                              return true;
                           }
                           resetLastChars();
                           flushTextContentItem();
                           return true;
                        }
                        if (Math.abs(advanceY) > textContentItem.height) {
                           appendEOL();
                           return true;
                        }
                        if (advanceX <= textOrientation * textContentItem.notASpace) {
                           resetLastChars();
                        }
                        if (
                           advanceX <=
                           textOrientation * textContentItem.trackingSpaceMin
                        ) {
                           if (shouldAddWhitepsace()) {
                              resetLastChars();
                              flushTextContentItem();
                              pushWhitespace({ width: Math.abs(advanceX) });
                           } else {
                              textContentItem.width += advanceX;
                           }
                        } else if (
                           !addFakeSpaces(
                              advanceX,
                              textContentItem.prevTransform,
                              textOrientation,
                           )
                        ) {
                           if (textContentItem.str.length === 0) {
                              resetLastChars();
                              pushWhitespace({ width: Math.abs(advanceX) });
                           } else {
                              textContentItem.width += advanceX;
                           }
                        }
                        if (
                           Math.abs(advanceY) >
                           textContentItem.height * VERTICAL_SHIFT_RATIO
                        ) {
                           flushTextContentItem();
                        }
                        return true;
                     }
                     function buildTextContentItem(_ref63) {
                        var chars = _ref63.chars,
                           extraSpacing = _ref63.extraSpacing;
                        var font = textState.font;
                        if (!chars) {
                           var charSpacing = textState.charSpacing + extraSpacing;
                           if (charSpacing) {
                              if (!font.vertical) {
                                 textState.translateTextMatrix(
                                    charSpacing * textState.textHScale,
                                    0,
                                 );
                              } else {
                                 textState.translateTextMatrix(0, -charSpacing);
                              }
                           }
                           if (keepWhiteSpace) {
                              compareWithLastPosition(0);
                           }
                           return;
                        }
                        var glyphs = font.charsToGlyphs(chars);
                        var scale = textState.fontMatrix[0] * textState.fontSize;
                        for (var i = 0, ii = glyphs.length; i < ii; i++) {
                           var glyph = glyphs[i];
                           var category = glyph.category;
                           if (category.isInvisibleFormatMark) {
                              continue;
                           }
                           var _charSpacing =
                              textState.charSpacing + (i + 1 === ii ? extraSpacing : 0);
                           var glyphWidth = glyph.width;
                           if (font.vertical) {
                              glyphWidth = glyph.vmetric ? glyph.vmetric[0] : -glyphWidth;
                           }
                           var scaledDim = glyphWidth * scale;
                           if (!keepWhiteSpace && category.isWhitespace) {
                              if (!font.vertical) {
                                 _charSpacing += scaledDim + textState.wordSpacing;
                                 textState.translateTextMatrix(
                                    _charSpacing * textState.textHScale,
                                    0,
                                 );
                              } else {
                                 _charSpacing += -scaledDim + textState.wordSpacing;
                                 textState.translateTextMatrix(0, -_charSpacing);
                              }
                              saveLastChar(" ");
                              continue;
                           }
                           if (
                              !category.isZeroWidthDiacritic &&
                              !compareWithLastPosition(scaledDim)
                           ) {
                              if (!font.vertical) {
                                 textState.translateTextMatrix(
                                    scaledDim * textState.textHScale,
                                    0,
                                 );
                              } else {
                                 textState.translateTextMatrix(0, scaledDim);
                              }
                              continue;
                           }
                           var textChunk = ensureTextContentItem();
                           if (category.isZeroWidthDiacritic) {
                              scaledDim = 0;
                           }
                           if (!font.vertical) {
                              scaledDim *= textState.textHScale;
                              textState.translateTextMatrix(scaledDim, 0);
                              textChunk.width += scaledDim;
                           } else {
                              textState.translateTextMatrix(0, scaledDim);
                              scaledDim = Math.abs(scaledDim);
                              textChunk.height += scaledDim;
                           }
                           if (scaledDim) {
                              textChunk.prevTransform = getCurrentTextTransform();
                           }
                           var glyphUnicode = glyph.unicode;
                           if (saveLastChar(glyphUnicode)) {
                              textChunk.str.push(" ");
                           }
                           textChunk.str.push(glyphUnicode);
                           if (_charSpacing) {
                              if (!font.vertical) {
                                 textState.translateTextMatrix(
                                    _charSpacing * textState.textHScale,
                                    0,
                                 );
                              } else {
                                 textState.translateTextMatrix(0, -_charSpacing);
                              }
                           }
                        }
                     }
                     function appendEOL() {
                        resetLastChars();
                        if (textContentItem.initialized) {
                           textContentItem.hasEOL = true;
                           flushTextContentItem();
                        } else {
                           textContent.items.push({
                              str: "",
                              dir: "ltr",
                              width: 0,
                              height: 0,
                              transform: getCurrentTextTransform(),
                              fontName: textState.loadedName,
                              hasEOL: true,
                           });
                        }
                     }
                     function addFakeSpaces(width, transf, textOrientation) {
                        if (
                           textOrientation * textContentItem.spaceInFlowMin <= width &&
                           width <= textOrientation * textContentItem.spaceInFlowMax
                        ) {
                           if (textContentItem.initialized) {
                              resetLastChars();
                              textContentItem.str.push(" ");
                           }
                           return false;
                        }
                        var fontName = textContentItem.fontName;
                        var height = 0;
                        if (textContentItem.vertical) {
                           height = width;
                           width = 0;
                        }
                        flushTextContentItem();
                        resetLastChars();
                        pushWhitespace({
                           width: Math.abs(width),
                           height: Math.abs(height),
                           transform: transf || getCurrentTextTransform(),
                           fontName: fontName,
                        });
                        return true;
                     }
                     function flushTextContentItem() {
                        if (!textContentItem.initialized || !textContentItem.str) {
                           return;
                        }
                        if (!textContentItem.vertical) {
                           textContentItem.totalWidth +=
                              textContentItem.width * textContentItem.textAdvanceScale;
                        } else {
                           textContentItem.totalHeight +=
                              textContentItem.height * textContentItem.textAdvanceScale;
                        }
                        textContent.items.push(runBidiTransform(textContentItem));
                        textContentItem.initialized = false;
                        textContentItem.str.length = 0;
                     }
                     function enqueueChunk() {
                        var batch =
                           arguments.length > 0 && arguments[0] !== undefined
                              ? arguments[0]
                              : false;
                        var length = textContent.items.length;
                        if (length === 0) {
                           return;
                        }
                        if (batch && length < TEXT_CHUNK_BATCH_SIZE) {
                           return;
                        }
                        sink.enqueue(textContent, length);
                        textContent.items = [];
                        textContent.styles = Object.create(null);
                     }
                     var timeSlotManager = new TimeSlotManager();
                     return new Promise(function promiseBody(resolve, reject) {
                        var next = function next(promise) {
                           enqueueChunk(true);
                           Promise.all([promise, sink.ready]).then(function () {
                              try {
                                 promiseBody(resolve, reject);
                              } catch (ex) {
                                 reject(ex);
                              }
                           }, reject);
                        };
                        task.ensureNotTerminated();
                        timeSlotManager.reset();
                        var operation = {};
                        var stop,
                           args = [];
                        while (!(stop = timeSlotManager.check())) {
                           args.length = 0;
                           operation.args = args;
                           if (!preprocessor.read(operation)) {
                              break;
                           }
                           var previousState = textState;
                           textState = stateManager.state;
                           var fn = operation.fn;
                           args = operation.args;
                           switch (fn | 0) {
                              case OPS.setFont:
                                 var fontNameArg = args[0].name,
                                    fontSizeArg = args[1];
                                 if (
                                    textState.font &&
                                    fontNameArg === textState.fontName &&
                                    fontSizeArg === textState.fontSize
                                 ) {
                                    break;
                                 }
                                 flushTextContentItem();
                                 textState.fontName = fontNameArg;
                                 textState.fontSize = fontSizeArg;
                                 next(handleSetFont(fontNameArg, null));
                                 return;
                              case OPS.setTextRise:
                                 textState.textRise = args[0];
                                 break;
                              case OPS.setHScale:
                                 textState.textHScale = args[0] / 100;
                                 break;
                              case OPS.setLeading:
                                 textState.leading = args[0];
                                 break;
                              case OPS.moveText:
                                 textState.translateTextLineMatrix(args[0], args[1]);
                                 textState.textMatrix = textState.textLineMatrix.slice();
                                 break;
                              case OPS.setLeadingMoveText:
                                 textState.leading = -args[1];
                                 textState.translateTextLineMatrix(args[0], args[1]);
                                 textState.textMatrix = textState.textLineMatrix.slice();
                                 break;
                              case OPS.nextLine:
                                 textState.carriageReturn();
                                 break;
                              case OPS.setTextMatrix:
                                 textState.setTextMatrix(
                                    args[0],
                                    args[1],
                                    args[2],
                                    args[3],
                                    args[4],
                                    args[5],
                                 );
                                 textState.setTextLineMatrix(
                                    args[0],
                                    args[1],
                                    args[2],
                                    args[3],
                                    args[4],
                                    args[5],
                                 );
                                 updateAdvanceScale();
                                 break;
                              case OPS.setCharSpacing:
                                 textState.charSpacing = args[0];
                                 break;
                              case OPS.setWordSpacing:
                                 textState.wordSpacing = args[0];
                                 break;
                              case OPS.beginText:
                                 textState.textMatrix = IDENTITY_MATRIX.slice();
                                 textState.textLineMatrix = IDENTITY_MATRIX.slice();
                                 break;
                              case OPS.showSpacedText:
                                 if (!stateManager.state.font) {
                                    self.ensureStateFont(stateManager.state);
                                    continue;
                                 }
                                 var spaceFactor =
                                    ((textState.font.vertical ? 1 : -1) *
                                       textState.fontSize) /
                                    1000;
                                 var elements = args[0];
                                 for (var i = 0, ii = elements.length; i < ii; i++) {
                                    var item = elements[i];
                                    if (typeof item === "string") {
                                       showSpacedTextBuffer.push(item);
                                    } else if (typeof item === "number" && item !== 0) {
                                       var str = showSpacedTextBuffer.join("");
                                       showSpacedTextBuffer.length = 0;
                                       buildTextContentItem({
                                          chars: str,
                                          extraSpacing: item * spaceFactor,
                                       });
                                    }
                                 }
                                 if (showSpacedTextBuffer.length > 0) {
                                    var _str = showSpacedTextBuffer.join("");
                                    showSpacedTextBuffer.length = 0;
                                    buildTextContentItem({ chars: _str, extraSpacing: 0 });
                                 }
                                 break;
                              case OPS.showText:
                                 if (!stateManager.state.font) {
                                    self.ensureStateFont(stateManager.state);
                                    continue;
                                 }
                                 buildTextContentItem({ chars: args[0], extraSpacing: 0 });
                                 break;
                              case OPS.nextLineShowText:
                                 if (!stateManager.state.font) {
                                    self.ensureStateFont(stateManager.state);
                                    continue;
                                 }
                                 textState.carriageReturn();
                                 buildTextContentItem({ chars: args[0], extraSpacing: 0 });
                                 break;
                              case OPS.nextLineSetSpacingShowText:
                                 if (!stateManager.state.font) {
                                    self.ensureStateFont(stateManager.state);
                                    continue;
                                 }
                                 textState.wordSpacing = args[0];
                                 textState.charSpacing = args[1];
                                 textState.carriageReturn();
                                 buildTextContentItem({ chars: args[2], extraSpacing: 0 });
                                 break;
                              case OPS.paintXObject:
                                 flushTextContentItem();
                                 if (!xobjs) {
                                    xobjs = resources.get("XObject") || Dict.empty;
                                 }
                                 var isValidName = args[0] instanceof Name;
                                 var name = args[0].name;
                                 if (isValidName && emptyXObjectCache.getByName(name)) {
                                    break;
                                 }
                                 next(
                                    new Promise(function (resolveXObject, rejectXObject) {
                                       if (!isValidName) {
                                          throw new FormatError(
                                             "XObject must be referred to by name.",
                                          );
                                       }
                                       var xobj = xobjs.getRaw(name);
                                       if (xobj instanceof Ref) {
                                          if (emptyXObjectCache.getByRef(xobj)) {
                                             resolveXObject();
                                             return;
                                          }
                                          var globalImage = self.globalImageCache.getData(
                                             xobj,
                                             self.pageIndex,
                                          );
                                          if (globalImage) {
                                             resolveXObject();
                                             return;
                                          }
                                          xobj = xref.fetch(xobj);
                                       }
                                       if (!(xobj instanceof BaseStream)) {
                                          throw new FormatError("XObject should be a stream");
                                       }
                                       var type = xobj.dict.get("Subtype");
                                       if (!(type instanceof Name)) {
                                          throw new FormatError(
                                             "XObject should have a Name subtype",
                                          );
                                       }
                                       if (type.name !== "Form") {
                                          emptyXObjectCache.set(name, xobj.dict.objId, true);
                                          resolveXObject();
                                          return;
                                       }
                                       var currentState = stateManager.state.clone();
                                       var xObjStateManager = new StateManager(currentState);
                                       var matrix = xobj.dict.getArray("Matrix");
                                       if (Array.isArray(matrix) && matrix.length === 6) {
                                          xObjStateManager.transform(matrix);
                                       }
                                       enqueueChunk();
                                       var sinkWrapper = {
                                          enqueueInvoked: false,
                                          enqueue: function enqueue(chunk, size) {
                                             this.enqueueInvoked = true;
                                             sink.enqueue(chunk, size);
                                          },
                                          get desiredSize() {
                                             return sink.desiredSize;
                                          },
                                          get ready() {
                                             return sink.ready;
                                          },
                                       };
                                       self
                                          .getTextContent({
                                             stream: xobj,
                                             task: task,
                                             resources:
                                                xobj.dict.get("Resources") || resources,
                                             stateManager: xObjStateManager,
                                             includeMarkedContent: includeMarkedContent,
                                             sink: sinkWrapper,
                                             seenStyles: seenStyles,
                                             viewBox: viewBox,
                                             markedContentData: markedContentData,
                                             disableNormalization: disableNormalization,
                                             keepWhiteSpace: keepWhiteSpace,
                                          })
                                          .then(function () {
                                             if (!sinkWrapper.enqueueInvoked) {
                                                emptyXObjectCache.set(
                                                   name,
                                                   xobj.dict.objId,
                                                   true,
                                                );
                                             }
                                             resolveXObject();
                                          }, rejectXObject);
                                    })["catch"](function (reason) {
                                       if (reason instanceof AbortException) {
                                          return;
                                       }
                                       if (self.options.ignoreErrors) {
                                          warn(
                                             'getTextContent - ignoring XObject: "'.concat(
                                                reason,
                                                '".',
                                             ),
                                          );
                                          return;
                                       }
                                       throw reason;
                                    }),
                                 );
                                 return;
                              case OPS.setGState:
                                 isValidName = args[0] instanceof Name;
                                 name = args[0].name;
                                 if (isValidName && emptyGStateCache.getByName(name)) {
                                    break;
                                 }
                                 next(
                                    new Promise(function (resolveGState, rejectGState) {
                                       if (!isValidName) {
                                          throw new FormatError(
                                             "GState must be referred to by name.",
                                          );
                                       }
                                       var extGState = resources.get("ExtGState");
                                       if (!(extGState instanceof Dict)) {
                                          throw new FormatError(
                                             "ExtGState should be a dictionary.",
                                          );
                                       }
                                       var gState = extGState.get(name);
                                       if (!(gState instanceof Dict)) {
                                          throw new FormatError(
                                             "GState should be a dictionary.",
                                          );
                                       }
                                       var gStateFont = gState.get("Font");
                                       if (!gStateFont) {
                                          emptyGStateCache.set(name, gState.objId, true);
                                          resolveGState();
                                          return;
                                       }
                                       flushTextContentItem();
                                       textState.fontName = null;
                                       textState.fontSize = gStateFont[1];
                                       handleSetFont(null, gStateFont[0]).then(
                                          resolveGState,
                                          rejectGState,
                                       );
                                    })["catch"](function (reason) {
                                       if (reason instanceof AbortException) {
                                          return;
                                       }
                                       if (self.options.ignoreErrors) {
                                          warn(
                                             'getTextContent - ignoring ExtGState: "'.concat(
                                                reason,
                                                '".',
                                             ),
                                          );
                                          return;
                                       }
                                       throw reason;
                                    }),
                                 );
                                 return;
                              case OPS.beginMarkedContent:
                                 flushTextContentItem();
                                 if (includeMarkedContent) {
                                    markedContentData.level++;
                                    textContent.items.push({
                                       type: "beginMarkedContent",
                                       tag: args[0] instanceof Name ? args[0].name : null,
                                    });
                                 }
                                 break;
                              case OPS.beginMarkedContentProps:
                                 flushTextContentItem();
                                 if (includeMarkedContent) {
                                    markedContentData.level++;
                                    var mcid = null;
                                    if (args[1] instanceof Dict) {
                                       mcid = args[1].get("MCID");
                                    }
                                    textContent.items.push({
                                       type: "beginMarkedContentProps",
                                       id: Number.isInteger(mcid)
                                          ? ""
                                             .concat(self.idFactory.getPageObjId(), "_mc")
                                             .concat(mcid)
                                          : null,
                                       tag: args[0] instanceof Name ? args[0].name : null,
                                    });
                                 }
                                 break;
                              case OPS.endMarkedContent:
                                 flushTextContentItem();
                                 if (includeMarkedContent) {
                                    if (markedContentData.level === 0) {
                                       break;
                                    }
                                    markedContentData.level--;
                                    textContent.items.push({ type: "endMarkedContent" });
                                 }
                                 break;
                              case OPS.restore:
                                 if (
                                    previousState &&
                                    (previousState.font !== textState.font ||
                                       previousState.fontSize !== textState.fontSize ||
                                       previousState.fontName !== textState.fontName)
                                 ) {
                                    flushTextContentItem();
                                 }
                                 break;
                           }
                           if (textContent.items.length >= sink.desiredSize) {
                              stop = true;
                              break;
                           }
                        }
                        if (stop) {
                           next(deferred);
                           return;
                        }
                        flushTextContentItem();
                        enqueueChunk();
                        resolve();
                     })["catch"](function (reason) {
                        if (reason instanceof AbortException) {
                           return;
                        }
                        if (_this49.options.ignoreErrors) {
                           warn(
                              'getTextContent - ignoring errors during "'.concat(
                                 task.name,
                                 '" ',
                              ) + 'task: "'.concat(reason, '".'),
                           );
                           flushTextContentItem();
                           enqueueChunk();
                           return;
                        }
                        throw reason;
                     });
                  },
               },
               {
                  key: "extractDataStructures",
                  value: (function () {
                     var _extractDataStructures = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(
                           function _callee18(dict, properties) {
                              var xref,
                                 cidToGidBytes,
                                 toUnicodePromise,
                                 cidSystemInfo,
                                 cidToGidMap,
                                 differences,
                                 baseEncodingName,
                                 encoding,
                                 diffEncoding,
                                 index,
                                 _iterator68,
                                 _step68,
                                 entry,
                                 data,
                                 msg,
                                 nonEmbeddedFont,
                                 isSymbolsFontName,
                                 isSymbolicFont,
                                 isNonsymbolicFont,
                                 builtToUnicode,
                                 _t18,
                                 _t19;
                              return _regenerator().w(
                                 function (_context21) {
                                    while (1)
                                       switch ((_context21.p = _context21.n)) {
                                          case 0:
                                             xref = this.xref;
                                             toUnicodePromise = this.readToUnicode(
                                                properties.toUnicode,
                                             );
                                             if (!properties.composite) {
                                                _context21.n = 4;
                                                break;
                                             }
                                             cidSystemInfo = dict.get("CIDSystemInfo");
                                             if (cidSystemInfo instanceof Dict) {
                                                properties.cidSystemInfo = {
                                                   registry: stringToPDFString(
                                                      cidSystemInfo.get("Registry"),
                                                   ),
                                                   ordering: stringToPDFString(
                                                      cidSystemInfo.get("Ordering"),
                                                   ),
                                                   supplement: cidSystemInfo.get("Supplement"),
                                                };
                                             }
                                             _context21.p = 1;
                                             cidToGidMap = dict.get("CIDToGIDMap");
                                             if (cidToGidMap instanceof BaseStream) {
                                                cidToGidBytes = cidToGidMap.getBytes();
                                             }
                                             _context21.n = 4;
                                             break;
                                          case 2:
                                             _context21.p = 2;
                                             _t18 = _context21.v;
                                             if (this.options.ignoreErrors) {
                                                _context21.n = 3;
                                                break;
                                             }
                                             throw _t18;
                                          case 3:
                                             warn(
                                                'extractDataStructures - ignoring CIDToGIDMap data: "'.concat(
                                                   _t18,
                                                   '".',
                                                ),
                                             );
                                          case 4:
                                             differences = [];
                                             baseEncodingName = null;
                                             if (!dict.has("Encoding")) {
                                                _context21.n = 18;
                                                break;
                                             }
                                             encoding = dict.get("Encoding");
                                             if (!(encoding instanceof Dict)) {
                                                _context21.n = 14;
                                                break;
                                             }
                                             baseEncodingName = encoding.get("BaseEncoding");
                                             baseEncodingName =
                                                baseEncodingName instanceof Name
                                                   ? baseEncodingName.name
                                                   : null;
                                             if (!encoding.has("Differences")) {
                                                _context21.n = 13;
                                                break;
                                             }
                                             diffEncoding = encoding.get("Differences");
                                             index = 0;
                                             _iterator68 =
                                                _createForOfIteratorHelper(diffEncoding);
                                             _context21.p = 5;
                                             _iterator68.s();
                                          case 6:
                                             if ((_step68 = _iterator68.n()).done) {
                                                _context21.n = 10;
                                                break;
                                             }
                                             entry = _step68.value;
                                             data = xref.fetchIfRef(entry);
                                             if (!(typeof data === "number")) {
                                                _context21.n = 7;
                                                break;
                                             }
                                             index = data;
                                             _context21.n = 9;
                                             break;
                                          case 7:
                                             if (!(data instanceof Name)) {
                                                _context21.n = 8;
                                                break;
                                             }
                                             differences[index++] = data.name;
                                             _context21.n = 9;
                                             break;
                                          case 8:
                                             throw new FormatError(
                                                "Invalid entry in 'Differences' array: ".concat(
                                                   data,
                                                ),
                                             );
                                          case 9:
                                             _context21.n = 6;
                                             break;
                                          case 10:
                                             _context21.n = 12;
                                             break;
                                          case 11:
                                             _context21.p = 11;
                                             _t19 = _context21.v;
                                             _iterator68.e(_t19);
                                          case 12:
                                             _context21.p = 12;
                                             _iterator68.f();
                                             return _context21.f(12);
                                          case 13:
                                             _context21.n = 17;
                                             break;
                                          case 14:
                                             if (!(encoding instanceof Name)) {
                                                _context21.n = 15;
                                                break;
                                             }
                                             baseEncodingName = encoding.name;
                                             _context21.n = 17;
                                             break;
                                          case 15:
                                             msg = "Encoding is not a Name nor a Dict";
                                             if (this.options.ignoreErrors) {
                                                _context21.n = 16;
                                                break;
                                             }
                                             throw new FormatError(msg);
                                          case 16:
                                             warn(msg);
                                          case 17:
                                             if (
                                                baseEncodingName !== "MacRomanEncoding" &&
                                                baseEncodingName !== "MacExpertEncoding" &&
                                                baseEncodingName !== "WinAnsiEncoding"
                                             ) {
                                                baseEncodingName = null;
                                             }
                                          case 18:
                                             ((nonEmbeddedFont =
                                                !properties.file || properties.isInternalFont),
                                                (isSymbolsFontName =
                                                   getSymbolsFonts()[properties.name]));
                                             if (
                                                baseEncodingName &&
                                                nonEmbeddedFont &&
                                                isSymbolsFontName
                                             ) {
                                                baseEncodingName = null;
                                             }
                                             if (baseEncodingName) {
                                                properties.defaultEncoding =
                                                   getEncoding(baseEncodingName);
                                             } else {
                                                isSymbolicFont = !!(
                                                   properties.flags & FontFlags.Symbolic
                                                );
                                                isNonsymbolicFont = !!(
                                                   properties.flags & FontFlags.Nonsymbolic
                                                );
                                                encoding = StandardEncoding;
                                                if (
                                                   properties.type === "TrueType" &&
                                                   !isNonsymbolicFont
                                                ) {
                                                   encoding = WinAnsiEncoding;
                                                }
                                                if (isSymbolicFont || isSymbolsFontName) {
                                                   encoding = MacRomanEncoding;
                                                   if (nonEmbeddedFont) {
                                                      if (/Symbol/i.test(properties.name)) {
                                                         encoding = SymbolSetEncoding;
                                                      } else if (
                                                         /Dingbats/i.test(properties.name)
                                                      ) {
                                                         encoding = ZapfDingbatsEncoding;
                                                      } else if (
                                                         /Wingdings/i.test(properties.name)
                                                      ) {
                                                         encoding = WinAnsiEncoding;
                                                      }
                                                   }
                                                }
                                                properties.defaultEncoding = encoding;
                                             }
                                             properties.differences = differences;
                                             properties.baseEncodingName = baseEncodingName;
                                             properties.hasEncoding =
                                                !!baseEncodingName || differences.length > 0;
                                             properties.dict = dict;
                                             _context21.n = 19;
                                             return toUnicodePromise;
                                          case 19:
                                             properties.toUnicode = _context21.v;
                                             _context21.n = 20;
                                             return this.buildToUnicode(properties);
                                          case 20:
                                             builtToUnicode = _context21.v;
                                             properties.toUnicode = builtToUnicode;
                                             if (cidToGidBytes) {
                                                properties.cidToGidMap = this.readCidToGidMap(
                                                   cidToGidBytes,
                                                   builtToUnicode,
                                                );
                                             }
                                             return _context21.a(2, properties);
                                       }
                                 },
                                 _callee18,
                                 this,
                                 [
                                    [5, 11, 12, 13],
                                    [1, 2],
                                 ],
                              );
                           },
                        ),
                     );
                     function extractDataStructures(_x43, _x44) {
                        return _extractDataStructures.apply(this, arguments);
                     }
                     return extractDataStructures;
                  })(),
               },
               {
                  key: "_simpleFontToUnicode",
                  value: function _simpleFontToUnicode(properties) {
                     var forceGlyphs =
                        arguments.length > 1 && arguments[1] !== undefined
                           ? arguments[1]
                           : false;
                     assert(!properties.composite, "Must be a simple font.");
                     var toUnicode = [];
                     var encoding = properties.defaultEncoding.slice();
                     var baseEncodingName = properties.baseEncodingName;
                     var differences = properties.differences;
                     for (var charcode in differences) {
                        var glyphName = differences[charcode];
                        if (glyphName === ".notdef") {
                           continue;
                        }
                        encoding[charcode] = glyphName;
                     }
                     var glyphsUnicodeMap = getGlyphsUnicode();
                     for (var _charcode2 in encoding) {
                        var _glyphName2 = encoding[_charcode2];
                        if (_glyphName2 === "") {
                           continue;
                        }
                        var unicode = glyphsUnicodeMap[_glyphName2];
                        if (unicode !== undefined) {
                           toUnicode[_charcode2] = String.fromCharCode(unicode);
                           continue;
                        }
                        var code = 0;
                        switch (_glyphName2[0]) {
                           case "G":
                              if (_glyphName2.length === 3) {
                                 code = parseInt(_glyphName2.substring(1), 16);
                              }
                              break;
                           case "g":
                              if (_glyphName2.length === 5) {
                                 code = parseInt(_glyphName2.substring(1), 16);
                              }
                              break;
                           case "C":
                           case "c":
                              if (_glyphName2.length >= 3 && _glyphName2.length <= 4) {
                                 var codeStr = _glyphName2.substring(1);
                                 if (forceGlyphs) {
                                    code = parseInt(codeStr, 16);
                                    break;
                                 }
                                 code = +codeStr;
                                 if (
                                    Number.isNaN(code) &&
                                    Number.isInteger(parseInt(codeStr, 16))
                                 ) {
                                    return this._simpleFontToUnicode(properties, true);
                                 }
                              }
                              break;
                           case "u":
                              unicode = getUnicodeForGlyph(_glyphName2, glyphsUnicodeMap);
                              if (unicode !== -1) {
                                 code = unicode;
                              }
                              break;
                           default:
                              switch (_glyphName2) {
                                 case "f_h":
                                 case "f_t":
                                 case "T_h":
                                    toUnicode[_charcode2] = _glyphName2.replaceAll("_", "");
                                    continue;
                              }
                              break;
                        }
                        if (code > 0 && code <= 0x10ffff && Number.isInteger(code)) {
                           if (baseEncodingName && code === +_charcode2) {
                              var baseEncoding = getEncoding(baseEncodingName);
                              if (
                                 baseEncoding &&
                                 (_glyphName2 = baseEncoding[_charcode2])
                              ) {
                                 toUnicode[_charcode2] = String.fromCharCode(
                                    glyphsUnicodeMap[_glyphName2],
                                 );
                                 continue;
                              }
                           }
                           toUnicode[_charcode2] = String.fromCodePoint(code);
                        }
                     }
                     return toUnicode;
                  },
               },
               {
                  key: "buildToUnicode",
                  value: (function () {
                     var _buildToUnicode = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee19(properties) {
                           var _properties$toUnicode, _properties$cidSystem;
                           var _properties$cidSystem2,
                              registry,
                              ordering,
                              ucs2CMapName,
                              ucs2CMap,
                              toUnicode,
                              buf;
                           return _regenerator().w(
                              function (_context22) {
                                 while (1)
                                    switch (_context22.n) {
                                       case 0:
                                          properties.hasIncludedToUnicodeMap =
                                             ((_properties$toUnicode =
                                                properties.toUnicode) === null ||
                                             _properties$toUnicode === void 0
                                                ? void 0
                                                : _properties$toUnicode.length) > 0;
                                          if (!properties.hasIncludedToUnicodeMap) {
                                             _context22.n = 1;
                                             break;
                                          }
                                          if (
                                             !properties.composite &&
                                             properties.hasEncoding
                                          ) {
                                             properties.fallbackToUnicode =
                                                this._simpleFontToUnicode(properties);
                                          }
                                          return _context22.a(2, properties.toUnicode);
                                       case 1:
                                          if (properties.composite) {
                                             _context22.n = 2;
                                             break;
                                          }
                                          return _context22.a(
                                             2,
                                             new ToUnicodeMap(
                                                this._simpleFontToUnicode(properties),
                                             ),
                                          );
                                       case 2:
                                          if (
                                             !(
                                                properties.composite &&
                                                ((properties.cMap.builtInCMap &&
                                                      !(properties.cMap instanceof IdentityCMap)) ||
                                                   (((_properties$cidSystem =
                                                         properties.cidSystemInfo) === null ||
                                                      _properties$cidSystem === void 0
                                                         ? void 0
                                                         : _properties$cidSystem.registry) ===
                                                      "Adobe" &&
                                                      (properties.cidSystemInfo.ordering ===
                                                         "GB1" ||
                                                         properties.cidSystemInfo.ordering ===
                                                         "CNS1" ||
                                                         properties.cidSystemInfo.ordering ===
                                                         "Japan1" ||
                                                         properties.cidSystemInfo.ordering ===
                                                         "Korea1")))
                                             )
                                          ) {
                                             _context22.n = 4;
                                             break;
                                          }
                                          ((_properties$cidSystem2 =
                                             properties.cidSystemInfo),
                                             (registry = _properties$cidSystem2.registry),
                                             (ordering = _properties$cidSystem2.ordering));
                                          ucs2CMapName = Name.get(
                                             ""
                                                .concat(registry, "-")
                                                .concat(ordering, "-UCS2"),
                                          );
                                          _context22.n = 3;
                                          return CMapFactory.create({
                                             encoding: ucs2CMapName,
                                             fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                                             useCMap: null,
                                          });
                                       case 3:
                                          ucs2CMap = _context22.v;
                                          ((toUnicode = []), (buf = []));
                                          properties.cMap.forEach(function (charcode, cid) {
                                             if (cid > 0xffff) {
                                                throw new FormatError(
                                                   "Max size of CID is 65,535",
                                                );
                                             }
                                             var ucs2 = ucs2CMap.lookup(cid);
                                             if (ucs2) {
                                                buf.length = 0;
                                                for (
                                                   var i = 0, ii = ucs2.length;
                                                   i < ii;
                                                   i += 2
                                                ) {
                                                   buf.push(
                                                      (ucs2.charCodeAt(i) << 8) +
                                                      ucs2.charCodeAt(i + 1),
                                                   );
                                                }
                                                toUnicode[charcode] = String.fromCharCode.apply(
                                                   String,
                                                   buf,
                                                );
                                             }
                                          });
                                          return _context22.a(2, new ToUnicodeMap(toUnicode));
                                       case 4:
                                          return _context22.a(
                                             2,
                                             new IdentityToUnicodeMap(
                                                properties.firstChar,
                                                properties.lastChar,
                                             ),
                                          );
                                    }
                              },
                              _callee19,
                              this,
                           );
                        }),
                     );
                     function buildToUnicode(_x45) {
                        return _buildToUnicode.apply(this, arguments);
                     }
                     return buildToUnicode;
                  })(),
               },
               {
                  key: "readToUnicode",
                  value: (function () {
                     var _readToUnicode = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee20(cmapObj) {
                           var cmap, _cmap, map, _t20;
                           return _regenerator().w(
                              function (_context23) {
                                 while (1)
                                    switch ((_context23.p = _context23.n)) {
                                       case 0:
                                          if (cmapObj) {
                                             _context23.n = 1;
                                             break;
                                          }
                                          return _context23.a(2, null);
                                       case 1:
                                          if (!(cmapObj instanceof Name)) {
                                             _context23.n = 4;
                                             break;
                                          }
                                          _context23.n = 2;
                                          return CMapFactory.create({
                                             encoding: cmapObj,
                                             fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                                             useCMap: null,
                                          });
                                       case 2:
                                          cmap = _context23.v;
                                          if (!(cmap instanceof IdentityCMap)) {
                                             _context23.n = 3;
                                             break;
                                          }
                                          return _context23.a(
                                             2,
                                             new IdentityToUnicodeMap(0, 0xffff),
                                          );
                                       case 3:
                                          return _context23.a(
                                             2,
                                             new ToUnicodeMap(cmap.getMap()),
                                          );
                                       case 4:
                                          if (!(cmapObj instanceof BaseStream)) {
                                             _context23.n = 11;
                                             break;
                                          }
                                          _context23.p = 5;
                                          _context23.n = 6;
                                          return CMapFactory.create({
                                             encoding: cmapObj,
                                             fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                                             useCMap: null,
                                          });
                                       case 6:
                                          _cmap = _context23.v;
                                          if (!(_cmap instanceof IdentityCMap)) {
                                             _context23.n = 7;
                                             break;
                                          }
                                          return _context23.a(
                                             2,
                                             new IdentityToUnicodeMap(0, 0xffff),
                                          );
                                       case 7:
                                          map = new Array(_cmap.length);
                                          _cmap.forEach(function (charCode, token) {
                                             if (typeof token === "number") {
                                                map[charCode] = String.fromCodePoint(token);
                                                return;
                                             }
                                             var str = [];
                                             for (var k = 0; k < token.length; k += 2) {
                                                var w1 =
                                                   (token.charCodeAt(k) << 8) |
                                                   token.charCodeAt(k + 1);
                                                if ((w1 & 0xf800) !== 0xd800) {
                                                   str.push(w1);
                                                   continue;
                                                }
                                                k += 2;
                                                var w2 =
                                                   (token.charCodeAt(k) << 8) |
                                                   token.charCodeAt(k + 1);
                                                str.push(
                                                   ((w1 & 0x3ff) << 10) + (w2 & 0x3ff) + 0x10000,
                                                );
                                             }
                                             map[charCode] = String.fromCodePoint.apply(
                                                String,
                                                str,
                                             );
                                          });
                                          return _context23.a(2, new ToUnicodeMap(map));
                                       case 8:
                                          _context23.p = 8;
                                          _t20 = _context23.v;
                                          if (!(_t20 instanceof AbortException)) {
                                             _context23.n = 9;
                                             break;
                                          }
                                          return _context23.a(2, null);
                                       case 9:
                                          if (!this.options.ignoreErrors) {
                                             _context23.n = 10;
                                             break;
                                          }
                                          warn(
                                             'readToUnicode - ignoring ToUnicode data: "'.concat(
                                                _t20,
                                                '".',
                                             ),
                                          );
                                          return _context23.a(2, null);
                                       case 10:
                                          throw _t20;
                                       case 11:
                                          return _context23.a(2, null);
                                    }
                              },
                              _callee20,
                              this,
                              [[5, 8]],
                           );
                        }),
                     );
                     function readToUnicode(_x46) {
                        return _readToUnicode.apply(this, arguments);
                     }
                     return readToUnicode;
                  })(),
               },
               {
                  key: "readCidToGidMap",
                  value: function readCidToGidMap(glyphsData, toUnicode) {
                     var result = [];
                     for (var j = 0, jj = glyphsData.length; j < jj; j++) {
                        var glyphID = (glyphsData[j++] << 8) | glyphsData[j];
                        var code = j >> 1;
                        if (glyphID === 0 && !toUnicode.has(code)) {
                           continue;
                        }
                        result[code] = glyphID;
                     }
                     return result;
                  },
               },
               {
                  key: "extractWidths",
                  value: function extractWidths(dict, descriptor, properties) {
                     var xref = this.xref;
                     var glyphsWidths = [];
                     var defaultWidth = 0;
                     var glyphsVMetrics = [];
                     var defaultVMetrics;
                     if (properties.composite) {
                        var dw = dict.get("DW");
                        defaultWidth = Number.isInteger(dw) ? dw : 1000;
                        var widths = dict.get("W");
                        if (Array.isArray(widths)) {
                           for (var i = 0, ii = widths.length; i < ii; i++) {
                              var start = xref.fetchIfRef(widths[i++]);
                              if (!Number.isInteger(start)) {
                                 break;
                              }
                              var code = xref.fetchIfRef(widths[i]);
                              if (Array.isArray(code)) {
                                 var _iterator69 = _createForOfIteratorHelper(code),
                                    _step69;
                                 try {
                                    for (
                                       _iterator69.s();
                                       !(_step69 = _iterator69.n()).done;

                                    ) {
                                       var c = _step69.value;
                                       var width = xref.fetchIfRef(c);
                                       if (typeof width === "number") {
                                          glyphsWidths[start] = width;
                                       }
                                       start++;
                                    }
                                 } catch (err) {
                                    _iterator69.e(err);
                                 } finally {
                                    _iterator69.f();
                                 }
                              } else if (Number.isInteger(code)) {
                                 var _width = xref.fetchIfRef(widths[++i]);
                                 if (typeof _width !== "number") {
                                    continue;
                                 }
                                 for (var j = start; j <= code; j++) {
                                    glyphsWidths[j] = _width;
                                 }
                              } else {
                                 break;
                              }
                           }
                        }
                        if (properties.vertical) {
                           var dw2 = dict.getArray("DW2");
                           var vmetrics = isNumberArray(dw2, 2) ? dw2 : [880, -1000];
                           defaultVMetrics = [
                              vmetrics[1],
                              defaultWidth * 0.5,
                              vmetrics[0],
                           ];
                           vmetrics = dict.get("W2");
                           if (Array.isArray(vmetrics)) {
                              for (
                                 var _i44 = 0, _ii1 = vmetrics.length;
                                 _i44 < _ii1;
                                 _i44++
                              ) {
                                 var _start = xref.fetchIfRef(vmetrics[_i44++]);
                                 if (!Number.isInteger(_start)) {
                                    break;
                                 }
                                 var _code = xref.fetchIfRef(vmetrics[_i44]);
                                 if (Array.isArray(_code)) {
                                    for (var _j5 = 0, jj = _code.length; _j5 < jj; _j5++) {
                                       var vmetric = [
                                          xref.fetchIfRef(_code[_j5++]),
                                          xref.fetchIfRef(_code[_j5++]),
                                          xref.fetchIfRef(_code[_j5]),
                                       ];
                                       if (isNumberArray(vmetric, null)) {
                                          glyphsVMetrics[_start] = vmetric;
                                       }
                                       _start++;
                                    }
                                 } else if (Number.isInteger(_code)) {
                                    var _vmetric = [
                                       xref.fetchIfRef(vmetrics[++_i44]),
                                       xref.fetchIfRef(vmetrics[++_i44]),
                                       xref.fetchIfRef(vmetrics[++_i44]),
                                    ];
                                    if (!isNumberArray(_vmetric, null)) {
                                       continue;
                                    }
                                    for (var _j6 = _start; _j6 <= _code; _j6++) {
                                       glyphsVMetrics[_j6] = _vmetric;
                                    }
                                 } else {
                                    break;
                                 }
                              }
                           }
                        }
                     } else {
                        var _widths = dict.get("Widths");
                        if (Array.isArray(_widths)) {
                           var _j7 = properties.firstChar;
                           var _iterator70 = _createForOfIteratorHelper(_widths),
                              _step70;
                           try {
                              for (_iterator70.s(); !(_step70 = _iterator70.n()).done; ) {
                                 var w = _step70.value;
                                 var _width2 = xref.fetchIfRef(w);
                                 if (typeof _width2 === "number") {
                                    glyphsWidths[_j7] = _width2;
                                 }
                                 _j7++;
                              }
                           } catch (err) {
                              _iterator70.e(err);
                           } finally {
                              _iterator70.f();
                           }
                           var missingWidth = descriptor.get("MissingWidth");
                           defaultWidth =
                              typeof missingWidth === "number" ? missingWidth : 0;
                        } else {
                           var baseFontName = dict.get("BaseFont");
                           if (baseFontName instanceof Name) {
                              var metrics = this.getBaseFontMetrics(baseFontName.name);
                              glyphsWidths = this.buildCharCodeToWidth(
                                 metrics.widths,
                                 properties,
                              );
                              defaultWidth = metrics.defaultWidth;
                           }
                        }
                     }
                     var isMonospace = true;
                     var firstWidth = defaultWidth;
                     for (var glyph in glyphsWidths) {
                        var glyphWidth = glyphsWidths[glyph];
                        if (!glyphWidth) {
                           continue;
                        }
                        if (!firstWidth) {
                           firstWidth = glyphWidth;
                           continue;
                        }
                        if (firstWidth !== glyphWidth) {
                           isMonospace = false;
                           break;
                        }
                     }
                     if (isMonospace) {
                        properties.flags |= FontFlags.FixedPitch;
                     } else {
                        properties.flags &= ~FontFlags.FixedPitch;
                     }
                     properties.defaultWidth = defaultWidth;
                     properties.widths = glyphsWidths;
                     properties.defaultVMetrics = defaultVMetrics;
                     properties.vmetrics = glyphsVMetrics;
                  },
               },
               {
                  key: "isSerifFont",
                  value: function isSerifFont(baseFontName) {
                     var fontNameWoStyle = baseFontName.split("-", 1)[0];
                     return (
                        fontNameWoStyle in getSerifFonts() ||
                        /serif/gi.test(fontNameWoStyle)
                     );
                  },
               },
               {
                  key: "getBaseFontMetrics",
                  value: function getBaseFontMetrics(name) {
                     var defaultWidth = 0;
                     var widths = Object.create(null);
                     var monospace = false;
                     var stdFontMap = getStdFontMap();
                     var lookupName = stdFontMap[name] || name;
                     var Metrics = getMetrics();
                     if (!(lookupName in Metrics)) {
                        lookupName = this.isSerifFont(name)
                           ? "Times-Roman"
                           : "Helvetica";
                     }
                     var glyphWidths = Metrics[lookupName];
                     if (typeof glyphWidths === "number") {
                        defaultWidth = glyphWidths;
                        monospace = true;
                     } else {
                        widths = glyphWidths();
                     }
                     return {
                        defaultWidth: defaultWidth,
                        monospace: monospace,
                        widths: widths,
                     };
                  },
               },
               {
                  key: "buildCharCodeToWidth",
                  value: function buildCharCodeToWidth(
                     widthsByGlyphName,
                     properties,
                  ) {
                     var widths = Object.create(null);
                     var differences = properties.differences;
                     var encoding = properties.defaultEncoding;
                     for (var charCode = 0; charCode < 256; charCode++) {
                        if (
                           charCode in differences &&
                           widthsByGlyphName[differences[charCode]]
                        ) {
                           widths[charCode] = widthsByGlyphName[differences[charCode]];
                           continue;
                        }
                        if (
                           charCode in encoding &&
                           widthsByGlyphName[encoding[charCode]]
                        ) {
                           widths[charCode] = widthsByGlyphName[encoding[charCode]];
                           continue;
                        }
                     }
                     return widths;
                  },
               },
               {
                  key: "preEvaluateFont",
                  value: function preEvaluateFont(dict) {
                     var baseDict = dict;
                     var type = dict.get("Subtype");
                     if (!(type instanceof Name)) {
                        throw new FormatError("invalid font Subtype");
                     }
                     var composite = false;
                     var hash;
                     if (type.name === "Type0") {
                        var df = dict.get("DescendantFonts");
                        if (!df) {
                           throw new FormatError("Descendant fonts are not specified");
                        }
                        dict = Array.isArray(df) ? this.xref.fetchIfRef(df[0]) : df;
                        if (!(dict instanceof Dict)) {
                           throw new FormatError("Descendant font is not a dictionary.");
                        }
                        type = dict.get("Subtype");
                        if (!(type instanceof Name)) {
                           throw new FormatError("invalid font Subtype");
                        }
                        composite = true;
                     }
                     var firstChar = dict.get("FirstChar");
                     if (!Number.isInteger(firstChar)) {
                        firstChar = 0;
                     }
                     var lastChar = dict.get("LastChar");
                     if (!Number.isInteger(lastChar)) {
                        lastChar = composite ? 0xffff : 0xff;
                     }
                     var descriptor = dict.get("FontDescriptor");
                     var toUnicode =
                        dict.get("ToUnicode") || baseDict.get("ToUnicode");
                     if (descriptor) {
                        hash = new MurmurHash3_64();
                        var encoding = baseDict.getRaw("Encoding");
                        if (encoding instanceof Name) {
                           hash.update(encoding.name);
                        } else if (encoding instanceof Ref) {
                           hash.update(encoding.toString());
                        } else if (encoding instanceof Dict) {
                           var _iterator71 = _createForOfIteratorHelper(
                                 encoding.getRawValues(),
                              ),
                              _step71;
                           try {
                              for (_iterator71.s(); !(_step71 = _iterator71.n()).done; ) {
                                 var entry = _step71.value;
                                 if (entry instanceof Name) {
                                    hash.update(entry.name);
                                 } else if (entry instanceof Ref) {
                                    hash.update(entry.toString());
                                 } else if (Array.isArray(entry)) {
                                    var diffLength = entry.length,
                                       diffBuf = new Array(diffLength);
                                    for (var j = 0; j < diffLength; j++) {
                                       var diffEntry = entry[j];
                                       if (diffEntry instanceof Name) {
                                          diffBuf[j] = diffEntry.name;
                                       } else if (
                                          typeof diffEntry === "number" ||
                                          diffEntry instanceof Ref
                                       ) {
                                          diffBuf[j] = diffEntry.toString();
                                       }
                                    }
                                    hash.update(diffBuf.join());
                                 }
                              }
                           } catch (err) {
                              _iterator71.e(err);
                           } finally {
                              _iterator71.f();
                           }
                        }
                        hash.update("".concat(firstChar, "-").concat(lastChar));
                        if (toUnicode instanceof BaseStream) {
                           var stream = toUnicode.str || toUnicode;
                           var uint8array = stream.buffer
                              ? new Uint8Array(
                                 stream.buffer.buffer,
                                 0,
                                 stream.bufferLength,
                              )
                              : new Uint8Array(
                                 stream.bytes.buffer,
                                 stream.start,
                                 stream.end - stream.start,
                              );
                           hash.update(uint8array);
                        } else if (toUnicode instanceof Name) {
                           hash.update(toUnicode.name);
                        }
                        var widths = dict.get("Widths") || baseDict.get("Widths");
                        if (Array.isArray(widths)) {
                           var widthsBuf = [];
                           var _iterator72 = _createForOfIteratorHelper(widths),
                              _step72;
                           try {
                              for (_iterator72.s(); !(_step72 = _iterator72.n()).done; ) {
                                 var _entry = _step72.value;
                                 if (typeof _entry === "number" || _entry instanceof Ref) {
                                    widthsBuf.push(_entry.toString());
                                 }
                              }
                           } catch (err) {
                              _iterator72.e(err);
                           } finally {
                              _iterator72.f();
                           }
                           hash.update(widthsBuf.join());
                        }
                        if (composite) {
                           hash.update("compositeFont");
                           var compositeWidths = dict.get("W") || baseDict.get("W");
                           if (Array.isArray(compositeWidths)) {
                              var _widthsBuf = [];
                              var _iterator73 =
                                    _createForOfIteratorHelper(compositeWidths),
                                 _step73;
                              try {
                                 for (
                                    _iterator73.s();
                                    !(_step73 = _iterator73.n()).done;

                                 ) {
                                    var _entry2 = _step73.value;
                                    if (
                                       typeof _entry2 === "number" ||
                                       _entry2 instanceof Ref
                                    ) {
                                       _widthsBuf.push(_entry2.toString());
                                    } else if (Array.isArray(_entry2)) {
                                       var subWidthsBuf = [];
                                       var _iterator74 = _createForOfIteratorHelper(_entry2),
                                          _step74;
                                       try {
                                          for (
                                             _iterator74.s();
                                             !(_step74 = _iterator74.n()).done;

                                          ) {
                                             var element = _step74.value;
                                             if (
                                                typeof element === "number" ||
                                                element instanceof Ref
                                             ) {
                                                subWidthsBuf.push(element.toString());
                                             }
                                          }
                                       } catch (err) {
                                          _iterator74.e(err);
                                       } finally {
                                          _iterator74.f();
                                       }
                                       _widthsBuf.push("[".concat(subWidthsBuf.join(), "]"));
                                    }
                                 }
                              } catch (err) {
                                 _iterator73.e(err);
                              } finally {
                                 _iterator73.f();
                              }
                              hash.update(_widthsBuf.join());
                           }
                           var cidToGidMap =
                              dict.getRaw("CIDToGIDMap") ||
                              baseDict.getRaw("CIDToGIDMap");
                           if (cidToGidMap instanceof Name) {
                              hash.update(cidToGidMap.name);
                           } else if (cidToGidMap instanceof Ref) {
                              hash.update(cidToGidMap.toString());
                           } else if (cidToGidMap instanceof BaseStream) {
                              hash.update(cidToGidMap.peekBytes());
                           }
                        }
                     }
                     return {
                        descriptor: descriptor,
                        dict: dict,
                        baseDict: baseDict,
                        composite: composite,
                        type: type.name,
                        firstChar: firstChar,
                        lastChar: lastChar,
                        toUnicode: toUnicode,
                        hash: hash ? hash.hexdigest() : "",
                     };
                  },
               },
               {
                  key: "translateFont",
                  value: (function () {
                     var _translateFont = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee21(_ref64) {
                           var _fontName, _baseFont;
                           var descriptor,
                              dict,
                              baseDict,
                              composite,
                              type,
                              firstChar,
                              lastChar,
                              toUnicode,
                              cssFontInfo,
                              isType3Font,
                              _bbox,
                              baseFontName,
                              metrics,
                              fontNameWoStyle,
                              _flags2,
                              _properties,
                              widths,
                              standardFontName,
                              file,
                              _newProperties,
                              glyphWidths,
                              j,
                              _iterator75,
                              _step75,
                              width,
                              fontName,
                              baseFont,
                              fontNameStr,
                              baseFontStr,
                              fontFile,
                              subtype,
                              length1,
                              length2,
                              length3,
                              isInternalFont,
                              glyphScaleFactors,
                              systemFontInfo,
                              subtypeEntry,
                              _standardFontName,
                              _standardFontName2,
                              fontMatrix,
                              bbox,
                              ascent,
                              descent,
                              xHeight,
                              capHeight,
                              flags,
                              italicAngle,
                              properties,
                              cidEncoding,
                              cMap,
                              newProperties,
                              _t21;
                           return _regenerator().w(
                              function (_context24) {
                                 while (1)
                                    switch ((_context24.p = _context24.n)) {
                                       case 0:
                                          ((descriptor = _ref64.descriptor),
                                             (dict = _ref64.dict),
                                             (baseDict = _ref64.baseDict),
                                             (composite = _ref64.composite),
                                             (type = _ref64.type),
                                             (firstChar = _ref64.firstChar),
                                             (lastChar = _ref64.lastChar),
                                             (toUnicode = _ref64.toUnicode),
                                             (cssFontInfo = _ref64.cssFontInfo));
                                          isType3Font = type === "Type3";
                                          if (descriptor) {
                                             _context24.n = 6;
                                             break;
                                          }
                                          if (!isType3Font) {
                                             _context24.n = 1;
                                             break;
                                          }
                                          _bbox = dict.getArray("FontBBox");
                                          if (!isNumberArray(_bbox, 4)) {
                                             _bbox = [0, 0, 0, 0];
                                          }
                                          descriptor = new Dict(null);
                                          descriptor.set("FontName", Name.get(type));
                                          descriptor.set("FontBBox", _bbox);
                                          _context24.n = 6;
                                          break;
                                       case 1:
                                          baseFontName = dict.get("BaseFont");
                                          if (baseFontName instanceof Name) {
                                             _context24.n = 2;
                                             break;
                                          }
                                          throw new FormatError("Base font is not specified");
                                       case 2:
                                          baseFontName = baseFontName.name.replaceAll(
                                             /[,_]/g,
                                             "-",
                                          );
                                          metrics = this.getBaseFontMetrics(baseFontName);
                                          fontNameWoStyle = baseFontName.split("-", 1)[0];
                                          _flags2 =
                                             (this.isSerifFont(fontNameWoStyle)
                                                ? FontFlags.Serif
                                                : 0) |
                                             (metrics.monospace ? FontFlags.FixedPitch : 0) |
                                             (getSymbolsFonts()[fontNameWoStyle]
                                                ? FontFlags.Symbolic
                                                : FontFlags.Nonsymbolic);
                                          _properties = {
                                             type: type,
                                             name: baseFontName,
                                             loadedName: baseDict.loadedName,
                                             systemFontInfo: null,
                                             widths: metrics.widths,
                                             defaultWidth: metrics.defaultWidth,
                                             isSimulatedFlags: true,
                                             flags: _flags2,
                                             firstChar: firstChar,
                                             lastChar: lastChar,
                                             toUnicode: toUnicode,
                                             xHeight: 0,
                                             capHeight: 0,
                                             italicAngle: 0,
                                             isType3Font: isType3Font,
                                          };
                                          widths = dict.get("Widths");
                                          standardFontName =
                                             getStandardFontName(baseFontName);
                                          file = null;
                                          if (!standardFontName) {
                                             _context24.n = 4;
                                             break;
                                          }
                                          _context24.n = 3;
                                          return this.fetchStandardFontData(standardFontName);
                                       case 3:
                                          file = _context24.v;
                                          _properties.isInternalFont = !!file;
                                       case 4:
                                          if (
                                             !_properties.isInternalFont &&
                                             this.options.useSystemFonts
                                          ) {
                                             _properties.systemFontInfo = getFontSubstitution(
                                                this.systemFontCache,
                                                this.idFactory,
                                                this.options.standardFontDataUrl,
                                                baseFontName,
                                                standardFontName,
                                                type,
                                             );
                                          }
                                          _context24.n = 5;
                                          return this.extractDataStructures(
                                             dict,
                                             _properties,
                                          );
                                       case 5:
                                          _newProperties = _context24.v;
                                          if (widths) {
                                             glyphWidths = [];
                                             j = firstChar;
                                             _iterator75 = _createForOfIteratorHelper(widths);
                                             try {
                                                for (
                                                   _iterator75.s();
                                                   !(_step75 = _iterator75.n()).done;

                                                ) {
                                                   width = _step75.value;
                                                   glyphWidths[j++] =
                                                      this.xref.fetchIfRef(width);
                                                }
                                             } catch (err) {
                                                _iterator75.e(err);
                                             } finally {
                                                _iterator75.f();
                                             }
                                             _newProperties.widths = glyphWidths;
                                          } else {
                                             _newProperties.widths = this.buildCharCodeToWidth(
                                                metrics.widths,
                                                _newProperties,
                                             );
                                          }
                                          return _context24.a(
                                             2,
                                             new Font(baseFontName, file, _newProperties),
                                          );
                                       case 6:
                                          fontName = descriptor.get("FontName");
                                          baseFont = dict.get("BaseFont");
                                          if (typeof fontName === "string") {
                                             fontName = Name.get(fontName);
                                          }
                                          if (typeof baseFont === "string") {
                                             baseFont = Name.get(baseFont);
                                          }
                                          fontNameStr =
                                             (_fontName = fontName) === null ||
                                             _fontName === void 0
                                                ? void 0
                                                : _fontName.name;
                                          baseFontStr =
                                             (_baseFont = baseFont) === null ||
                                             _baseFont === void 0
                                                ? void 0
                                                : _baseFont.name;
                                          if (!isType3Font && fontNameStr !== baseFontStr) {
                                             info(
                                                "The FontDescriptor's FontName is \"".concat(
                                                   fontNameStr,
                                                   '" but ',
                                                ) +
                                                "should be the same as the Font's BaseFont \"".concat(
                                                   baseFontStr,
                                                   '".',
                                                ),
                                             );
                                             if (
                                                fontNameStr &&
                                                baseFontStr &&
                                                (baseFontStr.startsWith(fontNameStr) ||
                                                   (!isKnownFontName(fontNameStr) &&
                                                      isKnownFontName(baseFontStr)))
                                             ) {
                                                fontName = null;
                                             }
                                          }
                                          fontName || (fontName = baseFont);
                                          if (fontName instanceof Name) {
                                             _context24.n = 7;
                                             break;
                                          }
                                          throw new FormatError("invalid font name");
                                       case 7:
                                          _context24.p = 7;
                                          fontFile = descriptor.get(
                                             "FontFile",
                                             "FontFile2",
                                             "FontFile3",
                                          );
                                          _context24.n = 10;
                                          break;
                                       case 8:
                                          _context24.p = 8;
                                          _t21 = _context24.v;
                                          if (this.options.ignoreErrors) {
                                             _context24.n = 9;
                                             break;
                                          }
                                          throw _t21;
                                       case 9:
                                          warn(
                                             'translateFont - fetching "'
                                                .concat(fontName.name, '" font file: "')
                                                .concat(_t21, '".'),
                                          );
                                          fontFile = new NullStream();
                                       case 10:
                                          isInternalFont = false;
                                          glyphScaleFactors = null;
                                          systemFontInfo = null;
                                          if (!fontFile) {
                                             _context24.n = 11;
                                             break;
                                          }
                                          if (fontFile.dict) {
                                             subtypeEntry = fontFile.dict.get("Subtype");
                                             if (subtypeEntry instanceof Name) {
                                                subtype = subtypeEntry.name;
                                             }
                                             length1 = fontFile.dict.get("Length1");
                                             length2 = fontFile.dict.get("Length2");
                                             length3 = fontFile.dict.get("Length3");
                                          }
                                          _context24.n = 17;
                                          break;
                                       case 11:
                                          if (!cssFontInfo) {
                                             _context24.n = 14;
                                             break;
                                          }
                                          _standardFontName = getXfaFontName(fontName.name);
                                          if (!_standardFontName) {
                                             _context24.n = 13;
                                             break;
                                          }
                                          cssFontInfo.fontFamily = "".concat(
                                             cssFontInfo.fontFamily,
                                             "-PdfJS-XFA",
                                          );
                                          cssFontInfo.metrics =
                                             _standardFontName.metrics || null;
                                          glyphScaleFactors =
                                             _standardFontName.factors || null;
                                          _context24.n = 12;
                                          return this.fetchStandardFontData(
                                             _standardFontName.name,
                                          );
                                       case 12:
                                          fontFile = _context24.v;
                                          isInternalFont = !!fontFile;
                                          baseDict = dict = getXfaFontDict(fontName.name);
                                          composite = true;
                                       case 13:
                                          _context24.n = 17;
                                          break;
                                       case 14:
                                          if (isType3Font) {
                                             _context24.n = 17;
                                             break;
                                          }
                                          _standardFontName2 = getStandardFontName(
                                             fontName.name,
                                          );
                                          if (!_standardFontName2) {
                                             _context24.n = 16;
                                             break;
                                          }
                                          _context24.n = 15;
                                          return this.fetchStandardFontData(
                                             _standardFontName2,
                                          );
                                       case 15:
                                          fontFile = _context24.v;
                                          isInternalFont = !!fontFile;
                                       case 16:
                                          if (
                                             !isInternalFont &&
                                             this.options.useSystemFonts
                                          ) {
                                             systemFontInfo = getFontSubstitution(
                                                this.systemFontCache,
                                                this.idFactory,
                                                this.options.standardFontDataUrl,
                                                fontName.name,
                                                _standardFontName2,
                                                type,
                                             );
                                          }
                                       case 17:
                                          fontMatrix = dict.getArray("FontMatrix");
                                          if (!isNumberArray(fontMatrix, 6)) {
                                             fontMatrix = FONT_IDENTITY_MATRIX;
                                          }
                                          bbox =
                                             descriptor.getArray("FontBBox") ||
                                             dict.getArray("FontBBox");
                                          if (!isNumberArray(bbox, 4)) {
                                             bbox = undefined;
                                          }
                                          ascent = descriptor.get("Ascent");
                                          if (typeof ascent !== "number") {
                                             ascent = undefined;
                                          }
                                          descent = descriptor.get("Descent");
                                          if (typeof descent !== "number") {
                                             descent = undefined;
                                          }
                                          xHeight = descriptor.get("XHeight");
                                          if (typeof xHeight !== "number") {
                                             xHeight = 0;
                                          }
                                          capHeight = descriptor.get("CapHeight");
                                          if (typeof capHeight !== "number") {
                                             capHeight = 0;
                                          }
                                          flags = descriptor.get("Flags");
                                          if (!Number.isInteger(flags)) {
                                             flags = 0;
                                          }
                                          italicAngle = descriptor.get("ItalicAngle");
                                          if (typeof italicAngle !== "number") {
                                             italicAngle = 0;
                                          }
                                          properties = {
                                             type: type,
                                             name: fontName.name,
                                             subtype: subtype,
                                             file: fontFile,
                                             length1: length1,
                                             length2: length2,
                                             length3: length3,
                                             isInternalFont: isInternalFont,
                                             loadedName: baseDict.loadedName,
                                             composite: composite,
                                             fixedPitch: false,
                                             fontMatrix: fontMatrix,
                                             firstChar: firstChar,
                                             lastChar: lastChar,
                                             toUnicode: toUnicode,
                                             bbox: bbox,
                                             ascent: ascent,
                                             descent: descent,
                                             xHeight: xHeight,
                                             capHeight: capHeight,
                                             flags: flags,
                                             italicAngle: italicAngle,
                                             isType3Font: isType3Font,
                                             cssFontInfo: cssFontInfo,
                                             scaleFactors: glyphScaleFactors,
                                             systemFontInfo: systemFontInfo,
                                          };
                                          if (!composite) {
                                             _context24.n = 19;
                                             break;
                                          }
                                          cidEncoding = baseDict.get("Encoding");
                                          if (cidEncoding instanceof Name) {
                                             properties.cidEncoding = cidEncoding.name;
                                          }
                                          _context24.n = 18;
                                          return CMapFactory.create({
                                             encoding: cidEncoding,
                                             fetchBuiltInCMap: this._fetchBuiltInCMapBound,
                                             useCMap: null,
                                          });
                                       case 18:
                                          cMap = _context24.v;
                                          properties.cMap = cMap;
                                          properties.vertical = properties.cMap.vertical;
                                       case 19:
                                          _context24.n = 20;
                                          return this.extractDataStructures(dict, properties);
                                       case 20:
                                          newProperties = _context24.v;
                                          this.extractWidths(dict, descriptor, newProperties);
                                          return _context24.a(
                                             2,
                                             new Font(fontName.name, fontFile, newProperties),
                                          );
                                    }
                              },
                              _callee21,
                              this,
                              [[7, 8]],
                           );
                        }),
                     );
                     function translateFont(_x47) {
                        return _translateFont.apply(this, arguments);
                     }
                     return translateFont;
                  })(),
               },
            ],
            [
               {
                  key: "buildFontPaths",
                  value: function buildFontPaths(
                     font,
                     glyphs,
                     handler,
                     evaluatorOptions,
                  ) {
                     function buildPath(fontChar) {
                        var glyphName = ""
                           .concat(font.loadedName, "_path_")
                           .concat(fontChar);
                        try {
                           if (font.renderer.hasBuiltPath(fontChar)) {
                              return;
                           }
                           handler.send("commonobj", [
                              glyphName,
                              "FontPath",
                              font.renderer.getPathJs(fontChar),
                           ]);
                        } catch (reason) {
                           if (evaluatorOptions.ignoreErrors) {
                              warn(
                                 "buildFontPaths - ignoring "
                                    .concat(glyphName, ' glyph: "')
                                    .concat(reason, '".'),
                              );
                              return;
                           }
                           throw reason;
                        }
                     }
                     var _iterator76 = _createForOfIteratorHelper(glyphs),
                        _step76;
                     try {
                        for (_iterator76.s(); !(_step76 = _iterator76.n()).done; ) {
                           var glyph = _step76.value;
                           buildPath(glyph.fontChar);
                           var accent = glyph.accent;
                           if (accent !== null && accent !== void 0 && accent.fontChar) {
                              buildPath(accent.fontChar);
                           }
                        }
                     } catch (err) {
                        _iterator76.e(err);
                     } finally {
                        _iterator76.f();
                     }
                  },
               },
               {
                  key: "fallbackFontDict",
                  get: function get() {
                     var dict = new Dict();
                     dict.set("BaseFont", Name.get("Helvetica"));
                     dict.set("Type", Name.get("FallbackType"));
                     dict.set("Subtype", Name.get("FallbackType"));
                     dict.set("Encoding", Name.get("WinAnsiEncoding"));
                     return shadow(this, "fallbackFontDict", dict);
                  },
               },
            ],
         );
      })();
      var TranslatedFont = /*#__PURE__*/ (function () {
         function TranslatedFont(_ref65) {
            var loadedName = _ref65.loadedName,
               font = _ref65.font,
               dict = _ref65.dict,
               evaluatorOptions = _ref65.evaluatorOptions;
            _classCallCheck(this, TranslatedFont);
            this.loadedName = loadedName;
            this.font = font;
            this.dict = dict;
            this._evaluatorOptions =
               evaluatorOptions || DefaultPartialEvaluatorOptions;
            this.type3Loaded = null;
            this.type3Dependencies = font.isType3Font ? new Set() : null;
            this.sent = false;
         }
         return _createClass(TranslatedFont, [
            {
               key: "send",
               value: function send(handler) {
                  if (this.sent) {
                     return;
                  }
                  this.sent = true;
                  handler.send("commonobj", [
                     this.loadedName,
                     "Font",
                     this.font.exportData(this._evaluatorOptions.fontExtraProperties),
                  ]);
               },
            },
            {
               key: "fallback",
               value: function fallback(handler) {
                  if (!this.font.data) {
                     return;
                  }
                  this.font.disableFontFace = true;
                  PartialEvaluator.buildFontPaths(
                     this.font,
                     this.font.glyphCacheValues,
                     handler,
                     this._evaluatorOptions,
                  );
               },
            },
            {
               key: "loadType3Data",
               value: function loadType3Data(evaluator, resources, task) {
                  var _this50 = this;
                  if (this.type3Loaded) {
                     return this.type3Loaded;
                  }
                  if (!this.font.isType3Font) {
                     throw new Error("Must be a Type3 font.");
                  }
                  var type3Evaluator = evaluator.clone({ ignoreErrors: false });
                  type3Evaluator.parsingType3Font = true;
                  var type3FontRefs = new RefSet(evaluator.type3FontRefs);
                  if (this.dict.objId && !type3FontRefs.has(this.dict.objId)) {
                     type3FontRefs.put(this.dict.objId);
                  }
                  type3Evaluator.type3FontRefs = type3FontRefs;
                  var translatedFont = this.font,
                     type3Dependencies = this.type3Dependencies;
                  var loadCharProcsPromise = Promise.resolve();
                  var charProcs = this.dict.get("CharProcs");
                  var fontResources = this.dict.get("Resources") || resources;
                  var charProcOperatorList = Object.create(null);
                  var fontBBox = Util.normalizeRect(
                        translatedFont.bbox || [0, 0, 0, 0],
                     ),
                     width = fontBBox[2] - fontBBox[0],
                     height = fontBBox[3] - fontBBox[1];
                  var fontBBoxSize = Math.hypot(width, height);
                  var _iterator77 = _createForOfIteratorHelper(charProcs.getKeys()),
                     _step77;
                  try {
                     var _loop2 = function _loop2() {
                        var key = _step77.value;
                        loadCharProcsPromise = loadCharProcsPromise.then(function () {
                           var glyphStream = charProcs.get(key);
                           var operatorList = new OperatorList();
                           return type3Evaluator
                              .getOperatorList({
                                 stream: glyphStream,
                                 task: task,
                                 resources: fontResources,
                                 operatorList: operatorList,
                              })
                              .then(function () {
                                 if (
                                    operatorList.fnArray[0] === OPS.setCharWidthAndBounds
                                 ) {
                                    _this50._removeType3ColorOperators(
                                       operatorList,
                                       fontBBoxSize,
                                    );
                                 }
                                 charProcOperatorList[key] = operatorList.getIR();
                                 var _iterator78 = _createForOfIteratorHelper(
                                       operatorList.dependencies,
                                    ),
                                    _step78;
                                 try {
                                    for (
                                       _iterator78.s();
                                       !(_step78 = _iterator78.n()).done;

                                    ) {
                                       var dependency = _step78.value;
                                       type3Dependencies.add(dependency);
                                    }
                                 } catch (err) {
                                    _iterator78.e(err);
                                 } finally {
                                    _iterator78.f();
                                 }
                              })
                              ["catch"](function (reason) {
                              warn(
                                 'Type3 font resource "'.concat(
                                    key,
                                    '" is not available.',
                                 ),
                              );
                              var dummyOperatorList = new OperatorList();
                              charProcOperatorList[key] = dummyOperatorList.getIR();
                           });
                        });
                     };
                     for (_iterator77.s(); !(_step77 = _iterator77.n()).done; ) {
                        _loop2();
                     }
                  } catch (err) {
                     _iterator77.e(err);
                  } finally {
                     _iterator77.f();
                  }
                  this.type3Loaded = loadCharProcsPromise.then(function () {
                     translatedFont.charProcOperatorList = charProcOperatorList;
                     if (_this50._bbox) {
                        translatedFont.isCharBBox = true;
                        translatedFont.bbox = _this50._bbox;
                     }
                  });
                  return this.type3Loaded;
               },
            },
            {
               key: "_removeType3ColorOperators",
               value: function _removeType3ColorOperators(operatorList) {
                  var fontBBoxSize =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : NaN;
                  var charBBox = Util.normalizeRect(
                        operatorList.argsArray[0].slice(2),
                     ),
                     width = charBBox[2] - charBBox[0],
                     height = charBBox[3] - charBBox[1];
                  var charBBoxSize = Math.hypot(width, height);
                  if (width === 0 || height === 0) {
                     operatorList.fnArray.splice(0, 1);
                     operatorList.argsArray.splice(0, 1);
                  } else if (
                     fontBBoxSize === 0 ||
                     Math.round(charBBoxSize / fontBBoxSize) >= 10
                  ) {
                     if (!this._bbox) {
                        this._bbox = [Infinity, Infinity, -Infinity, -Infinity];
                     }
                     this._bbox[0] = Math.min(this._bbox[0], charBBox[0]);
                     this._bbox[1] = Math.min(this._bbox[1], charBBox[1]);
                     this._bbox[2] = Math.max(this._bbox[2], charBBox[2]);
                     this._bbox[3] = Math.max(this._bbox[3], charBBox[3]);
                  }
                  var i = 0,
                     ii = operatorList.length;
                  while (i < ii) {
                     switch (operatorList.fnArray[i]) {
                        case OPS.setCharWidthAndBounds:
                           break;
                        case OPS.setStrokeColorSpace:
                        case OPS.setFillColorSpace:
                        case OPS.setStrokeColor:
                        case OPS.setStrokeColorN:
                        case OPS.setFillColor:
                        case OPS.setFillColorN:
                        case OPS.setStrokeGray:
                        case OPS.setFillGray:
                        case OPS.setStrokeRGBColor:
                        case OPS.setFillRGBColor:
                        case OPS.setStrokeCMYKColor:
                        case OPS.setFillCMYKColor:
                        case OPS.shadingFill:
                        case OPS.setRenderingIntent:
                           operatorList.fnArray.splice(i, 1);
                           operatorList.argsArray.splice(i, 1);
                           ii--;
                           continue;
                        case OPS.setGState:
                           var _operatorList$argsArr = _slicedToArray(
                                 operatorList.argsArray[i],
                                 1,
                              ),
                              gStateObj = _operatorList$argsArr[0];
                           var j = 0,
                              jj = gStateObj.length;
                           while (j < jj) {
                              var _gStateObj$j = _slicedToArray(gStateObj[j], 1),
                                 gStateKey = _gStateObj$j[0];
                              switch (gStateKey) {
                                 case "TR":
                                 case "TR2":
                                 case "HT":
                                 case "BG":
                                 case "BG2":
                                 case "UCR":
                                 case "UCR2":
                                    gStateObj.splice(j, 1);
                                    jj--;
                                    continue;
                              }
                              j++;
                           }
                           break;
                     }
                     i++;
                  }
               },
            },
         ]);
      })();
      var StateManager = /*#__PURE__*/ (function () {
         function StateManager() {
            var initialState =
               arguments.length > 0 && arguments[0] !== undefined
                  ? arguments[0]
                  : new EvalState();
            _classCallCheck(this, StateManager);
            this.state = initialState;
            this.stateStack = [];
         }
         return _createClass(StateManager, [
            {
               key: "save",
               value: function save() {
                  var old = this.state;
                  this.stateStack.push(this.state);
                  this.state = old.clone();
               },
            },
            {
               key: "restore",
               value: function restore() {
                  var prev = this.stateStack.pop();
                  if (prev) {
                     this.state = prev;
                  }
               },
            },
            {
               key: "transform",
               value: function transform(args) {
                  this.state.ctm = Util.transform(this.state.ctm, args);
               },
            },
         ]);
      })();
      var TextState = /*#__PURE__*/ (function () {
         function TextState() {
            _classCallCheck(this, TextState);
            this.ctm = new Float32Array(IDENTITY_MATRIX);
            this.fontName = null;
            this.fontSize = 0;
            this.loadedName = null;
            this.font = null;
            this.fontMatrix = FONT_IDENTITY_MATRIX;
            this.textMatrix = IDENTITY_MATRIX.slice();
            this.textLineMatrix = IDENTITY_MATRIX.slice();
            this.charSpacing = 0;
            this.wordSpacing = 0;
            this.leading = 0;
            this.textHScale = 1;
            this.textRise = 0;
         }
         return _createClass(TextState, [
            {
               key: "setTextMatrix",
               value: function setTextMatrix(a, b, c, d, e, f) {
                  var m = this.textMatrix;
                  m[0] = a;
                  m[1] = b;
                  m[2] = c;
                  m[3] = d;
                  m[4] = e;
                  m[5] = f;
               },
            },
            {
               key: "setTextLineMatrix",
               value: function setTextLineMatrix(a, b, c, d, e, f) {
                  var m = this.textLineMatrix;
                  m[0] = a;
                  m[1] = b;
                  m[2] = c;
                  m[3] = d;
                  m[4] = e;
                  m[5] = f;
               },
            },
            {
               key: "translateTextMatrix",
               value: function translateTextMatrix(x, y) {
                  var m = this.textMatrix;
                  m[4] = m[0] * x + m[2] * y + m[4];
                  m[5] = m[1] * x + m[3] * y + m[5];
               },
            },
            {
               key: "translateTextLineMatrix",
               value: function translateTextLineMatrix(x, y) {
                  var m = this.textLineMatrix;
                  m[4] = m[0] * x + m[2] * y + m[4];
                  m[5] = m[1] * x + m[3] * y + m[5];
               },
            },
            {
               key: "carriageReturn",
               value: function carriageReturn() {
                  this.translateTextLineMatrix(0, -this.leading);
                  this.textMatrix = this.textLineMatrix.slice();
               },
            },
            {
               key: "clone",
               value: function clone() {
                  var clone = Object.create(this);
                  clone.textMatrix = this.textMatrix.slice();
                  clone.textLineMatrix = this.textLineMatrix.slice();
                  clone.fontMatrix = this.fontMatrix.slice();
                  return clone;
               },
            },
         ]);
      })();
      var EvalState = /*#__PURE__*/ (function () {
         function EvalState() {
            _classCallCheck(this, EvalState);
            this.ctm = new Float32Array(IDENTITY_MATRIX);
            this.font = null;
            this.textRenderingMode = TextRenderingMode.FILL;
            this.fillColorSpace = ColorSpace.singletons.gray;
            this.strokeColorSpace = ColorSpace.singletons.gray;
         }
         return _createClass(EvalState, [
            {
               key: "clone",
               value: function clone() {
                  return Object.create(this);
               },
            },
         ]);
      })();
      var EvaluatorPreprocessor = /*#__PURE__*/ (function () {
         function EvaluatorPreprocessor(stream, xref) {
            var stateManager =
               arguments.length > 2 && arguments[2] !== undefined
                  ? arguments[2]
                  : new StateManager();
            _classCallCheck(this, EvaluatorPreprocessor);
            this.parser = new Parser({
               lexer: new Lexer(stream, EvaluatorPreprocessor.opMap),
               xref: xref,
            });
            this.stateManager = stateManager;
            this.nonProcessedArgs = [];
            this._isPathOp = false;
            this._numInvalidPathOPS = 0;
         }
         return _createClass(
            EvaluatorPreprocessor,
            [
               {
                  key: "savedStatesDepth",
                  get: function get() {
                     return this.stateManager.stateStack.length;
                  },
               },
               {
                  key: "read",
                  value: function read(operation) {
                     var args = operation.args;
                     while (true) {
                        var obj = this.parser.getObj();
                        if (obj instanceof Cmd) {
                           var cmd = obj.cmd;
                           var opSpec = EvaluatorPreprocessor.opMap[cmd];
                           if (!opSpec) {
                              warn('Unknown command "'.concat(cmd, '".'));
                              continue;
                           }
                           var fn = opSpec.id;
                           var numArgs = opSpec.numArgs;
                           var argsLength = args !== null ? args.length : 0;
                           if (!this._isPathOp) {
                              this._numInvalidPathOPS = 0;
                           }
                           this._isPathOp = fn >= OPS.moveTo && fn <= OPS.endPath;
                           if (!opSpec.variableArgs) {
                              if (argsLength !== numArgs) {
                                 var nonProcessedArgs = this.nonProcessedArgs;
                                 while (argsLength > numArgs) {
                                    nonProcessedArgs.push(args.shift());
                                    argsLength--;
                                 }
                                 while (
                                    argsLength < numArgs &&
                                    nonProcessedArgs.length !== 0
                                    ) {
                                    if (args === null) {
                                       args = [];
                                    }
                                    args.unshift(nonProcessedArgs.pop());
                                    argsLength++;
                                 }
                              }
                              if (argsLength < numArgs) {
                                 var partialMsg =
                                    "command "
                                       .concat(cmd, ": expected ")
                                       .concat(numArgs, " args, ") +
                                    "but received ".concat(argsLength, " args.");
                                 if (
                                    this._isPathOp &&
                                    ++this._numInvalidPathOPS >
                                    EvaluatorPreprocessor.MAX_INVALID_PATH_OPS
                                 ) {
                                    throw new FormatError("Invalid ".concat(partialMsg));
                                 }
                                 warn("Skipping ".concat(partialMsg));
                                 if (args !== null) {
                                    args.length = 0;
                                 }
                                 continue;
                              }
                           } else if (argsLength > numArgs) {
                              info(
                                 "Command "
                                    .concat(cmd, ": expected [0, ")
                                    .concat(numArgs, "] args, ") +
                                 "but received ".concat(argsLength, " args."),
                              );
                           }
                           this.preprocessCommand(fn, args);
                           operation.fn = fn;
                           operation.args = args;
                           return true;
                        }
                        if (obj === EOF) {
                           return false;
                        }
                        if (obj !== null) {
                           if (args === null) {
                              args = [];
                           }
                           args.push(obj);
                           if (args.length > 33) {
                              throw new FormatError("Too many arguments");
                           }
                        }
                     }
                  },
               },
               {
                  key: "preprocessCommand",
                  value: function preprocessCommand(fn, args) {
                     switch (fn | 0) {
                        case OPS.save:
                           this.stateManager.save();
                           break;
                        case OPS.restore:
                           this.stateManager.restore();
                           break;
                        case OPS.transform:
                           this.stateManager.transform(args);
                           break;
                     }
                  },
               },
            ],
            [
               {
                  key: "opMap",
                  get: function get() {
                     return shadow(
                        this,
                        "opMap",
                        Object.assign(Object.create(null), {
                           w: { id: OPS.setLineWidth, numArgs: 1, variableArgs: false },
                           J: { id: OPS.setLineCap, numArgs: 1, variableArgs: false },
                           j: { id: OPS.setLineJoin, numArgs: 1, variableArgs: false },
                           M: { id: OPS.setMiterLimit, numArgs: 1, variableArgs: false },
                           d: { id: OPS.setDash, numArgs: 2, variableArgs: false },
                           ri: {
                              id: OPS.setRenderingIntent,
                              numArgs: 1,
                              variableArgs: false,
                           },
                           i: { id: OPS.setFlatness, numArgs: 1, variableArgs: false },
                           gs: { id: OPS.setGState, numArgs: 1, variableArgs: false },
                           q: { id: OPS.save, numArgs: 0, variableArgs: false },
                           Q: { id: OPS.restore, numArgs: 0, variableArgs: false },
                           cm: { id: OPS.transform, numArgs: 6, variableArgs: false },
                           m: { id: OPS.moveTo, numArgs: 2, variableArgs: false },
                           l: { id: OPS.lineTo, numArgs: 2, variableArgs: false },
                           c: { id: OPS.curveTo, numArgs: 6, variableArgs: false },
                           v: { id: OPS.curveTo2, numArgs: 4, variableArgs: false },
                           y: { id: OPS.curveTo3, numArgs: 4, variableArgs: false },
                           h: { id: OPS.closePath, numArgs: 0, variableArgs: false },
                           re: { id: OPS.rectangle, numArgs: 4, variableArgs: false },
                           S: { id: OPS.stroke, numArgs: 0, variableArgs: false },
                           s: { id: OPS.closeStroke, numArgs: 0, variableArgs: false },
                           f: { id: OPS.fill, numArgs: 0, variableArgs: false },
                           F: { id: OPS.fill, numArgs: 0, variableArgs: false },
                           "f*": { id: OPS.eoFill, numArgs: 0, variableArgs: false },
                           B: { id: OPS.fillStroke, numArgs: 0, variableArgs: false },
                           "B*": {
                              id: OPS.eoFillStroke,
                              numArgs: 0,
                              variableArgs: false,
                           },
                           b: {
                              id: OPS.closeFillStroke,
                              numArgs: 0,
                              variableArgs: false,
                           },
                           "b*": {
                              id: OPS.closeEOFillStroke,
                              numArgs: 0,
                              variableArgs: false,
                           },
                           n: { id: OPS.endPath, numArgs: 0, variableArgs: false },
                           W: { id: OPS.clip, numArgs: 0, variableArgs: false },
                           "W*": { id: OPS.eoClip, numArgs: 0, variableArgs: false },
                           BT: { id: OPS.beginText, numArgs: 0, variableArgs: false },
                           ET: { id: OPS.endText, numArgs: 0, variableArgs: false },
                           Tc: {
                              id: OPS.setCharSpacing,
                              numArgs: 1,
                              variableArgs: false,
                           },
                           Tw: {
                              id: OPS.setWordSpacing,
                              numArgs: 1,
                              variableArgs: false,
                           },
                           Tz: { id: OPS.setHScale, numArgs: 1, variableArgs: false },
                           TL: { id: OPS.setLeading, numArgs: 1, variableArgs: false },
                           Tf: { id: OPS.setFont, numArgs: 2, variableArgs: false },
                           Tr: {
                              id: OPS.setTextRenderingMode,
                              numArgs: 1,
                              variableArgs: false,
                           },
                           Ts: { id: OPS.setTextRise, numArgs: 1, variableArgs: false },
                           Td: { id: OPS.moveText, numArgs: 2, variableArgs: false },
                           TD: {
                              id: OPS.setLeadingMoveText,
                              numArgs: 2,
                              variableArgs: false,
                           },
                           Tm: {
                              id: OPS.setTextMatrix,
                              numArgs: 6,
                              variableArgs: false,
                           },
                           "T*": { id: OPS.nextLine, numArgs: 0, variableArgs: false },
                           Tj: { id: OPS.showText, numArgs: 1, variableArgs: false },
                           TJ: {
                              id: OPS.showSpacedText,
                              numArgs: 1,
                              variableArgs: false,
                           },
                           "'": {
                              id: OPS.nextLineShowText,
                              numArgs: 1,
                              variableArgs: false,
                           },
                           '"': {
                              id: OPS.nextLineSetSpacingShowText,
                              numArgs: 3,
                              variableArgs: false,
                           },
                           d0: { id: OPS.setCharWidth, numArgs: 2, variableArgs: false },
                           d1: {
                              id: OPS.setCharWidthAndBounds,
                              numArgs: 6,
                              variableArgs: false,
                           },
                           CS: {
                              id: OPS.setStrokeColorSpace,
                              numArgs: 1,
                              variableArgs: false,
                           },
                           cs: {
                              id: OPS.setFillColorSpace,
                              numArgs: 1,
                              variableArgs: false,
                           },
                           SC: {
                              id: OPS.setStrokeColor,
                              numArgs: 4,
                              variableArgs: true,
                           },
                           SCN: {
                              id: OPS.setStrokeColorN,
                              numArgs: 33,
                              variableArgs: true,
                           },
                           sc: { id: OPS.setFillColor, numArgs: 4, variableArgs: true },
                           scn: {
                              id: OPS.setFillColorN,
                              numArgs: 33,
                              variableArgs: true,
                           },
                           G: { id: OPS.setStrokeGray, numArgs: 1, variableArgs: false },
                           g: { id: OPS.setFillGray, numArgs: 1, variableArgs: false },
                           RG: {
                              id: OPS.setStrokeRGBColor,
                              numArgs: 3,
                              variableArgs: false,
                           },
                           rg: {
                              id: OPS.setFillRGBColor,
                              numArgs: 3,
                              variableArgs: false,
                           },
                           K: {
                              id: OPS.setStrokeCMYKColor,
                              numArgs: 4,
                              variableArgs: false,
                           },
                           k: {
                              id: OPS.setFillCMYKColor,
                              numArgs: 4,
                              variableArgs: false,
                           },
                           sh: { id: OPS.shadingFill, numArgs: 1, variableArgs: false },
                           BI: {
                              id: OPS.beginInlineImage,
                              numArgs: 0,
                              variableArgs: false,
                           },
                           ID: {
                              id: OPS.beginImageData,
                              numArgs: 0,
                              variableArgs: false,
                           },
                           EI: {
                              id: OPS.endInlineImage,
                              numArgs: 1,
                              variableArgs: false,
                           },
                           Do: { id: OPS.paintXObject, numArgs: 1, variableArgs: false },
                           MP: { id: OPS.markPoint, numArgs: 1, variableArgs: false },
                           DP: {
                              id: OPS.markPointProps,
                              numArgs: 2,
                              variableArgs: false,
                           },
                           BMC: {
                              id: OPS.beginMarkedContent,
                              numArgs: 1,
                              variableArgs: false,
                           },
                           BDC: {
                              id: OPS.beginMarkedContentProps,
                              numArgs: 2,
                              variableArgs: false,
                           },
                           EMC: {
                              id: OPS.endMarkedContent,
                              numArgs: 0,
                              variableArgs: false,
                           },
                           BX: { id: OPS.beginCompat, numArgs: 0, variableArgs: false },
                           EX: { id: OPS.endCompat, numArgs: 0, variableArgs: false },
                           BM: null,
                           BD: null,
                           true: null,
                           fa: null,
                           fal: null,
                           fals: null,
                           false: null,
                           nu: null,
                           nul: null,
                           null: null,
                        }),
                     );
                  },
               },
            ],
         );
      })();
      _defineProperty(EvaluatorPreprocessor, "MAX_INVALID_PATH_OPS", 10); // CONCATENATED MODULE: ./src/core/default_appearance.js
      var DefaultAppearanceEvaluator = /*#__PURE__*/ (function (
         _EvaluatorPreprocesso,
      ) {
         function DefaultAppearanceEvaluator(str) {
            _classCallCheck(this, DefaultAppearanceEvaluator);
            return _callSuper(this, DefaultAppearanceEvaluator, [
               new StringStream(str),
            ]);
         }
         _inherits(DefaultAppearanceEvaluator, _EvaluatorPreprocesso);
         return _createClass(DefaultAppearanceEvaluator, [
            {
               key: "parse",
               value: function parse() {
                  var operation = { fn: 0, args: [] };
                  var result = {
                     fontSize: 0,
                     fontName: "",
                     fontColor: new Uint8ClampedArray(3),
                  };
                  try {
                     while (true) {
                        operation.args.length = 0;
                        if (!this.read(operation)) {
                           break;
                        }
                        if (this.savedStatesDepth !== 0) {
                           continue;
                        }
                        var fn = operation.fn,
                           args = operation.args;
                        switch (fn | 0) {
                           case OPS.setFont:
                              var _args25 = _slicedToArray(args, 2),
                                 fontName = _args25[0],
                                 fontSize = _args25[1];
                              if (fontName instanceof Name) {
                                 result.fontName = fontName.name;
                              }
                              if (typeof fontSize === "number" && fontSize > 0) {
                                 result.fontSize = fontSize;
                              }
                              break;
                           case OPS.setFillRGBColor:
                              ColorSpace.singletons.rgb.getRgbItem(
                                 args,
                                 0,
                                 result.fontColor,
                                 0,
                              );
                              break;
                           case OPS.setFillGray:
                              ColorSpace.singletons.gray.getRgbItem(
                                 args,
                                 0,
                                 result.fontColor,
                                 0,
                              );
                              break;
                           case OPS.setFillCMYKColor:
                              ColorSpace.singletons.cmyk.getRgbItem(
                                 args,
                                 0,
                                 result.fontColor,
                                 0,
                              );
                              break;
                        }
                     }
                  } catch (reason) {
                     warn(
                        'parseDefaultAppearance - ignoring errors: "'.concat(
                           reason,
                           '".',
                        ),
                     );
                  }
                  return result;
               },
            },
         ]);
      })(EvaluatorPreprocessor);
      function parseDefaultAppearance(str) {
         return new DefaultAppearanceEvaluator(str).parse();
      }
      var AppearanceStreamEvaluator = /*#__PURE__*/ (function (
         _EvaluatorPreprocesso2,
      ) {
         function AppearanceStreamEvaluator(stream, evaluatorOptions, xref) {
            var _stream$dict2;
            var _this51;
            _classCallCheck(this, AppearanceStreamEvaluator);
            _this51 = _callSuper(this, AppearanceStreamEvaluator, [stream]);
            _this51.stream = stream;
            _this51.evaluatorOptions = evaluatorOptions;
            _this51.xref = xref;
            _this51.resources =
               (_stream$dict2 = stream.dict) === null || _stream$dict2 === void 0
                  ? void 0
                  : _stream$dict2.get("Resources");
            return _this51;
         }
         _inherits(AppearanceStreamEvaluator, _EvaluatorPreprocesso2);
         return _createClass(AppearanceStreamEvaluator, [
            {
               key: "parse",
               value: function parse() {
                  var operation = { fn: 0, args: [] };
                  var result = {
                     scaleFactor: 1,
                     fontSize: 0,
                     fontName: "",
                     fontColor: new Uint8ClampedArray(3),
                     fillColorSpace: ColorSpace.singletons.gray,
                  };
                  var breakLoop = false;
                  var stack = [];
                  try {
                     while (true) {
                        operation.args.length = 0;
                        if (breakLoop || !this.read(operation)) {
                           break;
                        }
                        var fn = operation.fn,
                           args = operation.args;
                        switch (fn | 0) {
                           case OPS.save:
                              stack.push({
                                 scaleFactor: result.scaleFactor,
                                 fontSize: result.fontSize,
                                 fontName: result.fontName,
                                 fontColor: result.fontColor.slice(),
                                 fillColorSpace: result.fillColorSpace,
                              });
                              break;
                           case OPS.restore:
                              result = stack.pop() || result;
                              break;
                           case OPS.setTextMatrix:
                              result.scaleFactor *= Math.hypot(args[0], args[1]);
                              break;
                           case OPS.setFont:
                              var _args26 = _slicedToArray(args, 2),
                                 fontName = _args26[0],
                                 fontSize = _args26[1];
                              if (fontName instanceof Name) {
                                 result.fontName = fontName.name;
                              }
                              if (typeof fontSize === "number" && fontSize > 0) {
                                 result.fontSize = fontSize * result.scaleFactor;
                              }
                              break;
                           case OPS.setFillColorSpace:
                              result.fillColorSpace = ColorSpace.parse({
                                 cs: args[0],
                                 xref: this.xref,
                                 resources: this.resources,
                                 pdfFunctionFactory: this._pdfFunctionFactory,
                                 localColorSpaceCache: this._localColorSpaceCache,
                              });
                              break;
                           case OPS.setFillColor:
                              var cs = result.fillColorSpace;
                              cs.getRgbItem(args, 0, result.fontColor, 0);
                              break;
                           case OPS.setFillRGBColor:
                              ColorSpace.singletons.rgb.getRgbItem(
                                 args,
                                 0,
                                 result.fontColor,
                                 0,
                              );
                              break;
                           case OPS.setFillGray:
                              ColorSpace.singletons.gray.getRgbItem(
                                 args,
                                 0,
                                 result.fontColor,
                                 0,
                              );
                              break;
                           case OPS.setFillCMYKColor:
                              ColorSpace.singletons.cmyk.getRgbItem(
                                 args,
                                 0,
                                 result.fontColor,
                                 0,
                              );
                              break;
                           case OPS.showText:
                           case OPS.showSpacedText:
                           case OPS.nextLineShowText:
                           case OPS.nextLineSetSpacingShowText:
                              breakLoop = true;
                              break;
                        }
                     }
                  } catch (reason) {
                     warn(
                        'parseAppearanceStream - ignoring errors: "'.concat(
                           reason,
                           '".',
                        ),
                     );
                  }
                  this.stream.reset();
                  delete result.scaleFactor;
                  delete result.fillColorSpace;
                  return result;
               },
            },
            {
               key: "_localColorSpaceCache",
               get: function get() {
                  return shadow(
                     this,
                     "_localColorSpaceCache",
                     new LocalColorSpaceCache(),
                  );
               },
            },
            {
               key: "_pdfFunctionFactory",
               get: function get() {
                  var pdfFunctionFactory = new PDFFunctionFactory({
                     xref: this.xref,
                     isEvalSupported: this.evaluatorOptions.isEvalSupported,
                  });
                  return shadow(this, "_pdfFunctionFactory", pdfFunctionFactory);
               },
            },
         ]);
      })(EvaluatorPreprocessor);
      function parseAppearanceStream(stream, evaluatorOptions, xref) {
         return new AppearanceStreamEvaluator(
            stream,
            evaluatorOptions,
            xref,
         ).parse();
      }
      function getPdfColor(color, isFill) {
         if (color[0] === color[1] && color[1] === color[2]) {
            var gray = color[0] / 255;
            return "".concat(numberToString(gray), " ").concat(isFill ? "g" : "G");
         }
         return (
            Array.from(color, function (c) {
               return numberToString(c / 255);
            }).join(" ") + " ".concat(isFill ? "rg" : "RG")
         );
      }
      function createDefaultAppearance(_ref66) {
         var fontSize = _ref66.fontSize,
            fontName = _ref66.fontName,
            fontColor = _ref66.fontColor;
         return "/"
            .concat(escapePDFName(fontName), " ")
            .concat(fontSize, " Tf ")
            .concat(getPdfColor(fontColor, true));
      }
      var FakeUnicodeFont = /*#__PURE__*/ (function () {
         function FakeUnicodeFont(xref, fontFamily) {
            _classCallCheck(this, FakeUnicodeFont);
            this.xref = xref;
            this.widths = null;
            this.firstChar = Infinity;
            this.lastChar = -Infinity;
            this.fontFamily = fontFamily;
            var canvas = new OffscreenCanvas(1, 1);
            this.ctxMeasure = canvas.getContext("2d");
            if (!FakeUnicodeFont._fontNameId) {
               FakeUnicodeFont._fontNameId = 1;
            }
            this.fontName = Name.get(
               "InvalidPDFjsFont_"
                  .concat(fontFamily, "_")
                  .concat(FakeUnicodeFont._fontNameId++),
            );
         }
         return _createClass(
            FakeUnicodeFont,
            [
               {
                  key: "fontDescriptorRef",
                  get: function get() {
                     if (!FakeUnicodeFont._fontDescriptorRef) {
                        var fontDescriptor = new Dict(this.xref);
                        fontDescriptor.set("Type", Name.get("FontDescriptor"));
                        fontDescriptor.set("FontName", this.fontName);
                        fontDescriptor.set("FontFamily", "MyriadPro Regular");
                        fontDescriptor.set("FontBBox", [0, 0, 0, 0]);
                        fontDescriptor.set("FontStretch", Name.get("Normal"));
                        fontDescriptor.set("FontWeight", 400);
                        fontDescriptor.set("ItalicAngle", 0);
                        FakeUnicodeFont._fontDescriptorRef =
                           this.xref.getNewPersistentRef(fontDescriptor);
                     }
                     return FakeUnicodeFont._fontDescriptorRef;
                  },
               },
               {
                  key: "descendantFontRef",
                  get: function get() {
                     var descendantFont = new Dict(this.xref);
                     descendantFont.set("BaseFont", this.fontName);
                     descendantFont.set("Type", Name.get("Font"));
                     descendantFont.set("Subtype", Name.get("CIDFontType0"));
                     descendantFont.set("CIDToGIDMap", Name.get("Identity"));
                     descendantFont.set("FirstChar", this.firstChar);
                     descendantFont.set("LastChar", this.lastChar);
                     descendantFont.set("FontDescriptor", this.fontDescriptorRef);
                     descendantFont.set("DW", 1000);
                     var widths = [];
                     var chars = _toConsumableArray(this.widths.entries()).sort();
                     var currentChar = null;
                     var currentWidths = null;
                     var _iterator79 = _createForOfIteratorHelper(chars),
                        _step79;
                     try {
                        for (_iterator79.s(); !(_step79 = _iterator79.n()).done; ) {
                           var _step79$value = _slicedToArray(_step79.value, 2),
                              _char0 = _step79$value[0],
                              width = _step79$value[1];
                           if (!currentChar) {
                              currentChar = _char0;
                              currentWidths = [width];
                              continue;
                           }
                           if (_char0 === currentChar + currentWidths.length) {
                              currentWidths.push(width);
                           } else {
                              widths.push(currentChar, currentWidths);
                              currentChar = _char0;
                              currentWidths = [width];
                           }
                        }
                     } catch (err) {
                        _iterator79.e(err);
                     } finally {
                        _iterator79.f();
                     }
                     if (currentChar) {
                        widths.push(currentChar, currentWidths);
                     }
                     descendantFont.set("W", widths);
                     var cidSystemInfo = new Dict(this.xref);
                     cidSystemInfo.set("Ordering", "Identity");
                     cidSystemInfo.set("Registry", "Adobe");
                     cidSystemInfo.set("Supplement", 0);
                     descendantFont.set("CIDSystemInfo", cidSystemInfo);
                     return this.xref.getNewPersistentRef(descendantFont);
                  },
               },
               {
                  key: "baseFontRef",
                  get: function get() {
                     var baseFont = new Dict(this.xref);
                     baseFont.set("BaseFont", this.fontName);
                     baseFont.set("Type", Name.get("Font"));
                     baseFont.set("Subtype", Name.get("Type0"));
                     baseFont.set("Encoding", Name.get("Identity-H"));
                     baseFont.set("DescendantFonts", [this.descendantFontRef]);
                     baseFont.set("ToUnicode", Name.get("Identity-H"));
                     return this.xref.getNewPersistentRef(baseFont);
                  },
               },
               {
                  key: "resources",
                  get: function get() {
                     var resources = new Dict(this.xref);
                     var font = new Dict(this.xref);
                     font.set(this.fontName.name, this.baseFontRef);
                     resources.set("Font", font);
                     return resources;
                  },
               },
               {
                  key: "_createContext",
                  value: function _createContext() {
                     this.widths = new Map();
                     this.ctxMeasure.font = "1000px ".concat(this.fontFamily);
                     return this.ctxMeasure;
                  },
               },
               {
                  key: "createFontResources",
                  value: function createFontResources(text) {
                     var ctx = this._createContext();
                     var _iterator80 = _createForOfIteratorHelper(
                           text.split(/\r\n?|\n/),
                        ),
                        _step80;
                     try {
                        for (_iterator80.s(); !(_step80 = _iterator80.n()).done; ) {
                           var line = _step80.value;
                           var _iterator81 = _createForOfIteratorHelper(line.split("")),
                              _step81;
                           try {
                              for (_iterator81.s(); !(_step81 = _iterator81.n()).done; ) {
                                 var _char1 = _step81.value;
                                 var code = _char1.charCodeAt(0);
                                 if (this.widths.has(code)) {
                                    continue;
                                 }
                                 var metrics = ctx.measureText(_char1);
                                 var width = Math.ceil(metrics.width);
                                 this.widths.set(code, width);
                                 this.firstChar = Math.min(code, this.firstChar);
                                 this.lastChar = Math.max(code, this.lastChar);
                              }
                           } catch (err) {
                              _iterator81.e(err);
                           } finally {
                              _iterator81.f();
                           }
                        }
                     } catch (err) {
                        _iterator80.e(err);
                     } finally {
                        _iterator80.f();
                     }
                     return this.resources;
                  },
               },
               {
                  key: "createAppearance",
                  value: function createAppearance(
                     text,
                     rect,
                     rotation,
                     fontSize,
                     bgColor,
                     strokeAlpha,
                  ) {
                     var ctx = this._createContext();
                     var lines = [];
                     var maxWidth = -Infinity;
                     var _iterator82 = _createForOfIteratorHelper(
                           text.split(/\r\n?|\n/),
                        ),
                        _step82;
                     try {
                        for (_iterator82.s(); !(_step82 = _iterator82.n()).done; ) {
                           var _line = _step82.value;
                           lines.push(_line);
                           var lineWidth = ctx.measureText(_line).width;
                           maxWidth = Math.max(maxWidth, lineWidth);
                           var _iterator83 = _createForOfIteratorHelper(
                                 codePointIter(_line),
                              ),
                              _step83;
                           try {
                              for (_iterator83.s(); !(_step83 = _iterator83.n()).done; ) {
                                 var code = _step83.value;
                                 var _char10 = String.fromCodePoint(code);
                                 var width = this.widths.get(code);
                                 if (width === undefined) {
                                    var metrics = ctx.measureText(_char10);
                                    width = Math.ceil(metrics.width);
                                    this.widths.set(code, width);
                                    this.firstChar = Math.min(code, this.firstChar);
                                    this.lastChar = Math.max(code, this.lastChar);
                                 }
                              }
                           } catch (err) {
                              _iterator83.e(err);
                           } finally {
                              _iterator83.f();
                           }
                        }
                     } catch (err) {
                        _iterator82.e(err);
                     } finally {
                        _iterator82.f();
                     }
                     maxWidth *= fontSize / 1000;
                     var _rect = _slicedToArray(rect, 4),
                        x1 = _rect[0],
                        y1 = _rect[1],
                        x2 = _rect[2],
                        y2 = _rect[3];
                     var w = x2 - x1;
                     var h = y2 - y1;
                     if (rotation % 180 !== 0) {
                        var _ref67 = [h, w];
                        w = _ref67[0];
                        h = _ref67[1];
                     }
                     var hscale = 1;
                     if (maxWidth > w) {
                        hscale = w / maxWidth;
                     }
                     var vscale = 1;
                     var lineHeight = LINE_FACTOR * fontSize;
                     var lineDescent = LINE_DESCENT_FACTOR * fontSize;
                     var maxHeight = lineHeight * lines.length;
                     if (maxHeight > h) {
                        vscale = h / maxHeight;
                     }
                     var fscale = Math.min(hscale, vscale);
                     var newFontSize = fontSize * fscale;
                     var buffer = [
                        "q",
                        "0 0 "
                           .concat(numberToString(w), " ")
                           .concat(numberToString(h), " re W n"),
                        "BT",
                        "1 0 0 1 0 "
                           .concat(numberToString(h + lineDescent), " Tm 0 Tc ")
                           .concat(getPdfColor(bgColor, true)),
                        "/"
                           .concat(this.fontName.name, " ")
                           .concat(numberToString(newFontSize), " Tf"),
                     ];
                     var resources = this.resources;
                     strokeAlpha =
                        typeof strokeAlpha === "number" &&
                        strokeAlpha >= 0 &&
                        strokeAlpha <= 1
                           ? strokeAlpha
                           : 1;
                     if (strokeAlpha !== 1) {
                        buffer.push("/R0 gs");
                        var extGState = new Dict(this.xref);
                        var r0 = new Dict(this.xref);
                        r0.set("ca", strokeAlpha);
                        r0.set("CA", strokeAlpha);
                        r0.set("Type", Name.get("ExtGState"));
                        extGState.set("R0", r0);
                        resources.set("ExtGState", extGState);
                     }
                     var vShift = numberToString(lineHeight);
                     for (var _i45 = 0, _lines = lines; _i45 < _lines.length; _i45++) {
                        var line = _lines[_i45];
                        buffer.push(
                           "0 -"
                              .concat(vShift, " Td <")
                              .concat(stringToUTF16HexString(line), "> Tj"),
                        );
                     }
                     buffer.push("ET", "Q");
                     var appearance = buffer.join("\n");
                     var appearanceStreamDict = new Dict(this.xref);
                     appearanceStreamDict.set("Subtype", Name.get("Form"));
                     appearanceStreamDict.set("Type", Name.get("XObject"));
                     appearanceStreamDict.set("BBox", [0, 0, w, h]);
                     appearanceStreamDict.set("Length", appearance.length);
                     appearanceStreamDict.set("Resources", resources);
                     if (rotation) {
                        var matrix = _getRotationMatrix(rotation, w, h);
                        appearanceStreamDict.set("Matrix", matrix);
                     }
                     var ap = new StringStream(appearance);
                     ap.dict = appearanceStreamDict;
                     return ap;
                  },
               },
            ],
            [
               {
                  key: "getFirstPositionInfo",
                  value: function getFirstPositionInfo(rect, rotation, fontSize) {
                     var _rect2 = _slicedToArray(rect, 4),
                        x1 = _rect2[0],
                        y1 = _rect2[1],
                        x2 = _rect2[2],
                        y2 = _rect2[3];
                     var w = x2 - x1;
                     var h = y2 - y1;
                     if (rotation % 180 !== 0) {
                        var _ref68 = [h, w];
                        w = _ref68[0];
                        h = _ref68[1];
                     }
                     var lineHeight = LINE_FACTOR * fontSize;
                     var lineDescent = LINE_DESCENT_FACTOR * fontSize;
                     return {
                        coords: [0, h + lineDescent - lineHeight],
                        bbox: [0, 0, w, h],
                        matrix:
                           rotation !== 0
                              ? _getRotationMatrix(rotation, h, lineHeight)
                              : undefined,
                     };
                  },
               },
            ],
         );
      })(); // CONCATENATED MODULE: ./src/core/name_number_tree.js
      var NameOrNumberTree = /*#__PURE__*/ (function () {
         function NameOrNumberTree(root, xref, type) {
            _classCallCheck(this, NameOrNumberTree);
            if (this.constructor === NameOrNumberTree) {
               unreachable("Cannot initialize NameOrNumberTree.");
            }
            this.root = root;
            this.xref = xref;
            this._type = type;
         }
         return _createClass(NameOrNumberTree, [
            {
               key: "getAll",
               value: function getAll() {
                  var map = new Map();
                  if (!this.root) {
                     return map;
                  }
                  var xref = this.xref;
                  var processed = new RefSet();
                  processed.put(this.root);
                  var queue = [this.root];
                  while (queue.length > 0) {
                     var obj = xref.fetchIfRef(queue.shift());
                     if (!(obj instanceof Dict)) {
                        continue;
                     }
                     if (obj.has("Kids")) {
                        var kids = obj.get("Kids");
                        if (!Array.isArray(kids)) {
                           continue;
                        }
                        var _iterator84 = _createForOfIteratorHelper(kids),
                           _step84;
                        try {
                           for (_iterator84.s(); !(_step84 = _iterator84.n()).done; ) {
                              var kid = _step84.value;
                              if (processed.has(kid)) {
                                 throw new FormatError(
                                    'Duplicate entry in "'.concat(this._type, '" tree.'),
                                 );
                              }
                              queue.push(kid);
                              processed.put(kid);
                           }
                        } catch (err) {
                           _iterator84.e(err);
                        } finally {
                           _iterator84.f();
                        }
                        continue;
                     }
                     var entries = obj.get(this._type);
                     if (!Array.isArray(entries)) {
                        continue;
                     }
                     for (var i = 0, ii = entries.length; i < ii; i += 2) {
                        map.set(
                           xref.fetchIfRef(entries[i]),
                           xref.fetchIfRef(entries[i + 1]),
                        );
                     }
                  }
                  return map;
               },
            },
            {
               key: "get",
               value: function get(key) {
                  if (!this.root) {
                     return null;
                  }
                  var xref = this.xref;
                  var kidsOrEntries = xref.fetchIfRef(this.root);
                  var loopCount = 0;
                  var MAX_LEVELS = 10;
                  while (kidsOrEntries.has("Kids")) {
                     if (++loopCount > MAX_LEVELS) {
                        warn(
                           'Search depth limit reached for "'.concat(
                              this._type,
                              '" tree.',
                           ),
                        );
                        return null;
                     }
                     var kids = kidsOrEntries.get("Kids");
                     if (!Array.isArray(kids)) {
                        return null;
                     }
                     var l = 0,
                        r = kids.length - 1;
                     while (l <= r) {
                        var m = (l + r) >> 1;
                        var kid = xref.fetchIfRef(kids[m]);
                        var limits = kid.get("Limits");
                        if (key < xref.fetchIfRef(limits[0])) {
                           r = m - 1;
                        } else if (key > xref.fetchIfRef(limits[1])) {
                           l = m + 1;
                        } else {
                           kidsOrEntries = kid;
                           break;
                        }
                     }
                     if (l > r) {
                        return null;
                     }
                  }
                  var entries = kidsOrEntries.get(this._type);
                  if (Array.isArray(entries)) {
                     var _l = 0,
                        _r = entries.length - 2;
                     while (_l <= _r) {
                        var tmp = (_l + _r) >> 1,
                           _m = tmp + (tmp & 1);
                        var currentKey = xref.fetchIfRef(entries[_m]);
                        if (key < currentKey) {
                           _r = _m - 2;
                        } else if (key > currentKey) {
                           _l = _m + 2;
                        } else {
                           return xref.fetchIfRef(entries[_m + 1]);
                        }
                     }
                  }
                  return null;
               },
            },
         ]);
      })();
      var NameTree = /*#__PURE__*/ (function (_NameOrNumberTree) {
         function NameTree(root, xref) {
            _classCallCheck(this, NameTree);
            return _callSuper(this, NameTree, [root, xref, "Names"]);
         }
         _inherits(NameTree, _NameOrNumberTree);
         return _createClass(NameTree);
      })(NameOrNumberTree);
      var NumberTree = /*#__PURE__*/ (function (_NameOrNumberTree2) {
         function NumberTree(root, xref) {
            _classCallCheck(this, NumberTree);
            return _callSuper(this, NumberTree, [root, xref, "Nums"]);
         }
         _inherits(NumberTree, _NameOrNumberTree2);
         return _createClass(NumberTree);
      })(NameOrNumberTree); // CONCATENATED MODULE: ./src/core/cleanup_helper.js
      function clearGlobalCaches() {
         clearPatternCaches();
         clearPrimitiveCaches();
         clearUnicodeCaches();
         JpxImage.cleanup();
      } // CONCATENATED MODULE: ./src/core/file_spec.js
      function pickPlatformItem(dict) {
         if (dict.has("UF")) {
            return dict.get("UF");
         } else if (dict.has("F")) {
            return dict.get("F");
         } else if (dict.has("Unix")) {
            return dict.get("Unix");
         } else if (dict.has("Mac")) {
            return dict.get("Mac");
         } else if (dict.has("DOS")) {
            return dict.get("DOS");
         }
         return null;
      }
      var _contentAvailable = /*#__PURE__*/ new WeakMap();
      var FileSpec = /*#__PURE__*/ (function () {
         function FileSpec(root, xref) {
            var skipContent =
               arguments.length > 2 && arguments[2] !== undefined
                  ? arguments[2]
                  : false;
            _classCallCheck(this, FileSpec);
            _classPrivateFieldInitSpec(this, _contentAvailable, false);
            if (!(root instanceof Dict)) {
               return;
            }
            this.xref = xref;
            this.root = root;
            if (root.has("FS")) {
               this.fs = root.get("FS");
            }
            this.description = root.has("Desc")
               ? stringToPDFString(root.get("Desc"))
               : "";
            if (root.has("RF")) {
               warn("Related file specifications are not supported");
            }
            if (!skipContent) {
               if (root.has("EF")) {
                  _classPrivateFieldSet(_contentAvailable, this, true);
               } else {
                  warn("Non-embedded file specifications are not supported");
               }
            }
         }
         return _createClass(FileSpec, [
            {
               key: "filename",
               get: function get() {
                  if (!this._filename && this.root) {
                     var filename = pickPlatformItem(this.root) || "unnamed";
                     this._filename = stringToPDFString(filename)
                        .replaceAll("\\\\", "\\")
                        .replaceAll("\\/", "/")
                        .replaceAll("\\", "/");
                  }
                  return this._filename;
               },
            },
            {
               key: "content",
               get: function get() {
                  if (!_classPrivateFieldGet(_contentAvailable, this)) {
                     return null;
                  }
                  if (!this.contentRef && this.root) {
                     this.contentRef = pickPlatformItem(this.root.get("EF"));
                  }
                  var content = null;
                  if (this.contentRef) {
                     var fileObj = this.xref.fetchIfRef(this.contentRef);
                     if (fileObj instanceof BaseStream) {
                        content = fileObj.getBytes();
                     } else {
                        warn(
                           "Embedded file specification points to non-existing/invalid content",
                        );
                     }
                  } else {
                     warn("Embedded file specification does not have a content");
                  }
                  return content;
               },
            },
            {
               key: "serializable",
               get: function get() {
                  return { filename: this.filename, content: this.content };
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xml_parser.js
      var XMLParserErrorCode = {
         NoError: 0,
         EndOfDocument: -1,
         UnterminatedCdat: -2,
         UnterminatedXmlDeclaration: -3,
         UnterminatedDoctypeDeclaration: -4,
         UnterminatedComment: -5,
         MalformedElement: -6,
         OutOfMemory: -7,
         UnterminatedAttributeValue: -8,
         UnterminatedElement: -9,
         ElementNeverBegun: -10,
      };
      function isWhitespace(s, index) {
         var ch = s[index];
         return ch === " " || ch === "\n" || ch === "\r" || ch === "\t";
      }
      function isWhitespaceString(s) {
         for (var i = 0, ii = s.length; i < ii; i++) {
            if (!isWhitespace(s, i)) {
               return false;
            }
         }
         return true;
      }
      var XMLParserBase = /*#__PURE__*/ (function () {
         function XMLParserBase() {
            _classCallCheck(this, XMLParserBase);
         }
         return _createClass(XMLParserBase, [
            {
               key: "_resolveEntities",
               value: function _resolveEntities(s) {
                  var _this52 = this;
                  return s.replaceAll(/&([^;]+);/g, function (all, entity) {
                     if (entity.substring(0, 2) === "#x") {
                        return String.fromCodePoint(parseInt(entity.substring(2), 16));
                     } else if (entity.substring(0, 1) === "#") {
                        return String.fromCodePoint(parseInt(entity.substring(1), 10));
                     }
                     switch (entity) {
                        case "lt":
                           return "<";
                        case "gt":
                           return ">";
                        case "amp":
                           return "&";
                        case "quot":
                           return '"';
                        case "apos":
                           return "'";
                     }
                     return _this52.onResolveEntity(entity);
                  });
               },
            },
            {
               key: "_parseContent",
               value: function _parseContent(s, start) {
                  var attributes = [];
                  var pos = start;
                  function skipWs() {
                     while (pos < s.length && isWhitespace(s, pos)) {
                        ++pos;
                     }
                  }
                  while (
                     pos < s.length &&
                     !isWhitespace(s, pos) &&
                     s[pos] !== ">" &&
                     s[pos] !== "/"
                     ) {
                     ++pos;
                  }
                  var name = s.substring(start, pos);
                  skipWs();
                  while (
                     pos < s.length &&
                     s[pos] !== ">" &&
                     s[pos] !== "/" &&
                     s[pos] !== "?"
                     ) {
                     skipWs();
                     var attrName = "",
                        attrValue = "";
                     while (
                        pos < s.length &&
                        !isWhitespace(s, pos) &&
                        s[pos] !== "="
                        ) {
                        attrName += s[pos];
                        ++pos;
                     }
                     skipWs();
                     if (s[pos] !== "=") {
                        return null;
                     }
                     ++pos;
                     skipWs();
                     var attrEndChar = s[pos];
                     if (attrEndChar !== '"' && attrEndChar !== "'") {
                        return null;
                     }
                     var attrEndIndex = s.indexOf(attrEndChar, ++pos);
                     if (attrEndIndex < 0) {
                        return null;
                     }
                     attrValue = s.substring(pos, attrEndIndex);
                     attributes.push({
                        name: attrName,
                        value: this._resolveEntities(attrValue),
                     });
                     pos = attrEndIndex + 1;
                     skipWs();
                  }
                  return { name: name, attributes: attributes, parsed: pos - start };
               },
            },
            {
               key: "_parseProcessingInstruction",
               value: function _parseProcessingInstruction(s, start) {
                  var pos = start;
                  function skipWs() {
                     while (pos < s.length && isWhitespace(s, pos)) {
                        ++pos;
                     }
                  }
                  while (
                     pos < s.length &&
                     !isWhitespace(s, pos) &&
                     s[pos] !== ">" &&
                     s[pos] !== "?" &&
                     s[pos] !== "/"
                     ) {
                     ++pos;
                  }
                  var name = s.substring(start, pos);
                  skipWs();
                  var attrStart = pos;
                  while (pos < s.length && (s[pos] !== "?" || s[pos + 1] !== ">")) {
                     ++pos;
                  }
                  var value = s.substring(attrStart, pos);
                  return { name: name, value: value, parsed: pos - start };
               },
            },
            {
               key: "parseXml",
               value: function parseXml(s) {
                  var i = 0;
                  while (i < s.length) {
                     var ch = s[i];
                     var j = i;
                     if (ch === "<") {
                        ++j;
                        var ch2 = s[j];
                        var q = void 0;
                        switch (ch2) {
                           case "/":
                              ++j;
                              q = s.indexOf(">", j);
                              if (q < 0) {
                                 this.onError(XMLParserErrorCode.UnterminatedElement);
                                 return;
                              }
                              this.onEndElement(s.substring(j, q));
                              j = q + 1;
                              break;
                           case "?":
                              ++j;
                              var pi = this._parseProcessingInstruction(s, j);
                              if (
                                 s.substring(j + pi.parsed, j + pi.parsed + 2) !== "?>"
                              ) {
                                 this.onError(
                                    XMLParserErrorCode.UnterminatedXmlDeclaration,
                                 );
                                 return;
                              }
                              this.onPi(pi.name, pi.value);
                              j += pi.parsed + 2;
                              break;
                           case "!":
                              if (s.substring(j + 1, j + 3) === "--") {
                                 q = s.indexOf("-->", j + 3);
                                 if (q < 0) {
                                    this.onError(XMLParserErrorCode.UnterminatedComment);
                                    return;
                                 }
                                 this.onComment(s.substring(j + 3, q));
                                 j = q + 3;
                              } else if (s.substring(j + 1, j + 8) === "[CDATA[") {
                                 q = s.indexOf("]]>", j + 8);
                                 if (q < 0) {
                                    this.onError(XMLParserErrorCode.UnterminatedCdat);
                                    return;
                                 }
                                 this.onCdata(s.substring(j + 8, q));
                                 j = q + 3;
                              } else if (s.substring(j + 1, j + 8) === "DOCTYPE") {
                                 var q2 = s.indexOf("[", j + 8);
                                 var complexDoctype = false;
                                 q = s.indexOf(">", j + 8);
                                 if (q < 0) {
                                    this.onError(
                                       XMLParserErrorCode.UnterminatedDoctypeDeclaration,
                                    );
                                    return;
                                 }
                                 if (q2 > 0 && q > q2) {
                                    q = s.indexOf("]>", j + 8);
                                    if (q < 0) {
                                       this.onError(
                                          XMLParserErrorCode.UnterminatedDoctypeDeclaration,
                                       );
                                       return;
                                    }
                                    complexDoctype = true;
                                 }
                                 var doctypeContent = s.substring(
                                    j + 8,
                                    q + (complexDoctype ? 1 : 0),
                                 );
                                 this.onDoctype(doctypeContent);
                                 j = q + (complexDoctype ? 2 : 1);
                              } else {
                                 this.onError(XMLParserErrorCode.MalformedElement);
                                 return;
                              }
                              break;
                           default:
                              var content = this._parseContent(s, j);
                              if (content === null) {
                                 this.onError(XMLParserErrorCode.MalformedElement);
                                 return;
                              }
                              var isClosed = false;
                              if (
                                 s.substring(
                                    j + content.parsed,
                                    j + content.parsed + 2,
                                 ) === "/>"
                              ) {
                                 isClosed = true;
                              } else if (
                                 s.substring(
                                    j + content.parsed,
                                    j + content.parsed + 1,
                                 ) !== ">"
                              ) {
                                 this.onError(XMLParserErrorCode.UnterminatedElement);
                                 return;
                              }
                              this.onBeginElement(
                                 content.name,
                                 content.attributes,
                                 isClosed,
                              );
                              j += content.parsed + (isClosed ? 2 : 1);
                              break;
                        }
                     } else {
                        while (j < s.length && s[j] !== "<") {
                           j++;
                        }
                        var text = s.substring(i, j);
                        this.onText(this._resolveEntities(text));
                     }
                     i = j;
                  }
               },
            },
            {
               key: "onResolveEntity",
               value: function onResolveEntity(name) {
                  return "&".concat(name, ";");
               },
            },
            { key: "onPi", value: function onPi(name, value) {} },
            { key: "onComment", value: function onComment(text) {} },
            { key: "onCdata", value: function onCdata(text) {} },
            { key: "onDoctype", value: function onDoctype(doctypeContent) {} },
            { key: "onText", value: function onText(text) {} },
            {
               key: "onBeginElement",
               value: function onBeginElement(name, attributes, isEmpty) {},
            },
            { key: "onEndElement", value: function onEndElement(name) {} },
            { key: "onError", value: function onError(code) {} },
         ]);
      })();
      var SimpleDOMNode = /*#__PURE__*/ (function () {
         function SimpleDOMNode(nodeName, nodeValue) {
            _classCallCheck(this, SimpleDOMNode);
            this.nodeName = nodeName;
            this.nodeValue = nodeValue;
            Object.defineProperty(this, "parentNode", {
               value: null,
               writable: true,
            });
         }
         return _createClass(SimpleDOMNode, [
            {
               key: "firstChild",
               get: function get() {
                  var _this$childNodes;
                  return (_this$childNodes = this.childNodes) === null ||
                  _this$childNodes === void 0
                     ? void 0
                     : _this$childNodes[0];
               },
            },
            {
               key: "nextSibling",
               get: function get() {
                  var childNodes = this.parentNode.childNodes;
                  if (!childNodes) {
                     return undefined;
                  }
                  var index = childNodes.indexOf(this);
                  if (index === -1) {
                     return undefined;
                  }
                  return childNodes[index + 1];
               },
            },
            {
               key: "textContent",
               get: function get() {
                  if (!this.childNodes) {
                     return this.nodeValue || "";
                  }
                  return this.childNodes
                     .map(function (child) {
                        return child.textContent;
                     })
                     .join("");
               },
            },
            {
               key: "children",
               get: function get() {
                  return this.childNodes || [];
               },
            },
            {
               key: "hasChildNodes",
               value: function hasChildNodes() {
                  var _this$childNodes2;
                  return (
                     ((_this$childNodes2 = this.childNodes) === null ||
                     _this$childNodes2 === void 0
                        ? void 0
                        : _this$childNodes2.length) > 0
                  );
               },
            },
            {
               key: "searchNode",
               value: function searchNode(paths, pos) {
                  if (pos >= paths.length) {
                     return this;
                  }
                  var component = paths[pos];
                  if (component.name.startsWith("#") && pos < paths.length - 1) {
                     return this.searchNode(paths, pos + 1);
                  }
                  var stack = [];
                  var node = this;
                  while (true) {
                     var _node$childNodes;
                     if (component.name === node.nodeName) {
                        if (component.pos === 0) {
                           var res = node.searchNode(paths, pos + 1);
                           if (res !== null) {
                              return res;
                           }
                        } else if (stack.length === 0) {
                           return null;
                        } else {
                           var _stack$pop = stack.pop(),
                              _stack$pop2 = _slicedToArray(_stack$pop, 1),
                              parent = _stack$pop2[0];
                           var siblingPos = 0;
                           var _iterator85 = _createForOfIteratorHelper(
                                 parent.childNodes,
                              ),
                              _step85;
                           try {
                              for (_iterator85.s(); !(_step85 = _iterator85.n()).done; ) {
                                 var child = _step85.value;
                                 if (component.name === child.nodeName) {
                                    if (siblingPos === component.pos) {
                                       return child.searchNode(paths, pos + 1);
                                    }
                                    siblingPos++;
                                 }
                              }
                           } catch (err) {
                              _iterator85.e(err);
                           } finally {
                              _iterator85.f();
                           }
                           return node.searchNode(paths, pos + 1);
                        }
                     }
                     if (
                        ((_node$childNodes = node.childNodes) === null ||
                        _node$childNodes === void 0
                           ? void 0
                           : _node$childNodes.length) > 0
                     ) {
                        stack.push([node, 0]);
                        node = node.childNodes[0];
                     } else if (stack.length === 0) {
                        return null;
                     } else {
                        while (stack.length !== 0) {
                           var _stack$pop3 = stack.pop(),
                              _stack$pop4 = _slicedToArray(_stack$pop3, 2),
                              _parent2 = _stack$pop4[0],
                              currentPos = _stack$pop4[1];
                           var newPos = currentPos + 1;
                           if (newPos < _parent2.childNodes.length) {
                              stack.push([_parent2, newPos]);
                              node = _parent2.childNodes[newPos];
                              break;
                           }
                        }
                        if (stack.length === 0) {
                           return null;
                        }
                     }
                  }
               },
            },
            {
               key: "dump",
               value: function dump(buffer) {
                  if (this.nodeName === "#text") {
                     buffer.push(encodeToXmlString(this.nodeValue));
                     return;
                  }
                  buffer.push("<".concat(this.nodeName));
                  if (this.attributes) {
                     var _iterator86 = _createForOfIteratorHelper(this.attributes),
                        _step86;
                     try {
                        for (_iterator86.s(); !(_step86 = _iterator86.n()).done; ) {
                           var attribute = _step86.value;
                           buffer.push(
                              " "
                                 .concat(attribute.name, '="')
                                 .concat(encodeToXmlString(attribute.value), '"'),
                           );
                        }
                     } catch (err) {
                        _iterator86.e(err);
                     } finally {
                        _iterator86.f();
                     }
                  }
                  if (this.hasChildNodes()) {
                     buffer.push(">");
                     var _iterator87 = _createForOfIteratorHelper(this.childNodes),
                        _step87;
                     try {
                        for (_iterator87.s(); !(_step87 = _iterator87.n()).done; ) {
                           var child = _step87.value;
                           child.dump(buffer);
                        }
                     } catch (err) {
                        _iterator87.e(err);
                     } finally {
                        _iterator87.f();
                     }
                     buffer.push("</".concat(this.nodeName, ">"));
                  } else if (this.nodeValue) {
                     buffer.push(
                        ">"
                           .concat(encodeToXmlString(this.nodeValue), "</")
                           .concat(this.nodeName, ">"),
                     );
                  } else {
                     buffer.push("/>");
                  }
               },
            },
         ]);
      })();
      var SimpleXMLParser = /*#__PURE__*/ (function (_XMLParserBase) {
         function SimpleXMLParser(_ref69) {
            var _this53;
            var _ref69$hasAttributes = _ref69.hasAttributes,
               hasAttributes =
                  _ref69$hasAttributes === void 0 ? false : _ref69$hasAttributes,
               _ref69$lowerCaseName = _ref69.lowerCaseName,
               lowerCaseName =
                  _ref69$lowerCaseName === void 0 ? false : _ref69$lowerCaseName;
            _classCallCheck(this, SimpleXMLParser);
            _this53 = _callSuper(this, SimpleXMLParser);
            _this53._currentFragment = null;
            _this53._stack = null;
            _this53._errorCode = XMLParserErrorCode.NoError;
            _this53._hasAttributes = hasAttributes;
            _this53._lowerCaseName = lowerCaseName;
            return _this53;
         }
         _inherits(SimpleXMLParser, _XMLParserBase);
         return _createClass(SimpleXMLParser, [
            {
               key: "parseFromString",
               value: function parseFromString(data) {
                  this._currentFragment = [];
                  this._stack = [];
                  this._errorCode = XMLParserErrorCode.NoError;
                  this.parseXml(data);
                  if (this._errorCode !== XMLParserErrorCode.NoError) {
                     return undefined;
                  }
                  var _this$_currentFragmen = _slicedToArray(
                        this._currentFragment,
                        1,
                     ),
                     documentElement = _this$_currentFragmen[0];
                  if (!documentElement) {
                     return undefined;
                  }
                  return { documentElement: documentElement };
               },
            },
            {
               key: "onText",
               value: function onText(text) {
                  if (isWhitespaceString(text)) {
                     return;
                  }
                  var node = new SimpleDOMNode("#text", text);
                  this._currentFragment.push(node);
               },
            },
            {
               key: "onCdata",
               value: function onCdata(text) {
                  var node = new SimpleDOMNode("#text", text);
                  this._currentFragment.push(node);
               },
            },
            {
               key: "onBeginElement",
               value: function onBeginElement(name, attributes, isEmpty) {
                  if (this._lowerCaseName) {
                     name = name.toLowerCase();
                  }
                  var node = new SimpleDOMNode(name);
                  node.childNodes = [];
                  if (this._hasAttributes) {
                     node.attributes = attributes;
                  }
                  this._currentFragment.push(node);
                  if (isEmpty) {
                     return;
                  }
                  this._stack.push(this._currentFragment);
                  this._currentFragment = node.childNodes;
               },
            },
            {
               key: "onEndElement",
               value: function onEndElement(name) {
                  this._currentFragment = this._stack.pop() || [];
                  var lastElement = this._currentFragment.at(-1);
                  if (!lastElement) {
                     return null;
                  }
                  var _iterator88 = _createForOfIteratorHelper(
                        lastElement.childNodes,
                     ),
                     _step88;
                  try {
                     for (_iterator88.s(); !(_step88 = _iterator88.n()).done; ) {
                        var childNode = _step88.value;
                        childNode.parentNode = lastElement;
                     }
                  } catch (err) {
                     _iterator88.e(err);
                  } finally {
                     _iterator88.f();
                  }
                  return lastElement;
               },
            },
            {
               key: "onError",
               value: function onError(code) {
                  this._errorCode = code;
               },
            },
         ]);
      })(XMLParserBase); // CONCATENATED MODULE: ./src/core/metadata_parser.js
      var MetadataParser = /*#__PURE__*/ (function () {
         function MetadataParser(data) {
            _classCallCheck(this, MetadataParser);
            data = this._repair(data);
            var parser = new SimpleXMLParser({ lowerCaseName: true });
            var xmlDocument = parser.parseFromString(data);
            this._metadataMap = new Map();
            this._data = data;
            if (xmlDocument) {
               this._parse(xmlDocument);
            }
         }
         return _createClass(MetadataParser, [
            {
               key: "_repair",
               value: function _repair(data) {
                  return data
                     .replace(/^[^<]+/, "")
                     .replaceAll(/>\\376\\377([^<]+)/g, function (all, codes) {
                        var bytes = codes
                           .replaceAll(
                              /\\([0-3])([0-7])([0-7])/g,
                              function (code, d1, d2, d3) {
                                 return String.fromCharCode(d1 * 64 + d2 * 8 + d3 * 1);
                              },
                           )
                           .replaceAll(/&(amp|apos|gt|lt|quot);/g, function (str, name) {
                              switch (name) {
                                 case "amp":
                                    return "&";
                                 case "apos":
                                    return "'";
                                 case "gt":
                                    return ">";
                                 case "lt":
                                    return "<";
                                 case "quot":
                                    return '"';
                              }
                              throw new Error(
                                 "_repair: ".concat(name, " isn't defined."),
                              );
                           });
                        var charBuf = [">"];
                        for (var i = 0, ii = bytes.length; i < ii; i += 2) {
                           var code =
                              bytes.charCodeAt(i) * 256 + bytes.charCodeAt(i + 1);
                           if (
                              code >= 32 &&
                              code < 127 &&
                              code !== 60 &&
                              code !== 62 &&
                              code !== 38
                           ) {
                              charBuf.push(String.fromCharCode(code));
                           } else {
                              charBuf.push(
                                 "&#x" + (0x10000 + code).toString(16).substring(1) + ";",
                              );
                           }
                        }
                        return charBuf.join("");
                     });
               },
            },
            {
               key: "_getSequence",
               value: function _getSequence(entry) {
                  var name = entry.nodeName;
                  if (
                     name !== "rdf:bag" &&
                     name !== "rdf:seq" &&
                     name !== "rdf:alt"
                  ) {
                     return null;
                  }
                  return entry.childNodes.filter(function (node) {
                     return node.nodeName === "rdf:li";
                  });
               },
            },
            {
               key: "_parseArray",
               value: function _parseArray(entry) {
                  if (!entry.hasChildNodes()) {
                     return;
                  }
                  var _entry$childNodes = _slicedToArray(entry.childNodes, 1),
                     seqNode = _entry$childNodes[0];
                  var sequence = this._getSequence(seqNode) || [];
                  this._metadataMap.set(
                     entry.nodeName,
                     sequence.map(function (node) {
                        return node.textContent.trim();
                     }),
                  );
               },
            },
            {
               key: "_parse",
               value: function _parse(xmlDocument) {
                  var rdf = xmlDocument.documentElement;
                  if (rdf.nodeName !== "rdf:rdf") {
                     rdf = rdf.firstChild;
                     while (rdf && rdf.nodeName !== "rdf:rdf") {
                        rdf = rdf.nextSibling;
                     }
                  }
                  if (!rdf || rdf.nodeName !== "rdf:rdf" || !rdf.hasChildNodes()) {
                     return;
                  }
                  var _iterator89 = _createForOfIteratorHelper(rdf.childNodes),
                     _step89;
                  try {
                     for (_iterator89.s(); !(_step89 = _iterator89.n()).done; ) {
                        var desc = _step89.value;
                        if (desc.nodeName !== "rdf:description") {
                           continue;
                        }
                        var _iterator90 = _createForOfIteratorHelper(desc.childNodes),
                           _step90;
                        try {
                           for (_iterator90.s(); !(_step90 = _iterator90.n()).done; ) {
                              var entry = _step90.value;
                              var name = entry.nodeName;
                              switch (name) {
                                 case "#text":
                                    continue;
                                 case "dc:creator":
                                 case "dc:subject":
                                    this._parseArray(entry);
                                    continue;
                              }
                              this._metadataMap.set(name, entry.textContent.trim());
                           }
                        } catch (err) {
                           _iterator90.e(err);
                        } finally {
                           _iterator90.f();
                        }
                     }
                  } catch (err) {
                     _iterator89.e(err);
                  } finally {
                     _iterator89.f();
                  }
               },
            },
            {
               key: "serializable",
               get: function get() {
                  return { parsedData: this._metadataMap, rawData: this._data };
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/decrypt_stream.js
      var chunkSize = 512;
      var DecryptStream = /*#__PURE__*/ (function (_DecodeStream10) {
         function DecryptStream(str, maybeLength, decrypt) {
            var _this54;
            _classCallCheck(this, DecryptStream);
            _this54 = _callSuper(this, DecryptStream, [maybeLength]);
            _this54.str = str;
            _this54.dict = str.dict;
            _this54.decrypt = decrypt;
            _this54.nextChunk = null;
            _this54.initialized = false;
            return _this54;
         }
         _inherits(DecryptStream, _DecodeStream10);
         return _createClass(DecryptStream, [
            {
               key: "readBlock",
               value: function readBlock() {
                  var _this$nextChunk;
                  var chunk;
                  if (this.initialized) {
                     chunk = this.nextChunk;
                  } else {
                     chunk = this.str.getBytes(chunkSize);
                     this.initialized = true;
                  }
                  if (!chunk || chunk.length === 0) {
                     this.eof = true;
                     return;
                  }
                  this.nextChunk = this.str.getBytes(chunkSize);
                  var hasMoreData =
                     ((_this$nextChunk = this.nextChunk) === null ||
                     _this$nextChunk === void 0
                        ? void 0
                        : _this$nextChunk.length) > 0;
                  var decrypt = this.decrypt;
                  chunk = decrypt(chunk, !hasMoreData);
                  var bufferLength = this.bufferLength,
                     newLength = bufferLength + chunk.length,
                     buffer = this.ensureBuffer(newLength);
                  buffer.set(chunk, bufferLength);
                  this.bufferLength = newLength;
               },
            },
         ]);
      })(DecodeStream); // CONCATENATED MODULE: ./src/core/crypto.js
      var ARCFourCipher = /*#__PURE__*/ (function () {
         function ARCFourCipher(key) {
            _classCallCheck(this, ARCFourCipher);
            this.a = 0;
            this.b = 0;
            var s = new Uint8Array(256);
            var keyLength = key.length;
            for (var i = 0; i < 256; ++i) {
               s[i] = i;
            }
            for (var _i46 = 0, j = 0; _i46 < 256; ++_i46) {
               var tmp = s[_i46];
               j = (j + tmp + key[_i46 % keyLength]) & 0xff;
               s[_i46] = s[j];
               s[j] = tmp;
            }
            this.s = s;
         }
         return _createClass(ARCFourCipher, [
            {
               key: "encryptBlock",
               value: function encryptBlock(data) {
                  var a = this.a,
                     b = this.b;
                  var s = this.s;
                  var n = data.length;
                  var output = new Uint8Array(n);
                  for (var i = 0; i < n; ++i) {
                     a = (a + 1) & 0xff;
                     var tmp = s[a];
                     b = (b + tmp) & 0xff;
                     var tmp2 = s[b];
                     s[a] = tmp2;
                     s[b] = tmp;
                     output[i] = data[i] ^ s[(tmp + tmp2) & 0xff];
                  }
                  this.a = a;
                  this.b = b;
                  return output;
               },
            },
            {
               key: "decryptBlock",
               value: function decryptBlock(data) {
                  return this.encryptBlock(data);
               },
            },
            {
               key: "encrypt",
               value: function encrypt(data) {
                  return this.encryptBlock(data);
               },
            },
         ]);
      })();
      var calculateMD5 = (function calculateMD5Closure() {
         var r = new Uint8Array([
            7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14,
            20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16,
            23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10,
            15, 21, 6, 10, 15, 21,
         ]);
         var k = new Int32Array([
            -680876936, -389564586, 606105819, -1044525330, -176418897, 1200080426,
            -1473231341, -45705983, 1770035416, -1958414417, -42063, -1990404162,
            1804603682, -40341101, -1502002290, 1236535329, -165796510, -1069501632,
            643717713, -373897302, -701558691, 38016083, -660478335, -405537848,
            568446438, -1019803690, -187363961, 1163531501, -1444681467, -51403784,
            1735328473, -1926607734, -378558, -2022574463, 1839030562, -35309556,
            -1530992060, 1272893353, -155497632, -1094730640, 681279174, -358537222,
            -722521979, 76029189, -640364487, -421815835, 530742520, -995338651,
            -198630844, 1126891415, -1416354905, -57434055, 1700485571, -1894986606,
            -1051523, -2054922799, 1873313359, -30611744, -1560198380, 1309151649,
            -145523070, -1120210379, 718787259, -343485551,
         ]);
         function hash(data, offset, length) {
            var h0 = 1732584193,
               h1 = -271733879,
               h2 = -1732584194,
               h3 = 271733878;
            var paddedLength = (length + 72) & ~63;
            var padded = new Uint8Array(paddedLength);
            var i, j;
            for (i = 0; i < length; ++i) {
               padded[i] = data[offset++];
            }
            padded[i++] = 0x80;
            var n = paddedLength - 8;
            while (i < n) {
               padded[i++] = 0;
            }
            padded[i++] = (length << 3) & 0xff;
            padded[i++] = (length >> 5) & 0xff;
            padded[i++] = (length >> 13) & 0xff;
            padded[i++] = (length >> 21) & 0xff;
            padded[i++] = (length >>> 29) & 0xff;
            padded[i++] = 0;
            padded[i++] = 0;
            padded[i++] = 0;
            var w = new Int32Array(16);
            for (i = 0; i < paddedLength; ) {
               for (j = 0; j < 16; ++j, i += 4) {
                  w[j] =
                     padded[i] |
                     (padded[i + 1] << 8) |
                     (padded[i + 2] << 16) |
                     (padded[i + 3] << 24);
               }
               var a = h0,
                  b = h1,
                  c = h2,
                  d = h3,
                  f = void 0,
                  g = void 0;
               for (j = 0; j < 64; ++j) {
                  if (j < 16) {
                     f = (b & c) | (~b & d);
                     g = j;
                  } else if (j < 32) {
                     f = (d & b) | (~d & c);
                     g = (5 * j + 1) & 15;
                  } else if (j < 48) {
                     f = b ^ c ^ d;
                     g = (3 * j + 5) & 15;
                  } else {
                     f = c ^ (b | ~d);
                     g = (7 * j) & 15;
                  }
                  var tmp = d,
                     rotateArg = (a + f + k[j] + w[g]) | 0,
                     rotate = r[j];
                  d = c;
                  c = b;
                  b =
                     (b + ((rotateArg << rotate) | (rotateArg >>> (32 - rotate)))) | 0;
                  a = tmp;
               }
               h0 = (h0 + a) | 0;
               h1 = (h1 + b) | 0;
               h2 = (h2 + c) | 0;
               h3 = (h3 + d) | 0;
            }
            return new Uint8Array([
               h0 & 0xff,
               (h0 >> 8) & 0xff,
               (h0 >> 16) & 0xff,
               (h0 >>> 24) & 0xff,
               h1 & 0xff,
               (h1 >> 8) & 0xff,
               (h1 >> 16) & 0xff,
               (h1 >>> 24) & 0xff,
               h2 & 0xff,
               (h2 >> 8) & 0xff,
               (h2 >> 16) & 0xff,
               (h2 >>> 24) & 0xff,
               h3 & 0xff,
               (h3 >> 8) & 0xff,
               (h3 >> 16) & 0xff,
               (h3 >>> 24) & 0xff,
            ]);
         }
         return hash;
      })();
      var Word64 = /*#__PURE__*/ (function () {
         function Word64(highInteger, lowInteger) {
            _classCallCheck(this, Word64);
            this.high = highInteger | 0;
            this.low = lowInteger | 0;
         }
         return _createClass(Word64, [
            {
               key: "and",
               value: function and(word) {
                  this.high &= word.high;
                  this.low &= word.low;
               },
            },
            {
               key: "xor",
               value: function xor(word) {
                  this.high ^= word.high;
                  this.low ^= word.low;
               },
            },
            {
               key: "or",
               value: function or(word) {
                  this.high |= word.high;
                  this.low |= word.low;
               },
            },
            {
               key: "shiftRight",
               value: function shiftRight(places) {
                  if (places >= 32) {
                     this.low = (this.high >>> (places - 32)) | 0;
                     this.high = 0;
                  } else {
                     this.low = (this.low >>> places) | (this.high << (32 - places));
                     this.high = (this.high >>> places) | 0;
                  }
               },
            },
            {
               key: "shiftLeft",
               value: function shiftLeft(places) {
                  if (places >= 32) {
                     this.high = this.low << (places - 32);
                     this.low = 0;
                  } else {
                     this.high = (this.high << places) | (this.low >>> (32 - places));
                     this.low <<= places;
                  }
               },
            },
            {
               key: "rotateRight",
               value: function rotateRight(places) {
                  var low, high;
                  if (places & 32) {
                     high = this.low;
                     low = this.high;
                  } else {
                     low = this.low;
                     high = this.high;
                  }
                  places &= 31;
                  this.low = (low >>> places) | (high << (32 - places));
                  this.high = (high >>> places) | (low << (32 - places));
               },
            },
            {
               key: "not",
               value: function not() {
                  this.high = ~this.high;
                  this.low = ~this.low;
               },
            },
            {
               key: "add",
               value: function add(word) {
                  var lowAdd = (this.low >>> 0) + (word.low >>> 0);
                  var highAdd = (this.high >>> 0) + (word.high >>> 0);
                  if (lowAdd > 0xffffffff) {
                     highAdd += 1;
                  }
                  this.low = lowAdd | 0;
                  this.high = highAdd | 0;
               },
            },
            {
               key: "copyTo",
               value: function copyTo(bytes, offset) {
                  bytes[offset] = (this.high >>> 24) & 0xff;
                  bytes[offset + 1] = (this.high >> 16) & 0xff;
                  bytes[offset + 2] = (this.high >> 8) & 0xff;
                  bytes[offset + 3] = this.high & 0xff;
                  bytes[offset + 4] = (this.low >>> 24) & 0xff;
                  bytes[offset + 5] = (this.low >> 16) & 0xff;
                  bytes[offset + 6] = (this.low >> 8) & 0xff;
                  bytes[offset + 7] = this.low & 0xff;
               },
            },
            {
               key: "assign",
               value: function assign(word) {
                  this.high = word.high;
                  this.low = word.low;
               },
            },
         ]);
      })();
      var calculateSHA256 = (function calculateSHA256Closure() {
         function rotr(x, n) {
            return (x >>> n) | (x << (32 - n));
         }
         function ch(x, y, z) {
            return (x & y) ^ (~x & z);
         }
         function maj(x, y, z) {
            return (x & y) ^ (x & z) ^ (y & z);
         }
         function sigma(x) {
            return rotr(x, 2) ^ rotr(x, 13) ^ rotr(x, 22);
         }
         function sigmaPrime(x) {
            return rotr(x, 6) ^ rotr(x, 11) ^ rotr(x, 25);
         }
         function littleSigma(x) {
            return rotr(x, 7) ^ rotr(x, 18) ^ (x >>> 3);
         }
         function littleSigmaPrime(x) {
            return rotr(x, 17) ^ rotr(x, 19) ^ (x >>> 10);
         }
         var k = [
            0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1,
            0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
            0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174, 0xe49b69c1, 0xefbe4786,
            0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
            0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
            0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
            0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85, 0xa2bfe8a1, 0xa81a664b,
            0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
            0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a,
            0x5b9cca4f, 0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
            0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2,
         ];
         function hash(data, offset, length) {
            var h0 = 0x6a09e667,
               h1 = 0xbb67ae85,
               h2 = 0x3c6ef372,
               h3 = 0xa54ff53a,
               h4 = 0x510e527f,
               h5 = 0x9b05688c,
               h6 = 0x1f83d9ab,
               h7 = 0x5be0cd19;
            var paddedLength = Math.ceil((length + 9) / 64) * 64;
            var padded = new Uint8Array(paddedLength);
            var i, j;
            for (i = 0; i < length; ++i) {
               padded[i] = data[offset++];
            }
            padded[i++] = 0x80;
            var n = paddedLength - 8;
            while (i < n) {
               padded[i++] = 0;
            }
            padded[i++] = 0;
            padded[i++] = 0;
            padded[i++] = 0;
            padded[i++] = (length >>> 29) & 0xff;
            padded[i++] = (length >> 21) & 0xff;
            padded[i++] = (length >> 13) & 0xff;
            padded[i++] = (length >> 5) & 0xff;
            padded[i++] = (length << 3) & 0xff;
            var w = new Uint32Array(64);
            for (i = 0; i < paddedLength; ) {
               for (j = 0; j < 16; ++j) {
                  w[j] =
                     (padded[i] << 24) |
                     (padded[i + 1] << 16) |
                     (padded[i + 2] << 8) |
                     padded[i + 3];
                  i += 4;
               }
               for (j = 16; j < 64; ++j) {
                  w[j] =
                     (littleSigmaPrime(w[j - 2]) +
                        w[j - 7] +
                        littleSigma(w[j - 15]) +
                        w[j - 16]) |
                     0;
               }
               var a = h0,
                  b = h1,
                  c = h2,
                  d = h3,
                  e = h4,
                  f = h5,
                  g = h6,
                  h = h7,
                  t1 = void 0,
                  t2 = void 0;
               for (j = 0; j < 64; ++j) {
                  t1 = h + sigmaPrime(e) + ch(e, f, g) + k[j] + w[j];
                  t2 = sigma(a) + maj(a, b, c);
                  h = g;
                  g = f;
                  f = e;
                  e = (d + t1) | 0;
                  d = c;
                  c = b;
                  b = a;
                  a = (t1 + t2) | 0;
               }
               h0 = (h0 + a) | 0;
               h1 = (h1 + b) | 0;
               h2 = (h2 + c) | 0;
               h3 = (h3 + d) | 0;
               h4 = (h4 + e) | 0;
               h5 = (h5 + f) | 0;
               h6 = (h6 + g) | 0;
               h7 = (h7 + h) | 0;
            }
            return new Uint8Array([
               (h0 >> 24) & 0xff,
               (h0 >> 16) & 0xff,
               (h0 >> 8) & 0xff,
               h0 & 0xff,
               (h1 >> 24) & 0xff,
               (h1 >> 16) & 0xff,
               (h1 >> 8) & 0xff,
               h1 & 0xff,
               (h2 >> 24) & 0xff,
               (h2 >> 16) & 0xff,
               (h2 >> 8) & 0xff,
               h2 & 0xff,
               (h3 >> 24) & 0xff,
               (h3 >> 16) & 0xff,
               (h3 >> 8) & 0xff,
               h3 & 0xff,
               (h4 >> 24) & 0xff,
               (h4 >> 16) & 0xff,
               (h4 >> 8) & 0xff,
               h4 & 0xff,
               (h5 >> 24) & 0xff,
               (h5 >> 16) & 0xff,
               (h5 >> 8) & 0xff,
               h5 & 0xff,
               (h6 >> 24) & 0xff,
               (h6 >> 16) & 0xff,
               (h6 >> 8) & 0xff,
               h6 & 0xff,
               (h7 >> 24) & 0xff,
               (h7 >> 16) & 0xff,
               (h7 >> 8) & 0xff,
               h7 & 0xff,
            ]);
         }
         return hash;
      })();
      var calculateSHA512 = (function calculateSHA512Closure() {
         function ch(result, x, y, z, tmp) {
            result.assign(x);
            result.and(y);
            tmp.assign(x);
            tmp.not();
            tmp.and(z);
            result.xor(tmp);
         }
         function maj(result, x, y, z, tmp) {
            result.assign(x);
            result.and(y);
            tmp.assign(x);
            tmp.and(z);
            result.xor(tmp);
            tmp.assign(y);
            tmp.and(z);
            result.xor(tmp);
         }
         function sigma(result, x, tmp) {
            result.assign(x);
            result.rotateRight(28);
            tmp.assign(x);
            tmp.rotateRight(34);
            result.xor(tmp);
            tmp.assign(x);
            tmp.rotateRight(39);
            result.xor(tmp);
         }
         function sigmaPrime(result, x, tmp) {
            result.assign(x);
            result.rotateRight(14);
            tmp.assign(x);
            tmp.rotateRight(18);
            result.xor(tmp);
            tmp.assign(x);
            tmp.rotateRight(41);
            result.xor(tmp);
         }
         function littleSigma(result, x, tmp) {
            result.assign(x);
            result.rotateRight(1);
            tmp.assign(x);
            tmp.rotateRight(8);
            result.xor(tmp);
            tmp.assign(x);
            tmp.shiftRight(7);
            result.xor(tmp);
         }
         function littleSigmaPrime(result, x, tmp) {
            result.assign(x);
            result.rotateRight(19);
            tmp.assign(x);
            tmp.rotateRight(61);
            result.xor(tmp);
            tmp.assign(x);
            tmp.shiftRight(6);
            result.xor(tmp);
         }
         var k = [
            new Word64(0x428a2f98, 0xd728ae22),
            new Word64(0x71374491, 0x23ef65cd),
            new Word64(0xb5c0fbcf, 0xec4d3b2f),
            new Word64(0xe9b5dba5, 0x8189dbbc),
            new Word64(0x3956c25b, 0xf348b538),
            new Word64(0x59f111f1, 0xb605d019),
            new Word64(0x923f82a4, 0xaf194f9b),
            new Word64(0xab1c5ed5, 0xda6d8118),
            new Word64(0xd807aa98, 0xa3030242),
            new Word64(0x12835b01, 0x45706fbe),
            new Word64(0x243185be, 0x4ee4b28c),
            new Word64(0x550c7dc3, 0xd5ffb4e2),
            new Word64(0x72be5d74, 0xf27b896f),
            new Word64(0x80deb1fe, 0x3b1696b1),
            new Word64(0x9bdc06a7, 0x25c71235),
            new Word64(0xc19bf174, 0xcf692694),
            new Word64(0xe49b69c1, 0x9ef14ad2),
            new Word64(0xefbe4786, 0x384f25e3),
            new Word64(0x0fc19dc6, 0x8b8cd5b5),
            new Word64(0x240ca1cc, 0x77ac9c65),
            new Word64(0x2de92c6f, 0x592b0275),
            new Word64(0x4a7484aa, 0x6ea6e483),
            new Word64(0x5cb0a9dc, 0xbd41fbd4),
            new Word64(0x76f988da, 0x831153b5),
            new Word64(0x983e5152, 0xee66dfab),
            new Word64(0xa831c66d, 0x2db43210),
            new Word64(0xb00327c8, 0x98fb213f),
            new Word64(0xbf597fc7, 0xbeef0ee4),
            new Word64(0xc6e00bf3, 0x3da88fc2),
            new Word64(0xd5a79147, 0x930aa725),
            new Word64(0x06ca6351, 0xe003826f),
            new Word64(0x14292967, 0x0a0e6e70),
            new Word64(0x27b70a85, 0x46d22ffc),
            new Word64(0x2e1b2138, 0x5c26c926),
            new Word64(0x4d2c6dfc, 0x5ac42aed),
            new Word64(0x53380d13, 0x9d95b3df),
            new Word64(0x650a7354, 0x8baf63de),
            new Word64(0x766a0abb, 0x3c77b2a8),
            new Word64(0x81c2c92e, 0x47edaee6),
            new Word64(0x92722c85, 0x1482353b),
            new Word64(0xa2bfe8a1, 0x4cf10364),
            new Word64(0xa81a664b, 0xbc423001),
            new Word64(0xc24b8b70, 0xd0f89791),
            new Word64(0xc76c51a3, 0x0654be30),
            new Word64(0xd192e819, 0xd6ef5218),
            new Word64(0xd6990624, 0x5565a910),
            new Word64(0xf40e3585, 0x5771202a),
            new Word64(0x106aa070, 0x32bbd1b8),
            new Word64(0x19a4c116, 0xb8d2d0c8),
            new Word64(0x1e376c08, 0x5141ab53),
            new Word64(0x2748774c, 0xdf8eeb99),
            new Word64(0x34b0bcb5, 0xe19b48a8),
            new Word64(0x391c0cb3, 0xc5c95a63),
            new Word64(0x4ed8aa4a, 0xe3418acb),
            new Word64(0x5b9cca4f, 0x7763e373),
            new Word64(0x682e6ff3, 0xd6b2b8a3),
            new Word64(0x748f82ee, 0x5defb2fc),
            new Word64(0x78a5636f, 0x43172f60),
            new Word64(0x84c87814, 0xa1f0ab72),
            new Word64(0x8cc70208, 0x1a6439ec),
            new Word64(0x90befffa, 0x23631e28),
            new Word64(0xa4506ceb, 0xde82bde9),
            new Word64(0xbef9a3f7, 0xb2c67915),
            new Word64(0xc67178f2, 0xe372532b),
            new Word64(0xca273ece, 0xea26619c),
            new Word64(0xd186b8c7, 0x21c0c207),
            new Word64(0xeada7dd6, 0xcde0eb1e),
            new Word64(0xf57d4f7f, 0xee6ed178),
            new Word64(0x06f067aa, 0x72176fba),
            new Word64(0x0a637dc5, 0xa2c898a6),
            new Word64(0x113f9804, 0xbef90dae),
            new Word64(0x1b710b35, 0x131c471b),
            new Word64(0x28db77f5, 0x23047d84),
            new Word64(0x32caab7b, 0x40c72493),
            new Word64(0x3c9ebe0a, 0x15c9bebc),
            new Word64(0x431d67c4, 0x9c100d4c),
            new Word64(0x4cc5d4be, 0xcb3e42b6),
            new Word64(0x597f299c, 0xfc657e2a),
            new Word64(0x5fcb6fab, 0x3ad6faec),
            new Word64(0x6c44198c, 0x4a475817),
         ];
         function hash(data, offset, length) {
            var mode384 =
               arguments.length > 3 && arguments[3] !== undefined
                  ? arguments[3]
                  : false;
            var h0, h1, h2, h3, h4, h5, h6, h7;
            if (!mode384) {
               h0 = new Word64(0x6a09e667, 0xf3bcc908);
               h1 = new Word64(0xbb67ae85, 0x84caa73b);
               h2 = new Word64(0x3c6ef372, 0xfe94f82b);
               h3 = new Word64(0xa54ff53a, 0x5f1d36f1);
               h4 = new Word64(0x510e527f, 0xade682d1);
               h5 = new Word64(0x9b05688c, 0x2b3e6c1f);
               h6 = new Word64(0x1f83d9ab, 0xfb41bd6b);
               h7 = new Word64(0x5be0cd19, 0x137e2179);
            } else {
               h0 = new Word64(0xcbbb9d5d, 0xc1059ed8);
               h1 = new Word64(0x629a292a, 0x367cd507);
               h2 = new Word64(0x9159015a, 0x3070dd17);
               h3 = new Word64(0x152fecd8, 0xf70e5939);
               h4 = new Word64(0x67332667, 0xffc00b31);
               h5 = new Word64(0x8eb44a87, 0x68581511);
               h6 = new Word64(0xdb0c2e0d, 0x64f98fa7);
               h7 = new Word64(0x47b5481d, 0xbefa4fa4);
            }
            var paddedLength = Math.ceil((length + 17) / 128) * 128;
            var padded = new Uint8Array(paddedLength);
            var i, j;
            for (i = 0; i < length; ++i) {
               padded[i] = data[offset++];
            }
            padded[i++] = 0x80;
            var n = paddedLength - 16;
            while (i < n) {
               padded[i++] = 0;
            }
            padded[i++] = 0;
            padded[i++] = 0;
            padded[i++] = 0;
            padded[i++] = 0;
            padded[i++] = 0;
            padded[i++] = 0;
            padded[i++] = 0;
            padded[i++] = 0;
            padded[i++] = 0;
            padded[i++] = 0;
            padded[i++] = 0;
            padded[i++] = (length >>> 29) & 0xff;
            padded[i++] = (length >> 21) & 0xff;
            padded[i++] = (length >> 13) & 0xff;
            padded[i++] = (length >> 5) & 0xff;
            padded[i++] = (length << 3) & 0xff;
            var w = new Array(80);
            for (i = 0; i < 80; i++) {
               w[i] = new Word64(0, 0);
            }
            var a = new Word64(0, 0),
               b = new Word64(0, 0),
               c = new Word64(0, 0);
            var d = new Word64(0, 0),
               e = new Word64(0, 0),
               f = new Word64(0, 0);
            var g = new Word64(0, 0),
               h = new Word64(0, 0);
            var t1 = new Word64(0, 0),
               t2 = new Word64(0, 0);
            var tmp1 = new Word64(0, 0),
               tmp2 = new Word64(0, 0);
            var tmp3;
            for (i = 0; i < paddedLength; ) {
               for (j = 0; j < 16; ++j) {
                  w[j].high =
                     (padded[i] << 24) |
                     (padded[i + 1] << 16) |
                     (padded[i + 2] << 8) |
                     padded[i + 3];
                  w[j].low =
                     (padded[i + 4] << 24) |
                     (padded[i + 5] << 16) |
                     (padded[i + 6] << 8) |
                     padded[i + 7];
                  i += 8;
               }
               for (j = 16; j < 80; ++j) {
                  tmp3 = w[j];
                  littleSigmaPrime(tmp3, w[j - 2], tmp2);
                  tmp3.add(w[j - 7]);
                  littleSigma(tmp1, w[j - 15], tmp2);
                  tmp3.add(tmp1);
                  tmp3.add(w[j - 16]);
               }
               a.assign(h0);
               b.assign(h1);
               c.assign(h2);
               d.assign(h3);
               e.assign(h4);
               f.assign(h5);
               g.assign(h6);
               h.assign(h7);
               for (j = 0; j < 80; ++j) {
                  t1.assign(h);
                  sigmaPrime(tmp1, e, tmp2);
                  t1.add(tmp1);
                  ch(tmp1, e, f, g, tmp2);
                  t1.add(tmp1);
                  t1.add(k[j]);
                  t1.add(w[j]);
                  sigma(t2, a, tmp2);
                  maj(tmp1, a, b, c, tmp2);
                  t2.add(tmp1);
                  tmp3 = h;
                  h = g;
                  g = f;
                  f = e;
                  d.add(t1);
                  e = d;
                  d = c;
                  c = b;
                  b = a;
                  tmp3.assign(t1);
                  tmp3.add(t2);
                  a = tmp3;
               }
               h0.add(a);
               h1.add(b);
               h2.add(c);
               h3.add(d);
               h4.add(e);
               h5.add(f);
               h6.add(g);
               h7.add(h);
            }
            var result;
            if (!mode384) {
               result = new Uint8Array(64);
               h0.copyTo(result, 0);
               h1.copyTo(result, 8);
               h2.copyTo(result, 16);
               h3.copyTo(result, 24);
               h4.copyTo(result, 32);
               h5.copyTo(result, 40);
               h6.copyTo(result, 48);
               h7.copyTo(result, 56);
            } else {
               result = new Uint8Array(48);
               h0.copyTo(result, 0);
               h1.copyTo(result, 8);
               h2.copyTo(result, 16);
               h3.copyTo(result, 24);
               h4.copyTo(result, 32);
               h5.copyTo(result, 40);
            }
            return result;
         }
         return hash;
      })();
      function calculateSHA384(data, offset, length) {
         return calculateSHA512(data, offset, length, true);
      }
      var NullCipher = /*#__PURE__*/ (function () {
         function NullCipher() {
            _classCallCheck(this, NullCipher);
         }
         return _createClass(NullCipher, [
            {
               key: "decryptBlock",
               value: function decryptBlock(data) {
                  return data;
               },
            },
            {
               key: "encrypt",
               value: function encrypt(data) {
                  return data;
               },
            },
         ]);
      })();
      var AESBaseCipher = /*#__PURE__*/ (function () {
         function AESBaseCipher() {
            _classCallCheck(this, AESBaseCipher);
            if (this.constructor === AESBaseCipher) {
               unreachable("Cannot initialize AESBaseCipher.");
            }
            this._s = new Uint8Array([
               0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67,
               0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59,
               0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7,
               0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1,
               0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05,
               0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83,
               0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29,
               0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
               0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa,
               0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c,
               0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc,
               0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
               0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19,
               0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee,
               0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49,
               0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
               0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4,
               0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6,
               0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70,
               0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9,
               0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e,
               0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1,
               0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0,
               0x54, 0xbb, 0x16,
            ]);
            this._inv_s = new Uint8Array([
               0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3,
               0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f,
               0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54,
               0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b,
               0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24,
               0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8,
               0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d,
               0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda,
               0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab,
               0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3,
               0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1,
               0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41,
               0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6,
               0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9,
               0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d,
               0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
               0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0,
               0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07,
               0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60,
               0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f,
               0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5,
               0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b,
               0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55,
               0x21, 0x0c, 0x7d,
            ]);
            this._mix = new Uint32Array([
               0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c,
               0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553,
               0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662,
               0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad,
               0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8,
               0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf,
               0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d,
               0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a,
               0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f,
               0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0,
               0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1,
               0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e,
               0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6,
               0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1,
               0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8,
               0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f,
               0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a,
               0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815,
               0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24,
               0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190,
               0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5,
               0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2,
               0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b,
               0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c,
               0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49,
               0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc,
               0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd,
               0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2,
               0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47,
               0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360,
               0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809,
               0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e,
               0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0,
               0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df,
               0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee,
               0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621,
               0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964,
               0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043,
               0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17,
               0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430,
               0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75,
               0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba,
               0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b,
               0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4,
               0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a,
               0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d,
               0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34,
               0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713,
               0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6,
               0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999,
               0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8,
               0x8d4697a3,
            ]);
            this._mixCol = new Uint8Array(256);
            for (var i = 0; i < 256; i++) {
               this._mixCol[i] = i < 128 ? i << 1 : (i << 1) ^ 0x1b;
            }
            this.buffer = new Uint8Array(16);
            this.bufferPosition = 0;
         }
         return _createClass(AESBaseCipher, [
            {
               key: "_expandKey",
               value: function _expandKey(cipherKey) {
                  unreachable("Cannot call `_expandKey` on the base class");
               },
            },
            {
               key: "_decrypt",
               value: function _decrypt(input, key) {
                  var t, u, v;
                  var state = new Uint8Array(16);
                  state.set(input);
                  for (var j = 0, k = this._keySize; j < 16; ++j, ++k) {
                     state[j] ^= key[k];
                  }
                  for (var i = this._cyclesOfRepetition - 1; i >= 1; --i) {
                     t = state[13];
                     state[13] = state[9];
                     state[9] = state[5];
                     state[5] = state[1];
                     state[1] = t;
                     t = state[14];
                     u = state[10];
                     state[14] = state[6];
                     state[10] = state[2];
                     state[6] = t;
                     state[2] = u;
                     t = state[15];
                     u = state[11];
                     v = state[7];
                     state[15] = state[3];
                     state[11] = t;
                     state[7] = u;
                     state[3] = v;
                     for (var _j8 = 0; _j8 < 16; ++_j8) {
                        state[_j8] = this._inv_s[state[_j8]];
                     }
                     for (var _j9 = 0, _k2 = i * 16; _j9 < 16; ++_j9, ++_k2) {
                        state[_j9] ^= key[_k2];
                     }
                     for (var _j0 = 0; _j0 < 16; _j0 += 4) {
                        var s0 = this._mix[state[_j0]];
                        var s1 = this._mix[state[_j0 + 1]];
                        var s2 = this._mix[state[_j0 + 2]];
                        var s3 = this._mix[state[_j0 + 3]];
                        t =
                           s0 ^
                           (s1 >>> 8) ^
                           (s1 << 24) ^
                           (s2 >>> 16) ^
                           (s2 << 16) ^
                           (s3 >>> 24) ^
                           (s3 << 8);
                        state[_j0] = (t >>> 24) & 0xff;
                        state[_j0 + 1] = (t >> 16) & 0xff;
                        state[_j0 + 2] = (t >> 8) & 0xff;
                        state[_j0 + 3] = t & 0xff;
                     }
                  }
                  t = state[13];
                  state[13] = state[9];
                  state[9] = state[5];
                  state[5] = state[1];
                  state[1] = t;
                  t = state[14];
                  u = state[10];
                  state[14] = state[6];
                  state[10] = state[2];
                  state[6] = t;
                  state[2] = u;
                  t = state[15];
                  u = state[11];
                  v = state[7];
                  state[15] = state[3];
                  state[11] = t;
                  state[7] = u;
                  state[3] = v;
                  for (var _j1 = 0; _j1 < 16; ++_j1) {
                     state[_j1] = this._inv_s[state[_j1]];
                     state[_j1] ^= key[_j1];
                  }
                  return state;
               },
            },
            {
               key: "_encrypt",
               value: function _encrypt(input, key) {
                  var s = this._s;
                  var t, u, v;
                  var state = new Uint8Array(16);
                  state.set(input);
                  for (var j = 0; j < 16; ++j) {
                     state[j] ^= key[j];
                  }
                  for (var i = 1; i < this._cyclesOfRepetition; i++) {
                     for (var _j10 = 0; _j10 < 16; ++_j10) {
                        state[_j10] = s[state[_j10]];
                     }
                     v = state[1];
                     state[1] = state[5];
                     state[5] = state[9];
                     state[9] = state[13];
                     state[13] = v;
                     v = state[2];
                     u = state[6];
                     state[2] = state[10];
                     state[6] = state[14];
                     state[10] = v;
                     state[14] = u;
                     v = state[3];
                     u = state[7];
                     t = state[11];
                     state[3] = state[15];
                     state[7] = v;
                     state[11] = u;
                     state[15] = t;
                     for (var _j11 = 0; _j11 < 16; _j11 += 4) {
                        var s0 = state[_j11 + 0];
                        var s1 = state[_j11 + 1];
                        var s2 = state[_j11 + 2];
                        var s3 = state[_j11 + 3];
                        t = s0 ^ s1 ^ s2 ^ s3;
                        state[_j11 + 0] ^= t ^ this._mixCol[s0 ^ s1];
                        state[_j11 + 1] ^= t ^ this._mixCol[s1 ^ s2];
                        state[_j11 + 2] ^= t ^ this._mixCol[s2 ^ s3];
                        state[_j11 + 3] ^= t ^ this._mixCol[s3 ^ s0];
                     }
                     for (var _j12 = 0, k = i * 16; _j12 < 16; ++_j12, ++k) {
                        state[_j12] ^= key[k];
                     }
                  }
                  for (var _j13 = 0; _j13 < 16; ++_j13) {
                     state[_j13] = s[state[_j13]];
                  }
                  v = state[1];
                  state[1] = state[5];
                  state[5] = state[9];
                  state[9] = state[13];
                  state[13] = v;
                  v = state[2];
                  u = state[6];
                  state[2] = state[10];
                  state[6] = state[14];
                  state[10] = v;
                  state[14] = u;
                  v = state[3];
                  u = state[7];
                  t = state[11];
                  state[3] = state[15];
                  state[7] = v;
                  state[11] = u;
                  state[15] = t;
                  for (var _j14 = 0, _k3 = this._keySize; _j14 < 16; ++_j14, ++_k3) {
                     state[_j14] ^= key[_k3];
                  }
                  return state;
               },
            },
            {
               key: "_decryptBlock2",
               value: function _decryptBlock2(data, finalize) {
                  var sourceLength = data.length;
                  var buffer = this.buffer,
                     bufferLength = this.bufferPosition;
                  var result = [];
                  var iv = this.iv;
                  for (var i = 0; i < sourceLength; ++i) {
                     buffer[bufferLength] = data[i];
                     ++bufferLength;
                     if (bufferLength < 16) {
                        continue;
                     }
                     var plain = this._decrypt(buffer, this._key);
                     for (var j = 0; j < 16; ++j) {
                        plain[j] ^= iv[j];
                     }
                     iv = buffer;
                     result.push(plain);
                     buffer = new Uint8Array(16);
                     bufferLength = 0;
                  }
                  this.buffer = buffer;
                  this.bufferLength = bufferLength;
                  this.iv = iv;
                  if (result.length === 0) {
                     return new Uint8Array(0);
                  }
                  var outputLength = 16 * result.length;
                  if (finalize) {
                     var lastBlock = result.at(-1);
                     var psLen = lastBlock[15];
                     if (psLen <= 16) {
                        for (var _i47 = 15, ii = 16 - psLen; _i47 >= ii; --_i47) {
                           if (lastBlock[_i47] !== psLen) {
                              psLen = 0;
                              break;
                           }
                        }
                        outputLength -= psLen;
                        result[result.length - 1] = lastBlock.subarray(0, 16 - psLen);
                     }
                  }
                  var output = new Uint8Array(outputLength);
                  for (
                     var _i48 = 0, _j15 = 0, _ii10 = result.length;
                     _i48 < _ii10;
                     ++_i48, _j15 += 16
                  ) {
                     output.set(result[_i48], _j15);
                  }
                  return output;
               },
            },
            {
               key: "decryptBlock",
               value: function decryptBlock(data, finalize) {
                  var iv =
                     arguments.length > 2 && arguments[2] !== undefined
                        ? arguments[2]
                        : null;
                  var sourceLength = data.length;
                  var buffer = this.buffer;
                  var bufferLength = this.bufferPosition;
                  if (iv) {
                     this.iv = iv;
                  } else {
                     for (
                        var i = 0;
                        bufferLength < 16 && i < sourceLength;
                        ++i, ++bufferLength
                     ) {
                        buffer[bufferLength] = data[i];
                     }
                     if (bufferLength < 16) {
                        this.bufferLength = bufferLength;
                        return new Uint8Array(0);
                     }
                     this.iv = buffer;
                     data = data.subarray(16);
                  }
                  this.buffer = new Uint8Array(16);
                  this.bufferLength = 0;
                  this.decryptBlock = this._decryptBlock2;
                  return this.decryptBlock(data, finalize);
               },
            },
            {
               key: "encrypt",
               value: function encrypt(data, iv) {
                  var sourceLength = data.length;
                  var buffer = this.buffer,
                     bufferLength = this.bufferPosition;
                  var result = [];
                  if (!iv) {
                     iv = new Uint8Array(16);
                  }
                  for (var i = 0; i < sourceLength; ++i) {
                     buffer[bufferLength] = data[i];
                     ++bufferLength;
                     if (bufferLength < 16) {
                        continue;
                     }
                     for (var j = 0; j < 16; ++j) {
                        buffer[j] ^= iv[j];
                     }
                     var cipher = this._encrypt(buffer, this._key);
                     iv = cipher;
                     result.push(cipher);
                     buffer = new Uint8Array(16);
                     bufferLength = 0;
                  }
                  this.buffer = buffer;
                  this.bufferLength = bufferLength;
                  this.iv = iv;
                  if (result.length === 0) {
                     return new Uint8Array(0);
                  }
                  var outputLength = 16 * result.length;
                  var output = new Uint8Array(outputLength);
                  for (
                     var _i49 = 0, _j16 = 0, ii = result.length;
                     _i49 < ii;
                     ++_i49, _j16 += 16
                  ) {
                     output.set(result[_i49], _j16);
                  }
                  return output;
               },
            },
         ]);
      })();
      var AES128Cipher = /*#__PURE__*/ (function (_AESBaseCipher) {
         function AES128Cipher(key) {
            var _this55;
            _classCallCheck(this, AES128Cipher);
            _this55 = _callSuper(this, AES128Cipher);
            _this55._cyclesOfRepetition = 10;
            _this55._keySize = 160;
            _this55._rcon = new Uint8Array([
               0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36,
               0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97,
               0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72,
               0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66,
               0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
               0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d,
               0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
               0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61,
               0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
               0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40,
               0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc,
               0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5,
               0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a,
               0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d,
               0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c,
               0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
               0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4,
               0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
               0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08,
               0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
               0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d,
               0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2,
               0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74,
               0xe8, 0xcb, 0x8d,
            ]);
            _this55._key = _this55._expandKey(key);
            return _this55;
         }
         _inherits(AES128Cipher, _AESBaseCipher);
         return _createClass(AES128Cipher, [
            {
               key: "_expandKey",
               value: function _expandKey(cipherKey) {
                  var b = 176;
                  var s = this._s;
                  var rcon = this._rcon;
                  var result = new Uint8Array(b);
                  result.set(cipherKey);
                  for (var j = 16, i = 1; j < b; ++i) {
                     var t1 = result[j - 3];
                     var t2 = result[j - 2];
                     var t3 = result[j - 1];
                     var t4 = result[j - 4];
                     t1 = s[t1];
                     t2 = s[t2];
                     t3 = s[t3];
                     t4 = s[t4];
                     t1 ^= rcon[i];
                     for (var n = 0; n < 4; ++n) {
                        result[j] = t1 ^= result[j - 16];
                        j++;
                        result[j] = t2 ^= result[j - 16];
                        j++;
                        result[j] = t3 ^= result[j - 16];
                        j++;
                        result[j] = t4 ^= result[j - 16];
                        j++;
                     }
                  }
                  return result;
               },
            },
         ]);
      })(AESBaseCipher);
      var AES256Cipher = /*#__PURE__*/ (function (_AESBaseCipher2) {
         function AES256Cipher(key) {
            var _this56;
            _classCallCheck(this, AES256Cipher);
            _this56 = _callSuper(this, AES256Cipher);
            _this56._cyclesOfRepetition = 14;
            _this56._keySize = 224;
            _this56._key = _this56._expandKey(key);
            return _this56;
         }
         _inherits(AES256Cipher, _AESBaseCipher2);
         return _createClass(AES256Cipher, [
            {
               key: "_expandKey",
               value: function _expandKey(cipherKey) {
                  var b = 240;
                  var s = this._s;
                  var result = new Uint8Array(b);
                  result.set(cipherKey);
                  var r = 1;
                  var t1, t2, t3, t4;
                  for (var j = 32, i = 1; j < b; ++i) {
                     if (j % 32 === 16) {
                        t1 = s[t1];
                        t2 = s[t2];
                        t3 = s[t3];
                        t4 = s[t4];
                     } else if (j % 32 === 0) {
                        t1 = result[j - 3];
                        t2 = result[j - 2];
                        t3 = result[j - 1];
                        t4 = result[j - 4];
                        t1 = s[t1];
                        t2 = s[t2];
                        t3 = s[t3];
                        t4 = s[t4];
                        t1 ^= r;
                        if ((r <<= 1) >= 256) {
                           r = (r ^ 0x1b) & 0xff;
                        }
                     }
                     for (var n = 0; n < 4; ++n) {
                        result[j] = t1 ^= result[j - 32];
                        j++;
                        result[j] = t2 ^= result[j - 32];
                        j++;
                        result[j] = t3 ^= result[j - 32];
                        j++;
                        result[j] = t4 ^= result[j - 32];
                        j++;
                     }
                  }
                  return result;
               },
            },
         ]);
      })(AESBaseCipher);
      var PDF17 = /*#__PURE__*/ (function () {
         function PDF17() {
            _classCallCheck(this, PDF17);
         }
         return _createClass(PDF17, [
            {
               key: "checkOwnerPassword",
               value: function checkOwnerPassword(
                  password,
                  ownerValidationSalt,
                  userBytes,
                  ownerPassword,
               ) {
                  var hashData = new Uint8Array(password.length + 56);
                  hashData.set(password, 0);
                  hashData.set(ownerValidationSalt, password.length);
                  hashData.set(
                     userBytes,
                     password.length + ownerValidationSalt.length,
                  );
                  var result = calculateSHA256(hashData, 0, hashData.length);
                  return isArrayEqual(result, ownerPassword);
               },
            },
            {
               key: "checkUserPassword",
               value: function checkUserPassword(
                  password,
                  userValidationSalt,
                  userPassword,
               ) {
                  var hashData = new Uint8Array(password.length + 8);
                  hashData.set(password, 0);
                  hashData.set(userValidationSalt, password.length);
                  var result = calculateSHA256(hashData, 0, hashData.length);
                  return isArrayEqual(result, userPassword);
               },
            },
            {
               key: "getOwnerKey",
               value: function getOwnerKey(
                  password,
                  ownerKeySalt,
                  userBytes,
                  ownerEncryption,
               ) {
                  var hashData = new Uint8Array(password.length + 56);
                  hashData.set(password, 0);
                  hashData.set(ownerKeySalt, password.length);
                  hashData.set(userBytes, password.length + ownerKeySalt.length);
                  var key = calculateSHA256(hashData, 0, hashData.length);
                  var cipher = new AES256Cipher(key);
                  return cipher.decryptBlock(
                     ownerEncryption,
                     false,
                     new Uint8Array(16),
                  );
               },
            },
            {
               key: "getUserKey",
               value: function getUserKey(password, userKeySalt, userEncryption) {
                  var hashData = new Uint8Array(password.length + 8);
                  hashData.set(password, 0);
                  hashData.set(userKeySalt, password.length);
                  var key = calculateSHA256(hashData, 0, hashData.length);
                  var cipher = new AES256Cipher(key);
                  return cipher.decryptBlock(
                     userEncryption,
                     false,
                     new Uint8Array(16),
                  );
               },
            },
         ]);
      })();
      var PDF20 = /*#__PURE__*/ (function () {
         function PDF20() {
            _classCallCheck(this, PDF20);
         }
         return _createClass(PDF20, [
            {
               key: "_hash",
               value: function _hash(password, input, userBytes) {
                  var k = calculateSHA256(input, 0, input.length).subarray(0, 32);
                  var e = [0];
                  var i = 0;
                  while (i < 64 || e.at(-1) > i - 32) {
                     var combinedLength =
                           password.length + k.length + userBytes.length,
                        combinedArray = new Uint8Array(combinedLength);
                     var writeOffset = 0;
                     combinedArray.set(password, writeOffset);
                     writeOffset += password.length;
                     combinedArray.set(k, writeOffset);
                     writeOffset += k.length;
                     combinedArray.set(userBytes, writeOffset);
                     var k1 = new Uint8Array(combinedLength * 64);
                     for (var j = 0, pos = 0; j < 64; j++, pos += combinedLength) {
                        k1.set(combinedArray, pos);
                     }
                     var cipher = new AES128Cipher(k.subarray(0, 16));
                     e = cipher.encrypt(k1, k.subarray(16, 32));
                     var remainder =
                        e.slice(0, 16).reduce(function (a, b) {
                           return a + b;
                        }, 0) % 3;
                     if (remainder === 0) {
                        k = calculateSHA256(e, 0, e.length);
                     } else if (remainder === 1) {
                        k = calculateSHA384(e, 0, e.length);
                     } else if (remainder === 2) {
                        k = calculateSHA512(e, 0, e.length);
                     }
                     i++;
                  }
                  return k.subarray(0, 32);
               },
            },
            {
               key: "checkOwnerPassword",
               value: function checkOwnerPassword(
                  password,
                  ownerValidationSalt,
                  userBytes,
                  ownerPassword,
               ) {
                  var hashData = new Uint8Array(password.length + 56);
                  hashData.set(password, 0);
                  hashData.set(ownerValidationSalt, password.length);
                  hashData.set(
                     userBytes,
                     password.length + ownerValidationSalt.length,
                  );
                  var result = this._hash(password, hashData, userBytes);
                  return isArrayEqual(result, ownerPassword);
               },
            },
            {
               key: "checkUserPassword",
               value: function checkUserPassword(
                  password,
                  userValidationSalt,
                  userPassword,
               ) {
                  var hashData = new Uint8Array(password.length + 8);
                  hashData.set(password, 0);
                  hashData.set(userValidationSalt, password.length);
                  var result = this._hash(password, hashData, []);
                  return isArrayEqual(result, userPassword);
               },
            },
            {
               key: "getOwnerKey",
               value: function getOwnerKey(
                  password,
                  ownerKeySalt,
                  userBytes,
                  ownerEncryption,
               ) {
                  var hashData = new Uint8Array(password.length + 56);
                  hashData.set(password, 0);
                  hashData.set(ownerKeySalt, password.length);
                  hashData.set(userBytes, password.length + ownerKeySalt.length);
                  var key = this._hash(password, hashData, userBytes);
                  var cipher = new AES256Cipher(key);
                  return cipher.decryptBlock(
                     ownerEncryption,
                     false,
                     new Uint8Array(16),
                  );
               },
            },
            {
               key: "getUserKey",
               value: function getUserKey(password, userKeySalt, userEncryption) {
                  var hashData = new Uint8Array(password.length + 8);
                  hashData.set(password, 0);
                  hashData.set(userKeySalt, password.length);
                  var key = this._hash(password, hashData, []);
                  var cipher = new AES256Cipher(key);
                  return cipher.decryptBlock(
                     userEncryption,
                     false,
                     new Uint8Array(16),
                  );
               },
            },
         ]);
      })();
      var CipherTransform = /*#__PURE__*/ (function () {
         function CipherTransform(
            stringCipherConstructor,
            streamCipherConstructor,
         ) {
            _classCallCheck(this, CipherTransform);
            this.StringCipherConstructor = stringCipherConstructor;
            this.StreamCipherConstructor = streamCipherConstructor;
         }
         return _createClass(CipherTransform, [
            {
               key: "createStream",
               value: function createStream(stream, length) {
                  var cipher = new this.StreamCipherConstructor();
                  return new DecryptStream(
                     stream,
                     length,
                     function cipherTransformDecryptStream(data, finalize) {
                        return cipher.decryptBlock(data, finalize);
                     },
                  );
               },
            },
            {
               key: "decryptString",
               value: function decryptString(s) {
                  var cipher = new this.StringCipherConstructor();
                  var data = stringToBytes(s);
                  data = cipher.decryptBlock(data, true);
                  return bytesToString(data);
               },
            },
            {
               key: "encryptString",
               value: function encryptString(s) {
                  var cipher = new this.StringCipherConstructor();
                  if (cipher instanceof AESBaseCipher) {
                     var strLen = s.length;
                     var pad = 16 - (strLen % 16);
                     s += String.fromCharCode(pad).repeat(pad);
                     var iv = new Uint8Array(16);
                     if (typeof crypto !== "undefined") {
                        crypto.getRandomValues(iv);
                     } else {
                        for (var i = 0; i < 16; i++) {
                           iv[i] = Math.floor(256 * Math.random());
                        }
                     }
                     var _data2 = stringToBytes(s);
                     _data2 = cipher.encrypt(_data2, iv);
                     var buf = new Uint8Array(16 + _data2.length);
                     buf.set(iv);
                     buf.set(_data2, 16);
                     return bytesToString(buf);
                  }
                  var data = stringToBytes(s);
                  data = cipher.encrypt(data);
                  return bytesToString(data);
               },
            },
         ]);
      })();
      var _CipherTransformFactory_brand = /*#__PURE__*/ new WeakSet();
      var CipherTransformFactory = /*#__PURE__*/ (function () {
         function CipherTransformFactory(dict, _fileId, _password) {
            _classCallCheck(this, CipherTransformFactory);
            _classPrivateMethodInitSpec(this, _CipherTransformFactory_brand);
            var filter = dict.get("Filter");
            if (!isName(filter, "Standard")) {
               throw new FormatError("unknown encryption method");
            }
            this.filterName = filter.name;
            this.dict = dict;
            var algorithm = dict.get("V");
            if (
               !Number.isInteger(algorithm) ||
               (algorithm !== 1 &&
                  algorithm !== 2 &&
                  algorithm !== 4 &&
                  algorithm !== 5)
            ) {
               throw new FormatError("unsupported encryption algorithm");
            }
            this.algorithm = algorithm;
            var _keyLength = dict.get("Length");
            if (!_keyLength) {
               if (algorithm <= 3) {
                  _keyLength = 40;
               } else {
                  var cfDict = dict.get("CF");
                  var streamCryptoName = dict.get("StmF");
                  if (cfDict instanceof Dict && streamCryptoName instanceof Name) {
                     cfDict.suppressEncryption = true;
                     var handlerDict = cfDict.get(streamCryptoName.name);
                     _keyLength =
                        (handlerDict === null || handlerDict === void 0
                           ? void 0
                           : handlerDict.get("Length")) || 128;
                     if (_keyLength < 40) {
                        _keyLength <<= 3;
                     }
                  }
               }
            }
            if (
               !Number.isInteger(_keyLength) ||
               _keyLength < 40 ||
               _keyLength % 8 !== 0
            ) {
               throw new FormatError("invalid key length");
            }
            var ownerBytes = stringToBytes(dict.get("O")),
               userBytes = stringToBytes(dict.get("U"));
            var _ownerPassword = ownerBytes.subarray(0, 32);
            var _userPassword = userBytes.subarray(0, 32);
            var _flags3 = dict.get("P");
            var _revision = dict.get("R");
            var _encryptMetadata =
               (algorithm === 4 || algorithm === 5) &&
               dict.get("EncryptMetadata") !== false;
            this.encryptMetadata = _encryptMetadata;
            var fileIdBytes = stringToBytes(_fileId);
            var passwordBytes;
            if (_password) {
               if (_revision === 6) {
                  try {
                     _password = utf8StringToString(_password);
                  } catch (_unused1) {
                     warn(
                        "CipherTransformFactory: Unable to convert UTF8 encoded password.",
                     );
                  }
               }
               passwordBytes = stringToBytes(_password);
            }
            var _encryptionKey;
            if (algorithm !== 5) {
               _encryptionKey = _assertClassBrand(
                  _CipherTransformFactory_brand,
                  this,
                  _prepareKeyData,
               ).call(
                  this,
                  fileIdBytes,
                  passwordBytes,
                  _ownerPassword,
                  _userPassword,
                  _flags3,
                  _revision,
                  _keyLength,
                  _encryptMetadata,
               );
            } else {
               var ownerValidationSalt = ownerBytes.subarray(32, 40);
               var ownerKeySalt = ownerBytes.subarray(40, 48);
               var uBytes = userBytes.subarray(0, 48);
               var userValidationSalt = userBytes.subarray(32, 40);
               var userKeySalt = userBytes.subarray(40, 48);
               var ownerEncryption = stringToBytes(dict.get("OE"));
               var userEncryption = stringToBytes(dict.get("UE"));
               var perms = stringToBytes(dict.get("Perms"));
               _encryptionKey = _assertClassBrand(
                  _CipherTransformFactory_brand,
                  this,
                  _createEncryptionKey,
               ).call(
                  this,
                  _revision,
                  passwordBytes,
                  _ownerPassword,
                  ownerValidationSalt,
                  ownerKeySalt,
                  uBytes,
                  _userPassword,
                  userValidationSalt,
                  userKeySalt,
                  ownerEncryption,
                  userEncryption,
                  perms,
               );
            }
            if (!_encryptionKey && !_password) {
               throw new PasswordException(
                  "No password given",
                  PasswordResponses.NEED_PASSWORD,
               );
            } else if (!_encryptionKey && _password) {
               var decodedPassword = _assertClassBrand(
                  _CipherTransformFactory_brand,
                  this,
                  _decodeUserPassword,
               ).call(this, passwordBytes, _ownerPassword, _revision, _keyLength);
               _encryptionKey = _assertClassBrand(
                  _CipherTransformFactory_brand,
                  this,
                  _prepareKeyData,
               ).call(
                  this,
                  fileIdBytes,
                  decodedPassword,
                  _ownerPassword,
                  _userPassword,
                  _flags3,
                  _revision,
                  _keyLength,
                  _encryptMetadata,
               );
            }
            if (!_encryptionKey) {
               throw new PasswordException(
                  "Incorrect Password",
                  PasswordResponses.INCORRECT_PASSWORD,
               );
            }
            this.encryptionKey = _encryptionKey;
            if (algorithm >= 4) {
               var cf = dict.get("CF");
               if (cf instanceof Dict) {
                  cf.suppressEncryption = true;
               }
               this.cf = cf;
               this.stmf = dict.get("StmF") || Name.get("Identity");
               this.strf = dict.get("StrF") || Name.get("Identity");
               this.eff = dict.get("EFF") || this.stmf;
            }
         }
         return _createClass(CipherTransformFactory, [
            {
               key: "createCipherTransform",
               value: function createCipherTransform(num, gen) {
                  if (this.algorithm === 4 || this.algorithm === 5) {
                     return new CipherTransform(
                        _assertClassBrand(
                           _CipherTransformFactory_brand,
                           this,
                           _buildCipherConstructor,
                        ).call(this, this.cf, this.strf, num, gen, this.encryptionKey),
                        _assertClassBrand(
                           _CipherTransformFactory_brand,
                           this,
                           _buildCipherConstructor,
                        ).call(this, this.cf, this.stmf, num, gen, this.encryptionKey),
                     );
                  }
                  var key = _assertClassBrand(
                     _CipherTransformFactory_brand,
                     this,
                     _buildObjectKey,
                  ).call(this, num, gen, this.encryptionKey, false);
                  var cipherConstructor = function cipherConstructor() {
                     return new ARCFourCipher(key);
                  };
                  return new CipherTransform(cipherConstructor, cipherConstructor);
               },
            },
         ]);
      })();
      function _createEncryptionKey(
         revision,
         password,
         ownerPassword,
         ownerValidationSalt,
         ownerKeySalt,
         uBytes,
         userPassword,
         userValidationSalt,
         userKeySalt,
         ownerEncryption,
         userEncryption,
         perms,
      ) {
         if (password) {
            var passwordLength = Math.min(127, password.length);
            password = password.subarray(0, passwordLength);
         } else {
            password = [];
         }
         var pdfAlgorithm = revision === 6 ? new PDF20() : new PDF17();
         if (
            pdfAlgorithm.checkUserPassword(
               password,
               userValidationSalt,
               userPassword,
            )
         ) {
            return pdfAlgorithm.getUserKey(password, userKeySalt, userEncryption);
         } else if (
            password.length &&
            pdfAlgorithm.checkOwnerPassword(
               password,
               ownerValidationSalt,
               uBytes,
               ownerPassword,
            )
         ) {
            return pdfAlgorithm.getOwnerKey(
               password,
               ownerKeySalt,
               uBytes,
               ownerEncryption,
            );
         }
         return null;
      }
      function _prepareKeyData(
         fileId,
         password,
         ownerPassword,
         userPassword,
         flags,
         revision,
         keyLength,
         encryptMetadata,
      ) {
         var hashDataSize = 40 + ownerPassword.length + fileId.length;
         var hashData = new Uint8Array(hashDataSize);
         var i = 0,
            j,
            n;
         if (password) {
            n = Math.min(32, password.length);
            for (; i < n; ++i) {
               hashData[i] = password[i];
            }
         }
         j = 0;
         while (i < 32) {
            hashData[i++] = _defaultPasswordBytes._[j++];
         }
         for (j = 0, n = ownerPassword.length; j < n; ++j) {
            hashData[i++] = ownerPassword[j];
         }
         hashData[i++] = flags & 0xff;
         hashData[i++] = (flags >> 8) & 0xff;
         hashData[i++] = (flags >> 16) & 0xff;
         hashData[i++] = (flags >>> 24) & 0xff;
         for (j = 0, n = fileId.length; j < n; ++j) {
            hashData[i++] = fileId[j];
         }
         if (revision >= 4 && !encryptMetadata) {
            hashData[i++] = 0xff;
            hashData[i++] = 0xff;
            hashData[i++] = 0xff;
            hashData[i++] = 0xff;
         }
         var hash = calculateMD5(hashData, 0, i);
         var keyLengthInBytes = keyLength >> 3;
         if (revision >= 3) {
            for (j = 0; j < 50; ++j) {
               hash = calculateMD5(hash, 0, keyLengthInBytes);
            }
         }
         var encryptionKey = hash.subarray(0, keyLengthInBytes);
         var cipher, checkData;
         if (revision >= 3) {
            for (i = 0; i < 32; ++i) {
               hashData[i] = _defaultPasswordBytes._[i];
            }
            for (j = 0, n = fileId.length; j < n; ++j) {
               hashData[i++] = fileId[j];
            }
            cipher = new ARCFourCipher(encryptionKey);
            checkData = cipher.encryptBlock(calculateMD5(hashData, 0, i));
            n = encryptionKey.length;
            var derivedKey = new Uint8Array(n);
            for (j = 1; j <= 19; ++j) {
               for (var k = 0; k < n; ++k) {
                  derivedKey[k] = encryptionKey[k] ^ j;
               }
               cipher = new ARCFourCipher(derivedKey);
               checkData = cipher.encryptBlock(checkData);
            }
            for (j = 0, n = checkData.length; j < n; ++j) {
               if (userPassword[j] !== checkData[j]) {
                  return null;
               }
            }
         } else {
            cipher = new ARCFourCipher(encryptionKey);
            checkData = cipher.encryptBlock(_defaultPasswordBytes._);
            for (j = 0, n = checkData.length; j < n; ++j) {
               if (userPassword[j] !== checkData[j]) {
                  return null;
               }
            }
         }
         return encryptionKey;
      }
      function _decodeUserPassword(password, ownerPassword, revision, keyLength) {
         var hashData = new Uint8Array(32);
         var i = 0;
         var n = Math.min(32, password.length);
         for (; i < n; ++i) {
            hashData[i] = password[i];
         }
         var j = 0;
         while (i < 32) {
            hashData[i++] = _defaultPasswordBytes._[j++];
         }
         var hash = calculateMD5(hashData, 0, i);
         var keyLengthInBytes = keyLength >> 3;
         if (revision >= 3) {
            for (j = 0; j < 50; ++j) {
               hash = calculateMD5(hash, 0, hash.length);
            }
         }
         var cipher, userPassword;
         if (revision >= 3) {
            userPassword = ownerPassword;
            var derivedKey = new Uint8Array(keyLengthInBytes);
            for (j = 19; j >= 0; j--) {
               for (var k = 0; k < keyLengthInBytes; ++k) {
                  derivedKey[k] = hash[k] ^ j;
               }
               cipher = new ARCFourCipher(derivedKey);
               userPassword = cipher.encryptBlock(userPassword);
            }
         } else {
            cipher = new ARCFourCipher(hash.subarray(0, keyLengthInBytes));
            userPassword = cipher.encryptBlock(ownerPassword);
         }
         return userPassword;
      }
      function _buildObjectKey(num, gen, encryptionKey) {
         var isAes =
            arguments.length > 3 && arguments[3] !== undefined
               ? arguments[3]
               : false;
         var key = new Uint8Array(encryptionKey.length + 9);
         var n = encryptionKey.length;
         var i;
         for (i = 0; i < n; ++i) {
            key[i] = encryptionKey[i];
         }
         key[i++] = num & 0xff;
         key[i++] = (num >> 8) & 0xff;
         key[i++] = (num >> 16) & 0xff;
         key[i++] = gen & 0xff;
         key[i++] = (gen >> 8) & 0xff;
         if (isAes) {
            key[i++] = 0x73;
            key[i++] = 0x41;
            key[i++] = 0x6c;
            key[i++] = 0x54;
         }
         var hash = calculateMD5(key, 0, i);
         return hash.subarray(0, Math.min(encryptionKey.length + 5, 16));
      }
      function _buildCipherConstructor(cf, name, num, gen, key) {
         if (!(name instanceof Name)) {
            throw new FormatError("Invalid crypt filter name.");
         }
         var self = this;
         var cryptFilter = cf.get(name.name);
         var cfm =
            cryptFilter === null || cryptFilter === void 0
               ? void 0
               : cryptFilter.get("CFM");
         if (!cfm || cfm.name === "None") {
            return function () {
               return new NullCipher();
            };
         }
         if (cfm.name === "V2") {
            return function () {
               return new ARCFourCipher(
                  _assertClassBrand(
                     _CipherTransformFactory_brand,
                     self,
                     _buildObjectKey,
                  ).call(self, num, gen, key, false),
               );
            };
         }
         if (cfm.name === "AESV2") {
            return function () {
               return new AES128Cipher(
                  _assertClassBrand(
                     _CipherTransformFactory_brand,
                     self,
                     _buildObjectKey,
                  ).call(self, num, gen, key, true),
               );
            };
         }
         if (cfm.name === "AESV3") {
            return function () {
               return new AES256Cipher(key);
            };
         }
         throw new FormatError("Unknown crypto method");
      }
      var _defaultPasswordBytes = {
         _: new Uint8Array([
            0x28, 0xbf, 0x4e, 0x5e, 0x4e, 0x75, 0x8a, 0x41, 0x64, 0x00, 0x4e, 0x56,
            0xff, 0xfa, 0x01, 0x08, 0x2e, 0x2e, 0x00, 0xb6, 0xd0, 0x68, 0x3e, 0x80,
            0x2f, 0x0c, 0xa9, 0xfe, 0x64, 0x53, 0x69, 0x7a,
         ]),
      }; // CONCATENATED MODULE: ./src/core/writer.js
      function writeObject(_x48, _x49, _x50, _x51) {
         return _writeObject.apply(this, arguments);
      }
      function _writeObject() {
         _writeObject = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(
               function _callee87(ref, obj, buffer, _ref70) {
                  var _ref70$encrypt, encrypt, transform;
                  return _regenerator().w(function (_context104) {
                     while (1)
                        switch (_context104.n) {
                           case 0:
                              ((_ref70$encrypt = _ref70.encrypt),
                                 (encrypt =
                                    _ref70$encrypt === void 0 ? null : _ref70$encrypt));
                              transform =
                                 encrypt === null || encrypt === void 0
                                    ? void 0
                                    : encrypt.createCipherTransform(ref.num, ref.gen);
                              buffer.push(
                                 "".concat(ref.num, " ").concat(ref.gen, " obj\n"),
                              );
                              if (!(obj instanceof Dict)) {
                                 _context104.n = 2;
                                 break;
                              }
                              _context104.n = 1;
                              return writeDict(obj, buffer, transform);
                           case 1:
                              _context104.n = 5;
                              break;
                           case 2:
                              if (!(obj instanceof BaseStream)) {
                                 _context104.n = 4;
                                 break;
                              }
                              _context104.n = 3;
                              return writeStream(obj, buffer, transform);
                           case 3:
                              _context104.n = 5;
                              break;
                           case 4:
                              if (!(Array.isArray(obj) || ArrayBuffer.isView(obj))) {
                                 _context104.n = 5;
                                 break;
                              }
                              _context104.n = 5;
                              return writeArray(obj, buffer, transform);
                           case 5:
                              buffer.push("\nendobj\n");
                           case 6:
                              return _context104.a(2);
                        }
                  }, _callee87);
               },
            ),
         );
         return _writeObject.apply(this, arguments);
      }
      function writeDict(_x52, _x53, _x54) {
         return _writeDict.apply(this, arguments);
      }
      function _writeDict() {
         _writeDict = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(
               function _callee88(dict, buffer, transform) {
                  var _iterator236, _step236, key, _t76;
                  return _regenerator().w(
                     function (_context105) {
                        while (1)
                           switch ((_context105.p = _context105.n)) {
                              case 0:
                                 buffer.push("<<");
                                 _iterator236 = _createForOfIteratorHelper(dict.getKeys());
                                 _context105.p = 1;
                                 _iterator236.s();
                              case 2:
                                 if ((_step236 = _iterator236.n()).done) {
                                    _context105.n = 4;
                                    break;
                                 }
                                 key = _step236.value;
                                 buffer.push(" /".concat(escapePDFName(key), " "));
                                 _context105.n = 3;
                                 return writeValue(dict.getRaw(key), buffer, transform);
                              case 3:
                                 _context105.n = 2;
                                 break;
                              case 4:
                                 _context105.n = 6;
                                 break;
                              case 5:
                                 _context105.p = 5;
                                 _t76 = _context105.v;
                                 _iterator236.e(_t76);
                              case 6:
                                 _context105.p = 6;
                                 _iterator236.f();
                                 return _context105.f(6);
                              case 7:
                                 buffer.push(">>");
                              case 8:
                                 return _context105.a(2);
                           }
                     },
                     _callee88,
                     null,
                     [[1, 5, 6, 7]],
                  );
               },
            ),
         );
         return _writeDict.apply(this, arguments);
      }
      function writeStream(_x55, _x56, _x57) {
         return _writeStream.apply(this, arguments);
      }
      function _writeStream() {
         _writeStream = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(
               function _callee89(stream, buffer, transform) {
                  var bytes,
                     dict,
                     _yield$Promise$all7,
                     _yield$Promise$all8,
                     filter,
                     params,
                     filterZero,
                     isFilterZeroFlateDecode,
                     MIN_LENGTH_FOR_COMPRESSING,
                     cs,
                     writer,
                     buf,
                     newFilter,
                     newParams,
                     string,
                     _t77,
                     _t78;
                  return _regenerator().w(
                     function (_context106) {
                        while (1)
                           switch ((_context106.p = _context106.n)) {
                              case 0:
                                 bytes = stream.getBytes();
                                 dict = stream.dict;
                                 _context106.n = 1;
                                 return Promise.all([
                                    dict.getAsync("Filter"),
                                    dict.getAsync("DecodeParms"),
                                 ]);
                              case 1:
                                 _yield$Promise$all7 = _context106.v;
                                 _yield$Promise$all8 = _slicedToArray(
                                    _yield$Promise$all7,
                                    2,
                                 );
                                 filter = _yield$Promise$all8[0];
                                 params = _yield$Promise$all8[1];
                                 if (!Array.isArray(filter)) {
                                    _context106.n = 3;
                                    break;
                                 }
                                 _context106.n = 2;
                                 return dict.xref.fetchIfRefAsync(filter[0]);
                              case 2:
                                 _t77 = _context106.v;
                                 _context106.n = 4;
                                 break;
                              case 3:
                                 _t77 = filter;
                              case 4:
                                 filterZero = _t77;
                                 isFilterZeroFlateDecode = isName(
                                    filterZero,
                                    "FlateDecode",
                                 );
                                 MIN_LENGTH_FOR_COMPRESSING = 256;
                                 if (
                                    !(
                                       bytes.length >= MIN_LENGTH_FOR_COMPRESSING ||
                                       isFilterZeroFlateDecode
                                    )
                                 ) {
                                    _context106.n = 8;
                                    break;
                                 }
                                 _context106.p = 5;
                                 cs = new CompressionStream("deflate");
                                 writer = cs.writable.getWriter();
                                 writer.write(bytes);
                                 writer.close();
                                 _context106.n = 6;
                                 return new Response(cs.readable).arrayBuffer();
                              case 6:
                                 buf = _context106.v;
                                 bytes = new Uint8Array(buf);
                                 if (!filter) {
                                    newFilter = Name.get("FlateDecode");
                                 } else if (!isFilterZeroFlateDecode) {
                                    newFilter = Array.isArray(filter)
                                       ? [Name.get("FlateDecode")].concat(
                                          _toConsumableArray(filter),
                                       )
                                       : [Name.get("FlateDecode"), filter];
                                    if (params) {
                                       newParams = Array.isArray(params)
                                          ? [null].concat(_toConsumableArray(params))
                                          : [null, params];
                                    }
                                 }
                                 if (newFilter) {
                                    dict.set("Filter", newFilter);
                                 }
                                 if (newParams) {
                                    dict.set("DecodeParms", newParams);
                                 }
                                 _context106.n = 8;
                                 break;
                              case 7:
                                 _context106.p = 7;
                                 _t78 = _context106.v;
                                 info(
                                    'writeStream - cannot compress data: "'.concat(
                                       _t78,
                                       '".',
                                    ),
                                 );
                              case 8:
                                 string = bytesToString(bytes);
                                 if (transform) {
                                    string = transform.encryptString(string);
                                 }
                                 dict.set("Length", string.length);
                                 _context106.n = 9;
                                 return writeDict(dict, buffer, transform);
                              case 9:
                                 buffer.push(" stream\n", string, "\nendstream");
                              case 10:
                                 return _context106.a(2);
                           }
                     },
                     _callee89,
                     null,
                     [[5, 7]],
                  );
               },
            ),
         );
         return _writeStream.apply(this, arguments);
      }
      function writeArray(_x58, _x59, _x60) {
         return _writeArray.apply(this, arguments);
      }
      function _writeArray() {
         _writeArray = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(
               function _callee90(array, buffer, transform) {
                  var first, _iterator237, _step237, val, _t79;
                  return _regenerator().w(
                     function (_context107) {
                        while (1)
                           switch ((_context107.p = _context107.n)) {
                              case 0:
                                 buffer.push("[");
                                 first = true;
                                 _iterator237 = _createForOfIteratorHelper(array);
                                 _context107.p = 1;
                                 _iterator237.s();
                              case 2:
                                 if ((_step237 = _iterator237.n()).done) {
                                    _context107.n = 4;
                                    break;
                                 }
                                 val = _step237.value;
                                 if (!first) {
                                    buffer.push(" ");
                                 } else {
                                    first = false;
                                 }
                                 _context107.n = 3;
                                 return writeValue(val, buffer, transform);
                              case 3:
                                 _context107.n = 2;
                                 break;
                              case 4:
                                 _context107.n = 6;
                                 break;
                              case 5:
                                 _context107.p = 5;
                                 _t79 = _context107.v;
                                 _iterator237.e(_t79);
                              case 6:
                                 _context107.p = 6;
                                 _iterator237.f();
                                 return _context107.f(6);
                              case 7:
                                 buffer.push("]");
                              case 8:
                                 return _context107.a(2);
                           }
                     },
                     _callee90,
                     null,
                     [[1, 5, 6, 7]],
                  );
               },
            ),
         );
         return _writeArray.apply(this, arguments);
      }
      function writeValue(_x61, _x62, _x63) {
         return _writeValue.apply(this, arguments);
      }
      function _writeValue() {
         _writeValue = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(
               function _callee91(value, buffer, transform) {
                  return _regenerator().w(function (_context108) {
                     while (1)
                        switch (_context108.n) {
                           case 0:
                              if (!(value instanceof Name)) {
                                 _context108.n = 1;
                                 break;
                              }
                              buffer.push("/".concat(escapePDFName(value.name)));
                              _context108.n = 12;
                              break;
                           case 1:
                              if (!(value instanceof Ref)) {
                                 _context108.n = 2;
                                 break;
                              }
                              buffer.push(
                                 "".concat(value.num, " ").concat(value.gen, " R"),
                              );
                              _context108.n = 12;
                              break;
                           case 2:
                              if (!(Array.isArray(value) || ArrayBuffer.isView(value))) {
                                 _context108.n = 4;
                                 break;
                              }
                              _context108.n = 3;
                              return writeArray(value, buffer, transform);
                           case 3:
                              _context108.n = 12;
                              break;
                           case 4:
                              if (!(typeof value === "string")) {
                                 _context108.n = 5;
                                 break;
                              }
                              if (transform) {
                                 value = transform.encryptString(value);
                              }
                              buffer.push("(".concat(escapeString(value), ")"));
                              _context108.n = 12;
                              break;
                           case 5:
                              if (!(typeof value === "number")) {
                                 _context108.n = 6;
                                 break;
                              }
                              buffer.push(numberToString(value));
                              _context108.n = 12;
                              break;
                           case 6:
                              if (!(typeof value === "boolean")) {
                                 _context108.n = 7;
                                 break;
                              }
                              buffer.push(value.toString());
                              _context108.n = 12;
                              break;
                           case 7:
                              if (!(value instanceof Dict)) {
                                 _context108.n = 9;
                                 break;
                              }
                              _context108.n = 8;
                              return writeDict(value, buffer, transform);
                           case 8:
                              _context108.n = 12;
                              break;
                           case 9:
                              if (!(value instanceof BaseStream)) {
                                 _context108.n = 11;
                                 break;
                              }
                              _context108.n = 10;
                              return writeStream(value, buffer, transform);
                           case 10:
                              _context108.n = 12;
                              break;
                           case 11:
                              if (value === null) {
                                 buffer.push("null");
                              } else {
                                 warn(
                                    "Unhandled value in writer: ".concat(
                                       _typeof(value),
                                       ", please file a bug.",
                                    ),
                                 );
                              }
                           case 12:
                              return _context108.a(2);
                        }
                  }, _callee91);
               },
            ),
         );
         return _writeValue.apply(this, arguments);
      }
      function writeInt(number, size, offset, buffer) {
         for (var i = size + offset - 1; i > offset - 1; i--) {
            buffer[i] = number & 0xff;
            number >>= 8;
         }
         return offset + size;
      }
      function writeString(string, offset, buffer) {
         for (var i = 0, len = string.length; i < len; i++) {
            buffer[offset + i] = string.charCodeAt(i) & 0xff;
         }
      }
      function computeMD5(filesize, xrefInfo) {
         var time = Math.floor(Date.now() / 1000);
         var filename = xrefInfo.filename || "";
         var md5Buffer = [time.toString(), filename, filesize.toString()];
         var md5BufferLen = md5Buffer.reduce(function (a, str) {
            return a + str.length;
         }, 0);
         for (
            var _i50 = 0, _Object$values = Object.values(xrefInfo.info);
            _i50 < _Object$values.length;
            _i50++
         ) {
            var value = _Object$values[_i50];
            md5Buffer.push(value);
            md5BufferLen += value.length;
         }
         var array = new Uint8Array(md5BufferLen);
         var offset = 0;
         for (
            var _i51 = 0, _md5Buffer = md5Buffer;
            _i51 < _md5Buffer.length;
            _i51++
         ) {
            var str = _md5Buffer[_i51];
            writeString(str, offset, array);
            offset += str.length;
         }
         return bytesToString(calculateMD5(array));
      }
      function writeXFADataForAcroform(str, newRefs) {
         var xml = new SimpleXMLParser({ hasAttributes: true }).parseFromString(
            str,
         );
         var _iterator91 = _createForOfIteratorHelper(newRefs),
            _step91;
         try {
            for (_iterator91.s(); !(_step91 = _iterator91.n()).done; ) {
               var xfa = _step91.value.xfa;
               if (!xfa) {
                  continue;
               }
               var path = xfa.path,
                  value = xfa.value;
               if (!path) {
                  continue;
               }
               var nodePath = parseXFAPath(path);
               var node = xml.documentElement.searchNode(nodePath, 0);
               if (!node && nodePath.length > 1) {
                  node = xml.documentElement.searchNode([nodePath.at(-1)], 0);
               }
               if (node) {
                  node.childNodes = Array.isArray(value)
                     ? value.map(function (val) {
                        return new SimpleDOMNode("value", val);
                     })
                     : [new SimpleDOMNode("#text", value)];
               } else {
                  warn("Node not found for path: ".concat(path));
               }
            }
         } catch (err) {
            _iterator91.e(err);
         } finally {
            _iterator91.f();
         }
         var buffer = [];
         xml.documentElement.dump(buffer);
         return buffer.join("");
      }
      function updateAcroform(_x64) {
         return _updateAcroform.apply(this, arguments);
      }
      function _updateAcroform() {
         _updateAcroform = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(function _callee92(_ref71) {
               var xref,
                  acroForm,
                  acroFormRef,
                  hasXfa,
                  hasXfaDatasetsEntry,
                  xfaDatasetsRef,
                  needAppearances,
                  newRefs,
                  dict,
                  newXfa,
                  buffer;
               return _regenerator().w(function (_context109) {
                  while (1)
                     switch (_context109.n) {
                        case 0:
                           ((xref = _ref71.xref),
                              (acroForm = _ref71.acroForm),
                              (acroFormRef = _ref71.acroFormRef),
                              (hasXfa = _ref71.hasXfa),
                              (hasXfaDatasetsEntry = _ref71.hasXfaDatasetsEntry),
                              (xfaDatasetsRef = _ref71.xfaDatasetsRef),
                              (needAppearances = _ref71.needAppearances),
                              (newRefs = _ref71.newRefs));
                           if (hasXfa && !hasXfaDatasetsEntry && !xfaDatasetsRef) {
                              warn("XFA - Cannot save it");
                           }
                           if (
                              !(
                                 !needAppearances &&
                                 (!hasXfa || !xfaDatasetsRef || hasXfaDatasetsEntry)
                              )
                           ) {
                              _context109.n = 1;
                              break;
                           }
                           return _context109.a(2);
                        case 1:
                           dict = acroForm.clone();
                           if (hasXfa && !hasXfaDatasetsEntry) {
                              newXfa = acroForm.get("XFA").slice();
                              newXfa.splice(2, 0, "datasets");
                              newXfa.splice(3, 0, xfaDatasetsRef);
                              dict.set("XFA", newXfa);
                           }
                           if (needAppearances) {
                              dict.set("NeedAppearances", true);
                           }
                           buffer = [];
                           _context109.n = 2;
                           return writeObject(acroFormRef, dict, buffer, xref);
                        case 2:
                           newRefs.push({ ref: acroFormRef, data: buffer.join("") });
                        case 3:
                           return _context109.a(2);
                     }
               }, _callee92);
            }),
         );
         return _updateAcroform.apply(this, arguments);
      }
      function updateXFA(_ref72) {
         var xfaData = _ref72.xfaData,
            xfaDatasetsRef = _ref72.xfaDatasetsRef,
            newRefs = _ref72.newRefs,
            xref = _ref72.xref;
         if (xfaData === null) {
            var datasets = xref.fetchIfRef(xfaDatasetsRef);
            xfaData = writeXFADataForAcroform(datasets.getString(), newRefs);
         }
         var encrypt = xref.encrypt;
         if (encrypt) {
            var transform = encrypt.createCipherTransform(
               xfaDatasetsRef.num,
               xfaDatasetsRef.gen,
            );
            xfaData = transform.encryptString(xfaData);
         }
         var data =
            ""
               .concat(xfaDatasetsRef.num, " ")
               .concat(xfaDatasetsRef.gen, " obj\n") +
            "<< /Type /EmbeddedFile /Length ".concat(
               xfaData.length,
               ">>\nstream\n",
            ) +
            xfaData +
            "\nendstream\nendobj\n";
         newRefs.push({ ref: xfaDatasetsRef, data: data });
      }
      function getXRefTable(_x65, _x66, _x67, _x68, _x69) {
         return _getXRefTable.apply(this, arguments);
      }
      function _getXRefTable() {
         _getXRefTable = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(
               function _callee93(xrefInfo, baseOffset, newRefs, newXref, buffer) {
                  var indexes,
                     indexesPosition,
                     _iterator238,
                     _step238,
                     _step238$value,
                     ref,
                     data;
                  return _regenerator().w(function (_context110) {
                     while (1)
                        switch (_context110.n) {
                           case 0:
                              buffer.push("xref\n");
                              indexes = getIndexes(newRefs);
                              indexesPosition = 0;
                              _iterator238 = _createForOfIteratorHelper(newRefs);
                              try {
                                 for (
                                    _iterator238.s();
                                    !(_step238 = _iterator238.n()).done;

                                 ) {
                                    ((_step238$value = _step238.value),
                                       (ref = _step238$value.ref),
                                       (data = _step238$value.data));
                                    if (ref.num === indexes[indexesPosition]) {
                                       buffer.push(
                                          ""
                                             .concat(indexes[indexesPosition], " ")
                                             .concat(indexes[indexesPosition + 1], "\n"),
                                       );
                                       indexesPosition += 2;
                                    }
                                    if (data !== null) {
                                       buffer.push(
                                          ""
                                             .concat(
                                                baseOffset.toString().padStart(10, "0"),
                                                " ",
                                             )
                                             .concat(
                                                Math.min(ref.gen, 0xffff)
                                                   .toString()
                                                   .padStart(5, "0"),
                                                " n\r\n",
                                             ),
                                       );
                                       baseOffset += data.length;
                                    } else {
                                       buffer.push(
                                          "0000000000 ".concat(
                                             Math.min(ref.gen + 1, 0xffff)
                                                .toString()
                                                .padStart(5, "0"),
                                             " f\r\n",
                                          ),
                                       );
                                    }
                                 }
                              } catch (err) {
                                 _iterator238.e(err);
                              } finally {
                                 _iterator238.f();
                              }
                              computeIDs(baseOffset, xrefInfo, newXref);
                              buffer.push("trailer\n");
                              _context110.n = 1;
                              return writeDict(newXref, buffer);
                           case 1:
                              buffer.push(
                                 "\nstartxref\n",
                                 baseOffset.toString(),
                                 "\n%%EOF\n",
                              );
                           case 2:
                              return _context110.a(2);
                        }
                  }, _callee93);
               },
            ),
         );
         return _getXRefTable.apply(this, arguments);
      }
      function getIndexes(newRefs) {
         var indexes = [];
         var _iterator92 = _createForOfIteratorHelper(newRefs),
            _step92;
         try {
            for (_iterator92.s(); !(_step92 = _iterator92.n()).done; ) {
               var ref = _step92.value.ref;
               if (ref.num === indexes.at(-2) + indexes.at(-1)) {
                  indexes[indexes.length - 1] += 1;
               } else {
                  indexes.push(ref.num, 1);
               }
            }
         } catch (err) {
            _iterator92.e(err);
         } finally {
            _iterator92.f();
         }
         return indexes;
      }
      function getXRefStreamTable(_x70, _x71, _x72, _x73, _x74) {
         return _getXRefStreamTable.apply(this, arguments);
      }
      function _getXRefStreamTable() {
         _getXRefStreamTable = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(
               function _callee94(xrefInfo, baseOffset, newRefs, newXref, buffer) {
                  var xrefTableData,
                     maxOffset,
                     maxGen,
                     _iterator239,
                     _step239,
                     _step239$value,
                     ref,
                     _data4,
                     _gen,
                     offsetSize,
                     maxGenSize,
                     sizes,
                     structSize,
                     data,
                     stream,
                     offset,
                     _i78,
                     _xrefTableData,
                     _xrefTableData$_i,
                     type,
                     objOffset,
                     gen;
                  return _regenerator().w(function (_context111) {
                     while (1)
                        switch (_context111.n) {
                           case 0:
                              xrefTableData = [];
                              maxOffset = 0;
                              maxGen = 0;
                              _iterator239 = _createForOfIteratorHelper(newRefs);
                              try {
                                 for (
                                    _iterator239.s();
                                    !(_step239 = _iterator239.n()).done;

                                 ) {
                                    ((_step239$value = _step239.value),
                                       (ref = _step239$value.ref),
                                       (_data4 = _step239$value.data));
                                    _gen = void 0;
                                    maxOffset = Math.max(maxOffset, baseOffset);
                                    if (_data4 !== null) {
                                       _gen = Math.min(ref.gen, 0xffff);
                                       xrefTableData.push([1, baseOffset, _gen]);
                                       baseOffset += _data4.length;
                                    } else {
                                       _gen = Math.min(ref.gen + 1, 0xffff);
                                       xrefTableData.push([0, 0, _gen]);
                                    }
                                    maxGen = Math.max(maxGen, _gen);
                                 }
                              } catch (err) {
                                 _iterator239.e(err);
                              } finally {
                                 _iterator239.f();
                              }
                              newXref.set("Index", getIndexes(newRefs));
                              offsetSize = getSizeInBytes(maxOffset);
                              maxGenSize = getSizeInBytes(maxGen);
                              sizes = [1, offsetSize, maxGenSize];
                              newXref.set("W", sizes);
                              computeIDs(baseOffset, xrefInfo, newXref);
                              structSize = sizes.reduce(function (a, x) {
                                 return a + x;
                              }, 0);
                              data = new Uint8Array(structSize * xrefTableData.length);
                              stream = new Stream(data);
                              stream.dict = newXref;
                              offset = 0;
                              for (
                                 _i78 = 0, _xrefTableData = xrefTableData;
                                 _i78 < _xrefTableData.length;
                                 _i78++
                              ) {
                                 ((_xrefTableData$_i = _slicedToArray(
                                    _xrefTableData[_i78],
                                    3,
                                 )),
                                    (type = _xrefTableData$_i[0]),
                                    (objOffset = _xrefTableData$_i[1]),
                                    (gen = _xrefTableData$_i[2]));
                                 offset = writeInt(type, sizes[0], offset, data);
                                 offset = writeInt(objOffset, sizes[1], offset, data);
                                 offset = writeInt(gen, sizes[2], offset, data);
                              }
                              _context111.n = 1;
                              return writeObject(xrefInfo.newRef, stream, buffer, {});
                           case 1:
                              buffer.push(
                                 "startxref\n",
                                 baseOffset.toString(),
                                 "\n%%EOF\n",
                              );
                           case 2:
                              return _context111.a(2);
                        }
                  }, _callee94);
               },
            ),
         );
         return _getXRefStreamTable.apply(this, arguments);
      }
      function computeIDs(baseOffset, xrefInfo, newXref) {
         if (Array.isArray(xrefInfo.fileIds) && xrefInfo.fileIds.length > 0) {
            var md5 = computeMD5(baseOffset, xrefInfo);
            newXref.set("ID", [xrefInfo.fileIds[0], md5]);
         }
      }
      function getTrailerDict(xrefInfo, newRefs, useXrefStream) {
         var newXref = new Dict(null);
         newXref.set("Prev", xrefInfo.startXRef);
         var refForXrefTable = xrefInfo.newRef;
         if (useXrefStream) {
            newRefs.push({ ref: refForXrefTable, data: "" });
            newXref.set("Size", refForXrefTable.num + 1);
            newXref.set("Type", Name.get("XRef"));
         } else {
            newXref.set("Size", refForXrefTable.num);
         }
         if (xrefInfo.rootRef !== null) {
            newXref.set("Root", xrefInfo.rootRef);
         }
         if (xrefInfo.infoRef !== null) {
            newXref.set("Info", xrefInfo.infoRef);
         }
         if (xrefInfo.encryptRef !== null) {
            newXref.set("Encrypt", xrefInfo.encryptRef);
         }
         return newXref;
      }
      function incrementalUpdate(_x75) {
         return _incrementalUpdate.apply(this, arguments);
      }
      function _incrementalUpdate() {
         _incrementalUpdate = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(function _callee95(_ref73) {
               var originalData,
                  xrefInfo,
                  newRefs,
                  _ref73$xref,
                  xref,
                  _ref73$hasXfa,
                  hasXfa,
                  _ref73$xfaDatasetsRef,
                  xfaDatasetsRef,
                  _ref73$hasXfaDatasets,
                  hasXfaDatasetsEntry,
                  needAppearances,
                  _ref73$acroFormRef,
                  acroFormRef,
                  _ref73$acroForm,
                  acroForm,
                  _ref73$xfaData,
                  xfaData,
                  _ref73$useXrefStream,
                  useXrefStream,
                  buffer,
                  baseOffset,
                  lastByte,
                  newXref,
                  _iterator240,
                  _step240,
                  data,
                  totalLength,
                  array,
                  offset,
                  _i79,
                  _buffer2,
                  str;
               return _regenerator().w(function (_context112) {
                  while (1)
                     switch (_context112.n) {
                        case 0:
                           ((originalData = _ref73.originalData),
                              (xrefInfo = _ref73.xrefInfo),
                              (newRefs = _ref73.newRefs),
                              (_ref73$xref = _ref73.xref),
                              (xref = _ref73$xref === void 0 ? null : _ref73$xref),
                              (_ref73$hasXfa = _ref73.hasXfa),
                              (hasXfa = _ref73$hasXfa === void 0 ? false : _ref73$hasXfa),
                              (_ref73$xfaDatasetsRef = _ref73.xfaDatasetsRef),
                              (xfaDatasetsRef =
                                 _ref73$xfaDatasetsRef === void 0
                                    ? null
                                    : _ref73$xfaDatasetsRef),
                              (_ref73$hasXfaDatasets = _ref73.hasXfaDatasetsEntry),
                              (hasXfaDatasetsEntry =
                                 _ref73$hasXfaDatasets === void 0
                                    ? false
                                    : _ref73$hasXfaDatasets),
                              (needAppearances = _ref73.needAppearances),
                              (_ref73$acroFormRef = _ref73.acroFormRef),
                              (acroFormRef =
                                 _ref73$acroFormRef === void 0
                                    ? null
                                    : _ref73$acroFormRef),
                              (_ref73$acroForm = _ref73.acroForm),
                              (acroForm =
                                 _ref73$acroForm === void 0 ? null : _ref73$acroForm),
                              (_ref73$xfaData = _ref73.xfaData),
                              (xfaData =
                                 _ref73$xfaData === void 0 ? null : _ref73$xfaData),
                              (_ref73$useXrefStream = _ref73.useXrefStream),
                              (useXrefStream =
                                 _ref73$useXrefStream === void 0
                                    ? false
                                    : _ref73$useXrefStream));
                           _context112.n = 1;
                           return updateAcroform({
                              xref: xref,
                              acroForm: acroForm,
                              acroFormRef: acroFormRef,
                              hasXfa: hasXfa,
                              hasXfaDatasetsEntry: hasXfaDatasetsEntry,
                              xfaDatasetsRef: xfaDatasetsRef,
                              needAppearances: needAppearances,
                              newRefs: newRefs,
                           });
                        case 1:
                           if (hasXfa) {
                              updateXFA({
                                 xfaData: xfaData,
                                 xfaDatasetsRef: xfaDatasetsRef,
                                 newRefs: newRefs,
                                 xref: xref,
                              });
                           }
                           buffer = [];
                           baseOffset = originalData.length;
                           lastByte = originalData.at(-1);
                           if (lastByte !== 0x0a && lastByte !== 0x0d) {
                              buffer.push("\n");
                              baseOffset += 1;
                           }
                           newXref = getTrailerDict(xrefInfo, newRefs, useXrefStream);
                           newRefs = newRefs.sort(function (a, b) {
                              return a.ref.num - b.ref.num;
                           });
                           _iterator240 = _createForOfIteratorHelper(newRefs);
                           try {
                              for (
                                 _iterator240.s();
                                 !(_step240 = _iterator240.n()).done;

                              ) {
                                 data = _step240.value.data;
                                 if (data !== null) {
                                    buffer.push(data);
                                 }
                              }
                           } catch (err) {
                              _iterator240.e(err);
                           } finally {
                              _iterator240.f();
                           }
                           _context112.n = 2;
                           return useXrefStream
                              ? getXRefStreamTable(
                                 xrefInfo,
                                 baseOffset,
                                 newRefs,
                                 newXref,
                                 buffer,
                              )
                              : getXRefTable(
                                 xrefInfo,
                                 baseOffset,
                                 newRefs,
                                 newXref,
                                 buffer,
                              );
                        case 2:
                           totalLength = buffer.reduce(function (a, str) {
                              return a + str.length;
                           }, originalData.length);
                           array = new Uint8Array(totalLength);
                           array.set(originalData);
                           offset = originalData.length;
                           for (
                              _i79 = 0, _buffer2 = buffer;
                              _i79 < _buffer2.length;
                              _i79++
                           ) {
                              str = _buffer2[_i79];
                              writeString(str, offset, array);
                              offset += str.length;
                           }
                           return _context112.a(2, array);
                     }
               }, _callee95);
            }),
         );
         return _incrementalUpdate.apply(this, arguments);
      } // CONCATENATED MODULE: ./src/core/struct_tree.js
      var MAX_DEPTH = 40;
      var StructElementType = {
         PAGE_CONTENT: 1,
         STREAM_CONTENT: 2,
         OBJECT: 3,
         ANNOTATION: 4,
         ELEMENT: 5,
      };
      var _StructTreeRoot_brand = /*#__PURE__*/ new WeakSet();
      var StructTreeRoot = /*#__PURE__*/ (function () {
         function StructTreeRoot(rootDict, rootRef) {
            _classCallCheck(this, StructTreeRoot);
            _classPrivateMethodInitSpec(this, _StructTreeRoot_brand);
            this.dict = rootDict;
            this.ref = rootRef instanceof Ref ? rootRef : null;
            this.roleMap = new Map();
            this.structParentIds = null;
         }
         return _createClass(
            StructTreeRoot,
            [
               {
                  key: "init",
                  value: function init() {
                     this.readRoleMap();
                  },
               },
               {
                  key: "addAnnotationIdToPage",
                  value: function addAnnotationIdToPage(pageRef, id) {
                     _assertClassBrand(_StructTreeRoot_brand, this, _addIdToPage).call(
                        this,
                        pageRef,
                        id,
                        StructElementType.ANNOTATION,
                     );
                  },
               },
               {
                  key: "readRoleMap",
                  value: function readRoleMap() {
                     var _this57 = this;
                     var roleMapDict = this.dict.get("RoleMap");
                     if (!(roleMapDict instanceof Dict)) {
                        return;
                     }
                     roleMapDict.forEach(function (key, value) {
                        if (!(value instanceof Name)) {
                           return;
                        }
                        _this57.roleMap.set(key, value.name);
                     });
                  },
               },
               {
                  key: "canUpdateStructTree",
                  value: (function () {
                     var _canUpdateStructTree = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee22(_ref74) {
                           var pdfManager,
                              xref,
                              newAnnotationsByPage,
                              nextKey,
                              parentTree,
                              nums,
                              numberTree,
                              _iterator93,
                              _step93,
                              pageIndex,
                              _yield$pdfManager$get,
                              pageDict,
                              id,
                              hasNothingToUpdate,
                              _iterator94,
                              _step94,
                              _step94$value,
                              _pageIndex,
                              _elements,
                              _yield$pdfManager$get2,
                              _pageDict,
                              _iterator97,
                              _step97,
                              _element$accessibilit,
                              _element,
                              _iterator95,
                              _step95,
                              elements,
                              _iterator96,
                              _step96,
                              element,
                              _t22,
                              _t23;
                           return _regenerator().w(
                              function (_context25) {
                                 while (1)
                                    switch ((_context25.p = _context25.n)) {
                                       case 0:
                                          ((pdfManager = _ref74.pdfManager),
                                             (xref = _ref74.xref),
                                             (newAnnotationsByPage =
                                                _ref74.newAnnotationsByPage));
                                          if (this.ref) {
                                             _context25.n = 1;
                                             break;
                                          }
                                          warn(
                                             "Cannot update the struct tree: no root reference.",
                                          );
                                          return _context25.a(2, false);
                                       case 1:
                                          nextKey = this.dict.get("ParentTreeNextKey");
                                          if (!(!Number.isInteger(nextKey) || nextKey < 0)) {
                                             _context25.n = 2;
                                             break;
                                          }
                                          warn(
                                             "Cannot update the struct tree: invalid next key.",
                                          );
                                          return _context25.a(2, false);
                                       case 2:
                                          parentTree = this.dict.get("ParentTree");
                                          if (parentTree instanceof Dict) {
                                             _context25.n = 3;
                                             break;
                                          }
                                          warn(
                                             "Cannot update the struct tree: ParentTree isn't a dict.",
                                          );
                                          return _context25.a(2, false);
                                       case 3:
                                          nums = parentTree.get("Nums");
                                          if (Array.isArray(nums)) {
                                             _context25.n = 4;
                                             break;
                                          }
                                          warn(
                                             "Cannot update the struct tree: nums isn't an array.",
                                          );
                                          return _context25.a(2, false);
                                       case 4:
                                          numberTree = new NumberTree(parentTree, xref);
                                          _iterator93 = _createForOfIteratorHelper(
                                             newAnnotationsByPage.keys(),
                                          );
                                          _context25.p = 5;
                                          _iterator93.s();
                                       case 6:
                                          if ((_step93 = _iterator93.n()).done) {
                                             _context25.n = 10;
                                             break;
                                          }
                                          pageIndex = _step93.value;
                                          _context25.n = 7;
                                          return pdfManager.getPage(pageIndex);
                                       case 7:
                                          _yield$pdfManager$get = _context25.v;
                                          pageDict = _yield$pdfManager$get.pageDict;
                                          if (pageDict.has("StructParents")) {
                                             _context25.n = 8;
                                             break;
                                          }
                                          return _context25.a(3, 9);
                                       case 8:
                                          id = pageDict.get("StructParents");
                                          if (
                                             !(
                                                !Number.isInteger(id) ||
                                                !Array.isArray(numberTree.get(id))
                                             )
                                          ) {
                                             _context25.n = 9;
                                             break;
                                          }
                                          warn(
                                             "Cannot save the struct tree: page ".concat(
                                                pageIndex,
                                                " has a wrong id.",
                                             ),
                                          );
                                          return _context25.a(2, false);
                                       case 9:
                                          _context25.n = 6;
                                          break;
                                       case 10:
                                          _context25.n = 12;
                                          break;
                                       case 11:
                                          _context25.p = 11;
                                          _t22 = _context25.v;
                                          _iterator93.e(_t22);
                                       case 12:
                                          _context25.p = 12;
                                          _iterator93.f();
                                          return _context25.f(12);
                                       case 13:
                                          hasNothingToUpdate = true;
                                          _iterator94 =
                                             _createForOfIteratorHelper(newAnnotationsByPage);
                                          _context25.p = 14;
                                          _iterator94.s();
                                       case 15:
                                          if ((_step94 = _iterator94.n()).done) {
                                             _context25.n = 18;
                                             break;
                                          }
                                          ((_step94$value = _slicedToArray(_step94.value, 2)),
                                             (_pageIndex = _step94$value[0]),
                                             (_elements = _step94$value[1]));
                                          _context25.n = 16;
                                          return pdfManager.getPage(_pageIndex);
                                       case 16:
                                          _yield$pdfManager$get2 = _context25.v;
                                          _pageDict = _yield$pdfManager$get2.pageDict;
                                          _collectParents.call(StructTreeRoot, {
                                             elements: _elements,
                                             xref: this.dict.xref,
                                             pageDict: _pageDict,
                                             numberTree: numberTree,
                                          });
                                          _iterator97 = _createForOfIteratorHelper(_elements);
                                          try {
                                             for (
                                                _iterator97.s();
                                                !(_step97 = _iterator97.n()).done;

                                             ) {
                                                _element = _step97.value;
                                                if (
                                                   (_element$accessibilit =
                                                      _element.accessibilityData) !== null &&
                                                   _element$accessibilit !== void 0 &&
                                                   _element$accessibilit.type
                                                ) {
                                                   _element.parentTreeId = nextKey++;
                                                   hasNothingToUpdate = false;
                                                }
                                             }
                                          } catch (err) {
                                             _iterator97.e(err);
                                          } finally {
                                             _iterator97.f();
                                          }
                                       case 17:
                                          _context25.n = 15;
                                          break;
                                       case 18:
                                          _context25.n = 20;
                                          break;
                                       case 19:
                                          _context25.p = 19;
                                          _t23 = _context25.v;
                                          _iterator94.e(_t23);
                                       case 20:
                                          _context25.p = 20;
                                          _iterator94.f();
                                          return _context25.f(20);
                                       case 21:
                                          if (!hasNothingToUpdate) {
                                             _context25.n = 22;
                                             break;
                                          }
                                          _iterator95 = _createForOfIteratorHelper(
                                             newAnnotationsByPage.values(),
                                          );
                                          try {
                                             for (
                                                _iterator95.s();
                                                !(_step95 = _iterator95.n()).done;

                                             ) {
                                                elements = _step95.value;
                                                _iterator96 =
                                                   _createForOfIteratorHelper(elements);
                                                try {
                                                   for (
                                                      _iterator96.s();
                                                      !(_step96 = _iterator96.n()).done;

                                                   ) {
                                                      element = _step96.value;
                                                      delete element.parentTreeId;
                                                      delete element.structTreeParent;
                                                   }
                                                } catch (err) {
                                                   _iterator96.e(err);
                                                } finally {
                                                   _iterator96.f();
                                                }
                                             }
                                          } catch (err) {
                                             _iterator95.e(err);
                                          } finally {
                                             _iterator95.f();
                                          }
                                          return _context25.a(2, false);
                                       case 22:
                                          return _context25.a(2, true);
                                    }
                              },
                              _callee22,
                              this,
                              [
                                 [14, 19, 20, 21],
                                 [5, 11, 12, 13],
                              ],
                           );
                        }),
                     );
                     function canUpdateStructTree(_x76) {
                        return _canUpdateStructTree.apply(this, arguments);
                     }
                     return canUpdateStructTree;
                  })(),
               },
               {
                  key: "updateStructureTree",
                  value: (function () {
                     var _updateStructureTree = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee23(_ref75) {
                           var newAnnotationsByPage,
                              pdfManager,
                              newRefs,
                              xref,
                              structTreeRoot,
                              structTreeRootRef,
                              cache,
                              parentTreeRef,
                              parentTree,
                              nums,
                              numsRef,
                              newNextkey,
                              buffer,
                              _iterator98,
                              _step98,
                              _step98$value,
                              ref,
                              obj,
                              _t24;
                           return _regenerator().w(
                              function (_context26) {
                                 while (1)
                                    switch ((_context26.p = _context26.n)) {
                                       case 0:
                                          ((newAnnotationsByPage =
                                             _ref75.newAnnotationsByPage),
                                             (pdfManager = _ref75.pdfManager),
                                             (newRefs = _ref75.newRefs));
                                          xref = this.dict.xref;
                                          structTreeRoot = this.dict.clone();
                                          structTreeRootRef = this.ref;
                                          cache = new RefSetCache();
                                          cache.put(structTreeRootRef, structTreeRoot);
                                          parentTreeRef = structTreeRoot.getRaw("ParentTree");
                                          if (parentTreeRef instanceof Ref) {
                                             parentTree = xref.fetch(parentTreeRef);
                                          } else {
                                             parentTree = parentTreeRef;
                                             parentTreeRef = xref.getNewTemporaryRef();
                                             structTreeRoot.set("ParentTree", parentTreeRef);
                                          }
                                          parentTree = parentTree.clone();
                                          cache.put(parentTreeRef, parentTree);
                                          nums = parentTree.getRaw("Nums");
                                          numsRef = null;
                                          if (nums instanceof Ref) {
                                             numsRef = nums;
                                             nums = xref.fetch(numsRef);
                                          }
                                          nums = nums.slice();
                                          if (!numsRef) {
                                             parentTree.set("Nums", nums);
                                          }
                                          _context26.n = 1;
                                          return _writeKids.call(StructTreeRoot, {
                                             newAnnotationsByPage: newAnnotationsByPage,
                                             structTreeRootRef: structTreeRootRef,
                                             kids: null,
                                             nums: nums,
                                             xref: xref,
                                             pdfManager: pdfManager,
                                             cache: cache,
                                          });
                                       case 1:
                                          newNextkey = _context26.v;
                                          structTreeRoot.set("ParentTreeNextKey", newNextkey);
                                          if (numsRef) {
                                             cache.put(numsRef, nums);
                                          }
                                          buffer = [];
                                          _iterator98 = _createForOfIteratorHelper(
                                             cache.items(),
                                          );
                                          _context26.p = 2;
                                          _iterator98.s();
                                       case 3:
                                          if ((_step98 = _iterator98.n()).done) {
                                             _context26.n = 6;
                                             break;
                                          }
                                          ((_step98$value = _slicedToArray(_step98.value, 2)),
                                             (ref = _step98$value[0]),
                                             (obj = _step98$value[1]));
                                          buffer.length = 0;
                                          _context26.n = 4;
                                          return writeObject(ref, obj, buffer, xref);
                                       case 4:
                                          newRefs.push({ ref: ref, data: buffer.join("") });
                                       case 5:
                                          _context26.n = 3;
                                          break;
                                       case 6:
                                          _context26.n = 8;
                                          break;
                                       case 7:
                                          _context26.p = 7;
                                          _t24 = _context26.v;
                                          _iterator98.e(_t24);
                                       case 8:
                                          _context26.p = 8;
                                          _iterator98.f();
                                          return _context26.f(8);
                                       case 9:
                                          return _context26.a(2);
                                    }
                              },
                              _callee23,
                              this,
                              [[2, 7, 8, 9]],
                           );
                        }),
                     );
                     function updateStructureTree(_x77) {
                        return _updateStructureTree.apply(this, arguments);
                     }
                     return updateStructureTree;
                  })(),
               },
            ],
            [
               {
                  key: "canCreateStructureTree",
                  value: (function () {
                     var _canCreateStructureTree = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee24(_ref76) {
                           var catalogRef,
                              pdfManager,
                              newAnnotationsByPage,
                              nextKey,
                              hasNothingToUpdate,
                              _iterator99,
                              _step99,
                              _step99$value,
                              pageIndex,
                              _elements2,
                              _yield$pdfManager$get3,
                              pageRef,
                              _iterator102,
                              _step102,
                              _element2$accessibili,
                              _element2,
                              _iterator100,
                              _step100,
                              elements,
                              _iterator101,
                              _step101,
                              element,
                              _t25;
                           return _regenerator().w(
                              function (_context27) {
                                 while (1)
                                    switch ((_context27.p = _context27.n)) {
                                       case 0:
                                          ((catalogRef = _ref76.catalogRef),
                                             (pdfManager = _ref76.pdfManager),
                                             (newAnnotationsByPage =
                                                _ref76.newAnnotationsByPage));
                                          if (catalogRef instanceof Ref) {
                                             _context27.n = 1;
                                             break;
                                          }
                                          warn(
                                             "Cannot save the struct tree: no catalog reference.",
                                          );
                                          return _context27.a(2, false);
                                       case 1:
                                          nextKey = 0;
                                          hasNothingToUpdate = true;
                                          _iterator99 =
                                             _createForOfIteratorHelper(newAnnotationsByPage);
                                          _context27.p = 2;
                                          _iterator99.s();
                                       case 3:
                                          if ((_step99 = _iterator99.n()).done) {
                                             _context27.n = 7;
                                             break;
                                          }
                                          ((_step99$value = _slicedToArray(_step99.value, 2)),
                                             (pageIndex = _step99$value[0]),
                                             (_elements2 = _step99$value[1]));
                                          _context27.n = 4;
                                          return pdfManager.getPage(pageIndex);
                                       case 4:
                                          _yield$pdfManager$get3 = _context27.v;
                                          pageRef = _yield$pdfManager$get3.ref;
                                          if (pageRef instanceof Ref) {
                                             _context27.n = 5;
                                             break;
                                          }
                                          warn(
                                             "Cannot save the struct tree: page ".concat(
                                                pageIndex,
                                                " has no ref.",
                                             ),
                                          );
                                          hasNothingToUpdate = true;
                                          return _context27.a(3, 7);
                                       case 5:
                                          _iterator102 =
                                             _createForOfIteratorHelper(_elements2);
                                          try {
                                             for (
                                                _iterator102.s();
                                                !(_step102 = _iterator102.n()).done;

                                             ) {
                                                _element2 = _step102.value;
                                                if (
                                                   (_element2$accessibili =
                                                      _element2.accessibilityData) !== null &&
                                                   _element2$accessibili !== void 0 &&
                                                   _element2$accessibili.type
                                                ) {
                                                   _element2.parentTreeId = nextKey++;
                                                   hasNothingToUpdate = false;
                                                }
                                             }
                                          } catch (err) {
                                             _iterator102.e(err);
                                          } finally {
                                             _iterator102.f();
                                          }
                                       case 6:
                                          _context27.n = 3;
                                          break;
                                       case 7:
                                          _context27.n = 9;
                                          break;
                                       case 8:
                                          _context27.p = 8;
                                          _t25 = _context27.v;
                                          _iterator99.e(_t25);
                                       case 9:
                                          _context27.p = 9;
                                          _iterator99.f();
                                          return _context27.f(9);
                                       case 10:
                                          if (!hasNothingToUpdate) {
                                             _context27.n = 11;
                                             break;
                                          }
                                          _iterator100 = _createForOfIteratorHelper(
                                             newAnnotationsByPage.values(),
                                          );
                                          try {
                                             for (
                                                _iterator100.s();
                                                !(_step100 = _iterator100.n()).done;

                                             ) {
                                                elements = _step100.value;
                                                _iterator101 =
                                                   _createForOfIteratorHelper(elements);
                                                try {
                                                   for (
                                                      _iterator101.s();
                                                      !(_step101 = _iterator101.n()).done;

                                                   ) {
                                                      element = _step101.value;
                                                      delete element.parentTreeId;
                                                   }
                                                } catch (err) {
                                                   _iterator101.e(err);
                                                } finally {
                                                   _iterator101.f();
                                                }
                                             }
                                          } catch (err) {
                                             _iterator100.e(err);
                                          } finally {
                                             _iterator100.f();
                                          }
                                          return _context27.a(2, false);
                                       case 11:
                                          return _context27.a(2, true);
                                    }
                              },
                              _callee24,
                              null,
                              [[2, 8, 9, 10]],
                           );
                        }),
                     );
                     function canCreateStructureTree(_x78) {
                        return _canCreateStructureTree.apply(this, arguments);
                     }
                     return canCreateStructureTree;
                  })(),
               },
               {
                  key: "createStructureTree",
                  value: (function () {
                     var _createStructureTree = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee25(_ref77) {
                           var newAnnotationsByPage,
                              xref,
                              catalogRef,
                              pdfManager,
                              newRefs,
                              root,
                              cache,
                              structTreeRootRef,
                              structTreeRoot,
                              parentTreeRef,
                              kids,
                              parentTree,
                              nums,
                              nextKey,
                              buffer,
                              _iterator103,
                              _step103,
                              _step103$value,
                              ref,
                              obj,
                              _t26;
                           return _regenerator().w(
                              function (_context28) {
                                 while (1)
                                    switch ((_context28.p = _context28.n)) {
                                       case 0:
                                          ((newAnnotationsByPage =
                                             _ref77.newAnnotationsByPage),
                                             (xref = _ref77.xref),
                                             (catalogRef = _ref77.catalogRef),
                                             (pdfManager = _ref77.pdfManager),
                                             (newRefs = _ref77.newRefs));
                                          root = pdfManager.catalog.cloneDict();
                                          cache = new RefSetCache();
                                          cache.put(catalogRef, root);
                                          structTreeRootRef = xref.getNewTemporaryRef();
                                          root.set("StructTreeRoot", structTreeRootRef);
                                          structTreeRoot = new Dict(xref);
                                          structTreeRoot.set(
                                             "Type",
                                             Name.get("StructTreeRoot"),
                                          );
                                          parentTreeRef = xref.getNewTemporaryRef();
                                          structTreeRoot.set("ParentTree", parentTreeRef);
                                          kids = [];
                                          structTreeRoot.set("K", kids);
                                          cache.put(structTreeRootRef, structTreeRoot);
                                          parentTree = new Dict(xref);
                                          nums = [];
                                          parentTree.set("Nums", nums);
                                          _context28.n = 1;
                                          return _assertClassBrand(
                                             StructTreeRoot,
                                             this,
                                             _writeKids,
                                          ).call(this, {
                                             newAnnotationsByPage: newAnnotationsByPage,
                                             structTreeRootRef: structTreeRootRef,
                                             kids: kids,
                                             nums: nums,
                                             xref: xref,
                                             pdfManager: pdfManager,
                                             cache: cache,
                                          });
                                       case 1:
                                          nextKey = _context28.v;
                                          structTreeRoot.set("ParentTreeNextKey", nextKey);
                                          cache.put(parentTreeRef, parentTree);
                                          buffer = [];
                                          _iterator103 = _createForOfIteratorHelper(
                                             cache.items(),
                                          );
                                          _context28.p = 2;
                                          _iterator103.s();
                                       case 3:
                                          if ((_step103 = _iterator103.n()).done) {
                                             _context28.n = 6;
                                             break;
                                          }
                                          ((_step103$value = _slicedToArray(
                                             _step103.value,
                                             2,
                                          )),
                                             (ref = _step103$value[0]),
                                             (obj = _step103$value[1]));
                                          buffer.length = 0;
                                          _context28.n = 4;
                                          return writeObject(ref, obj, buffer, xref);
                                       case 4:
                                          newRefs.push({ ref: ref, data: buffer.join("") });
                                       case 5:
                                          _context28.n = 3;
                                          break;
                                       case 6:
                                          _context28.n = 8;
                                          break;
                                       case 7:
                                          _context28.p = 7;
                                          _t26 = _context28.v;
                                          _iterator103.e(_t26);
                                       case 8:
                                          _context28.p = 8;
                                          _iterator103.f();
                                          return _context28.f(8);
                                       case 9:
                                          return _context28.a(2);
                                    }
                              },
                              _callee25,
                              this,
                              [[2, 7, 8, 9]],
                           );
                        }),
                     );
                     function createStructureTree(_x79) {
                        return _createStructureTree.apply(this, arguments);
                     }
                     return createStructureTree;
                  })(),
               },
            ],
         );
      })();
      _StructTreeRoot = StructTreeRoot;
      function _addIdToPage(pageRef, id, type) {
         if (!(pageRef instanceof Ref) || id < 0) {
            return;
         }
         this.structParentIds || (this.structParentIds = new RefSetCache());
         var ids = this.structParentIds.get(pageRef);
         if (!ids) {
            ids = [];
            this.structParentIds.put(pageRef, ids);
         }
         ids.push([id, type]);
      }
      function _writeKids(_x202) {
         return _writeKids3.apply(this, arguments);
      }
      function _writeKids3() {
         _writeKids3 = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(function _callee96(_ref131) {
               var newAnnotationsByPage,
                  structTreeRootRef,
                  kids,
                  nums,
                  xref,
                  pdfManager,
                  cache,
                  objr,
                  nextKey,
                  _iterator249,
                  _step249,
                  _step249$value,
                  _pageIndex6,
                  elements,
                  _yield$pdfManager$get4,
                  pageRef,
                  isPageRef,
                  _iterator250,
                  _step250,
                  _step250$value,
                  accessibilityData,
                  ref,
                  parentTreeId,
                  structTreeParent,
                  type,
                  title,
                  lang,
                  alt,
                  expanded,
                  actualText,
                  tagRef,
                  tagDict,
                  objDict,
                  _t80,
                  _t81;
               return _regenerator().w(
                  function (_context113) {
                     while (1)
                        switch ((_context113.p = _context113.n)) {
                           case 0:
                              ((newAnnotationsByPage = _ref131.newAnnotationsByPage),
                                 (structTreeRootRef = _ref131.structTreeRootRef),
                                 (kids = _ref131.kids),
                                 (nums = _ref131.nums),
                                 (xref = _ref131.xref),
                                 (pdfManager = _ref131.pdfManager),
                                 (cache = _ref131.cache));
                              objr = Name.get("OBJR");
                              nextKey = -Infinity;
                              _iterator249 =
                                 _createForOfIteratorHelper(newAnnotationsByPage);
                              _context113.p = 1;
                              _iterator249.s();
                           case 2:
                              if ((_step249 = _iterator249.n()).done) {
                                 _context113.n = 13;
                                 break;
                              }
                              ((_step249$value = _slicedToArray(_step249.value, 2)),
                                 (_pageIndex6 = _step249$value[0]),
                                 (elements = _step249$value[1]));
                              _context113.n = 3;
                              return pdfManager.getPage(_pageIndex6);
                           case 3:
                              _yield$pdfManager$get4 = _context113.v;
                              pageRef = _yield$pdfManager$get4.ref;
                              isPageRef = pageRef instanceof Ref;
                              _iterator250 = _createForOfIteratorHelper(elements);
                              _context113.p = 4;
                              _iterator250.s();
                           case 5:
                              if ((_step250 = _iterator250.n()).done) {
                                 _context113.n = 9;
                                 break;
                              }
                              ((_step250$value = _step250.value),
                                 (accessibilityData = _step250$value.accessibilityData),
                                 (ref = _step250$value.ref),
                                 (parentTreeId = _step250$value.parentTreeId),
                                 (structTreeParent = _step250$value.structTreeParent));
                              if (
                                 accessibilityData !== null &&
                                 accessibilityData !== void 0 &&
                                 accessibilityData.type
                              ) {
                                 _context113.n = 6;
                                 break;
                              }
                              return _context113.a(3, 8);
                           case 6:
                              ((type = accessibilityData.type),
                                 (title = accessibilityData.title),
                                 (lang = accessibilityData.lang),
                                 (alt = accessibilityData.alt),
                                 (expanded = accessibilityData.expanded),
                                 (actualText = accessibilityData.actualText));
                              nextKey = Math.max(nextKey, parentTreeId);
                              tagRef = xref.getNewTemporaryRef();
                              tagDict = new Dict(xref);
                              tagDict.set("S", Name.get(type));
                              if (title) {
                                 tagDict.set("T", title);
                              }
                              if (lang) {
                                 tagDict.set("Lang", lang);
                              }
                              if (alt) {
                                 tagDict.set("Alt", alt);
                              }
                              if (expanded) {
                                 tagDict.set("E", expanded);
                              }
                              if (actualText) {
                                 tagDict.set("ActualText", actualText);
                              }
                              _context113.n = 7;
                              return _assertClassBrand(
                                 _StructTreeRoot,
                                 this,
                                 _updateParentTag,
                              ).call(this, {
                                 structTreeParent: structTreeParent,
                                 tagDict: tagDict,
                                 newTagRef: tagRef,
                                 structTreeRootRef: structTreeRootRef,
                                 fallbackKids: kids,
                                 xref: xref,
                                 cache: cache,
                              });
                           case 7:
                              objDict = new Dict(xref);
                              tagDict.set("K", objDict);
                              objDict.set("Type", objr);
                              if (isPageRef) {
                                 objDict.set("Pg", pageRef);
                              }
                              objDict.set("Obj", ref);
                              cache.put(tagRef, tagDict);
                              nums.push(parentTreeId, tagRef);
                           case 8:
                              _context113.n = 5;
                              break;
                           case 9:
                              _context113.n = 11;
                              break;
                           case 10:
                              _context113.p = 10;
                              _t80 = _context113.v;
                              _iterator250.e(_t80);
                           case 11:
                              _context113.p = 11;
                              _iterator250.f();
                              return _context113.f(11);
                           case 12:
                              _context113.n = 2;
                              break;
                           case 13:
                              _context113.n = 15;
                              break;
                           case 14:
                              _context113.p = 14;
                              _t81 = _context113.v;
                              _iterator249.e(_t81);
                           case 15:
                              _context113.p = 15;
                              _iterator249.f();
                              return _context113.f(15);
                           case 16:
                              return _context113.a(2, nextKey + 1);
                        }
                  },
                  _callee96,
                  this,
                  [
                     [4, 10, 11, 12],
                     [1, 14, 15, 16],
                  ],
               );
            }),
         );
         return _writeKids3.apply(this, arguments);
      }
      function _collectParents(_ref132) {
         var elements = _ref132.elements,
            xref = _ref132.xref,
            pageDict = _ref132.pageDict,
            numberTree = _ref132.numberTree;
         var idToElements = new Map();
         var _iterator241 = _createForOfIteratorHelper(elements),
            _step241;
         try {
            for (_iterator241.s(); !(_step241 = _iterator241.n()).done; ) {
               var element = _step241.value;
               if (element.structTreeParentId) {
                  var _id = parseInt(element.structTreeParentId.split("_mc")[1], 10);
                  var elems = idToElements.get(_id);
                  if (!elems) {
                     elems = [];
                     idToElements.set(_id, elems);
                  }
                  elems.push(element);
               }
            }
         } catch (err) {
            _iterator241.e(err);
         } finally {
            _iterator241.f();
         }
         var id = pageDict.get("StructParents");
         if (!Number.isInteger(id)) {
            return;
         }
         var parentArray = numberTree.get(id);
         var updateElement = function updateElement(kid, pageKid, kidRef) {
            var elems = idToElements.get(kid);
            if (elems) {
               var parentRef = pageKid.getRaw("P");
               var parentDict = xref.fetchIfRef(parentRef);
               if (parentRef instanceof Ref && parentDict instanceof Dict) {
                  var params = { ref: kidRef, dict: pageKid };
                  var _iterator242 = _createForOfIteratorHelper(elems),
                     _step242;
                  try {
                     for (_iterator242.s(); !(_step242 = _iterator242.n()).done; ) {
                        var element = _step242.value;
                        element.structTreeParent = params;
                     }
                  } catch (err) {
                     _iterator242.e(err);
                  } finally {
                     _iterator242.f();
                  }
               }
               return true;
            }
            return false;
         };
         var _iterator243 = _createForOfIteratorHelper(parentArray),
            _step243;
         try {
            for (_iterator243.s(); !(_step243 = _iterator243.n()).done; ) {
               var kidRef = _step243.value;
               if (!(kidRef instanceof Ref)) {
                  continue;
               }
               var pageKid = xref.fetch(kidRef);
               var k = pageKid.get("K");
               if (Number.isInteger(k)) {
                  updateElement(k, pageKid, kidRef);
                  continue;
               }
               if (!Array.isArray(k)) {
                  continue;
               }
               var _iterator244 = _createForOfIteratorHelper(k),
                  _step244;
               try {
                  for (_iterator244.s(); !(_step244 = _iterator244.n()).done; ) {
                     var kid = _step244.value;
                     kid = xref.fetchIfRef(kid);
                     if (
                        Number.isInteger(kid) &&
                        updateElement(kid, pageKid, kidRef)
                     ) {
                        break;
                     }
                     if (!(kid instanceof Dict)) {
                        continue;
                     }
                     if (!isName(kid.get("Type"), "MCR")) {
                        break;
                     }
                     var mcid = kid.get("MCID");
                     if (
                        Number.isInteger(mcid) &&
                        updateElement(mcid, pageKid, kidRef)
                     ) {
                        break;
                     }
                  }
               } catch (err) {
                  _iterator244.e(err);
               } finally {
                  _iterator244.f();
               }
            }
         } catch (err) {
            _iterator243.e(err);
         } finally {
            _iterator243.f();
         }
      }
      function _updateParentTag(_x203) {
         return _updateParentTag3.apply(this, arguments);
      }
      function _updateParentTag3() {
         _updateParentTag3 = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(function _callee97(_ref133) {
               var structTreeParent,
                  tagDict,
                  newTagRef,
                  structTreeRootRef,
                  fallbackKids,
                  xref,
                  cache,
                  ref,
                  parentRef,
                  parentDict,
                  cachedParentDict,
                  parentKidsRaw,
                  cachedParentKids,
                  parentKidsRef,
                  index;
               return _regenerator().w(function (_context114) {
                  while (1)
                     switch (_context114.n) {
                        case 0:
                           ((structTreeParent = _ref133.structTreeParent),
                              (tagDict = _ref133.tagDict),
                              (newTagRef = _ref133.newTagRef),
                              (structTreeRootRef = _ref133.structTreeRootRef),
                              (fallbackKids = _ref133.fallbackKids),
                              (xref = _ref133.xref),
                              (cache = _ref133.cache));
                           ref = null;
                           if (structTreeParent) {
                              ref = structTreeParent.ref;
                              parentRef =
                                 structTreeParent.dict.getRaw("P") || structTreeRootRef;
                           } else {
                              parentRef = structTreeRootRef;
                           }
                           tagDict.set("P", parentRef);
                           parentDict = xref.fetchIfRef(parentRef);
                           if (parentDict) {
                              _context114.n = 1;
                              break;
                           }
                           fallbackKids.push(newTagRef);
                           return _context114.a(2);
                        case 1:
                           cachedParentDict = cache.get(parentRef);
                           if (!cachedParentDict) {
                              cachedParentDict = parentDict.clone();
                              cache.put(parentRef, cachedParentDict);
                           }
                           parentKidsRaw = cachedParentDict.getRaw("K");
                           cachedParentKids =
                              parentKidsRaw instanceof Ref
                                 ? cache.get(parentKidsRaw)
                                 : null;
                           if (!cachedParentKids) {
                              cachedParentKids = xref.fetchIfRef(parentKidsRaw);
                              cachedParentKids = Array.isArray(cachedParentKids)
                                 ? cachedParentKids.slice()
                                 : [parentKidsRaw];
                              parentKidsRef = xref.getNewTemporaryRef();
                              cachedParentDict.set("K", parentKidsRef);
                              cache.put(parentKidsRef, cachedParentKids);
                           }
                           index = cachedParentKids.indexOf(ref);
                           cachedParentKids.splice(
                              index >= 0 ? index + 1 : cachedParentKids.length,
                              0,
                              newTagRef,
                           );
                        case 2:
                           return _context114.a(2);
                     }
               }, _callee97);
            }),
         );
         return _updateParentTag3.apply(this, arguments);
      }
      var StructElementNode = /*#__PURE__*/ (function () {
         function StructElementNode(tree, dict) {
            _classCallCheck(this, StructElementNode);
            this.tree = tree;
            this.dict = dict;
            this.kids = [];
            this.parseKids();
         }
         return _createClass(StructElementNode, [
            {
               key: "role",
               get: function get() {
                  var nameObj = this.dict.get("S");
                  var name = nameObj instanceof Name ? nameObj.name : "";
                  var root = this.tree.root;
                  if (root.roleMap.has(name)) {
                     return root.roleMap.get(name);
                  }
                  return name;
               },
            },
            {
               key: "parseKids",
               value: function parseKids() {
                  var pageObjId = null;
                  var objRef = this.dict.getRaw("Pg");
                  if (objRef instanceof Ref) {
                     pageObjId = objRef.toString();
                  }
                  var kids = this.dict.get("K");
                  if (Array.isArray(kids)) {
                     var _iterator104 = _createForOfIteratorHelper(kids),
                        _step104;
                     try {
                        for (_iterator104.s(); !(_step104 = _iterator104.n()).done; ) {
                           var kid = _step104.value;
                           var element = this.parseKid(pageObjId, kid);
                           if (element) {
                              this.kids.push(element);
                           }
                        }
                     } catch (err) {
                        _iterator104.e(err);
                     } finally {
                        _iterator104.f();
                     }
                  } else {
                     var _element3 = this.parseKid(pageObjId, kids);
                     if (_element3) {
                        this.kids.push(_element3);
                     }
                  }
               },
            },
            {
               key: "parseKid",
               value: function parseKid(pageObjId, kid) {
                  if (Number.isInteger(kid)) {
                     if (this.tree.pageDict.objId !== pageObjId) {
                        return null;
                     }
                     return new StructElement({
                        type: StructElementType.PAGE_CONTENT,
                        mcid: kid,
                        pageObjId: pageObjId,
                     });
                  }
                  var kidDict = null;
                  if (kid instanceof Ref) {
                     kidDict = this.dict.xref.fetch(kid);
                  } else if (kid instanceof Dict) {
                     kidDict = kid;
                  }
                  if (!kidDict) {
                     return null;
                  }
                  var pageRef = kidDict.getRaw("Pg");
                  if (pageRef instanceof Ref) {
                     pageObjId = pageRef.toString();
                  }
                  var type =
                     kidDict.get("Type") instanceof Name
                        ? kidDict.get("Type").name
                        : null;
                  if (type === "MCR") {
                     if (this.tree.pageDict.objId !== pageObjId) {
                        return null;
                     }
                     var kidRef = kidDict.getRaw("Stm");
                     return new StructElement({
                        type: StructElementType.STREAM_CONTENT,
                        refObjId: kidRef instanceof Ref ? kidRef.toString() : null,
                        pageObjId: pageObjId,
                        mcid: kidDict.get("MCID"),
                     });
                  }
                  if (type === "OBJR") {
                     if (this.tree.pageDict.objId !== pageObjId) {
                        return null;
                     }
                     var _kidRef = kidDict.getRaw("Obj");
                     return new StructElement({
                        type: StructElementType.OBJECT,
                        refObjId: _kidRef instanceof Ref ? _kidRef.toString() : null,
                        pageObjId: pageObjId,
                     });
                  }
                  return new StructElement({
                     type: StructElementType.ELEMENT,
                     dict: kidDict,
                  });
               },
            },
         ]);
      })();
      var StructElement = /*#__PURE__*/ _createClass(
         function StructElement(_ref78) {
            var type = _ref78.type,
               _ref78$dict = _ref78.dict,
               dict = _ref78$dict === void 0 ? null : _ref78$dict,
               _ref78$mcid = _ref78.mcid,
               mcid = _ref78$mcid === void 0 ? null : _ref78$mcid,
               _ref78$pageObjId = _ref78.pageObjId,
               pageObjId = _ref78$pageObjId === void 0 ? null : _ref78$pageObjId,
               _ref78$refObjId = _ref78.refObjId,
               refObjId = _ref78$refObjId === void 0 ? null : _ref78$refObjId;
            _classCallCheck(this, StructElement);
            this.type = type;
            this.dict = dict;
            this.mcid = mcid;
            this.pageObjId = pageObjId;
            this.refObjId = refObjId;
            this.parentNode = null;
         },
      );
      var StructTreePage = /*#__PURE__*/ (function () {
         function StructTreePage(structTreeRoot, pageDict) {
            _classCallCheck(this, StructTreePage);
            this.root = structTreeRoot;
            this.rootDict = structTreeRoot ? structTreeRoot.dict : null;
            this.pageDict = pageDict;
            this.nodes = [];
         }
         return _createClass(StructTreePage, [
            {
               key: "parse",
               value: function parse(pageRef) {
                  var _this$root$structPare;
                  if (!this.root || !this.rootDict) {
                     return;
                  }
                  var parentTree = this.rootDict.get("ParentTree");
                  if (!parentTree) {
                     return;
                  }
                  var id = this.pageDict.get("StructParents");
                  var ids =
                     pageRef instanceof Ref &&
                     ((_this$root$structPare = this.root.structParentIds) === null ||
                     _this$root$structPare === void 0
                        ? void 0
                        : _this$root$structPare.get(pageRef));
                  if (!Number.isInteger(id) && !ids) {
                     return;
                  }
                  var map = new Map();
                  var numberTree = new NumberTree(parentTree, this.rootDict.xref);
                  if (Number.isInteger(id)) {
                     var parentArray = numberTree.get(id);
                     if (Array.isArray(parentArray)) {
                        var _iterator105 = _createForOfIteratorHelper(parentArray),
                           _step105;
                        try {
                           for (
                              _iterator105.s();
                              !(_step105 = _iterator105.n()).done;

                           ) {
                              var ref = _step105.value;
                              if (ref instanceof Ref) {
                                 this.addNode(this.rootDict.xref.fetch(ref), map);
                              }
                           }
                        } catch (err) {
                           _iterator105.e(err);
                        } finally {
                           _iterator105.f();
                        }
                     }
                  }
                  if (!ids) {
                     return;
                  }
                  var _iterator106 = _createForOfIteratorHelper(ids),
                     _step106;
                  try {
                     for (_iterator106.s(); !(_step106 = _iterator106.n()).done; ) {
                        var _step106$value = _slicedToArray(_step106.value, 2),
                           elemId = _step106$value[0],
                           type = _step106$value[1];
                        var obj = numberTree.get(elemId);
                        if (obj) {
                           var _elem$kids;
                           var elem = this.addNode(
                              this.rootDict.xref.fetchIfRef(obj),
                              map,
                           );
                           if (
                              (elem === null ||
                              elem === void 0 ||
                              (_elem$kids = elem.kids) === null ||
                              _elem$kids === void 0
                                 ? void 0
                                 : _elem$kids.length) === 1 &&
                              elem.kids[0].type === StructElementType.OBJECT
                           ) {
                              elem.kids[0].type = type;
                           }
                        }
                     }
                  } catch (err) {
                     _iterator106.e(err);
                  } finally {
                     _iterator106.f();
                  }
               },
            },
            {
               key: "addNode",
               value: function addNode(dict, map) {
                  var level =
                     arguments.length > 2 && arguments[2] !== undefined
                        ? arguments[2]
                        : 0;
                  if (level > MAX_DEPTH) {
                     warn("StructTree MAX_DEPTH reached.");
                     return null;
                  }
                  if (map.has(dict)) {
                     return map.get(dict);
                  }
                  var element = new StructElementNode(this, dict);
                  map.set(dict, element);
                  var parent = dict.get("P");
                  if (!parent || isName(parent.get("Type"), "StructTreeRoot")) {
                     if (!this.addTopLevelNode(dict, element)) {
                        map["delete"](dict);
                     }
                     return element;
                  }
                  var parentNode = this.addNode(parent, map, level + 1);
                  if (!parentNode) {
                     return element;
                  }
                  var save = false;
                  var _iterator107 = _createForOfIteratorHelper(parentNode.kids),
                     _step107;
                  try {
                     for (_iterator107.s(); !(_step107 = _iterator107.n()).done; ) {
                        var kid = _step107.value;
                        if (
                           kid.type === StructElementType.ELEMENT &&
                           kid.dict === dict
                        ) {
                           kid.parentNode = element;
                           save = true;
                        }
                     }
                  } catch (err) {
                     _iterator107.e(err);
                  } finally {
                     _iterator107.f();
                  }
                  if (!save) {
                     map["delete"](dict);
                  }
                  return element;
               },
            },
            {
               key: "addTopLevelNode",
               value: function addTopLevelNode(dict, element) {
                  var obj = this.rootDict.get("K");
                  if (!obj) {
                     return false;
                  }
                  if (obj instanceof Dict) {
                     if (obj.objId !== dict.objId) {
                        return false;
                     }
                     this.nodes[0] = element;
                     return true;
                  }
                  if (!Array.isArray(obj)) {
                     return true;
                  }
                  var save = false;
                  for (var i = 0; i < obj.length; i++) {
                     var kidRef = obj[i];
                     if (
                        (kidRef === null || kidRef === void 0
                           ? void 0
                           : kidRef.toString()) === dict.objId
                     ) {
                        this.nodes[i] = element;
                        save = true;
                     }
                  }
                  return save;
               },
            },
            {
               key: "serializable",
               get: function get() {
                  function nodeToSerializable(node, parent) {
                     var level =
                        arguments.length > 2 && arguments[2] !== undefined
                           ? arguments[2]
                           : 0;
                     if (level > MAX_DEPTH) {
                        warn("StructTree too deep to be fully serialized.");
                        return;
                     }
                     var obj = Object.create(null);
                     obj.role = node.role;
                     obj.children = [];
                     parent.children.push(obj);
                     var alt = node.dict.get("Alt");
                     if (typeof alt === "string") {
                        obj.alt = stringToPDFString(alt);
                     }
                     var lang = node.dict.get("Lang");
                     if (typeof lang === "string") {
                        obj.lang = stringToPDFString(lang);
                     }
                     var _iterator108 = _createForOfIteratorHelper(node.kids),
                        _step108;
                     try {
                        for (_iterator108.s(); !(_step108 = _iterator108.n()).done; ) {
                           var kid = _step108.value;
                           var kidElement =
                              kid.type === StructElementType.ELEMENT
                                 ? kid.parentNode
                                 : null;
                           if (kidElement) {
                              nodeToSerializable(kidElement, obj, level + 1);
                              continue;
                           } else if (
                              kid.type === StructElementType.PAGE_CONTENT ||
                              kid.type === StructElementType.STREAM_CONTENT
                           ) {
                              obj.children.push({
                                 type: "content",
                                 id: "p".concat(kid.pageObjId, "_mc").concat(kid.mcid),
                              });
                           } else if (kid.type === StructElementType.OBJECT) {
                              obj.children.push({ type: "object", id: kid.refObjId });
                           } else if (kid.type === StructElementType.ANNOTATION) {
                              obj.children.push({
                                 type: "annotation",
                                 id: "".concat(AnnotationPrefix).concat(kid.refObjId),
                              });
                           }
                        }
                     } catch (err) {
                        _iterator108.e(err);
                     } finally {
                        _iterator108.f();
                     }
                  }
                  var root = Object.create(null);
                  root.children = [];
                  root.role = "Root";
                  var _iterator109 = _createForOfIteratorHelper(this.nodes),
                     _step109;
                  try {
                     for (_iterator109.s(); !(_step109 = _iterator109.n()).done; ) {
                        var child = _step109.value;
                        if (!child) {
                           continue;
                        }
                        nodeToSerializable(child, root);
                     }
                  } catch (err) {
                     _iterator109.e(err);
                  } finally {
                     _iterator109.f();
                  }
                  return root;
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/catalog.js
      function isValidExplicitDest(dest) {
         if (!Array.isArray(dest) || dest.length < 2) {
            return false;
         }
         var _dest = _toArray(dest),
            page = _dest[0],
            zoom = _dest[1],
            args = _dest.slice(2);
         if (!(page instanceof Ref) && !Number.isInteger(page)) {
            return false;
         }
         if (!(zoom instanceof Name)) {
            return false;
         }
         var allowNull = true;
         switch (zoom.name) {
            case "XYZ":
               if (args.length !== 3) {
                  return false;
               }
               break;
            case "Fit":
            case "FitB":
               return args.length === 0;
            case "FitH":
            case "FitBH":
            case "FitV":
            case "FitBV":
               if (args.length !== 1) {
                  return false;
               }
               break;
            case "FitR":
               if (args.length !== 4) {
                  return false;
               }
               allowNull = false;
               break;
            default:
               return false;
         }
         var _iterator110 = _createForOfIteratorHelper(args),
            _step110;
         try {
            for (_iterator110.s(); !(_step110 = _iterator110.n()).done; ) {
               var arg = _step110.value;
               if (!(typeof arg === "number" || (allowNull && arg === null))) {
                  return false;
               }
            }
         } catch (err) {
            _iterator110.e(err);
         } finally {
            _iterator110.f();
         }
         return true;
      }
      function fetchDest(dest) {
         if (dest instanceof Dict) {
            dest = dest.get("D");
         }
         return isValidExplicitDest(dest) ? dest : null;
      }
      function fetchRemoteDest(action) {
         var dest = action.get("D");
         if (dest) {
            if (dest instanceof Name) {
               dest = dest.name;
            }
            if (typeof dest === "string") {
               return stringToPDFString(dest);
            } else if (isValidExplicitDest(dest)) {
               return JSON.stringify(dest);
            }
         }
         return null;
      }
      var _Catalog_brand = /*#__PURE__*/ new WeakSet();
      var Catalog = /*#__PURE__*/ (function () {
         function Catalog(pdfManager, _xref) {
            _classCallCheck(this, Catalog);
            _classPrivateMethodInitSpec(this, _Catalog_brand);
            this.pdfManager = pdfManager;
            this.xref = _xref;
            this._catDict = _xref.getCatalogObj();
            if (!(this._catDict instanceof Dict)) {
               throw new FormatError("Catalog object is not a dictionary.");
            }
            this.toplevelPagesDict;
            this._actualNumPages = null;
            this.fontCache = new RefSetCache();
            this.builtInCMapCache = new Map();
            this.standardFontDataCache = new Map();
            this.globalImageCache = new GlobalImageCache();
            this.pageKidsCountCache = new RefSetCache();
            this.pageIndexCache = new RefSetCache();
            this.nonBlendModesSet = new RefSet();
            this.systemFontCache = new Map();
         }
         return _createClass(
            Catalog,
            [
               {
                  key: "cloneDict",
                  value: function cloneDict() {
                     return this._catDict.clone();
                  },
               },
               {
                  key: "version",
                  get: function get() {
                     var version = this._catDict.get("Version");
                     if (version instanceof Name) {
                        if (PDF_VERSION_REGEXP.test(version.name)) {
                           return shadow(this, "version", version.name);
                        }
                        warn("Invalid PDF catalog version: ".concat(version.name));
                     }
                     return shadow(this, "version", null);
                  },
               },
               {
                  key: "lang",
                  get: function get() {
                     var lang = this._catDict.get("Lang");
                     return shadow(
                        this,
                        "lang",
                        typeof lang === "string" ? stringToPDFString(lang) : null,
                     );
                  },
               },
               {
                  key: "needsRendering",
                  get: function get() {
                     var needsRendering = this._catDict.get("NeedsRendering");
                     return shadow(
                        this,
                        "needsRendering",
                        typeof needsRendering === "boolean" ? needsRendering : false,
                     );
                  },
               },
               {
                  key: "collection",
                  get: function get() {
                     var collection = null;
                     try {
                        var obj = this._catDict.get("Collection");
                        if (obj instanceof Dict && obj.size > 0) {
                           collection = obj;
                        }
                     } catch (ex) {
                        if (ex instanceof MissingDataException) {
                           throw ex;
                        }
                        info(
                           "Cannot fetch Collection entry; assuming no collection is present.",
                        );
                     }
                     return shadow(this, "collection", collection);
                  },
               },
               {
                  key: "acroForm",
                  get: function get() {
                     var acroForm = null;
                     try {
                        var obj = this._catDict.get("AcroForm");
                        if (obj instanceof Dict && obj.size > 0) {
                           acroForm = obj;
                        }
                     } catch (ex) {
                        if (ex instanceof MissingDataException) {
                           throw ex;
                        }
                        info(
                           "Cannot fetch AcroForm entry; assuming no forms are present.",
                        );
                     }
                     return shadow(this, "acroForm", acroForm);
                  },
               },
               {
                  key: "acroFormRef",
                  get: function get() {
                     var value = this._catDict.getRaw("AcroForm");
                     return shadow(
                        this,
                        "acroFormRef",
                        value instanceof Ref ? value : null,
                     );
                  },
               },
               {
                  key: "metadata",
                  get: function get() {
                     var streamRef = this._catDict.getRaw("Metadata");
                     if (!(streamRef instanceof Ref)) {
                        return shadow(this, "metadata", null);
                     }
                     var metadata = null;
                     try {
                        var _this$xref$encrypt;
                        var stream = this.xref.fetch(
                           streamRef,
                           !(
                              (_this$xref$encrypt = this.xref.encrypt) !== null &&
                              _this$xref$encrypt !== void 0 &&
                              _this$xref$encrypt.encryptMetadata
                           ),
                        );
                        if (
                           stream instanceof BaseStream &&
                           stream.dict instanceof Dict
                        ) {
                           var type = stream.dict.get("Type");
                           var subtype = stream.dict.get("Subtype");
                           if (isName(type, "Metadata") && isName(subtype, "XML")) {
                              var data = stringToUTF8String(stream.getString());
                              if (data) {
                                 metadata = new MetadataParser(data).serializable;
                              }
                           }
                        }
                     } catch (ex) {
                        if (ex instanceof MissingDataException) {
                           throw ex;
                        }
                        info('Skipping invalid Metadata: "'.concat(ex, '".'));
                     }
                     return shadow(this, "metadata", metadata);
                  },
               },
               {
                  key: "markInfo",
                  get: function get() {
                     var markInfo = null;
                     try {
                        markInfo = this._readMarkInfo();
                     } catch (ex) {
                        if (ex instanceof MissingDataException) {
                           throw ex;
                        }
                        warn("Unable to read mark info.");
                     }
                     return shadow(this, "markInfo", markInfo);
                  },
               },
               {
                  key: "_readMarkInfo",
                  value: function _readMarkInfo() {
                     var obj = this._catDict.get("MarkInfo");
                     if (!(obj instanceof Dict)) {
                        return null;
                     }
                     var markInfo = {
                        Marked: false,
                        UserProperties: false,
                        Suspects: false,
                     };
                     for (var key in markInfo) {
                        var value = obj.get(key);
                        if (typeof value === "boolean") {
                           markInfo[key] = value;
                        }
                     }
                     return markInfo;
                  },
               },
               {
                  key: "structTreeRoot",
                  get: function get() {
                     var structTree = null;
                     try {
                        structTree = this._readStructTreeRoot();
                     } catch (ex) {
                        if (ex instanceof MissingDataException) {
                           throw ex;
                        }
                        warn("Unable read to structTreeRoot info.");
                     }
                     return shadow(this, "structTreeRoot", structTree);
                  },
               },
               {
                  key: "_readStructTreeRoot",
                  value: function _readStructTreeRoot() {
                     var rawObj = this._catDict.getRaw("StructTreeRoot");
                     var obj = this.xref.fetchIfRef(rawObj);
                     if (!(obj instanceof Dict)) {
                        return null;
                     }
                     var root = new StructTreeRoot(obj, rawObj);
                     root.init();
                     return root;
                  },
               },
               {
                  key: "toplevelPagesDict",
                  get: function get() {
                     var pagesObj = this._catDict.get("Pages");
                     if (!(pagesObj instanceof Dict)) {
                        throw new FormatError("Invalid top-level pages dictionary.");
                     }
                     return shadow(this, "toplevelPagesDict", pagesObj);
                  },
               },
               {
                  key: "documentOutline",
                  get: function get() {
                     var obj = null;
                     try {
                        obj = this._readDocumentOutline();
                     } catch (ex) {
                        if (ex instanceof MissingDataException) {
                           throw ex;
                        }
                        warn("Unable to read document outline.");
                     }
                     return shadow(this, "documentOutline", obj);
                  },
               },
               {
                  key: "_readDocumentOutline",
                  value: function _readDocumentOutline() {
                     var obj = this._catDict.get("Outlines");
                     if (!(obj instanceof Dict)) {
                        return null;
                     }
                     obj = obj.getRaw("First");
                     if (!(obj instanceof Ref)) {
                        return null;
                     }
                     var root = { items: [] };
                     var queue = [{ obj: obj, parent: root }];
                     var processed = new RefSet();
                     processed.put(obj);
                     var xref = this.xref,
                        blackColor = new Uint8ClampedArray(3);
                     while (queue.length > 0) {
                        var i = queue.shift();
                        var outlineDict = xref.fetchIfRef(i.obj);
                        if (outlineDict === null) {
                           continue;
                        }
                        if (!outlineDict.has("Title")) {
                           warn("Invalid outline item encountered.");
                        }
                        var data = { url: null, dest: null, action: null };
                        Catalog.parseDestDictionary({
                           destDict: outlineDict,
                           resultObj: data,
                           docBaseUrl: this.baseUrl,
                           docAttachments: this.attachments,
                        });
                        var title = outlineDict.get("Title");
                        var flags = outlineDict.get("F") || 0;
                        var color = outlineDict.getArray("C");
                        var count = outlineDict.get("Count");
                        var rgbColor = blackColor;
                        if (
                           Array.isArray(color) &&
                           color.length === 3 &&
                           (color[0] !== 0 || color[1] !== 0 || color[2] !== 0)
                        ) {
                           rgbColor = ColorSpace.singletons.rgb.getRgb(color, 0);
                        }
                        var outlineItem = {
                           action: data.action,
                           attachment: data.attachment,
                           dest: data.dest,
                           url: data.url,
                           unsafeUrl: data.unsafeUrl,
                           newWindow: data.newWindow,
                           setOCGState: data.setOCGState,
                           title:
                              typeof title === "string" ? stringToPDFString(title) : "",
                           color: rgbColor,
                           count: Number.isInteger(count) ? count : undefined,
                           bold: !!(flags & 2),
                           italic: !!(flags & 1),
                           items: [],
                        };
                        i.parent.items.push(outlineItem);
                        obj = outlineDict.getRaw("First");
                        if (obj instanceof Ref && !processed.has(obj)) {
                           queue.push({ obj: obj, parent: outlineItem });
                           processed.put(obj);
                        }
                        obj = outlineDict.getRaw("Next");
                        if (obj instanceof Ref && !processed.has(obj)) {
                           queue.push({ obj: obj, parent: i.parent });
                           processed.put(obj);
                        }
                     }
                     return root.items.length > 0 ? root.items : null;
                  },
               },
               {
                  key: "permissions",
                  get: function get() {
                     var permissions = null;
                     try {
                        permissions = this._readPermissions();
                     } catch (ex) {
                        if (ex instanceof MissingDataException) {
                           throw ex;
                        }
                        warn("Unable to read permissions.");
                     }
                     return shadow(this, "permissions", permissions);
                  },
               },
               {
                  key: "_readPermissions",
                  value: function _readPermissions() {
                     var encrypt = this.xref.trailer.get("Encrypt");
                     if (!(encrypt instanceof Dict)) {
                        return null;
                     }
                     var flags = encrypt.get("P");
                     if (typeof flags !== "number") {
                        return null;
                     }
                     flags += Math.pow(2, 32);
                     var permissions = [];
                     for (var key in PermissionFlag) {
                        var value = PermissionFlag[key];
                        if (flags & value) {
                           permissions.push(value);
                        }
                     }
                     return permissions;
                  },
               },
               {
                  key: "optionalContentConfig",
                  get: function get() {
                     var config = null;
                     try {
                        var properties = this._catDict.get("OCProperties");
                        if (!properties) {
                           return shadow(this, "optionalContentConfig", null);
                        }
                        var defaultConfig = properties.get("D");
                        if (!defaultConfig) {
                           return shadow(this, "optionalContentConfig", null);
                        }
                        var groupsData = properties.get("OCGs");
                        if (!Array.isArray(groupsData)) {
                           return shadow(this, "optionalContentConfig", null);
                        }
                        var groups = [];
                        var groupRefs = new RefSet();
                        var _iterator111 = _createForOfIteratorHelper(groupsData),
                           _step111;
                        try {
                           for (
                              _iterator111.s();
                              !(_step111 = _iterator111.n()).done;

                           ) {
                              var groupRef = _step111.value;
                              if (!(groupRef instanceof Ref) || groupRefs.has(groupRef)) {
                                 continue;
                              }
                              groupRefs.put(groupRef);
                              groups.push(
                                 _assertClassBrand(
                                    _Catalog_brand,
                                    this,
                                    _readOptionalContentGroup,
                                 ).call(this, groupRef),
                              );
                           }
                        } catch (err) {
                           _iterator111.e(err);
                        } finally {
                           _iterator111.f();
                        }
                        config = _assertClassBrand(
                           _Catalog_brand,
                           this,
                           _readOptionalContentConfig,
                        ).call(this, defaultConfig, groupRefs);
                        config.groups = groups;
                     } catch (ex) {
                        if (ex instanceof MissingDataException) {
                           throw ex;
                        }
                        warn("Unable to read optional content config: ".concat(ex));
                     }
                     return shadow(this, "optionalContentConfig", config);
                  },
               },
               {
                  key: "setActualNumPages",
                  value: function setActualNumPages() {
                     var num =
                        arguments.length > 0 && arguments[0] !== undefined
                           ? arguments[0]
                           : null;
                     this._actualNumPages = num;
                  },
               },
               {
                  key: "hasActualNumPages",
                  get: function get() {
                     return this._actualNumPages !== null;
                  },
               },
               {
                  key: "_pagesCount",
                  get: function get() {
                     var obj = this.toplevelPagesDict.get("Count");
                     if (!Number.isInteger(obj)) {
                        throw new FormatError(
                           "Page count in top-level pages dictionary is not an integer.",
                        );
                     }
                     return shadow(this, "_pagesCount", obj);
                  },
               },
               {
                  key: "numPages",
                  get: function get() {
                     return this.hasActualNumPages
                        ? this._actualNumPages
                        : this._pagesCount;
                  },
               },
               {
                  key: "destinations",
                  get: function get() {
                     var obj = this._readDests(),
                        dests = Object.create(null);
                     if (obj instanceof NameTree) {
                        var _iterator112 = _createForOfIteratorHelper(obj.getAll()),
                           _step112;
                        try {
                           for (
                              _iterator112.s();
                              !(_step112 = _iterator112.n()).done;

                           ) {
                              var _step112$value = _slicedToArray(_step112.value, 2),
                                 key = _step112$value[0],
                                 value = _step112$value[1];
                              var dest = fetchDest(value);
                              if (dest) {
                                 dests[stringToPDFString(key)] = dest;
                              }
                           }
                        } catch (err) {
                           _iterator112.e(err);
                        } finally {
                           _iterator112.f();
                        }
                     } else if (obj instanceof Dict) {
                        obj.forEach(function (key, value) {
                           var dest = fetchDest(value);
                           if (dest) {
                              dests[key] = dest;
                           }
                        });
                     }
                     return shadow(this, "destinations", dests);
                  },
               },
               {
                  key: "getDestination",
                  value: function getDestination(id) {
                     var obj = this._readDests();
                     if (obj instanceof NameTree) {
                        var dest = fetchDest(obj.get(id));
                        if (dest) {
                           return dest;
                        }
                        var allDest = this.destinations[id];
                        if (allDest) {
                           warn(
                              'Found "'.concat(
                                 id,
                                 '" at an incorrect position in the NameTree.',
                              ),
                           );
                           return allDest;
                        }
                     } else if (obj instanceof Dict) {
                        var _dest2 = fetchDest(obj.get(id));
                        if (_dest2) {
                           return _dest2;
                        }
                     }
                     return null;
                  },
               },
               {
                  key: "_readDests",
                  value: function _readDests() {
                     var obj = this._catDict.get("Names");
                     if (obj !== null && obj !== void 0 && obj.has("Dests")) {
                        return new NameTree(obj.getRaw("Dests"), this.xref);
                     } else if (this._catDict.has("Dests")) {
                        return this._catDict.get("Dests");
                     }
                     return undefined;
                  },
               },
               {
                  key: "pageLabels",
                  get: function get() {
                     var obj = null;
                     try {
                        obj = this._readPageLabels();
                     } catch (ex) {
                        if (ex instanceof MissingDataException) {
                           throw ex;
                        }
                        warn("Unable to read page labels.");
                     }
                     return shadow(this, "pageLabels", obj);
                  },
               },
               {
                  key: "_readPageLabels",
                  value: function _readPageLabels() {
                     var obj = this._catDict.getRaw("PageLabels");
                     if (!obj) {
                        return null;
                     }
                     var pageLabels = new Array(this.numPages);
                     var style = null,
                        prefix = "";
                     var numberTree = new NumberTree(obj, this.xref);
                     var nums = numberTree.getAll();
                     var currentLabel = "",
                        currentIndex = 1;
                     for (var i = 0, ii = this.numPages; i < ii; i++) {
                        var labelDict = nums.get(i);
                        if (labelDict !== undefined) {
                           if (!(labelDict instanceof Dict)) {
                              throw new FormatError("PageLabel is not a dictionary.");
                           }
                           if (
                              labelDict.has("Type") &&
                              !isName(labelDict.get("Type"), "PageLabel")
                           ) {
                              throw new FormatError(
                                 "Invalid type in PageLabel dictionary.",
                              );
                           }
                           if (labelDict.has("S")) {
                              var s = labelDict.get("S");
                              if (!(s instanceof Name)) {
                                 throw new FormatError(
                                    "Invalid style in PageLabel dictionary.",
                                 );
                              }
                              style = s.name;
                           } else {
                              style = null;
                           }
                           if (labelDict.has("P")) {
                              var p = labelDict.get("P");
                              if (typeof p !== "string") {
                                 throw new FormatError(
                                    "Invalid prefix in PageLabel dictionary.",
                                 );
                              }
                              prefix = stringToPDFString(p);
                           } else {
                              prefix = "";
                           }
                           if (labelDict.has("St")) {
                              var st = labelDict.get("St");
                              if (!(Number.isInteger(st) && st >= 1)) {
                                 throw new FormatError(
                                    "Invalid start in PageLabel dictionary.",
                                 );
                              }
                              currentIndex = st;
                           } else {
                              currentIndex = 1;
                           }
                        }
                        switch (style) {
                           case "D":
                              currentLabel = currentIndex;
                              break;
                           case "R":
                           case "r":
                              currentLabel = toRomanNumerals(currentIndex, style === "r");
                              break;
                           case "A":
                           case "a":
                              var LIMIT = 26;
                              var A_UPPER_CASE = 0x41,
                                 A_LOWER_CASE = 0x61;
                              var baseCharCode =
                                 style === "a" ? A_LOWER_CASE : A_UPPER_CASE;
                              var letterIndex = currentIndex - 1;
                              var character = String.fromCharCode(
                                 baseCharCode + (letterIndex % LIMIT),
                              );
                              currentLabel = character.repeat(
                                 Math.floor(letterIndex / LIMIT) + 1,
                              );
                              break;
                           default:
                              if (style) {
                                 throw new FormatError(
                                    'Invalid style "'.concat(
                                       style,
                                       '" in PageLabel dictionary.',
                                    ),
                                 );
                              }
                              currentLabel = "";
                        }
                        pageLabels[i] = prefix + currentLabel;
                        currentIndex++;
                     }
                     return pageLabels;
                  },
               },
               {
                  key: "pageLayout",
                  get: function get() {
                     var obj = this._catDict.get("PageLayout");
                     var pageLayout = "";
                     if (obj instanceof Name) {
                        switch (obj.name) {
                           case "SinglePage":
                           case "OneColumn":
                           case "TwoColumnLeft":
                           case "TwoColumnRight":
                           case "TwoPageLeft":
                           case "TwoPageRight":
                              pageLayout = obj.name;
                        }
                     }
                     return shadow(this, "pageLayout", pageLayout);
                  },
               },
               {
                  key: "pageMode",
                  get: function get() {
                     var obj = this._catDict.get("PageMode");
                     var pageMode = "UseNone";
                     if (obj instanceof Name) {
                        switch (obj.name) {
                           case "UseNone":
                           case "UseOutlines":
                           case "UseThumbs":
                           case "FullScreen":
                           case "UseOC":
                           case "UseAttachments":
                              pageMode = obj.name;
                        }
                     }
                     return shadow(this, "pageMode", pageMode);
                  },
               },
               {
                  key: "viewerPreferences",
                  get: function get() {
                     var _this58 = this;
                     var obj = this._catDict.get("ViewerPreferences");
                     if (!(obj instanceof Dict)) {
                        return shadow(this, "viewerPreferences", null);
                     }
                     var prefs = null;
                     var _iterator113 = _createForOfIteratorHelper(obj.getKeys()),
                        _step113;
                     try {
                        for (_iterator113.s(); !(_step113 = _iterator113.n()).done; ) {
                           var key = _step113.value;
                           var value = obj.get(key);
                           var prefValue = void 0;
                           switch (key) {
                              case "HideToolbar":
                              case "HideMenubar":
                              case "HideWindowUI":
                              case "FitWindow":
                              case "CenterWindow":
                              case "DisplayDocTitle":
                              case "PickTrayByPDFSize":
                                 if (typeof value === "boolean") {
                                    prefValue = value;
                                 }
                                 break;
                              case "NonFullScreenPageMode":
                                 if (value instanceof Name) {
                                    switch (value.name) {
                                       case "UseNone":
                                       case "UseOutlines":
                                       case "UseThumbs":
                                       case "UseOC":
                                          prefValue = value.name;
                                          break;
                                       default:
                                          prefValue = "UseNone";
                                    }
                                 }
                                 break;
                              case "Direction":
                                 if (value instanceof Name) {
                                    switch (value.name) {
                                       case "L2R":
                                       case "R2L":
                                          prefValue = value.name;
                                          break;
                                       default:
                                          prefValue = "L2R";
                                    }
                                 }
                                 break;
                              case "ViewArea":
                              case "ViewClip":
                              case "PrintArea":
                              case "PrintClip":
                                 if (value instanceof Name) {
                                    switch (value.name) {
                                       case "MediaBox":
                                       case "CropBox":
                                       case "BleedBox":
                                       case "TrimBox":
                                       case "ArtBox":
                                          prefValue = value.name;
                                          break;
                                       default:
                                          prefValue = "CropBox";
                                    }
                                 }
                                 break;
                              case "PrintScaling":
                                 if (value instanceof Name) {
                                    switch (value.name) {
                                       case "None":
                                       case "AppDefault":
                                          prefValue = value.name;
                                          break;
                                       default:
                                          prefValue = "AppDefault";
                                    }
                                 }
                                 break;
                              case "Duplex":
                                 if (value instanceof Name) {
                                    switch (value.name) {
                                       case "Simplex":
                                       case "DuplexFlipShortEdge":
                                       case "DuplexFlipLongEdge":
                                          prefValue = value.name;
                                          break;
                                       default:
                                          prefValue = "None";
                                    }
                                 }
                                 break;
                              case "PrintPageRange":
                                 if (Array.isArray(value) && value.length % 2 === 0) {
                                    var isValid = value.every(function (page, i, arr) {
                                       return (
                                          Number.isInteger(page) &&
                                          page > 0 &&
                                          (i === 0 || page >= arr[i - 1]) &&
                                          page <= _this58.numPages
                                       );
                                    });
                                    if (isValid) {
                                       prefValue = value;
                                    }
                                 }
                                 break;
                              case "NumCopies":
                                 if (Number.isInteger(value) && value > 0) {
                                    prefValue = value;
                                 }
                                 break;
                              default:
                                 warn(
                                    "Ignoring non-standard key in ViewerPreferences: ".concat(
                                       key,
                                       ".",
                                    ),
                                 );
                                 continue;
                           }
                           if (prefValue === undefined) {
                              warn(
                                 'Bad value, for key "'
                                    .concat(key, '", in ViewerPreferences: ')
                                    .concat(value, "."),
                              );
                              continue;
                           }
                           if (!prefs) {
                              prefs = Object.create(null);
                           }
                           prefs[key] = prefValue;
                        }
                     } catch (err) {
                        _iterator113.e(err);
                     } finally {
                        _iterator113.f();
                     }
                     return shadow(this, "viewerPreferences", prefs);
                  },
               },
               {
                  key: "openAction",
                  get: function get() {
                     var obj = this._catDict.get("OpenAction");
                     var openAction = Object.create(null);
                     if (obj instanceof Dict) {
                        var destDict = new Dict(this.xref);
                        destDict.set("A", obj);
                        var resultObj = { url: null, dest: null, action: null };
                        Catalog.parseDestDictionary({
                           destDict: destDict,
                           resultObj: resultObj,
                        });
                        if (Array.isArray(resultObj.dest)) {
                           openAction.dest = resultObj.dest;
                        } else if (resultObj.action) {
                           openAction.action = resultObj.action;
                        }
                     } else if (Array.isArray(obj)) {
                        openAction.dest = obj;
                     }
                     return shadow(
                        this,
                        "openAction",
                        objectSize(openAction) > 0 ? openAction : null,
                     );
                  },
               },
               {
                  key: "attachments",
                  get: function get() {
                     var obj = this._catDict.get("Names");
                     var attachments = null;
                     if (obj instanceof Dict && obj.has("EmbeddedFiles")) {
                        var nameTree = new NameTree(
                           obj.getRaw("EmbeddedFiles"),
                           this.xref,
                        );
                        var _iterator114 = _createForOfIteratorHelper(
                              nameTree.getAll(),
                           ),
                           _step114;
                        try {
                           for (
                              _iterator114.s();
                              !(_step114 = _iterator114.n()).done;

                           ) {
                              var _step114$value = _slicedToArray(_step114.value, 2),
                                 key = _step114$value[0],
                                 value = _step114$value[1];
                              var fs = new FileSpec(value, this.xref);
                              if (!attachments) {
                                 attachments = Object.create(null);
                              }
                              attachments[stringToPDFString(key)] = fs.serializable;
                           }
                        } catch (err) {
                           _iterator114.e(err);
                        } finally {
                           _iterator114.f();
                        }
                     }
                     return shadow(this, "attachments", attachments);
                  },
               },
               {
                  key: "xfaImages",
                  get: function get() {
                     var obj = this._catDict.get("Names");
                     var xfaImages = null;
                     if (obj instanceof Dict && obj.has("XFAImages")) {
                        var nameTree = new NameTree(obj.getRaw("XFAImages"), this.xref);
                        var _iterator115 = _createForOfIteratorHelper(
                              nameTree.getAll(),
                           ),
                           _step115;
                        try {
                           for (
                              _iterator115.s();
                              !(_step115 = _iterator115.n()).done;

                           ) {
                              var _step115$value = _slicedToArray(_step115.value, 2),
                                 key = _step115$value[0],
                                 value = _step115$value[1];
                              if (!xfaImages) {
                                 xfaImages = new Dict(this.xref);
                              }
                              xfaImages.set(stringToPDFString(key), value);
                           }
                        } catch (err) {
                           _iterator115.e(err);
                        } finally {
                           _iterator115.f();
                        }
                     }
                     return shadow(this, "xfaImages", xfaImages);
                  },
               },
               {
                  key: "_collectJavaScript",
                  value: function _collectJavaScript() {
                     var obj = this._catDict.get("Names");
                     var javaScript = null;
                     function appendIfJavaScriptDict(name, jsDict) {
                        if (!(jsDict instanceof Dict)) {
                           return;
                        }
                        if (!isName(jsDict.get("S"), "JavaScript")) {
                           return;
                        }
                        var js = jsDict.get("JS");
                        if (js instanceof BaseStream) {
                           js = js.getString();
                        } else if (typeof js !== "string") {
                           return;
                        }
                        js = stringToPDFString(js).replaceAll("\x00", "");
                        if (js) {
                           (javaScript || (javaScript = new Map())).set(name, js);
                        }
                     }
                     if (obj instanceof Dict && obj.has("JavaScript")) {
                        var nameTree = new NameTree(
                           obj.getRaw("JavaScript"),
                           this.xref,
                        );
                        var _iterator116 = _createForOfIteratorHelper(
                              nameTree.getAll(),
                           ),
                           _step116;
                        try {
                           for (
                              _iterator116.s();
                              !(_step116 = _iterator116.n()).done;

                           ) {
                              var _step116$value = _slicedToArray(_step116.value, 2),
                                 key = _step116$value[0],
                                 value = _step116$value[1];
                              appendIfJavaScriptDict(stringToPDFString(key), value);
                           }
                        } catch (err) {
                           _iterator116.e(err);
                        } finally {
                           _iterator116.f();
                        }
                     }
                     var openAction = this._catDict.get("OpenAction");
                     if (openAction) {
                        appendIfJavaScriptDict("OpenAction", openAction);
                     }
                     return javaScript;
                  },
               },
               {
                  key: "jsActions",
                  get: function get() {
                     var javaScript = this._collectJavaScript();
                     var actions = collectActions(
                        this.xref,
                        this._catDict,
                        DocumentActionEventType,
                     );
                     if (javaScript) {
                        actions || (actions = Object.create(null));
                        var _iterator117 = _createForOfIteratorHelper(javaScript),
                           _step117;
                        try {
                           for (
                              _iterator117.s();
                              !(_step117 = _iterator117.n()).done;

                           ) {
                              var _step117$value = _slicedToArray(_step117.value, 2),
                                 key = _step117$value[0],
                                 val = _step117$value[1];
                              if (key in actions) {
                                 actions[key].push(val);
                              } else {
                                 actions[key] = [val];
                              }
                           }
                        } catch (err) {
                           _iterator117.e(err);
                        } finally {
                           _iterator117.f();
                        }
                     }
                     return shadow(this, "jsActions", actions);
                  },
               },
               {
                  key: "fontFallback",
                  value: (function () {
                     var _fontFallback = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee26(id, handler) {
                           var translatedFonts,
                              _iterator118,
                              _step118,
                              translatedFont,
                              _t27;
                           return _regenerator().w(
                              function (_context29) {
                                 while (1)
                                    switch ((_context29.p = _context29.n)) {
                                       case 0:
                                          _context29.n = 1;
                                          return Promise.all(this.fontCache);
                                       case 1:
                                          translatedFonts = _context29.v;
                                          _iterator118 =
                                             _createForOfIteratorHelper(translatedFonts);
                                          _context29.p = 2;
                                          _iterator118.s();
                                       case 3:
                                          if ((_step118 = _iterator118.n()).done) {
                                             _context29.n = 5;
                                             break;
                                          }
                                          translatedFont = _step118.value;
                                          if (!(translatedFont.loadedName === id)) {
                                             _context29.n = 4;
                                             break;
                                          }
                                          translatedFont.fallback(handler);
                                          return _context29.a(2);
                                       case 4:
                                          _context29.n = 3;
                                          break;
                                       case 5:
                                          _context29.n = 7;
                                          break;
                                       case 6:
                                          _context29.p = 6;
                                          _t27 = _context29.v;
                                          _iterator118.e(_t27);
                                       case 7:
                                          _context29.p = 7;
                                          _iterator118.f();
                                          return _context29.f(7);
                                       case 8:
                                          return _context29.a(2);
                                    }
                              },
                              _callee26,
                              this,
                              [[2, 6, 7, 8]],
                           );
                        }),
                     );
                     function fontFallback(_x80, _x81) {
                        return _fontFallback.apply(this, arguments);
                     }
                     return fontFallback;
                  })(),
               },
               {
                  key: "cleanup",
                  value: (function () {
                     var _cleanup = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee27() {
                           var manuallyTriggered,
                              translatedFonts,
                              _iterator119,
                              _step119,
                              dict,
                              _args32 = arguments;
                           return _regenerator().w(
                              function (_context30) {
                                 while (1)
                                    switch (_context30.n) {
                                       case 0:
                                          manuallyTriggered =
                                             _args32.length > 0 && _args32[0] !== undefined
                                                ? _args32[0]
                                                : false;
                                          clearGlobalCaches();
                                          this.globalImageCache.clear(manuallyTriggered);
                                          this.pageKidsCountCache.clear();
                                          this.pageIndexCache.clear();
                                          this.nonBlendModesSet.clear();
                                          _context30.n = 1;
                                          return Promise.all(this.fontCache);
                                       case 1:
                                          translatedFonts = _context30.v;
                                          _iterator119 =
                                             _createForOfIteratorHelper(translatedFonts);
                                          try {
                                             for (
                                                _iterator119.s();
                                                !(_step119 = _iterator119.n()).done;

                                             ) {
                                                dict = _step119.value.dict;
                                                delete dict.cacheKey;
                                             }
                                          } catch (err) {
                                             _iterator119.e(err);
                                          } finally {
                                             _iterator119.f();
                                          }
                                          this.fontCache.clear();
                                          this.builtInCMapCache.clear();
                                          this.standardFontDataCache.clear();
                                          this.systemFontCache.clear();
                                       case 2:
                                          return _context30.a(2);
                                    }
                              },
                              _callee27,
                              this,
                           );
                        }),
                     );
                     function cleanup() {
                        return _cleanup.apply(this, arguments);
                     }
                     return cleanup;
                  })(),
               },
               {
                  key: "getPageDict",
                  value: (function () {
                     var _getPageDict = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee28(pageIndex) {
                           var nodesToVisit,
                              visitedNodes,
                              pagesRef,
                              xref,
                              pageKidsCountCache,
                              pageIndexCache,
                              currentPageIndex,
                              currentNode,
                              _count,
                              obj,
                              type,
                              objId,
                              count,
                              kids,
                              _type,
                              last;
                           return _regenerator().w(
                              function (_context31) {
                                 while (1)
                                    switch (_context31.n) {
                                       case 0:
                                          nodesToVisit = [this.toplevelPagesDict];
                                          visitedNodes = new RefSet();
                                          pagesRef = this._catDict.getRaw("Pages");
                                          if (pagesRef instanceof Ref) {
                                             visitedNodes.put(pagesRef);
                                          }
                                          ((xref = this.xref),
                                             (pageKidsCountCache = this.pageKidsCountCache),
                                             (pageIndexCache = this.pageIndexCache));
                                          currentPageIndex = 0;
                                       case 1:
                                          if (!nodesToVisit.length) {
                                             _context31.n = 21;
                                             break;
                                          }
                                          currentNode = nodesToVisit.pop();
                                          if (!(currentNode instanceof Ref)) {
                                             _context31.n = 9;
                                             break;
                                          }
                                          _count = pageKidsCountCache.get(currentNode);
                                          if (
                                             !(
                                                _count >= 0 &&
                                                currentPageIndex + _count <= pageIndex
                                             )
                                          ) {
                                             _context31.n = 2;
                                             break;
                                          }
                                          currentPageIndex += _count;
                                          return _context31.a(3, 1);
                                       case 2:
                                          if (!visitedNodes.has(currentNode)) {
                                             _context31.n = 3;
                                             break;
                                          }
                                          throw new FormatError(
                                             "Pages tree contains circular reference.",
                                          );
                                       case 3:
                                          visitedNodes.put(currentNode);
                                          _context31.n = 4;
                                          return xref.fetchAsync(currentNode);
                                       case 4:
                                          obj = _context31.v;
                                          if (!(obj instanceof Dict)) {
                                             _context31.n = 8;
                                             break;
                                          }
                                          type = obj.getRaw("Type");
                                          if (!(type instanceof Ref)) {
                                             _context31.n = 6;
                                             break;
                                          }
                                          _context31.n = 5;
                                          return xref.fetchAsync(type);
                                       case 5:
                                          type = _context31.v;
                                       case 6:
                                          if (!(isName(type, "Page") || !obj.has("Kids"))) {
                                             _context31.n = 8;
                                             break;
                                          }
                                          if (!pageKidsCountCache.has(currentNode)) {
                                             pageKidsCountCache.put(currentNode, 1);
                                          }
                                          if (!pageIndexCache.has(currentNode)) {
                                             pageIndexCache.put(currentNode, currentPageIndex);
                                          }
                                          if (!(currentPageIndex === pageIndex)) {
                                             _context31.n = 7;
                                             break;
                                          }
                                          return _context31.a(2, [obj, currentNode]);
                                       case 7:
                                          currentPageIndex++;
                                          return _context31.a(3, 1);
                                       case 8:
                                          nodesToVisit.push(obj);
                                          return _context31.a(3, 1);
                                       case 9:
                                          if (currentNode instanceof Dict) {
                                             _context31.n = 10;
                                             break;
                                          }
                                          throw new FormatError(
                                             "Page dictionary kid reference points to wrong type of object.",
                                          );
                                       case 10:
                                          objId = currentNode.objId;
                                          count = currentNode.getRaw("Count");
                                          if (!(count instanceof Ref)) {
                                             _context31.n = 12;
                                             break;
                                          }
                                          _context31.n = 11;
                                          return xref.fetchAsync(count);
                                       case 11:
                                          count = _context31.v;
                                       case 12:
                                          if (!(Number.isInteger(count) && count >= 0)) {
                                             _context31.n = 13;
                                             break;
                                          }
                                          if (objId && !pageKidsCountCache.has(objId)) {
                                             pageKidsCountCache.put(objId, count);
                                          }
                                          if (!(currentPageIndex + count <= pageIndex)) {
                                             _context31.n = 13;
                                             break;
                                          }
                                          currentPageIndex += count;
                                          return _context31.a(3, 1);
                                       case 13:
                                          kids = currentNode.getRaw("Kids");
                                          if (!(kids instanceof Ref)) {
                                             _context31.n = 15;
                                             break;
                                          }
                                          _context31.n = 14;
                                          return xref.fetchAsync(kids);
                                       case 14:
                                          kids = _context31.v;
                                       case 15:
                                          if (Array.isArray(kids)) {
                                             _context31.n = 20;
                                             break;
                                          }
                                          _type = currentNode.getRaw("Type");
                                          if (!(_type instanceof Ref)) {
                                             _context31.n = 17;
                                             break;
                                          }
                                          _context31.n = 16;
                                          return xref.fetchAsync(_type);
                                       case 16:
                                          _type = _context31.v;
                                       case 17:
                                          if (
                                             !(
                                                isName(_type, "Page") ||
                                                !currentNode.has("Kids")
                                             )
                                          ) {
                                             _context31.n = 19;
                                             break;
                                          }
                                          if (!(currentPageIndex === pageIndex)) {
                                             _context31.n = 18;
                                             break;
                                          }
                                          return _context31.a(2, [currentNode, null]);
                                       case 18:
                                          currentPageIndex++;
                                          return _context31.a(3, 1);
                                       case 19:
                                          throw new FormatError(
                                             "Page dictionary kids object is not an array.",
                                          );
                                       case 20:
                                          for (last = kids.length - 1; last >= 0; last--) {
                                             nodesToVisit.push(kids[last]);
                                          }
                                          _context31.n = 1;
                                          break;
                                       case 21:
                                          throw new Error(
                                             "Page index ".concat(pageIndex, " not found."),
                                          );
                                       case 22:
                                          return _context31.a(2);
                                    }
                              },
                              _callee28,
                              this,
                           );
                        }),
                     );
                     function getPageDict(_x82) {
                        return _getPageDict.apply(this, arguments);
                     }
                     return getPageDict;
                  })(),
               },
               {
                  key: "getAllPageDicts",
                  value: (function () {
                     var _getAllPageDicts = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee29() {
                           var recoveryMode,
                              ignoreErrors,
                              queue,
                              visitedNodes,
                              pagesRef,
                              map,
                              xref,
                              pageIndexCache,
                              pageIndex,
                              addPageDict,
                              addPageError,
                              queueItem,
                              currentNode,
                              posInKids,
                              kids,
                              kidObj,
                              obj,
                              type,
                              _args34 = arguments,
                              _t28,
                              _t29,
                              _t30;
                           return _regenerator().w(
                              function (_context32) {
                                 while (1)
                                    switch ((_context32.p = _context32.n)) {
                                       case 0:
                                          addPageError = function _addPageError(error) {
                                             if (
                                                error instanceof XRefEntryException &&
                                                !recoveryMode
                                             ) {
                                                throw error;
                                             }
                                             if (
                                                recoveryMode &&
                                                ignoreErrors &&
                                                pageIndex === 0
                                             ) {
                                                warn(
                                                   'getAllPageDicts - Skipping invalid first page: "'.concat(
                                                      error,
                                                      '".',
                                                   ),
                                                );
                                                error = Dict.empty;
                                             }
                                             map.set(pageIndex++, [error, null]);
                                          };
                                          addPageDict = function _addPageDict(
                                             pageDict,
                                             pageRef,
                                          ) {
                                             if (pageRef && !pageIndexCache.has(pageRef)) {
                                                pageIndexCache.put(pageRef, pageIndex);
                                             }
                                             map.set(pageIndex++, [pageDict, pageRef]);
                                          };
                                          recoveryMode =
                                             _args34.length > 0 && _args34[0] !== undefined
                                                ? _args34[0]
                                                : false;
                                          ignoreErrors =
                                             this.pdfManager.evaluatorOptions.ignoreErrors;
                                          queue = [
                                             {
                                                currentNode: this.toplevelPagesDict,
                                                posInKids: 0,
                                             },
                                          ];
                                          visitedNodes = new RefSet();
                                          pagesRef = this._catDict.getRaw("Pages");
                                          if (pagesRef instanceof Ref) {
                                             visitedNodes.put(pagesRef);
                                          }
                                          ((map = new Map()),
                                             (xref = this.xref),
                                             (pageIndexCache = this.pageIndexCache));
                                          pageIndex = 0;
                                       case 1:
                                          if (!(queue.length > 0)) {
                                             _context32.n = 20;
                                             break;
                                          }
                                          queueItem = queue.at(-1);
                                          ((currentNode = queueItem.currentNode),
                                             (posInKids = queueItem.posInKids));
                                          kids = currentNode.getRaw("Kids");
                                          if (!(kids instanceof Ref)) {
                                             _context32.n = 5;
                                             break;
                                          }
                                          _context32.p = 2;
                                          _context32.n = 3;
                                          return xref.fetchAsync(kids);
                                       case 3:
                                          kids = _context32.v;
                                          _context32.n = 5;
                                          break;
                                       case 4:
                                          _context32.p = 4;
                                          _t28 = _context32.v;
                                          addPageError(_t28);
                                          return _context32.a(3, 20);
                                       case 5:
                                          if (Array.isArray(kids)) {
                                             _context32.n = 6;
                                             break;
                                          }
                                          addPageError(
                                             new FormatError(
                                                "Page dictionary kids object is not an array.",
                                             ),
                                          );
                                          return _context32.a(3, 20);
                                       case 6:
                                          if (!(posInKids >= kids.length)) {
                                             _context32.n = 7;
                                             break;
                                          }
                                          queue.pop();
                                          return _context32.a(3, 1);
                                       case 7:
                                          kidObj = kids[posInKids];
                                          obj = void 0;
                                          if (!(kidObj instanceof Ref)) {
                                             _context32.n = 13;
                                             break;
                                          }
                                          if (!visitedNodes.has(kidObj)) {
                                             _context32.n = 8;
                                             break;
                                          }
                                          addPageError(
                                             new FormatError(
                                                "Pages tree contains circular reference.",
                                             ),
                                          );
                                          return _context32.a(3, 20);
                                       case 8:
                                          visitedNodes.put(kidObj);
                                          _context32.p = 9;
                                          _context32.n = 10;
                                          return xref.fetchAsync(kidObj);
                                       case 10:
                                          obj = _context32.v;
                                          _context32.n = 12;
                                          break;
                                       case 11:
                                          _context32.p = 11;
                                          _t29 = _context32.v;
                                          addPageError(_t29);
                                          return _context32.a(3, 20);
                                       case 12:
                                          _context32.n = 14;
                                          break;
                                       case 13:
                                          obj = kidObj;
                                       case 14:
                                          if (obj instanceof Dict) {
                                             _context32.n = 15;
                                             break;
                                          }
                                          addPageError(
                                             new FormatError(
                                                "Page dictionary kid reference points to wrong type of object.",
                                             ),
                                          );
                                          return _context32.a(3, 20);
                                       case 15:
                                          type = obj.getRaw("Type");
                                          if (!(type instanceof Ref)) {
                                             _context32.n = 19;
                                             break;
                                          }
                                          _context32.p = 16;
                                          _context32.n = 17;
                                          return xref.fetchAsync(type);
                                       case 17:
                                          type = _context32.v;
                                          _context32.n = 19;
                                          break;
                                       case 18:
                                          _context32.p = 18;
                                          _t30 = _context32.v;
                                          addPageError(_t30);
                                          return _context32.a(3, 20);
                                       case 19:
                                          if (isName(type, "Page") || !obj.has("Kids")) {
                                             addPageDict(
                                                obj,
                                                kidObj instanceof Ref ? kidObj : null,
                                             );
                                          } else {
                                             queue.push({ currentNode: obj, posInKids: 0 });
                                          }
                                          queueItem.posInKids++;
                                          _context32.n = 1;
                                          break;
                                       case 20:
                                          return _context32.a(2, map);
                                    }
                              },
                              _callee29,
                              this,
                              [
                                 [16, 18],
                                 [9, 11],
                                 [2, 4],
                              ],
                           );
                        }),
                     );
                     function getAllPageDicts() {
                        return _getAllPageDicts.apply(this, arguments);
                     }
                     return getAllPageDicts;
                  })(),
               },
               {
                  key: "getPageIndex",
                  value: function getPageIndex(pageRef) {
                     var _this59 = this;
                     var cachedPageIndex = this.pageIndexCache.get(pageRef);
                     if (cachedPageIndex !== undefined) {
                        return Promise.resolve(cachedPageIndex);
                     }
                     var xref = this.xref;
                     function pagesBeforeRef(kidRef) {
                        var total = 0,
                           parentRef;
                        return xref
                           .fetchAsync(kidRef)
                           .then(function (node) {
                              if (
                                 isRefsEqual(kidRef, pageRef) &&
                                 !isDict(node, "Page") &&
                                 !(
                                    node instanceof Dict &&
                                    !node.has("Type") &&
                                    node.has("Contents")
                                 )
                              ) {
                                 throw new FormatError(
                                    "The reference does not point to a /Page dictionary.",
                                 );
                              }
                              if (!node) {
                                 return null;
                              }
                              if (!(node instanceof Dict)) {
                                 throw new FormatError("Node must be a dictionary.");
                              }
                              parentRef = node.getRaw("Parent");
                              return node.getAsync("Parent");
                           })
                           .then(function (parent) {
                              if (!parent) {
                                 return null;
                              }
                              if (!(parent instanceof Dict)) {
                                 throw new FormatError("Parent must be a dictionary.");
                              }
                              return parent.getAsync("Kids");
                           })
                           .then(function (kids) {
                              if (!kids) {
                                 return null;
                              }
                              var kidPromises = [];
                              var found = false;
                              var _iterator120 = _createForOfIteratorHelper(kids),
                                 _step120;
                              try {
                                 for (
                                    _iterator120.s();
                                    !(_step120 = _iterator120.n()).done;

                                 ) {
                                    var kid = _step120.value;
                                    if (!(kid instanceof Ref)) {
                                       throw new FormatError("Kid must be a reference.");
                                    }
                                    if (isRefsEqual(kid, kidRef)) {
                                       found = true;
                                       break;
                                    }
                                    kidPromises.push(
                                       xref.fetchAsync(kid).then(function (obj) {
                                          if (!(obj instanceof Dict)) {
                                             throw new FormatError(
                                                "Kid node must be a dictionary.",
                                             );
                                          }
                                          if (obj.has("Count")) {
                                             total += obj.get("Count");
                                          } else {
                                             total++;
                                          }
                                       }),
                                    );
                                 }
                              } catch (err) {
                                 _iterator120.e(err);
                              } finally {
                                 _iterator120.f();
                              }
                              if (!found) {
                                 throw new FormatError(
                                    "Kid reference not found in parent's kids.",
                                 );
                              }
                              return Promise.all(kidPromises).then(function () {
                                 return [total, parentRef];
                              });
                           });
                     }
                     var total = 0;
                     var _next2 = function next(ref) {
                        return pagesBeforeRef(ref).then(function (args) {
                           if (!args) {
                              _this59.pageIndexCache.put(pageRef, total);
                              return total;
                           }
                           var _args35 = _slicedToArray(args, 2),
                              count = _args35[0],
                              parentRef = _args35[1];
                           total += count;
                           return _next2(parentRef);
                        });
                     };
                     return _next2(pageRef);
                  },
               },
               {
                  key: "baseUrl",
                  get: function get() {
                     var uri = this._catDict.get("URI");
                     if (uri instanceof Dict) {
                        var base = uri.get("Base");
                        if (typeof base === "string") {
                           var absoluteUrl = createValidAbsoluteUrl(base, null, {
                              tryConvertEncoding: true,
                           });
                           if (absoluteUrl) {
                              return shadow(this, "baseUrl", absoluteUrl.href);
                           }
                        }
                     }
                     return shadow(this, "baseUrl", this.pdfManager.docBaseUrl);
                  },
               },
            ],
            [
               {
                  key: "parseDestDictionary",
                  value: function parseDestDictionary(_ref79) {
                     var destDict = _ref79.destDict,
                        resultObj = _ref79.resultObj,
                        _ref79$docBaseUrl = _ref79.docBaseUrl,
                        docBaseUrl =
                           _ref79$docBaseUrl === void 0 ? null : _ref79$docBaseUrl,
                        _ref79$docAttachments = _ref79.docAttachments,
                        docAttachments =
                           _ref79$docAttachments === void 0
                              ? null
                              : _ref79$docAttachments;
                     if (!(destDict instanceof Dict)) {
                        warn("parseDestDictionary: `destDict` must be a dictionary.");
                        return;
                     }
                     var action = destDict.get("A"),
                        url,
                        dest;
                     if (!(action instanceof Dict)) {
                        if (destDict.has("Dest")) {
                           action = destDict.get("Dest");
                        } else {
                           action = destDict.get("AA");
                           if (action instanceof Dict) {
                              if (action.has("D")) {
                                 action = action.get("D");
                              } else if (action.has("U")) {
                                 action = action.get("U");
                              }
                           }
                        }
                     }
                     if (action instanceof Dict) {
                        var actionType = action.get("S");
                        if (!(actionType instanceof Name)) {
                           warn(
                              "parseDestDictionary: Invalid type in Action dictionary.",
                           );
                           return;
                        }
                        var actionName = actionType.name;
                        switch (actionName) {
                           case "ResetForm":
                              var flags = action.get("Flags");
                              var include =
                                 ((typeof flags === "number" ? flags : 0) & 1) === 0;
                              var fields = [];
                              var refs = [];
                              var _iterator121 = _createForOfIteratorHelper(
                                    action.get("Fields") || [],
                                 ),
                                 _step121;
                              try {
                                 for (
                                    _iterator121.s();
                                    !(_step121 = _iterator121.n()).done;

                                 ) {
                                    var obj = _step121.value;
                                    if (obj instanceof Ref) {
                                       refs.push(obj.toString());
                                    } else if (typeof obj === "string") {
                                       fields.push(stringToPDFString(obj));
                                    }
                                 }
                              } catch (err) {
                                 _iterator121.e(err);
                              } finally {
                                 _iterator121.f();
                              }
                              resultObj.resetForm = {
                                 fields: fields,
                                 refs: refs,
                                 include: include,
                              };
                              break;
                           case "URI":
                              url = action.get("URI");
                              if (url instanceof Name) {
                                 url = "/" + url.name;
                              }
                              break;
                           case "GoTo":
                              dest = action.get("D");
                              break;
                           case "Launch":
                           case "GoToR":
                              var urlDict = action.get("F");
                              if (urlDict instanceof Dict) {
                                 var fs = new FileSpec(urlDict, null, true);
                                 var filename = fs.serializable.filename;
                                 url = filename;
                              } else if (typeof urlDict === "string") {
                                 url = urlDict;
                              }
                              var remoteDest = fetchRemoteDest(action);
                              if (remoteDest && typeof url === "string") {
                                 url = url.split("#", 1)[0] + "#" + remoteDest;
                              }
                              var newWindow = action.get("NewWindow");
                              if (typeof newWindow === "boolean") {
                                 resultObj.newWindow = newWindow;
                              }
                              break;
                           case "GoToE":
                              var target = action.get("T");
                              var attachment;
                              if (docAttachments && target instanceof Dict) {
                                 var relationship = target.get("R");
                                 var name = target.get("N");
                                 if (
                                    isName(relationship, "C") &&
                                    typeof name === "string"
                                 ) {
                                    attachment = docAttachments[stringToPDFString(name)];
                                 }
                              }
                              if (attachment) {
                                 resultObj.attachment = attachment;
                                 var attachmentDest = fetchRemoteDest(action);
                                 if (attachmentDest) {
                                    resultObj.attachmentDest = attachmentDest;
                                 }
                              } else {
                                 warn(
                                    'parseDestDictionary - unimplemented "GoToE" action.',
                                 );
                              }
                              break;
                           case "Named":
                              var namedAction = action.get("N");
                              if (namedAction instanceof Name) {
                                 resultObj.action = namedAction.name;
                              }
                              break;
                           case "SetOCGState":
                              var state = action.get("State");
                              var preserveRB = action.get("PreserveRB");
                              if (!Array.isArray(state) || state.length === 0) {
                                 break;
                              }
                              var stateArr = [];
                              var _iterator122 = _createForOfIteratorHelper(state),
                                 _step122;
                              try {
                                 for (
                                    _iterator122.s();
                                    !(_step122 = _iterator122.n()).done;

                                 ) {
                                    var elem = _step122.value;
                                    if (elem instanceof Name) {
                                       switch (elem.name) {
                                          case "ON":
                                          case "OFF":
                                          case "Toggle":
                                             stateArr.push(elem.name);
                                             break;
                                       }
                                    } else if (elem instanceof Ref) {
                                       stateArr.push(elem.toString());
                                    }
                                 }
                              } catch (err) {
                                 _iterator122.e(err);
                              } finally {
                                 _iterator122.f();
                              }
                              if (stateArr.length !== state.length) {
                                 break;
                              }
                              resultObj.setOCGState = {
                                 state: stateArr,
                                 preserveRB:
                                    typeof preserveRB === "boolean" ? preserveRB : true,
                              };
                              break;
                           case "JavaScript":
                              var jsAction = action.get("JS");
                              var js;
                              if (jsAction instanceof BaseStream) {
                                 js = jsAction.getString();
                              } else if (typeof jsAction === "string") {
                                 js = jsAction;
                              }
                              var jsURL = js && recoverJsURL(stringToPDFString(js));
                              if (jsURL) {
                                 url = jsURL.url;
                                 resultObj.newWindow = jsURL.newWindow;
                                 break;
                              }
                           default:
                              if (
                                 actionName === "JavaScript" ||
                                 actionName === "SubmitForm"
                              ) {
                                 break;
                              }
                              warn(
                                 'parseDestDictionary - unsupported action: "'.concat(
                                    actionName,
                                    '".',
                                 ),
                              );
                              break;
                        }
                     } else if (destDict.has("Dest")) {
                        dest = destDict.get("Dest");
                     }
                     if (typeof url === "string") {
                        var absoluteUrl = createValidAbsoluteUrl(url, docBaseUrl, {
                           addDefaultProtocol: true,
                           tryConvertEncoding: true,
                        });
                        if (absoluteUrl) {
                           resultObj.url = absoluteUrl.href;
                        }
                        resultObj.unsafeUrl = url;
                     }
                     if (dest) {
                        if (dest instanceof Name) {
                           dest = dest.name;
                        }
                        if (typeof dest === "string") {
                           resultObj.dest = stringToPDFString(dest);
                        } else if (isValidExplicitDest(dest)) {
                           resultObj.dest = dest;
                        }
                     }
                  },
               },
            ],
         );
      })();
      function _readOptionalContentGroup(groupRef) {
         var group = this.xref.fetch(groupRef);
         var obj = {
            id: groupRef.toString(),
            name: null,
            intent: null,
            usage: { print: null, view: null },
         };
         var name = group.get("Name");
         if (typeof name === "string") {
            obj.name = stringToPDFString(name);
         }
         var intent = group.getArray("Intent");
         if (!Array.isArray(intent)) {
            intent = [intent];
         }
         if (
            intent.every(function (i) {
               return i instanceof Name;
            })
         ) {
            obj.intent = intent.map(function (i) {
               return i.name;
            });
         }
         var usage = group.get("Usage");
         if (!(usage instanceof Dict)) {
            return obj;
         }
         var usageObj = obj.usage;
         var print = usage.get("Print");
         if (print instanceof Dict) {
            var printState = print.get("PrintState");
            if (printState instanceof Name) {
               switch (printState.name) {
                  case "ON":
                  case "OFF":
                     usageObj.print = { printState: printState.name };
               }
            }
         }
         var view = usage.get("View");
         if (view instanceof Dict) {
            var viewState = view.get("ViewState");
            if (viewState instanceof Name) {
               switch (viewState.name) {
                  case "ON":
                  case "OFF":
                     usageObj.view = { viewState: viewState.name };
               }
            }
         }
         return obj;
      }
      function _readOptionalContentConfig(config, contentGroupRefs) {
         function parseOnOff(refs) {
            var onParsed = [];
            if (Array.isArray(refs)) {
               var _iterator245 = _createForOfIteratorHelper(refs),
                  _step245;
               try {
                  for (_iterator245.s(); !(_step245 = _iterator245.n()).done; ) {
                     var value = _step245.value;
                     if (!(value instanceof Ref)) {
                        continue;
                     }
                     if (contentGroupRefs.has(value)) {
                        onParsed.push(value.toString());
                     }
                  }
               } catch (err) {
                  _iterator245.e(err);
               } finally {
                  _iterator245.f();
               }
            }
            return onParsed;
         }
         function parseOrder(refs) {
            var nestedLevels =
               arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            if (!Array.isArray(refs)) {
               return null;
            }
            var order = [];
            var _iterator246 = _createForOfIteratorHelper(refs),
               _step246;
            try {
               for (_iterator246.s(); !(_step246 = _iterator246.n()).done; ) {
                  var value = _step246.value;
                  if (value instanceof Ref && contentGroupRefs.has(value)) {
                     parsedOrderRefs.put(value);
                     order.push(value.toString());
                     continue;
                  }
                  var nestedOrder = parseNestedOrder(value, nestedLevels);
                  if (nestedOrder) {
                     order.push(nestedOrder);
                  }
               }
            } catch (err) {
               _iterator246.e(err);
            } finally {
               _iterator246.f();
            }
            if (nestedLevels > 0) {
               return order;
            }
            var hiddenGroups = [];
            var _iterator247 = _createForOfIteratorHelper(contentGroupRefs),
               _step247;
            try {
               for (_iterator247.s(); !(_step247 = _iterator247.n()).done; ) {
                  var groupRef = _step247.value;
                  if (parsedOrderRefs.has(groupRef)) {
                     continue;
                  }
                  hiddenGroups.push(groupRef.toString());
               }
            } catch (err) {
               _iterator247.e(err);
            } finally {
               _iterator247.f();
            }
            if (hiddenGroups.length) {
               order.push({ name: null, order: hiddenGroups });
            }
            return order;
         }
         function parseNestedOrder(ref, nestedLevels) {
            if (++nestedLevels > MAX_NESTED_LEVELS) {
               warn("parseNestedOrder - reached MAX_NESTED_LEVELS.");
               return null;
            }
            var value = xref.fetchIfRef(ref);
            if (!Array.isArray(value)) {
               return null;
            }
            var nestedName = xref.fetchIfRef(value[0]);
            if (typeof nestedName !== "string") {
               return null;
            }
            var nestedOrder = parseOrder(value.slice(1), nestedLevels);
            if (!nestedOrder || !nestedOrder.length) {
               return null;
            }
            return { name: stringToPDFString(nestedName), order: nestedOrder };
         }
         var xref = this.xref,
            parsedOrderRefs = new RefSet(),
            MAX_NESTED_LEVELS = 10;
         return {
            name:
               typeof config.get("Name") === "string"
                  ? stringToPDFString(config.get("Name"))
                  : null,
            creator:
               typeof config.get("Creator") === "string"
                  ? stringToPDFString(config.get("Creator"))
                  : null,
            baseState:
               config.get("BaseState") instanceof Name
                  ? config.get("BaseState").name
                  : null,
            on: parseOnOff(config.get("ON")),
            off: parseOnOff(config.get("OFF")),
            order: parseOrder(config.get("Order")),
            groups: null,
         };
      } // CONCATENATED MODULE: ./src/core/object_loader.js
      function mayHaveChildren(value) {
         return (
            value instanceof Ref ||
            value instanceof Dict ||
            value instanceof BaseStream ||
            Array.isArray(value)
         );
      }
      function addChildren(node, nodesToVisit) {
         if (node instanceof Dict) {
            node = node.getRawValues();
         } else if (node instanceof BaseStream) {
            node = node.dict.getRawValues();
         } else if (!Array.isArray(node)) {
            return;
         }
         var _iterator123 = _createForOfIteratorHelper(node),
            _step123;
         try {
            for (_iterator123.s(); !(_step123 = _iterator123.n()).done; ) {
               var rawValue = _step123.value;
               if (mayHaveChildren(rawValue)) {
                  nodesToVisit.push(rawValue);
               }
            }
         } catch (err) {
            _iterator123.e(err);
         } finally {
            _iterator123.f();
         }
      }
      var ObjectLoader = /*#__PURE__*/ (function () {
         function ObjectLoader(dict, keys, xref) {
            _classCallCheck(this, ObjectLoader);
            this.dict = dict;
            this.keys = keys;
            this.xref = xref;
            this.refSet = null;
         }
         return _createClass(ObjectLoader, [
            {
               key: "load",
               value: (function () {
                  var _load = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(function _callee30() {
                        var keys,
                           dict,
                           nodesToVisit,
                           _iterator124,
                           _step124,
                           key,
                           rawValue;
                        return _regenerator().w(
                           function (_context33) {
                              while (1)
                                 switch (_context33.n) {
                                    case 0:
                                       if (!this.xref.stream.isDataLoaded) {
                                          _context33.n = 1;
                                          break;
                                       }
                                       return _context33.a(2, undefined);
                                    case 1:
                                       ((keys = this.keys), (dict = this.dict));
                                       this.refSet = new RefSet();
                                       nodesToVisit = [];
                                       _iterator124 = _createForOfIteratorHelper(keys);
                                       try {
                                          for (
                                             _iterator124.s();
                                             !(_step124 = _iterator124.n()).done;

                                          ) {
                                             key = _step124.value;
                                             rawValue = dict.getRaw(key);
                                             if (rawValue !== undefined) {
                                                nodesToVisit.push(rawValue);
                                             }
                                          }
                                       } catch (err) {
                                          _iterator124.e(err);
                                       } finally {
                                          _iterator124.f();
                                       }
                                       return _context33.a(2, this._walk(nodesToVisit));
                                 }
                           },
                           _callee30,
                           this,
                        );
                     }),
                  );
                  function load() {
                     return _load.apply(this, arguments);
                  }
                  return load;
               })(),
            },
            {
               key: "_walk",
               value: (function () {
                  var _walk2 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(function _callee31(nodesToVisit) {
                        var nodesToRevisit,
                           pendingRequests,
                           currentNode,
                           manager,
                           baseStreams,
                           foundMissingData,
                           _iterator125,
                           _step125,
                           stream,
                           _iterator126,
                           _step126,
                           node,
                           _t31,
                           _t32;
                        return _regenerator().w(
                           function (_context34) {
                              while (1)
                                 switch ((_context34.p = _context34.n)) {
                                    case 0:
                                       nodesToRevisit = [];
                                       pendingRequests = [];
                                    case 1:
                                       if (!nodesToVisit.length) {
                                          _context34.n = 15;
                                          break;
                                       }
                                       currentNode = nodesToVisit.pop();
                                       if (!(currentNode instanceof Ref)) {
                                          _context34.n = 5;
                                          break;
                                       }
                                       if (!this.refSet.has(currentNode)) {
                                          _context34.n = 2;
                                          break;
                                       }
                                       return _context34.a(3, 1);
                                    case 2:
                                       _context34.p = 2;
                                       this.refSet.put(currentNode);
                                       currentNode = this.xref.fetch(currentNode);
                                       _context34.n = 5;
                                       break;
                                    case 3:
                                       _context34.p = 3;
                                       _t31 = _context34.v;
                                       if (_t31 instanceof MissingDataException) {
                                          _context34.n = 4;
                                          break;
                                       }
                                       warn(
                                          'ObjectLoader._walk - requesting all data: "'.concat(
                                             _t31,
                                             '".',
                                          ),
                                       );
                                       this.refSet = null;
                                       manager = this.xref.stream.manager;
                                       return _context34.a(2, manager.requestAllChunks());
                                    case 4:
                                       nodesToRevisit.push(currentNode);
                                       pendingRequests.push({
                                          begin: _t31.begin,
                                          end: _t31.end,
                                       });
                                    case 5:
                                       if (!(currentNode instanceof BaseStream)) {
                                          _context34.n = 14;
                                          break;
                                       }
                                       baseStreams = currentNode.getBaseStreams();
                                       if (!baseStreams) {
                                          _context34.n = 14;
                                          break;
                                       }
                                       foundMissingData = false;
                                       _iterator125 =
                                          _createForOfIteratorHelper(baseStreams);
                                       _context34.p = 6;
                                       _iterator125.s();
                                    case 7:
                                       if ((_step125 = _iterator125.n()).done) {
                                          _context34.n = 10;
                                          break;
                                       }
                                       stream = _step125.value;
                                       if (!stream.isDataLoaded) {
                                          _context34.n = 8;
                                          break;
                                       }
                                       return _context34.a(3, 9);
                                    case 8:
                                       foundMissingData = true;
                                       pendingRequests.push({
                                          begin: stream.start,
                                          end: stream.end,
                                       });
                                    case 9:
                                       _context34.n = 7;
                                       break;
                                    case 10:
                                       _context34.n = 12;
                                       break;
                                    case 11:
                                       _context34.p = 11;
                                       _t32 = _context34.v;
                                       _iterator125.e(_t32);
                                    case 12:
                                       _context34.p = 12;
                                       _iterator125.f();
                                       return _context34.f(12);
                                    case 13:
                                       if (foundMissingData) {
                                          nodesToRevisit.push(currentNode);
                                       }
                                    case 14:
                                       addChildren(currentNode, nodesToVisit);
                                       _context34.n = 1;
                                       break;
                                    case 15:
                                       if (!pendingRequests.length) {
                                          _context34.n = 17;
                                          break;
                                       }
                                       _context34.n = 16;
                                       return this.xref.stream.manager.requestRanges(
                                          pendingRequests,
                                       );
                                    case 16:
                                       _iterator126 =
                                          _createForOfIteratorHelper(nodesToRevisit);
                                       try {
                                          for (
                                             _iterator126.s();
                                             !(_step126 = _iterator126.n()).done;

                                          ) {
                                             node = _step126.value;
                                             if (node instanceof Ref) {
                                                this.refSet.remove(node);
                                             }
                                          }
                                       } catch (err) {
                                          _iterator126.e(err);
                                       } finally {
                                          _iterator126.f();
                                       }
                                       return _context34.a(2, this._walk(nodesToRevisit));
                                    case 17:
                                       this.refSet = null;
                                       return _context34.a(2, undefined);
                                 }
                           },
                           _callee31,
                           this,
                           [
                              [6, 11, 12, 13],
                              [2, 3],
                           ],
                        );
                     }),
                  );
                  function _walk(_x83) {
                     return _walk2.apply(this, arguments);
                  }
                  return _walk;
               })(),
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xfa/symbol_utils.js
      var $acceptWhitespace = Symbol();
      var $addHTML = Symbol();
      var $appendChild = Symbol();
      var $childrenToHTML = Symbol();
      var $clean = Symbol();
      var $cleanPage = Symbol();
      var $cleanup = Symbol();
      var $clone = Symbol();
      var $consumed = Symbol();
      var $content = Symbol("content");
      var $data = Symbol("data");
      var $dump = Symbol();
      var $extra = Symbol("extra");
      var $finalize = Symbol();
      var $flushHTML = Symbol();
      var $getAttributeIt = Symbol();
      var $getAttributes = Symbol();
      var $getAvailableSpace = Symbol();
      var $getChildrenByClass = Symbol();
      var $getChildrenByName = Symbol();
      var $getChildrenByNameIt = Symbol();
      var $getDataValue = Symbol();
      var $getExtra = Symbol();
      var $getRealChildrenByNameIt = Symbol();
      var $getChildren = Symbol();
      var $getContainedChildren = Symbol();
      var $getNextPage = Symbol();
      var $getSubformParent = Symbol();
      var $getParent = Symbol();
      var $getTemplateRoot = Symbol();
      var $globalData = Symbol();
      var $hasSettableValue = Symbol();
      var $ids = Symbol();
      var $indexOf = Symbol();
      var $insertAt = Symbol();
      var $isCDATAXml = Symbol();
      var $isBindable = Symbol();
      var $isDataValue = Symbol();
      var $isDescendent = Symbol();
      var $isNsAgnostic = Symbol();
      var $isSplittable = Symbol();
      var $isThereMoreWidth = Symbol();
      var $isTransparent = Symbol();
      var $isUsable = Symbol();
      var $lastAttribute = Symbol();
      var $namespaceId = Symbol("namespaceId");
      var $nodeName = Symbol("nodeName");
      var $nsAttributes = Symbol();
      var $onChild = Symbol();
      var $onChildCheck = Symbol();
      var $onText = Symbol();
      var $pushGlyphs = Symbol();
      var $popPara = Symbol();
      var $pushPara = Symbol();
      var $removeChild = Symbol();
      var $root = Symbol("root");
      var $resolvePrototypes = Symbol();
      var $searchNode = Symbol();
      var $setId = Symbol();
      var $setSetAttributes = Symbol();
      var $setValue = Symbol();
      var $tabIndex = Symbol();
      var $text = Symbol();
      var $toPages = Symbol();
      var $toHTML = Symbol();
      var $toString = Symbol();
      var $toStyle = Symbol();
      var $uid = Symbol("uid"); // CONCATENATED MODULE: ./src/core/xfa/namespaces.js
      var $buildXFAObject = Symbol();
      var NamespaceIds = {
         config: {
            id: 0,
            check: function check(ns) {
               return ns.startsWith("http://www.xfa.org/schema/xci/");
            },
         },
         connectionSet: {
            id: 1,
            check: function check(ns) {
               return ns.startsWith("http://www.xfa.org/schema/xfa-connection-set/");
            },
         },
         datasets: {
            id: 2,
            check: function check(ns) {
               return ns.startsWith("http://www.xfa.org/schema/xfa-data/");
            },
         },
         form: {
            id: 3,
            check: function check(ns) {
               return ns.startsWith("http://www.xfa.org/schema/xfa-form/");
            },
         },
         localeSet: {
            id: 4,
            check: function check(ns) {
               return ns.startsWith("http://www.xfa.org/schema/xfa-locale-set/");
            },
         },
         pdf: {
            id: 5,
            check: function check(ns) {
               return ns === "http://ns.adobe.com/xdp/pdf/";
            },
         },
         signature: {
            id: 6,
            check: function check(ns) {
               return ns === "http://www.w3.org/2000/09/xmldsig#";
            },
         },
         sourceSet: {
            id: 7,
            check: function check(ns) {
               return ns.startsWith("http://www.xfa.org/schema/xfa-source-set/");
            },
         },
         stylesheet: {
            id: 8,
            check: function check(ns) {
               return ns === "http://www.w3.org/1999/XSL/Transform";
            },
         },
         template: {
            id: 9,
            check: function check(ns) {
               return ns.startsWith("http://www.xfa.org/schema/xfa-template/");
            },
         },
         xdc: {
            id: 10,
            check: function check(ns) {
               return ns.startsWith("http://www.xfa.org/schema/xdc/");
            },
         },
         xdp: {
            id: 11,
            check: function check(ns) {
               return ns === "http://ns.adobe.com/xdp/";
            },
         },
         xfdf: {
            id: 12,
            check: function check(ns) {
               return ns === "http://ns.adobe.com/xfdf/";
            },
         },
         xhtml: {
            id: 13,
            check: function check(ns) {
               return ns === "http://www.w3.org/1999/xhtml";
            },
         },
         xmpmeta: {
            id: 14,
            check: function check(ns) {
               return ns === "http://ns.adobe.com/xmpmeta/";
            },
         },
      }; // CONCATENATED MODULE: ./src/core/xfa/utils.js
      var dimConverters = {
         pt: function pt(x) {
            return x;
         },
         cm: function cm(x) {
            return (x / 2.54) * 72;
         },
         mm: function mm(x) {
            return (x / (10 * 2.54)) * 72;
         },
         in: function _in(x) {
            return x * 72;
         },
         px: function px(x) {
            return x;
         },
      };
      var measurementPattern = /([+-]?\d+\.?\d*)(.*)/;
      function stripQuotes(str) {
         if (str.startsWith("'") || str.startsWith('"')) {
            return str.slice(1, -1);
         }
         return str;
      }
      function getInteger(_ref80) {
         var data = _ref80.data,
            defaultValue = _ref80.defaultValue,
            validate = _ref80.validate;
         if (!data) {
            return defaultValue;
         }
         data = data.trim();
         var n = parseInt(data, 10);
         if (!isNaN(n) && validate(n)) {
            return n;
         }
         return defaultValue;
      }
      function getFloat(_ref81) {
         var data = _ref81.data,
            defaultValue = _ref81.defaultValue,
            validate = _ref81.validate;
         if (!data) {
            return defaultValue;
         }
         data = data.trim();
         var n = parseFloat(data);
         if (!isNaN(n) && validate(n)) {
            return n;
         }
         return defaultValue;
      }
      function getKeyword(_ref82) {
         var data = _ref82.data,
            defaultValue = _ref82.defaultValue,
            validate = _ref82.validate;
         if (!data) {
            return defaultValue;
         }
         data = data.trim();
         if (validate(data)) {
            return data;
         }
         return defaultValue;
      }
      function getStringOption(data, options) {
         return getKeyword({
            data: data,
            defaultValue: options[0],
            validate: function validate(k) {
               return options.includes(k);
            },
         });
      }
      function getMeasurement(str) {
         var def =
            arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "0";
         def || (def = "0");
         if (!str) {
            return getMeasurement(def);
         }
         var match = str.trim().match(measurementPattern);
         if (!match) {
            return getMeasurement(def);
         }
         var _match = _slicedToArray(match, 3),
            valueStr = _match[1],
            unit = _match[2];
         var value = parseFloat(valueStr);
         if (isNaN(value)) {
            return getMeasurement(def);
         }
         if (value === 0) {
            return 0;
         }
         var conv = dimConverters[unit];
         if (conv) {
            return conv(value);
         }
         return value;
      }
      function getRatio(data) {
         if (!data) {
            return { num: 1, den: 1 };
         }
         var ratio = data
            .trim()
            .split(/\s*:\s*/)
            .map(function (x) {
               return parseFloat(x);
            })
            .filter(function (x) {
               return !isNaN(x);
            });
         if (ratio.length === 1) {
            ratio.push(1);
         }
         if (ratio.length === 0) {
            return { num: 1, den: 1 };
         }
         var _ratio = _slicedToArray(ratio, 2),
            num = _ratio[0],
            den = _ratio[1];
         return { num: num, den: den };
      }
      function getRelevant(data) {
         if (!data) {
            return [];
         }
         return data
            .trim()
            .split(/\s+/)
            .map(function (e) {
               return { excluded: e[0] === "-", viewname: e.substring(1) };
            });
      }
      function getColor(data) {
         var def =
            arguments.length > 1 && arguments[1] !== undefined
               ? arguments[1]
               : [0, 0, 0];
         var _def = _slicedToArray(def, 3),
            r = _def[0],
            g = _def[1],
            b = _def[2];
         if (!data) {
            return { r: r, g: g, b: b };
         }
         var color = data
            .trim()
            .split(/\s*,\s*/)
            .map(function (c) {
               return Math.min(Math.max(0, parseInt(c.trim(), 10)), 255);
            })
            .map(function (c) {
               return isNaN(c) ? 0 : c;
            });
         if (color.length < 3) {
            return { r: r, g: g, b: b };
         }
         var _color2 = _slicedToArray(color, 3);
         r = _color2[0];
         g = _color2[1];
         b = _color2[2];
         return { r: r, g: g, b: b };
      }
      function getBBox(data) {
         var def = -1;
         if (!data) {
            return { x: def, y: def, width: def, height: def };
         }
         var bbox = data
            .trim()
            .split(/\s*,\s*/)
            .map(function (m) {
               return getMeasurement(m, "-1");
            });
         if (bbox.length < 4 || bbox[2] < 0 || bbox[3] < 0) {
            return { x: def, y: def, width: def, height: def };
         }
         var _bbox2 = _slicedToArray(bbox, 4),
            x = _bbox2[0],
            y = _bbox2[1],
            width = _bbox2[2],
            height = _bbox2[3];
         return { x: x, y: y, width: width, height: height };
      }
      var HTMLResult = /*#__PURE__*/ (function () {
         function HTMLResult(success, html, bbox, breakNode) {
            _classCallCheck(this, HTMLResult);
            this.success = success;
            this.html = html;
            this.bbox = bbox;
            this.breakNode = breakNode;
         }
         return _createClass(
            HTMLResult,
            [
               {
                  key: "isBreak",
                  value: function isBreak() {
                     return !!this.breakNode;
                  },
               },
            ],
            [
               {
                  key: "FAILURE",
                  get: function get() {
                     return shadow(
                        this,
                        "FAILURE",
                        new HTMLResult(false, null, null, null),
                     );
                  },
               },
               {
                  key: "EMPTY",
                  get: function get() {
                     return shadow(
                        this,
                        "EMPTY",
                        new HTMLResult(true, null, null, null),
                     );
                  },
               },
               {
                  key: "breakNode",
                  value: function breakNode(node) {
                     return new HTMLResult(false, null, null, node);
                  },
               },
               {
                  key: "success",
                  value: function success(html) {
                     var bbox =
                        arguments.length > 1 && arguments[1] !== undefined
                           ? arguments[1]
                           : null;
                     return new HTMLResult(true, html, bbox, null);
                  },
               },
            ],
         );
      })(); // CONCATENATED MODULE: ./src/core/xfa/fonts.js
      var FontFinder = /*#__PURE__*/ (function () {
         function FontFinder(pdfFonts) {
            _classCallCheck(this, FontFinder);
            this.fonts = new Map();
            this.cache = new Map();
            this.warned = new Set();
            this.defaultFont = null;
            this.add(pdfFonts);
         }
         return _createClass(FontFinder, [
            {
               key: "add",
               value: function add(pdfFonts) {
                  var reallyMissingFonts =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : null;
                  var _iterator127 = _createForOfIteratorHelper(pdfFonts),
                     _step127;
                  try {
                     for (_iterator127.s(); !(_step127 = _iterator127.n()).done; ) {
                        var pdfFont = _step127.value;
                        this.addPdfFont(pdfFont);
                     }
                  } catch (err) {
                     _iterator127.e(err);
                  } finally {
                     _iterator127.f();
                  }
                  var _iterator128 = _createForOfIteratorHelper(this.fonts.values()),
                     _step128;
                  try {
                     for (_iterator128.s(); !(_step128 = _iterator128.n()).done; ) {
                        var _pdfFont = _step128.value;
                        if (!_pdfFont.regular) {
                           _pdfFont.regular =
                              _pdfFont.italic || _pdfFont.bold || _pdfFont.bolditalic;
                        }
                     }
                  } catch (err) {
                     _iterator128.e(err);
                  } finally {
                     _iterator128.f();
                  }
                  if (!reallyMissingFonts || reallyMissingFonts.size === 0) {
                     return;
                  }
                  var myriad = this.fonts.get("PdfJS-Fallback-PdfJS-XFA");
                  var _iterator129 = _createForOfIteratorHelper(reallyMissingFonts),
                     _step129;
                  try {
                     for (_iterator129.s(); !(_step129 = _iterator129.n()).done; ) {
                        var missing = _step129.value;
                        this.fonts.set(missing, myriad);
                     }
                  } catch (err) {
                     _iterator129.e(err);
                  } finally {
                     _iterator129.f();
                  }
               },
            },
            {
               key: "addPdfFont",
               value: function addPdfFont(pdfFont) {
                  var cssFontInfo = pdfFont.cssFontInfo;
                  var name = cssFontInfo.fontFamily;
                  var font = this.fonts.get(name);
                  if (!font) {
                     font = Object.create(null);
                     this.fonts.set(name, font);
                     if (!this.defaultFont) {
                        this.defaultFont = font;
                     }
                  }
                  var property = "";
                  var fontWeight = parseFloat(cssFontInfo.fontWeight);
                  if (parseFloat(cssFontInfo.italicAngle) !== 0) {
                     property = fontWeight >= 700 ? "bolditalic" : "italic";
                  } else if (fontWeight >= 700) {
                     property = "bold";
                  }
                  if (!property) {
                     var _pdfFont$psName, _pdfFont$psName2, _pdfFont$psName3;
                     if (
                        pdfFont.name.includes("Bold") ||
                        ((_pdfFont$psName = pdfFont.psName) !== null &&
                           _pdfFont$psName !== void 0 &&
                           _pdfFont$psName.includes("Bold"))
                     ) {
                        property = "bold";
                     }
                     if (
                        pdfFont.name.includes("Italic") ||
                        pdfFont.name.endsWith("It") ||
                        ((_pdfFont$psName2 = pdfFont.psName) !== null &&
                           _pdfFont$psName2 !== void 0 &&
                           _pdfFont$psName2.includes("Italic")) ||
                        ((_pdfFont$psName3 = pdfFont.psName) !== null &&
                           _pdfFont$psName3 !== void 0 &&
                           _pdfFont$psName3.endsWith("It"))
                     ) {
                        property += "italic";
                     }
                  }
                  if (!property) {
                     property = "regular";
                  }
                  font[property] = pdfFont;
               },
            },
            {
               key: "getDefault",
               value: function getDefault() {
                  return this.defaultFont;
               },
            },
            {
               key: "find",
               value: function find(fontName) {
                  var mustWarn =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : true;
                  var font = this.fonts.get(fontName) || this.cache.get(fontName);
                  if (font) {
                     return font;
                  }
                  var pattern = /,|-|_| |bolditalic|bold|italic|regular|it/gi;
                  var name = fontName.replaceAll(pattern, "");
                  font = this.fonts.get(name);
                  if (font) {
                     this.cache.set(fontName, font);
                     return font;
                  }
                  name = name.toLowerCase();
                  var maybe = [];
                  var _iterator130 = _createForOfIteratorHelper(this.fonts.entries()),
                     _step130;
                  try {
                     for (_iterator130.s(); !(_step130 = _iterator130.n()).done; ) {
                        var _step130$value = _slicedToArray(_step130.value, 2),
                           _family = _step130$value[0],
                           _pdfFont4 = _step130$value[1];
                        if (
                           _family.replaceAll(pattern, "").toLowerCase().startsWith(name)
                        ) {
                           maybe.push(_pdfFont4);
                        }
                     }
                  } catch (err) {
                     _iterator130.e(err);
                  } finally {
                     _iterator130.f();
                  }
                  if (maybe.length === 0) {
                     var _iterator131 = _createForOfIteratorHelper(
                           this.fonts.entries(),
                        ),
                        _step131;
                     try {
                        for (_iterator131.s(); !(_step131 = _iterator131.n()).done; ) {
                           var _pdfFont$regular$name;
                           var _step131$value = _slicedToArray(_step131.value, 2),
                              pdfFont = _step131$value[1];
                           if (
                              (_pdfFont$regular$name = pdfFont.regular.name) !== null &&
                              _pdfFont$regular$name !== void 0 &&
                              _pdfFont$regular$name
                                 .replaceAll(pattern, "")
                                 .toLowerCase()
                                 .startsWith(name)
                           ) {
                              maybe.push(pdfFont);
                           }
                        }
                     } catch (err) {
                        _iterator131.e(err);
                     } finally {
                        _iterator131.f();
                     }
                  }
                  if (maybe.length === 0) {
                     name = name.replaceAll(/psmt|mt/gi, "");
                     var _iterator132 = _createForOfIteratorHelper(
                           this.fonts.entries(),
                        ),
                        _step132;
                     try {
                        for (_iterator132.s(); !(_step132 = _iterator132.n()).done; ) {
                           var _step132$value = _slicedToArray(_step132.value, 2),
                              family = _step132$value[0],
                              _pdfFont2 = _step132$value[1];
                           if (
                              family
                                 .replaceAll(pattern, "")
                                 .toLowerCase()
                                 .startsWith(name)
                           ) {
                              maybe.push(_pdfFont2);
                           }
                        }
                     } catch (err) {
                        _iterator132.e(err);
                     } finally {
                        _iterator132.f();
                     }
                  }
                  if (maybe.length === 0) {
                     var _iterator133 = _createForOfIteratorHelper(
                           this.fonts.values(),
                        ),
                        _step133;
                     try {
                        for (_iterator133.s(); !(_step133 = _iterator133.n()).done; ) {
                           var _pdfFont3$regular$nam;
                           var _pdfFont3 = _step133.value;
                           if (
                              (_pdfFont3$regular$nam = _pdfFont3.regular.name) !== null &&
                              _pdfFont3$regular$nam !== void 0 &&
                              _pdfFont3$regular$nam
                                 .replaceAll(pattern, "")
                                 .toLowerCase()
                                 .startsWith(name)
                           ) {
                              maybe.push(_pdfFont3);
                           }
                        }
                     } catch (err) {
                        _iterator133.e(err);
                     } finally {
                        _iterator133.f();
                     }
                  }
                  if (maybe.length >= 1) {
                     if (maybe.length !== 1 && mustWarn) {
                        warn(
                           "XFA - Too many choices to guess the correct font: ".concat(
                              fontName,
                           ),
                        );
                     }
                     this.cache.set(fontName, maybe[0]);
                     return maybe[0];
                  }
                  if (mustWarn && !this.warned.has(fontName)) {
                     this.warned.add(fontName);
                     warn("XFA - Cannot find the font: ".concat(fontName));
                  }
                  return null;
               },
            },
         ]);
      })();
      function selectFont(xfaFont, typeface) {
         if (xfaFont.posture === "italic") {
            if (xfaFont.weight === "bold") {
               return typeface.bolditalic;
            }
            return typeface.italic;
         } else if (xfaFont.weight === "bold") {
            return typeface.bold;
         }
         return typeface.regular;
      }
      function fonts_getMetrics(xfaFont) {
         var real =
            arguments.length > 1 && arguments[1] !== undefined
               ? arguments[1]
               : false;
         var pdfFont = null;
         if (xfaFont) {
            var name = stripQuotes(xfaFont.typeface);
            var typeface = xfaFont[$globalData].fontFinder.find(name);
            pdfFont = selectFont(xfaFont, typeface);
         }
         if (!pdfFont) {
            return { lineHeight: 12, lineGap: 2, lineNoGap: 10 };
         }
         var size = xfaFont.size || 10;
         var lineHeight = pdfFont.lineHeight
            ? Math.max(real ? 0 : 1.2, pdfFont.lineHeight)
            : 1.2;
         var lineGap = pdfFont.lineGap === undefined ? 0.2 : pdfFont.lineGap;
         return {
            lineHeight: lineHeight * size,
            lineGap: lineGap * size,
            lineNoGap: Math.max(1, lineHeight - lineGap) * size,
         };
      } // CONCATENATED MODULE: ./src/core/xfa/text.js
      var WIDTH_FACTOR = 1.02;
      var FontInfo = /*#__PURE__*/ (function () {
         function FontInfo(xfaFont, margin, lineHeight, fontFinder) {
            _classCallCheck(this, FontInfo);
            this.lineHeight = lineHeight;
            this.paraMargin = margin || { top: 0, bottom: 0, left: 0, right: 0 };
            if (!xfaFont) {
               var _this$defaultFont = this.defaultFont(fontFinder);
               var _this$defaultFont2 = _slicedToArray(_this$defaultFont, 2);
               this.pdfFont = _this$defaultFont2[0];
               this.xfaFont = _this$defaultFont2[1];
               return;
            }
            this.xfaFont = {
               typeface: xfaFont.typeface,
               posture: xfaFont.posture,
               weight: xfaFont.weight,
               size: xfaFont.size,
               letterSpacing: xfaFont.letterSpacing,
            };
            var typeface = fontFinder.find(xfaFont.typeface);
            if (!typeface) {
               var _this$defaultFont3 = this.defaultFont(fontFinder);
               var _this$defaultFont4 = _slicedToArray(_this$defaultFont3, 2);
               this.pdfFont = _this$defaultFont4[0];
               this.xfaFont = _this$defaultFont4[1];
               return;
            }
            this.pdfFont = selectFont(xfaFont, typeface);
            if (!this.pdfFont) {
               var _this$defaultFont5 = this.defaultFont(fontFinder);
               var _this$defaultFont6 = _slicedToArray(_this$defaultFont5, 2);
               this.pdfFont = _this$defaultFont6[0];
               this.xfaFont = _this$defaultFont6[1];
            }
         }
         return _createClass(FontInfo, [
            {
               key: "defaultFont",
               value: function defaultFont(fontFinder) {
                  var font =
                     fontFinder.find("Helvetica", false) ||
                     fontFinder.find("Myriad Pro", false) ||
                     fontFinder.find("Arial", false) ||
                     fontFinder.getDefault();
                  if (font !== null && font !== void 0 && font.regular) {
                     var pdfFont = font.regular;
                     var _info = pdfFont.cssFontInfo;
                     var _xfaFont = {
                        typeface: _info.fontFamily,
                        posture: "normal",
                        weight: "normal",
                        size: 10,
                        letterSpacing: 0,
                     };
                     return [pdfFont, _xfaFont];
                  }
                  var xfaFont = {
                     typeface: "Courier",
                     posture: "normal",
                     weight: "normal",
                     size: 10,
                     letterSpacing: 0,
                  };
                  return [null, xfaFont];
               },
            },
         ]);
      })();
      var FontSelector = /*#__PURE__*/ (function () {
         function FontSelector(
            defaultXfaFont,
            defaultParaMargin,
            defaultLineHeight,
            fontFinder,
         ) {
            _classCallCheck(this, FontSelector);
            this.fontFinder = fontFinder;
            this.stack = [
               new FontInfo(
                  defaultXfaFont,
                  defaultParaMargin,
                  defaultLineHeight,
                  fontFinder,
               ),
            ];
         }
         return _createClass(FontSelector, [
            {
               key: "pushData",
               value: function pushData(xfaFont, margin, lineHeight) {
                  var lastFont = this.stack.at(-1);
                  for (
                     var _i52 = 0,
                        _arr = [
                           "typeface",
                           "posture",
                           "weight",
                           "size",
                           "letterSpacing",
                        ];
                     _i52 < _arr.length;
                     _i52++
                  ) {
                     var name = _arr[_i52];
                     if (!xfaFont[name]) {
                        xfaFont[name] = lastFont.xfaFont[name];
                     }
                  }
                  for (
                     var _i53 = 0, _arr2 = ["top", "bottom", "left", "right"];
                     _i53 < _arr2.length;
                     _i53++
                  ) {
                     var _name = _arr2[_i53];
                     if (isNaN(margin[_name])) {
                        margin[_name] = lastFont.paraMargin[_name];
                     }
                  }
                  var fontInfo = new FontInfo(
                     xfaFont,
                     margin,
                     lineHeight || lastFont.lineHeight,
                     this.fontFinder,
                  );
                  if (!fontInfo.pdfFont) {
                     fontInfo.pdfFont = lastFont.pdfFont;
                  }
                  this.stack.push(fontInfo);
               },
            },
            {
               key: "popFont",
               value: function popFont() {
                  this.stack.pop();
               },
            },
            {
               key: "topFont",
               value: function topFont() {
                  return this.stack.at(-1);
               },
            },
         ]);
      })();
      var TextMeasure = /*#__PURE__*/ (function () {
         function TextMeasure(
            defaultXfaFont,
            defaultParaMargin,
            defaultLineHeight,
            fonts,
         ) {
            _classCallCheck(this, TextMeasure);
            this.glyphs = [];
            this.fontSelector = new FontSelector(
               defaultXfaFont,
               defaultParaMargin,
               defaultLineHeight,
               fonts,
            );
            this.extraHeight = 0;
         }
         return _createClass(TextMeasure, [
            {
               key: "pushData",
               value: function pushData(xfaFont, margin, lineHeight) {
                  this.fontSelector.pushData(xfaFont, margin, lineHeight);
               },
            },
            {
               key: "popFont",
               value: function popFont(xfaFont) {
                  return this.fontSelector.popFont();
               },
            },
            {
               key: "addPara",
               value: function addPara() {
                  var lastFont = this.fontSelector.topFont();
                  this.extraHeight +=
                     lastFont.paraMargin.top + lastFont.paraMargin.bottom;
               },
            },
            {
               key: "addString",
               value: function addString(str) {
                  if (!str) {
                     return;
                  }
                  var lastFont = this.fontSelector.topFont();
                  var fontSize = lastFont.xfaFont.size;
                  if (lastFont.pdfFont) {
                     var letterSpacing = lastFont.xfaFont.letterSpacing;
                     var pdfFont = lastFont.pdfFont;
                     var fontLineHeight = pdfFont.lineHeight || 1.2;
                     var lineHeight =
                        lastFont.lineHeight || Math.max(1.2, fontLineHeight) * fontSize;
                     var lineGap =
                        pdfFont.lineGap === undefined ? 0.2 : pdfFont.lineGap;
                     var noGap = fontLineHeight - lineGap;
                     var firstLineHeight = Math.max(1, noGap) * fontSize;
                     var scale = fontSize / 1000;
                     var fallbackWidth =
                        pdfFont.defaultWidth || pdfFont.charsToGlyphs(" ")[0].width;
                     var _iterator134 = _createForOfIteratorHelper(
                           str.split(/[\u2029\n]/),
                        ),
                        _step134;
                     try {
                        for (_iterator134.s(); !(_step134 = _iterator134.n()).done; ) {
                           var line = _step134.value;
                           var encodedLine = pdfFont.encodeString(line).join("");
                           var glyphs = pdfFont.charsToGlyphs(encodedLine);
                           var _iterator135 = _createForOfIteratorHelper(glyphs),
                              _step135;
                           try {
                              for (
                                 _iterator135.s();
                                 !(_step135 = _iterator135.n()).done;

                              ) {
                                 var glyph = _step135.value;
                                 var width = glyph.width || fallbackWidth;
                                 this.glyphs.push([
                                    width * scale + letterSpacing,
                                    lineHeight,
                                    firstLineHeight,
                                    glyph.unicode,
                                    false,
                                 ]);
                              }
                           } catch (err) {
                              _iterator135.e(err);
                           } finally {
                              _iterator135.f();
                           }
                           this.glyphs.push([0, 0, 0, "\n", true]);
                        }
                     } catch (err) {
                        _iterator134.e(err);
                     } finally {
                        _iterator134.f();
                     }
                     this.glyphs.pop();
                     return;
                  }
                  var _iterator136 = _createForOfIteratorHelper(
                        str.split(/[\u2029\n]/),
                     ),
                     _step136;
                  try {
                     for (_iterator136.s(); !(_step136 = _iterator136.n()).done; ) {
                        var _line2 = _step136.value;
                        var _iterator137 = _createForOfIteratorHelper(_line2.split("")),
                           _step137;
                        try {
                           for (
                              _iterator137.s();
                              !(_step137 = _iterator137.n()).done;

                           ) {
                              var _char11 = _step137.value;
                              this.glyphs.push([
                                 fontSize,
                                 1.2 * fontSize,
                                 fontSize,
                                 _char11,
                                 false,
                              ]);
                           }
                        } catch (err) {
                           _iterator137.e(err);
                        } finally {
                           _iterator137.f();
                        }
                        this.glyphs.push([0, 0, 0, "\n", true]);
                     }
                  } catch (err) {
                     _iterator136.e(err);
                  } finally {
                     _iterator136.f();
                  }
                  this.glyphs.pop();
               },
            },
            {
               key: "compute",
               value: function compute(maxWidth) {
                  var lastSpacePos = -1,
                     lastSpaceWidth = 0,
                     width = 0,
                     height = 0,
                     currentLineWidth = 0,
                     currentLineHeight = 0;
                  var isBroken = false;
                  var isFirstLine = true;
                  for (var i = 0, ii = this.glyphs.length; i < ii; i++) {
                     var _this$glyphs$i = _slicedToArray(this.glyphs[i], 5),
                        glyphWidth = _this$glyphs$i[0],
                        lineHeight = _this$glyphs$i[1],
                        firstLineHeight = _this$glyphs$i[2],
                        _char12 = _this$glyphs$i[3],
                        isEOL = _this$glyphs$i[4];
                     var isSpace = _char12 === " ";
                     var glyphHeight = isFirstLine ? firstLineHeight : lineHeight;
                     if (isEOL) {
                        width = Math.max(width, currentLineWidth);
                        currentLineWidth = 0;
                        height += currentLineHeight;
                        currentLineHeight = glyphHeight;
                        lastSpacePos = -1;
                        lastSpaceWidth = 0;
                        isFirstLine = false;
                        continue;
                     }
                     if (isSpace) {
                        if (currentLineWidth + glyphWidth > maxWidth) {
                           width = Math.max(width, currentLineWidth);
                           currentLineWidth = 0;
                           height += currentLineHeight;
                           currentLineHeight = glyphHeight;
                           lastSpacePos = -1;
                           lastSpaceWidth = 0;
                           isBroken = true;
                           isFirstLine = false;
                        } else {
                           currentLineHeight = Math.max(glyphHeight, currentLineHeight);
                           lastSpaceWidth = currentLineWidth;
                           currentLineWidth += glyphWidth;
                           lastSpacePos = i;
                        }
                        continue;
                     }
                     if (currentLineWidth + glyphWidth > maxWidth) {
                        height += currentLineHeight;
                        currentLineHeight = glyphHeight;
                        if (lastSpacePos !== -1) {
                           i = lastSpacePos;
                           width = Math.max(width, lastSpaceWidth);
                           currentLineWidth = 0;
                           lastSpacePos = -1;
                           lastSpaceWidth = 0;
                        } else {
                           width = Math.max(width, currentLineWidth);
                           currentLineWidth = glyphWidth;
                        }
                        isBroken = true;
                        isFirstLine = false;
                        continue;
                     }
                     currentLineWidth += glyphWidth;
                     currentLineHeight = Math.max(glyphHeight, currentLineHeight);
                  }
                  width = Math.max(width, currentLineWidth);
                  height += currentLineHeight + this.extraHeight;
                  return {
                     width: WIDTH_FACTOR * width,
                     height: height,
                     isBroken: isBroken,
                  };
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xfa/som.js
      var namePattern = /^[^.[]+/;
      var indexPattern = /^[^\]]+/;
      var operators = {
         dot: 0,
         dotDot: 1,
         dotHash: 2,
         dotBracket: 3,
         dotParen: 4,
      };
      var shortcuts = new Map([
         [
            "$data",
            function (root, current) {
               return root.datasets ? root.datasets.data : root;
            },
         ],
         [
            "$record",
            function (root, current) {
               return (root.datasets ? root.datasets.data : root)[$getChildren]()[0];
            },
         ],
         [
            "$template",
            function (root, current) {
               return root.template;
            },
         ],
         [
            "$connectionSet",
            function (root, current) {
               return root.connectionSet;
            },
         ],
         [
            "$form",
            function (root, current) {
               return root.form;
            },
         ],
         [
            "$layout",
            function (root, current) {
               return root.layout;
            },
         ],
         [
            "$host",
            function (root, current) {
               return root.host;
            },
         ],
         [
            "$dataWindow",
            function (root, current) {
               return root.dataWindow;
            },
         ],
         [
            "$event",
            function (root, current) {
               return root.event;
            },
         ],
         [
            "!",
            function (root, current) {
               return root.datasets;
            },
         ],
         [
            "$xfa",
            function (root, current) {
               return root;
            },
         ],
         [
            "xfa",
            function (root, current) {
               return root;
            },
         ],
         [
            "$",
            function (root, current) {
               return current;
            },
         ],
      ]);
      var somCache = new WeakMap();
      function parseIndex(index) {
         index = index.trim();
         if (index === "*") {
            return Infinity;
         }
         return parseInt(index, 10) || 0;
      }
      function parseExpression(expr, dotDotAllowed) {
         var noExpr =
            arguments.length > 2 && arguments[2] !== undefined
               ? arguments[2]
               : true;
         var match = expr.match(namePattern);
         if (!match) {
            return null;
         }
         var _match2 = match,
            _match3 = _slicedToArray(_match2, 1),
            name = _match3[0];
         var parsed = [
            {
               name: name,
               cacheName: "." + name,
               index: 0,
               js: null,
               formCalc: null,
               operator: operators.dot,
            },
         ];
         var pos = name.length;
         while (pos < expr.length) {
            var spos = pos;
            var _char13 = expr.charAt(pos++);
            if (_char13 === "[") {
               match = expr.slice(pos).match(indexPattern);
               if (!match) {
                  warn("XFA - Invalid index in SOM expression");
                  return null;
               }
               parsed.at(-1).index = parseIndex(match[0]);
               pos += match[0].length + 1;
               continue;
            }
            var operator = void 0;
            switch (expr.charAt(pos)) {
               case ".":
                  if (!dotDotAllowed) {
                     return null;
                  }
                  pos++;
                  operator = operators.dotDot;
                  break;
               case "#":
                  pos++;
                  operator = operators.dotHash;
                  break;
               case "[":
                  if (noExpr) {
                     warn(
                        "XFA - SOM expression contains a FormCalc subexpression which is not supported for now.",
                     );
                     return null;
                  }
                  operator = operators.dotBracket;
                  break;
               case "(":
                  if (noExpr) {
                     warn(
                        "XFA - SOM expression contains a JavaScript subexpression which is not supported for now.",
                     );
                     return null;
                  }
                  operator = operators.dotParen;
                  break;
               default:
                  operator = operators.dot;
                  break;
            }
            match = expr.slice(pos).match(namePattern);
            if (!match) {
               break;
            }
            var _match4 = match;
            var _match5 = _slicedToArray(_match4, 1);
            name = _match5[0];
            pos += name.length;
            parsed.push({
               name: name,
               cacheName: expr.slice(spos, pos),
               operator: operator,
               index: 0,
               js: null,
               formCalc: null,
            });
         }
         return parsed;
      }
      function searchNode(root, container, expr) {
         var dotDotAllowed =
            arguments.length > 3 && arguments[3] !== undefined
               ? arguments[3]
               : true;
         var useCache =
            arguments.length > 4 && arguments[4] !== undefined
               ? arguments[4]
               : true;
         var parsed = parseExpression(expr, dotDotAllowed);
         if (!parsed) {
            return null;
         }
         var fn = shortcuts.get(parsed[0].name);
         var i = 0;
         var isQualified;
         if (fn) {
            isQualified = true;
            root = [fn(root, container)];
            i = 1;
         } else {
            isQualified = container === null;
            root = [container || root];
         }
         var _loop3 = function _loop3() {
               var _parsed$i = parsed[i],
                  name = _parsed$i.name,
                  cacheName = _parsed$i.cacheName,
                  operator = _parsed$i.operator,
                  index = _parsed$i.index;
               var nodes = [];
               var _iterator138 = _createForOfIteratorHelper(root),
                  _step138;
               try {
                  for (_iterator138.s(); !(_step138 = _iterator138.n()).done; ) {
                     var node = _step138.value;
                     if (!node.isXFAObject) {
                        continue;
                     }
                     var children = void 0,
                        cached = void 0;
                     if (useCache) {
                        cached = somCache.get(node);
                        if (!cached) {
                           cached = new Map();
                           somCache.set(node, cached);
                        }
                        children = cached.get(cacheName);
                     }
                     if (!children) {
                        switch (operator) {
                           case operators.dot:
                              children = node[$getChildrenByName](name, false);
                              break;
                           case operators.dotDot:
                              children = node[$getChildrenByName](name, true);
                              break;
                           case operators.dotHash:
                              children = node[$getChildrenByClass](name);
                              children = children.isXFAObjectArray
                                 ? children.children
                                 : [children];
                              break;
                           default:
                              break;
                        }
                        if (useCache) {
                           cached.set(cacheName, children);
                        }
                     }
                     if (children.length > 0) {
                        nodes.push(children);
                     }
                  }
               } catch (err) {
                  _iterator138.e(err);
               } finally {
                  _iterator138.f();
               }
               if (nodes.length === 0 && !isQualified && i === 0) {
                  var parent = container[$getParent]();
                  container = parent;
                  if (!container) {
                     return { v: null };
                  }
                  i = -1;
                  root = [container];
                  return 0; // continue
               }
               root = isFinite(index)
                  ? nodes
                     .filter(function (node) {
                        return index < node.length;
                     })
                     .map(function (node) {
                        return node[index];
                     })
                  : nodes.flat();
            },
            _ret;
         for (var ii = parsed.length; i < ii; i++) {
            _ret = _loop3();
            if (_ret === 0) continue;
            if (_ret) return _ret.v;
         }
         if (root.length === 0) {
            return null;
         }
         return root;
      }
      function createDataNode(root, container, expr) {
         var parsed = parseExpression(expr);
         if (!parsed) {
            return null;
         }
         if (
            parsed.some(function (x) {
               return x.operator === operators.dotDot;
            })
         ) {
            return null;
         }
         var fn = shortcuts.get(parsed[0].name);
         var i = 0;
         if (fn) {
            root = fn(root, container);
            i = 1;
         } else {
            root = container || root;
         }
         for (var ii = parsed.length; i < ii; i++) {
            var _parsed$i2 = parsed[i],
               name = _parsed$i2.name,
               operator = _parsed$i2.operator,
               index = _parsed$i2.index;
            if (!isFinite(index)) {
               parsed[i].index = 0;
               return root.createNodes(parsed.slice(i));
            }
            var children = void 0;
            switch (operator) {
               case operators.dot:
                  children = root[$getChildrenByName](name, false);
                  break;
               case operators.dotDot:
                  children = root[$getChildrenByName](name, true);
                  break;
               case operators.dotHash:
                  children = root[$getChildrenByClass](name);
                  children = children.isXFAObjectArray
                     ? children.children
                     : [children];
                  break;
               default:
                  break;
            }
            if (children.length === 0) {
               return root.createNodes(parsed.slice(i));
            }
            if (index < children.length) {
               var child = children[index];
               if (!child.isXFAObject) {
                  warn("XFA - Cannot create a node.");
                  return null;
               }
               root = child;
            } else {
               parsed[i].index = index - children.length;
               return root.createNodes(parsed.slice(i));
            }
         }
         return null;
      } // CONCATENATED MODULE: ./src/core/xfa/xfa_object.js
      var _applyPrototype = Symbol();
      var _attributes = Symbol();
      var _attributeNames = Symbol();
      var _children = Symbol("_children");
      var _cloneAttribute = Symbol();
      var _dataValue = Symbol();
      var _defaultValue = Symbol();
      var _filteredChildrenGenerator = Symbol();
      var _getPrototype = Symbol();
      var _getUnsetAttributes = Symbol();
      var _hasChildren = Symbol();
      var _max = Symbol();
      var _options = Symbol();
      var _parent = Symbol("parent");
      var _resolvePrototypesHelper = Symbol();
      var _setAttributes = Symbol();
      var _validator = Symbol();
      var uid = 0;
      var NS_DATASETS = NamespaceIds.datasets.id;
      var XFAObject = /*#__PURE__*/ (function () {
         function XFAObject(nsId, name) {
            var hasChildren =
               arguments.length > 2 && arguments[2] !== undefined
                  ? arguments[2]
                  : false;
            _classCallCheck(this, XFAObject);
            this[$namespaceId] = nsId;
            this[$nodeName] = name;
            this[_hasChildren] = hasChildren;
            this[_parent] = null;
            this[_children] = [];
            this[$uid] = "".concat(name).concat(uid++);
            this[$globalData] = null;
         }
         return _createClass(
            XFAObject,
            [
               {
                  key: "isXFAObject",
                  get: function get() {
                     return true;
                  },
               },
               {
                  key: "isXFAObjectArray",
                  get: function get() {
                     return false;
                  },
               },
               {
                  key: "createNodes",
                  value: function createNodes(path) {
                     var root = this,
                        node = null;
                     var _iterator139 = _createForOfIteratorHelper(path),
                        _step139;
                     try {
                        for (_iterator139.s(); !(_step139 = _iterator139.n()).done; ) {
                           var _step139$value = _step139.value,
                              name = _step139$value.name,
                              index = _step139$value.index;
                           for (
                              var i = 0, ii = isFinite(index) ? index : 0;
                              i <= ii;
                              i++
                           ) {
                              var nsId =
                                 root[$namespaceId] === NS_DATASETS
                                    ? -1
                                    : root[$namespaceId];
                              node = new XmlObject(nsId, name);
                              root[$appendChild](node);
                           }
                           root = node;
                        }
                     } catch (err) {
                        _iterator139.e(err);
                     } finally {
                        _iterator139.f();
                     }
                     return node;
                  },
               },
               {
                  key: $onChild,
                  value: function value(child) {
                     if (!this[_hasChildren] || !this[$onChildCheck](child)) {
                        return false;
                     }
                     var name = child[$nodeName];
                     var node = this[name];
                     if (node instanceof XFAObjectArray) {
                        if (node.push(child)) {
                           this[$appendChild](child);
                           return true;
                        }
                     } else {
                        if (node !== null) {
                           this[$removeChild](node);
                        }
                        this[name] = child;
                        this[$appendChild](child);
                        return true;
                     }
                     var id = "";
                     if (this.id) {
                        id = " (id: ".concat(this.id, ")");
                     } else if (this.name) {
                        id = " (name: "
                           .concat(this.name, " ")
                           .concat(this.h.value, ")");
                     }
                     warn(
                        'XFA - node "'
                           .concat(this[$nodeName], '"')
                           .concat(id, ' has already enough "')
                           .concat(name, '"!'),
                     );
                     return false;
                  },
               },
               {
                  key: $onChildCheck,
                  value: function value(child) {
                     return (
                        this.hasOwnProperty(child[$nodeName]) &&
                        child[$namespaceId] === this[$namespaceId]
                     );
                  },
               },
               {
                  key: $isNsAgnostic,
                  value: function value() {
                     return false;
                  },
               },
               {
                  key: $acceptWhitespace,
                  value: function value() {
                     return false;
                  },
               },
               {
                  key: $isCDATAXml,
                  value: function value() {
                     return false;
                  },
               },
               {
                  key: $isBindable,
                  value: function value() {
                     return false;
                  },
               },
               {
                  key: $popPara,
                  value: function value() {
                     if (this.para) {
                        this[$getTemplateRoot]()[$extra].paraStack.pop();
                     }
                  },
               },
               {
                  key: $pushPara,
                  value: function value() {
                     this[$getTemplateRoot]()[$extra].paraStack.push(this.para);
                  },
               },
               {
                  key: $setId,
                  value: function value(ids) {
                     if (this.id && this[$namespaceId] === NamespaceIds.template.id) {
                        ids.set(this.id, this);
                     }
                  },
               },
               {
                  key: $getTemplateRoot,
                  value: function value() {
                     return this[$globalData].template;
                  },
               },
               {
                  key: $isSplittable,
                  value: function value() {
                     return false;
                  },
               },
               {
                  key: $isThereMoreWidth,
                  value: function value() {
                     return false;
                  },
               },
               {
                  key: $appendChild,
                  value: function value(child) {
                     child[_parent] = this;
                     this[_children].push(child);
                     if (!child[$globalData] && this[$globalData]) {
                        child[$globalData] = this[$globalData];
                     }
                  },
               },
               {
                  key: $removeChild,
                  value: function value(child) {
                     var i = this[_children].indexOf(child);
                     this[_children].splice(i, 1);
                  },
               },
               {
                  key: $hasSettableValue,
                  value: function value() {
                     return this.hasOwnProperty("value");
                  },
               },
               { key: $setValue, value: function value(_) {} },
               { key: $onText, value: function value(_) {} },
               { key: $finalize, value: function value() {} },
               {
                  key: $clean,
                  value: function value(builder) {
                     delete this[_hasChildren];
                     if (this[$cleanup]) {
                        builder.clean(this[$cleanup]);
                        delete this[$cleanup];
                     }
                  },
               },
               {
                  key: $indexOf,
                  value: function value(child) {
                     return this[_children].indexOf(child);
                  },
               },
               {
                  key: $insertAt,
                  value: function value(i, child) {
                     child[_parent] = this;
                     this[_children].splice(i, 0, child);
                     if (!child[$globalData] && this[$globalData]) {
                        child[$globalData] = this[$globalData];
                     }
                  },
               },
               {
                  key: $isTransparent,
                  value: function value() {
                     return !this.name;
                  },
               },
               {
                  key: $lastAttribute,
                  value: function value() {
                     return "";
                  },
               },
               {
                  key: $text,
                  value: function value() {
                     if (this[_children].length === 0) {
                        return this[$content];
                     }
                     return this[_children]
                        .map(function (c) {
                           return c[$text]();
                        })
                        .join("");
                  },
               },
               {
                  key: _attributeNames,
                  get: function get() {
                     var proto = Object.getPrototypeOf(this);
                     if (!proto._attributes) {
                        var attributes = (proto._attributes = new Set());
                        var _iterator140 = _createForOfIteratorHelper(
                              Object.getOwnPropertyNames(this),
                           ),
                           _step140;
                        try {
                           for (
                              _iterator140.s();
                              !(_step140 = _iterator140.n()).done;

                           ) {
                              var name = _step140.value;
                              if (
                                 this[name] === null ||
                                 this[name] instanceof XFAObject ||
                                 this[name] instanceof XFAObjectArray
                              ) {
                                 break;
                              }
                              attributes.add(name);
                           }
                        } catch (err) {
                           _iterator140.e(err);
                        } finally {
                           _iterator140.f();
                        }
                     }
                     return shadow(this, _attributeNames, proto._attributes);
                  },
               },
               {
                  key: $isDescendent,
                  value: function value(parent) {
                     var node = this;
                     while (node) {
                        if (node === parent) {
                           return true;
                        }
                        node = node[$getParent]();
                     }
                     return false;
                  },
               },
               {
                  key: $getParent,
                  value: function value() {
                     return this[_parent];
                  },
               },
               {
                  key: $getSubformParent,
                  value: function value() {
                     return this[$getParent]();
                  },
               },
               {
                  key: $getChildren,
                  value: function value() {
                     var name =
                        arguments.length > 0 && arguments[0] !== undefined
                           ? arguments[0]
                           : null;
                     if (!name) {
                        return this[_children];
                     }
                     return this[name];
                  },
               },
               {
                  key: $dump,
                  value: function value() {
                     var dumped = Object.create(null);
                     if (this[$content]) {
                        dumped.$content = this[$content];
                     }
                     var _iterator141 = _createForOfIteratorHelper(
                           Object.getOwnPropertyNames(this),
                        ),
                        _step141;
                     try {
                        for (_iterator141.s(); !(_step141 = _iterator141.n()).done; ) {
                           var name = _step141.value;
                           var value = this[name];
                           if (value === null) {
                              continue;
                           }
                           if (value instanceof XFAObject) {
                              dumped[name] = value[$dump]();
                           } else if (value instanceof XFAObjectArray) {
                              if (!value.isEmpty()) {
                                 dumped[name] = value.dump();
                              }
                           } else {
                              dumped[name] = value;
                           }
                        }
                     } catch (err) {
                        _iterator141.e(err);
                     } finally {
                        _iterator141.f();
                     }
                     return dumped;
                  },
               },
               {
                  key: $toStyle,
                  value: function value() {
                     return null;
                  },
               },
               {
                  key: $toHTML,
                  value: function value() {
                     return HTMLResult.EMPTY;
                  },
               },
               {
                  key: $getContainedChildren,
                  value: /*#__PURE__*/ _regenerator().m(function value() {
                     var _iterator142, _step142, node, _t33;
                     return _regenerator().w(
                        function (_context35) {
                           while (1)
                              switch ((_context35.p = _context35.n)) {
                                 case 0:
                                    _iterator142 = _createForOfIteratorHelper(
                                       this[$getChildren](),
                                    );
                                    _context35.p = 1;
                                    _iterator142.s();
                                 case 2:
                                    if ((_step142 = _iterator142.n()).done) {
                                       _context35.n = 4;
                                       break;
                                    }
                                    node = _step142.value;
                                    _context35.n = 3;
                                    return node;
                                 case 3:
                                    _context35.n = 2;
                                    break;
                                 case 4:
                                    _context35.n = 6;
                                    break;
                                 case 5:
                                    _context35.p = 5;
                                    _t33 = _context35.v;
                                    _iterator142.e(_t33);
                                 case 6:
                                    _context35.p = 6;
                                    _iterator142.f();
                                    return _context35.f(6);
                                 case 7:
                                    return _context35.a(2);
                              }
                        },
                        value,
                        this,
                        [[1, 5, 6, 7]],
                     );
                  }),
               },
               {
                  key: _filteredChildrenGenerator,
                  value: /*#__PURE__*/ _regenerator().m(
                     function value(filter, include) {
                        var _iterator143, _step143, node, availableSpace, res, _t34;
                        return _regenerator().w(
                           function (_context36) {
                              while (1)
                                 switch ((_context36.p = _context36.n)) {
                                    case 0:
                                       _iterator143 = _createForOfIteratorHelper(
                                          this[$getContainedChildren](),
                                       );
                                       _context36.p = 1;
                                       _iterator143.s();
                                    case 2:
                                       if ((_step143 = _iterator143.n()).done) {
                                          _context36.n = 4;
                                          break;
                                       }
                                       node = _step143.value;
                                       if (
                                          !(
                                             !filter || include === filter.has(node[$nodeName])
                                          )
                                       ) {
                                          _context36.n = 3;
                                          break;
                                       }
                                       availableSpace = this[$getAvailableSpace]();
                                       res = node[$toHTML](availableSpace);
                                       if (!res.success) {
                                          this[$extra].failingNode = node;
                                       }
                                       _context36.n = 3;
                                       return res;
                                    case 3:
                                       _context36.n = 2;
                                       break;
                                    case 4:
                                       _context36.n = 6;
                                       break;
                                    case 5:
                                       _context36.p = 5;
                                       _t34 = _context36.v;
                                       _iterator143.e(_t34);
                                    case 6:
                                       _context36.p = 6;
                                       _iterator143.f();
                                       return _context36.f(6);
                                    case 7:
                                       return _context36.a(2);
                                 }
                           },
                           value,
                           this,
                           [[1, 5, 6, 7]],
                        );
                     },
                  ),
               },
               {
                  key: $flushHTML,
                  value: function value() {
                     return null;
                  },
               },
               {
                  key: $addHTML,
                  value: function value(html, bbox) {
                     this[$extra].children.push(html);
                  },
               },
               { key: $getAvailableSpace, value: function value() {} },
               {
                  key: $childrenToHTML,
                  value: function value(_ref83) {
                     var _ref83$filter = _ref83.filter,
                        filter = _ref83$filter === void 0 ? null : _ref83$filter,
                        _ref83$include = _ref83.include,
                        include = _ref83$include === void 0 ? true : _ref83$include;
                     if (!this[$extra].generator) {
                        this[$extra].generator = this[_filteredChildrenGenerator](
                           filter,
                           include,
                        );
                     } else {
                        var availableSpace = this[$getAvailableSpace]();
                        var res = this[$extra].failingNode[$toHTML](availableSpace);
                        if (!res.success) {
                           return res;
                        }
                        if (res.html) {
                           this[$addHTML](res.html, res.bbox);
                        }
                        delete this[$extra].failingNode;
                     }
                     while (true) {
                        var gen = this[$extra].generator.next();
                        if (gen.done) {
                           break;
                        }
                        var _res = gen.value;
                        if (!_res.success) {
                           return _res;
                        }
                        if (_res.html) {
                           this[$addHTML](_res.html, _res.bbox);
                        }
                     }
                     this[$extra].generator = null;
                     return HTMLResult.EMPTY;
                  },
               },
               {
                  key: $setSetAttributes,
                  value: function value(attributes) {
                     this[_setAttributes] = new Set(Object.keys(attributes));
                  },
               },
               {
                  key: _getUnsetAttributes,
                  value: function value(protoAttributes) {
                     var allAttr = this[_attributeNames];
                     var setAttr = this[_setAttributes];
                     return _toConsumableArray(protoAttributes).filter(function (x) {
                        return allAttr.has(x) && !setAttr.has(x);
                     });
                  },
               },
               {
                  key: $resolvePrototypes,
                  value: function value(ids) {
                     var ancestors =
                        arguments.length > 1 && arguments[1] !== undefined
                           ? arguments[1]
                           : new Set();
                     var _iterator144 = _createForOfIteratorHelper(this[_children]),
                        _step144;
                     try {
                        for (_iterator144.s(); !(_step144 = _iterator144.n()).done; ) {
                           var child = _step144.value;
                           child[_resolvePrototypesHelper](ids, ancestors);
                        }
                     } catch (err) {
                        _iterator144.e(err);
                     } finally {
                        _iterator144.f();
                     }
                  },
               },
               {
                  key: _resolvePrototypesHelper,
                  value: function value(ids, ancestors) {
                     var proto = this[_getPrototype](ids, ancestors);
                     if (proto) {
                        this[_applyPrototype](proto, ids, ancestors);
                     } else {
                        this[$resolvePrototypes](ids, ancestors);
                     }
                  },
               },
               {
                  key: _getPrototype,
                  value: function value(ids, ancestors) {
                     var use = this.use,
                        usehref = this.usehref;
                     if (!use && !usehref) {
                        return null;
                     }
                     var proto = null;
                     var somExpression = null;
                     var id = null;
                     var ref = use;
                     if (usehref) {
                        ref = usehref;
                        if (usehref.startsWith("#som(") && usehref.endsWith(")")) {
                           somExpression = usehref.slice("#som(".length, -1);
                        } else if (
                           usehref.startsWith(".#som(") &&
                           usehref.endsWith(")")
                        ) {
                           somExpression = usehref.slice(".#som(".length, -1);
                        } else if (usehref.startsWith("#")) {
                           id = usehref.slice(1);
                        } else if (usehref.startsWith(".#")) {
                           id = usehref.slice(2);
                        }
                     } else if (use.startsWith("#")) {
                        id = use.slice(1);
                     } else {
                        somExpression = use;
                     }
                     this.use = this.usehref = "";
                     if (id) {
                        proto = ids.get(id);
                     } else {
                        proto = searchNode(
                           ids.get($root),
                           this,
                           somExpression,
                           true,
                           false,
                        );
                        if (proto) {
                           proto = proto[0];
                        }
                     }
                     if (!proto) {
                        warn("XFA - Invalid prototype reference: ".concat(ref, "."));
                        return null;
                     }
                     if (proto[$nodeName] !== this[$nodeName]) {
                        warn(
                           "XFA - Incompatible prototype: "
                              .concat(proto[$nodeName], " !== ")
                              .concat(this[$nodeName], "."),
                        );
                        return null;
                     }
                     if (ancestors.has(proto)) {
                        warn("XFA - Cycle detected in prototypes use.");
                        return null;
                     }
                     ancestors.add(proto);
                     var protoProto = proto[_getPrototype](ids, ancestors);
                     if (protoProto) {
                        proto[_applyPrototype](protoProto, ids, ancestors);
                     }
                     proto[$resolvePrototypes](ids, ancestors);
                     ancestors["delete"](proto);
                     return proto;
                  },
               },
               {
                  key: _applyPrototype,
                  value: function value(proto, ids, ancestors) {
                     if (ancestors.has(proto)) {
                        warn("XFA - Cycle detected in prototypes use.");
                        return;
                     }
                     if (!this[$content] && proto[$content]) {
                        this[$content] = proto[$content];
                     }
                     var newAncestors = new Set(ancestors);
                     newAncestors.add(proto);
                     var _iterator145 = _createForOfIteratorHelper(
                           this[_getUnsetAttributes](proto[_setAttributes]),
                        ),
                        _step145;
                     try {
                        for (_iterator145.s(); !(_step145 = _iterator145.n()).done; ) {
                           var unsetAttrName = _step145.value;
                           this[unsetAttrName] = proto[unsetAttrName];
                           if (this[_setAttributes]) {
                              this[_setAttributes].add(unsetAttrName);
                           }
                        }
                     } catch (err) {
                        _iterator145.e(err);
                     } finally {
                        _iterator145.f();
                     }
                     var _iterator146 = _createForOfIteratorHelper(
                           Object.getOwnPropertyNames(this),
                        ),
                        _step146;
                     try {
                        for (_iterator146.s(); !(_step146 = _iterator146.n()).done; ) {
                           var name = _step146.value;
                           if (this[_attributeNames].has(name)) {
                              continue;
                           }
                           var value = this[name];
                           var protoValue = proto[name];
                           if (value instanceof XFAObjectArray) {
                              var _iterator147 = _createForOfIteratorHelper(
                                    value[_children],
                                 ),
                                 _step147;
                              try {
                                 for (
                                    _iterator147.s();
                                    !(_step147 = _iterator147.n()).done;

                                 ) {
                                    var _child = _step147.value;
                                    _child[_resolvePrototypesHelper](ids, ancestors);
                                 }
                              } catch (err) {
                                 _iterator147.e(err);
                              } finally {
                                 _iterator147.f();
                              }
                              for (
                                 var i = value[_children].length,
                                    ii = protoValue[_children].length;
                                 i < ii;
                                 i++
                              ) {
                                 var child = proto[_children][i][$clone]();
                                 if (value.push(child)) {
                                    child[_parent] = this;
                                    this[_children].push(child);
                                    child[_resolvePrototypesHelper](ids, ancestors);
                                 } else {
                                    break;
                                 }
                              }
                              continue;
                           }
                           if (value !== null) {
                              value[$resolvePrototypes](ids, ancestors);
                              if (protoValue) {
                                 value[_applyPrototype](protoValue, ids, ancestors);
                              }
                              continue;
                           }
                           if (protoValue !== null) {
                              var _child2 = protoValue[$clone]();
                              _child2[_parent] = this;
                              this[name] = _child2;
                              this[_children].push(_child2);
                              _child2[_resolvePrototypesHelper](ids, ancestors);
                           }
                        }
                     } catch (err) {
                        _iterator146.e(err);
                     } finally {
                        _iterator146.f();
                     }
                  },
               },
               {
                  key: $clone,
                  value: function value() {
                     var clone = Object.create(Object.getPrototypeOf(this));
                     var _iterator148 = _createForOfIteratorHelper(
                           Object.getOwnPropertySymbols(this),
                        ),
                        _step148;
                     try {
                        for (_iterator148.s(); !(_step148 = _iterator148.n()).done; ) {
                           var $symbol = _step148.value;
                           try {
                              clone[$symbol] = this[$symbol];
                           } catch (_unused10) {
                              shadow(clone, $symbol, this[$symbol]);
                           }
                        }
                     } catch (err) {
                        _iterator148.e(err);
                     } finally {
                        _iterator148.f();
                     }
                     clone[$uid] = "".concat(clone[$nodeName]).concat(uid++);
                     clone[_children] = [];
                     var _iterator149 = _createForOfIteratorHelper(
                           Object.getOwnPropertyNames(this),
                        ),
                        _step149;
                     try {
                        for (_iterator149.s(); !(_step149 = _iterator149.n()).done; ) {
                           var name = _step149.value;
                           if (this[_attributeNames].has(name)) {
                              clone[name] = XFAObject[_cloneAttribute](this[name]);
                              continue;
                           }
                           var value = this[name];
                           clone[name] =
                              value instanceof XFAObjectArray
                                 ? new XFAObjectArray(value[_max])
                                 : null;
                        }
                     } catch (err) {
                        _iterator149.e(err);
                     } finally {
                        _iterator149.f();
                     }
                     var _iterator150 = _createForOfIteratorHelper(this[_children]),
                        _step150;
                     try {
                        for (_iterator150.s(); !(_step150 = _iterator150.n()).done; ) {
                           var child = _step150.value;
                           var _name2 = child[$nodeName];
                           var clonedChild = child[$clone]();
                           clone[_children].push(clonedChild);
                           clonedChild[_parent] = clone;
                           if (clone[_name2] === null) {
                              clone[_name2] = clonedChild;
                           } else {
                              clone[_name2][_children].push(clonedChild);
                           }
                        }
                     } catch (err) {
                        _iterator150.e(err);
                     } finally {
                        _iterator150.f();
                     }
                     return clone;
                  },
               },
               {
                  key: $getChildren,
                  value: function value() {
                     var name =
                        arguments.length > 0 && arguments[0] !== undefined
                           ? arguments[0]
                           : null;
                     if (!name) {
                        return this[_children];
                     }
                     return this[_children].filter(function (c) {
                        return c[$nodeName] === name;
                     });
                  },
               },
               {
                  key: $getChildrenByClass,
                  value: function value(name) {
                     return this[name];
                  },
               },
               {
                  key: $getChildrenByName,
                  value: function value(name, allTransparent) {
                     var first =
                        arguments.length > 2 && arguments[2] !== undefined
                           ? arguments[2]
                           : true;
                     return Array.from(
                        this[$getChildrenByNameIt](name, allTransparent, first),
                     );
                  },
               },
               {
                  key: $getChildrenByNameIt,
                  value: function value(name, allTransparent) {
                     var _this60 = this;
                     var first =
                        arguments.length > 2 && arguments[2] !== undefined
                           ? arguments[2]
                           : true;
                     return /*#__PURE__*/ _regenerator().m(function _callee32() {
                        var _iterator151, _step151, child, _t35;
                        return _regenerator().w(
                           function (_context37) {
                              while (1)
                                 switch ((_context37.p = _context37.n)) {
                                    case 0:
                                       if (!(name === "parent")) {
                                          _context37.n = 2;
                                          break;
                                       }
                                       _context37.n = 1;
                                       return _this60[_parent];
                                    case 1:
                                       return _context37.a(2);
                                    case 2:
                                       _iterator151 = _createForOfIteratorHelper(
                                          _this60[_children],
                                       );
                                       _context37.p = 3;
                                       _iterator151.s();
                                    case 4:
                                       if ((_step151 = _iterator151.n()).done) {
                                          _context37.n = 8;
                                          break;
                                       }
                                       child = _step151.value;
                                       if (!(child[$nodeName] === name)) {
                                          _context37.n = 5;
                                          break;
                                       }
                                       _context37.n = 5;
                                       return child;
                                    case 5:
                                       if (!(child.name === name)) {
                                          _context37.n = 6;
                                          break;
                                       }
                                       _context37.n = 6;
                                       return child;
                                    case 6:
                                       if (!(allTransparent || child[$isTransparent]())) {
                                          _context37.n = 7;
                                          break;
                                       }
                                       return _context37.d(
                                          _regeneratorValues(
                                             child[$getChildrenByNameIt](
                                                name,
                                                allTransparent,
                                                false,
                                             ),
                                          ),
                                          7,
                                       );
                                    case 7:
                                       _context37.n = 4;
                                       break;
                                    case 8:
                                       _context37.n = 10;
                                       break;
                                    case 9:
                                       _context37.p = 9;
                                       _t35 = _context37.v;
                                       _iterator151.e(_t35);
                                    case 10:
                                       _context37.p = 10;
                                       _iterator151.f();
                                       return _context37.f(10);
                                    case 11:
                                       if (!(first && _this60[_attributeNames].has(name))) {
                                          _context37.n = 12;
                                          break;
                                       }
                                       _context37.n = 12;
                                       return new XFAAttribute(_this60, name, _this60[name]);
                                    case 12:
                                       return _context37.a(2);
                                 }
                           },
                           _callee32,
                           null,
                           [[3, 9, 10, 11]],
                        );
                     })();
                  },
               },
            ],
            [
               {
                  key: _cloneAttribute,
                  value: function value(obj) {
                     if (Array.isArray(obj)) {
                        return obj.map(function (x) {
                           return XFAObject[_cloneAttribute](x);
                        });
                     }
                     if (_typeof(obj) === "object" && obj !== null) {
                        return Object.assign({}, obj);
                     }
                     return obj;
                  },
               },
            ],
         );
      })();
      var XFAObjectArray = /*#__PURE__*/ (function () {
         function XFAObjectArray() {
            var max =
               arguments.length > 0 && arguments[0] !== undefined
                  ? arguments[0]
                  : Infinity;
            _classCallCheck(this, XFAObjectArray);
            this[_max] = max;
            this[_children] = [];
         }
         return _createClass(XFAObjectArray, [
            {
               key: "isXFAObject",
               get: function get() {
                  return false;
               },
            },
            {
               key: "isXFAObjectArray",
               get: function get() {
                  return true;
               },
            },
            {
               key: "push",
               value: function push(child) {
                  var len = this[_children].length;
                  if (len <= this[_max]) {
                     this[_children].push(child);
                     return true;
                  }
                  warn(
                     'XFA - node "'
                        .concat(child[$nodeName], '" accepts no more than ')
                        .concat(this[_max], " children"),
                  );
                  return false;
               },
            },
            {
               key: "isEmpty",
               value: function isEmpty() {
                  return this[_children].length === 0;
               },
            },
            {
               key: "dump",
               value: function dump() {
                  return this[_children].length === 1
                     ? this[_children][0][$dump]()
                     : this[_children].map(function (x) {
                        return x[$dump]();
                     });
               },
            },
            {
               key: $clone,
               value: function value() {
                  var clone = new XFAObjectArray(this[_max]);
                  clone[_children] = this[_children].map(function (c) {
                     return c[$clone]();
                  });
                  return clone;
               },
            },
            {
               key: "children",
               get: function get() {
                  return this[_children];
               },
            },
            {
               key: "clear",
               value: function clear() {
                  this[_children].length = 0;
               },
            },
         ]);
      })();
      var XFAAttribute = /*#__PURE__*/ (function () {
         function XFAAttribute(node, name, value) {
            _classCallCheck(this, XFAAttribute);
            this[_parent] = node;
            this[$nodeName] = name;
            this[$content] = value;
            this[$consumed] = false;
            this[$uid] = "attribute".concat(uid++);
         }
         return _createClass(XFAAttribute, [
            {
               key: $getParent,
               value: function value() {
                  return this[_parent];
               },
            },
            {
               key: $isDataValue,
               value: function value() {
                  return true;
               },
            },
            {
               key: $getDataValue,
               value: function value() {
                  return this[$content].trim();
               },
            },
            {
               key: $setValue,
               value: function value(_value2) {
                  _value2 = _value2.value || "";
                  this[$content] = _value2.toString();
               },
            },
            {
               key: $text,
               value: function value() {
                  return this[$content];
               },
            },
            {
               key: $isDescendent,
               value: function value(parent) {
                  return (
                     this[_parent] === parent || this[_parent][$isDescendent](parent)
                  );
               },
            },
         ]);
      })();
      var XmlObject = /*#__PURE__*/ (function (_XFAObject) {
         function XmlObject(nsId, name) {
            var _this61;
            var attributes =
               arguments.length > 2 && arguments[2] !== undefined
                  ? arguments[2]
                  : {};
            _classCallCheck(this, XmlObject);
            _this61 = _callSuper(this, XmlObject, [nsId, name]);
            _this61[$content] = "";
            _this61[_dataValue] = null;
            if (name !== "#text") {
               var _map3 = new Map();
               _this61[_attributes] = _map3;
               for (
                  var _i54 = 0, _Object$entries3 = Object.entries(attributes);
                  _i54 < _Object$entries3.length;
                  _i54++
               ) {
                  var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i54], 2),
                     attrName = _Object$entries3$_i[0],
                     value = _Object$entries3$_i[1];
                  _map3.set(attrName, new XFAAttribute(_this61, attrName, value));
               }
               if (attributes.hasOwnProperty($nsAttributes)) {
                  var dataNode = attributes[$nsAttributes].xfa.dataNode;
                  if (dataNode !== undefined) {
                     if (dataNode === "dataGroup") {
                        _this61[_dataValue] = false;
                     } else if (dataNode === "dataValue") {
                        _this61[_dataValue] = true;
                     }
                  }
               }
            }
            _this61[$consumed] = false;
            return _this61;
         }
         _inherits(XmlObject, _XFAObject);
         return _createClass(XmlObject, [
            {
               key: $toString,
               value: function value(buf) {
                  var tagName = this[$nodeName];
                  if (tagName === "#text") {
                     buf.push(encodeToXmlString(this[$content]));
                     return;
                  }
                  var utf8TagName = utf8StringToString(tagName);
                  var prefix = this[$namespaceId] === NS_DATASETS ? "xfa:" : "";
                  buf.push("<".concat(prefix).concat(utf8TagName));
                  var _iterator152 = _createForOfIteratorHelper(
                        this[_attributes].entries(),
                     ),
                     _step152;
                  try {
                     for (_iterator152.s(); !(_step152 = _iterator152.n()).done; ) {
                        var _step152$value = _slicedToArray(_step152.value, 2),
                           name = _step152$value[0],
                           value = _step152$value[1];
                        var utf8Name = utf8StringToString(name);
                        buf.push(
                           " "
                              .concat(utf8Name, '="')
                              .concat(encodeToXmlString(value[$content]), '"'),
                        );
                     }
                  } catch (err) {
                     _iterator152.e(err);
                  } finally {
                     _iterator152.f();
                  }
                  if (this[_dataValue] !== null) {
                     if (this[_dataValue]) {
                        buf.push(' xfa:dataNode="dataValue"');
                     } else {
                        buf.push(' xfa:dataNode="dataGroup"');
                     }
                  }
                  if (!this[$content] && this[_children].length === 0) {
                     buf.push("/>");
                     return;
                  }
                  buf.push(">");
                  if (this[$content]) {
                     if (typeof this[$content] === "string") {
                        buf.push(encodeToXmlString(this[$content]));
                     } else {
                        this[$content][$toString](buf);
                     }
                  } else {
                     var _iterator153 = _createForOfIteratorHelper(this[_children]),
                        _step153;
                     try {
                        for (_iterator153.s(); !(_step153 = _iterator153.n()).done; ) {
                           var child = _step153.value;
                           child[$toString](buf);
                        }
                     } catch (err) {
                        _iterator153.e(err);
                     } finally {
                        _iterator153.f();
                     }
                  }
                  buf.push("</".concat(prefix).concat(utf8TagName, ">"));
               },
            },
            {
               key: $onChild,
               value: function value(child) {
                  if (this[$content]) {
                     var node = new XmlObject(this[$namespaceId], "#text");
                     this[$appendChild](node);
                     node[$content] = this[$content];
                     this[$content] = "";
                  }
                  this[$appendChild](child);
                  return true;
               },
            },
            {
               key: $onText,
               value: function value(str) {
                  this[$content] += str;
               },
            },
            {
               key: $finalize,
               value: function value() {
                  if (this[$content] && this[_children].length > 0) {
                     var node = new XmlObject(this[$namespaceId], "#text");
                     this[$appendChild](node);
                     node[$content] = this[$content];
                     delete this[$content];
                  }
               },
            },
            {
               key: $toHTML,
               value: function value() {
                  if (this[$nodeName] === "#text") {
                     return HTMLResult.success({
                        name: "#text",
                        value: this[$content],
                     });
                  }
                  return HTMLResult.EMPTY;
               },
            },
            {
               key: $getChildren,
               value: function value() {
                  var name =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : null;
                  if (!name) {
                     return this[_children];
                  }
                  return this[_children].filter(function (c) {
                     return c[$nodeName] === name;
                  });
               },
            },
            {
               key: $getAttributes,
               value: function value() {
                  return this[_attributes];
               },
            },
            {
               key: $getChildrenByClass,
               value: function value(name) {
                  var value = this[_attributes].get(name);
                  if (value !== undefined) {
                     return value;
                  }
                  return this[$getChildren](name);
               },
            },
            {
               key: $getChildrenByNameIt,
               value: /*#__PURE__*/ _regenerator().m(
                  function value(name, allTransparent) {
                     var value, _iterator154, _step154, child, _t36;
                     return _regenerator().w(
                        function (_context38) {
                           while (1)
                              switch ((_context38.p = _context38.n)) {
                                 case 0:
                                    value = this[_attributes].get(name);
                                    if (!value) {
                                       _context38.n = 1;
                                       break;
                                    }
                                    _context38.n = 1;
                                    return value;
                                 case 1:
                                    _iterator154 = _createForOfIteratorHelper(
                                       this[_children],
                                    );
                                    _context38.p = 2;
                                    _iterator154.s();
                                 case 3:
                                    if ((_step154 = _iterator154.n()).done) {
                                       _context38.n = 6;
                                       break;
                                    }
                                    child = _step154.value;
                                    if (!(child[$nodeName] === name)) {
                                       _context38.n = 4;
                                       break;
                                    }
                                    _context38.n = 4;
                                    return child;
                                 case 4:
                                    if (!allTransparent) {
                                       _context38.n = 5;
                                       break;
                                    }
                                    return _context38.d(
                                       _regeneratorValues(
                                          child[$getChildrenByNameIt](name, allTransparent),
                                       ),
                                       5,
                                    );
                                 case 5:
                                    _context38.n = 3;
                                    break;
                                 case 6:
                                    _context38.n = 8;
                                    break;
                                 case 7:
                                    _context38.p = 7;
                                    _t36 = _context38.v;
                                    _iterator154.e(_t36);
                                 case 8:
                                    _context38.p = 8;
                                    _iterator154.f();
                                    return _context38.f(8);
                                 case 9:
                                    return _context38.a(2);
                              }
                        },
                        value,
                        this,
                        [[2, 7, 8, 9]],
                     );
                  },
               ),
            },
            {
               key: $getAttributeIt,
               value: /*#__PURE__*/ _regenerator().m(
                  function value(name, skipConsumed) {
                     var value, _iterator155, _step155, child, _t37;
                     return _regenerator().w(
                        function (_context39) {
                           while (1)
                              switch ((_context39.p = _context39.n)) {
                                 case 0:
                                    value = this[_attributes].get(name);
                                    if (!(value && (!skipConsumed || !value[$consumed]))) {
                                       _context39.n = 1;
                                       break;
                                    }
                                    _context39.n = 1;
                                    return value;
                                 case 1:
                                    _iterator155 = _createForOfIteratorHelper(
                                       this[_children],
                                    );
                                    _context39.p = 2;
                                    _iterator155.s();
                                 case 3:
                                    if ((_step155 = _iterator155.n()).done) {
                                       _context39.n = 5;
                                       break;
                                    }
                                    child = _step155.value;
                                    return _context39.d(
                                       _regeneratorValues(
                                          child[$getAttributeIt](name, skipConsumed),
                                       ),
                                       4,
                                    );
                                 case 4:
                                    _context39.n = 3;
                                    break;
                                 case 5:
                                    _context39.n = 7;
                                    break;
                                 case 6:
                                    _context39.p = 6;
                                    _t37 = _context39.v;
                                    _iterator155.e(_t37);
                                 case 7:
                                    _context39.p = 7;
                                    _iterator155.f();
                                    return _context39.f(7);
                                 case 8:
                                    return _context39.a(2);
                              }
                        },
                        value,
                        this,
                        [[2, 6, 7, 8]],
                     );
                  },
               ),
            },
            {
               key: $getRealChildrenByNameIt,
               value: /*#__PURE__*/ _regenerator().m(
                  function value(name, allTransparent, skipConsumed) {
                     var _iterator156, _step156, child, _t38;
                     return _regenerator().w(
                        function (_context40) {
                           while (1)
                              switch ((_context40.p = _context40.n)) {
                                 case 0:
                                    _iterator156 = _createForOfIteratorHelper(
                                       this[_children],
                                    );
                                    _context40.p = 1;
                                    _iterator156.s();
                                 case 2:
                                    if ((_step156 = _iterator156.n()).done) {
                                       _context40.n = 5;
                                       break;
                                    }
                                    child = _step156.value;
                                    if (
                                       !(
                                          child[$nodeName] === name &&
                                          (!skipConsumed || !child[$consumed])
                                       )
                                    ) {
                                       _context40.n = 3;
                                       break;
                                    }
                                    _context40.n = 3;
                                    return child;
                                 case 3:
                                    if (!allTransparent) {
                                       _context40.n = 4;
                                       break;
                                    }
                                    return _context40.d(
                                       _regeneratorValues(
                                          child[$getRealChildrenByNameIt](
                                             name,
                                             allTransparent,
                                             skipConsumed,
                                          ),
                                       ),
                                       4,
                                    );
                                 case 4:
                                    _context40.n = 2;
                                    break;
                                 case 5:
                                    _context40.n = 7;
                                    break;
                                 case 6:
                                    _context40.p = 6;
                                    _t38 = _context40.v;
                                    _iterator156.e(_t38);
                                 case 7:
                                    _context40.p = 7;
                                    _iterator156.f();
                                    return _context40.f(7);
                                 case 8:
                                    return _context40.a(2);
                              }
                        },
                        value,
                        this,
                        [[1, 6, 7, 8]],
                     );
                  },
               ),
            },
            {
               key: $isDataValue,
               value: function value() {
                  if (this[_dataValue] === null) {
                     return (
                        this[_children].length === 0 ||
                        this[_children][0][$namespaceId] === NamespaceIds.xhtml.id
                     );
                  }
                  return this[_dataValue];
               },
            },
            {
               key: $getDataValue,
               value: function value() {
                  if (this[_dataValue] === null) {
                     if (this[_children].length === 0) {
                        return this[$content].trim();
                     }
                     if (this[_children][0][$namespaceId] === NamespaceIds.xhtml.id) {
                        return this[_children][0][$text]().trim();
                     }
                     return null;
                  }
                  return this[$content].trim();
               },
            },
            {
               key: $setValue,
               value: function value(_value3) {
                  _value3 = _value3.value || "";
                  this[$content] = _value3.toString();
               },
            },
            {
               key: $dump,
               value: function value() {
                  var hasNS =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : false;
                  var dumped = Object.create(null);
                  if (hasNS) {
                     dumped.$ns = this[$namespaceId];
                  }
                  if (this[$content]) {
                     dumped.$content = this[$content];
                  }
                  dumped.$name = this[$nodeName];
                  dumped.children = [];
                  var _iterator157 = _createForOfIteratorHelper(this[_children]),
                     _step157;
                  try {
                     for (_iterator157.s(); !(_step157 = _iterator157.n()).done; ) {
                        var child = _step157.value;
                        dumped.children.push(child[$dump](hasNS));
                     }
                  } catch (err) {
                     _iterator157.e(err);
                  } finally {
                     _iterator157.f();
                  }
                  dumped.attributes = Object.create(null);
                  var _iterator158 = _createForOfIteratorHelper(this[_attributes]),
                     _step158;
                  try {
                     for (_iterator158.s(); !(_step158 = _iterator158.n()).done; ) {
                        var _step158$value = _slicedToArray(_step158.value, 2),
                           name = _step158$value[0],
                           _value4 = _step158$value[1];
                        dumped.attributes[name] = _value4[$content];
                     }
                  } catch (err) {
                     _iterator158.e(err);
                  } finally {
                     _iterator158.f();
                  }
                  return dumped;
               },
            },
         ]);
      })(XFAObject);
      var ContentObject = /*#__PURE__*/ (function (_XFAObject2) {
         function ContentObject(nsId, name) {
            var _this62;
            _classCallCheck(this, ContentObject);
            _this62 = _callSuper(this, ContentObject, [nsId, name]);
            _this62[$content] = "";
            return _this62;
         }
         _inherits(ContentObject, _XFAObject2);
         return _createClass(ContentObject, [
            {
               key: $onText,
               value: function value(text) {
                  this[$content] += text;
               },
            },
            { key: $finalize, value: function value() {} },
         ]);
      })(XFAObject);
      var OptionObject = /*#__PURE__*/ (function (_ContentObject) {
         function OptionObject(nsId, name, options) {
            var _this63;
            _classCallCheck(this, OptionObject);
            _this63 = _callSuper(this, OptionObject, [nsId, name]);
            _this63[_options] = options;
            return _this63;
         }
         _inherits(OptionObject, _ContentObject);
         return _createClass(OptionObject, [
            {
               key: $finalize,
               value: function value() {
                  var _this64 = this;
                  this[$content] = getKeyword({
                     data: this[$content],
                     defaultValue: this[_options][0],
                     validate: function validate(k) {
                        return _this64[_options].includes(k);
                     },
                  });
               },
            },
            {
               key: $clean,
               value: function value(builder) {
                  _superPropGet(OptionObject, $clean, this, 3)([builder]);
                  delete this[_options];
               },
            },
         ]);
      })(ContentObject);
      var StringObject = /*#__PURE__*/ (function (_ContentObject2) {
         function StringObject() {
            _classCallCheck(this, StringObject);
            return _callSuper(this, StringObject, arguments);
         }
         _inherits(StringObject, _ContentObject2);
         return _createClass(StringObject, [
            {
               key: $finalize,
               value: function value() {
                  this[$content] = this[$content].trim();
               },
            },
         ]);
      })(ContentObject);
      var IntegerObject = /*#__PURE__*/ (function (_ContentObject3) {
         function IntegerObject(nsId, name, defaultValue, validator) {
            var _this65;
            _classCallCheck(this, IntegerObject);
            _this65 = _callSuper(this, IntegerObject, [nsId, name]);
            _this65[_defaultValue] = defaultValue;
            _this65[_validator] = validator;
            return _this65;
         }
         _inherits(IntegerObject, _ContentObject3);
         return _createClass(IntegerObject, [
            {
               key: $finalize,
               value: function value() {
                  this[$content] = getInteger({
                     data: this[$content],
                     defaultValue: this[_defaultValue],
                     validate: this[_validator],
                  });
               },
            },
            {
               key: $clean,
               value: function value(builder) {
                  _superPropGet(IntegerObject, $clean, this, 3)([builder]);
                  delete this[_defaultValue];
                  delete this[_validator];
               },
            },
         ]);
      })(ContentObject);
      var Option01 = /*#__PURE__*/ (function (_IntegerObject) {
         function Option01(nsId, name) {
            _classCallCheck(this, Option01);
            return _callSuper(this, Option01, [
               nsId,
               name,
               0,
               function (n) {
                  return n === 1;
               },
            ]);
         }
         _inherits(Option01, _IntegerObject);
         return _createClass(Option01);
      })(IntegerObject);
      var Option10 = /*#__PURE__*/ (function (_IntegerObject2) {
         function Option10(nsId, name) {
            _classCallCheck(this, Option10);
            return _callSuper(this, Option10, [
               nsId,
               name,
               1,
               function (n) {
                  return n === 0;
               },
            ]);
         }
         _inherits(Option10, _IntegerObject2);
         return _createClass(Option10);
      })(IntegerObject); // CONCATENATED MODULE: ./src/core/xfa/html_utils.js
      function measureToString(m) {
         if (typeof m === "string") {
            return "0px";
         }
         return Number.isInteger(m)
            ? "".concat(m, "px")
            : "".concat(m.toFixed(2), "px");
      }
      var converters = {
         anchorType: function anchorType(node, style) {
            var parent = node[$getSubformParent]();
            if (!parent || (parent.layout && parent.layout !== "position")) {
               return;
            }
            if (!("transform" in style)) {
               style.transform = "";
            }
            switch (node.anchorType) {
               case "bottomCenter":
                  style.transform += "translate(-50%, -100%)";
                  break;
               case "bottomLeft":
                  style.transform += "translate(0,-100%)";
                  break;
               case "bottomRight":
                  style.transform += "translate(-100%,-100%)";
                  break;
               case "middleCenter":
                  style.transform += "translate(-50%,-50%)";
                  break;
               case "middleLeft":
                  style.transform += "translate(0,-50%)";
                  break;
               case "middleRight":
                  style.transform += "translate(-100%,-50%)";
                  break;
               case "topCenter":
                  style.transform += "translate(-50%,0)";
                  break;
               case "topRight":
                  style.transform += "translate(-100%,0)";
                  break;
            }
         },
         dimensions: function dimensions(node, style) {
            var _parent$layout;
            var parent = node[$getSubformParent]();
            var width = node.w;
            var height = node.h;
            if (
               (_parent$layout = parent.layout) !== null &&
               _parent$layout !== void 0 &&
               _parent$layout.includes("row")
            ) {
               var extra = parent[$extra];
               var colSpan = node.colSpan;
               var w;
               if (colSpan === -1) {
                  w = extra.columnWidths.slice(extra.currentColumn).reduce(function (
                     a,
                     x,
                  ) {
                     return a + x;
                  }, 0);
                  extra.currentColumn = 0;
               } else {
                  w = extra.columnWidths
                     .slice(extra.currentColumn, extra.currentColumn + colSpan)
                     .reduce(function (a, x) {
                        return a + x;
                     }, 0);
                  extra.currentColumn =
                     (extra.currentColumn + node.colSpan) % extra.columnWidths.length;
               }
               if (!isNaN(w)) {
                  width = node.w = w;
               }
            }
            style.width = width !== "" ? measureToString(width) : "auto";
            style.height = height !== "" ? measureToString(height) : "auto";
         },
         position: function position(node, style) {
            var parent = node[$getSubformParent]();
            if (
               parent !== null &&
               parent !== void 0 &&
               parent.layout &&
               parent.layout !== "position"
            ) {
               return;
            }
            style.position = "absolute";
            style.left = measureToString(node.x);
            style.top = measureToString(node.y);
         },
         rotate: function rotate(node, style) {
            if (node.rotate) {
               if (!("transform" in style)) {
                  style.transform = "";
               }
               style.transform += "rotate(-".concat(node.rotate, "deg)");
               style.transformOrigin = "top left";
            }
         },
         presence: function presence(node, style) {
            switch (node.presence) {
               case "invisible":
                  style.visibility = "hidden";
                  break;
               case "hidden":
               case "inactive":
                  style.display = "none";
                  break;
            }
         },
         hAlign: function hAlign(node, style) {
            if (node[$nodeName] === "para") {
               switch (node.hAlign) {
                  case "justifyAll":
                     style.textAlign = "justify-all";
                     break;
                  case "radix":
                     style.textAlign = "left";
                     break;
                  default:
                     style.textAlign = node.hAlign;
               }
            } else {
               switch (node.hAlign) {
                  case "left":
                     style.alignSelf = "start";
                     break;
                  case "center":
                     style.alignSelf = "center";
                     break;
                  case "right":
                     style.alignSelf = "end";
                     break;
               }
            }
         },
         margin: function margin(node, style) {
            if (node.margin) {
               style.margin = node.margin[$toStyle]().margin;
            }
         },
      };
      function setMinMaxDimensions(node, style) {
         var parent = node[$getSubformParent]();
         if (parent.layout === "position") {
            if (node.minW > 0) {
               style.minWidth = measureToString(node.minW);
            }
            if (node.maxW > 0) {
               style.maxWidth = measureToString(node.maxW);
            }
            if (node.minH > 0) {
               style.minHeight = measureToString(node.minH);
            }
            if (node.maxH > 0) {
               style.maxHeight = measureToString(node.maxH);
            }
         }
      }
      function layoutText(text, xfaFont, margin, lineHeight, fontFinder, width) {
         var measure = new TextMeasure(xfaFont, margin, lineHeight, fontFinder);
         if (typeof text === "string") {
            measure.addString(text);
         } else {
            text[$pushGlyphs](measure);
         }
         return measure.compute(width);
      }
      function layoutNode(node, availableSpace) {
         var height = null;
         var width = null;
         var isBroken = false;
         if ((!node.w || !node.h) && node.value) {
            var marginH = 0;
            var marginV = 0;
            if (node.margin) {
               marginH = node.margin.leftInset + node.margin.rightInset;
               marginV = node.margin.topInset + node.margin.bottomInset;
            }
            var lineHeight = null;
            var margin = null;
            if (node.para) {
               margin = Object.create(null);
               lineHeight =
                  node.para.lineHeight === "" ? null : node.para.lineHeight;
               margin.top = node.para.spaceAbove === "" ? 0 : node.para.spaceAbove;
               margin.bottom =
                  node.para.spaceBelow === "" ? 0 : node.para.spaceBelow;
               margin.left = node.para.marginLeft === "" ? 0 : node.para.marginLeft;
               margin.right =
                  node.para.marginRight === "" ? 0 : node.para.marginRight;
            }
            var font = node.font;
            if (!font) {
               var root = node[$getTemplateRoot]();
               var parent = node[$getParent]();
               while (parent && parent !== root) {
                  if (parent.font) {
                     font = parent.font;
                     break;
                  }
                  parent = parent[$getParent]();
               }
            }
            var maxWidth = (node.w || availableSpace.width) - marginH;
            var fontFinder = node[$globalData].fontFinder;
            if (
               node.value.exData &&
               node.value.exData[$content] &&
               node.value.exData.contentType === "text/html"
            ) {
               var res = layoutText(
                  node.value.exData[$content],
                  font,
                  margin,
                  lineHeight,
                  fontFinder,
                  maxWidth,
               );
               width = res.width;
               height = res.height;
               isBroken = res.isBroken;
            } else {
               var text = node.value[$text]();
               if (text) {
                  var _res2 = layoutText(
                     text,
                     font,
                     margin,
                     lineHeight,
                     fontFinder,
                     maxWidth,
                  );
                  width = _res2.width;
                  height = _res2.height;
                  isBroken = _res2.isBroken;
               }
            }
            if (width !== null && !node.w) {
               width += marginH;
            }
            if (height !== null && !node.h) {
               height += marginV;
            }
         }
         return { w: width, h: height, isBroken: isBroken };
      }
      function computeBbox(node, html, availableSpace) {
         var bbox;
         if (node.w !== "" && node.h !== "") {
            bbox = [node.x, node.y, node.w, node.h];
         } else {
            if (!availableSpace) {
               return null;
            }
            var width = node.w;
            if (width === "") {
               if (node.maxW === 0) {
                  var parent = node[$getSubformParent]();
                  width =
                     parent.layout === "position" && parent.w !== "" ? 0 : node.minW;
               } else {
                  width = Math.min(node.maxW, availableSpace.width);
               }
               html.attributes.style.width = measureToString(width);
            }
            var height = node.h;
            if (height === "") {
               if (node.maxH === 0) {
                  var _parent3 = node[$getSubformParent]();
                  height =
                     _parent3.layout === "position" && _parent3.h !== ""
                        ? 0
                        : node.minH;
               } else {
                  height = Math.min(node.maxH, availableSpace.height);
               }
               html.attributes.style.height = measureToString(height);
            }
            bbox = [node.x, node.y, width, height];
         }
         return bbox;
      }
      function fixDimensions(node) {
         var _parent$layout2;
         var parent = node[$getSubformParent]();
         if (
            (_parent$layout2 = parent.layout) !== null &&
            _parent$layout2 !== void 0 &&
            _parent$layout2.includes("row")
         ) {
            var extra = parent[$extra];
            var colSpan = node.colSpan;
            var width;
            if (colSpan === -1) {
               width = extra.columnWidths
                  .slice(extra.currentColumn)
                  .reduce(function (a, w) {
                     return a + w;
                  }, 0);
            } else {
               width = extra.columnWidths
                  .slice(extra.currentColumn, extra.currentColumn + colSpan)
                  .reduce(function (a, w) {
                     return a + w;
                  }, 0);
            }
            if (!isNaN(width)) {
               node.w = width;
            }
         }
         if (parent.layout && parent.layout !== "position") {
            node.x = node.y = 0;
         }
         if (node.layout === "table") {
            if (node.w === "" && Array.isArray(node.columnWidths)) {
               node.w = node.columnWidths.reduce(function (a, x) {
                  return a + x;
               }, 0);
            }
         }
      }
      function layoutClass(node) {
         switch (node.layout) {
            case "position":
               return "xfaPosition";
            case "lr-tb":
               return "xfaLrTb";
            case "rl-row":
               return "xfaRlRow";
            case "rl-tb":
               return "xfaRlTb";
            case "row":
               return "xfaRow";
            case "table":
               return "xfaTable";
            case "tb":
               return "xfaTb";
            default:
               return "xfaPosition";
         }
      }
      function toStyle(node) {
         var style = Object.create(null);
         for (
            var _len = arguments.length,
               names = new Array(_len > 1 ? _len - 1 : 0),
               _key4 = 1;
            _key4 < _len;
            _key4++
         ) {
            names[_key4 - 1] = arguments[_key4];
         }
         for (var _i55 = 0, _names = names; _i55 < _names.length; _i55++) {
            var name = _names[_i55];
            var value = node[name];
            if (value === null) {
               continue;
            }
            if (converters.hasOwnProperty(name)) {
               converters[name](node, style);
               continue;
            }
            if (value instanceof XFAObject) {
               var newStyle = value[$toStyle]();
               if (newStyle) {
                  Object.assign(style, newStyle);
               } else {
                  warn(
                     "(DEBUG) - XFA - style for ".concat(name, " not implemented yet"),
                  );
               }
            }
         }
         return style;
      }
      function createWrapper(node, html) {
         var attributes = html.attributes;
         var style = attributes.style;
         var wrapper = {
            name: "div",
            attributes: { class: ["xfaWrapper"], style: Object.create(null) },
            children: [],
         };
         attributes["class"].push("xfaWrapped");
         if (node.border) {
            var _node$border$$extra = node.border[$extra],
               widths = _node$border$$extra.widths,
               insets = _node$border$$extra.insets;
            var width, height;
            var top = insets[0];
            var left = insets[3];
            var insetsH = insets[0] + insets[2];
            var insetsW = insets[1] + insets[3];
            switch (node.border.hand) {
               case "even":
                  top -= widths[0] / 2;
                  left -= widths[3] / 2;
                  width = "calc(100% + ".concat(
                     (widths[1] + widths[3]) / 2 - insetsW,
                     "px)",
                  );
                  height = "calc(100% + ".concat(
                     (widths[0] + widths[2]) / 2 - insetsH,
                     "px)",
                  );
                  break;
               case "left":
                  top -= widths[0];
                  left -= widths[3];
                  width = "calc(100% + ".concat(
                     widths[1] + widths[3] - insetsW,
                     "px)",
                  );
                  height = "calc(100% + ".concat(
                     widths[0] + widths[2] - insetsH,
                     "px)",
                  );
                  break;
               case "right":
                  width = insetsW ? "calc(100% - ".concat(insetsW, "px)") : "100%";
                  height = insetsH ? "calc(100% - ".concat(insetsH, "px)") : "100%";
                  break;
            }
            var classNames = ["xfaBorder"];
            if (isPrintOnly(node.border)) {
               classNames.push("xfaPrintOnly");
            }
            var border = {
               name: "div",
               attributes: {
                  class: classNames,
                  style: {
                     top: "".concat(top, "px"),
                     left: "".concat(left, "px"),
                     width: width,
                     height: height,
                  },
               },
               children: [],
            };
            for (
               var _i56 = 0,
                  _arr3 = [
                     "border",
                     "borderWidth",
                     "borderColor",
                     "borderRadius",
                     "borderStyle",
                  ];
               _i56 < _arr3.length;
               _i56++
            ) {
               var key = _arr3[_i56];
               if (style[key] !== undefined) {
                  border.attributes.style[key] = style[key];
                  delete style[key];
               }
            }
            wrapper.children.push(border, html);
         } else {
            wrapper.children.push(html);
         }
         for (
            var _i57 = 0,
               _arr4 = [
                  "background",
                  "backgroundClip",
                  "top",
                  "left",
                  "width",
                  "height",
                  "minWidth",
                  "minHeight",
                  "maxWidth",
                  "maxHeight",
                  "transform",
                  "transformOrigin",
                  "visibility",
               ];
            _i57 < _arr4.length;
            _i57++
         ) {
            var _key5 = _arr4[_i57];
            if (style[_key5] !== undefined) {
               wrapper.attributes.style[_key5] = style[_key5];
               delete style[_key5];
            }
         }
         wrapper.attributes.style.position =
            style.position === "absolute" ? "absolute" : "relative";
         delete style.position;
         if (style.alignSelf) {
            wrapper.attributes.style.alignSelf = style.alignSelf;
            delete style.alignSelf;
         }
         return wrapper;
      }
      function fixTextIndent(styles) {
         var indent = getMeasurement(styles.textIndent, "0px");
         if (indent >= 0) {
            return;
         }
         var align = styles.textAlign === "right" ? "right" : "left";
         var name = "padding" + (align === "left" ? "Left" : "Right");
         var padding = getMeasurement(styles[name], "0px");
         styles[name] = "".concat(padding - indent, "px");
      }
      function setAccess(node, classNames) {
         switch (node.access) {
            case "nonInteractive":
               classNames.push("xfaNonInteractive");
               break;
            case "readOnly":
               classNames.push("xfaReadOnly");
               break;
            case "protected":
               classNames.push("xfaDisabled");
               break;
         }
      }
      function isPrintOnly(node) {
         return (
            node.relevant.length > 0 &&
            !node.relevant[0].excluded &&
            node.relevant[0].viewname === "print"
         );
      }
      function getCurrentPara(node) {
         var stack = node[$getTemplateRoot]()[$extra].paraStack;
         return stack.length ? stack.at(-1) : null;
      }
      function setPara(node, nodeStyle, value) {
         var _value$attributes$cla;
         if (
            (_value$attributes$cla = value.attributes["class"]) !== null &&
            _value$attributes$cla !== void 0 &&
            _value$attributes$cla.includes("xfaRich")
         ) {
            if (nodeStyle) {
               if (node.h === "") {
                  nodeStyle.height = "auto";
               }
               if (node.w === "") {
                  nodeStyle.width = "auto";
               }
            }
            var para = getCurrentPara(node);
            if (para) {
               var valueStyle = value.attributes.style;
               valueStyle.display = "flex";
               valueStyle.flexDirection = "column";
               switch (para.vAlign) {
                  case "top":
                     valueStyle.justifyContent = "start";
                     break;
                  case "bottom":
                     valueStyle.justifyContent = "end";
                     break;
                  case "middle":
                     valueStyle.justifyContent = "center";
                     break;
               }
               var paraStyle = para[$toStyle]();
               for (
                  var _i58 = 0, _Object$entries4 = Object.entries(paraStyle);
                  _i58 < _Object$entries4.length;
                  _i58++
               ) {
                  var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i58], 2),
                     key = _Object$entries4$_i[0],
                     val = _Object$entries4$_i[1];
                  if (!(key in valueStyle)) {
                     valueStyle[key] = val;
                  }
               }
            }
         }
      }
      function setFontFamily(xfaFont, node, fontFinder, style) {
         if (!fontFinder) {
            delete style.fontFamily;
            return;
         }
         var name = stripQuotes(xfaFont.typeface);
         style.fontFamily = '"'.concat(name, '"');
         var typeface = fontFinder.find(name);
         if (typeface) {
            var fontFamily = typeface.regular.cssFontInfo.fontFamily;
            if (fontFamily !== name) {
               style.fontFamily = '"'.concat(fontFamily, '"');
            }
            var para = getCurrentPara(node);
            if (para && para.lineHeight !== "") {
               return;
            }
            if (style.lineHeight) {
               return;
            }
            var pdfFont = selectFont(xfaFont, typeface);
            if (pdfFont) {
               style.lineHeight = Math.max(1.2, pdfFont.lineHeight);
            }
         }
      }
      function fixURL(str) {
         var absoluteUrl = createValidAbsoluteUrl(str, null, {
            addDefaultProtocol: true,
            tryConvertEncoding: true,
         });
         return absoluteUrl ? absoluteUrl.href : null;
      } // CONCATENATED MODULE: ./src/core/xfa/layout.js
      function createLine(node, children) {
         return {
            name: "div",
            attributes: { class: [node.layout === "lr-tb" ? "xfaLr" : "xfaRl"] },
            children: children,
         };
      }
      function flushHTML(node) {
         if (!node[$extra]) {
            return null;
         }
         var attributes = node[$extra].attributes;
         var html = {
            name: "div",
            attributes: attributes,
            children: node[$extra].children,
         };
         if (node[$extra].failingNode) {
            var htmlFromFailing = node[$extra].failingNode[$flushHTML]();
            if (htmlFromFailing) {
               if (node.layout.endsWith("-tb")) {
                  html.children.push(createLine(node, [htmlFromFailing]));
               } else {
                  html.children.push(htmlFromFailing);
               }
            }
         }
         if (html.children.length === 0) {
            return null;
         }
         return html;
      }
      function addHTML(node, html, bbox) {
         var extra = node[$extra];
         var availableSpace = extra.availableSpace;
         var _bbox3 = _slicedToArray(bbox, 4),
            x = _bbox3[0],
            y = _bbox3[1],
            w = _bbox3[2],
            h = _bbox3[3];
         switch (node.layout) {
            case "position": {
               extra.width = Math.max(extra.width, x + w);
               extra.height = Math.max(extra.height, y + h);
               extra.children.push(html);
               break;
            }
            case "lr-tb":
            case "rl-tb":
               if (!extra.line || extra.attempt === 1) {
                  extra.line = createLine(node, []);
                  extra.children.push(extra.line);
                  extra.numberInLine = 0;
               }
               extra.numberInLine += 1;
               extra.line.children.push(html);
               if (extra.attempt === 0) {
                  extra.currentWidth += w;
                  extra.height = Math.max(extra.height, extra.prevHeight + h);
               } else {
                  extra.currentWidth = w;
                  extra.prevHeight = extra.height;
                  extra.height += h;
                  extra.attempt = 0;
               }
               extra.width = Math.max(extra.width, extra.currentWidth);
               break;
            case "rl-row":
            case "row": {
               extra.children.push(html);
               extra.width += w;
               extra.height = Math.max(extra.height, h);
               var height = measureToString(extra.height);
               var _iterator159 = _createForOfIteratorHelper(extra.children),
                  _step159;
               try {
                  for (_iterator159.s(); !(_step159 = _iterator159.n()).done; ) {
                     var child = _step159.value;
                     child.attributes.style.height = height;
                  }
               } catch (err) {
                  _iterator159.e(err);
               } finally {
                  _iterator159.f();
               }
               break;
            }
            case "table": {
               extra.width = Math.min(
                  availableSpace.width,
                  Math.max(extra.width, w),
               );
               extra.height += h;
               extra.children.push(html);
               break;
            }
            case "tb": {
               extra.width = Math.min(
                  availableSpace.width,
                  Math.max(extra.width, w),
               );
               extra.height += h;
               extra.children.push(html);
               break;
            }
         }
      }
      function getAvailableSpace(node) {
         var availableSpace = node[$extra].availableSpace;
         var marginV = node.margin
            ? node.margin.topInset + node.margin.bottomInset
            : 0;
         var marginH = node.margin
            ? node.margin.leftInset + node.margin.rightInset
            : 0;
         switch (node.layout) {
            case "lr-tb":
            case "rl-tb":
               if (node[$extra].attempt === 0) {
                  return {
                     width: availableSpace.width - marginH - node[$extra].currentWidth,
                     height: availableSpace.height - marginV - node[$extra].prevHeight,
                  };
               }
               return {
                  width: availableSpace.width - marginH,
                  height: availableSpace.height - marginV - node[$extra].height,
               };
            case "rl-row":
            case "row":
               var width = node[$extra].columnWidths
                  .slice(node[$extra].currentColumn)
                  .reduce(function (a, x) {
                     return a + x;
                  });
               return { width: width, height: availableSpace.height - marginH };
            case "table":
            case "tb":
               return {
                  width: availableSpace.width - marginH,
                  height: availableSpace.height - marginV - node[$extra].height,
               };
            case "position":
            default:
               return availableSpace;
         }
      }
      function getTransformedBBox(node) {
         var w = node.w === "" ? NaN : node.w;
         var h = node.h === "" ? NaN : node.h;
         var centerX = 0,
            centerY = 0;
         switch (node.anchorType || "") {
            case "bottomCenter":
               centerX = w / 2;
               centerY = h;
               break;
            case "bottomLeft":
               centerX = 0;
               centerY = h;
               break;
            case "bottomRight":
               centerX = w;
               centerY = h;
               break;
            case "middleCenter":
               centerX = w / 2;
               centerY = h / 2;
               break;
            case "middleLeft":
               centerX = 0;
               centerY = h / 2;
               break;
            case "middleRight":
               centerX = w;
               centerY = h / 2;
               break;
            case "topCenter":
               centerX = w / 2;
               centerY = 0;
               break;
            case "topRight":
               centerX = w;
               centerY = 0;
               break;
         }
         var x, y;
         switch (node.rotate || 0) {
            case 0:
               x = -centerX;
               y = -centerY;
               break;
            case 90:
               x = -centerY;
               y = centerX;
               var _ref84 = [h, -w];
               w = _ref84[0];
               h = _ref84[1];
               break;
            case 180:
               x = centerX;
               y = centerY;
               var _ref85 = [-w, -h];
               w = _ref85[0];
               h = _ref85[1];
               break;
            case 270:
               x = centerY;
               y = -centerX;
               var _ref86 = [-h, w];
               w = _ref86[0];
               h = _ref86[1];
               break;
         }
         return [
            node.x + x + Math.min(0, w),
            node.y + y + Math.min(0, h),
            Math.abs(w),
            Math.abs(h),
         ];
      }
      function checkDimensions(node, space) {
         var _parent$$extra;
         if (node[$getTemplateRoot]()[$extra].firstUnsplittable === null) {
            return true;
         }
         if (node.w === 0 || node.h === 0) {
            return true;
         }
         var ERROR = 2;
         var parent = node[$getSubformParent]();
         var attempt =
            ((_parent$$extra = parent[$extra]) === null || _parent$$extra === void 0
               ? void 0
               : _parent$$extra.attempt) || 0;
         var _getTransformedBBox = getTransformedBBox(node),
            _getTransformedBBox2 = _slicedToArray(_getTransformedBBox, 4),
            y = _getTransformedBBox2[1],
            w = _getTransformedBBox2[2],
            h = _getTransformedBBox2[3];
         switch (parent.layout) {
            case "lr-tb":
            case "rl-tb":
               if (attempt === 0) {
                  if (!node[$getTemplateRoot]()[$extra].noLayoutFailure) {
                     if (node.h !== "" && Math.round(h - space.height) > ERROR) {
                        return false;
                     }
                     if (node.w !== "") {
                        if (Math.round(w - space.width) <= ERROR) {
                           return true;
                        }
                        if (parent[$extra].numberInLine === 0) {
                           return space.height > ERROR;
                        }
                        return false;
                     }
                     return space.width > ERROR;
                  }
                  if (node.w !== "") {
                     return Math.round(w - space.width) <= ERROR;
                  }
                  return space.width > ERROR;
               }
               if (node[$getTemplateRoot]()[$extra].noLayoutFailure) {
                  return true;
               }
               if (node.h !== "" && Math.round(h - space.height) > ERROR) {
                  return false;
               }
               if (node.w === "" || Math.round(w - space.width) <= ERROR) {
                  return space.height > ERROR;
               }
               if (parent[$isThereMoreWidth]()) {
                  return false;
               }
               return space.height > ERROR;
            case "table":
            case "tb":
               if (node[$getTemplateRoot]()[$extra].noLayoutFailure) {
                  return true;
               }
               if (node.h !== "" && !node[$isSplittable]()) {
                  return Math.round(h - space.height) <= ERROR;
               }
               if (node.w === "" || Math.round(w - space.width) <= ERROR) {
                  return space.height > ERROR;
               }
               if (parent[$isThereMoreWidth]()) {
                  return false;
               }
               return space.height > ERROR;
            case "position":
               if (node[$getTemplateRoot]()[$extra].noLayoutFailure) {
                  return true;
               }
               if (node.h === "" || Math.round(h + y - space.height) <= ERROR) {
                  return true;
               }
               var area = node[$getTemplateRoot]()[$extra].currentContentArea;
               return h + y > area.h;
            case "rl-row":
            case "row":
               if (node[$getTemplateRoot]()[$extra].noLayoutFailure) {
                  return true;
               }
               if (node.h !== "") {
                  return Math.round(h - space.height) <= ERROR;
               }
               return true;
            default:
               return true;
         }
      } // CONCATENATED MODULE: ./src/core/xfa/template.js
      var TEMPLATE_NS_ID = NamespaceIds.template.id;
      var SVG_NS = "http://www.w3.org/2000/svg";
      var MAX_ATTEMPTS_FOR_LRTB_LAYOUT = 2;
      var MAX_EMPTY_PAGES = 3;
      var DEFAULT_TAB_INDEX = 5000;
      var HEADING_PATTERN = /^H(\d+)$/;
      var MIMES = new Set([
         "image/gif",
         "image/jpeg",
         "image/jpg",
         "image/pjpeg",
         "image/png",
         "image/apng",
         "image/x-png",
         "image/bmp",
         "image/x-ms-bmp",
         "image/tiff",
         "image/tif",
         "application/octet-stream",
      ]);
      var IMAGES_HEADERS = [
         [[0x42, 0x4d], "image/bmp"],
         [[0xff, 0xd8, 0xff], "image/jpeg"],
         [[0x49, 0x49, 0x2a, 0x00], "image/tiff"],
         [[0x4d, 0x4d, 0x00, 0x2a], "image/tiff"],
         [[0x47, 0x49, 0x46, 0x38, 0x39, 0x61], "image/gif"],
         [[0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a], "image/png"],
      ];
      function getBorderDims(node) {
         if (!node || !node.border) {
            return { w: 0, h: 0 };
         }
         var borderExtra = node.border[$getExtra]();
         if (!borderExtra) {
            return { w: 0, h: 0 };
         }
         return {
            w:
               borderExtra.widths[0] +
               borderExtra.widths[2] +
               borderExtra.insets[0] +
               borderExtra.insets[2],
            h:
               borderExtra.widths[1] +
               borderExtra.widths[3] +
               borderExtra.insets[1] +
               borderExtra.insets[3],
         };
      }
      function hasMargin(node) {
         return (
            node.margin &&
            (node.margin.topInset ||
               node.margin.rightInset ||
               node.margin.bottomInset ||
               node.margin.leftInset)
         );
      }
      function _setValue(templateNode, value) {
         if (!templateNode.value) {
            var nodeValue = new Value({});
            templateNode[$appendChild](nodeValue);
            templateNode.value = nodeValue;
         }
         templateNode.value[$setValue](value);
      }
      function getContainedChildren(node) {
         var _iterator160, _step160, child, _t39;
         return _regenerator().w(
            function (_context41) {
               while (1)
                  switch ((_context41.p = _context41.n)) {
                     case 0:
                        _iterator160 = _createForOfIteratorHelper(node[$getChildren]());
                        _context41.p = 1;
                        _iterator160.s();
                     case 2:
                        if ((_step160 = _iterator160.n()).done) {
                           _context41.n = 6;
                           break;
                        }
                        child = _step160.value;
                        if (!(child instanceof SubformSet)) {
                           _context41.n = 4;
                           break;
                        }
                        return _context41.d(
                           _regeneratorValues(child[$getContainedChildren]()),
                           3,
                        );
                     case 3:
                        return _context41.a(3, 5);
                     case 4:
                        _context41.n = 5;
                        return child;
                     case 5:
                        _context41.n = 2;
                        break;
                     case 6:
                        _context41.n = 8;
                        break;
                     case 7:
                        _context41.p = 7;
                        _t39 = _context41.v;
                        _iterator160.e(_t39);
                     case 8:
                        _context41.p = 8;
                        _iterator160.f();
                        return _context41.f(8);
                     case 9:
                        return _context41.a(2);
                  }
            },
            _marked2,
            null,
            [[1, 7, 8, 9]],
         );
      }
      function isRequired(node) {
         var _node$validate;
         return (
            ((_node$validate = node.validate) === null || _node$validate === void 0
               ? void 0
               : _node$validate.nullTest) === "error"
         );
      }
      function setTabIndex(node) {
         while (node) {
            if (!node.traversal) {
               node[$tabIndex] = node[$getParent]()[$tabIndex];
               return;
            }
            if (node[$tabIndex]) {
               return;
            }
            var next = null;
            var _iterator161 = _createForOfIteratorHelper(
                  node.traversal[$getChildren](),
               ),
               _step161;
            try {
               for (_iterator161.s(); !(_step161 = _iterator161.n()).done; ) {
                  var child = _step161.value;
                  if (child.operation === "next") {
                     next = child;
                     break;
                  }
               }
            } catch (err) {
               _iterator161.e(err);
            } finally {
               _iterator161.f();
            }
            if (!next || !next.ref) {
               node[$tabIndex] = node[$getParent]()[$tabIndex];
               return;
            }
            var root = node[$getTemplateRoot]();
            node[$tabIndex] = ++root[$tabIndex];
            var ref = root[$searchNode](next.ref, node);
            if (!ref) {
               return;
            }
            node = ref[0];
         }
      }
      function applyAssist(obj, attributes) {
         var assist = obj.assist;
         if (assist) {
            var assistTitle = assist[$toHTML]();
            if (assistTitle) {
               attributes.title = assistTitle;
            }
            var role = assist.role;
            var match = role.match(HEADING_PATTERN);
            if (match) {
               var ariaRole = "heading";
               var ariaLevel = match[1];
               attributes.role = ariaRole;
               attributes["aria-level"] = ariaLevel;
            }
         }
         if (obj.layout === "table") {
            attributes.role = "table";
         } else if (obj.layout === "row") {
            attributes.role = "row";
         } else {
            var parent = obj[$getParent]();
            if (parent.layout === "row") {
               var _parent$assist;
               attributes.role =
                  ((_parent$assist = parent.assist) === null ||
                  _parent$assist === void 0
                     ? void 0
                     : _parent$assist.role) === "TH"
                     ? "columnheader"
                     : "cell";
            }
         }
      }
      function ariaLabel(obj) {
         if (!obj.assist) {
            return null;
         }
         var assist = obj.assist;
         if (assist.speak && assist.speak[$content] !== "") {
            return assist.speak[$content];
         }
         if (assist.toolTip) {
            return assist.toolTip[$content];
         }
         return null;
      }
      function valueToHtml(value) {
         return HTMLResult.success({
            name: "div",
            attributes: { class: ["xfaRich"], style: Object.create(null) },
            children: [
               {
                  name: "span",
                  attributes: { style: Object.create(null) },
                  value: value,
               },
            ],
         });
      }
      function setFirstUnsplittable(node) {
         var root = node[$getTemplateRoot]();
         if (root[$extra].firstUnsplittable === null) {
            root[$extra].firstUnsplittable = node;
            root[$extra].noLayoutFailure = true;
         }
      }
      function unsetFirstUnsplittable(node) {
         var root = node[$getTemplateRoot]();
         if (root[$extra].firstUnsplittable === node) {
            root[$extra].noLayoutFailure = false;
         }
      }
      function handleBreak(node) {
         if (node[$extra]) {
            return false;
         }
         node[$extra] = Object.create(null);
         if (node.targetType === "auto") {
            return false;
         }
         var root = node[$getTemplateRoot]();
         var target = null;
         if (node.target) {
            target = root[$searchNode](node.target, node[$getParent]());
            if (!target) {
               return false;
            }
            target = target[0];
         }
         var _root$$extra = root[$extra],
            currentPageArea = _root$$extra.currentPageArea,
            currentContentArea = _root$$extra.currentContentArea;
         if (node.targetType === "pageArea") {
            if (!(target instanceof PageArea)) {
               target = null;
            }
            if (node.startNew) {
               node[$extra].target = target || currentPageArea;
               return true;
            } else if (target && target !== currentPageArea) {
               node[$extra].target = target;
               return true;
            }
            return false;
         }
         if (!(target instanceof ContentArea)) {
            target = null;
         }
         var pageArea = target && target[$getParent]();
         var index;
         var nextPageArea = pageArea;
         if (node.startNew) {
            if (target) {
               var contentAreas = pageArea.contentArea.children;
               var indexForCurrent = contentAreas.indexOf(currentContentArea);
               var indexForTarget = contentAreas.indexOf(target);
               if (indexForCurrent !== -1 && indexForCurrent < indexForTarget) {
                  nextPageArea = null;
               }
               index = indexForTarget - 1;
            } else {
               index =
                  currentPageArea.contentArea.children.indexOf(currentContentArea);
            }
         } else if (target && target !== currentContentArea) {
            var _contentAreas = pageArea.contentArea.children;
            index = _contentAreas.indexOf(target) - 1;
            nextPageArea = pageArea === currentPageArea ? null : pageArea;
         } else {
            return false;
         }
         node[$extra].target = nextPageArea;
         node[$extra].index = index;
         return true;
      }
      function handleOverflow(node, extraNode, space) {
         var root = node[$getTemplateRoot]();
         var saved = root[$extra].noLayoutFailure;
         var savedMethod = extraNode[$getSubformParent];
         extraNode[$getSubformParent] = function () {
            return node;
         };
         root[$extra].noLayoutFailure = true;
         var res = extraNode[$toHTML](space);
         node[$addHTML](res.html, res.bbox);
         root[$extra].noLayoutFailure = saved;
         extraNode[$getSubformParent] = savedMethod;
      }
      var AppearanceFilter = /*#__PURE__*/ (function (_StringObject) {
         function AppearanceFilter(attributes) {
            var _this66;
            _classCallCheck(this, AppearanceFilter);
            _this66 = _callSuper(this, AppearanceFilter, [
               TEMPLATE_NS_ID,
               "appearanceFilter",
            ]);
            _this66.id = attributes.id || "";
            _this66.type = getStringOption(attributes.type, [
               "optional",
               "required",
            ]);
            _this66.use = attributes.use || "";
            _this66.usehref = attributes.usehref || "";
            return _this66;
         }
         _inherits(AppearanceFilter, _StringObject);
         return _createClass(AppearanceFilter);
      })(StringObject);
      var Arc = /*#__PURE__*/ (function (_XFAObject3) {
         function Arc(attributes) {
            var _this67;
            _classCallCheck(this, Arc);
            _this67 = _callSuper(this, Arc, [TEMPLATE_NS_ID, "arc", true]);
            _this67.circular = getInteger({
               data: attributes.circular,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this67.hand = getStringOption(attributes.hand, [
               "even",
               "left",
               "right",
            ]);
            _this67.id = attributes.id || "";
            _this67.startAngle = getFloat({
               data: attributes.startAngle,
               defaultValue: 0,
               validate: function validate(x) {
                  return true;
               },
            });
            _this67.sweepAngle = getFloat({
               data: attributes.sweepAngle,
               defaultValue: 360,
               validate: function validate(x) {
                  return true;
               },
            });
            _this67.use = attributes.use || "";
            _this67.usehref = attributes.usehref || "";
            _this67.edge = null;
            _this67.fill = null;
            return _this67;
         }
         _inherits(Arc, _XFAObject3);
         return _createClass(Arc, [
            {
               key: $toHTML,
               value: function value() {
                  var _this$fill;
                  var edge = this.edge || new Edge({});
                  var edgeStyle = edge[$toStyle]();
                  var style = Object.create(null);
                  if (
                     ((_this$fill = this.fill) === null || _this$fill === void 0
                        ? void 0
                        : _this$fill.presence) === "visible"
                  ) {
                     Object.assign(style, this.fill[$toStyle]());
                  } else {
                     style.fill = "transparent";
                  }
                  style.strokeWidth = measureToString(
                     edge.presence === "visible" ? edge.thickness : 0,
                  );
                  style.stroke = edgeStyle.color;
                  var arc;
                  var attributes = {
                     xmlns: SVG_NS,
                     style: { width: "100%", height: "100%", overflow: "visible" },
                  };
                  if (this.sweepAngle === 360) {
                     arc = {
                        name: "ellipse",
                        attributes: {
                           xmlns: SVG_NS,
                           cx: "50%",
                           cy: "50%",
                           rx: "50%",
                           ry: "50%",
                           style: style,
                        },
                     };
                  } else {
                     var startAngle = (this.startAngle * Math.PI) / 180;
                     var sweepAngle = (this.sweepAngle * Math.PI) / 180;
                     var largeArc = this.sweepAngle > 180 ? 1 : 0;
                     var x1 = 50 * (1 + Math.cos(startAngle)),
                        y1 = 50 * (1 - Math.sin(startAngle)),
                        x2 = 50 * (1 + Math.cos(startAngle + sweepAngle)),
                        y2 = 50 * (1 - Math.sin(startAngle + sweepAngle));
                     arc = {
                        name: "path",
                        attributes: {
                           xmlns: SVG_NS,
                           d: "M "
                              .concat(x1, " ")
                              .concat(y1, " A 50 50 0 ")
                              .concat(largeArc, " 0 ")
                              .concat(x2, " ")
                              .concat(y2),
                           vectorEffect: "non-scaling-stroke",
                           style: style,
                        },
                     };
                     Object.assign(attributes, {
                        viewBox: "0 0 100 100",
                        preserveAspectRatio: "none",
                     });
                  }
                  var svg = { name: "svg", children: [arc], attributes: attributes };
                  var parent = this[$getParent]()[$getParent]();
                  if (hasMargin(parent)) {
                     return HTMLResult.success({
                        name: "div",
                        attributes: {
                           style: { display: "inline", width: "100%", height: "100%" },
                        },
                        children: [svg],
                     });
                  }
                  svg.attributes.style.position = "absolute";
                  return HTMLResult.success(svg);
               },
            },
         ]);
      })(XFAObject);
      var Area = /*#__PURE__*/ (function (_XFAObject4) {
         function Area(attributes) {
            var _this68;
            _classCallCheck(this, Area);
            _this68 = _callSuper(this, Area, [TEMPLATE_NS_ID, "area", true]);
            _this68.colSpan = getInteger({
               data: attributes.colSpan,
               defaultValue: 1,
               validate: function validate(n) {
                  return n >= 1 || n === -1;
               },
            });
            _this68.id = attributes.id || "";
            _this68.name = attributes.name || "";
            _this68.relevant = getRelevant(attributes.relevant);
            _this68.use = attributes.use || "";
            _this68.usehref = attributes.usehref || "";
            _this68.x = getMeasurement(attributes.x, "0pt");
            _this68.y = getMeasurement(attributes.y, "0pt");
            _this68.desc = null;
            _this68.extras = null;
            _this68.area = new XFAObjectArray();
            _this68.draw = new XFAObjectArray();
            _this68.exObject = new XFAObjectArray();
            _this68.exclGroup = new XFAObjectArray();
            _this68.field = new XFAObjectArray();
            _this68.subform = new XFAObjectArray();
            _this68.subformSet = new XFAObjectArray();
            return _this68;
         }
         _inherits(Area, _XFAObject4);
         return _createClass(Area, [
            {
               key: $getContainedChildren,
               value: /*#__PURE__*/ _regenerator().m(function value() {
                  return _regenerator().w(
                     function (_context42) {
                        while (1)
                           switch (_context42.n) {
                              case 0:
                                 return _context42.d(
                                    _regeneratorValues(getContainedChildren(this)),
                                    1,
                                 );
                              case 1:
                                 return _context42.a(2);
                           }
                     },
                     value,
                     this,
                  );
               }),
            },
            {
               key: $isTransparent,
               value: function value() {
                  return true;
               },
            },
            {
               key: $isBindable,
               value: function value() {
                  return true;
               },
            },
            {
               key: $addHTML,
               value: function value(html, bbox) {
                  var _bbox4 = _slicedToArray(bbox, 4),
                     x = _bbox4[0],
                     y = _bbox4[1],
                     w = _bbox4[2],
                     h = _bbox4[3];
                  this[$extra].width = Math.max(this[$extra].width, x + w);
                  this[$extra].height = Math.max(this[$extra].height, y + h);
                  this[$extra].children.push(html);
               },
            },
            {
               key: $getAvailableSpace,
               value: function value() {
                  return this[$extra].availableSpace;
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  var style = toStyle(this, "position");
                  var attributes = {
                     style: style,
                     id: this[$uid],
                     class: ["xfaArea"],
                  };
                  if (isPrintOnly(this)) {
                     attributes["class"].push("xfaPrintOnly");
                  }
                  if (this.name) {
                     attributes.xfaName = this.name;
                  }
                  var children = [];
                  this[$extra] = {
                     children: children,
                     width: 0,
                     height: 0,
                     availableSpace: availableSpace,
                  };
                  var result = this[$childrenToHTML]({
                     filter: new Set([
                        "area",
                        "draw",
                        "field",
                        "exclGroup",
                        "subform",
                        "subformSet",
                     ]),
                     include: true,
                  });
                  if (!result.success) {
                     if (result.isBreak()) {
                        return result;
                     }
                     delete this[$extra];
                     return HTMLResult.FAILURE;
                  }
                  style.width = measureToString(this[$extra].width);
                  style.height = measureToString(this[$extra].height);
                  var html = {
                     name: "div",
                     attributes: attributes,
                     children: children,
                  };
                  var bbox = [
                     this.x,
                     this.y,
                     this[$extra].width,
                     this[$extra].height,
                  ];
                  delete this[$extra];
                  return HTMLResult.success(html, bbox);
               },
            },
         ]);
      })(XFAObject);
      var Assist = /*#__PURE__*/ (function (_XFAObject5) {
         function Assist(attributes) {
            var _this69;
            _classCallCheck(this, Assist);
            _this69 = _callSuper(this, Assist, [TEMPLATE_NS_ID, "assist", true]);
            _this69.id = attributes.id || "";
            _this69.role = attributes.role || "";
            _this69.use = attributes.use || "";
            _this69.usehref = attributes.usehref || "";
            _this69.speak = null;
            _this69.toolTip = null;
            return _this69;
         }
         _inherits(Assist, _XFAObject5);
         return _createClass(Assist, [
            {
               key: $toHTML,
               value: function value() {
                  var _this$toolTip;
                  return (
                     ((_this$toolTip = this.toolTip) === null ||
                     _this$toolTip === void 0
                        ? void 0
                        : _this$toolTip[$content]) || null
                  );
               },
            },
         ]);
      })(XFAObject);
      var Barcode = /*#__PURE__*/ (function (_XFAObject6) {
         function Barcode(attributes) {
            var _this70;
            _classCallCheck(this, Barcode);
            _this70 = _callSuper(this, Barcode, [TEMPLATE_NS_ID, "barcode", true]);
            _this70.charEncoding = getKeyword({
               data: attributes.charEncoding
                  ? attributes.charEncoding.toLowerCase()
                  : "",
               defaultValue: "",
               validate: function validate(k) {
                  return (
                     [
                        "utf-8",
                        "big-five",
                        "fontspecific",
                        "gbk",
                        "gb-18030",
                        "gb-2312",
                        "ksc-5601",
                        "none",
                        "shift-jis",
                        "ucs-2",
                        "utf-16",
                     ].includes(k) || k.match(/iso-8859-\d{2}/)
                  );
               },
            });
            _this70.checksum = getStringOption(attributes.checksum, [
               "none",
               "1mod10",
               "1mod10_1mod11",
               "2mod10",
               "auto",
            ]);
            _this70.dataColumnCount = getInteger({
               data: attributes.dataColumnCount,
               defaultValue: -1,
               validate: function validate(x) {
                  return x >= 0;
               },
            });
            _this70.dataLength = getInteger({
               data: attributes.dataLength,
               defaultValue: -1,
               validate: function validate(x) {
                  return x >= 0;
               },
            });
            _this70.dataPrep = getStringOption(attributes.dataPrep, [
               "none",
               "flateCompress",
            ]);
            _this70.dataRowCount = getInteger({
               data: attributes.dataRowCount,
               defaultValue: -1,
               validate: function validate(x) {
                  return x >= 0;
               },
            });
            _this70.endChar = attributes.endChar || "";
            _this70.errorCorrectionLevel = getInteger({
               data: attributes.errorCorrectionLevel,
               defaultValue: -1,
               validate: function validate(x) {
                  return x >= 0 && x <= 8;
               },
            });
            _this70.id = attributes.id || "";
            _this70.moduleHeight = getMeasurement(attributes.moduleHeight, "5mm");
            _this70.moduleWidth = getMeasurement(attributes.moduleWidth, "0.25mm");
            _this70.printCheckDigit = getInteger({
               data: attributes.printCheckDigit,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this70.rowColumnRatio = getRatio(attributes.rowColumnRatio);
            _this70.startChar = attributes.startChar || "";
            _this70.textLocation = getStringOption(attributes.textLocation, [
               "below",
               "above",
               "aboveEmbedded",
               "belowEmbedded",
               "none",
            ]);
            _this70.truncate = getInteger({
               data: attributes.truncate,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this70.type = getStringOption(
               attributes.type ? attributes.type.toLowerCase() : "",
               [
                  "aztec",
                  "codabar",
                  "code2of5industrial",
                  "code2of5interleaved",
                  "code2of5matrix",
                  "code2of5standard",
                  "code3of9",
                  "code3of9extended",
                  "code11",
                  "code49",
                  "code93",
                  "code128",
                  "code128a",
                  "code128b",
                  "code128c",
                  "code128sscc",
                  "datamatrix",
                  "ean8",
                  "ean8add2",
                  "ean8add5",
                  "ean13",
                  "ean13add2",
                  "ean13add5",
                  "ean13pwcd",
                  "fim",
                  "logmars",
                  "maxicode",
                  "msi",
                  "pdf417",
                  "pdf417macro",
                  "plessey",
                  "postauscust2",
                  "postauscust3",
                  "postausreplypaid",
                  "postausstandard",
                  "postukrm4scc",
                  "postusdpbc",
                  "postusimb",
                  "postusstandard",
                  "postus5zip",
                  "qrcode",
                  "rfid",
                  "rss14",
                  "rss14expanded",
                  "rss14limited",
                  "rss14stacked",
                  "rss14stackedomni",
                  "rss14truncated",
                  "telepen",
                  "ucc128",
                  "ucc128random",
                  "ucc128sscc",
                  "upca",
                  "upcaadd2",
                  "upcaadd5",
                  "upcapwcd",
                  "upce",
                  "upceadd2",
                  "upceadd5",
                  "upcean2",
                  "upcean5",
                  "upsmaxicode",
               ],
            );
            _this70.upsMode = getStringOption(attributes.upsMode, [
               "usCarrier",
               "internationalCarrier",
               "secureSymbol",
               "standardSymbol",
            ]);
            _this70.use = attributes.use || "";
            _this70.usehref = attributes.usehref || "";
            _this70.wideNarrowRatio = getRatio(attributes.wideNarrowRatio);
            _this70.encrypt = null;
            _this70.extras = null;
            return _this70;
         }
         _inherits(Barcode, _XFAObject6);
         return _createClass(Barcode);
      })(XFAObject);
      var Bind = /*#__PURE__*/ (function (_XFAObject7) {
         function Bind(attributes) {
            var _this71;
            _classCallCheck(this, Bind);
            _this71 = _callSuper(this, Bind, [TEMPLATE_NS_ID, "bind", true]);
            _this71.match = getStringOption(attributes.match, [
               "once",
               "dataRef",
               "global",
               "none",
            ]);
            _this71.ref = attributes.ref || "";
            _this71.picture = null;
            return _this71;
         }
         _inherits(Bind, _XFAObject7);
         return _createClass(Bind);
      })(XFAObject);
      var BindItems = /*#__PURE__*/ (function (_XFAObject8) {
         function BindItems(attributes) {
            var _this72;
            _classCallCheck(this, BindItems);
            _this72 = _callSuper(this, BindItems, [TEMPLATE_NS_ID, "bindItems"]);
            _this72.connection = attributes.connection || "";
            _this72.labelRef = attributes.labelRef || "";
            _this72.ref = attributes.ref || "";
            _this72.valueRef = attributes.valueRef || "";
            return _this72;
         }
         _inherits(BindItems, _XFAObject8);
         return _createClass(BindItems);
      })(XFAObject);
      var Bookend = /*#__PURE__*/ (function (_XFAObject9) {
         function Bookend(attributes) {
            var _this73;
            _classCallCheck(this, Bookend);
            _this73 = _callSuper(this, Bookend, [TEMPLATE_NS_ID, "bookend"]);
            _this73.id = attributes.id || "";
            _this73.leader = attributes.leader || "";
            _this73.trailer = attributes.trailer || "";
            _this73.use = attributes.use || "";
            _this73.usehref = attributes.usehref || "";
            return _this73;
         }
         _inherits(Bookend, _XFAObject9);
         return _createClass(Bookend);
      })(XFAObject);
      var BooleanElement = /*#__PURE__*/ (function (_Option) {
         function BooleanElement(attributes) {
            var _this74;
            _classCallCheck(this, BooleanElement);
            _this74 = _callSuper(this, BooleanElement, [TEMPLATE_NS_ID, "boolean"]);
            _this74.id = attributes.id || "";
            _this74.name = attributes.name || "";
            _this74.use = attributes.use || "";
            _this74.usehref = attributes.usehref || "";
            return _this74;
         }
         _inherits(BooleanElement, _Option);
         return _createClass(BooleanElement, [
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  return valueToHtml(this[$content] === 1 ? "1" : "0");
               },
            },
         ]);
      })(Option01);
      var Border = /*#__PURE__*/ (function (_XFAObject0) {
         function Border(attributes) {
            var _this75;
            _classCallCheck(this, Border);
            _this75 = _callSuper(this, Border, [TEMPLATE_NS_ID, "border", true]);
            _this75["break"] = getStringOption(attributes["break"], [
               "close",
               "open",
            ]);
            _this75.hand = getStringOption(attributes.hand, [
               "even",
               "left",
               "right",
            ]);
            _this75.id = attributes.id || "";
            _this75.presence = getStringOption(attributes.presence, [
               "visible",
               "hidden",
               "inactive",
               "invisible",
            ]);
            _this75.relevant = getRelevant(attributes.relevant);
            _this75.use = attributes.use || "";
            _this75.usehref = attributes.usehref || "";
            _this75.corner = new XFAObjectArray(4);
            _this75.edge = new XFAObjectArray(4);
            _this75.extras = null;
            _this75.fill = null;
            _this75.margin = null;
            return _this75;
         }
         _inherits(Border, _XFAObject0);
         return _createClass(Border, [
            {
               key: $getExtra,
               value: function value() {
                  if (!this[$extra]) {
                     var edges = this.edge.children.slice();
                     if (edges.length < 4) {
                        var defaultEdge = edges.at(-1) || new Edge({});
                        for (var i = edges.length; i < 4; i++) {
                           edges.push(defaultEdge);
                        }
                     }
                     var widths = edges.map(function (edge) {
                        return edge.thickness;
                     });
                     var insets = [0, 0, 0, 0];
                     if (this.margin) {
                        insets[0] = this.margin.topInset;
                        insets[1] = this.margin.rightInset;
                        insets[2] = this.margin.bottomInset;
                        insets[3] = this.margin.leftInset;
                     }
                     this[$extra] = { widths: widths, insets: insets, edges: edges };
                  }
                  return this[$extra];
               },
            },
            {
               key: $toStyle,
               value: function value() {
                  var _this$fill2;
                  var _this$$getExtra = this[$getExtra](),
                     edges = _this$$getExtra.edges;
                  var edgeStyles = edges.map(function (node) {
                     var style = node[$toStyle]();
                     style.color || (style.color = "#000000");
                     return style;
                  });
                  var style = Object.create(null);
                  if (this.margin) {
                     Object.assign(style, this.margin[$toStyle]());
                  }
                  if (
                     ((_this$fill2 = this.fill) === null || _this$fill2 === void 0
                        ? void 0
                        : _this$fill2.presence) === "visible"
                  ) {
                     Object.assign(style, this.fill[$toStyle]());
                  }
                  if (
                     this.corner.children.some(function (node) {
                        return node.radius !== 0;
                     })
                  ) {
                     var cornerStyles = this.corner.children.map(function (node) {
                        return node[$toStyle]();
                     });
                     if (cornerStyles.length === 2 || cornerStyles.length === 3) {
                        var last = cornerStyles.at(-1);
                        for (var i = cornerStyles.length; i < 4; i++) {
                           cornerStyles.push(last);
                        }
                     }
                     style.borderRadius = cornerStyles
                        .map(function (s) {
                           return s.radius;
                        })
                        .join(" ");
                  }
                  switch (this.presence) {
                     case "invisible":
                     case "hidden":
                        style.borderStyle = "";
                        break;
                     case "inactive":
                        style.borderStyle = "none";
                        break;
                     default:
                        style.borderStyle = edgeStyles
                           .map(function (s) {
                              return s.style;
                           })
                           .join(" ");
                        break;
                  }
                  style.borderWidth = edgeStyles
                     .map(function (s) {
                        return s.width;
                     })
                     .join(" ");
                  style.borderColor = edgeStyles
                     .map(function (s) {
                        return s.color;
                     })
                     .join(" ");
                  return style;
               },
            },
         ]);
      })(XFAObject);
      var Break = /*#__PURE__*/ (function (_XFAObject1) {
         function Break(attributes) {
            var _this76;
            _classCallCheck(this, Break);
            _this76 = _callSuper(this, Break, [TEMPLATE_NS_ID, "break", true]);
            _this76.after = getStringOption(attributes.after, [
               "auto",
               "contentArea",
               "pageArea",
               "pageEven",
               "pageOdd",
            ]);
            _this76.afterTarget = attributes.afterTarget || "";
            _this76.before = getStringOption(attributes.before, [
               "auto",
               "contentArea",
               "pageArea",
               "pageEven",
               "pageOdd",
            ]);
            _this76.beforeTarget = attributes.beforeTarget || "";
            _this76.bookendLeader = attributes.bookendLeader || "";
            _this76.bookendTrailer = attributes.bookendTrailer || "";
            _this76.id = attributes.id || "";
            _this76.overflowLeader = attributes.overflowLeader || "";
            _this76.overflowTarget = attributes.overflowTarget || "";
            _this76.overflowTrailer = attributes.overflowTrailer || "";
            _this76.startNew = getInteger({
               data: attributes.startNew,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this76.use = attributes.use || "";
            _this76.usehref = attributes.usehref || "";
            _this76.extras = null;
            return _this76;
         }
         _inherits(Break, _XFAObject1);
         return _createClass(Break);
      })(XFAObject);
      var BreakAfter = /*#__PURE__*/ (function (_XFAObject10) {
         function BreakAfter(attributes) {
            var _this77;
            _classCallCheck(this, BreakAfter);
            _this77 = _callSuper(this, BreakAfter, [
               TEMPLATE_NS_ID,
               "breakAfter",
               true,
            ]);
            _this77.id = attributes.id || "";
            _this77.leader = attributes.leader || "";
            _this77.startNew = getInteger({
               data: attributes.startNew,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this77.target = attributes.target || "";
            _this77.targetType = getStringOption(attributes.targetType, [
               "auto",
               "contentArea",
               "pageArea",
            ]);
            _this77.trailer = attributes.trailer || "";
            _this77.use = attributes.use || "";
            _this77.usehref = attributes.usehref || "";
            _this77.script = null;
            return _this77;
         }
         _inherits(BreakAfter, _XFAObject10);
         return _createClass(BreakAfter);
      })(XFAObject);
      var BreakBefore = /*#__PURE__*/ (function (_XFAObject11) {
         function BreakBefore(attributes) {
            var _this78;
            _classCallCheck(this, BreakBefore);
            _this78 = _callSuper(this, BreakBefore, [
               TEMPLATE_NS_ID,
               "breakBefore",
               true,
            ]);
            _this78.id = attributes.id || "";
            _this78.leader = attributes.leader || "";
            _this78.startNew = getInteger({
               data: attributes.startNew,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this78.target = attributes.target || "";
            _this78.targetType = getStringOption(attributes.targetType, [
               "auto",
               "contentArea",
               "pageArea",
            ]);
            _this78.trailer = attributes.trailer || "";
            _this78.use = attributes.use || "";
            _this78.usehref = attributes.usehref || "";
            _this78.script = null;
            return _this78;
         }
         _inherits(BreakBefore, _XFAObject11);
         return _createClass(BreakBefore, [
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  this[$extra] = {};
                  return HTMLResult.FAILURE;
               },
            },
         ]);
      })(XFAObject);
      var Button = /*#__PURE__*/ (function (_XFAObject12) {
         function Button(attributes) {
            var _this79;
            _classCallCheck(this, Button);
            _this79 = _callSuper(this, Button, [TEMPLATE_NS_ID, "button", true]);
            _this79.highlight = getStringOption(attributes.highlight, [
               "inverted",
               "none",
               "outline",
               "push",
            ]);
            _this79.id = attributes.id || "";
            _this79.use = attributes.use || "";
            _this79.usehref = attributes.usehref || "";
            _this79.extras = null;
            return _this79;
         }
         _inherits(Button, _XFAObject12);
         return _createClass(Button, [
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  var parent = this[$getParent]();
                  var grandpa = parent[$getParent]();
                  var htmlButton = {
                     name: "button",
                     attributes: { id: this[$uid], class: ["xfaButton"], style: {} },
                     children: [],
                  };
                  var _iterator162 = _createForOfIteratorHelper(
                        grandpa.event.children,
                     ),
                     _step162;
                  try {
                     for (_iterator162.s(); !(_step162 = _iterator162.n()).done; ) {
                        var event = _step162.value;
                        if (event.activity !== "click" || !event.script) {
                           continue;
                        }
                        var jsURL = recoverJsURL(event.script[$content]);
                        if (!jsURL) {
                           continue;
                        }
                        var href = fixURL(jsURL.url);
                        if (!href) {
                           continue;
                        }
                        htmlButton.children.push({
                           name: "a",
                           attributes: {
                              id: "link" + this[$uid],
                              href: href,
                              newWindow: jsURL.newWindow,
                              class: ["xfaLink"],
                              style: {},
                           },
                           children: [],
                        });
                     }
                  } catch (err) {
                     _iterator162.e(err);
                  } finally {
                     _iterator162.f();
                  }
                  return HTMLResult.success(htmlButton);
               },
            },
         ]);
      })(XFAObject);
      var Calculate = /*#__PURE__*/ (function (_XFAObject13) {
         function Calculate(attributes) {
            var _this80;
            _classCallCheck(this, Calculate);
            _this80 = _callSuper(this, Calculate, [
               TEMPLATE_NS_ID,
               "calculate",
               true,
            ]);
            _this80.id = attributes.id || "";
            _this80.override = getStringOption(attributes.override, [
               "disabled",
               "error",
               "ignore",
               "warning",
            ]);
            _this80.use = attributes.use || "";
            _this80.usehref = attributes.usehref || "";
            _this80.extras = null;
            _this80.message = null;
            _this80.script = null;
            return _this80;
         }
         _inherits(Calculate, _XFAObject13);
         return _createClass(Calculate);
      })(XFAObject);
      var Caption = /*#__PURE__*/ (function (_XFAObject14) {
         function Caption(attributes) {
            var _this81;
            _classCallCheck(this, Caption);
            _this81 = _callSuper(this, Caption, [TEMPLATE_NS_ID, "caption", true]);
            _this81.id = attributes.id || "";
            _this81.placement = getStringOption(attributes.placement, [
               "left",
               "bottom",
               "inline",
               "right",
               "top",
            ]);
            _this81.presence = getStringOption(attributes.presence, [
               "visible",
               "hidden",
               "inactive",
               "invisible",
            ]);
            _this81.reserve = Math.ceil(getMeasurement(attributes.reserve));
            _this81.use = attributes.use || "";
            _this81.usehref = attributes.usehref || "";
            _this81.extras = null;
            _this81.font = null;
            _this81.margin = null;
            _this81.para = null;
            _this81.value = null;
            return _this81;
         }
         _inherits(Caption, _XFAObject14);
         return _createClass(Caption, [
            {
               key: $setValue,
               value: function value(_value5) {
                  _setValue(this, _value5);
               },
            },
            {
               key: $getExtra,
               value: function value(availableSpace) {
                  if (!this[$extra]) {
                     var width = availableSpace.width,
                        height = availableSpace.height;
                     switch (this.placement) {
                        case "left":
                        case "right":
                        case "inline":
                           width = this.reserve <= 0 ? width : this.reserve;
                           break;
                        case "top":
                        case "bottom":
                           height = this.reserve <= 0 ? height : this.reserve;
                           break;
                     }
                     this[$extra] = layoutNode(this, { width: width, height: height });
                  }
                  return this[$extra];
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  if (!this.value) {
                     return HTMLResult.EMPTY;
                  }
                  this[$pushPara]();
                  var value = this.value[$toHTML](availableSpace).html;
                  if (!value) {
                     this[$popPara]();
                     return HTMLResult.EMPTY;
                  }
                  var savedReserve = this.reserve;
                  if (this.reserve <= 0) {
                     var _this$$getExtra2 = this[$getExtra](availableSpace),
                        w = _this$$getExtra2.w,
                        h = _this$$getExtra2.h;
                     switch (this.placement) {
                        case "left":
                        case "right":
                        case "inline":
                           this.reserve = w;
                           break;
                        case "top":
                        case "bottom":
                           this.reserve = h;
                           break;
                     }
                  }
                  var children = [];
                  if (typeof value === "string") {
                     children.push({ name: "#text", value: value });
                  } else {
                     children.push(value);
                  }
                  var style = toStyle(this, "font", "margin", "visibility");
                  switch (this.placement) {
                     case "left":
                     case "right":
                        if (this.reserve > 0) {
                           style.width = measureToString(this.reserve);
                        }
                        break;
                     case "top":
                     case "bottom":
                        if (this.reserve > 0) {
                           style.height = measureToString(this.reserve);
                        }
                        break;
                  }
                  setPara(this, null, value);
                  this[$popPara]();
                  this.reserve = savedReserve;
                  return HTMLResult.success({
                     name: "div",
                     attributes: { style: style, class: ["xfaCaption"] },
                     children: children,
                  });
               },
            },
         ]);
      })(XFAObject);
      var Certificate = /*#__PURE__*/ (function (_StringObject2) {
         function Certificate(attributes) {
            var _this82;
            _classCallCheck(this, Certificate);
            _this82 = _callSuper(this, Certificate, [
               TEMPLATE_NS_ID,
               "certificate",
            ]);
            _this82.id = attributes.id || "";
            _this82.name = attributes.name || "";
            _this82.use = attributes.use || "";
            _this82.usehref = attributes.usehref || "";
            return _this82;
         }
         _inherits(Certificate, _StringObject2);
         return _createClass(Certificate);
      })(StringObject);
      var Certificates = /*#__PURE__*/ (function (_XFAObject15) {
         function Certificates(attributes) {
            var _this83;
            _classCallCheck(this, Certificates);
            _this83 = _callSuper(this, Certificates, [
               TEMPLATE_NS_ID,
               "certificates",
               true,
            ]);
            _this83.credentialServerPolicy = getStringOption(
               attributes.credentialServerPolicy,
               ["optional", "required"],
            );
            _this83.id = attributes.id || "";
            _this83.url = attributes.url || "";
            _this83.urlPolicy = attributes.urlPolicy || "";
            _this83.use = attributes.use || "";
            _this83.usehref = attributes.usehref || "";
            _this83.encryption = null;
            _this83.issuers = null;
            _this83.keyUsage = null;
            _this83.oids = null;
            _this83.signing = null;
            _this83.subjectDNs = null;
            return _this83;
         }
         _inherits(Certificates, _XFAObject15);
         return _createClass(Certificates);
      })(XFAObject);
      var CheckButton = /*#__PURE__*/ (function (_XFAObject16) {
         function CheckButton(attributes) {
            var _this84;
            _classCallCheck(this, CheckButton);
            _this84 = _callSuper(this, CheckButton, [
               TEMPLATE_NS_ID,
               "checkButton",
               true,
            ]);
            _this84.id = attributes.id || "";
            _this84.mark = getStringOption(attributes.mark, [
               "default",
               "check",
               "circle",
               "cross",
               "diamond",
               "square",
               "star",
            ]);
            _this84.shape = getStringOption(attributes.shape, ["square", "round"]);
            _this84.size = getMeasurement(attributes.size, "10pt");
            _this84.use = attributes.use || "";
            _this84.usehref = attributes.usehref || "";
            _this84.border = null;
            _this84.extras = null;
            _this84.margin = null;
            return _this84;
         }
         _inherits(CheckButton, _XFAObject16);
         return _createClass(CheckButton, [
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  var _field$value;
                  var style = toStyle("margin");
                  var size = measureToString(this.size);
                  style.width = style.height = size;
                  var type;
                  var className;
                  var groupId;
                  var field = this[$getParent]()[$getParent]();
                  var items =
                     (field.items.children.length &&
                        field.items.children[0][$toHTML]().html) ||
                     [];
                  var exportedValue = {
                     on: (items[0] !== undefined ? items[0] : "on").toString(),
                     off: (items[1] !== undefined ? items[1] : "off").toString(),
                  };
                  var value =
                     ((_field$value = field.value) === null || _field$value === void 0
                        ? void 0
                        : _field$value[$text]()) || "off";
                  var checked = value === exportedValue.on || undefined;
                  var container = field[$getSubformParent]();
                  var fieldId = field[$uid];
                  var dataId;
                  if (container instanceof ExclGroup) {
                     var _container$$data;
                     groupId = container[$uid];
                     type = "radio";
                     className = "xfaRadio";
                     dataId =
                        ((_container$$data = container[$data]) === null ||
                        _container$$data === void 0
                           ? void 0
                           : _container$$data[$uid]) || container[$uid];
                  } else {
                     var _field$$data;
                     type = "checkbox";
                     className = "xfaCheckbox";
                     dataId =
                        ((_field$$data = field[$data]) === null ||
                        _field$$data === void 0
                           ? void 0
                           : _field$$data[$uid]) || field[$uid];
                  }
                  var input = {
                     name: "input",
                     attributes: {
                        class: [className],
                        style: style,
                        fieldId: fieldId,
                        dataId: dataId,
                        type: type,
                        checked: checked,
                        xfaOn: exportedValue.on,
                        xfaOff: exportedValue.off,
                        "aria-label": ariaLabel(field),
                        "aria-required": false,
                     },
                  };
                  if (groupId) {
                     input.attributes.name = groupId;
                  }
                  if (isRequired(field)) {
                     input.attributes["aria-required"] = true;
                     input.attributes.required = true;
                  }
                  return HTMLResult.success({
                     name: "label",
                     attributes: { class: ["xfaLabel"] },
                     children: [input],
                  });
               },
            },
         ]);
      })(XFAObject);
      var ChoiceList = /*#__PURE__*/ (function (_XFAObject17) {
         function ChoiceList(attributes) {
            var _this85;
            _classCallCheck(this, ChoiceList);
            _this85 = _callSuper(this, ChoiceList, [
               TEMPLATE_NS_ID,
               "choiceList",
               true,
            ]);
            _this85.commitOn = getStringOption(attributes.commitOn, [
               "select",
               "exit",
            ]);
            _this85.id = attributes.id || "";
            _this85.open = getStringOption(attributes.open, [
               "userControl",
               "always",
               "multiSelect",
               "onEntry",
            ]);
            _this85.textEntry = getInteger({
               data: attributes.textEntry,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this85.use = attributes.use || "";
            _this85.usehref = attributes.usehref || "";
            _this85.border = null;
            _this85.extras = null;
            _this85.margin = null;
            return _this85;
         }
         _inherits(ChoiceList, _XFAObject17);
         return _createClass(ChoiceList, [
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  var _field$font, _field$$data2;
                  var style = toStyle(this, "border", "margin");
                  var ui = this[$getParent]();
                  var field = ui[$getParent]();
                  var fontSize =
                     ((_field$font = field.font) === null || _field$font === void 0
                        ? void 0
                        : _field$font.size) || 10;
                  var optionStyle = {
                     fontSize: "calc(".concat(fontSize, "px * var(--scale-factor))"),
                  };
                  var children = [];
                  if (field.items.children.length > 0) {
                     var _field$value2;
                     var items = field.items;
                     var displayedIndex = 0;
                     var saveIndex = 0;
                     if (items.children.length === 2) {
                        displayedIndex = items.children[0].save;
                        saveIndex = 1 - displayedIndex;
                     }
                     var displayed = items.children[displayedIndex][$toHTML]().html;
                     var values = items.children[saveIndex][$toHTML]().html;
                     var selected = false;
                     var value =
                        ((_field$value2 = field.value) === null ||
                        _field$value2 === void 0
                           ? void 0
                           : _field$value2[$text]()) || "";
                     for (var i = 0, ii = displayed.length; i < ii; i++) {
                        var option = {
                           name: "option",
                           attributes: {
                              value: values[i] || displayed[i],
                              style: optionStyle,
                           },
                           value: displayed[i],
                        };
                        if (values[i] === value) {
                           option.attributes.selected = selected = true;
                        }
                        children.push(option);
                     }
                     if (!selected) {
                        children.splice(0, 0, {
                           name: "option",
                           attributes: { hidden: true, selected: true },
                           value: " ",
                        });
                     }
                  }
                  var selectAttributes = {
                     class: ["xfaSelect"],
                     fieldId: field[$uid],
                     dataId:
                        ((_field$$data2 = field[$data]) === null ||
                        _field$$data2 === void 0
                           ? void 0
                           : _field$$data2[$uid]) || field[$uid],
                     style: style,
                     "aria-label": ariaLabel(field),
                     "aria-required": false,
                  };
                  if (isRequired(field)) {
                     selectAttributes["aria-required"] = true;
                     selectAttributes.required = true;
                  }
                  if (this.open === "multiSelect") {
                     selectAttributes.multiple = true;
                  }
                  return HTMLResult.success({
                     name: "label",
                     attributes: { class: ["xfaLabel"] },
                     children: [
                        {
                           name: "select",
                           children: children,
                           attributes: selectAttributes,
                        },
                     ],
                  });
               },
            },
         ]);
      })(XFAObject);
      var Color = /*#__PURE__*/ (function (_XFAObject18) {
         function Color(attributes) {
            var _this86;
            _classCallCheck(this, Color);
            _this86 = _callSuper(this, Color, [TEMPLATE_NS_ID, "color", true]);
            _this86.cSpace = getStringOption(attributes.cSpace, ["SRGB"]);
            _this86.id = attributes.id || "";
            _this86.use = attributes.use || "";
            _this86.usehref = attributes.usehref || "";
            _this86.value = attributes.value ? getColor(attributes.value) : "";
            _this86.extras = null;
            return _this86;
         }
         _inherits(Color, _XFAObject18);
         return _createClass(Color, [
            {
               key: $hasSettableValue,
               value: function value() {
                  return false;
               },
            },
            {
               key: $toStyle,
               value: function value() {
                  return this.value
                     ? Util.makeHexColor(this.value.r, this.value.g, this.value.b)
                     : null;
               },
            },
         ]);
      })(XFAObject);
      var Comb = /*#__PURE__*/ (function (_XFAObject19) {
         function Comb(attributes) {
            var _this87;
            _classCallCheck(this, Comb);
            _this87 = _callSuper(this, Comb, [TEMPLATE_NS_ID, "comb"]);
            _this87.id = attributes.id || "";
            _this87.numberOfCells = getInteger({
               data: attributes.numberOfCells,
               defaultValue: 0,
               validate: function validate(x) {
                  return x >= 0;
               },
            });
            _this87.use = attributes.use || "";
            _this87.usehref = attributes.usehref || "";
            return _this87;
         }
         _inherits(Comb, _XFAObject19);
         return _createClass(Comb);
      })(XFAObject);
      var Connect = /*#__PURE__*/ (function (_XFAObject20) {
         function Connect(attributes) {
            var _this88;
            _classCallCheck(this, Connect);
            _this88 = _callSuper(this, Connect, [TEMPLATE_NS_ID, "connect", true]);
            _this88.connection = attributes.connection || "";
            _this88.id = attributes.id || "";
            _this88.ref = attributes.ref || "";
            _this88.usage = getStringOption(attributes.usage, [
               "exportAndImport",
               "exportOnly",
               "importOnly",
            ]);
            _this88.use = attributes.use || "";
            _this88.usehref = attributes.usehref || "";
            _this88.picture = null;
            return _this88;
         }
         _inherits(Connect, _XFAObject20);
         return _createClass(Connect);
      })(XFAObject);
      var ContentArea = /*#__PURE__*/ (function (_XFAObject21) {
         function ContentArea(attributes) {
            var _this89;
            _classCallCheck(this, ContentArea);
            _this89 = _callSuper(this, ContentArea, [
               TEMPLATE_NS_ID,
               "contentArea",
               true,
            ]);
            _this89.h = getMeasurement(attributes.h);
            _this89.id = attributes.id || "";
            _this89.name = attributes.name || "";
            _this89.relevant = getRelevant(attributes.relevant);
            _this89.use = attributes.use || "";
            _this89.usehref = attributes.usehref || "";
            _this89.w = getMeasurement(attributes.w);
            _this89.x = getMeasurement(attributes.x, "0pt");
            _this89.y = getMeasurement(attributes.y, "0pt");
            _this89.desc = null;
            _this89.extras = null;
            return _this89;
         }
         _inherits(ContentArea, _XFAObject21);
         return _createClass(ContentArea, [
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  var left = measureToString(this.x);
                  var top = measureToString(this.y);
                  var style = {
                     left: left,
                     top: top,
                     width: measureToString(this.w),
                     height: measureToString(this.h),
                  };
                  var classNames = ["xfaContentarea"];
                  if (isPrintOnly(this)) {
                     classNames.push("xfaPrintOnly");
                  }
                  return HTMLResult.success({
                     name: "div",
                     children: [],
                     attributes: { style: style, class: classNames, id: this[$uid] },
                  });
               },
            },
         ]);
      })(XFAObject);
      var Corner = /*#__PURE__*/ (function (_XFAObject22) {
         function Corner(attributes) {
            var _this90;
            _classCallCheck(this, Corner);
            _this90 = _callSuper(this, Corner, [TEMPLATE_NS_ID, "corner", true]);
            _this90.id = attributes.id || "";
            _this90.inverted = getInteger({
               data: attributes.inverted,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this90.join = getStringOption(attributes.join, ["square", "round"]);
            _this90.presence = getStringOption(attributes.presence, [
               "visible",
               "hidden",
               "inactive",
               "invisible",
            ]);
            _this90.radius = getMeasurement(attributes.radius);
            _this90.stroke = getStringOption(attributes.stroke, [
               "solid",
               "dashDot",
               "dashDotDot",
               "dashed",
               "dotted",
               "embossed",
               "etched",
               "lowered",
               "raised",
            ]);
            _this90.thickness = getMeasurement(attributes.thickness, "0.5pt");
            _this90.use = attributes.use || "";
            _this90.usehref = attributes.usehref || "";
            _this90.color = null;
            _this90.extras = null;
            return _this90;
         }
         _inherits(Corner, _XFAObject22);
         return _createClass(Corner, [
            {
               key: $toStyle,
               value: function value() {
                  var style = toStyle(this, "visibility");
                  style.radius = measureToString(
                     this.join === "square" ? 0 : this.radius,
                  );
                  return style;
               },
            },
         ]);
      })(XFAObject);
      var DateElement = /*#__PURE__*/ (function (_ContentObject4) {
         function DateElement(attributes) {
            var _this91;
            _classCallCheck(this, DateElement);
            _this91 = _callSuper(this, DateElement, [TEMPLATE_NS_ID, "date"]);
            _this91.id = attributes.id || "";
            _this91.name = attributes.name || "";
            _this91.use = attributes.use || "";
            _this91.usehref = attributes.usehref || "";
            return _this91;
         }
         _inherits(DateElement, _ContentObject4);
         return _createClass(DateElement, [
            {
               key: $finalize,
               value: function value() {
                  var date = this[$content].trim();
                  this[$content] = date ? new Date(date) : null;
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  return valueToHtml(this[$content] ? this[$content].toString() : "");
               },
            },
         ]);
      })(ContentObject);
      var DateTime = /*#__PURE__*/ (function (_ContentObject5) {
         function DateTime(attributes) {
            var _this92;
            _classCallCheck(this, DateTime);
            _this92 = _callSuper(this, DateTime, [TEMPLATE_NS_ID, "dateTime"]);
            _this92.id = attributes.id || "";
            _this92.name = attributes.name || "";
            _this92.use = attributes.use || "";
            _this92.usehref = attributes.usehref || "";
            return _this92;
         }
         _inherits(DateTime, _ContentObject5);
         return _createClass(DateTime, [
            {
               key: $finalize,
               value: function value() {
                  var date = this[$content].trim();
                  this[$content] = date ? new Date(date) : null;
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  return valueToHtml(this[$content] ? this[$content].toString() : "");
               },
            },
         ]);
      })(ContentObject);
      var DateTimeEdit = /*#__PURE__*/ (function (_XFAObject23) {
         function DateTimeEdit(attributes) {
            var _this93;
            _classCallCheck(this, DateTimeEdit);
            _this93 = _callSuper(this, DateTimeEdit, [
               TEMPLATE_NS_ID,
               "dateTimeEdit",
               true,
            ]);
            _this93.hScrollPolicy = getStringOption(attributes.hScrollPolicy, [
               "auto",
               "off",
               "on",
            ]);
            _this93.id = attributes.id || "";
            _this93.picker = getStringOption(attributes.picker, ["host", "none"]);
            _this93.use = attributes.use || "";
            _this93.usehref = attributes.usehref || "";
            _this93.border = null;
            _this93.comb = null;
            _this93.extras = null;
            _this93.margin = null;
            return _this93;
         }
         _inherits(DateTimeEdit, _XFAObject23);
         return _createClass(DateTimeEdit, [
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  var _field$$data3;
                  var style = toStyle(this, "border", "font", "margin");
                  var field = this[$getParent]()[$getParent]();
                  var html = {
                     name: "input",
                     attributes: {
                        type: "text",
                        fieldId: field[$uid],
                        dataId:
                           ((_field$$data3 = field[$data]) === null ||
                           _field$$data3 === void 0
                              ? void 0
                              : _field$$data3[$uid]) || field[$uid],
                        class: ["xfaTextfield"],
                        style: style,
                        "aria-label": ariaLabel(field),
                        "aria-required": false,
                     },
                  };
                  if (isRequired(field)) {
                     html.attributes["aria-required"] = true;
                     html.attributes.required = true;
                  }
                  return HTMLResult.success({
                     name: "label",
                     attributes: { class: ["xfaLabel"] },
                     children: [html],
                  });
               },
            },
         ]);
      })(XFAObject);
      var Decimal = /*#__PURE__*/ (function (_ContentObject6) {
         function Decimal(attributes) {
            var _this94;
            _classCallCheck(this, Decimal);
            _this94 = _callSuper(this, Decimal, [TEMPLATE_NS_ID, "decimal"]);
            _this94.fracDigits = getInteger({
               data: attributes.fracDigits,
               defaultValue: 2,
               validate: function validate(x) {
                  return true;
               },
            });
            _this94.id = attributes.id || "";
            _this94.leadDigits = getInteger({
               data: attributes.leadDigits,
               defaultValue: -1,
               validate: function validate(x) {
                  return true;
               },
            });
            _this94.name = attributes.name || "";
            _this94.use = attributes.use || "";
            _this94.usehref = attributes.usehref || "";
            return _this94;
         }
         _inherits(Decimal, _ContentObject6);
         return _createClass(Decimal, [
            {
               key: $finalize,
               value: function value() {
                  var number = parseFloat(this[$content].trim());
                  this[$content] = isNaN(number) ? null : number;
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  return valueToHtml(
                     this[$content] !== null ? this[$content].toString() : "",
                  );
               },
            },
         ]);
      })(ContentObject);
      var DefaultUi = /*#__PURE__*/ (function (_XFAObject24) {
         function DefaultUi(attributes) {
            var _this95;
            _classCallCheck(this, DefaultUi);
            _this95 = _callSuper(this, DefaultUi, [
               TEMPLATE_NS_ID,
               "defaultUi",
               true,
            ]);
            _this95.id = attributes.id || "";
            _this95.use = attributes.use || "";
            _this95.usehref = attributes.usehref || "";
            _this95.extras = null;
            return _this95;
         }
         _inherits(DefaultUi, _XFAObject24);
         return _createClass(DefaultUi);
      })(XFAObject);
      var Desc = /*#__PURE__*/ (function (_XFAObject25) {
         function Desc(attributes) {
            var _this96;
            _classCallCheck(this, Desc);
            _this96 = _callSuper(this, Desc, [TEMPLATE_NS_ID, "desc", true]);
            _this96.id = attributes.id || "";
            _this96.use = attributes.use || "";
            _this96.usehref = attributes.usehref || "";
            _this96["boolean"] = new XFAObjectArray();
            _this96.date = new XFAObjectArray();
            _this96.dateTime = new XFAObjectArray();
            _this96.decimal = new XFAObjectArray();
            _this96.exData = new XFAObjectArray();
            _this96["float"] = new XFAObjectArray();
            _this96.image = new XFAObjectArray();
            _this96.integer = new XFAObjectArray();
            _this96.text = new XFAObjectArray();
            _this96.time = new XFAObjectArray();
            return _this96;
         }
         _inherits(Desc, _XFAObject25);
         return _createClass(Desc);
      })(XFAObject);
      var DigestMethod = /*#__PURE__*/ (function (_OptionObject) {
         function DigestMethod(attributes) {
            var _this97;
            _classCallCheck(this, DigestMethod);
            _this97 = _callSuper(this, DigestMethod, [
               TEMPLATE_NS_ID,
               "digestMethod",
               ["", "SHA1", "SHA256", "SHA512", "RIPEMD160"],
            ]);
            _this97.id = attributes.id || "";
            _this97.use = attributes.use || "";
            _this97.usehref = attributes.usehref || "";
            return _this97;
         }
         _inherits(DigestMethod, _OptionObject);
         return _createClass(DigestMethod);
      })(OptionObject);
      var DigestMethods = /*#__PURE__*/ (function (_XFAObject26) {
         function DigestMethods(attributes) {
            var _this98;
            _classCallCheck(this, DigestMethods);
            _this98 = _callSuper(this, DigestMethods, [
               TEMPLATE_NS_ID,
               "digestMethods",
               true,
            ]);
            _this98.id = attributes.id || "";
            _this98.type = getStringOption(attributes.type, [
               "optional",
               "required",
            ]);
            _this98.use = attributes.use || "";
            _this98.usehref = attributes.usehref || "";
            _this98.digestMethod = new XFAObjectArray();
            return _this98;
         }
         _inherits(DigestMethods, _XFAObject26);
         return _createClass(DigestMethods);
      })(XFAObject);
      var Draw = /*#__PURE__*/ (function (_XFAObject27) {
         function Draw(attributes) {
            var _this99;
            _classCallCheck(this, Draw);
            _this99 = _callSuper(this, Draw, [TEMPLATE_NS_ID, "draw", true]);
            _this99.anchorType = getStringOption(attributes.anchorType, [
               "topLeft",
               "bottomCenter",
               "bottomLeft",
               "bottomRight",
               "middleCenter",
               "middleLeft",
               "middleRight",
               "topCenter",
               "topRight",
            ]);
            _this99.colSpan = getInteger({
               data: attributes.colSpan,
               defaultValue: 1,
               validate: function validate(n) {
                  return n >= 1 || n === -1;
               },
            });
            _this99.h = attributes.h ? getMeasurement(attributes.h) : "";
            _this99.hAlign = getStringOption(attributes.hAlign, [
               "left",
               "center",
               "justify",
               "justifyAll",
               "radix",
               "right",
            ]);
            _this99.id = attributes.id || "";
            _this99.locale = attributes.locale || "";
            _this99.maxH = getMeasurement(attributes.maxH, "0pt");
            _this99.maxW = getMeasurement(attributes.maxW, "0pt");
            _this99.minH = getMeasurement(attributes.minH, "0pt");
            _this99.minW = getMeasurement(attributes.minW, "0pt");
            _this99.name = attributes.name || "";
            _this99.presence = getStringOption(attributes.presence, [
               "visible",
               "hidden",
               "inactive",
               "invisible",
            ]);
            _this99.relevant = getRelevant(attributes.relevant);
            _this99.rotate = getInteger({
               data: attributes.rotate,
               defaultValue: 0,
               validate: function validate(x) {
                  return x % 90 === 0;
               },
            });
            _this99.use = attributes.use || "";
            _this99.usehref = attributes.usehref || "";
            _this99.w = attributes.w ? getMeasurement(attributes.w) : "";
            _this99.x = getMeasurement(attributes.x, "0pt");
            _this99.y = getMeasurement(attributes.y, "0pt");
            _this99.assist = null;
            _this99.border = null;
            _this99.caption = null;
            _this99.desc = null;
            _this99.extras = null;
            _this99.font = null;
            _this99.keep = null;
            _this99.margin = null;
            _this99.para = null;
            _this99.traversal = null;
            _this99.ui = null;
            _this99.value = null;
            _this99.setProperty = new XFAObjectArray();
            return _this99;
         }
         _inherits(Draw, _XFAObject27);
         return _createClass(Draw, [
            {
               key: $setValue,
               value: function value(_value6) {
                  _setValue(this, _value6);
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  setTabIndex(this);
                  if (this.presence === "hidden" || this.presence === "inactive") {
                     return HTMLResult.EMPTY;
                  }
                  fixDimensions(this);
                  this[$pushPara]();
                  var savedW = this.w;
                  var savedH = this.h;
                  var _layoutNode = layoutNode(this, availableSpace),
                     w = _layoutNode.w,
                     h = _layoutNode.h,
                     isBroken = _layoutNode.isBroken;
                  if (w && this.w === "") {
                     if (isBroken && this[$getSubformParent]()[$isThereMoreWidth]()) {
                        this[$popPara]();
                        return HTMLResult.FAILURE;
                     }
                     this.w = w;
                  }
                  if (h && this.h === "") {
                     this.h = h;
                  }
                  setFirstUnsplittable(this);
                  if (!checkDimensions(this, availableSpace)) {
                     this.w = savedW;
                     this.h = savedH;
                     this[$popPara]();
                     return HTMLResult.FAILURE;
                  }
                  unsetFirstUnsplittable(this);
                  var style = toStyle(
                     this,
                     "font",
                     "hAlign",
                     "dimensions",
                     "position",
                     "presence",
                     "rotate",
                     "anchorType",
                     "border",
                     "margin",
                  );
                  setMinMaxDimensions(this, style);
                  if (style.margin) {
                     style.padding = style.margin;
                     delete style.margin;
                  }
                  var classNames = ["xfaDraw"];
                  if (this.font) {
                     classNames.push("xfaFont");
                  }
                  if (isPrintOnly(this)) {
                     classNames.push("xfaPrintOnly");
                  }
                  var attributes = {
                     style: style,
                     id: this[$uid],
                     class: classNames,
                  };
                  if (this.name) {
                     attributes.xfaName = this.name;
                  }
                  var html = { name: "div", attributes: attributes, children: [] };
                  applyAssist(this, attributes);
                  var bbox = computeBbox(this, html, availableSpace);
                  var value = this.value
                     ? this.value[$toHTML](availableSpace).html
                     : null;
                  if (value === null) {
                     this.w = savedW;
                     this.h = savedH;
                     this[$popPara]();
                     return HTMLResult.success(createWrapper(this, html), bbox);
                  }
                  html.children.push(value);
                  setPara(this, style, value);
                  this.w = savedW;
                  this.h = savedH;
                  this[$popPara]();
                  return HTMLResult.success(createWrapper(this, html), bbox);
               },
            },
         ]);
      })(XFAObject);
      var Edge = /*#__PURE__*/ (function (_XFAObject28) {
         function Edge(attributes) {
            var _this100;
            _classCallCheck(this, Edge);
            _this100 = _callSuper(this, Edge, [TEMPLATE_NS_ID, "edge", true]);
            _this100.cap = getStringOption(attributes.cap, [
               "square",
               "butt",
               "round",
            ]);
            _this100.id = attributes.id || "";
            _this100.presence = getStringOption(attributes.presence, [
               "visible",
               "hidden",
               "inactive",
               "invisible",
            ]);
            _this100.stroke = getStringOption(attributes.stroke, [
               "solid",
               "dashDot",
               "dashDotDot",
               "dashed",
               "dotted",
               "embossed",
               "etched",
               "lowered",
               "raised",
            ]);
            _this100.thickness = getMeasurement(attributes.thickness, "0.5pt");
            _this100.use = attributes.use || "";
            _this100.usehref = attributes.usehref || "";
            _this100.color = null;
            _this100.extras = null;
            return _this100;
         }
         _inherits(Edge, _XFAObject28);
         return _createClass(Edge, [
            {
               key: $toStyle,
               value: function value() {
                  var style = toStyle(this, "visibility");
                  Object.assign(style, {
                     linecap: this.cap,
                     width: measureToString(this.thickness),
                     color: this.color ? this.color[$toStyle]() : "#000000",
                     style: "",
                  });
                  if (this.presence !== "visible") {
                     style.style = "none";
                  } else {
                     switch (this.stroke) {
                        case "solid":
                           style.style = "solid";
                           break;
                        case "dashDot":
                           style.style = "dashed";
                           break;
                        case "dashDotDot":
                           style.style = "dashed";
                           break;
                        case "dashed":
                           style.style = "dashed";
                           break;
                        case "dotted":
                           style.style = "dotted";
                           break;
                        case "embossed":
                           style.style = "ridge";
                           break;
                        case "etched":
                           style.style = "groove";
                           break;
                        case "lowered":
                           style.style = "inset";
                           break;
                        case "raised":
                           style.style = "outset";
                           break;
                     }
                  }
                  return style;
               },
            },
         ]);
      })(XFAObject);
      var Encoding = /*#__PURE__*/ (function (_OptionObject2) {
         function Encoding(attributes) {
            var _this101;
            _classCallCheck(this, Encoding);
            _this101 = _callSuper(this, Encoding, [
               TEMPLATE_NS_ID,
               "encoding",
               ["adbe.x509.rsa_sha1", "adbe.pkcs7.detached", "adbe.pkcs7.sha1"],
            ]);
            _this101.id = attributes.id || "";
            _this101.use = attributes.use || "";
            _this101.usehref = attributes.usehref || "";
            return _this101;
         }
         _inherits(Encoding, _OptionObject2);
         return _createClass(Encoding);
      })(OptionObject);
      var Encodings = /*#__PURE__*/ (function (_XFAObject29) {
         function Encodings(attributes) {
            var _this102;
            _classCallCheck(this, Encodings);
            _this102 = _callSuper(this, Encodings, [
               TEMPLATE_NS_ID,
               "encodings",
               true,
            ]);
            _this102.id = attributes.id || "";
            _this102.type = getStringOption(attributes.type, [
               "optional",
               "required",
            ]);
            _this102.use = attributes.use || "";
            _this102.usehref = attributes.usehref || "";
            _this102.encoding = new XFAObjectArray();
            return _this102;
         }
         _inherits(Encodings, _XFAObject29);
         return _createClass(Encodings);
      })(XFAObject);
      var Encrypt = /*#__PURE__*/ (function (_XFAObject30) {
         function Encrypt(attributes) {
            var _this103;
            _classCallCheck(this, Encrypt);
            _this103 = _callSuper(this, Encrypt, [TEMPLATE_NS_ID, "encrypt", true]);
            _this103.id = attributes.id || "";
            _this103.use = attributes.use || "";
            _this103.usehref = attributes.usehref || "";
            _this103.certificate = null;
            return _this103;
         }
         _inherits(Encrypt, _XFAObject30);
         return _createClass(Encrypt);
      })(XFAObject);
      var EncryptData = /*#__PURE__*/ (function (_XFAObject31) {
         function EncryptData(attributes) {
            var _this104;
            _classCallCheck(this, EncryptData);
            _this104 = _callSuper(this, EncryptData, [
               TEMPLATE_NS_ID,
               "encryptData",
               true,
            ]);
            _this104.id = attributes.id || "";
            _this104.operation = getStringOption(attributes.operation, [
               "encrypt",
               "decrypt",
            ]);
            _this104.target = attributes.target || "";
            _this104.use = attributes.use || "";
            _this104.usehref = attributes.usehref || "";
            _this104.filter = null;
            _this104.manifest = null;
            return _this104;
         }
         _inherits(EncryptData, _XFAObject31);
         return _createClass(EncryptData);
      })(XFAObject);
      var Encryption = /*#__PURE__*/ (function (_XFAObject32) {
         function Encryption(attributes) {
            var _this105;
            _classCallCheck(this, Encryption);
            _this105 = _callSuper(this, Encryption, [
               TEMPLATE_NS_ID,
               "encryption",
               true,
            ]);
            _this105.id = attributes.id || "";
            _this105.type = getStringOption(attributes.type, [
               "optional",
               "required",
            ]);
            _this105.use = attributes.use || "";
            _this105.usehref = attributes.usehref || "";
            _this105.certificate = new XFAObjectArray();
            return _this105;
         }
         _inherits(Encryption, _XFAObject32);
         return _createClass(Encryption);
      })(XFAObject);
      var EncryptionMethod = /*#__PURE__*/ (function (_OptionObject3) {
         function EncryptionMethod(attributes) {
            var _this106;
            _classCallCheck(this, EncryptionMethod);
            _this106 = _callSuper(this, EncryptionMethod, [
               TEMPLATE_NS_ID,
               "encryptionMethod",
               ["", "AES256-CBC", "TRIPLEDES-CBC", "AES128-CBC", "AES192-CBC"],
            ]);
            _this106.id = attributes.id || "";
            _this106.use = attributes.use || "";
            _this106.usehref = attributes.usehref || "";
            return _this106;
         }
         _inherits(EncryptionMethod, _OptionObject3);
         return _createClass(EncryptionMethod);
      })(OptionObject);
      var EncryptionMethods = /*#__PURE__*/ (function (_XFAObject33) {
         function EncryptionMethods(attributes) {
            var _this107;
            _classCallCheck(this, EncryptionMethods);
            _this107 = _callSuper(this, EncryptionMethods, [
               TEMPLATE_NS_ID,
               "encryptionMethods",
               true,
            ]);
            _this107.id = attributes.id || "";
            _this107.type = getStringOption(attributes.type, [
               "optional",
               "required",
            ]);
            _this107.use = attributes.use || "";
            _this107.usehref = attributes.usehref || "";
            _this107.encryptionMethod = new XFAObjectArray();
            return _this107;
         }
         _inherits(EncryptionMethods, _XFAObject33);
         return _createClass(EncryptionMethods);
      })(XFAObject);
      var Event = /*#__PURE__*/ (function (_XFAObject34) {
         function Event(attributes) {
            var _this108;
            _classCallCheck(this, Event);
            _this108 = _callSuper(this, Event, [TEMPLATE_NS_ID, "event", true]);
            _this108.activity = getStringOption(attributes.activity, [
               "click",
               "change",
               "docClose",
               "docReady",
               "enter",
               "exit",
               "full",
               "indexChange",
               "initialize",
               "mouseDown",
               "mouseEnter",
               "mouseExit",
               "mouseUp",
               "postExecute",
               "postOpen",
               "postPrint",
               "postSave",
               "postSign",
               "postSubmit",
               "preExecute",
               "preOpen",
               "prePrint",
               "preSave",
               "preSign",
               "preSubmit",
               "ready",
               "validationState",
            ]);
            _this108.id = attributes.id || "";
            _this108.listen = getStringOption(attributes.listen, [
               "refOnly",
               "refAndDescendents",
            ]);
            _this108.name = attributes.name || "";
            _this108.ref = attributes.ref || "";
            _this108.use = attributes.use || "";
            _this108.usehref = attributes.usehref || "";
            _this108.extras = null;
            _this108.encryptData = null;
            _this108.execute = null;
            _this108.script = null;
            _this108.signData = null;
            _this108.submit = null;
            return _this108;
         }
         _inherits(Event, _XFAObject34);
         return _createClass(Event);
      })(XFAObject);
      var ExData = /*#__PURE__*/ (function (_ContentObject7) {
         function ExData(attributes) {
            var _this109;
            _classCallCheck(this, ExData);
            _this109 = _callSuper(this, ExData, [TEMPLATE_NS_ID, "exData"]);
            _this109.contentType = attributes.contentType || "";
            _this109.href = attributes.href || "";
            _this109.id = attributes.id || "";
            _this109.maxLength = getInteger({
               data: attributes.maxLength,
               defaultValue: -1,
               validate: function validate(x) {
                  return x >= -1;
               },
            });
            _this109.name = attributes.name || "";
            _this109.rid = attributes.rid || "";
            _this109.transferEncoding = getStringOption(
               attributes.transferEncoding,
               ["none", "base64", "package"],
            );
            _this109.use = attributes.use || "";
            _this109.usehref = attributes.usehref || "";
            return _this109;
         }
         _inherits(ExData, _ContentObject7);
         return _createClass(ExData, [
            {
               key: $isCDATAXml,
               value: function value() {
                  return this.contentType === "text/html";
               },
            },
            {
               key: $onChild,
               value: function value(child) {
                  if (
                     this.contentType === "text/html" &&
                     child[$namespaceId] === NamespaceIds.xhtml.id
                  ) {
                     this[$content] = child;
                     return true;
                  }
                  if (this.contentType === "text/xml") {
                     this[$content] = child;
                     return true;
                  }
                  return false;
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  if (this.contentType !== "text/html" || !this[$content]) {
                     return HTMLResult.EMPTY;
                  }
                  return this[$content][$toHTML](availableSpace);
               },
            },
         ]);
      })(ContentObject);
      var ExObject = /*#__PURE__*/ (function (_XFAObject35) {
         function ExObject(attributes) {
            var _this110;
            _classCallCheck(this, ExObject);
            _this110 = _callSuper(this, ExObject, [
               TEMPLATE_NS_ID,
               "exObject",
               true,
            ]);
            _this110.archive = attributes.archive || "";
            _this110.classId = attributes.classId || "";
            _this110.codeBase = attributes.codeBase || "";
            _this110.codeType = attributes.codeType || "";
            _this110.id = attributes.id || "";
            _this110.name = attributes.name || "";
            _this110.use = attributes.use || "";
            _this110.usehref = attributes.usehref || "";
            _this110.extras = null;
            _this110["boolean"] = new XFAObjectArray();
            _this110.date = new XFAObjectArray();
            _this110.dateTime = new XFAObjectArray();
            _this110.decimal = new XFAObjectArray();
            _this110.exData = new XFAObjectArray();
            _this110.exObject = new XFAObjectArray();
            _this110["float"] = new XFAObjectArray();
            _this110.image = new XFAObjectArray();
            _this110.integer = new XFAObjectArray();
            _this110.text = new XFAObjectArray();
            _this110.time = new XFAObjectArray();
            return _this110;
         }
         _inherits(ExObject, _XFAObject35);
         return _createClass(ExObject);
      })(XFAObject);
      var ExclGroup = /*#__PURE__*/ (function (_XFAObject36) {
         function ExclGroup(attributes) {
            var _this111;
            _classCallCheck(this, ExclGroup);
            _this111 = _callSuper(this, ExclGroup, [
               TEMPLATE_NS_ID,
               "exclGroup",
               true,
            ]);
            _this111.access = getStringOption(attributes.access, [
               "open",
               "nonInteractive",
               "protected",
               "readOnly",
            ]);
            _this111.accessKey = attributes.accessKey || "";
            _this111.anchorType = getStringOption(attributes.anchorType, [
               "topLeft",
               "bottomCenter",
               "bottomLeft",
               "bottomRight",
               "middleCenter",
               "middleLeft",
               "middleRight",
               "topCenter",
               "topRight",
            ]);
            _this111.colSpan = getInteger({
               data: attributes.colSpan,
               defaultValue: 1,
               validate: function validate(n) {
                  return n >= 1 || n === -1;
               },
            });
            _this111.h = attributes.h ? getMeasurement(attributes.h) : "";
            _this111.hAlign = getStringOption(attributes.hAlign, [
               "left",
               "center",
               "justify",
               "justifyAll",
               "radix",
               "right",
            ]);
            _this111.id = attributes.id || "";
            _this111.layout = getStringOption(attributes.layout, [
               "position",
               "lr-tb",
               "rl-row",
               "rl-tb",
               "row",
               "table",
               "tb",
            ]);
            _this111.maxH = getMeasurement(attributes.maxH, "0pt");
            _this111.maxW = getMeasurement(attributes.maxW, "0pt");
            _this111.minH = getMeasurement(attributes.minH, "0pt");
            _this111.minW = getMeasurement(attributes.minW, "0pt");
            _this111.name = attributes.name || "";
            _this111.presence = getStringOption(attributes.presence, [
               "visible",
               "hidden",
               "inactive",
               "invisible",
            ]);
            _this111.relevant = getRelevant(attributes.relevant);
            _this111.use = attributes.use || "";
            _this111.usehref = attributes.usehref || "";
            _this111.w = attributes.w ? getMeasurement(attributes.w) : "";
            _this111.x = getMeasurement(attributes.x, "0pt");
            _this111.y = getMeasurement(attributes.y, "0pt");
            _this111.assist = null;
            _this111.bind = null;
            _this111.border = null;
            _this111.calculate = null;
            _this111.caption = null;
            _this111.desc = null;
            _this111.extras = null;
            _this111.margin = null;
            _this111.para = null;
            _this111.traversal = null;
            _this111.validate = null;
            _this111.connect = new XFAObjectArray();
            _this111.event = new XFAObjectArray();
            _this111.field = new XFAObjectArray();
            _this111.setProperty = new XFAObjectArray();
            return _this111;
         }
         _inherits(ExclGroup, _XFAObject36);
         return _createClass(ExclGroup, [
            {
               key: $isBindable,
               value: function value() {
                  return true;
               },
            },
            {
               key: $hasSettableValue,
               value: function value() {
                  return true;
               },
            },
            {
               key: $setValue,
               value: function value(_value7) {
                  var _iterator163 = _createForOfIteratorHelper(this.field.children),
                     _step163;
                  try {
                     for (_iterator163.s(); !(_step163 = _iterator163.n()).done; ) {
                        var field = _step163.value;
                        if (!field.value) {
                           var nodeValue = new Value({});
                           field[$appendChild](nodeValue);
                           field.value = nodeValue;
                        }
                        field.value[$setValue](_value7);
                     }
                  } catch (err) {
                     _iterator163.e(err);
                  } finally {
                     _iterator163.f();
                  }
               },
            },
            {
               key: $isThereMoreWidth,
               value: function value() {
                  return (
                     (this.layout.endsWith("-tb") &&
                        this[$extra].attempt === 0 &&
                        this[$extra].numberInLine > 0) ||
                     this[$getParent]()[$isThereMoreWidth]()
                  );
               },
            },
            {
               key: $isSplittable,
               value: function value() {
                  var _parent$layout3;
                  var parent = this[$getSubformParent]();
                  if (!parent[$isSplittable]()) {
                     return false;
                  }
                  if (this[$extra]._isSplittable !== undefined) {
                     return this[$extra]._isSplittable;
                  }
                  if (this.layout === "position" || this.layout.includes("row")) {
                     this[$extra]._isSplittable = false;
                     return false;
                  }
                  if (
                     (_parent$layout3 = parent.layout) !== null &&
                     _parent$layout3 !== void 0 &&
                     _parent$layout3.endsWith("-tb") &&
                     parent[$extra].numberInLine !== 0
                  ) {
                     return false;
                  }
                  this[$extra]._isSplittable = true;
                  return true;
               },
            },
            {
               key: $flushHTML,
               value: function value() {
                  return flushHTML(this);
               },
            },
            {
               key: $addHTML,
               value: function value(html, bbox) {
                  addHTML(this, html, bbox);
               },
            },
            {
               key: $getAvailableSpace,
               value: function value() {
                  return getAvailableSpace(this);
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  setTabIndex(this);
                  if (
                     this.presence === "hidden" ||
                     this.presence === "inactive" ||
                     this.h === 0 ||
                     this.w === 0
                  ) {
                     return HTMLResult.EMPTY;
                  }
                  fixDimensions(this);
                  var children = [];
                  var attributes = { id: this[$uid], class: [] };
                  setAccess(this, attributes["class"]);
                  if (!this[$extra]) {
                     this[$extra] = Object.create(null);
                  }
                  Object.assign(this[$extra], {
                     children: children,
                     attributes: attributes,
                     attempt: 0,
                     line: null,
                     numberInLine: 0,
                     availableSpace: {
                        width: Math.min(this.w || Infinity, availableSpace.width),
                        height: Math.min(this.h || Infinity, availableSpace.height),
                     },
                     width: 0,
                     height: 0,
                     prevHeight: 0,
                     currentWidth: 0,
                  });
                  var isSplittable = this[$isSplittable]();
                  if (!isSplittable) {
                     setFirstUnsplittable(this);
                  }
                  if (!checkDimensions(this, availableSpace)) {
                     return HTMLResult.FAILURE;
                  }
                  var filter = new Set(["field"]);
                  if (this.layout.includes("row")) {
                     var columnWidths = this[$getSubformParent]().columnWidths;
                     if (Array.isArray(columnWidths) && columnWidths.length > 0) {
                        this[$extra].columnWidths = columnWidths;
                        this[$extra].currentColumn = 0;
                     }
                  }
                  var style = toStyle(
                     this,
                     "anchorType",
                     "dimensions",
                     "position",
                     "presence",
                     "border",
                     "margin",
                     "hAlign",
                  );
                  var classNames = ["xfaExclgroup"];
                  var cl = layoutClass(this);
                  if (cl) {
                     classNames.push(cl);
                  }
                  if (isPrintOnly(this)) {
                     classNames.push("xfaPrintOnly");
                  }
                  attributes.style = style;
                  attributes["class"] = classNames;
                  if (this.name) {
                     attributes.xfaName = this.name;
                  }
                  this[$pushPara]();
                  var isLrTb = this.layout === "lr-tb" || this.layout === "rl-tb";
                  var maxRun = isLrTb ? MAX_ATTEMPTS_FOR_LRTB_LAYOUT : 1;
                  for (; this[$extra].attempt < maxRun; this[$extra].attempt++) {
                     if (
                        isLrTb &&
                        this[$extra].attempt === MAX_ATTEMPTS_FOR_LRTB_LAYOUT - 1
                     ) {
                        this[$extra].numberInLine = 0;
                     }
                     var result = this[$childrenToHTML]({
                        filter: filter,
                        include: true,
                     });
                     if (result.success) {
                        break;
                     }
                     if (result.isBreak()) {
                        this[$popPara]();
                        return result;
                     }
                     if (
                        isLrTb &&
                        this[$extra].attempt === 0 &&
                        this[$extra].numberInLine === 0 &&
                        !this[$getTemplateRoot]()[$extra].noLayoutFailure
                     ) {
                        this[$extra].attempt = maxRun;
                        break;
                     }
                  }
                  this[$popPara]();
                  if (!isSplittable) {
                     unsetFirstUnsplittable(this);
                  }
                  if (this[$extra].attempt === maxRun) {
                     if (!isSplittable) {
                        delete this[$extra];
                     }
                     return HTMLResult.FAILURE;
                  }
                  var marginH = 0;
                  var marginV = 0;
                  if (this.margin) {
                     marginH = this.margin.leftInset + this.margin.rightInset;
                     marginV = this.margin.topInset + this.margin.bottomInset;
                  }
                  var width = Math.max(this[$extra].width + marginH, this.w || 0);
                  var height = Math.max(this[$extra].height + marginV, this.h || 0);
                  var bbox = [this.x, this.y, width, height];
                  if (this.w === "") {
                     style.width = measureToString(width);
                  }
                  if (this.h === "") {
                     style.height = measureToString(height);
                  }
                  var html = {
                     name: "div",
                     attributes: attributes,
                     children: children,
                  };
                  applyAssist(this, attributes);
                  delete this[$extra];
                  return HTMLResult.success(createWrapper(this, html), bbox);
               },
            },
         ]);
      })(XFAObject);
      var Execute = /*#__PURE__*/ (function (_XFAObject37) {
         function Execute(attributes) {
            var _this112;
            _classCallCheck(this, Execute);
            _this112 = _callSuper(this, Execute, [TEMPLATE_NS_ID, "execute"]);
            _this112.connection = attributes.connection || "";
            _this112.executeType = getStringOption(attributes.executeType, [
               "import",
               "remerge",
            ]);
            _this112.id = attributes.id || "";
            _this112.runAt = getStringOption(attributes.runAt, [
               "client",
               "both",
               "server",
            ]);
            _this112.use = attributes.use || "";
            _this112.usehref = attributes.usehref || "";
            return _this112;
         }
         _inherits(Execute, _XFAObject37);
         return _createClass(Execute);
      })(XFAObject);
      var Extras = /*#__PURE__*/ (function (_XFAObject38) {
         function Extras(attributes) {
            var _this113;
            _classCallCheck(this, Extras);
            _this113 = _callSuper(this, Extras, [TEMPLATE_NS_ID, "extras", true]);
            _this113.id = attributes.id || "";
            _this113.name = attributes.name || "";
            _this113.use = attributes.use || "";
            _this113.usehref = attributes.usehref || "";
            _this113["boolean"] = new XFAObjectArray();
            _this113.date = new XFAObjectArray();
            _this113.dateTime = new XFAObjectArray();
            _this113.decimal = new XFAObjectArray();
            _this113.exData = new XFAObjectArray();
            _this113.extras = new XFAObjectArray();
            _this113["float"] = new XFAObjectArray();
            _this113.image = new XFAObjectArray();
            _this113.integer = new XFAObjectArray();
            _this113.text = new XFAObjectArray();
            _this113.time = new XFAObjectArray();
            return _this113;
         }
         _inherits(Extras, _XFAObject38);
         return _createClass(Extras);
      })(XFAObject);
      var Field = /*#__PURE__*/ (function (_XFAObject39) {
         function Field(attributes) {
            var _this114;
            _classCallCheck(this, Field);
            _this114 = _callSuper(this, Field, [TEMPLATE_NS_ID, "field", true]);
            _this114.access = getStringOption(attributes.access, [
               "open",
               "nonInteractive",
               "protected",
               "readOnly",
            ]);
            _this114.accessKey = attributes.accessKey || "";
            _this114.anchorType = getStringOption(attributes.anchorType, [
               "topLeft",
               "bottomCenter",
               "bottomLeft",
               "bottomRight",
               "middleCenter",
               "middleLeft",
               "middleRight",
               "topCenter",
               "topRight",
            ]);
            _this114.colSpan = getInteger({
               data: attributes.colSpan,
               defaultValue: 1,
               validate: function validate(n) {
                  return n >= 1 || n === -1;
               },
            });
            _this114.h = attributes.h ? getMeasurement(attributes.h) : "";
            _this114.hAlign = getStringOption(attributes.hAlign, [
               "left",
               "center",
               "justify",
               "justifyAll",
               "radix",
               "right",
            ]);
            _this114.id = attributes.id || "";
            _this114.locale = attributes.locale || "";
            _this114.maxH = getMeasurement(attributes.maxH, "0pt");
            _this114.maxW = getMeasurement(attributes.maxW, "0pt");
            _this114.minH = getMeasurement(attributes.minH, "0pt");
            _this114.minW = getMeasurement(attributes.minW, "0pt");
            _this114.name = attributes.name || "";
            _this114.presence = getStringOption(attributes.presence, [
               "visible",
               "hidden",
               "inactive",
               "invisible",
            ]);
            _this114.relevant = getRelevant(attributes.relevant);
            _this114.rotate = getInteger({
               data: attributes.rotate,
               defaultValue: 0,
               validate: function validate(x) {
                  return x % 90 === 0;
               },
            });
            _this114.use = attributes.use || "";
            _this114.usehref = attributes.usehref || "";
            _this114.w = attributes.w ? getMeasurement(attributes.w) : "";
            _this114.x = getMeasurement(attributes.x, "0pt");
            _this114.y = getMeasurement(attributes.y, "0pt");
            _this114.assist = null;
            _this114.bind = null;
            _this114.border = null;
            _this114.calculate = null;
            _this114.caption = null;
            _this114.desc = null;
            _this114.extras = null;
            _this114.font = null;
            _this114.format = null;
            _this114.items = new XFAObjectArray(2);
            _this114.keep = null;
            _this114.margin = null;
            _this114.para = null;
            _this114.traversal = null;
            _this114.ui = null;
            _this114.validate = null;
            _this114.value = null;
            _this114.bindItems = new XFAObjectArray();
            _this114.connect = new XFAObjectArray();
            _this114.event = new XFAObjectArray();
            _this114.setProperty = new XFAObjectArray();
            return _this114;
         }
         _inherits(Field, _XFAObject39);
         return _createClass(Field, [
            {
               key: $isBindable,
               value: function value() {
                  return true;
               },
            },
            {
               key: $setValue,
               value: function value(_value8) {
                  _setValue(this, _value8);
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  var _ui$children2;
                  setTabIndex(this);
                  if (!this.ui) {
                     this.ui = new Ui({});
                     this.ui[$globalData] = this[$globalData];
                     this[$appendChild](this.ui);
                     var node;
                     switch (this.items.children.length) {
                        case 0:
                           node = new TextEdit({});
                           this.ui.textEdit = node;
                           break;
                        case 1:
                           node = new CheckButton({});
                           this.ui.checkButton = node;
                           break;
                        case 2:
                           node = new ChoiceList({});
                           this.ui.choiceList = node;
                           break;
                     }
                     this.ui[$appendChild](node);
                  }
                  if (
                     !this.ui ||
                     this.presence === "hidden" ||
                     this.presence === "inactive" ||
                     this.h === 0 ||
                     this.w === 0
                  ) {
                     return HTMLResult.EMPTY;
                  }
                  if (this.caption) {
                     delete this.caption[$extra];
                  }
                  this[$pushPara]();
                  var caption = this.caption
                     ? this.caption[$toHTML](availableSpace).html
                     : null;
                  var savedW = this.w;
                  var savedH = this.h;
                  var marginH = 0;
                  var marginV = 0;
                  if (this.margin) {
                     marginH = this.margin.leftInset + this.margin.rightInset;
                     marginV = this.margin.topInset + this.margin.bottomInset;
                  }
                  var borderDims = null;
                  if (this.w === "" || this.h === "") {
                     var width = null;
                     var height = null;
                     var uiW = 0;
                     var uiH = 0;
                     if (this.ui.checkButton) {
                        uiW = uiH = this.ui.checkButton.size;
                     } else {
                        var _layoutNode2 = layoutNode(this, availableSpace),
                           w = _layoutNode2.w,
                           h = _layoutNode2.h;
                        if (w !== null) {
                           uiW = w;
                           uiH = h;
                        } else {
                           uiH = fonts_getMetrics(this.font, true).lineNoGap;
                        }
                     }
                     borderDims = getBorderDims(this.ui[$getExtra]());
                     uiW += borderDims.w;
                     uiH += borderDims.h;
                     if (this.caption) {
                        var _this$caption$$getExt =
                              this.caption[$getExtra](availableSpace),
                           _w = _this$caption$$getExt.w,
                           _h = _this$caption$$getExt.h,
                           isBroken = _this$caption$$getExt.isBroken;
                        if (
                           isBroken &&
                           this[$getSubformParent]()[$isThereMoreWidth]()
                        ) {
                           this[$popPara]();
                           return HTMLResult.FAILURE;
                        }
                        width = _w;
                        height = _h;
                        switch (this.caption.placement) {
                           case "left":
                           case "right":
                           case "inline":
                              width += uiW;
                              break;
                           case "top":
                           case "bottom":
                              height += uiH;
                              break;
                        }
                     } else {
                        width = uiW;
                        height = uiH;
                     }
                     if (width && this.w === "") {
                        width += marginH;
                        this.w = Math.min(
                           this.maxW <= 0 ? Infinity : this.maxW,
                           this.minW + 1 < width ? width : this.minW,
                        );
                     }
                     if (height && this.h === "") {
                        height += marginV;
                        this.h = Math.min(
                           this.maxH <= 0 ? Infinity : this.maxH,
                           this.minH + 1 < height ? height : this.minH,
                        );
                     }
                  }
                  this[$popPara]();
                  fixDimensions(this);
                  setFirstUnsplittable(this);
                  if (!checkDimensions(this, availableSpace)) {
                     this.w = savedW;
                     this.h = savedH;
                     this[$popPara]();
                     return HTMLResult.FAILURE;
                  }
                  unsetFirstUnsplittable(this);
                  var style = toStyle(
                     this,
                     "font",
                     "dimensions",
                     "position",
                     "rotate",
                     "anchorType",
                     "presence",
                     "margin",
                     "hAlign",
                  );
                  setMinMaxDimensions(this, style);
                  var classNames = ["xfaField"];
                  if (this.font) {
                     classNames.push("xfaFont");
                  }
                  if (isPrintOnly(this)) {
                     classNames.push("xfaPrintOnly");
                  }
                  var attributes = {
                     style: style,
                     id: this[$uid],
                     class: classNames,
                  };
                  if (style.margin) {
                     style.padding = style.margin;
                     delete style.margin;
                  }
                  setAccess(this, classNames);
                  if (this.name) {
                     attributes.xfaName = this.name;
                  }
                  var children = [];
                  var html = {
                     name: "div",
                     attributes: attributes,
                     children: children,
                  };
                  applyAssist(this, attributes);
                  var borderStyle = this.border ? this.border[$toStyle]() : null;
                  var bbox = computeBbox(this, html, availableSpace);
                  var ui = this.ui[$toHTML]().html;
                  if (!ui) {
                     Object.assign(style, borderStyle);
                     return HTMLResult.success(createWrapper(this, html), bbox);
                  }
                  if (this[$tabIndex]) {
                     var _ui$children;
                     if (
                        (_ui$children = ui.children) !== null &&
                        _ui$children !== void 0 &&
                        _ui$children[0]
                     ) {
                        ui.children[0].attributes.tabindex = this[$tabIndex];
                     } else {
                        ui.attributes.tabindex = this[$tabIndex];
                     }
                  }
                  if (!ui.attributes.style) {
                     ui.attributes.style = Object.create(null);
                  }
                  var aElement = null;
                  if (this.ui.button) {
                     if (ui.children.length === 1) {
                        var _ui$children$splice = ui.children.splice(0, 1);
                        var _ui$children$splice2 = _slicedToArray(
                           _ui$children$splice,
                           1,
                        );
                        aElement = _ui$children$splice2[0];
                     }
                     Object.assign(ui.attributes.style, borderStyle);
                  } else {
                     Object.assign(style, borderStyle);
                  }
                  children.push(ui);
                  if (this.value) {
                     if (this.ui.imageEdit) {
                        ui.children.push(this.value[$toHTML]().html);
                     } else if (!this.ui.button) {
                        var _this$value$text;
                        var value = "";
                        if (this.value.exData) {
                           value = this.value.exData[$text]();
                        } else if (this.value.text) {
                           value = this.value.text[$getExtra]();
                        } else {
                           var htmlValue = this.value[$toHTML]().html;
                           if (htmlValue !== null) {
                              value = htmlValue.children[0].value;
                           }
                        }
                        if (
                           this.ui.textEdit &&
                           (_this$value$text = this.value.text) !== null &&
                           _this$value$text !== void 0 &&
                           _this$value$text.maxChars
                        ) {
                           ui.children[0].attributes.maxLength =
                              this.value.text.maxChars;
                        }
                        if (value) {
                           if (this.ui.numericEdit) {
                              value = parseFloat(value);
                              value = isNaN(value) ? "" : value.toString();
                           }
                           if (ui.children[0].name === "textarea") {
                              ui.children[0].attributes.textContent = value;
                           } else {
                              ui.children[0].attributes.value = value;
                           }
                        }
                     }
                  }
                  if (
                     !this.ui.imageEdit &&
                     (_ui$children2 = ui.children) !== null &&
                     _ui$children2 !== void 0 &&
                     _ui$children2[0] &&
                     this.h
                  ) {
                     borderDims = borderDims || getBorderDims(this.ui[$getExtra]());
                     var captionHeight = 0;
                     if (
                        this.caption &&
                        ["top", "bottom"].includes(this.caption.placement)
                     ) {
                        captionHeight = this.caption.reserve;
                        if (captionHeight <= 0) {
                           captionHeight = this.caption[$getExtra](availableSpace).h;
                        }
                        var inputHeight =
                           this.h - captionHeight - marginV - borderDims.h;
                        ui.children[0].attributes.style.height =
                           measureToString(inputHeight);
                     } else {
                        ui.children[0].attributes.style.height = "100%";
                     }
                  }
                  if (aElement) {
                     ui.children.push(aElement);
                  }
                  if (!caption) {
                     if (ui.attributes["class"]) {
                        ui.attributes["class"].push("xfaLeft");
                     }
                     this.w = savedW;
                     this.h = savedH;
                     return HTMLResult.success(createWrapper(this, html), bbox);
                  }
                  if (this.ui.button) {
                     if (style.padding) {
                        delete style.padding;
                     }
                     if (caption.name === "div") {
                        caption.name = "span";
                     }
                     ui.children.push(caption);
                     return HTMLResult.success(html, bbox);
                  } else if (this.ui.checkButton) {
                     caption.attributes["class"][0] = "xfaCaptionForCheckButton";
                  }
                  if (!ui.attributes["class"]) {
                     ui.attributes["class"] = [];
                  }
                  ui.children.splice(0, 0, caption);
                  switch (this.caption.placement) {
                     case "left":
                        ui.attributes["class"].push("xfaLeft");
                        break;
                     case "right":
                        ui.attributes["class"].push("xfaRight");
                        break;
                     case "top":
                        ui.attributes["class"].push("xfaTop");
                        break;
                     case "bottom":
                        ui.attributes["class"].push("xfaBottom");
                        break;
                     case "inline":
                        ui.attributes["class"].push("xfaLeft");
                        break;
                  }
                  this.w = savedW;
                  this.h = savedH;
                  return HTMLResult.success(createWrapper(this, html), bbox);
               },
            },
         ]);
      })(XFAObject);
      var Fill = /*#__PURE__*/ (function (_XFAObject40) {
         function Fill(attributes) {
            var _this115;
            _classCallCheck(this, Fill);
            _this115 = _callSuper(this, Fill, [TEMPLATE_NS_ID, "fill", true]);
            _this115.id = attributes.id || "";
            _this115.presence = getStringOption(attributes.presence, [
               "visible",
               "hidden",
               "inactive",
               "invisible",
            ]);
            _this115.use = attributes.use || "";
            _this115.usehref = attributes.usehref || "";
            _this115.color = null;
            _this115.extras = null;
            _this115.linear = null;
            _this115.pattern = null;
            _this115.radial = null;
            _this115.solid = null;
            _this115.stipple = null;
            return _this115;
         }
         _inherits(Fill, _XFAObject40);
         return _createClass(Fill, [
            {
               key: $toStyle,
               value: function value() {
                  var _this$color;
                  var parent = this[$getParent]();
                  var grandpa = parent[$getParent]();
                  var ggrandpa = grandpa[$getParent]();
                  var style = Object.create(null);
                  var propName = "color";
                  var altPropName = propName;
                  if (parent instanceof Border) {
                     propName = "background-color";
                     altPropName = "background";
                     if (ggrandpa instanceof Ui) {
                        style.backgroundColor = "white";
                     }
                  }
                  if (parent instanceof Rectangle || parent instanceof Arc) {
                     propName = altPropName = "fill";
                     style.fill = "white";
                  }
                  var _iterator164 = _createForOfIteratorHelper(
                        Object.getOwnPropertyNames(this),
                     ),
                     _step164;
                  try {
                     for (_iterator164.s(); !(_step164 = _iterator164.n()).done; ) {
                        var name = _step164.value;
                        if (name === "extras" || name === "color") {
                           continue;
                        }
                        var obj = this[name];
                        if (!(obj instanceof XFAObject)) {
                           continue;
                        }
                        var _color3 = obj[$toStyle](this.color);
                        if (_color3) {
                           style[_color3.startsWith("#") ? propName : altPropName] =
                              _color3;
                        }
                        return style;
                     }
                  } catch (err) {
                     _iterator164.e(err);
                  } finally {
                     _iterator164.f();
                  }
                  if (
                     (_this$color = this.color) !== null &&
                     _this$color !== void 0 &&
                     _this$color.value
                  ) {
                     var color = this.color[$toStyle]();
                     style[color.startsWith("#") ? propName : altPropName] = color;
                  }
                  return style;
               },
            },
         ]);
      })(XFAObject);
      var Filter = /*#__PURE__*/ (function (_XFAObject41) {
         function Filter(attributes) {
            var _this116;
            _classCallCheck(this, Filter);
            _this116 = _callSuper(this, Filter, [TEMPLATE_NS_ID, "filter", true]);
            _this116.addRevocationInfo = getStringOption(
               attributes.addRevocationInfo,
               ["", "required", "optional", "none"],
            );
            _this116.id = attributes.id || "";
            _this116.name = attributes.name || "";
            _this116.use = attributes.use || "";
            _this116.usehref = attributes.usehref || "";
            _this116.version = getInteger({
               data: _this116.version,
               defaultValue: 5,
               validate: function validate(x) {
                  return x >= 1 && x <= 5;
               },
            });
            _this116.appearanceFilter = null;
            _this116.certificates = null;
            _this116.digestMethods = null;
            _this116.encodings = null;
            _this116.encryptionMethods = null;
            _this116.handler = null;
            _this116.lockDocument = null;
            _this116.mdp = null;
            _this116.reasons = null;
            _this116.timeStamp = null;
            return _this116;
         }
         _inherits(Filter, _XFAObject41);
         return _createClass(Filter);
      })(XFAObject);
      var Float = /*#__PURE__*/ (function (_ContentObject8) {
         function Float(attributes) {
            var _this117;
            _classCallCheck(this, Float);
            _this117 = _callSuper(this, Float, [TEMPLATE_NS_ID, "float"]);
            _this117.id = attributes.id || "";
            _this117.name = attributes.name || "";
            _this117.use = attributes.use || "";
            _this117.usehref = attributes.usehref || "";
            return _this117;
         }
         _inherits(Float, _ContentObject8);
         return _createClass(Float, [
            {
               key: $finalize,
               value: function value() {
                  var number = parseFloat(this[$content].trim());
                  this[$content] = isNaN(number) ? null : number;
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  return valueToHtml(
                     this[$content] !== null ? this[$content].toString() : "",
                  );
               },
            },
         ]);
      })(ContentObject);
      var template_Font = /*#__PURE__*/ (function (_XFAObject42) {
         function template_Font(attributes) {
            var _this118;
            _classCallCheck(this, template_Font);
            _this118 = _callSuper(this, template_Font, [
               TEMPLATE_NS_ID,
               "font",
               true,
            ]);
            _this118.baselineShift = getMeasurement(attributes.baselineShift);
            _this118.fontHorizontalScale = getFloat({
               data: attributes.fontHorizontalScale,
               defaultValue: 100,
               validate: function validate(x) {
                  return x >= 0;
               },
            });
            _this118.fontVerticalScale = getFloat({
               data: attributes.fontVerticalScale,
               defaultValue: 100,
               validate: function validate(x) {
                  return x >= 0;
               },
            });
            _this118.id = attributes.id || "";
            _this118.kerningMode = getStringOption(attributes.kerningMode, [
               "none",
               "pair",
            ]);
            _this118.letterSpacing = getMeasurement(attributes.letterSpacing, "0");
            _this118.lineThrough = getInteger({
               data: attributes.lineThrough,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1 || x === 2;
               },
            });
            _this118.lineThroughPeriod = getStringOption(
               attributes.lineThroughPeriod,
               ["all", "word"],
            );
            _this118.overline = getInteger({
               data: attributes.overline,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1 || x === 2;
               },
            });
            _this118.overlinePeriod = getStringOption(attributes.overlinePeriod, [
               "all",
               "word",
            ]);
            _this118.posture = getStringOption(attributes.posture, [
               "normal",
               "italic",
            ]);
            _this118.size = getMeasurement(attributes.size, "10pt");
            _this118.typeface = attributes.typeface || "Courier";
            _this118.underline = getInteger({
               data: attributes.underline,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1 || x === 2;
               },
            });
            _this118.underlinePeriod = getStringOption(attributes.underlinePeriod, [
               "all",
               "word",
            ]);
            _this118.use = attributes.use || "";
            _this118.usehref = attributes.usehref || "";
            _this118.weight = getStringOption(attributes.weight, [
               "normal",
               "bold",
            ]);
            _this118.extras = null;
            _this118.fill = null;
            return _this118;
         }
         _inherits(template_Font, _XFAObject42);
         return _createClass(template_Font, [
            {
               key: $clean,
               value: function value(builder) {
                  _superPropGet(template_Font, $clean, this, 3)([builder]);
                  this[$globalData].usedTypefaces.add(this.typeface);
               },
            },
            {
               key: $toStyle,
               value: function value() {
                  var style = toStyle(this, "fill");
                  var color = style.color;
                  if (color) {
                     if (color === "#000000") {
                        delete style.color;
                     } else if (!color.startsWith("#")) {
                        style.background = color;
                        style.backgroundClip = "text";
                        style.color = "transparent";
                     }
                  }
                  if (this.baselineShift) {
                     style.verticalAlign = measureToString(this.baselineShift);
                  }
                  style.fontKerning = this.kerningMode === "none" ? "none" : "normal";
                  style.letterSpacing = measureToString(this.letterSpacing);
                  if (this.lineThrough !== 0) {
                     style.textDecoration = "line-through";
                     if (this.lineThrough === 2) {
                        style.textDecorationStyle = "double";
                     }
                  }
                  if (this.overline !== 0) {
                     style.textDecoration = "overline";
                     if (this.overline === 2) {
                        style.textDecorationStyle = "double";
                     }
                  }
                  style.fontStyle = this.posture;
                  style.fontSize = measureToString(0.99 * this.size);
                  setFontFamily(this, this, this[$globalData].fontFinder, style);
                  if (this.underline !== 0) {
                     style.textDecoration = "underline";
                     if (this.underline === 2) {
                        style.textDecorationStyle = "double";
                     }
                  }
                  style.fontWeight = this.weight;
                  return style;
               },
            },
         ]);
      })(XFAObject);
      var Format = /*#__PURE__*/ (function (_XFAObject43) {
         function Format(attributes) {
            var _this119;
            _classCallCheck(this, Format);
            _this119 = _callSuper(this, Format, [TEMPLATE_NS_ID, "format", true]);
            _this119.id = attributes.id || "";
            _this119.use = attributes.use || "";
            _this119.usehref = attributes.usehref || "";
            _this119.extras = null;
            _this119.picture = null;
            return _this119;
         }
         _inherits(Format, _XFAObject43);
         return _createClass(Format);
      })(XFAObject);
      var Handler = /*#__PURE__*/ (function (_StringObject3) {
         function Handler(attributes) {
            var _this120;
            _classCallCheck(this, Handler);
            _this120 = _callSuper(this, Handler, [TEMPLATE_NS_ID, "handler"]);
            _this120.id = attributes.id || "";
            _this120.type = getStringOption(attributes.type, [
               "optional",
               "required",
            ]);
            _this120.use = attributes.use || "";
            _this120.usehref = attributes.usehref || "";
            return _this120;
         }
         _inherits(Handler, _StringObject3);
         return _createClass(Handler);
      })(StringObject);
      var Hyphenation = /*#__PURE__*/ (function (_XFAObject44) {
         function Hyphenation(attributes) {
            var _this121;
            _classCallCheck(this, Hyphenation);
            _this121 = _callSuper(this, Hyphenation, [
               TEMPLATE_NS_ID,
               "hyphenation",
            ]);
            _this121.excludeAllCaps = getInteger({
               data: attributes.excludeAllCaps,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this121.excludeInitialCap = getInteger({
               data: attributes.excludeInitialCap,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this121.hyphenate = getInteger({
               data: attributes.hyphenate,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this121.id = attributes.id || "";
            _this121.pushCharacterCount = getInteger({
               data: attributes.pushCharacterCount,
               defaultValue: 3,
               validate: function validate(x) {
                  return x >= 0;
               },
            });
            _this121.remainCharacterCount = getInteger({
               data: attributes.remainCharacterCount,
               defaultValue: 3,
               validate: function validate(x) {
                  return x >= 0;
               },
            });
            _this121.use = attributes.use || "";
            _this121.usehref = attributes.usehref || "";
            _this121.wordCharacterCount = getInteger({
               data: attributes.wordCharacterCount,
               defaultValue: 7,
               validate: function validate(x) {
                  return x >= 0;
               },
            });
            return _this121;
         }
         _inherits(Hyphenation, _XFAObject44);
         return _createClass(Hyphenation);
      })(XFAObject);
      var Image = /*#__PURE__*/ (function (_StringObject4) {
         function Image(attributes) {
            var _this122;
            _classCallCheck(this, Image);
            _this122 = _callSuper(this, Image, [TEMPLATE_NS_ID, "image"]);
            _this122.aspect = getStringOption(attributes.aspect, [
               "fit",
               "actual",
               "height",
               "none",
               "width",
            ]);
            _this122.contentType = attributes.contentType || "";
            _this122.href = attributes.href || "";
            _this122.id = attributes.id || "";
            _this122.name = attributes.name || "";
            _this122.transferEncoding = getStringOption(
               attributes.transferEncoding,
               ["base64", "none", "package"],
            );
            _this122.use = attributes.use || "";
            _this122.usehref = attributes.usehref || "";
            return _this122;
         }
         _inherits(Image, _StringObject4);
         return _createClass(Image, [
            {
               key: $toHTML,
               value: function value() {
                  if (
                     this.contentType &&
                     !MIMES.has(this.contentType.toLowerCase())
                  ) {
                     return HTMLResult.EMPTY;
                  }
                  var buffer =
                     this[$globalData].images &&
                     this[$globalData].images.get(this.href);
                  if (!buffer && (this.href || !this[$content])) {
                     return HTMLResult.EMPTY;
                  }
                  if (!buffer && this.transferEncoding === "base64") {
                     buffer = stringToBytes(atob(this[$content]));
                  }
                  if (!buffer) {
                     return HTMLResult.EMPTY;
                  }
                  if (!this.contentType) {
                     for (
                        var _i59 = 0, _IMAGES_HEADERS = IMAGES_HEADERS;
                        _i59 < _IMAGES_HEADERS.length;
                        _i59++
                     ) {
                        var _IMAGES_HEADERS$_i = _slicedToArray(
                              _IMAGES_HEADERS[_i59],
                              2,
                           ),
                           header = _IMAGES_HEADERS$_i[0],
                           type = _IMAGES_HEADERS$_i[1];
                        if (
                           buffer.length > header.length &&
                           header.every(function (x, i) {
                              return x === buffer[i];
                           })
                        ) {
                           this.contentType = type;
                           break;
                        }
                     }
                     if (!this.contentType) {
                        return HTMLResult.EMPTY;
                     }
                  }
                  var blob = new Blob([buffer], { type: this.contentType });
                  var style;
                  switch (this.aspect) {
                     case "fit":
                     case "actual":
                        break;
                     case "height":
                        style = { height: "100%", objectFit: "fill" };
                        break;
                     case "none":
                        style = { width: "100%", height: "100%", objectFit: "fill" };
                        break;
                     case "width":
                        style = { width: "100%", objectFit: "fill" };
                        break;
                  }
                  var parent = this[$getParent]();
                  return HTMLResult.success({
                     name: "img",
                     attributes: {
                        class: ["xfaImage"],
                        style: style,
                        src: URL.createObjectURL(blob),
                        alt: parent ? ariaLabel(parent[$getParent]()) : null,
                     },
                  });
               },
            },
         ]);
      })(StringObject);
      var ImageEdit = /*#__PURE__*/ (function (_XFAObject45) {
         function ImageEdit(attributes) {
            var _this123;
            _classCallCheck(this, ImageEdit);
            _this123 = _callSuper(this, ImageEdit, [
               TEMPLATE_NS_ID,
               "imageEdit",
               true,
            ]);
            _this123.data = getStringOption(attributes.data, ["link", "embed"]);
            _this123.id = attributes.id || "";
            _this123.use = attributes.use || "";
            _this123.usehref = attributes.usehref || "";
            _this123.border = null;
            _this123.extras = null;
            _this123.margin = null;
            return _this123;
         }
         _inherits(ImageEdit, _XFAObject45);
         return _createClass(ImageEdit, [
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  if (this.data === "embed") {
                     return HTMLResult.success({
                        name: "div",
                        children: [],
                        attributes: {},
                     });
                  }
                  return HTMLResult.EMPTY;
               },
            },
         ]);
      })(XFAObject);
      var Integer = /*#__PURE__*/ (function (_ContentObject9) {
         function Integer(attributes) {
            var _this124;
            _classCallCheck(this, Integer);
            _this124 = _callSuper(this, Integer, [TEMPLATE_NS_ID, "integer"]);
            _this124.id = attributes.id || "";
            _this124.name = attributes.name || "";
            _this124.use = attributes.use || "";
            _this124.usehref = attributes.usehref || "";
            return _this124;
         }
         _inherits(Integer, _ContentObject9);
         return _createClass(Integer, [
            {
               key: $finalize,
               value: function value() {
                  var number = parseInt(this[$content].trim(), 10);
                  this[$content] = isNaN(number) ? null : number;
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  return valueToHtml(
                     this[$content] !== null ? this[$content].toString() : "",
                  );
               },
            },
         ]);
      })(ContentObject);
      var Issuers = /*#__PURE__*/ (function (_XFAObject46) {
         function Issuers(attributes) {
            var _this125;
            _classCallCheck(this, Issuers);
            _this125 = _callSuper(this, Issuers, [TEMPLATE_NS_ID, "issuers", true]);
            _this125.id = attributes.id || "";
            _this125.type = getStringOption(attributes.type, [
               "optional",
               "required",
            ]);
            _this125.use = attributes.use || "";
            _this125.usehref = attributes.usehref || "";
            _this125.certificate = new XFAObjectArray();
            return _this125;
         }
         _inherits(Issuers, _XFAObject46);
         return _createClass(Issuers);
      })(XFAObject);
      var Items = /*#__PURE__*/ (function (_XFAObject47) {
         function Items(attributes) {
            var _this126;
            _classCallCheck(this, Items);
            _this126 = _callSuper(this, Items, [TEMPLATE_NS_ID, "items", true]);
            _this126.id = attributes.id || "";
            _this126.name = attributes.name || "";
            _this126.presence = getStringOption(attributes.presence, [
               "visible",
               "hidden",
               "inactive",
               "invisible",
            ]);
            _this126.ref = attributes.ref || "";
            _this126.save = getInteger({
               data: attributes.save,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this126.use = attributes.use || "";
            _this126.usehref = attributes.usehref || "";
            _this126["boolean"] = new XFAObjectArray();
            _this126.date = new XFAObjectArray();
            _this126.dateTime = new XFAObjectArray();
            _this126.decimal = new XFAObjectArray();
            _this126.exData = new XFAObjectArray();
            _this126["float"] = new XFAObjectArray();
            _this126.image = new XFAObjectArray();
            _this126.integer = new XFAObjectArray();
            _this126.text = new XFAObjectArray();
            _this126.time = new XFAObjectArray();
            return _this126;
         }
         _inherits(Items, _XFAObject47);
         return _createClass(Items, [
            {
               key: $toHTML,
               value: function value() {
                  var output = [];
                  var _iterator165 = _createForOfIteratorHelper(this[$getChildren]()),
                     _step165;
                  try {
                     for (_iterator165.s(); !(_step165 = _iterator165.n()).done; ) {
                        var child = _step165.value;
                        output.push(child[$text]());
                     }
                  } catch (err) {
                     _iterator165.e(err);
                  } finally {
                     _iterator165.f();
                  }
                  return HTMLResult.success(output);
               },
            },
         ]);
      })(XFAObject);
      var Keep = /*#__PURE__*/ (function (_XFAObject48) {
         function Keep(attributes) {
            var _this127;
            _classCallCheck(this, Keep);
            _this127 = _callSuper(this, Keep, [TEMPLATE_NS_ID, "keep", true]);
            _this127.id = attributes.id || "";
            var options = ["none", "contentArea", "pageArea"];
            _this127.intact = getStringOption(attributes.intact, options);
            _this127.next = getStringOption(attributes.next, options);
            _this127.previous = getStringOption(attributes.previous, options);
            _this127.use = attributes.use || "";
            _this127.usehref = attributes.usehref || "";
            _this127.extras = null;
            return _this127;
         }
         _inherits(Keep, _XFAObject48);
         return _createClass(Keep);
      })(XFAObject);
      var KeyUsage = /*#__PURE__*/ (function (_XFAObject49) {
         function KeyUsage(attributes) {
            var _this128;
            _classCallCheck(this, KeyUsage);
            _this128 = _callSuper(this, KeyUsage, [TEMPLATE_NS_ID, "keyUsage"]);
            var options = ["", "yes", "no"];
            _this128.crlSign = getStringOption(attributes.crlSign, options);
            _this128.dataEncipherment = getStringOption(
               attributes.dataEncipherment,
               options,
            );
            _this128.decipherOnly = getStringOption(
               attributes.decipherOnly,
               options,
            );
            _this128.digitalSignature = getStringOption(
               attributes.digitalSignature,
               options,
            );
            _this128.encipherOnly = getStringOption(
               attributes.encipherOnly,
               options,
            );
            _this128.id = attributes.id || "";
            _this128.keyAgreement = getStringOption(
               attributes.keyAgreement,
               options,
            );
            _this128.keyCertSign = getStringOption(attributes.keyCertSign, options);
            _this128.keyEncipherment = getStringOption(
               attributes.keyEncipherment,
               options,
            );
            _this128.nonRepudiation = getStringOption(
               attributes.nonRepudiation,
               options,
            );
            _this128.type = getStringOption(attributes.type, [
               "optional",
               "required",
            ]);
            _this128.use = attributes.use || "";
            _this128.usehref = attributes.usehref || "";
            return _this128;
         }
         _inherits(KeyUsage, _XFAObject49);
         return _createClass(KeyUsage);
      })(XFAObject);
      var Line = /*#__PURE__*/ (function (_XFAObject50) {
         function Line(attributes) {
            var _this129;
            _classCallCheck(this, Line);
            _this129 = _callSuper(this, Line, [TEMPLATE_NS_ID, "line", true]);
            _this129.hand = getStringOption(attributes.hand, [
               "even",
               "left",
               "right",
            ]);
            _this129.id = attributes.id || "";
            _this129.slope = getStringOption(attributes.slope, ["\\", "/"]);
            _this129.use = attributes.use || "";
            _this129.usehref = attributes.usehref || "";
            _this129.edge = null;
            return _this129;
         }
         _inherits(Line, _XFAObject50);
         return _createClass(Line, [
            {
               key: $toHTML,
               value: function value() {
                  var parent = this[$getParent]()[$getParent]();
                  var edge = this.edge || new Edge({});
                  var edgeStyle = edge[$toStyle]();
                  var style = Object.create(null);
                  var thickness = edge.presence === "visible" ? edge.thickness : 0;
                  style.strokeWidth = measureToString(thickness);
                  style.stroke = edgeStyle.color;
                  var x1, y1, x2, y2;
                  var width = "100%";
                  var height = "100%";
                  if (parent.w <= thickness) {
                     x1 = "50%";
                     y1 = 0;
                     x2 = "50%";
                     y2 = "100%";
                     width = style.strokeWidth;
                  } else if (parent.h <= thickness) {
                     x1 = 0;
                     y1 = "50%";
                     x2 = "100%";
                     y2 = "50%";
                     height = style.strokeWidth;
                  } else if (this.slope === "\\") {
                     x1 = 0;
                     y1 = 0;
                     x2 = "100%";
                     y2 = "100%";
                  } else {
                     x1 = 0;
                     y1 = "100%";
                     x2 = "100%";
                     y2 = 0;
                  }
                  var line = {
                     name: "line",
                     attributes: {
                        xmlns: SVG_NS,
                        x1: x1,
                        y1: y1,
                        x2: x2,
                        y2: y2,
                        style: style,
                     },
                  };
                  var svg = {
                     name: "svg",
                     children: [line],
                     attributes: {
                        xmlns: SVG_NS,
                        width: width,
                        height: height,
                        style: { overflow: "visible" },
                     },
                  };
                  if (hasMargin(parent)) {
                     return HTMLResult.success({
                        name: "div",
                        attributes: {
                           style: { display: "inline", width: "100%", height: "100%" },
                        },
                        children: [svg],
                     });
                  }
                  svg.attributes.style.position = "absolute";
                  return HTMLResult.success(svg);
               },
            },
         ]);
      })(XFAObject);
      var Linear = /*#__PURE__*/ (function (_XFAObject51) {
         function Linear(attributes) {
            var _this130;
            _classCallCheck(this, Linear);
            _this130 = _callSuper(this, Linear, [TEMPLATE_NS_ID, "linear", true]);
            _this130.id = attributes.id || "";
            _this130.type = getStringOption(attributes.type, [
               "toRight",
               "toBottom",
               "toLeft",
               "toTop",
            ]);
            _this130.use = attributes.use || "";
            _this130.usehref = attributes.usehref || "";
            _this130.color = null;
            _this130.extras = null;
            return _this130;
         }
         _inherits(Linear, _XFAObject51);
         return _createClass(Linear, [
            {
               key: $toStyle,
               value: function value(startColor) {
                  startColor = startColor ? startColor[$toStyle]() : "#FFFFFF";
                  var transf = this.type.replace(/([RBLT])/, " $1").toLowerCase();
                  var endColor = this.color ? this.color[$toStyle]() : "#000000";
                  return "linear-gradient("
                     .concat(transf, ", ")
                     .concat(startColor, ", ")
                     .concat(endColor, ")");
               },
            },
         ]);
      })(XFAObject);
      var LockDocument = /*#__PURE__*/ (function (_ContentObject0) {
         function LockDocument(attributes) {
            var _this131;
            _classCallCheck(this, LockDocument);
            _this131 = _callSuper(this, LockDocument, [
               TEMPLATE_NS_ID,
               "lockDocument",
            ]);
            _this131.id = attributes.id || "";
            _this131.type = getStringOption(attributes.type, [
               "optional",
               "required",
            ]);
            _this131.use = attributes.use || "";
            _this131.usehref = attributes.usehref || "";
            return _this131;
         }
         _inherits(LockDocument, _ContentObject0);
         return _createClass(LockDocument, [
            {
               key: $finalize,
               value: function value() {
                  this[$content] = getStringOption(this[$content], [
                     "auto",
                     "0",
                     "1",
                  ]);
               },
            },
         ]);
      })(ContentObject);
      var Manifest = /*#__PURE__*/ (function (_XFAObject52) {
         function Manifest(attributes) {
            var _this132;
            _classCallCheck(this, Manifest);
            _this132 = _callSuper(this, Manifest, [
               TEMPLATE_NS_ID,
               "manifest",
               true,
            ]);
            _this132.action = getStringOption(attributes.action, [
               "include",
               "all",
               "exclude",
            ]);
            _this132.id = attributes.id || "";
            _this132.name = attributes.name || "";
            _this132.use = attributes.use || "";
            _this132.usehref = attributes.usehref || "";
            _this132.extras = null;
            _this132.ref = new XFAObjectArray();
            return _this132;
         }
         _inherits(Manifest, _XFAObject52);
         return _createClass(Manifest);
      })(XFAObject);
      var Margin = /*#__PURE__*/ (function (_XFAObject53) {
         function Margin(attributes) {
            var _this133;
            _classCallCheck(this, Margin);
            _this133 = _callSuper(this, Margin, [TEMPLATE_NS_ID, "margin", true]);
            _this133.bottomInset = getMeasurement(attributes.bottomInset, "0");
            _this133.id = attributes.id || "";
            _this133.leftInset = getMeasurement(attributes.leftInset, "0");
            _this133.rightInset = getMeasurement(attributes.rightInset, "0");
            _this133.topInset = getMeasurement(attributes.topInset, "0");
            _this133.use = attributes.use || "";
            _this133.usehref = attributes.usehref || "";
            _this133.extras = null;
            return _this133;
         }
         _inherits(Margin, _XFAObject53);
         return _createClass(Margin, [
            {
               key: $toStyle,
               value: function value() {
                  return {
                     margin:
                        measureToString(this.topInset) +
                        " " +
                        measureToString(this.rightInset) +
                        " " +
                        measureToString(this.bottomInset) +
                        " " +
                        measureToString(this.leftInset),
                  };
               },
            },
         ]);
      })(XFAObject);
      var Mdp = /*#__PURE__*/ (function (_XFAObject54) {
         function Mdp(attributes) {
            var _this134;
            _classCallCheck(this, Mdp);
            _this134 = _callSuper(this, Mdp, [TEMPLATE_NS_ID, "mdp"]);
            _this134.id = attributes.id || "";
            _this134.permissions = getInteger({
               data: attributes.permissions,
               defaultValue: 2,
               validate: function validate(x) {
                  return x === 1 || x === 3;
               },
            });
            _this134.signatureType = getStringOption(attributes.signatureType, [
               "filler",
               "author",
            ]);
            _this134.use = attributes.use || "";
            _this134.usehref = attributes.usehref || "";
            return _this134;
         }
         _inherits(Mdp, _XFAObject54);
         return _createClass(Mdp);
      })(XFAObject);
      var Medium = /*#__PURE__*/ (function (_XFAObject55) {
         function Medium(attributes) {
            var _this135;
            _classCallCheck(this, Medium);
            _this135 = _callSuper(this, Medium, [TEMPLATE_NS_ID, "medium"]);
            _this135.id = attributes.id || "";
            _this135.imagingBBox = getBBox(attributes.imagingBBox);
            _this135["long"] = getMeasurement(attributes["long"]);
            _this135.orientation = getStringOption(attributes.orientation, [
               "portrait",
               "landscape",
            ]);
            _this135["short"] = getMeasurement(attributes["short"]);
            _this135.stock = attributes.stock || "";
            _this135.trayIn = getStringOption(attributes.trayIn, [
               "auto",
               "delegate",
               "pageFront",
            ]);
            _this135.trayOut = getStringOption(attributes.trayOut, [
               "auto",
               "delegate",
            ]);
            _this135.use = attributes.use || "";
            _this135.usehref = attributes.usehref || "";
            return _this135;
         }
         _inherits(Medium, _XFAObject55);
         return _createClass(Medium);
      })(XFAObject);
      var Message = /*#__PURE__*/ (function (_XFAObject56) {
         function Message(attributes) {
            var _this136;
            _classCallCheck(this, Message);
            _this136 = _callSuper(this, Message, [TEMPLATE_NS_ID, "message", true]);
            _this136.id = attributes.id || "";
            _this136.use = attributes.use || "";
            _this136.usehref = attributes.usehref || "";
            _this136.text = new XFAObjectArray();
            return _this136;
         }
         _inherits(Message, _XFAObject56);
         return _createClass(Message);
      })(XFAObject);
      var NumericEdit = /*#__PURE__*/ (function (_XFAObject57) {
         function NumericEdit(attributes) {
            var _this137;
            _classCallCheck(this, NumericEdit);
            _this137 = _callSuper(this, NumericEdit, [
               TEMPLATE_NS_ID,
               "numericEdit",
               true,
            ]);
            _this137.hScrollPolicy = getStringOption(attributes.hScrollPolicy, [
               "auto",
               "off",
               "on",
            ]);
            _this137.id = attributes.id || "";
            _this137.use = attributes.use || "";
            _this137.usehref = attributes.usehref || "";
            _this137.border = null;
            _this137.comb = null;
            _this137.extras = null;
            _this137.margin = null;
            return _this137;
         }
         _inherits(NumericEdit, _XFAObject57);
         return _createClass(NumericEdit, [
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  var _field$$data4;
                  var style = toStyle(this, "border", "font", "margin");
                  var field = this[$getParent]()[$getParent]();
                  var html = {
                     name: "input",
                     attributes: {
                        type: "text",
                        fieldId: field[$uid],
                        dataId:
                           ((_field$$data4 = field[$data]) === null ||
                           _field$$data4 === void 0
                              ? void 0
                              : _field$$data4[$uid]) || field[$uid],
                        class: ["xfaTextfield"],
                        style: style,
                        "aria-label": ariaLabel(field),
                        "aria-required": false,
                     },
                  };
                  if (isRequired(field)) {
                     html.attributes["aria-required"] = true;
                     html.attributes.required = true;
                  }
                  return HTMLResult.success({
                     name: "label",
                     attributes: { class: ["xfaLabel"] },
                     children: [html],
                  });
               },
            },
         ]);
      })(XFAObject);
      var Occur = /*#__PURE__*/ (function (_XFAObject58) {
         function Occur(attributes) {
            var _this138;
            _classCallCheck(this, Occur);
            _this138 = _callSuper(this, Occur, [TEMPLATE_NS_ID, "occur", true]);
            _this138.id = attributes.id || "";
            _this138.initial =
               attributes.initial !== ""
                  ? getInteger({
                     data: attributes.initial,
                     defaultValue: "",
                     validate: function validate(x) {
                        return true;
                     },
                  })
                  : "";
            _this138.max =
               attributes.max !== ""
                  ? getInteger({
                     data: attributes.max,
                     defaultValue: 1,
                     validate: function validate(x) {
                        return true;
                     },
                  })
                  : "";
            _this138.min =
               attributes.min !== ""
                  ? getInteger({
                     data: attributes.min,
                     defaultValue: 1,
                     validate: function validate(x) {
                        return true;
                     },
                  })
                  : "";
            _this138.use = attributes.use || "";
            _this138.usehref = attributes.usehref || "";
            _this138.extras = null;
            return _this138;
         }
         _inherits(Occur, _XFAObject58);
         return _createClass(Occur, [
            {
               key: $clean,
               value: function value() {
                  var parent = this[$getParent]();
                  var originalMin = this.min;
                  if (this.min === "") {
                     this.min =
                        parent instanceof PageArea || parent instanceof PageSet ? 0 : 1;
                  }
                  if (this.max === "") {
                     if (originalMin === "") {
                        this.max =
                           parent instanceof PageArea || parent instanceof PageSet
                              ? -1
                              : 1;
                     } else {
                        this.max = this.min;
                     }
                  }
                  if (this.max !== -1 && this.max < this.min) {
                     this.max = this.min;
                  }
                  if (this.initial === "") {
                     this.initial = parent instanceof Template ? 1 : this.min;
                  }
               },
            },
         ]);
      })(XFAObject);
      var Oid = /*#__PURE__*/ (function (_StringObject5) {
         function Oid(attributes) {
            var _this139;
            _classCallCheck(this, Oid);
            _this139 = _callSuper(this, Oid, [TEMPLATE_NS_ID, "oid"]);
            _this139.id = attributes.id || "";
            _this139.name = attributes.name || "";
            _this139.use = attributes.use || "";
            _this139.usehref = attributes.usehref || "";
            return _this139;
         }
         _inherits(Oid, _StringObject5);
         return _createClass(Oid);
      })(StringObject);
      var Oids = /*#__PURE__*/ (function (_XFAObject59) {
         function Oids(attributes) {
            var _this140;
            _classCallCheck(this, Oids);
            _this140 = _callSuper(this, Oids, [TEMPLATE_NS_ID, "oids", true]);
            _this140.id = attributes.id || "";
            _this140.type = getStringOption(attributes.type, [
               "optional",
               "required",
            ]);
            _this140.use = attributes.use || "";
            _this140.usehref = attributes.usehref || "";
            _this140.oid = new XFAObjectArray();
            return _this140;
         }
         _inherits(Oids, _XFAObject59);
         return _createClass(Oids);
      })(XFAObject);
      var Overflow = /*#__PURE__*/ (function (_XFAObject60) {
         function Overflow(attributes) {
            var _this141;
            _classCallCheck(this, Overflow);
            _this141 = _callSuper(this, Overflow, [TEMPLATE_NS_ID, "overflow"]);
            _this141.id = attributes.id || "";
            _this141.leader = attributes.leader || "";
            _this141.target = attributes.target || "";
            _this141.trailer = attributes.trailer || "";
            _this141.use = attributes.use || "";
            _this141.usehref = attributes.usehref || "";
            return _this141;
         }
         _inherits(Overflow, _XFAObject60);
         return _createClass(Overflow, [
            {
               key: $getExtra,
               value: function value() {
                  if (!this[$extra]) {
                     var parent = this[$getParent]();
                     var root = this[$getTemplateRoot]();
                     var target = root[$searchNode](this.target, parent);
                     var leader = root[$searchNode](this.leader, parent);
                     var trailer = root[$searchNode](this.trailer, parent);
                     this[$extra] = {
                        target:
                           (target === null || target === void 0 ? void 0 : target[0]) ||
                           null,
                        leader:
                           (leader === null || leader === void 0 ? void 0 : leader[0]) ||
                           null,
                        trailer:
                           (trailer === null || trailer === void 0
                              ? void 0
                              : trailer[0]) || null,
                        addLeader: false,
                        addTrailer: false,
                     };
                  }
                  return this[$extra];
               },
            },
         ]);
      })(XFAObject);
      var PageArea = /*#__PURE__*/ (function (_XFAObject61) {
         function PageArea(attributes) {
            var _this142;
            _classCallCheck(this, PageArea);
            _this142 = _callSuper(this, PageArea, [
               TEMPLATE_NS_ID,
               "pageArea",
               true,
            ]);
            _this142.blankOrNotBlank = getStringOption(attributes.blankOrNotBlank, [
               "any",
               "blank",
               "notBlank",
            ]);
            _this142.id = attributes.id || "";
            _this142.initialNumber = getInteger({
               data: attributes.initialNumber,
               defaultValue: 1,
               validate: function validate(x) {
                  return true;
               },
            });
            _this142.name = attributes.name || "";
            _this142.numbered = getInteger({
               data: attributes.numbered,
               defaultValue: 1,
               validate: function validate(x) {
                  return true;
               },
            });
            _this142.oddOrEven = getStringOption(attributes.oddOrEven, [
               "any",
               "even",
               "odd",
            ]);
            _this142.pagePosition = getStringOption(attributes.pagePosition, [
               "any",
               "first",
               "last",
               "only",
               "rest",
            ]);
            _this142.relevant = getRelevant(attributes.relevant);
            _this142.use = attributes.use || "";
            _this142.usehref = attributes.usehref || "";
            _this142.desc = null;
            _this142.extras = null;
            _this142.medium = null;
            _this142.occur = null;
            _this142.area = new XFAObjectArray();
            _this142.contentArea = new XFAObjectArray();
            _this142.draw = new XFAObjectArray();
            _this142.exclGroup = new XFAObjectArray();
            _this142.field = new XFAObjectArray();
            _this142.subform = new XFAObjectArray();
            return _this142;
         }
         _inherits(PageArea, _XFAObject61);
         return _createClass(PageArea, [
            {
               key: $isUsable,
               value: function value() {
                  if (!this[$extra]) {
                     this[$extra] = { numberOfUse: 0 };
                     return true;
                  }
                  return (
                     !this.occur ||
                     this.occur.max === -1 ||
                     this[$extra].numberOfUse < this.occur.max
                  );
               },
            },
            {
               key: $cleanPage,
               value: function value() {
                  delete this[$extra];
               },
            },
            {
               key: $getNextPage,
               value: function value() {
                  if (!this[$extra]) {
                     this[$extra] = { numberOfUse: 0 };
                  }
                  var parent = this[$getParent]();
                  if (parent.relation === "orderedOccurrence") {
                     if (this[$isUsable]()) {
                        this[$extra].numberOfUse += 1;
                        return this;
                     }
                  }
                  return parent[$getNextPage]();
               },
            },
            {
               key: $getAvailableSpace,
               value: function value() {
                  return this[$extra].space || { width: 0, height: 0 };
               },
            },
            {
               key: $toHTML,
               value: function value() {
                  if (!this[$extra]) {
                     this[$extra] = { numberOfUse: 1 };
                  }
                  var children = [];
                  this[$extra].children = children;
                  var style = Object.create(null);
                  if (this.medium && this.medium["short"] && this.medium["long"]) {
                     style.width = measureToString(this.medium["short"]);
                     style.height = measureToString(this.medium["long"]);
                     this[$extra].space = {
                        width: this.medium["short"],
                        height: this.medium["long"],
                     };
                     if (this.medium.orientation === "landscape") {
                        var x = style.width;
                        style.width = style.height;
                        style.height = x;
                        this[$extra].space = {
                           width: this.medium["long"],
                           height: this.medium["short"],
                        };
                     }
                  } else {
                     warn("XFA - No medium specified in pageArea: please file a bug.");
                  }
                  this[$childrenToHTML]({
                     filter: new Set(["area", "draw", "field", "subform"]),
                     include: true,
                  });
                  this[$childrenToHTML]({
                     filter: new Set(["contentArea"]),
                     include: true,
                  });
                  return HTMLResult.success({
                     name: "div",
                     children: children,
                     attributes: {
                        class: ["xfaPage"],
                        id: this[$uid],
                        style: style,
                        xfaName: this.name,
                     },
                  });
               },
            },
         ]);
      })(XFAObject);
      var PageSet = /*#__PURE__*/ (function (_XFAObject62) {
         function PageSet(attributes) {
            var _this143;
            _classCallCheck(this, PageSet);
            _this143 = _callSuper(this, PageSet, [TEMPLATE_NS_ID, "pageSet", true]);
            _this143.duplexImposition = getStringOption(
               attributes.duplexImposition,
               ["longEdge", "shortEdge"],
            );
            _this143.id = attributes.id || "";
            _this143.name = attributes.name || "";
            _this143.relation = getStringOption(attributes.relation, [
               "orderedOccurrence",
               "duplexPaginated",
               "simplexPaginated",
            ]);
            _this143.relevant = getRelevant(attributes.relevant);
            _this143.use = attributes.use || "";
            _this143.usehref = attributes.usehref || "";
            _this143.extras = null;
            _this143.occur = null;
            _this143.pageArea = new XFAObjectArray();
            _this143.pageSet = new XFAObjectArray();
            return _this143;
         }
         _inherits(PageSet, _XFAObject62);
         return _createClass(PageSet, [
            {
               key: $cleanPage,
               value: function value() {
                  var _iterator166 = _createForOfIteratorHelper(
                        this.pageArea.children,
                     ),
                     _step166;
                  try {
                     for (_iterator166.s(); !(_step166 = _iterator166.n()).done; ) {
                        var page = _step166.value;
                        page[$cleanPage]();
                     }
                  } catch (err) {
                     _iterator166.e(err);
                  } finally {
                     _iterator166.f();
                  }
                  var _iterator167 = _createForOfIteratorHelper(
                        this.pageSet.children,
                     ),
                     _step167;
                  try {
                     for (_iterator167.s(); !(_step167 = _iterator167.n()).done; ) {
                        var _page = _step167.value;
                        _page[$cleanPage]();
                     }
                  } catch (err) {
                     _iterator167.e(err);
                  } finally {
                     _iterator167.f();
                  }
               },
            },
            {
               key: $isUsable,
               value: function value() {
                  return (
                     !this.occur ||
                     this.occur.max === -1 ||
                     this[$extra].numberOfUse < this.occur.max
                  );
               },
            },
            {
               key: $getNextPage,
               value: function value() {
                  if (!this[$extra]) {
                     this[$extra] = {
                        numberOfUse: 1,
                        pageIndex: -1,
                        pageSetIndex: -1,
                     };
                  }
                  if (this.relation === "orderedOccurrence") {
                     if (this[$extra].pageIndex + 1 < this.pageArea.children.length) {
                        this[$extra].pageIndex += 1;
                        var pageArea = this.pageArea.children[this[$extra].pageIndex];
                        return pageArea[$getNextPage]();
                     }
                     if (
                        this[$extra].pageSetIndex + 1 <
                        this.pageSet.children.length
                     ) {
                        this[$extra].pageSetIndex += 1;
                        return this.pageSet.children[this[$extra].pageSetIndex][
                           $getNextPage
                           ]();
                     }
                     if (this[$isUsable]()) {
                        this[$extra].numberOfUse += 1;
                        this[$extra].pageIndex = -1;
                        this[$extra].pageSetIndex = -1;
                        return this[$getNextPage]();
                     }
                     var parent = this[$getParent]();
                     if (parent instanceof PageSet) {
                        return parent[$getNextPage]();
                     }
                     this[$cleanPage]();
                     return this[$getNextPage]();
                  }
                  var pageNumber = this[$getTemplateRoot]()[$extra].pageNumber;
                  var parity = pageNumber % 2 === 0 ? "even" : "odd";
                  var position = pageNumber === 0 ? "first" : "rest";
                  var page = this.pageArea.children.find(function (p) {
                     return p.oddOrEven === parity && p.pagePosition === position;
                  });
                  if (page) {
                     return page;
                  }
                  page = this.pageArea.children.find(function (p) {
                     return p.oddOrEven === "any" && p.pagePosition === position;
                  });
                  if (page) {
                     return page;
                  }
                  page = this.pageArea.children.find(function (p) {
                     return p.oddOrEven === "any" && p.pagePosition === "any";
                  });
                  if (page) {
                     return page;
                  }
                  return this.pageArea.children[0];
               },
            },
         ]);
      })(XFAObject);
      var Para = /*#__PURE__*/ (function (_XFAObject63) {
         function Para(attributes) {
            var _this144;
            _classCallCheck(this, Para);
            _this144 = _callSuper(this, Para, [TEMPLATE_NS_ID, "para", true]);
            _this144.hAlign = getStringOption(attributes.hAlign, [
               "left",
               "center",
               "justify",
               "justifyAll",
               "radix",
               "right",
            ]);
            _this144.id = attributes.id || "";
            _this144.lineHeight = attributes.lineHeight
               ? getMeasurement(attributes.lineHeight, "0pt")
               : "";
            _this144.marginLeft = attributes.marginLeft
               ? getMeasurement(attributes.marginLeft, "0pt")
               : "";
            _this144.marginRight = attributes.marginRight
               ? getMeasurement(attributes.marginRight, "0pt")
               : "";
            _this144.orphans = getInteger({
               data: attributes.orphans,
               defaultValue: 0,
               validate: function validate(x) {
                  return x >= 0;
               },
            });
            _this144.preserve = attributes.preserve || "";
            _this144.radixOffset = attributes.radixOffset
               ? getMeasurement(attributes.radixOffset, "0pt")
               : "";
            _this144.spaceAbove = attributes.spaceAbove
               ? getMeasurement(attributes.spaceAbove, "0pt")
               : "";
            _this144.spaceBelow = attributes.spaceBelow
               ? getMeasurement(attributes.spaceBelow, "0pt")
               : "";
            _this144.tabDefault = attributes.tabDefault
               ? getMeasurement(_this144.tabDefault)
               : "";
            _this144.tabStops = (attributes.tabStops || "")
               .trim()
               .split(/\s+/)
               .map(function (x, i) {
                  return i % 2 === 1 ? getMeasurement(x) : x;
               });
            _this144.textIndent = attributes.textIndent
               ? getMeasurement(attributes.textIndent, "0pt")
               : "";
            _this144.use = attributes.use || "";
            _this144.usehref = attributes.usehref || "";
            _this144.vAlign = getStringOption(attributes.vAlign, [
               "top",
               "bottom",
               "middle",
            ]);
            _this144.widows = getInteger({
               data: attributes.widows,
               defaultValue: 0,
               validate: function validate(x) {
                  return x >= 0;
               },
            });
            _this144.hyphenation = null;
            return _this144;
         }
         _inherits(Para, _XFAObject63);
         return _createClass(Para, [
            {
               key: $toStyle,
               value: function value() {
                  var style = toStyle(this, "hAlign");
                  if (this.marginLeft !== "") {
                     style.paddingLeft = measureToString(this.marginLeft);
                  }
                  if (this.marginRight !== "") {
                     style.paddingight = measureToString(this.marginRight);
                  }
                  if (this.spaceAbove !== "") {
                     style.paddingTop = measureToString(this.spaceAbove);
                  }
                  if (this.spaceBelow !== "") {
                     style.paddingBottom = measureToString(this.spaceBelow);
                  }
                  if (this.textIndent !== "") {
                     style.textIndent = measureToString(this.textIndent);
                     fixTextIndent(style);
                  }
                  if (this.lineHeight > 0) {
                     style.lineHeight = measureToString(this.lineHeight);
                  }
                  if (this.tabDefault !== "") {
                     style.tabSize = measureToString(this.tabDefault);
                  }
                  if (this.tabStops.length > 0) {
                  }
                  if (this.hyphenatation) {
                     Object.assign(style, this.hyphenatation[$toStyle]());
                  }
                  return style;
               },
            },
         ]);
      })(XFAObject);
      var PasswordEdit = /*#__PURE__*/ (function (_XFAObject64) {
         function PasswordEdit(attributes) {
            var _this145;
            _classCallCheck(this, PasswordEdit);
            _this145 = _callSuper(this, PasswordEdit, [
               TEMPLATE_NS_ID,
               "passwordEdit",
               true,
            ]);
            _this145.hScrollPolicy = getStringOption(attributes.hScrollPolicy, [
               "auto",
               "off",
               "on",
            ]);
            _this145.id = attributes.id || "";
            _this145.passwordChar = attributes.passwordChar || "*";
            _this145.use = attributes.use || "";
            _this145.usehref = attributes.usehref || "";
            _this145.border = null;
            _this145.extras = null;
            _this145.margin = null;
            return _this145;
         }
         _inherits(PasswordEdit, _XFAObject64);
         return _createClass(PasswordEdit);
      })(XFAObject);
      var template_Pattern = /*#__PURE__*/ (function (_XFAObject65) {
         function template_Pattern(attributes) {
            var _this146;
            _classCallCheck(this, template_Pattern);
            _this146 = _callSuper(this, template_Pattern, [
               TEMPLATE_NS_ID,
               "pattern",
               true,
            ]);
            _this146.id = attributes.id || "";
            _this146.type = getStringOption(attributes.type, [
               "crossHatch",
               "crossDiagonal",
               "diagonalLeft",
               "diagonalRight",
               "horizontal",
               "vertical",
            ]);
            _this146.use = attributes.use || "";
            _this146.usehref = attributes.usehref || "";
            _this146.color = null;
            _this146.extras = null;
            return _this146;
         }
         _inherits(template_Pattern, _XFAObject65);
         return _createClass(template_Pattern, [
            {
               key: $toStyle,
               value: function value(startColor) {
                  startColor = startColor ? startColor[$toStyle]() : "#FFFFFF";
                  var endColor = this.color ? this.color[$toStyle]() : "#000000";
                  var width = 5;
                  var cmd = "repeating-linear-gradient";
                  var colors = ""
                     .concat(startColor, ",")
                     .concat(startColor, " ")
                     .concat(width, "px,")
                     .concat(endColor, " ")
                     .concat(width, "px,")
                     .concat(endColor, " ")
                     .concat(2 * width, "px");
                  switch (this.type) {
                     case "crossHatch":
                        return ""
                           .concat(cmd, "(to top,")
                           .concat(colors, ") ")
                           .concat(cmd, "(to right,")
                           .concat(colors, ")");
                     case "crossDiagonal":
                        return ""
                           .concat(cmd, "(45deg,")
                           .concat(colors, ") ")
                           .concat(cmd, "(-45deg,")
                           .concat(colors, ")");
                     case "diagonalLeft":
                        return "".concat(cmd, "(45deg,").concat(colors, ")");
                     case "diagonalRight":
                        return "".concat(cmd, "(-45deg,").concat(colors, ")");
                     case "horizontal":
                        return "".concat(cmd, "(to top,").concat(colors, ")");
                     case "vertical":
                        return "".concat(cmd, "(to right,").concat(colors, ")");
                  }
                  return "";
               },
            },
         ]);
      })(XFAObject);
      var Picture = /*#__PURE__*/ (function (_StringObject6) {
         function Picture(attributes) {
            var _this147;
            _classCallCheck(this, Picture);
            _this147 = _callSuper(this, Picture, [TEMPLATE_NS_ID, "picture"]);
            _this147.id = attributes.id || "";
            _this147.use = attributes.use || "";
            _this147.usehref = attributes.usehref || "";
            return _this147;
         }
         _inherits(Picture, _StringObject6);
         return _createClass(Picture);
      })(StringObject);
      var Proto = /*#__PURE__*/ (function (_XFAObject66) {
         function Proto(attributes) {
            var _this148;
            _classCallCheck(this, Proto);
            _this148 = _callSuper(this, Proto, [TEMPLATE_NS_ID, "proto", true]);
            _this148.appearanceFilter = new XFAObjectArray();
            _this148.arc = new XFAObjectArray();
            _this148.area = new XFAObjectArray();
            _this148.assist = new XFAObjectArray();
            _this148.barcode = new XFAObjectArray();
            _this148.bindItems = new XFAObjectArray();
            _this148.bookend = new XFAObjectArray();
            _this148["boolean"] = new XFAObjectArray();
            _this148.border = new XFAObjectArray();
            _this148["break"] = new XFAObjectArray();
            _this148.breakAfter = new XFAObjectArray();
            _this148.breakBefore = new XFAObjectArray();
            _this148.button = new XFAObjectArray();
            _this148.calculate = new XFAObjectArray();
            _this148.caption = new XFAObjectArray();
            _this148.certificate = new XFAObjectArray();
            _this148.certificates = new XFAObjectArray();
            _this148.checkButton = new XFAObjectArray();
            _this148.choiceList = new XFAObjectArray();
            _this148.color = new XFAObjectArray();
            _this148.comb = new XFAObjectArray();
            _this148.connect = new XFAObjectArray();
            _this148.contentArea = new XFAObjectArray();
            _this148.corner = new XFAObjectArray();
            _this148.date = new XFAObjectArray();
            _this148.dateTime = new XFAObjectArray();
            _this148.dateTimeEdit = new XFAObjectArray();
            _this148.decimal = new XFAObjectArray();
            _this148.defaultUi = new XFAObjectArray();
            _this148.desc = new XFAObjectArray();
            _this148.digestMethod = new XFAObjectArray();
            _this148.digestMethods = new XFAObjectArray();
            _this148.draw = new XFAObjectArray();
            _this148.edge = new XFAObjectArray();
            _this148.encoding = new XFAObjectArray();
            _this148.encodings = new XFAObjectArray();
            _this148.encrypt = new XFAObjectArray();
            _this148.encryptData = new XFAObjectArray();
            _this148.encryption = new XFAObjectArray();
            _this148.encryptionMethod = new XFAObjectArray();
            _this148.encryptionMethods = new XFAObjectArray();
            _this148.event = new XFAObjectArray();
            _this148.exData = new XFAObjectArray();
            _this148.exObject = new XFAObjectArray();
            _this148.exclGroup = new XFAObjectArray();
            _this148.execute = new XFAObjectArray();
            _this148.extras = new XFAObjectArray();
            _this148.field = new XFAObjectArray();
            _this148.fill = new XFAObjectArray();
            _this148.filter = new XFAObjectArray();
            _this148["float"] = new XFAObjectArray();
            _this148.font = new XFAObjectArray();
            _this148.format = new XFAObjectArray();
            _this148.handler = new XFAObjectArray();
            _this148.hyphenation = new XFAObjectArray();
            _this148.image = new XFAObjectArray();
            _this148.imageEdit = new XFAObjectArray();
            _this148.integer = new XFAObjectArray();
            _this148.issuers = new XFAObjectArray();
            _this148.items = new XFAObjectArray();
            _this148.keep = new XFAObjectArray();
            _this148.keyUsage = new XFAObjectArray();
            _this148.line = new XFAObjectArray();
            _this148.linear = new XFAObjectArray();
            _this148.lockDocument = new XFAObjectArray();
            _this148.manifest = new XFAObjectArray();
            _this148.margin = new XFAObjectArray();
            _this148.mdp = new XFAObjectArray();
            _this148.medium = new XFAObjectArray();
            _this148.message = new XFAObjectArray();
            _this148.numericEdit = new XFAObjectArray();
            _this148.occur = new XFAObjectArray();
            _this148.oid = new XFAObjectArray();
            _this148.oids = new XFAObjectArray();
            _this148.overflow = new XFAObjectArray();
            _this148.pageArea = new XFAObjectArray();
            _this148.pageSet = new XFAObjectArray();
            _this148.para = new XFAObjectArray();
            _this148.passwordEdit = new XFAObjectArray();
            _this148.pattern = new XFAObjectArray();
            _this148.picture = new XFAObjectArray();
            _this148.radial = new XFAObjectArray();
            _this148.reason = new XFAObjectArray();
            _this148.reasons = new XFAObjectArray();
            _this148.rectangle = new XFAObjectArray();
            _this148.ref = new XFAObjectArray();
            _this148.script = new XFAObjectArray();
            _this148.setProperty = new XFAObjectArray();
            _this148.signData = new XFAObjectArray();
            _this148.signature = new XFAObjectArray();
            _this148.signing = new XFAObjectArray();
            _this148.solid = new XFAObjectArray();
            _this148.speak = new XFAObjectArray();
            _this148.stipple = new XFAObjectArray();
            _this148.subform = new XFAObjectArray();
            _this148.subformSet = new XFAObjectArray();
            _this148.subjectDN = new XFAObjectArray();
            _this148.subjectDNs = new XFAObjectArray();
            _this148.submit = new XFAObjectArray();
            _this148.text = new XFAObjectArray();
            _this148.textEdit = new XFAObjectArray();
            _this148.time = new XFAObjectArray();
            _this148.timeStamp = new XFAObjectArray();
            _this148.toolTip = new XFAObjectArray();
            _this148.traversal = new XFAObjectArray();
            _this148.traverse = new XFAObjectArray();
            _this148.ui = new XFAObjectArray();
            _this148.validate = new XFAObjectArray();
            _this148.value = new XFAObjectArray();
            _this148.variables = new XFAObjectArray();
            return _this148;
         }
         _inherits(Proto, _XFAObject66);
         return _createClass(Proto);
      })(XFAObject);
      var Radial = /*#__PURE__*/ (function (_XFAObject67) {
         function Radial(attributes) {
            var _this149;
            _classCallCheck(this, Radial);
            _this149 = _callSuper(this, Radial, [TEMPLATE_NS_ID, "radial", true]);
            _this149.id = attributes.id || "";
            _this149.type = getStringOption(attributes.type, [
               "toEdge",
               "toCenter",
            ]);
            _this149.use = attributes.use || "";
            _this149.usehref = attributes.usehref || "";
            _this149.color = null;
            _this149.extras = null;
            return _this149;
         }
         _inherits(Radial, _XFAObject67);
         return _createClass(Radial, [
            {
               key: $toStyle,
               value: function value(startColor) {
                  startColor = startColor ? startColor[$toStyle]() : "#FFFFFF";
                  var endColor = this.color ? this.color[$toStyle]() : "#000000";
                  var colors =
                     this.type === "toEdge"
                        ? "".concat(startColor, ",").concat(endColor)
                        : "".concat(endColor, ",").concat(startColor);
                  return "radial-gradient(circle at center, ".concat(colors, ")");
               },
            },
         ]);
      })(XFAObject);
      var Reason = /*#__PURE__*/ (function (_StringObject7) {
         function Reason(attributes) {
            var _this150;
            _classCallCheck(this, Reason);
            _this150 = _callSuper(this, Reason, [TEMPLATE_NS_ID, "reason"]);
            _this150.id = attributes.id || "";
            _this150.name = attributes.name || "";
            _this150.use = attributes.use || "";
            _this150.usehref = attributes.usehref || "";
            return _this150;
         }
         _inherits(Reason, _StringObject7);
         return _createClass(Reason);
      })(StringObject);
      var Reasons = /*#__PURE__*/ (function (_XFAObject68) {
         function Reasons(attributes) {
            var _this151;
            _classCallCheck(this, Reasons);
            _this151 = _callSuper(this, Reasons, [TEMPLATE_NS_ID, "reasons", true]);
            _this151.id = attributes.id || "";
            _this151.type = getStringOption(attributes.type, [
               "optional",
               "required",
            ]);
            _this151.use = attributes.use || "";
            _this151.usehref = attributes.usehref || "";
            _this151.reason = new XFAObjectArray();
            return _this151;
         }
         _inherits(Reasons, _XFAObject68);
         return _createClass(Reasons);
      })(XFAObject);
      var Rectangle = /*#__PURE__*/ (function (_XFAObject69) {
         function Rectangle(attributes) {
            var _this152;
            _classCallCheck(this, Rectangle);
            _this152 = _callSuper(this, Rectangle, [
               TEMPLATE_NS_ID,
               "rectangle",
               true,
            ]);
            _this152.hand = getStringOption(attributes.hand, [
               "even",
               "left",
               "right",
            ]);
            _this152.id = attributes.id || "";
            _this152.use = attributes.use || "";
            _this152.usehref = attributes.usehref || "";
            _this152.corner = new XFAObjectArray(4);
            _this152.edge = new XFAObjectArray(4);
            _this152.fill = null;
            return _this152;
         }
         _inherits(Rectangle, _XFAObject69);
         return _createClass(Rectangle, [
            {
               key: $toHTML,
               value: function value() {
                  var _this$fill3;
                  var edge = this.edge.children.length
                     ? this.edge.children[0]
                     : new Edge({});
                  var edgeStyle = edge[$toStyle]();
                  var style = Object.create(null);
                  if (
                     ((_this$fill3 = this.fill) === null || _this$fill3 === void 0
                        ? void 0
                        : _this$fill3.presence) === "visible"
                  ) {
                     Object.assign(style, this.fill[$toStyle]());
                  } else {
                     style.fill = "transparent";
                  }
                  style.strokeWidth = measureToString(
                     edge.presence === "visible" ? edge.thickness : 0,
                  );
                  style.stroke = edgeStyle.color;
                  var corner = this.corner.children.length
                     ? this.corner.children[0]
                     : new Corner({});
                  var cornerStyle = corner[$toStyle]();
                  var rect = {
                     name: "rect",
                     attributes: {
                        xmlns: SVG_NS,
                        width: "100%",
                        height: "100%",
                        x: 0,
                        y: 0,
                        rx: cornerStyle.radius,
                        ry: cornerStyle.radius,
                        style: style,
                     },
                  };
                  var svg = {
                     name: "svg",
                     children: [rect],
                     attributes: {
                        xmlns: SVG_NS,
                        style: { overflow: "visible" },
                        width: "100%",
                        height: "100%",
                     },
                  };
                  var parent = this[$getParent]()[$getParent]();
                  if (hasMargin(parent)) {
                     return HTMLResult.success({
                        name: "div",
                        attributes: {
                           style: { display: "inline", width: "100%", height: "100%" },
                        },
                        children: [svg],
                     });
                  }
                  svg.attributes.style.position = "absolute";
                  return HTMLResult.success(svg);
               },
            },
         ]);
      })(XFAObject);
      var RefElement = /*#__PURE__*/ (function (_StringObject8) {
         function RefElement(attributes) {
            var _this153;
            _classCallCheck(this, RefElement);
            _this153 = _callSuper(this, RefElement, [TEMPLATE_NS_ID, "ref"]);
            _this153.id = attributes.id || "";
            _this153.use = attributes.use || "";
            _this153.usehref = attributes.usehref || "";
            return _this153;
         }
         _inherits(RefElement, _StringObject8);
         return _createClass(RefElement);
      })(StringObject);
      var Script = /*#__PURE__*/ (function (_StringObject9) {
         function Script(attributes) {
            var _this154;
            _classCallCheck(this, Script);
            _this154 = _callSuper(this, Script, [TEMPLATE_NS_ID, "script"]);
            _this154.binding = attributes.binding || "";
            _this154.contentType = attributes.contentType || "";
            _this154.id = attributes.id || "";
            _this154.name = attributes.name || "";
            _this154.runAt = getStringOption(attributes.runAt, [
               "client",
               "both",
               "server",
            ]);
            _this154.use = attributes.use || "";
            _this154.usehref = attributes.usehref || "";
            return _this154;
         }
         _inherits(Script, _StringObject9);
         return _createClass(Script);
      })(StringObject);
      var SetProperty = /*#__PURE__*/ (function (_XFAObject70) {
         function SetProperty(attributes) {
            var _this155;
            _classCallCheck(this, SetProperty);
            _this155 = _callSuper(this, SetProperty, [
               TEMPLATE_NS_ID,
               "setProperty",
            ]);
            _this155.connection = attributes.connection || "";
            _this155.ref = attributes.ref || "";
            _this155.target = attributes.target || "";
            return _this155;
         }
         _inherits(SetProperty, _XFAObject70);
         return _createClass(SetProperty);
      })(XFAObject);
      var SignData = /*#__PURE__*/ (function (_XFAObject71) {
         function SignData(attributes) {
            var _this156;
            _classCallCheck(this, SignData);
            _this156 = _callSuper(this, SignData, [
               TEMPLATE_NS_ID,
               "signData",
               true,
            ]);
            _this156.id = attributes.id || "";
            _this156.operation = getStringOption(attributes.operation, [
               "sign",
               "clear",
               "verify",
            ]);
            _this156.ref = attributes.ref || "";
            _this156.target = attributes.target || "";
            _this156.use = attributes.use || "";
            _this156.usehref = attributes.usehref || "";
            _this156.filter = null;
            _this156.manifest = null;
            return _this156;
         }
         _inherits(SignData, _XFAObject71);
         return _createClass(SignData);
      })(XFAObject);
      var Signature = /*#__PURE__*/ (function (_XFAObject72) {
         function Signature(attributes) {
            var _this157;
            _classCallCheck(this, Signature);
            _this157 = _callSuper(this, Signature, [
               TEMPLATE_NS_ID,
               "signature",
               true,
            ]);
            _this157.id = attributes.id || "";
            _this157.type = getStringOption(attributes.type, ["PDF1.3", "PDF1.6"]);
            _this157.use = attributes.use || "";
            _this157.usehref = attributes.usehref || "";
            _this157.border = null;
            _this157.extras = null;
            _this157.filter = null;
            _this157.manifest = null;
            _this157.margin = null;
            return _this157;
         }
         _inherits(Signature, _XFAObject72);
         return _createClass(Signature);
      })(XFAObject);
      var Signing = /*#__PURE__*/ (function (_XFAObject73) {
         function Signing(attributes) {
            var _this158;
            _classCallCheck(this, Signing);
            _this158 = _callSuper(this, Signing, [TEMPLATE_NS_ID, "signing", true]);
            _this158.id = attributes.id || "";
            _this158.type = getStringOption(attributes.type, [
               "optional",
               "required",
            ]);
            _this158.use = attributes.use || "";
            _this158.usehref = attributes.usehref || "";
            _this158.certificate = new XFAObjectArray();
            return _this158;
         }
         _inherits(Signing, _XFAObject73);
         return _createClass(Signing);
      })(XFAObject);
      var Solid = /*#__PURE__*/ (function (_XFAObject74) {
         function Solid(attributes) {
            var _this159;
            _classCallCheck(this, Solid);
            _this159 = _callSuper(this, Solid, [TEMPLATE_NS_ID, "solid", true]);
            _this159.id = attributes.id || "";
            _this159.use = attributes.use || "";
            _this159.usehref = attributes.usehref || "";
            _this159.extras = null;
            return _this159;
         }
         _inherits(Solid, _XFAObject74);
         return _createClass(Solid, [
            {
               key: $toStyle,
               value: function value(startColor) {
                  return startColor ? startColor[$toStyle]() : "#FFFFFF";
               },
            },
         ]);
      })(XFAObject);
      var Speak = /*#__PURE__*/ (function (_StringObject0) {
         function Speak(attributes) {
            var _this160;
            _classCallCheck(this, Speak);
            _this160 = _callSuper(this, Speak, [TEMPLATE_NS_ID, "speak"]);
            _this160.disable = getInteger({
               data: attributes.disable,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this160.id = attributes.id || "";
            _this160.priority = getStringOption(attributes.priority, [
               "custom",
               "caption",
               "name",
               "toolTip",
            ]);
            _this160.rid = attributes.rid || "";
            _this160.use = attributes.use || "";
            _this160.usehref = attributes.usehref || "";
            return _this160;
         }
         _inherits(Speak, _StringObject0);
         return _createClass(Speak);
      })(StringObject);
      var Stipple = /*#__PURE__*/ (function (_XFAObject75) {
         function Stipple(attributes) {
            var _this161;
            _classCallCheck(this, Stipple);
            _this161 = _callSuper(this, Stipple, [TEMPLATE_NS_ID, "stipple", true]);
            _this161.id = attributes.id || "";
            _this161.rate = getInteger({
               data: attributes.rate,
               defaultValue: 50,
               validate: function validate(x) {
                  return x >= 0 && x <= 100;
               },
            });
            _this161.use = attributes.use || "";
            _this161.usehref = attributes.usehref || "";
            _this161.color = null;
            _this161.extras = null;
            return _this161;
         }
         _inherits(Stipple, _XFAObject75);
         return _createClass(Stipple, [
            {
               key: $toStyle,
               value: function value(bgColor) {
                  var alpha = this.rate / 100;
                  return Util.makeHexColor(
                     Math.round(bgColor.value.r * (1 - alpha) + this.value.r * alpha),
                     Math.round(bgColor.value.g * (1 - alpha) + this.value.g * alpha),
                     Math.round(bgColor.value.b * (1 - alpha) + this.value.b * alpha),
                  );
               },
            },
         ]);
      })(XFAObject);
      var Subform = /*#__PURE__*/ (function (_XFAObject76) {
         function Subform(attributes) {
            var _this162;
            _classCallCheck(this, Subform);
            _this162 = _callSuper(this, Subform, [TEMPLATE_NS_ID, "subform", true]);
            _this162.access = getStringOption(attributes.access, [
               "open",
               "nonInteractive",
               "protected",
               "readOnly",
            ]);
            _this162.allowMacro = getInteger({
               data: attributes.allowMacro,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this162.anchorType = getStringOption(attributes.anchorType, [
               "topLeft",
               "bottomCenter",
               "bottomLeft",
               "bottomRight",
               "middleCenter",
               "middleLeft",
               "middleRight",
               "topCenter",
               "topRight",
            ]);
            _this162.colSpan = getInteger({
               data: attributes.colSpan,
               defaultValue: 1,
               validate: function validate(n) {
                  return n >= 1 || n === -1;
               },
            });
            _this162.columnWidths = (attributes.columnWidths || "")
               .trim()
               .split(/\s+/)
               .map(function (x) {
                  return x === "-1" ? -1 : getMeasurement(x);
               });
            _this162.h = attributes.h ? getMeasurement(attributes.h) : "";
            _this162.hAlign = getStringOption(attributes.hAlign, [
               "left",
               "center",
               "justify",
               "justifyAll",
               "radix",
               "right",
            ]);
            _this162.id = attributes.id || "";
            _this162.layout = getStringOption(attributes.layout, [
               "position",
               "lr-tb",
               "rl-row",
               "rl-tb",
               "row",
               "table",
               "tb",
            ]);
            _this162.locale = attributes.locale || "";
            _this162.maxH = getMeasurement(attributes.maxH, "0pt");
            _this162.maxW = getMeasurement(attributes.maxW, "0pt");
            _this162.mergeMode = getStringOption(attributes.mergeMode, [
               "consumeData",
               "matchTemplate",
            ]);
            _this162.minH = getMeasurement(attributes.minH, "0pt");
            _this162.minW = getMeasurement(attributes.minW, "0pt");
            _this162.name = attributes.name || "";
            _this162.presence = getStringOption(attributes.presence, [
               "visible",
               "hidden",
               "inactive",
               "invisible",
            ]);
            _this162.relevant = getRelevant(attributes.relevant);
            _this162.restoreState = getStringOption(attributes.restoreState, [
               "manual",
               "auto",
            ]);
            _this162.scope = getStringOption(attributes.scope, ["name", "none"]);
            _this162.use = attributes.use || "";
            _this162.usehref = attributes.usehref || "";
            _this162.w = attributes.w ? getMeasurement(attributes.w) : "";
            _this162.x = getMeasurement(attributes.x, "0pt");
            _this162.y = getMeasurement(attributes.y, "0pt");
            _this162.assist = null;
            _this162.bind = null;
            _this162.bookend = null;
            _this162.border = null;
            _this162["break"] = null;
            _this162.calculate = null;
            _this162.desc = null;
            _this162.extras = null;
            _this162.keep = null;
            _this162.margin = null;
            _this162.occur = null;
            _this162.overflow = null;
            _this162.pageSet = null;
            _this162.para = null;
            _this162.traversal = null;
            _this162.validate = null;
            _this162.variables = null;
            _this162.area = new XFAObjectArray();
            _this162.breakAfter = new XFAObjectArray();
            _this162.breakBefore = new XFAObjectArray();
            _this162.connect = new XFAObjectArray();
            _this162.draw = new XFAObjectArray();
            _this162.event = new XFAObjectArray();
            _this162.exObject = new XFAObjectArray();
            _this162.exclGroup = new XFAObjectArray();
            _this162.field = new XFAObjectArray();
            _this162.proto = new XFAObjectArray();
            _this162.setProperty = new XFAObjectArray();
            _this162.subform = new XFAObjectArray();
            _this162.subformSet = new XFAObjectArray();
            return _this162;
         }
         _inherits(Subform, _XFAObject76);
         return _createClass(Subform, [
            {
               key: $getSubformParent,
               value: function value() {
                  var parent = this[$getParent]();
                  if (parent instanceof SubformSet) {
                     return parent[$getSubformParent]();
                  }
                  return parent;
               },
            },
            {
               key: $isBindable,
               value: function value() {
                  return true;
               },
            },
            {
               key: $isThereMoreWidth,
               value: function value() {
                  return (
                     (this.layout.endsWith("-tb") &&
                        this[$extra].attempt === 0 &&
                        this[$extra].numberInLine > 0) ||
                     this[$getParent]()[$isThereMoreWidth]()
                  );
               },
            },
            {
               key: $getContainedChildren,
               value: /*#__PURE__*/ _regenerator().m(function value() {
                  return _regenerator().w(
                     function (_context43) {
                        while (1)
                           switch (_context43.n) {
                              case 0:
                                 return _context43.d(
                                    _regeneratorValues(getContainedChildren(this)),
                                    1,
                                 );
                              case 1:
                                 return _context43.a(2);
                           }
                     },
                     value,
                     this,
                  );
               }),
            },
            {
               key: $flushHTML,
               value: function value() {
                  return flushHTML(this);
               },
            },
            {
               key: $addHTML,
               value: function value(html, bbox) {
                  addHTML(this, html, bbox);
               },
            },
            {
               key: $getAvailableSpace,
               value: function value() {
                  return getAvailableSpace(this);
               },
            },
            {
               key: $isSplittable,
               value: function value() {
                  var _parent$layout4;
                  var parent = this[$getSubformParent]();
                  if (!parent[$isSplittable]()) {
                     return false;
                  }
                  if (this[$extra]._isSplittable !== undefined) {
                     return this[$extra]._isSplittable;
                  }
                  if (this.layout === "position" || this.layout.includes("row")) {
                     this[$extra]._isSplittable = false;
                     return false;
                  }
                  if (this.keep && this.keep.intact !== "none") {
                     this[$extra]._isSplittable = false;
                     return false;
                  }
                  if (
                     (_parent$layout4 = parent.layout) !== null &&
                     _parent$layout4 !== void 0 &&
                     _parent$layout4.endsWith("-tb") &&
                     parent[$extra].numberInLine !== 0
                  ) {
                     return false;
                  }
                  this[$extra]._isSplittable = true;
                  return true;
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  var _this$$extra;
                  setTabIndex(this);
                  if (this["break"]) {
                     if (
                        this["break"].after !== "auto" ||
                        this["break"].afterTarget !== ""
                     ) {
                        var node = new BreakAfter({
                           targetType: this["break"].after,
                           target: this["break"].afterTarget,
                           startNew: this["break"].startNew.toString(),
                        });
                        node[$globalData] = this[$globalData];
                        this[$appendChild](node);
                        this.breakAfter.push(node);
                     }
                     if (
                        this["break"].before !== "auto" ||
                        this["break"].beforeTarget !== ""
                     ) {
                        var _node = new BreakBefore({
                           targetType: this["break"].before,
                           target: this["break"].beforeTarget,
                           startNew: this["break"].startNew.toString(),
                        });
                        _node[$globalData] = this[$globalData];
                        this[$appendChild](_node);
                        this.breakBefore.push(_node);
                     }
                     if (this["break"].overflowTarget !== "") {
                        var _node2 = new Overflow({
                           target: this["break"].overflowTarget,
                           leader: this["break"].overflowLeader,
                           trailer: this["break"].overflowTrailer,
                        });
                        _node2[$globalData] = this[$globalData];
                        this[$appendChild](_node2);
                        this.overflow.push(_node2);
                     }
                     this[$removeChild](this["break"]);
                     this["break"] = null;
                  }
                  if (this.presence === "hidden" || this.presence === "inactive") {
                     return HTMLResult.EMPTY;
                  }
                  if (
                     this.breakBefore.children.length > 1 ||
                     this.breakAfter.children.length > 1
                  ) {
                     warn(
                        "XFA - Several breakBefore or breakAfter in subforms: please file a bug.",
                     );
                  }
                  if (this.breakBefore.children.length >= 1) {
                     var breakBefore = this.breakBefore.children[0];
                     if (handleBreak(breakBefore)) {
                        return HTMLResult.breakNode(breakBefore);
                     }
                  }
                  if (
                     (_this$$extra = this[$extra]) !== null &&
                     _this$$extra !== void 0 &&
                     _this$$extra.afterBreakAfter
                  ) {
                     return HTMLResult.EMPTY;
                  }
                  fixDimensions(this);
                  var children = [];
                  var attributes = { id: this[$uid], class: [] };
                  setAccess(this, attributes["class"]);
                  if (!this[$extra]) {
                     this[$extra] = Object.create(null);
                  }
                  Object.assign(this[$extra], {
                     children: children,
                     line: null,
                     attributes: attributes,
                     attempt: 0,
                     numberInLine: 0,
                     availableSpace: {
                        width: Math.min(this.w || Infinity, availableSpace.width),
                        height: Math.min(this.h || Infinity, availableSpace.height),
                     },
                     width: 0,
                     height: 0,
                     prevHeight: 0,
                     currentWidth: 0,
                  });
                  var root = this[$getTemplateRoot]();
                  var savedNoLayoutFailure = root[$extra].noLayoutFailure;
                  var isSplittable = this[$isSplittable]();
                  if (!isSplittable) {
                     setFirstUnsplittable(this);
                  }
                  if (!checkDimensions(this, availableSpace)) {
                     return HTMLResult.FAILURE;
                  }
                  var filter = new Set([
                     "area",
                     "draw",
                     "exclGroup",
                     "field",
                     "subform",
                     "subformSet",
                  ]);
                  if (this.layout.includes("row")) {
                     var columnWidths = this[$getSubformParent]().columnWidths;
                     if (Array.isArray(columnWidths) && columnWidths.length > 0) {
                        this[$extra].columnWidths = columnWidths;
                        this[$extra].currentColumn = 0;
                     }
                  }
                  var style = toStyle(
                     this,
                     "anchorType",
                     "dimensions",
                     "position",
                     "presence",
                     "border",
                     "margin",
                     "hAlign",
                  );
                  var classNames = ["xfaSubform"];
                  var cl = layoutClass(this);
                  if (cl) {
                     classNames.push(cl);
                  }
                  attributes.style = style;
                  attributes["class"] = classNames;
                  if (this.name) {
                     attributes.xfaName = this.name;
                  }
                  if (this.overflow) {
                     var overflowExtra = this.overflow[$getExtra]();
                     if (overflowExtra.addLeader) {
                        overflowExtra.addLeader = false;
                        handleOverflow(this, overflowExtra.leader, availableSpace);
                     }
                  }
                  this[$pushPara]();
                  var isLrTb = this.layout === "lr-tb" || this.layout === "rl-tb";
                  var maxRun = isLrTb ? MAX_ATTEMPTS_FOR_LRTB_LAYOUT : 1;
                  for (; this[$extra].attempt < maxRun; this[$extra].attempt++) {
                     if (
                        isLrTb &&
                        this[$extra].attempt === MAX_ATTEMPTS_FOR_LRTB_LAYOUT - 1
                     ) {
                        this[$extra].numberInLine = 0;
                     }
                     var _result = this[$childrenToHTML]({
                        filter: filter,
                        include: true,
                     });
                     if (_result.success) {
                        break;
                     }
                     if (_result.isBreak()) {
                        this[$popPara]();
                        return _result;
                     }
                     if (
                        isLrTb &&
                        this[$extra].attempt === 0 &&
                        this[$extra].numberInLine === 0 &&
                        !root[$extra].noLayoutFailure
                     ) {
                        this[$extra].attempt = maxRun;
                        break;
                     }
                  }
                  this[$popPara]();
                  if (!isSplittable) {
                     unsetFirstUnsplittable(this);
                  }
                  root[$extra].noLayoutFailure = savedNoLayoutFailure;
                  if (this[$extra].attempt === maxRun) {
                     if (this.overflow) {
                        this[$getTemplateRoot]()[$extra].overflowNode = this.overflow;
                     }
                     if (!isSplittable) {
                        delete this[$extra];
                     }
                     return HTMLResult.FAILURE;
                  }
                  if (this.overflow) {
                     var _overflowExtra = this.overflow[$getExtra]();
                     if (_overflowExtra.addTrailer) {
                        _overflowExtra.addTrailer = false;
                        handleOverflow(this, _overflowExtra.trailer, availableSpace);
                     }
                  }
                  var marginH = 0;
                  var marginV = 0;
                  if (this.margin) {
                     marginH = this.margin.leftInset + this.margin.rightInset;
                     marginV = this.margin.topInset + this.margin.bottomInset;
                  }
                  var width = Math.max(this[$extra].width + marginH, this.w || 0);
                  var height = Math.max(this[$extra].height + marginV, this.h || 0);
                  var bbox = [this.x, this.y, width, height];
                  if (this.w === "") {
                     style.width = measureToString(width);
                  }
                  if (this.h === "") {
                     style.height = measureToString(height);
                  }
                  if (
                     (style.width === "0px" || style.height === "0px") &&
                     children.length === 0
                  ) {
                     return HTMLResult.EMPTY;
                  }
                  var html = {
                     name: "div",
                     attributes: attributes,
                     children: children,
                  };
                  applyAssist(this, attributes);
                  var result = HTMLResult.success(createWrapper(this, html), bbox);
                  if (this.breakAfter.children.length >= 1) {
                     var breakAfter = this.breakAfter.children[0];
                     if (handleBreak(breakAfter)) {
                        this[$extra].afterBreakAfter = result;
                        return HTMLResult.breakNode(breakAfter);
                     }
                  }
                  delete this[$extra];
                  return result;
               },
            },
         ]);
      })(XFAObject);
      var SubformSet = /*#__PURE__*/ (function (_XFAObject77) {
         function SubformSet(attributes) {
            var _this163;
            _classCallCheck(this, SubformSet);
            _this163 = _callSuper(this, SubformSet, [
               TEMPLATE_NS_ID,
               "subformSet",
               true,
            ]);
            _this163.id = attributes.id || "";
            _this163.name = attributes.name || "";
            _this163.relation = getStringOption(attributes.relation, [
               "ordered",
               "choice",
               "unordered",
            ]);
            _this163.relevant = getRelevant(attributes.relevant);
            _this163.use = attributes.use || "";
            _this163.usehref = attributes.usehref || "";
            _this163.bookend = null;
            _this163["break"] = null;
            _this163.desc = null;
            _this163.extras = null;
            _this163.occur = null;
            _this163.overflow = null;
            _this163.breakAfter = new XFAObjectArray();
            _this163.breakBefore = new XFAObjectArray();
            _this163.subform = new XFAObjectArray();
            _this163.subformSet = new XFAObjectArray();
            return _this163;
         }
         _inherits(SubformSet, _XFAObject77);
         return _createClass(SubformSet, [
            {
               key: $getContainedChildren,
               value: /*#__PURE__*/ _regenerator().m(function value() {
                  return _regenerator().w(
                     function (_context44) {
                        while (1)
                           switch (_context44.n) {
                              case 0:
                                 return _context44.d(
                                    _regeneratorValues(getContainedChildren(this)),
                                    1,
                                 );
                              case 1:
                                 return _context44.a(2);
                           }
                     },
                     value,
                     this,
                  );
               }),
            },
            {
               key: $getSubformParent,
               value: function value() {
                  var parent = this[$getParent]();
                  while (!(parent instanceof Subform)) {
                     parent = parent[$getParent]();
                  }
                  return parent;
               },
            },
            {
               key: $isBindable,
               value: function value() {
                  return true;
               },
            },
         ]);
      })(XFAObject);
      var SubjectDN = /*#__PURE__*/ (function (_ContentObject1) {
         function SubjectDN(attributes) {
            var _this164;
            _classCallCheck(this, SubjectDN);
            _this164 = _callSuper(this, SubjectDN, [TEMPLATE_NS_ID, "subjectDN"]);
            _this164.delimiter = attributes.delimiter || ",";
            _this164.id = attributes.id || "";
            _this164.name = attributes.name || "";
            _this164.use = attributes.use || "";
            _this164.usehref = attributes.usehref || "";
            return _this164;
         }
         _inherits(SubjectDN, _ContentObject1);
         return _createClass(SubjectDN, [
            {
               key: $finalize,
               value: function value() {
                  this[$content] = new Map(
                     this[$content].split(this.delimiter).map(function (kv) {
                        kv = kv.split("=", 2);
                        kv[0] = kv[0].trim();
                        return kv;
                     }),
                  );
               },
            },
         ]);
      })(ContentObject);
      var SubjectDNs = /*#__PURE__*/ (function (_XFAObject78) {
         function SubjectDNs(attributes) {
            var _this165;
            _classCallCheck(this, SubjectDNs);
            _this165 = _callSuper(this, SubjectDNs, [
               TEMPLATE_NS_ID,
               "subjectDNs",
               true,
            ]);
            _this165.id = attributes.id || "";
            _this165.type = getStringOption(attributes.type, [
               "optional",
               "required",
            ]);
            _this165.use = attributes.use || "";
            _this165.usehref = attributes.usehref || "";
            _this165.subjectDN = new XFAObjectArray();
            return _this165;
         }
         _inherits(SubjectDNs, _XFAObject78);
         return _createClass(SubjectDNs);
      })(XFAObject);
      var Submit = /*#__PURE__*/ (function (_XFAObject79) {
         function Submit(attributes) {
            var _this166;
            _classCallCheck(this, Submit);
            _this166 = _callSuper(this, Submit, [TEMPLATE_NS_ID, "submit", true]);
            _this166.embedPDF = getInteger({
               data: attributes.embedPDF,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this166.format = getStringOption(attributes.format, [
               "xdp",
               "formdata",
               "pdf",
               "urlencoded",
               "xfd",
               "xml",
            ]);
            _this166.id = attributes.id || "";
            _this166.target = attributes.target || "";
            _this166.textEncoding = getKeyword({
               data: attributes.textEncoding
                  ? attributes.textEncoding.toLowerCase()
                  : "",
               defaultValue: "",
               validate: function validate(k) {
                  return (
                     [
                        "utf-8",
                        "big-five",
                        "fontspecific",
                        "gbk",
                        "gb-18030",
                        "gb-2312",
                        "ksc-5601",
                        "none",
                        "shift-jis",
                        "ucs-2",
                        "utf-16",
                     ].includes(k) || k.match(/iso-8859-\d{2}/)
                  );
               },
            });
            _this166.use = attributes.use || "";
            _this166.usehref = attributes.usehref || "";
            _this166.xdpContent = attributes.xdpContent || "";
            _this166.encrypt = null;
            _this166.encryptData = new XFAObjectArray();
            _this166.signData = new XFAObjectArray();
            return _this166;
         }
         _inherits(Submit, _XFAObject79);
         return _createClass(Submit);
      })(XFAObject);
      var Template = /*#__PURE__*/ (function (_XFAObject80) {
         function Template(attributes) {
            var _this167;
            _classCallCheck(this, Template);
            _this167 = _callSuper(this, Template, [
               TEMPLATE_NS_ID,
               "template",
               true,
            ]);
            _this167.baseProfile = getStringOption(attributes.baseProfile, [
               "full",
               "interactiveForms",
            ]);
            _this167.extras = null;
            _this167.subform = new XFAObjectArray();
            return _this167;
         }
         _inherits(Template, _XFAObject80);
         return _createClass(Template, [
            {
               key: $finalize,
               value: function value() {
                  if (this.subform.children.length === 0) {
                     warn("XFA - No subforms in template node.");
                  }
                  if (this.subform.children.length >= 2) {
                     warn(
                        "XFA - Several subforms in template node: please file a bug.",
                     );
                  }
                  this[$tabIndex] = DEFAULT_TAB_INDEX;
               },
            },
            {
               key: $isSplittable,
               value: function value() {
                  return true;
               },
            },
            {
               key: $searchNode,
               value: function value(expr, container) {
                  if (expr.startsWith("#")) {
                     return [this[$ids].get(expr.slice(1))];
                  }
                  return searchNode(this, container, expr, true, true);
               },
            },
            {
               key: $toPages,
               value: /*#__PURE__*/ _regenerator().m(function value() {
                  var _root$break,
                     _root$subform$childre,
                     _this168 = this;
                  var root,
                     pageAreas,
                     mainHtml,
                     pageArea,
                     breakBefore,
                     breakBeforeTarget,
                     target,
                     pageAreaParent,
                     targetPageArea,
                     leader,
                     trailer,
                     hasSomething,
                     hasSomethingCounter,
                     startIndex,
                     _loop4,
                     _ret2;
                  return _regenerator().w(
                     function (_context46) {
                        while (1)
                           switch (_context46.n) {
                              case 0:
                                 if (this.subform.children.length) {
                                    _context46.n = 1;
                                    break;
                                 }
                                 return _context46.a(
                                    2,
                                    HTMLResult.success({ name: "div", children: [] }),
                                 );
                              case 1:
                                 this[$extra] = {
                                    overflowNode: null,
                                    firstUnsplittable: null,
                                    currentContentArea: null,
                                    currentPageArea: null,
                                    noLayoutFailure: false,
                                    pageNumber: 1,
                                    pagePosition: "first",
                                    oddOrEven: "odd",
                                    blankOrNotBlank: "nonBlank",
                                    paraStack: [],
                                 };
                                 root = this.subform.children[0];
                                 root.pageSet[$cleanPage]();
                                 pageAreas = root.pageSet.pageArea.children;
                                 mainHtml = { name: "div", children: [] };
                                 pageArea = null;
                                 breakBefore = null;
                                 breakBeforeTarget = null;
                                 if (root.breakBefore.children.length >= 1) {
                                    breakBefore = root.breakBefore.children[0];
                                    breakBeforeTarget = breakBefore.target;
                                 } else if (
                                    root.subform.children.length >= 1 &&
                                    root.subform.children[0].breakBefore.children.length >=
                                    1
                                 ) {
                                    breakBefore =
                                       root.subform.children[0].breakBefore.children[0];
                                    breakBeforeTarget = breakBefore.target;
                                 } else if (
                                    (_root$break = root["break"]) !== null &&
                                    _root$break !== void 0 &&
                                    _root$break.beforeTarget
                                 ) {
                                    breakBefore = root["break"];
                                    breakBeforeTarget = breakBefore.beforeTarget;
                                 } else if (
                                    root.subform.children.length >= 1 &&
                                    (_root$subform$childre =
                                       root.subform.children[0]["break"]) !== null &&
                                    _root$subform$childre !== void 0 &&
                                    _root$subform$childre.beforeTarget
                                 ) {
                                    breakBefore = root.subform.children[0]["break"];
                                    breakBeforeTarget = breakBefore.beforeTarget;
                                 }
                                 if (breakBefore) {
                                    target = this[$searchNode](
                                       breakBeforeTarget,
                                       breakBefore[$getParent](),
                                    );
                                    if (target instanceof PageArea) {
                                       pageArea = target;
                                       breakBefore[$extra] = {};
                                    }
                                 }
                                 if (!pageArea) {
                                    pageArea = pageAreas[0];
                                 }
                                 pageArea[$extra] = { numberOfUse: 1 };
                                 pageAreaParent = pageArea[$getParent]();
                                 pageAreaParent[$extra] = {
                                    numberOfUse: 1,
                                    pageIndex:
                                       pageAreaParent.pageArea.children.indexOf(pageArea),
                                    pageSetIndex: 0,
                                 };
                                 leader = null;
                                 trailer = null;
                                 hasSomething = true;
                                 hasSomethingCounter = 0;
                                 startIndex = 0;
                                 _loop4 = /*#__PURE__*/ _regenerator().m(
                                    function _loop4() {
                                       var page,
                                          contentAreas,
                                          htmlContentAreas,
                                          flush,
                                          i,
                                          ii,
                                          contentArea,
                                          space,
                                          html,
                                          _html$html$children,
                                          node,
                                          _node3,
                                          overflowExtra,
                                          _target,
                                          currentIndex,
                                          index;
                                       return _regenerator().w(function (_context45) {
                                          while (1)
                                             switch (_context45.n) {
                                                case 0:
                                                   if (hasSomething) {
                                                      _context45.n = 2;
                                                      break;
                                                   }
                                                   mainHtml.children.pop();
                                                   if (
                                                      !(++hasSomethingCounter === MAX_EMPTY_PAGES)
                                                   ) {
                                                      _context45.n = 1;
                                                      break;
                                                   }
                                                   warn(
                                                      "XFA - Something goes wrong: please file a bug.",
                                                   );
                                                   return _context45.a(2, { v: mainHtml });
                                                case 1:
                                                   _context45.n = 3;
                                                   break;
                                                case 2:
                                                   hasSomethingCounter = 0;
                                                case 3:
                                                   targetPageArea = null;
                                                   _this168[$extra].currentPageArea = pageArea;
                                                   page = pageArea[$toHTML]().html;
                                                   mainHtml.children.push(page);
                                                   if (leader) {
                                                      _this168[$extra].noLayoutFailure = true;
                                                      page.children.push(
                                                         leader[$toHTML](pageArea[$extra].space)
                                                            .html,
                                                      );
                                                      leader = null;
                                                   }
                                                   if (trailer) {
                                                      _this168[$extra].noLayoutFailure = true;
                                                      page.children.push(
                                                         trailer[$toHTML](pageArea[$extra].space)
                                                            .html,
                                                      );
                                                      trailer = null;
                                                   }
                                                   contentAreas = pageArea.contentArea.children;
                                                   htmlContentAreas = page.children.filter(
                                                      function (node) {
                                                         return node.attributes["class"].includes(
                                                            "xfaContentarea",
                                                         );
                                                      },
                                                   );
                                                   hasSomething = false;
                                                   _this168[$extra].firstUnsplittable = null;
                                                   _this168[$extra].noLayoutFailure = false;
                                                   flush = function flush(index) {
                                                      var html = root[$flushHTML]();
                                                      if (html) {
                                                         var _html$children;
                                                         hasSomething ||
                                                         (hasSomething =
                                                            ((_html$children = html.children) ===
                                                            null || _html$children === void 0
                                                               ? void 0
                                                               : _html$children.length) > 0);
                                                         htmlContentAreas[index].children.push(
                                                            html,
                                                         );
                                                      }
                                                   };
                                                   ((i = startIndex),
                                                      (ii = contentAreas.length));
                                                case 4:
                                                   if (!(i < ii)) {
                                                      _context45.n = 10;
                                                      break;
                                                   }
                                                   contentArea = _this168[
                                                      $extra
                                                      ].currentContentArea = contentAreas[i];
                                                   space = {
                                                      width: contentArea.w,
                                                      height: contentArea.h,
                                                   };
                                                   startIndex = 0;
                                                   if (leader) {
                                                      htmlContentAreas[i].children.push(
                                                         leader[$toHTML](space).html,
                                                      );
                                                      leader = null;
                                                   }
                                                   if (trailer) {
                                                      htmlContentAreas[i].children.push(
                                                         trailer[$toHTML](space).html,
                                                      );
                                                      trailer = null;
                                                   }
                                                   html = root[$toHTML](space);
                                                   if (!html.success) {
                                                      _context45.n = 5;
                                                      break;
                                                   }
                                                   if (html.html) {
                                                      hasSomething ||
                                                      (hasSomething =
                                                         ((_html$html$children =
                                                            html.html.children) === null ||
                                                         _html$html$children === void 0
                                                            ? void 0
                                                            : _html$html$children.length) > 0);
                                                      htmlContentAreas[i].children.push(
                                                         html.html,
                                                      );
                                                   } else if (
                                                      !hasSomething &&
                                                      mainHtml.children.length > 1
                                                   ) {
                                                      mainHtml.children.pop();
                                                   }
                                                   return _context45.a(2, { v: mainHtml });
                                                case 5:
                                                   if (!html.isBreak()) {
                                                      _context45.n = 7;
                                                      break;
                                                   }
                                                   node = html.breakNode;
                                                   flush(i);
                                                   if (!(node.targetType === "auto")) {
                                                      _context45.n = 6;
                                                      break;
                                                   }
                                                   return _context45.a(3, 9);
                                                case 6:
                                                   if (node.leader) {
                                                      leader = _this168[$searchNode](
                                                         node.leader,
                                                         node[$getParent](),
                                                      );
                                                      leader = leader ? leader[0] : null;
                                                   }
                                                   if (node.trailer) {
                                                      trailer = _this168[$searchNode](
                                                         node.trailer,
                                                         node[$getParent](),
                                                      );
                                                      trailer = trailer ? trailer[0] : null;
                                                   }
                                                   if (node.targetType === "pageArea") {
                                                      targetPageArea = node[$extra].target;
                                                      i = Infinity;
                                                   } else if (!node[$extra].target) {
                                                      i = node[$extra].index;
                                                   } else {
                                                      targetPageArea = node[$extra].target;
                                                      startIndex = node[$extra].index + 1;
                                                      i = Infinity;
                                                   }
                                                   return _context45.a(3, 9);
                                                case 7:
                                                   if (!_this168[$extra].overflowNode) {
                                                      _context45.n = 8;
                                                      break;
                                                   }
                                                   _node3 = _this168[$extra].overflowNode;
                                                   _this168[$extra].overflowNode = null;
                                                   overflowExtra = _node3[$getExtra]();
                                                   _target = overflowExtra.target;
                                                   overflowExtra.addLeader =
                                                      overflowExtra.leader !== null;
                                                   overflowExtra.addTrailer =
                                                      overflowExtra.trailer !== null;
                                                   flush(i);
                                                   currentIndex = i;
                                                   i = Infinity;
                                                   if (_target instanceof PageArea) {
                                                      targetPageArea = _target;
                                                   } else if (_target instanceof ContentArea) {
                                                      index = contentAreas.indexOf(_target);
                                                      if (index !== -1) {
                                                         if (index > currentIndex) {
                                                            i = index - 1;
                                                         } else {
                                                            startIndex = index;
                                                         }
                                                      } else {
                                                         targetPageArea = _target[$getParent]();
                                                         startIndex =
                                                            targetPageArea.contentArea.children.indexOf(
                                                               _target,
                                                            );
                                                      }
                                                   }
                                                   return _context45.a(3, 9);
                                                case 8:
                                                   flush(i);
                                                case 9:
                                                   i++;
                                                   _context45.n = 4;
                                                   break;
                                                case 10:
                                                   _this168[$extra].pageNumber += 1;
                                                   if (targetPageArea) {
                                                      if (targetPageArea[$isUsable]()) {
                                                         targetPageArea[$extra].numberOfUse += 1;
                                                      } else {
                                                         targetPageArea = null;
                                                      }
                                                   }
                                                   pageArea =
                                                      targetPageArea || pageArea[$getNextPage]();
                                                   _context45.n = 11;
                                                   return null;
                                                case 11:
                                                   return _context45.a(2);
                                             }
                                       }, _loop4);
                                    },
                                 );
                              case 2:
                                 if (!true) {
                                    _context46.n = 5;
                                    break;
                                 }
                                 return _context46.d(_regeneratorValues(_loop4()), 3);
                              case 3:
                                 _ret2 = _context46.v;
                                 if (!_ret2) {
                                    _context46.n = 4;
                                    break;
                                 }
                                 return _context46.a(2, _ret2.v);
                              case 4:
                                 _context46.n = 2;
                                 break;
                              case 5:
                                 return _context46.a(2);
                           }
                     },
                     value,
                     this,
                  );
               }),
            },
         ]);
      })(XFAObject);
      var Text = /*#__PURE__*/ (function (_ContentObject10) {
         function Text(attributes) {
            var _this169;
            _classCallCheck(this, Text);
            _this169 = _callSuper(this, Text, [TEMPLATE_NS_ID, "text"]);
            _this169.id = attributes.id || "";
            _this169.maxChars = getInteger({
               data: attributes.maxChars,
               defaultValue: 0,
               validate: function validate(x) {
                  return x >= 0;
               },
            });
            _this169.name = attributes.name || "";
            _this169.rid = attributes.rid || "";
            _this169.use = attributes.use || "";
            _this169.usehref = attributes.usehref || "";
            return _this169;
         }
         _inherits(Text, _ContentObject10);
         return _createClass(Text, [
            {
               key: $acceptWhitespace,
               value: function value() {
                  return true;
               },
            },
            {
               key: $onChild,
               value: function value(child) {
                  if (child[$namespaceId] === NamespaceIds.xhtml.id) {
                     this[$content] = child;
                     return true;
                  }
                  warn(
                     "XFA - Invalid content in Text: ".concat(child[$nodeName], "."),
                  );
                  return false;
               },
            },
            {
               key: $onText,
               value: function value(str) {
                  if (this[$content] instanceof XFAObject) {
                     return;
                  }
                  _superPropGet(Text, $onText, this, 3)([str]);
               },
            },
            {
               key: $finalize,
               value: function value() {
                  if (typeof this[$content] === "string") {
                     this[$content] = this[$content].replaceAll("\r\n", "\n");
                  }
               },
            },
            {
               key: $getExtra,
               value: function value() {
                  if (typeof this[$content] === "string") {
                     return this[$content]
                        .split(/[\u2029\u2028\n]/)
                        .reduce(function (acc, line) {
                           if (line) {
                              acc.push(line);
                           }
                           return acc;
                        }, [])
                        .join("\n");
                  }
                  return this[$content][$text]();
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  if (typeof this[$content] === "string") {
                     var html = valueToHtml(this[$content]).html;
                     if (this[$content].includes("\u2029")) {
                        html.name = "div";
                        html.children = [];
                        this[$content]
                           .split("\u2029")
                           .map(function (para) {
                              return para.split(/[\u2028\n]/).reduce(function (
                                 acc,
                                 line,
                              ) {
                                 acc.push({ name: "span", value: line }, { name: "br" });
                                 return acc;
                              }, []);
                           })
                           .forEach(function (lines) {
                              html.children.push({ name: "p", children: lines });
                           });
                     } else if (/[\u2028\n]/.test(this[$content])) {
                        html.name = "div";
                        html.children = [];
                        this[$content].split(/[\u2028\n]/).forEach(function (line) {
                           html.children.push(
                              { name: "span", value: line },
                              { name: "br" },
                           );
                        });
                     }
                     return HTMLResult.success(html);
                  }
                  return this[$content][$toHTML](availableSpace);
               },
            },
         ]);
      })(ContentObject);
      var TextEdit = /*#__PURE__*/ (function (_XFAObject81) {
         function TextEdit(attributes) {
            var _this170;
            _classCallCheck(this, TextEdit);
            _this170 = _callSuper(this, TextEdit, [
               TEMPLATE_NS_ID,
               "textEdit",
               true,
            ]);
            _this170.allowRichText = getInteger({
               data: attributes.allowRichText,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this170.hScrollPolicy = getStringOption(attributes.hScrollPolicy, [
               "auto",
               "off",
               "on",
            ]);
            _this170.id = attributes.id || "";
            _this170.multiLine = getInteger({
               data: attributes.multiLine,
               defaultValue: "",
               validate: function validate(x) {
                  return x === 0 || x === 1;
               },
            });
            _this170.use = attributes.use || "";
            _this170.usehref = attributes.usehref || "";
            _this170.vScrollPolicy = getStringOption(attributes.vScrollPolicy, [
               "auto",
               "off",
               "on",
            ]);
            _this170.border = null;
            _this170.comb = null;
            _this170.extras = null;
            _this170.margin = null;
            return _this170;
         }
         _inherits(TextEdit, _XFAObject81);
         return _createClass(TextEdit, [
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  var style = toStyle(this, "border", "font", "margin");
                  var html;
                  var field = this[$getParent]()[$getParent]();
                  if (this.multiLine === "") {
                     this.multiLine = field instanceof Draw ? 1 : 0;
                  }
                  if (this.multiLine === 1) {
                     var _field$$data5;
                     html = {
                        name: "textarea",
                        attributes: {
                           dataId:
                              ((_field$$data5 = field[$data]) === null ||
                              _field$$data5 === void 0
                                 ? void 0
                                 : _field$$data5[$uid]) || field[$uid],
                           fieldId: field[$uid],
                           class: ["xfaTextfield"],
                           style: style,
                           "aria-label": ariaLabel(field),
                           "aria-required": false,
                        },
                     };
                  } else {
                     var _field$$data6;
                     html = {
                        name: "input",
                        attributes: {
                           type: "text",
                           dataId:
                              ((_field$$data6 = field[$data]) === null ||
                              _field$$data6 === void 0
                                 ? void 0
                                 : _field$$data6[$uid]) || field[$uid],
                           fieldId: field[$uid],
                           class: ["xfaTextfield"],
                           style: style,
                           "aria-label": ariaLabel(field),
                           "aria-required": false,
                        },
                     };
                  }
                  if (isRequired(field)) {
                     html.attributes["aria-required"] = true;
                     html.attributes.required = true;
                  }
                  return HTMLResult.success({
                     name: "label",
                     attributes: { class: ["xfaLabel"] },
                     children: [html],
                  });
               },
            },
         ]);
      })(XFAObject);
      var Time = /*#__PURE__*/ (function (_StringObject1) {
         function Time(attributes) {
            var _this171;
            _classCallCheck(this, Time);
            _this171 = _callSuper(this, Time, [TEMPLATE_NS_ID, "time"]);
            _this171.id = attributes.id || "";
            _this171.name = attributes.name || "";
            _this171.use = attributes.use || "";
            _this171.usehref = attributes.usehref || "";
            return _this171;
         }
         _inherits(Time, _StringObject1);
         return _createClass(Time, [
            {
               key: $finalize,
               value: function value() {
                  var date = this[$content].trim();
                  this[$content] = date ? new Date(date) : null;
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  return valueToHtml(this[$content] ? this[$content].toString() : "");
               },
            },
         ]);
      })(StringObject);
      var TimeStamp = /*#__PURE__*/ (function (_XFAObject82) {
         function TimeStamp(attributes) {
            var _this172;
            _classCallCheck(this, TimeStamp);
            _this172 = _callSuper(this, TimeStamp, [TEMPLATE_NS_ID, "timeStamp"]);
            _this172.id = attributes.id || "";
            _this172.server = attributes.server || "";
            _this172.type = getStringOption(attributes.type, [
               "optional",
               "required",
            ]);
            _this172.use = attributes.use || "";
            _this172.usehref = attributes.usehref || "";
            return _this172;
         }
         _inherits(TimeStamp, _XFAObject82);
         return _createClass(TimeStamp);
      })(XFAObject);
      var ToolTip = /*#__PURE__*/ (function (_StringObject10) {
         function ToolTip(attributes) {
            var _this173;
            _classCallCheck(this, ToolTip);
            _this173 = _callSuper(this, ToolTip, [TEMPLATE_NS_ID, "toolTip"]);
            _this173.id = attributes.id || "";
            _this173.rid = attributes.rid || "";
            _this173.use = attributes.use || "";
            _this173.usehref = attributes.usehref || "";
            return _this173;
         }
         _inherits(ToolTip, _StringObject10);
         return _createClass(ToolTip);
      })(StringObject);
      var Traversal = /*#__PURE__*/ (function (_XFAObject83) {
         function Traversal(attributes) {
            var _this174;
            _classCallCheck(this, Traversal);
            _this174 = _callSuper(this, Traversal, [
               TEMPLATE_NS_ID,
               "traversal",
               true,
            ]);
            _this174.id = attributes.id || "";
            _this174.use = attributes.use || "";
            _this174.usehref = attributes.usehref || "";
            _this174.extras = null;
            _this174.traverse = new XFAObjectArray();
            return _this174;
         }
         _inherits(Traversal, _XFAObject83);
         return _createClass(Traversal);
      })(XFAObject);
      var Traverse = /*#__PURE__*/ (function (_XFAObject84) {
         function Traverse(attributes) {
            var _this175;
            _classCallCheck(this, Traverse);
            _this175 = _callSuper(this, Traverse, [
               TEMPLATE_NS_ID,
               "traverse",
               true,
            ]);
            _this175.id = attributes.id || "";
            _this175.operation = getStringOption(attributes.operation, [
               "next",
               "back",
               "down",
               "first",
               "left",
               "right",
               "up",
            ]);
            _this175.ref = attributes.ref || "";
            _this175.use = attributes.use || "";
            _this175.usehref = attributes.usehref || "";
            _this175.extras = null;
            _this175.script = null;
            return _this175;
         }
         _inherits(Traverse, _XFAObject84);
         return _createClass(Traverse, [
            {
               key: "name",
               get: function get() {
                  return this.operation;
               },
            },
            {
               key: $isTransparent,
               value: function value() {
                  return false;
               },
            },
         ]);
      })(XFAObject);
      var Ui = /*#__PURE__*/ (function (_XFAObject85) {
         function Ui(attributes) {
            var _this176;
            _classCallCheck(this, Ui);
            _this176 = _callSuper(this, Ui, [TEMPLATE_NS_ID, "ui", true]);
            _this176.id = attributes.id || "";
            _this176.use = attributes.use || "";
            _this176.usehref = attributes.usehref || "";
            _this176.extras = null;
            _this176.picture = null;
            _this176.barcode = null;
            _this176.button = null;
            _this176.checkButton = null;
            _this176.choiceList = null;
            _this176.dateTimeEdit = null;
            _this176.defaultUi = null;
            _this176.imageEdit = null;
            _this176.numericEdit = null;
            _this176.passwordEdit = null;
            _this176.signature = null;
            _this176.textEdit = null;
            return _this176;
         }
         _inherits(Ui, _XFAObject85);
         return _createClass(Ui, [
            {
               key: $getExtra,
               value: function value() {
                  if (this[$extra] === undefined) {
                     var _iterator168 = _createForOfIteratorHelper(
                           Object.getOwnPropertyNames(this),
                        ),
                        _step168;
                     try {
                        for (_iterator168.s(); !(_step168 = _iterator168.n()).done; ) {
                           var name = _step168.value;
                           if (name === "extras" || name === "picture") {
                              continue;
                           }
                           var obj = this[name];
                           if (!(obj instanceof XFAObject)) {
                              continue;
                           }
                           this[$extra] = obj;
                           return obj;
                        }
                     } catch (err) {
                        _iterator168.e(err);
                     } finally {
                        _iterator168.f();
                     }
                     this[$extra] = null;
                  }
                  return this[$extra];
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  var obj = this[$getExtra]();
                  if (obj) {
                     return obj[$toHTML](availableSpace);
                  }
                  return HTMLResult.EMPTY;
               },
            },
         ]);
      })(XFAObject);
      var Validate = /*#__PURE__*/ (function (_XFAObject86) {
         function Validate(attributes) {
            var _this177;
            _classCallCheck(this, Validate);
            _this177 = _callSuper(this, Validate, [
               TEMPLATE_NS_ID,
               "validate",
               true,
            ]);
            _this177.formatTest = getStringOption(attributes.formatTest, [
               "warning",
               "disabled",
               "error",
            ]);
            _this177.id = attributes.id || "";
            _this177.nullTest = getStringOption(attributes.nullTest, [
               "disabled",
               "error",
               "warning",
            ]);
            _this177.scriptTest = getStringOption(attributes.scriptTest, [
               "error",
               "disabled",
               "warning",
            ]);
            _this177.use = attributes.use || "";
            _this177.usehref = attributes.usehref || "";
            _this177.extras = null;
            _this177.message = null;
            _this177.picture = null;
            _this177.script = null;
            return _this177;
         }
         _inherits(Validate, _XFAObject86);
         return _createClass(Validate);
      })(XFAObject);
      var Value = /*#__PURE__*/ (function (_XFAObject87) {
         function Value(attributes) {
            var _this178;
            _classCallCheck(this, Value);
            _this178 = _callSuper(this, Value, [TEMPLATE_NS_ID, "value", true]);
            _this178.id = attributes.id || "";
            _this178.override = getInteger({
               data: attributes.override,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this178.relevant = getRelevant(attributes.relevant);
            _this178.use = attributes.use || "";
            _this178.usehref = attributes.usehref || "";
            _this178.arc = null;
            _this178["boolean"] = null;
            _this178.date = null;
            _this178.dateTime = null;
            _this178.decimal = null;
            _this178.exData = null;
            _this178["float"] = null;
            _this178.image = null;
            _this178.integer = null;
            _this178.line = null;
            _this178.rectangle = null;
            _this178.text = null;
            _this178.time = null;
            return _this178;
         }
         _inherits(Value, _XFAObject87);
         return _createClass(Value, [
            {
               key: $setValue,
               value: function value(_value9) {
                  var parent = this[$getParent]();
                  if (parent instanceof Field) {
                     var _parent$ui;
                     if (
                        (_parent$ui = parent.ui) !== null &&
                        _parent$ui !== void 0 &&
                        _parent$ui.imageEdit
                     ) {
                        if (!this.image) {
                           this.image = new Image({});
                           this[$appendChild](this.image);
                        }
                        this.image[$content] = _value9[$content];
                        return;
                     }
                  }
                  var valueName = _value9[$nodeName];
                  if (this[valueName] !== null) {
                     this[valueName][$content] = _value9[$content];
                     return;
                  }
                  var _iterator169 = _createForOfIteratorHelper(
                        Object.getOwnPropertyNames(this),
                     ),
                     _step169;
                  try {
                     for (_iterator169.s(); !(_step169 = _iterator169.n()).done; ) {
                        var name = _step169.value;
                        var obj = this[name];
                        if (obj instanceof XFAObject) {
                           this[name] = null;
                           this[$removeChild](obj);
                        }
                     }
                  } catch (err) {
                     _iterator169.e(err);
                  } finally {
                     _iterator169.f();
                  }
                  this[_value9[$nodeName]] = _value9;
                  this[$appendChild](_value9);
               },
            },
            {
               key: $text,
               value: function value() {
                  if (this.exData) {
                     if (typeof this.exData[$content] === "string") {
                        return this.exData[$content].trim();
                     }
                     return this.exData[$content][$text]().trim();
                  }
                  var _iterator170 = _createForOfIteratorHelper(
                        Object.getOwnPropertyNames(this),
                     ),
                     _step170;
                  try {
                     for (_iterator170.s(); !(_step170 = _iterator170.n()).done; ) {
                        var name = _step170.value;
                        if (name === "image") {
                           continue;
                        }
                        var obj = this[name];
                        if (obj instanceof XFAObject) {
                           return (obj[$content] || "").toString().trim();
                        }
                     }
                  } catch (err) {
                     _iterator170.e(err);
                  } finally {
                     _iterator170.f();
                  }
                  return null;
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  var _iterator171 = _createForOfIteratorHelper(
                        Object.getOwnPropertyNames(this),
                     ),
                     _step171;
                  try {
                     for (_iterator171.s(); !(_step171 = _iterator171.n()).done; ) {
                        var name = _step171.value;
                        var obj = this[name];
                        if (!(obj instanceof XFAObject)) {
                           continue;
                        }
                        return obj[$toHTML](availableSpace);
                     }
                  } catch (err) {
                     _iterator171.e(err);
                  } finally {
                     _iterator171.f();
                  }
                  return HTMLResult.EMPTY;
               },
            },
         ]);
      })(XFAObject);
      var Variables = /*#__PURE__*/ (function (_XFAObject88) {
         function Variables(attributes) {
            var _this179;
            _classCallCheck(this, Variables);
            _this179 = _callSuper(this, Variables, [
               TEMPLATE_NS_ID,
               "variables",
               true,
            ]);
            _this179.id = attributes.id || "";
            _this179.use = attributes.use || "";
            _this179.usehref = attributes.usehref || "";
            _this179["boolean"] = new XFAObjectArray();
            _this179.date = new XFAObjectArray();
            _this179.dateTime = new XFAObjectArray();
            _this179.decimal = new XFAObjectArray();
            _this179.exData = new XFAObjectArray();
            _this179["float"] = new XFAObjectArray();
            _this179.image = new XFAObjectArray();
            _this179.integer = new XFAObjectArray();
            _this179.manifest = new XFAObjectArray();
            _this179.script = new XFAObjectArray();
            _this179.text = new XFAObjectArray();
            _this179.time = new XFAObjectArray();
            return _this179;
         }
         _inherits(Variables, _XFAObject88);
         return _createClass(Variables, [
            {
               key: $isTransparent,
               value: function value() {
                  return true;
               },
            },
         ]);
      })(XFAObject);
      var TemplateNamespace = /*#__PURE__*/ (function () {
         function TemplateNamespace() {
            _classCallCheck(this, TemplateNamespace);
         }
         return _createClass(TemplateNamespace, null, [
            {
               key: $buildXFAObject,
               value: function value(name, attributes) {
                  if (TemplateNamespace.hasOwnProperty(name)) {
                     var node = TemplateNamespace[name](attributes);
                     node[$setSetAttributes](attributes);
                     return node;
                  }
                  return undefined;
               },
            },
            {
               key: "appearanceFilter",
               value: function appearanceFilter(attrs) {
                  return new AppearanceFilter(attrs);
               },
            },
            {
               key: "arc",
               value: function arc(attrs) {
                  return new Arc(attrs);
               },
            },
            {
               key: "area",
               value: function area(attrs) {
                  return new Area(attrs);
               },
            },
            {
               key: "assist",
               value: function assist(attrs) {
                  return new Assist(attrs);
               },
            },
            {
               key: "barcode",
               value: function barcode(attrs) {
                  return new Barcode(attrs);
               },
            },
            {
               key: "bind",
               value: function bind(attrs) {
                  return new Bind(attrs);
               },
            },
            {
               key: "bindItems",
               value: function bindItems(attrs) {
                  return new BindItems(attrs);
               },
            },
            {
               key: "bookend",
               value: function bookend(attrs) {
                  return new Bookend(attrs);
               },
            },
            {
               key: "boolean",
               value: function _boolean(attrs) {
                  return new BooleanElement(attrs);
               },
            },
            {
               key: "border",
               value: function border(attrs) {
                  return new Border(attrs);
               },
            },
            {
               key: "break",
               value: function _break(attrs) {
                  return new Break(attrs);
               },
            },
            {
               key: "breakAfter",
               value: function breakAfter(attrs) {
                  return new BreakAfter(attrs);
               },
            },
            {
               key: "breakBefore",
               value: function breakBefore(attrs) {
                  return new BreakBefore(attrs);
               },
            },
            {
               key: "button",
               value: function button(attrs) {
                  return new Button(attrs);
               },
            },
            {
               key: "calculate",
               value: function calculate(attrs) {
                  return new Calculate(attrs);
               },
            },
            {
               key: "caption",
               value: function caption(attrs) {
                  return new Caption(attrs);
               },
            },
            {
               key: "certificate",
               value: function certificate(attrs) {
                  return new Certificate(attrs);
               },
            },
            {
               key: "certificates",
               value: function certificates(attrs) {
                  return new Certificates(attrs);
               },
            },
            {
               key: "checkButton",
               value: function checkButton(attrs) {
                  return new CheckButton(attrs);
               },
            },
            {
               key: "choiceList",
               value: function choiceList(attrs) {
                  return new ChoiceList(attrs);
               },
            },
            {
               key: "color",
               value: function color(attrs) {
                  return new Color(attrs);
               },
            },
            {
               key: "comb",
               value: function comb(attrs) {
                  return new Comb(attrs);
               },
            },
            {
               key: "connect",
               value: function connect(attrs) {
                  return new Connect(attrs);
               },
            },
            {
               key: "contentArea",
               value: function contentArea(attrs) {
                  return new ContentArea(attrs);
               },
            },
            {
               key: "corner",
               value: function corner(attrs) {
                  return new Corner(attrs);
               },
            },
            {
               key: "date",
               value: function date(attrs) {
                  return new DateElement(attrs);
               },
            },
            {
               key: "dateTime",
               value: function dateTime(attrs) {
                  return new DateTime(attrs);
               },
            },
            {
               key: "dateTimeEdit",
               value: function dateTimeEdit(attrs) {
                  return new DateTimeEdit(attrs);
               },
            },
            {
               key: "decimal",
               value: function decimal(attrs) {
                  return new Decimal(attrs);
               },
            },
            {
               key: "defaultUi",
               value: function defaultUi(attrs) {
                  return new DefaultUi(attrs);
               },
            },
            {
               key: "desc",
               value: function desc(attrs) {
                  return new Desc(attrs);
               },
            },
            {
               key: "digestMethod",
               value: function digestMethod(attrs) {
                  return new DigestMethod(attrs);
               },
            },
            {
               key: "digestMethods",
               value: function digestMethods(attrs) {
                  return new DigestMethods(attrs);
               },
            },
            {
               key: "draw",
               value: function draw(attrs) {
                  return new Draw(attrs);
               },
            },
            {
               key: "edge",
               value: function edge(attrs) {
                  return new Edge(attrs);
               },
            },
            {
               key: "encoding",
               value: function encoding(attrs) {
                  return new Encoding(attrs);
               },
            },
            {
               key: "encodings",
               value: function encodings(attrs) {
                  return new Encodings(attrs);
               },
            },
            {
               key: "encrypt",
               value: function encrypt(attrs) {
                  return new Encrypt(attrs);
               },
            },
            {
               key: "encryptData",
               value: function encryptData(attrs) {
                  return new EncryptData(attrs);
               },
            },
            {
               key: "encryption",
               value: function encryption(attrs) {
                  return new Encryption(attrs);
               },
            },
            {
               key: "encryptionMethod",
               value: function encryptionMethod(attrs) {
                  return new EncryptionMethod(attrs);
               },
            },
            {
               key: "encryptionMethods",
               value: function encryptionMethods(attrs) {
                  return new EncryptionMethods(attrs);
               },
            },
            {
               key: "event",
               value: function event(attrs) {
                  return new Event(attrs);
               },
            },
            {
               key: "exData",
               value: function exData(attrs) {
                  return new ExData(attrs);
               },
            },
            {
               key: "exObject",
               value: function exObject(attrs) {
                  return new ExObject(attrs);
               },
            },
            {
               key: "exclGroup",
               value: function exclGroup(attrs) {
                  return new ExclGroup(attrs);
               },
            },
            {
               key: "execute",
               value: function execute(attrs) {
                  return new Execute(attrs);
               },
            },
            {
               key: "extras",
               value: function extras(attrs) {
                  return new Extras(attrs);
               },
            },
            {
               key: "field",
               value: function field(attrs) {
                  return new Field(attrs);
               },
            },
            {
               key: "fill",
               value: function fill(attrs) {
                  return new Fill(attrs);
               },
            },
            {
               key: "filter",
               value: function filter(attrs) {
                  return new Filter(attrs);
               },
            },
            {
               key: "float",
               value: function _float(attrs) {
                  return new Float(attrs);
               },
            },
            {
               key: "font",
               value: function font(attrs) {
                  return new template_Font(attrs);
               },
            },
            {
               key: "format",
               value: function format(attrs) {
                  return new Format(attrs);
               },
            },
            {
               key: "handler",
               value: function handler(attrs) {
                  return new Handler(attrs);
               },
            },
            {
               key: "hyphenation",
               value: function hyphenation(attrs) {
                  return new Hyphenation(attrs);
               },
            },
            {
               key: "image",
               value: function image(attrs) {
                  return new Image(attrs);
               },
            },
            {
               key: "imageEdit",
               value: function imageEdit(attrs) {
                  return new ImageEdit(attrs);
               },
            },
            {
               key: "integer",
               value: function integer(attrs) {
                  return new Integer(attrs);
               },
            },
            {
               key: "issuers",
               value: function issuers(attrs) {
                  return new Issuers(attrs);
               },
            },
            {
               key: "items",
               value: function items(attrs) {
                  return new Items(attrs);
               },
            },
            {
               key: "keep",
               value: function keep(attrs) {
                  return new Keep(attrs);
               },
            },
            {
               key: "keyUsage",
               value: function keyUsage(attrs) {
                  return new KeyUsage(attrs);
               },
            },
            {
               key: "line",
               value: function line(attrs) {
                  return new Line(attrs);
               },
            },
            {
               key: "linear",
               value: function linear(attrs) {
                  return new Linear(attrs);
               },
            },
            {
               key: "lockDocument",
               value: function lockDocument(attrs) {
                  return new LockDocument(attrs);
               },
            },
            {
               key: "manifest",
               value: function manifest(attrs) {
                  return new Manifest(attrs);
               },
            },
            {
               key: "margin",
               value: function margin(attrs) {
                  return new Margin(attrs);
               },
            },
            {
               key: "mdp",
               value: function mdp(attrs) {
                  return new Mdp(attrs);
               },
            },
            {
               key: "medium",
               value: function medium(attrs) {
                  return new Medium(attrs);
               },
            },
            {
               key: "message",
               value: function message(attrs) {
                  return new Message(attrs);
               },
            },
            {
               key: "numericEdit",
               value: function numericEdit(attrs) {
                  return new NumericEdit(attrs);
               },
            },
            {
               key: "occur",
               value: function occur(attrs) {
                  return new Occur(attrs);
               },
            },
            {
               key: "oid",
               value: function oid(attrs) {
                  return new Oid(attrs);
               },
            },
            {
               key: "oids",
               value: function oids(attrs) {
                  return new Oids(attrs);
               },
            },
            {
               key: "overflow",
               value: function overflow(attrs) {
                  return new Overflow(attrs);
               },
            },
            {
               key: "pageArea",
               value: function pageArea(attrs) {
                  return new PageArea(attrs);
               },
            },
            {
               key: "pageSet",
               value: function pageSet(attrs) {
                  return new PageSet(attrs);
               },
            },
            {
               key: "para",
               value: function para(attrs) {
                  return new Para(attrs);
               },
            },
            {
               key: "passwordEdit",
               value: function passwordEdit(attrs) {
                  return new PasswordEdit(attrs);
               },
            },
            {
               key: "pattern",
               value: function pattern(attrs) {
                  return new template_Pattern(attrs);
               },
            },
            {
               key: "picture",
               value: function picture(attrs) {
                  return new Picture(attrs);
               },
            },
            {
               key: "proto",
               value: function proto(attrs) {
                  return new Proto(attrs);
               },
            },
            {
               key: "radial",
               value: function radial(attrs) {
                  return new Radial(attrs);
               },
            },
            {
               key: "reason",
               value: function reason(attrs) {
                  return new Reason(attrs);
               },
            },
            {
               key: "reasons",
               value: function reasons(attrs) {
                  return new Reasons(attrs);
               },
            },
            {
               key: "rectangle",
               value: function rectangle(attrs) {
                  return new Rectangle(attrs);
               },
            },
            {
               key: "ref",
               value: function ref(attrs) {
                  return new RefElement(attrs);
               },
            },
            {
               key: "script",
               value: function script(attrs) {
                  return new Script(attrs);
               },
            },
            {
               key: "setProperty",
               value: function setProperty(attrs) {
                  return new SetProperty(attrs);
               },
            },
            {
               key: "signData",
               value: function signData(attrs) {
                  return new SignData(attrs);
               },
            },
            {
               key: "signature",
               value: function signature(attrs) {
                  return new Signature(attrs);
               },
            },
            {
               key: "signing",
               value: function signing(attrs) {
                  return new Signing(attrs);
               },
            },
            {
               key: "solid",
               value: function solid(attrs) {
                  return new Solid(attrs);
               },
            },
            {
               key: "speak",
               value: function speak(attrs) {
                  return new Speak(attrs);
               },
            },
            {
               key: "stipple",
               value: function stipple(attrs) {
                  return new Stipple(attrs);
               },
            },
            {
               key: "subform",
               value: function subform(attrs) {
                  return new Subform(attrs);
               },
            },
            {
               key: "subformSet",
               value: function subformSet(attrs) {
                  return new SubformSet(attrs);
               },
            },
            {
               key: "subjectDN",
               value: function subjectDN(attrs) {
                  return new SubjectDN(attrs);
               },
            },
            {
               key: "subjectDNs",
               value: function subjectDNs(attrs) {
                  return new SubjectDNs(attrs);
               },
            },
            {
               key: "submit",
               value: function submit(attrs) {
                  return new Submit(attrs);
               },
            },
            {
               key: "template",
               value: function template(attrs) {
                  return new Template(attrs);
               },
            },
            {
               key: "text",
               value: function text(attrs) {
                  return new Text(attrs);
               },
            },
            {
               key: "textEdit",
               value: function textEdit(attrs) {
                  return new TextEdit(attrs);
               },
            },
            {
               key: "time",
               value: function time(attrs) {
                  return new Time(attrs);
               },
            },
            {
               key: "timeStamp",
               value: function timeStamp(attrs) {
                  return new TimeStamp(attrs);
               },
            },
            {
               key: "toolTip",
               value: function toolTip(attrs) {
                  return new ToolTip(attrs);
               },
            },
            {
               key: "traversal",
               value: function traversal(attrs) {
                  return new Traversal(attrs);
               },
            },
            {
               key: "traverse",
               value: function traverse(attrs) {
                  return new Traverse(attrs);
               },
            },
            {
               key: "ui",
               value: function ui(attrs) {
                  return new Ui(attrs);
               },
            },
            {
               key: "validate",
               value: function validate(attrs) {
                  return new Validate(attrs);
               },
            },
            {
               key: "value",
               value: function value(attrs) {
                  return new Value(attrs);
               },
            },
            {
               key: "variables",
               value: function variables(attrs) {
                  return new Variables(attrs);
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xfa/bind.js
      var bind_NS_DATASETS = NamespaceIds.datasets.id;
      function createText(content) {
         var node = new Text({});
         node[$content] = content;
         return node;
      }
      var Binder = /*#__PURE__*/ (function () {
         function Binder(root) {
            var _root$datasets;
            _classCallCheck(this, Binder);
            this.root = root;
            this.datasets = root.datasets;
            this.data =
               ((_root$datasets = root.datasets) === null ||
               _root$datasets === void 0
                  ? void 0
                  : _root$datasets.data) ||
               new XmlObject(NamespaceIds.datasets.id, "data");
            this.emptyMerge = this.data[$getChildren]().length === 0;
            this.root.form = this.form = root.template[$clone]();
         }
         return _createClass(Binder, [
            {
               key: "_isConsumeData",
               value: function _isConsumeData() {
                  return !this.emptyMerge && this._mergeMode;
               },
            },
            {
               key: "_isMatchTemplate",
               value: function _isMatchTemplate() {
                  return !this._isConsumeData();
               },
            },
            {
               key: "bind",
               value: function bind() {
                  this._bindElement(this.form, this.data);
                  return this.form;
               },
            },
            {
               key: "getData",
               value: function getData() {
                  return this.data;
               },
            },
            {
               key: "_bindValue",
               value: function _bindValue(formNode, data, picture) {
                  formNode[$data] = data;
                  if (formNode[$hasSettableValue]()) {
                     var _formNode$ui;
                     if (data[$isDataValue]()) {
                        var value = data[$getDataValue]();
                        formNode[$setValue](createText(value));
                     } else if (
                        formNode instanceof Field &&
                        ((_formNode$ui = formNode.ui) === null ||
                        _formNode$ui === void 0 ||
                        (_formNode$ui = _formNode$ui.choiceList) === null ||
                        _formNode$ui === void 0
                           ? void 0
                           : _formNode$ui.open) === "multiSelect"
                     ) {
                        var _value0 = data[$getChildren]()
                           .map(function (child) {
                              return child[$content].trim();
                           })
                           .join("\n");
                        formNode[$setValue](createText(_value0));
                     } else if (this._isConsumeData()) {
                        warn("XFA - Nodes haven't the same type.");
                     }
                  } else if (!data[$isDataValue]() || this._isMatchTemplate()) {
                     this._bindElement(formNode, data);
                  } else {
                     warn("XFA - Nodes haven't the same type.");
                  }
               },
            },
            {
               key: "_findDataByNameToConsume",
               value: function _findDataByNameToConsume(
                  name,
                  isValue,
                  dataNode,
                  global,
               ) {
                  var _match6;
                  if (!name) {
                     return null;
                  }
                  var generator, match;
                  for (var i = 0; i < 3; i++) {
                     generator = dataNode[$getRealChildrenByNameIt](name, false, true);
                     while (true) {
                        match = generator.next().value;
                        if (!match) {
                           break;
                        }
                        if (isValue === match[$isDataValue]()) {
                           return match;
                        }
                     }
                     if (
                        dataNode[$namespaceId] === NamespaceIds.datasets.id &&
                        dataNode[$nodeName] === "data"
                     ) {
                        break;
                     }
                     dataNode = dataNode[$getParent]();
                  }
                  if (!global) {
                     return null;
                  }
                  generator = this.data[$getRealChildrenByNameIt](name, true, false);
                  match = generator.next().value;
                  if (match) {
                     return match;
                  }
                  generator = this.data[$getAttributeIt](name, true);
                  match = generator.next().value;
                  if (
                     (_match6 = match) !== null &&
                     _match6 !== void 0 &&
                     _match6[$isDataValue]()
                  ) {
                     return match;
                  }
                  return null;
               },
            },
            {
               key: "_setProperties",
               value: function _setProperties(formNode, dataNode) {
                  if (!formNode.hasOwnProperty("setProperty")) {
                     return;
                  }
                  var _iterator172 = _createForOfIteratorHelper(
                        formNode.setProperty.children,
                     ),
                     _step172;
                  try {
                     for (_iterator172.s(); !(_step172 = _iterator172.n()).done; ) {
                        var _step172$value = _step172.value,
                           ref = _step172$value.ref,
                           target = _step172$value.target,
                           connection = _step172$value.connection;
                        if (connection) {
                           continue;
                        }
                        if (!ref) {
                           continue;
                        }
                        var nodes = searchNode(this.root, dataNode, ref, false, false);
                        if (!nodes) {
                           warn("XFA - Invalid reference: ".concat(ref, "."));
                           continue;
                        }
                        var _nodes = _slicedToArray(nodes, 1),
                           node = _nodes[0];
                        if (!node[$isDescendent](this.data)) {
                           warn("XFA - Invalid node: must be a data node.");
                           continue;
                        }
                        var targetNodes = searchNode(
                           this.root,
                           formNode,
                           target,
                           false,
                           false,
                        );
                        if (!targetNodes) {
                           warn("XFA - Invalid target: ".concat(target, "."));
                           continue;
                        }
                        var _targetNodes = _slicedToArray(targetNodes, 1),
                           targetNode = _targetNodes[0];
                        if (!targetNode[$isDescendent](formNode)) {
                           warn(
                              "XFA - Invalid target: must be a property or subproperty.",
                           );
                           continue;
                        }
                        var targetParent = targetNode[$getParent]();
                        if (
                           targetNode instanceof SetProperty ||
                           targetParent instanceof SetProperty
                        ) {
                           warn(
                              "XFA - Invalid target: cannot be a setProperty or one of its properties.",
                           );
                           continue;
                        }
                        if (
                           targetNode instanceof BindItems ||
                           targetParent instanceof BindItems
                        ) {
                           warn(
                              "XFA - Invalid target: cannot be a bindItems or one of its properties.",
                           );
                           continue;
                        }
                        var content = node[$text]();
                        var name = targetNode[$nodeName];
                        if (targetNode instanceof XFAAttribute) {
                           var attrs = Object.create(null);
                           attrs[name] = content;
                           var obj = Reflect.construct(
                              Object.getPrototypeOf(targetParent).constructor,
                              [attrs],
                           );
                           targetParent[name] = obj[name];
                           continue;
                        }
                        if (!targetNode.hasOwnProperty($content)) {
                           warn("XFA - Invalid node to use in setProperty");
                           continue;
                        }
                        targetNode[$data] = node;
                        targetNode[$content] = content;
                        targetNode[$finalize]();
                     }
                  } catch (err) {
                     _iterator172.e(err);
                  } finally {
                     _iterator172.f();
                  }
               },
            },
            {
               key: "_bindItems",
               value: function _bindItems(formNode, dataNode) {
                  if (
                     !formNode.hasOwnProperty("items") ||
                     !formNode.hasOwnProperty("bindItems") ||
                     formNode.bindItems.isEmpty()
                  ) {
                     return;
                  }
                  var _iterator173 = _createForOfIteratorHelper(
                        formNode.items.children,
                     ),
                     _step173;
                  try {
                     for (_iterator173.s(); !(_step173 = _iterator173.n()).done; ) {
                        var item = _step173.value;
                        formNode[$removeChild](item);
                     }
                  } catch (err) {
                     _iterator173.e(err);
                  } finally {
                     _iterator173.f();
                  }
                  formNode.items.clear();
                  var labels = new Items({});
                  var values = new Items({});
                  formNode[$appendChild](labels);
                  formNode.items.push(labels);
                  formNode[$appendChild](values);
                  formNode.items.push(values);
                  var _iterator174 = _createForOfIteratorHelper(
                        formNode.bindItems.children,
                     ),
                     _step174;
                  try {
                     for (_iterator174.s(); !(_step174 = _iterator174.n()).done; ) {
                        var _step174$value = _step174.value,
                           ref = _step174$value.ref,
                           labelRef = _step174$value.labelRef,
                           valueRef = _step174$value.valueRef,
                           connection = _step174$value.connection;
                        if (connection) {
                           continue;
                        }
                        if (!ref) {
                           continue;
                        }
                        var nodes = searchNode(this.root, dataNode, ref, false, false);
                        if (!nodes) {
                           warn("XFA - Invalid reference: ".concat(ref, "."));
                           continue;
                        }
                        var _iterator175 = _createForOfIteratorHelper(nodes),
                           _step175;
                        try {
                           for (
                              _iterator175.s();
                              !(_step175 = _iterator175.n()).done;

                           ) {
                              var node = _step175.value;
                              if (!node[$isDescendent](this.datasets)) {
                                 warn(
                                    "XFA - Invalid ref (".concat(
                                       ref,
                                       "): must be a datasets child.",
                                    ),
                                 );
                                 continue;
                              }
                              var labelNodes = searchNode(
                                 this.root,
                                 node,
                                 labelRef,
                                 true,
                                 false,
                              );
                              if (!labelNodes) {
                                 warn("XFA - Invalid label: ".concat(labelRef, "."));
                                 continue;
                              }
                              var _labelNodes = _slicedToArray(labelNodes, 1),
                                 labelNode = _labelNodes[0];
                              if (!labelNode[$isDescendent](this.datasets)) {
                                 warn("XFA - Invalid label: must be a datasets child.");
                                 continue;
                              }
                              var valueNodes = searchNode(
                                 this.root,
                                 node,
                                 valueRef,
                                 true,
                                 false,
                              );
                              if (!valueNodes) {
                                 warn("XFA - Invalid value: ".concat(valueRef, "."));
                                 continue;
                              }
                              var _valueNodes = _slicedToArray(valueNodes, 1),
                                 valueNode = _valueNodes[0];
                              if (!valueNode[$isDescendent](this.datasets)) {
                                 warn("XFA - Invalid value: must be a datasets child.");
                                 continue;
                              }
                              var label = createText(labelNode[$text]());
                              var value = createText(valueNode[$text]());
                              labels[$appendChild](label);
                              labels.text.push(label);
                              values[$appendChild](value);
                              values.text.push(value);
                           }
                        } catch (err) {
                           _iterator175.e(err);
                        } finally {
                           _iterator175.f();
                        }
                     }
                  } catch (err) {
                     _iterator174.e(err);
                  } finally {
                     _iterator174.f();
                  }
               },
            },
            {
               key: "_bindOccurrences",
               value: function _bindOccurrences(formNode, matches, picture) {
                  var baseClone;
                  if (matches.length > 1) {
                     baseClone = formNode[$clone]();
                     baseClone[$removeChild](baseClone.occur);
                     baseClone.occur = null;
                  }
                  this._bindValue(formNode, matches[0], picture);
                  this._setProperties(formNode, matches[0]);
                  this._bindItems(formNode, matches[0]);
                  if (matches.length === 1) {
                     return;
                  }
                  var parent = formNode[$getParent]();
                  var name = formNode[$nodeName];
                  var pos = parent[$indexOf](formNode);
                  for (var i = 1, ii = matches.length; i < ii; i++) {
                     var match = matches[i];
                     var clone = baseClone[$clone]();
                     parent[name].push(clone);
                     parent[$insertAt](pos + i, clone);
                     this._bindValue(clone, match, picture);
                     this._setProperties(clone, match);
                     this._bindItems(clone, match);
                  }
               },
            },
            {
               key: "_createOccurrences",
               value: function _createOccurrences(formNode) {
                  if (!this.emptyMerge) {
                     return;
                  }
                  var occur = formNode.occur;
                  if (!occur || occur.initial <= 1) {
                     return;
                  }
                  var parent = formNode[$getParent]();
                  var name = formNode[$nodeName];
                  if (!(parent[name] instanceof XFAObjectArray)) {
                     return;
                  }
                  var currentNumber;
                  if (formNode.name) {
                     currentNumber = parent[name].children.filter(function (e) {
                        return e.name === formNode.name;
                     }).length;
                  } else {
                     currentNumber = parent[name].children.length;
                  }
                  var pos = parent[$indexOf](formNode) + 1;
                  var ii = occur.initial - currentNumber;
                  if (ii) {
                     var nodeClone = formNode[$clone]();
                     nodeClone[$removeChild](nodeClone.occur);
                     nodeClone.occur = null;
                     parent[name].push(nodeClone);
                     parent[$insertAt](pos, nodeClone);
                     for (var i = 1; i < ii; i++) {
                        var clone = nodeClone[$clone]();
                        parent[name].push(clone);
                        parent[$insertAt](pos + i, clone);
                     }
                  }
               },
            },
            {
               key: "_getOccurInfo",
               value: function _getOccurInfo(formNode) {
                  var name = formNode.name,
                     occur = formNode.occur;
                  if (!occur || !name) {
                     return [1, 1];
                  }
                  var max = occur.max === -1 ? Infinity : occur.max;
                  return [occur.min, max];
               },
            },
            {
               key: "_setAndBind",
               value: function _setAndBind(formNode, dataNode) {
                  this._setProperties(formNode, dataNode);
                  this._bindItems(formNode, dataNode);
                  this._bindElement(formNode, dataNode);
               },
            },
            {
               key: "_bindElement",
               value: function _bindElement(formNode, dataNode) {
                  var uselessNodes = [];
                  this._createOccurrences(formNode);
                  var _iterator176 = _createForOfIteratorHelper(
                        formNode[$getChildren](),
                     ),
                     _step176;
                  try {
                     for (_iterator176.s(); !(_step176 = _iterator176.n()).done; ) {
                        var child = _step176.value;
                        if (child[$data]) {
                           continue;
                        }
                        if (
                           this._mergeMode === undefined &&
                           child[$nodeName] === "subform"
                        ) {
                           this._mergeMode = child.mergeMode === "consumeData";
                           var dataChildren = dataNode[$getChildren]();
                           if (dataChildren.length > 0) {
                              this._bindOccurrences(child, [dataChildren[0]], null);
                           } else if (this.emptyMerge) {
                              var nsId =
                                 dataNode[$namespaceId] === bind_NS_DATASETS
                                    ? -1
                                    : dataNode[$namespaceId];
                              var dataChild = (child[$data] = new XmlObject(
                                 nsId,
                                 child.name || "root",
                              ));
                              dataNode[$appendChild](dataChild);
                              this._bindElement(child, dataChild);
                           }
                           continue;
                        }
                        if (!child[$isBindable]()) {
                           continue;
                        }
                        var global = false;
                        var picture = null;
                        var ref = null;
                        var match = null;
                        if (child.bind) {
                           switch (child.bind.match) {
                              case "none":
                                 this._setAndBind(child, dataNode);
                                 continue;
                              case "global":
                                 global = true;
                                 break;
                              case "dataRef":
                                 if (!child.bind.ref) {
                                    warn(
                                       "XFA - ref is empty in node ".concat(
                                          child[$nodeName],
                                          ".",
                                       ),
                                    );
                                    this._setAndBind(child, dataNode);
                                    continue;
                                 }
                                 ref = child.bind.ref;
                                 break;
                              default:
                                 break;
                           }
                           if (child.bind.picture) {
                              picture = child.bind.picture[$content];
                           }
                        }
                        var _this$_getOccurInfo = this._getOccurInfo(child),
                           _this$_getOccurInfo2 = _slicedToArray(_this$_getOccurInfo, 2),
                           min = _this$_getOccurInfo2[0],
                           max = _this$_getOccurInfo2[1];
                        if (ref) {
                           match = searchNode(this.root, dataNode, ref, true, false);
                           if (match === null) {
                              match = createDataNode(this.data, dataNode, ref);
                              if (!match) {
                                 continue;
                              }
                              if (this._isConsumeData()) {
                                 match[$consumed] = true;
                              }
                              this._setAndBind(child, match);
                              continue;
                           } else {
                              if (this._isConsumeData()) {
                                 match = match.filter(function (node) {
                                    return !node[$consumed];
                                 });
                              }
                              if (match.length > max) {
                                 match = match.slice(0, max);
                              } else if (match.length === 0) {
                                 match = null;
                              }
                              if (match && this._isConsumeData()) {
                                 match.forEach(function (node) {
                                    node[$consumed] = true;
                                 });
                              }
                           }
                        } else {
                           if (!child.name) {
                              this._setAndBind(child, dataNode);
                              continue;
                           }
                           if (this._isConsumeData()) {
                              var matches = [];
                              while (matches.length < max) {
                                 var found = this._findDataByNameToConsume(
                                    child.name,
                                    child[$hasSettableValue](),
                                    dataNode,
                                    global,
                                 );
                                 if (!found) {
                                    break;
                                 }
                                 found[$consumed] = true;
                                 matches.push(found);
                              }
                              match = matches.length > 0 ? matches : null;
                           } else {
                              match = dataNode[$getRealChildrenByNameIt](
                                 child.name,
                                 false,
                                 this.emptyMerge,
                              ).next().value;
                              if (!match) {
                                 if (min === 0) {
                                    uselessNodes.push(child);
                                    continue;
                                 }
                                 var _nsId =
                                    dataNode[$namespaceId] === bind_NS_DATASETS
                                       ? -1
                                       : dataNode[$namespaceId];
                                 match = child[$data] = new XmlObject(_nsId, child.name);
                                 if (this.emptyMerge) {
                                    match[$consumed] = true;
                                 }
                                 dataNode[$appendChild](match);
                                 this._setAndBind(child, match);
                                 continue;
                              }
                              if (this.emptyMerge) {
                                 match[$consumed] = true;
                              }
                              match = [match];
                           }
                        }
                        if (match) {
                           this._bindOccurrences(child, match, picture);
                        } else if (min > 0) {
                           this._setAndBind(child, dataNode);
                        } else {
                           uselessNodes.push(child);
                        }
                     }
                  } catch (err) {
                     _iterator176.e(err);
                  } finally {
                     _iterator176.f();
                  }
                  uselessNodes.forEach(function (node) {
                     return node[$getParent]()[$removeChild](node);
                  });
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xfa/data.js
      var DataHandler = /*#__PURE__*/ (function () {
         function DataHandler(root, data) {
            _classCallCheck(this, DataHandler);
            this.data = data;
            this.dataset = root.datasets || null;
         }
         return _createClass(DataHandler, [
            {
               key: "serialize",
               value: function serialize(storage) {
                  var stack = [[-1, this.data[$getChildren]()]];
                  while (stack.length > 0) {
                     var last = stack.at(-1);
                     var _last = _slicedToArray(last, 2),
                        i = _last[0],
                        children = _last[1];
                     if (i + 1 === children.length) {
                        stack.pop();
                        continue;
                     }
                     var child = children[++last[0]];
                     var storageEntry = storage.get(child[$uid]);
                     if (storageEntry) {
                        child[$setValue](storageEntry);
                     } else {
                        var attributes = child[$getAttributes]();
                        var _iterator177 = _createForOfIteratorHelper(
                              attributes.values(),
                           ),
                           _step177;
                        try {
                           for (
                              _iterator177.s();
                              !(_step177 = _iterator177.n()).done;

                           ) {
                              var value = _step177.value;
                              var entry = storage.get(value[$uid]);
                              if (entry) {
                                 value[$setValue](entry);
                                 break;
                              }
                           }
                        } catch (err) {
                           _iterator177.e(err);
                        } finally {
                           _iterator177.f();
                        }
                     }
                     var nodes = child[$getChildren]();
                     if (nodes.length > 0) {
                        stack.push([-1, nodes]);
                     }
                  }
                  var buf = [
                     '<xfa:datasets xmlns:xfa="http://www.xfa.org/schema/xfa-data/1.0/">',
                  ];
                  if (this.dataset) {
                     var _iterator178 = _createForOfIteratorHelper(
                           this.dataset[$getChildren](),
                        ),
                        _step178;
                     try {
                        for (_iterator178.s(); !(_step178 = _iterator178.n()).done; ) {
                           var _child3 = _step178.value;
                           if (_child3[$nodeName] !== "data") {
                              _child3[$toString](buf);
                           }
                        }
                     } catch (err) {
                        _iterator178.e(err);
                     } finally {
                        _iterator178.f();
                     }
                  }
                  this.data[$toString](buf);
                  buf.push("</xfa:datasets>");
                  return buf.join("");
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xfa/config.js
      var CONFIG_NS_ID = NamespaceIds.config.id;
      var Acrobat = /*#__PURE__*/ (function (_XFAObject89) {
         function Acrobat(attributes) {
            var _this180;
            _classCallCheck(this, Acrobat);
            _this180 = _callSuper(this, Acrobat, [CONFIG_NS_ID, "acrobat", true]);
            _this180.acrobat7 = null;
            _this180.autoSave = null;
            _this180.common = null;
            _this180.validate = null;
            _this180.validateApprovalSignatures = null;
            _this180.submitUrl = new XFAObjectArray();
            return _this180;
         }
         _inherits(Acrobat, _XFAObject89);
         return _createClass(Acrobat);
      })(XFAObject);
      var Acrobat7 = /*#__PURE__*/ (function (_XFAObject90) {
         function Acrobat7(attributes) {
            var _this181;
            _classCallCheck(this, Acrobat7);
            _this181 = _callSuper(this, Acrobat7, [CONFIG_NS_ID, "acrobat7", true]);
            _this181.dynamicRender = null;
            return _this181;
         }
         _inherits(Acrobat7, _XFAObject90);
         return _createClass(Acrobat7);
      })(XFAObject);
      var _ADBE_JSConsole = /*#__PURE__*/ (function (_OptionObject4) {
         function ADBE_JSConsole(attributes) {
            _classCallCheck(this, ADBE_JSConsole);
            return _callSuper(this, ADBE_JSConsole, [
               CONFIG_NS_ID,
               "ADBE_JSConsole",
               ["delegate", "Enable", "Disable"],
            ]);
         }
         _inherits(ADBE_JSConsole, _OptionObject4);
         return _createClass(ADBE_JSConsole);
      })(OptionObject);
      var _ADBE_JSDebugger = /*#__PURE__*/ (function (_OptionObject5) {
         function ADBE_JSDebugger(attributes) {
            _classCallCheck(this, ADBE_JSDebugger);
            return _callSuper(this, ADBE_JSDebugger, [
               CONFIG_NS_ID,
               "ADBE_JSDebugger",
               ["delegate", "Enable", "Disable"],
            ]);
         }
         _inherits(ADBE_JSDebugger, _OptionObject5);
         return _createClass(ADBE_JSDebugger);
      })(OptionObject);
      var AddSilentPrint = /*#__PURE__*/ (function (_Option2) {
         function AddSilentPrint(attributes) {
            _classCallCheck(this, AddSilentPrint);
            return _callSuper(this, AddSilentPrint, [
               CONFIG_NS_ID,
               "addSilentPrint",
            ]);
         }
         _inherits(AddSilentPrint, _Option2);
         return _createClass(AddSilentPrint);
      })(Option01);
      var AddViewerPreferences = /*#__PURE__*/ (function (_Option3) {
         function AddViewerPreferences(attributes) {
            _classCallCheck(this, AddViewerPreferences);
            return _callSuper(this, AddViewerPreferences, [
               CONFIG_NS_ID,
               "addViewerPreferences",
            ]);
         }
         _inherits(AddViewerPreferences, _Option3);
         return _createClass(AddViewerPreferences);
      })(Option01);
      var AdjustData = /*#__PURE__*/ (function (_Option4) {
         function AdjustData(attributes) {
            _classCallCheck(this, AdjustData);
            return _callSuper(this, AdjustData, [CONFIG_NS_ID, "adjustData"]);
         }
         _inherits(AdjustData, _Option4);
         return _createClass(AdjustData);
      })(Option10);
      var AdobeExtensionLevel = /*#__PURE__*/ (function (_IntegerObject3) {
         function AdobeExtensionLevel(attributes) {
            _classCallCheck(this, AdobeExtensionLevel);
            return _callSuper(this, AdobeExtensionLevel, [
               CONFIG_NS_ID,
               "adobeExtensionLevel",
               0,
               function (n) {
                  return n >= 1 && n <= 8;
               },
            ]);
         }
         _inherits(AdobeExtensionLevel, _IntegerObject3);
         return _createClass(AdobeExtensionLevel);
      })(IntegerObject);
      var Agent = /*#__PURE__*/ (function (_XFAObject91) {
         function Agent(attributes) {
            var _this182;
            _classCallCheck(this, Agent);
            _this182 = _callSuper(this, Agent, [CONFIG_NS_ID, "agent", true]);
            _this182.name = attributes.name ? attributes.name.trim() : "";
            _this182.common = new XFAObjectArray();
            return _this182;
         }
         _inherits(Agent, _XFAObject91);
         return _createClass(Agent);
      })(XFAObject);
      var AlwaysEmbed = /*#__PURE__*/ (function (_ContentObject11) {
         function AlwaysEmbed(attributes) {
            _classCallCheck(this, AlwaysEmbed);
            return _callSuper(this, AlwaysEmbed, [CONFIG_NS_ID, "alwaysEmbed"]);
         }
         _inherits(AlwaysEmbed, _ContentObject11);
         return _createClass(AlwaysEmbed);
      })(ContentObject);
      var Amd = /*#__PURE__*/ (function (_StringObject11) {
         function Amd(attributes) {
            _classCallCheck(this, Amd);
            return _callSuper(this, Amd, [CONFIG_NS_ID, "amd"]);
         }
         _inherits(Amd, _StringObject11);
         return _createClass(Amd);
      })(StringObject);
      var config_Area = /*#__PURE__*/ (function (_XFAObject92) {
         function config_Area(attributes) {
            var _this183;
            _classCallCheck(this, config_Area);
            _this183 = _callSuper(this, config_Area, [CONFIG_NS_ID, "area"]);
            _this183.level = getInteger({
               data: attributes.level,
               defaultValue: 0,
               validate: function validate(n) {
                  return n >= 1 && n <= 3;
               },
            });
            _this183.name = getStringOption(attributes.name, [
               "",
               "barcode",
               "coreinit",
               "deviceDriver",
               "font",
               "general",
               "layout",
               "merge",
               "script",
               "signature",
               "sourceSet",
               "templateCache",
            ]);
            return _this183;
         }
         _inherits(config_Area, _XFAObject92);
         return _createClass(config_Area);
      })(XFAObject);
      var Attributes = /*#__PURE__*/ (function (_OptionObject6) {
         function Attributes(attributes) {
            _classCallCheck(this, Attributes);
            return _callSuper(this, Attributes, [
               CONFIG_NS_ID,
               "attributes",
               ["preserve", "delegate", "ignore"],
            ]);
         }
         _inherits(Attributes, _OptionObject6);
         return _createClass(Attributes);
      })(OptionObject);
      var AutoSave = /*#__PURE__*/ (function (_OptionObject7) {
         function AutoSave(attributes) {
            _classCallCheck(this, AutoSave);
            return _callSuper(this, AutoSave, [
               CONFIG_NS_ID,
               "autoSave",
               ["disabled", "enabled"],
            ]);
         }
         _inherits(AutoSave, _OptionObject7);
         return _createClass(AutoSave);
      })(OptionObject);
      var Base = /*#__PURE__*/ (function (_StringObject12) {
         function Base(attributes) {
            _classCallCheck(this, Base);
            return _callSuper(this, Base, [CONFIG_NS_ID, "base"]);
         }
         _inherits(Base, _StringObject12);
         return _createClass(Base);
      })(StringObject);
      var BatchOutput = /*#__PURE__*/ (function (_XFAObject93) {
         function BatchOutput(attributes) {
            var _this184;
            _classCallCheck(this, BatchOutput);
            _this184 = _callSuper(this, BatchOutput, [CONFIG_NS_ID, "batchOutput"]);
            _this184.format = getStringOption(attributes.format, [
               "none",
               "concat",
               "zip",
               "zipCompress",
            ]);
            return _this184;
         }
         _inherits(BatchOutput, _XFAObject93);
         return _createClass(BatchOutput);
      })(XFAObject);
      var BehaviorOverride = /*#__PURE__*/ (function (_ContentObject12) {
         function BehaviorOverride(attributes) {
            _classCallCheck(this, BehaviorOverride);
            return _callSuper(this, BehaviorOverride, [
               CONFIG_NS_ID,
               "behaviorOverride",
            ]);
         }
         _inherits(BehaviorOverride, _ContentObject12);
         return _createClass(BehaviorOverride, [
            {
               key: $finalize,
               value: function value() {
                  this[$content] = new Map(
                     this[$content]
                        .trim()
                        .split(/\s+/)
                        .filter(function (x) {
                           return x.includes(":");
                        })
                        .map(function (x) {
                           return x.split(":", 2);
                        }),
                  );
               },
            },
         ]);
      })(ContentObject);
      var Cache = /*#__PURE__*/ (function (_XFAObject94) {
         function Cache(attributes) {
            var _this185;
            _classCallCheck(this, Cache);
            _this185 = _callSuper(this, Cache, [CONFIG_NS_ID, "cache", true]);
            _this185.templateCache = null;
            return _this185;
         }
         _inherits(Cache, _XFAObject94);
         return _createClass(Cache);
      })(XFAObject);
      var Change = /*#__PURE__*/ (function (_Option5) {
         function Change(attributes) {
            _classCallCheck(this, Change);
            return _callSuper(this, Change, [CONFIG_NS_ID, "change"]);
         }
         _inherits(Change, _Option5);
         return _createClass(Change);
      })(Option01);
      var Common = /*#__PURE__*/ (function (_XFAObject95) {
         function Common(attributes) {
            var _this186;
            _classCallCheck(this, Common);
            _this186 = _callSuper(this, Common, [CONFIG_NS_ID, "common", true]);
            _this186.data = null;
            _this186.locale = null;
            _this186.localeSet = null;
            _this186.messaging = null;
            _this186.suppressBanner = null;
            _this186.template = null;
            _this186.validationMessaging = null;
            _this186.versionControl = null;
            _this186.log = new XFAObjectArray();
            return _this186;
         }
         _inherits(Common, _XFAObject95);
         return _createClass(Common);
      })(XFAObject);
      var Compress = /*#__PURE__*/ (function (_XFAObject96) {
         function Compress(attributes) {
            var _this187;
            _classCallCheck(this, Compress);
            _this187 = _callSuper(this, Compress, [CONFIG_NS_ID, "compress"]);
            _this187.scope = getStringOption(attributes.scope, [
               "imageOnly",
               "document",
            ]);
            return _this187;
         }
         _inherits(Compress, _XFAObject96);
         return _createClass(Compress);
      })(XFAObject);
      var CompressLogicalStructure = /*#__PURE__*/ (function (_Option6) {
         function CompressLogicalStructure(attributes) {
            _classCallCheck(this, CompressLogicalStructure);
            return _callSuper(this, CompressLogicalStructure, [
               CONFIG_NS_ID,
               "compressLogicalStructure",
            ]);
         }
         _inherits(CompressLogicalStructure, _Option6);
         return _createClass(CompressLogicalStructure);
      })(Option01);
      var CompressObjectStream = /*#__PURE__*/ (function (_Option7) {
         function CompressObjectStream(attributes) {
            _classCallCheck(this, CompressObjectStream);
            return _callSuper(this, CompressObjectStream, [
               CONFIG_NS_ID,
               "compressObjectStream",
            ]);
         }
         _inherits(CompressObjectStream, _Option7);
         return _createClass(CompressObjectStream);
      })(Option10);
      var Compression = /*#__PURE__*/ (function (_XFAObject97) {
         function Compression(attributes) {
            var _this188;
            _classCallCheck(this, Compression);
            _this188 = _callSuper(this, Compression, [
               CONFIG_NS_ID,
               "compression",
               true,
            ]);
            _this188.compressLogicalStructure = null;
            _this188.compressObjectStream = null;
            _this188.level = null;
            _this188.type = null;
            return _this188;
         }
         _inherits(Compression, _XFAObject97);
         return _createClass(Compression);
      })(XFAObject);
      var Config = /*#__PURE__*/ (function (_XFAObject98) {
         function Config(attributes) {
            var _this189;
            _classCallCheck(this, Config);
            _this189 = _callSuper(this, Config, [CONFIG_NS_ID, "config", true]);
            _this189.acrobat = null;
            _this189.present = null;
            _this189.trace = null;
            _this189.agent = new XFAObjectArray();
            return _this189;
         }
         _inherits(Config, _XFAObject98);
         return _createClass(Config);
      })(XFAObject);
      var Conformance = /*#__PURE__*/ (function (_OptionObject8) {
         function Conformance(attributes) {
            _classCallCheck(this, Conformance);
            return _callSuper(this, Conformance, [
               CONFIG_NS_ID,
               "conformance",
               ["A", "B"],
            ]);
         }
         _inherits(Conformance, _OptionObject8);
         return _createClass(Conformance);
      })(OptionObject);
      var ContentCopy = /*#__PURE__*/ (function (_Option8) {
         function ContentCopy(attributes) {
            _classCallCheck(this, ContentCopy);
            return _callSuper(this, ContentCopy, [CONFIG_NS_ID, "contentCopy"]);
         }
         _inherits(ContentCopy, _Option8);
         return _createClass(ContentCopy);
      })(Option01);
      var Copies = /*#__PURE__*/ (function (_IntegerObject4) {
         function Copies(attributes) {
            _classCallCheck(this, Copies);
            return _callSuper(this, Copies, [
               CONFIG_NS_ID,
               "copies",
               1,
               function (n) {
                  return n >= 1;
               },
            ]);
         }
         _inherits(Copies, _IntegerObject4);
         return _createClass(Copies);
      })(IntegerObject);
      var Creator = /*#__PURE__*/ (function (_StringObject13) {
         function Creator(attributes) {
            _classCallCheck(this, Creator);
            return _callSuper(this, Creator, [CONFIG_NS_ID, "creator"]);
         }
         _inherits(Creator, _StringObject13);
         return _createClass(Creator);
      })(StringObject);
      var CurrentPage = /*#__PURE__*/ (function (_IntegerObject5) {
         function CurrentPage(attributes) {
            _classCallCheck(this, CurrentPage);
            return _callSuper(this, CurrentPage, [
               CONFIG_NS_ID,
               "currentPage",
               0,
               function (n) {
                  return n >= 0;
               },
            ]);
         }
         _inherits(CurrentPage, _IntegerObject5);
         return _createClass(CurrentPage);
      })(IntegerObject);
      var Data = /*#__PURE__*/ (function (_XFAObject99) {
         function Data(attributes) {
            var _this190;
            _classCallCheck(this, Data);
            _this190 = _callSuper(this, Data, [CONFIG_NS_ID, "data", true]);
            _this190.adjustData = null;
            _this190.attributes = null;
            _this190.incrementalLoad = null;
            _this190.outputXSL = null;
            _this190.range = null;
            _this190.record = null;
            _this190.startNode = null;
            _this190.uri = null;
            _this190.window = null;
            _this190.xsl = null;
            _this190.excludeNS = new XFAObjectArray();
            _this190.transform = new XFAObjectArray();
            return _this190;
         }
         _inherits(Data, _XFAObject99);
         return _createClass(Data);
      })(XFAObject);
      var Debug = /*#__PURE__*/ (function (_XFAObject100) {
         function Debug(attributes) {
            var _this191;
            _classCallCheck(this, Debug);
            _this191 = _callSuper(this, Debug, [CONFIG_NS_ID, "debug", true]);
            _this191.uri = null;
            return _this191;
         }
         _inherits(Debug, _XFAObject100);
         return _createClass(Debug);
      })(XFAObject);
      var DefaultTypeface = /*#__PURE__*/ (function (_ContentObject13) {
         function DefaultTypeface(attributes) {
            var _this192;
            _classCallCheck(this, DefaultTypeface);
            _this192 = _callSuper(this, DefaultTypeface, [
               CONFIG_NS_ID,
               "defaultTypeface",
            ]);
            _this192.writingScript = getStringOption(attributes.writingScript, [
               "*",
               "Arabic",
               "Cyrillic",
               "EastEuropeanRoman",
               "Greek",
               "Hebrew",
               "Japanese",
               "Korean",
               "Roman",
               "SimplifiedChinese",
               "Thai",
               "TraditionalChinese",
               "Vietnamese",
            ]);
            return _this192;
         }
         _inherits(DefaultTypeface, _ContentObject13);
         return _createClass(DefaultTypeface);
      })(ContentObject);
      var Destination = /*#__PURE__*/ (function (_OptionObject9) {
         function Destination(attributes) {
            _classCallCheck(this, Destination);
            return _callSuper(this, Destination, [
               CONFIG_NS_ID,
               "destination",
               ["pdf", "pcl", "ps", "webClient", "zpl"],
            ]);
         }
         _inherits(Destination, _OptionObject9);
         return _createClass(Destination);
      })(OptionObject);
      var DocumentAssembly = /*#__PURE__*/ (function (_Option9) {
         function DocumentAssembly(attributes) {
            _classCallCheck(this, DocumentAssembly);
            return _callSuper(this, DocumentAssembly, [
               CONFIG_NS_ID,
               "documentAssembly",
            ]);
         }
         _inherits(DocumentAssembly, _Option9);
         return _createClass(DocumentAssembly);
      })(Option01);
      var Driver = /*#__PURE__*/ (function (_XFAObject101) {
         function Driver(attributes) {
            var _this193;
            _classCallCheck(this, Driver);
            _this193 = _callSuper(this, Driver, [CONFIG_NS_ID, "driver", true]);
            _this193.name = attributes.name ? attributes.name.trim() : "";
            _this193.fontInfo = null;
            _this193.xdc = null;
            return _this193;
         }
         _inherits(Driver, _XFAObject101);
         return _createClass(Driver);
      })(XFAObject);
      var DuplexOption = /*#__PURE__*/ (function (_OptionObject0) {
         function DuplexOption(attributes) {
            _classCallCheck(this, DuplexOption);
            return _callSuper(this, DuplexOption, [
               CONFIG_NS_ID,
               "duplexOption",
               ["simplex", "duplexFlipLongEdge", "duplexFlipShortEdge"],
            ]);
         }
         _inherits(DuplexOption, _OptionObject0);
         return _createClass(DuplexOption);
      })(OptionObject);
      var DynamicRender = /*#__PURE__*/ (function (_OptionObject1) {
         function DynamicRender(attributes) {
            _classCallCheck(this, DynamicRender);
            return _callSuper(this, DynamicRender, [
               CONFIG_NS_ID,
               "dynamicRender",
               ["forbidden", "required"],
            ]);
         }
         _inherits(DynamicRender, _OptionObject1);
         return _createClass(DynamicRender);
      })(OptionObject);
      var Embed = /*#__PURE__*/ (function (_Option0) {
         function Embed(attributes) {
            _classCallCheck(this, Embed);
            return _callSuper(this, Embed, [CONFIG_NS_ID, "embed"]);
         }
         _inherits(Embed, _Option0);
         return _createClass(Embed);
      })(Option01);
      var config_Encrypt = /*#__PURE__*/ (function (_Option1) {
         function config_Encrypt(attributes) {
            _classCallCheck(this, config_Encrypt);
            return _callSuper(this, config_Encrypt, [CONFIG_NS_ID, "encrypt"]);
         }
         _inherits(config_Encrypt, _Option1);
         return _createClass(config_Encrypt);
      })(Option01);
      var config_Encryption = /*#__PURE__*/ (function (_XFAObject102) {
         function config_Encryption(attributes) {
            var _this194;
            _classCallCheck(this, config_Encryption);
            _this194 = _callSuper(this, config_Encryption, [
               CONFIG_NS_ID,
               "encryption",
               true,
            ]);
            _this194.encrypt = null;
            _this194.encryptionLevel = null;
            _this194.permissions = null;
            return _this194;
         }
         _inherits(config_Encryption, _XFAObject102);
         return _createClass(config_Encryption);
      })(XFAObject);
      var EncryptionLevel = /*#__PURE__*/ (function (_OptionObject10) {
         function EncryptionLevel(attributes) {
            _classCallCheck(this, EncryptionLevel);
            return _callSuper(this, EncryptionLevel, [
               CONFIG_NS_ID,
               "encryptionLevel",
               ["40bit", "128bit"],
            ]);
         }
         _inherits(EncryptionLevel, _OptionObject10);
         return _createClass(EncryptionLevel);
      })(OptionObject);
      var Enforce = /*#__PURE__*/ (function (_StringObject14) {
         function Enforce(attributes) {
            _classCallCheck(this, Enforce);
            return _callSuper(this, Enforce, [CONFIG_NS_ID, "enforce"]);
         }
         _inherits(Enforce, _StringObject14);
         return _createClass(Enforce);
      })(StringObject);
      var Equate = /*#__PURE__*/ (function (_XFAObject103) {
         function Equate(attributes) {
            var _this195;
            _classCallCheck(this, Equate);
            _this195 = _callSuper(this, Equate, [CONFIG_NS_ID, "equate"]);
            _this195.force = getInteger({
               data: attributes.force,
               defaultValue: 1,
               validate: function validate(n) {
                  return n === 0;
               },
            });
            _this195.from = attributes.from || "";
            _this195.to = attributes.to || "";
            return _this195;
         }
         _inherits(Equate, _XFAObject103);
         return _createClass(Equate);
      })(XFAObject);
      var EquateRange = /*#__PURE__*/ (function (_XFAObject104) {
         function EquateRange(attributes) {
            var _this196;
            _classCallCheck(this, EquateRange);
            _this196 = _callSuper(this, EquateRange, [CONFIG_NS_ID, "equateRange"]);
            _this196.from = attributes.from || "";
            _this196.to = attributes.to || "";
            _this196._unicodeRange = attributes.unicodeRange || "";
            return _this196;
         }
         _inherits(EquateRange, _XFAObject104);
         return _createClass(EquateRange, [
            {
               key: "unicodeRange",
               get: function get() {
                  var ranges = [];
                  var unicodeRegex = /U\+([0-9a-fA-F]+)/;
                  var unicodeRange = this._unicodeRange;
                  var _iterator179 = _createForOfIteratorHelper(
                        unicodeRange
                           .split(",")
                           .map(function (x) {
                              return x.trim();
                           })
                           .filter(function (x) {
                              return !!x;
                           }),
                     ),
                     _step179;
                  try {
                     for (_iterator179.s(); !(_step179 = _iterator179.n()).done; ) {
                        var range = _step179.value;
                        range = range.split("-", 2).map(function (x) {
                           var found = x.match(unicodeRegex);
                           if (!found) {
                              return 0;
                           }
                           return parseInt(found[1], 16);
                        });
                        if (range.length === 1) {
                           range.push(range[0]);
                        }
                        ranges.push(range);
                     }
                  } catch (err) {
                     _iterator179.e(err);
                  } finally {
                     _iterator179.f();
                  }
                  return shadow(this, "unicodeRange", ranges);
               },
            },
         ]);
      })(XFAObject);
      var Exclude = /*#__PURE__*/ (function (_ContentObject14) {
         function Exclude(attributes) {
            _classCallCheck(this, Exclude);
            return _callSuper(this, Exclude, [CONFIG_NS_ID, "exclude"]);
         }
         _inherits(Exclude, _ContentObject14);
         return _createClass(Exclude, [
            {
               key: $finalize,
               value: function value() {
                  this[$content] = this[$content]
                     .trim()
                     .split(/\s+/)
                     .filter(function (x) {
                        return (
                           x &&
                           [
                              "calculate",
                              "close",
                              "enter",
                              "exit",
                              "initialize",
                              "ready",
                              "validate",
                           ].includes(x)
                        );
                     });
               },
            },
         ]);
      })(ContentObject);
      var ExcludeNS = /*#__PURE__*/ (function (_StringObject15) {
         function ExcludeNS(attributes) {
            _classCallCheck(this, ExcludeNS);
            return _callSuper(this, ExcludeNS, [CONFIG_NS_ID, "excludeNS"]);
         }
         _inherits(ExcludeNS, _StringObject15);
         return _createClass(ExcludeNS);
      })(StringObject);
      var FlipLabel = /*#__PURE__*/ (function (_OptionObject11) {
         function FlipLabel(attributes) {
            _classCallCheck(this, FlipLabel);
            return _callSuper(this, FlipLabel, [
               CONFIG_NS_ID,
               "flipLabel",
               ["usePrinterSetting", "on", "off"],
            ]);
         }
         _inherits(FlipLabel, _OptionObject11);
         return _createClass(FlipLabel);
      })(OptionObject);
      var config_FontInfo = /*#__PURE__*/ (function (_XFAObject105) {
         function config_FontInfo(attributes) {
            var _this197;
            _classCallCheck(this, config_FontInfo);
            _this197 = _callSuper(this, config_FontInfo, [
               CONFIG_NS_ID,
               "fontInfo",
               true,
            ]);
            _this197.embed = null;
            _this197.map = null;
            _this197.subsetBelow = null;
            _this197.alwaysEmbed = new XFAObjectArray();
            _this197.defaultTypeface = new XFAObjectArray();
            _this197.neverEmbed = new XFAObjectArray();
            return _this197;
         }
         _inherits(config_FontInfo, _XFAObject105);
         return _createClass(config_FontInfo);
      })(XFAObject);
      var FormFieldFilling = /*#__PURE__*/ (function (_Option10) {
         function FormFieldFilling(attributes) {
            _classCallCheck(this, FormFieldFilling);
            return _callSuper(this, FormFieldFilling, [
               CONFIG_NS_ID,
               "formFieldFilling",
            ]);
         }
         _inherits(FormFieldFilling, _Option10);
         return _createClass(FormFieldFilling);
      })(Option01);
      var GroupParent = /*#__PURE__*/ (function (_StringObject16) {
         function GroupParent(attributes) {
            _classCallCheck(this, GroupParent);
            return _callSuper(this, GroupParent, [CONFIG_NS_ID, "groupParent"]);
         }
         _inherits(GroupParent, _StringObject16);
         return _createClass(GroupParent);
      })(StringObject);
      var IfEmpty = /*#__PURE__*/ (function (_OptionObject12) {
         function IfEmpty(attributes) {
            _classCallCheck(this, IfEmpty);
            return _callSuper(this, IfEmpty, [
               CONFIG_NS_ID,
               "ifEmpty",
               ["dataValue", "dataGroup", "ignore", "remove"],
            ]);
         }
         _inherits(IfEmpty, _OptionObject12);
         return _createClass(IfEmpty);
      })(OptionObject);
      var IncludeXDPContent = /*#__PURE__*/ (function (_StringObject17) {
         function IncludeXDPContent(attributes) {
            _classCallCheck(this, IncludeXDPContent);
            return _callSuper(this, IncludeXDPContent, [
               CONFIG_NS_ID,
               "includeXDPContent",
            ]);
         }
         _inherits(IncludeXDPContent, _StringObject17);
         return _createClass(IncludeXDPContent);
      })(StringObject);
      var IncrementalLoad = /*#__PURE__*/ (function (_OptionObject13) {
         function IncrementalLoad(attributes) {
            _classCallCheck(this, IncrementalLoad);
            return _callSuper(this, IncrementalLoad, [
               CONFIG_NS_ID,
               "incrementalLoad",
               ["none", "forwardOnly"],
            ]);
         }
         _inherits(IncrementalLoad, _OptionObject13);
         return _createClass(IncrementalLoad);
      })(OptionObject);
      var IncrementalMerge = /*#__PURE__*/ (function (_Option11) {
         function IncrementalMerge(attributes) {
            _classCallCheck(this, IncrementalMerge);
            return _callSuper(this, IncrementalMerge, [
               CONFIG_NS_ID,
               "incrementalMerge",
            ]);
         }
         _inherits(IncrementalMerge, _Option11);
         return _createClass(IncrementalMerge);
      })(Option01);
      var Interactive = /*#__PURE__*/ (function (_Option12) {
         function Interactive(attributes) {
            _classCallCheck(this, Interactive);
            return _callSuper(this, Interactive, [CONFIG_NS_ID, "interactive"]);
         }
         _inherits(Interactive, _Option12);
         return _createClass(Interactive);
      })(Option01);
      var Jog = /*#__PURE__*/ (function (_OptionObject14) {
         function Jog(attributes) {
            _classCallCheck(this, Jog);
            return _callSuper(this, Jog, [
               CONFIG_NS_ID,
               "jog",
               ["usePrinterSetting", "none", "pageSet"],
            ]);
         }
         _inherits(Jog, _OptionObject14);
         return _createClass(Jog);
      })(OptionObject);
      var LabelPrinter = /*#__PURE__*/ (function (_XFAObject106) {
         function LabelPrinter(attributes) {
            var _this198;
            _classCallCheck(this, LabelPrinter);
            _this198 = _callSuper(this, LabelPrinter, [
               CONFIG_NS_ID,
               "labelPrinter",
               true,
            ]);
            _this198.name = getStringOption(attributes.name, [
               "zpl",
               "dpl",
               "ipl",
               "tcpl",
            ]);
            _this198.batchOutput = null;
            _this198.flipLabel = null;
            _this198.fontInfo = null;
            _this198.xdc = null;
            return _this198;
         }
         _inherits(LabelPrinter, _XFAObject106);
         return _createClass(LabelPrinter);
      })(XFAObject);
      var Layout = /*#__PURE__*/ (function (_OptionObject15) {
         function Layout(attributes) {
            _classCallCheck(this, Layout);
            return _callSuper(this, Layout, [
               CONFIG_NS_ID,
               "layout",
               ["paginate", "panel"],
            ]);
         }
         _inherits(Layout, _OptionObject15);
         return _createClass(Layout);
      })(OptionObject);
      var Level = /*#__PURE__*/ (function (_IntegerObject6) {
         function Level(attributes) {
            _classCallCheck(this, Level);
            return _callSuper(this, Level, [
               CONFIG_NS_ID,
               "level",
               0,
               function (n) {
                  return n > 0;
               },
            ]);
         }
         _inherits(Level, _IntegerObject6);
         return _createClass(Level);
      })(IntegerObject);
      var Linearized = /*#__PURE__*/ (function (_Option13) {
         function Linearized(attributes) {
            _classCallCheck(this, Linearized);
            return _callSuper(this, Linearized, [CONFIG_NS_ID, "linearized"]);
         }
         _inherits(Linearized, _Option13);
         return _createClass(Linearized);
      })(Option01);
      var Locale = /*#__PURE__*/ (function (_StringObject18) {
         function Locale(attributes) {
            _classCallCheck(this, Locale);
            return _callSuper(this, Locale, [CONFIG_NS_ID, "locale"]);
         }
         _inherits(Locale, _StringObject18);
         return _createClass(Locale);
      })(StringObject);
      var LocaleSet = /*#__PURE__*/ (function (_StringObject19) {
         function LocaleSet(attributes) {
            _classCallCheck(this, LocaleSet);
            return _callSuper(this, LocaleSet, [CONFIG_NS_ID, "localeSet"]);
         }
         _inherits(LocaleSet, _StringObject19);
         return _createClass(LocaleSet);
      })(StringObject);
      var Log = /*#__PURE__*/ (function (_XFAObject107) {
         function Log(attributes) {
            var _this199;
            _classCallCheck(this, Log);
            _this199 = _callSuper(this, Log, [CONFIG_NS_ID, "log", true]);
            _this199.mode = null;
            _this199.threshold = null;
            _this199.to = null;
            _this199.uri = null;
            return _this199;
         }
         _inherits(Log, _XFAObject107);
         return _createClass(Log);
      })(XFAObject);
      var MapElement = /*#__PURE__*/ (function (_XFAObject108) {
         function MapElement(attributes) {
            var _this200;
            _classCallCheck(this, MapElement);
            _this200 = _callSuper(this, MapElement, [CONFIG_NS_ID, "map", true]);
            _this200.equate = new XFAObjectArray();
            _this200.equateRange = new XFAObjectArray();
            return _this200;
         }
         _inherits(MapElement, _XFAObject108);
         return _createClass(MapElement);
      })(XFAObject);
      var MediumInfo = /*#__PURE__*/ (function (_XFAObject109) {
         function MediumInfo(attributes) {
            var _this201;
            _classCallCheck(this, MediumInfo);
            _this201 = _callSuper(this, MediumInfo, [
               CONFIG_NS_ID,
               "mediumInfo",
               true,
            ]);
            _this201.map = null;
            return _this201;
         }
         _inherits(MediumInfo, _XFAObject109);
         return _createClass(MediumInfo);
      })(XFAObject);
      var config_Message = /*#__PURE__*/ (function (_XFAObject110) {
         function config_Message(attributes) {
            var _this202;
            _classCallCheck(this, config_Message);
            _this202 = _callSuper(this, config_Message, [
               CONFIG_NS_ID,
               "message",
               true,
            ]);
            _this202.msgId = null;
            _this202.severity = null;
            return _this202;
         }
         _inherits(config_Message, _XFAObject110);
         return _createClass(config_Message);
      })(XFAObject);
      var Messaging = /*#__PURE__*/ (function (_XFAObject111) {
         function Messaging(attributes) {
            var _this203;
            _classCallCheck(this, Messaging);
            _this203 = _callSuper(this, Messaging, [
               CONFIG_NS_ID,
               "messaging",
               true,
            ]);
            _this203.message = new XFAObjectArray();
            return _this203;
         }
         _inherits(Messaging, _XFAObject111);
         return _createClass(Messaging);
      })(XFAObject);
      var Mode = /*#__PURE__*/ (function (_OptionObject16) {
         function Mode(attributes) {
            _classCallCheck(this, Mode);
            return _callSuper(this, Mode, [
               CONFIG_NS_ID,
               "mode",
               ["append", "overwrite"],
            ]);
         }
         _inherits(Mode, _OptionObject16);
         return _createClass(Mode);
      })(OptionObject);
      var ModifyAnnots = /*#__PURE__*/ (function (_Option14) {
         function ModifyAnnots(attributes) {
            _classCallCheck(this, ModifyAnnots);
            return _callSuper(this, ModifyAnnots, [CONFIG_NS_ID, "modifyAnnots"]);
         }
         _inherits(ModifyAnnots, _Option14);
         return _createClass(ModifyAnnots);
      })(Option01);
      var MsgId = /*#__PURE__*/ (function (_IntegerObject7) {
         function MsgId(attributes) {
            _classCallCheck(this, MsgId);
            return _callSuper(this, MsgId, [
               CONFIG_NS_ID,
               "msgId",
               1,
               function (n) {
                  return n >= 1;
               },
            ]);
         }
         _inherits(MsgId, _IntegerObject7);
         return _createClass(MsgId);
      })(IntegerObject);
      var NameAttr = /*#__PURE__*/ (function (_StringObject20) {
         function NameAttr(attributes) {
            _classCallCheck(this, NameAttr);
            return _callSuper(this, NameAttr, [CONFIG_NS_ID, "nameAttr"]);
         }
         _inherits(NameAttr, _StringObject20);
         return _createClass(NameAttr);
      })(StringObject);
      var NeverEmbed = /*#__PURE__*/ (function (_ContentObject15) {
         function NeverEmbed(attributes) {
            _classCallCheck(this, NeverEmbed);
            return _callSuper(this, NeverEmbed, [CONFIG_NS_ID, "neverEmbed"]);
         }
         _inherits(NeverEmbed, _ContentObject15);
         return _createClass(NeverEmbed);
      })(ContentObject);
      var NumberOfCopies = /*#__PURE__*/ (function (_IntegerObject8) {
         function NumberOfCopies(attributes) {
            _classCallCheck(this, NumberOfCopies);
            return _callSuper(this, NumberOfCopies, [
               CONFIG_NS_ID,
               "numberOfCopies",
               null,
               function (n) {
                  return n >= 2 && n <= 5;
               },
            ]);
         }
         _inherits(NumberOfCopies, _IntegerObject8);
         return _createClass(NumberOfCopies);
      })(IntegerObject);
      var OpenAction = /*#__PURE__*/ (function (_XFAObject112) {
         function OpenAction(attributes) {
            var _this204;
            _classCallCheck(this, OpenAction);
            _this204 = _callSuper(this, OpenAction, [
               CONFIG_NS_ID,
               "openAction",
               true,
            ]);
            _this204.destination = null;
            return _this204;
         }
         _inherits(OpenAction, _XFAObject112);
         return _createClass(OpenAction);
      })(XFAObject);
      var Output = /*#__PURE__*/ (function (_XFAObject113) {
         function Output(attributes) {
            var _this205;
            _classCallCheck(this, Output);
            _this205 = _callSuper(this, Output, [CONFIG_NS_ID, "output", true]);
            _this205.to = null;
            _this205.type = null;
            _this205.uri = null;
            return _this205;
         }
         _inherits(Output, _XFAObject113);
         return _createClass(Output);
      })(XFAObject);
      var OutputBin = /*#__PURE__*/ (function (_StringObject21) {
         function OutputBin(attributes) {
            _classCallCheck(this, OutputBin);
            return _callSuper(this, OutputBin, [CONFIG_NS_ID, "outputBin"]);
         }
         _inherits(OutputBin, _StringObject21);
         return _createClass(OutputBin);
      })(StringObject);
      var OutputXSL = /*#__PURE__*/ (function (_XFAObject114) {
         function OutputXSL(attributes) {
            var _this206;
            _classCallCheck(this, OutputXSL);
            _this206 = _callSuper(this, OutputXSL, [
               CONFIG_NS_ID,
               "outputXSL",
               true,
            ]);
            _this206.uri = null;
            return _this206;
         }
         _inherits(OutputXSL, _XFAObject114);
         return _createClass(OutputXSL);
      })(XFAObject);
      var Overprint = /*#__PURE__*/ (function (_OptionObject17) {
         function Overprint(attributes) {
            _classCallCheck(this, Overprint);
            return _callSuper(this, Overprint, [
               CONFIG_NS_ID,
               "overprint",
               ["none", "both", "draw", "field"],
            ]);
         }
         _inherits(Overprint, _OptionObject17);
         return _createClass(Overprint);
      })(OptionObject);
      var Packets = /*#__PURE__*/ (function (_StringObject22) {
         function Packets(attributes) {
            _classCallCheck(this, Packets);
            return _callSuper(this, Packets, [CONFIG_NS_ID, "packets"]);
         }
         _inherits(Packets, _StringObject22);
         return _createClass(Packets, [
            {
               key: $finalize,
               value: function value() {
                  if (this[$content] === "*") {
                     return;
                  }
                  this[$content] = this[$content]
                     .trim()
                     .split(/\s+/)
                     .filter(function (x) {
                        return [
                           "config",
                           "datasets",
                           "template",
                           "xfdf",
                           "xslt",
                        ].includes(x);
                     });
               },
            },
         ]);
      })(StringObject);
      var PageOffset = /*#__PURE__*/ (function (_XFAObject115) {
         function PageOffset(attributes) {
            var _this207;
            _classCallCheck(this, PageOffset);
            _this207 = _callSuper(this, PageOffset, [CONFIG_NS_ID, "pageOffset"]);
            _this207.x = getInteger({
               data: attributes.x,
               defaultValue: "useXDCSetting",
               validate: function validate(n) {
                  return true;
               },
            });
            _this207.y = getInteger({
               data: attributes.y,
               defaultValue: "useXDCSetting",
               validate: function validate(n) {
                  return true;
               },
            });
            return _this207;
         }
         _inherits(PageOffset, _XFAObject115);
         return _createClass(PageOffset);
      })(XFAObject);
      var PageRange = /*#__PURE__*/ (function (_StringObject23) {
         function PageRange(attributes) {
            _classCallCheck(this, PageRange);
            return _callSuper(this, PageRange, [CONFIG_NS_ID, "pageRange"]);
         }
         _inherits(PageRange, _StringObject23);
         return _createClass(PageRange, [
            {
               key: $finalize,
               value: function value() {
                  var numbers = this[$content]
                     .trim()
                     .split(/\s+/)
                     .map(function (x) {
                        return parseInt(x, 10);
                     });
                  var ranges = [];
                  for (var i = 0, ii = numbers.length; i < ii; i += 2) {
                     ranges.push(numbers.slice(i, i + 2));
                  }
                  this[$content] = ranges;
               },
            },
         ]);
      })(StringObject);
      var Pagination = /*#__PURE__*/ (function (_OptionObject18) {
         function Pagination(attributes) {
            _classCallCheck(this, Pagination);
            return _callSuper(this, Pagination, [
               CONFIG_NS_ID,
               "pagination",
               ["simplex", "duplexShortEdge", "duplexLongEdge"],
            ]);
         }
         _inherits(Pagination, _OptionObject18);
         return _createClass(Pagination);
      })(OptionObject);
      var PaginationOverride = /*#__PURE__*/ (function (_OptionObject19) {
         function PaginationOverride(attributes) {
            _classCallCheck(this, PaginationOverride);
            return _callSuper(this, PaginationOverride, [
               CONFIG_NS_ID,
               "paginationOverride",
               [
                  "none",
                  "forceDuplex",
                  "forceDuplexLongEdge",
                  "forceDuplexShortEdge",
                  "forceSimplex",
               ],
            ]);
         }
         _inherits(PaginationOverride, _OptionObject19);
         return _createClass(PaginationOverride);
      })(OptionObject);
      var Part = /*#__PURE__*/ (function (_IntegerObject9) {
         function Part(attributes) {
            _classCallCheck(this, Part);
            return _callSuper(this, Part, [
               CONFIG_NS_ID,
               "part",
               1,
               function (n) {
                  return false;
               },
            ]);
         }
         _inherits(Part, _IntegerObject9);
         return _createClass(Part);
      })(IntegerObject);
      var Pcl = /*#__PURE__*/ (function (_XFAObject116) {
         function Pcl(attributes) {
            var _this208;
            _classCallCheck(this, Pcl);
            _this208 = _callSuper(this, Pcl, [CONFIG_NS_ID, "pcl", true]);
            _this208.name = attributes.name || "";
            _this208.batchOutput = null;
            _this208.fontInfo = null;
            _this208.jog = null;
            _this208.mediumInfo = null;
            _this208.outputBin = null;
            _this208.pageOffset = null;
            _this208.staple = null;
            _this208.xdc = null;
            return _this208;
         }
         _inherits(Pcl, _XFAObject116);
         return _createClass(Pcl);
      })(XFAObject);
      var Pdf = /*#__PURE__*/ (function (_XFAObject117) {
         function Pdf(attributes) {
            var _this209;
            _classCallCheck(this, Pdf);
            _this209 = _callSuper(this, Pdf, [CONFIG_NS_ID, "pdf", true]);
            _this209.name = attributes.name || "";
            _this209.adobeExtensionLevel = null;
            _this209.batchOutput = null;
            _this209.compression = null;
            _this209.creator = null;
            _this209.encryption = null;
            _this209.fontInfo = null;
            _this209.interactive = null;
            _this209.linearized = null;
            _this209.openAction = null;
            _this209.pdfa = null;
            _this209.producer = null;
            _this209.renderPolicy = null;
            _this209.scriptModel = null;
            _this209.silentPrint = null;
            _this209.submitFormat = null;
            _this209.tagged = null;
            _this209.version = null;
            _this209.viewerPreferences = null;
            _this209.xdc = null;
            return _this209;
         }
         _inherits(Pdf, _XFAObject117);
         return _createClass(Pdf);
      })(XFAObject);
      var Pdfa = /*#__PURE__*/ (function (_XFAObject118) {
         function Pdfa(attributes) {
            var _this210;
            _classCallCheck(this, Pdfa);
            _this210 = _callSuper(this, Pdfa, [CONFIG_NS_ID, "pdfa", true]);
            _this210.amd = null;
            _this210.conformance = null;
            _this210.includeXDPContent = null;
            _this210.part = null;
            return _this210;
         }
         _inherits(Pdfa, _XFAObject118);
         return _createClass(Pdfa);
      })(XFAObject);
      var Permissions = /*#__PURE__*/ (function (_XFAObject119) {
         function Permissions(attributes) {
            var _this211;
            _classCallCheck(this, Permissions);
            _this211 = _callSuper(this, Permissions, [
               CONFIG_NS_ID,
               "permissions",
               true,
            ]);
            _this211.accessibleContent = null;
            _this211.change = null;
            _this211.contentCopy = null;
            _this211.documentAssembly = null;
            _this211.formFieldFilling = null;
            _this211.modifyAnnots = null;
            _this211.plaintextMetadata = null;
            _this211.print = null;
            _this211.printHighQuality = null;
            return _this211;
         }
         _inherits(Permissions, _XFAObject119);
         return _createClass(Permissions);
      })(XFAObject);
      var PickTrayByPDFSize = /*#__PURE__*/ (function (_Option15) {
         function PickTrayByPDFSize(attributes) {
            _classCallCheck(this, PickTrayByPDFSize);
            return _callSuper(this, PickTrayByPDFSize, [
               CONFIG_NS_ID,
               "pickTrayByPDFSize",
            ]);
         }
         _inherits(PickTrayByPDFSize, _Option15);
         return _createClass(PickTrayByPDFSize);
      })(Option01);
      var config_Picture = /*#__PURE__*/ (function (_StringObject24) {
         function config_Picture(attributes) {
            _classCallCheck(this, config_Picture);
            return _callSuper(this, config_Picture, [CONFIG_NS_ID, "picture"]);
         }
         _inherits(config_Picture, _StringObject24);
         return _createClass(config_Picture);
      })(StringObject);
      var PlaintextMetadata = /*#__PURE__*/ (function (_Option16) {
         function PlaintextMetadata(attributes) {
            _classCallCheck(this, PlaintextMetadata);
            return _callSuper(this, PlaintextMetadata, [
               CONFIG_NS_ID,
               "plaintextMetadata",
            ]);
         }
         _inherits(PlaintextMetadata, _Option16);
         return _createClass(PlaintextMetadata);
      })(Option01);
      var Presence = /*#__PURE__*/ (function (_OptionObject20) {
         function Presence(attributes) {
            _classCallCheck(this, Presence);
            return _callSuper(this, Presence, [
               CONFIG_NS_ID,
               "presence",
               ["preserve", "dissolve", "dissolveStructure", "ignore", "remove"],
            ]);
         }
         _inherits(Presence, _OptionObject20);
         return _createClass(Presence);
      })(OptionObject);
      var Present = /*#__PURE__*/ (function (_XFAObject120) {
         function Present(attributes) {
            var _this212;
            _classCallCheck(this, Present);
            _this212 = _callSuper(this, Present, [CONFIG_NS_ID, "present", true]);
            _this212.behaviorOverride = null;
            _this212.cache = null;
            _this212.common = null;
            _this212.copies = null;
            _this212.destination = null;
            _this212.incrementalMerge = null;
            _this212.layout = null;
            _this212.output = null;
            _this212.overprint = null;
            _this212.pagination = null;
            _this212.paginationOverride = null;
            _this212.script = null;
            _this212.validate = null;
            _this212.xdp = null;
            _this212.driver = new XFAObjectArray();
            _this212.labelPrinter = new XFAObjectArray();
            _this212.pcl = new XFAObjectArray();
            _this212.pdf = new XFAObjectArray();
            _this212.ps = new XFAObjectArray();
            _this212.submitUrl = new XFAObjectArray();
            _this212.webClient = new XFAObjectArray();
            _this212.zpl = new XFAObjectArray();
            return _this212;
         }
         _inherits(Present, _XFAObject120);
         return _createClass(Present);
      })(XFAObject);
      var Print = /*#__PURE__*/ (function (_Option17) {
         function Print(attributes) {
            _classCallCheck(this, Print);
            return _callSuper(this, Print, [CONFIG_NS_ID, "print"]);
         }
         _inherits(Print, _Option17);
         return _createClass(Print);
      })(Option01);
      var PrintHighQuality = /*#__PURE__*/ (function (_Option18) {
         function PrintHighQuality(attributes) {
            _classCallCheck(this, PrintHighQuality);
            return _callSuper(this, PrintHighQuality, [
               CONFIG_NS_ID,
               "printHighQuality",
            ]);
         }
         _inherits(PrintHighQuality, _Option18);
         return _createClass(PrintHighQuality);
      })(Option01);
      var PrintScaling = /*#__PURE__*/ (function (_OptionObject21) {
         function PrintScaling(attributes) {
            _classCallCheck(this, PrintScaling);
            return _callSuper(this, PrintScaling, [
               CONFIG_NS_ID,
               "printScaling",
               ["appdefault", "noScaling"],
            ]);
         }
         _inherits(PrintScaling, _OptionObject21);
         return _createClass(PrintScaling);
      })(OptionObject);
      var PrinterName = /*#__PURE__*/ (function (_StringObject25) {
         function PrinterName(attributes) {
            _classCallCheck(this, PrinterName);
            return _callSuper(this, PrinterName, [CONFIG_NS_ID, "printerName"]);
         }
         _inherits(PrinterName, _StringObject25);
         return _createClass(PrinterName);
      })(StringObject);
      var Producer = /*#__PURE__*/ (function (_StringObject26) {
         function Producer(attributes) {
            _classCallCheck(this, Producer);
            return _callSuper(this, Producer, [CONFIG_NS_ID, "producer"]);
         }
         _inherits(Producer, _StringObject26);
         return _createClass(Producer);
      })(StringObject);
      var Ps = /*#__PURE__*/ (function (_XFAObject121) {
         function Ps(attributes) {
            var _this213;
            _classCallCheck(this, Ps);
            _this213 = _callSuper(this, Ps, [CONFIG_NS_ID, "ps", true]);
            _this213.name = attributes.name || "";
            _this213.batchOutput = null;
            _this213.fontInfo = null;
            _this213.jog = null;
            _this213.mediumInfo = null;
            _this213.outputBin = null;
            _this213.staple = null;
            _this213.xdc = null;
            return _this213;
         }
         _inherits(Ps, _XFAObject121);
         return _createClass(Ps);
      })(XFAObject);
      var Range = /*#__PURE__*/ (function (_ContentObject16) {
         function Range(attributes) {
            _classCallCheck(this, Range);
            return _callSuper(this, Range, [CONFIG_NS_ID, "range"]);
         }
         _inherits(Range, _ContentObject16);
         return _createClass(Range, [
            {
               key: $finalize,
               value: function value() {
                  this[$content] = this[$content]
                     .trim()
                     .split(/\s*,\s*/, 2)
                     .map(function (range) {
                        return range.split("-").map(function (x) {
                           return parseInt(x.trim(), 10);
                        });
                     })
                     .filter(function (range) {
                        return range.every(function (x) {
                           return !isNaN(x);
                        });
                     })
                     .map(function (range) {
                        if (range.length === 1) {
                           range.push(range[0]);
                        }
                        return range;
                     });
               },
            },
         ]);
      })(ContentObject);
      var Record = /*#__PURE__*/ (function (_ContentObject17) {
         function Record(attributes) {
            _classCallCheck(this, Record);
            return _callSuper(this, Record, [CONFIG_NS_ID, "record"]);
         }
         _inherits(Record, _ContentObject17);
         return _createClass(Record, [
            {
               key: $finalize,
               value: function value() {
                  this[$content] = this[$content].trim();
                  var n = parseInt(this[$content], 10);
                  if (!isNaN(n) && n >= 0) {
                     this[$content] = n;
                  }
               },
            },
         ]);
      })(ContentObject);
      var Relevant = /*#__PURE__*/ (function (_ContentObject18) {
         function Relevant(attributes) {
            _classCallCheck(this, Relevant);
            return _callSuper(this, Relevant, [CONFIG_NS_ID, "relevant"]);
         }
         _inherits(Relevant, _ContentObject18);
         return _createClass(Relevant, [
            {
               key: $finalize,
               value: function value() {
                  this[$content] = this[$content].trim().split(/\s+/);
               },
            },
         ]);
      })(ContentObject);
      var Rename = /*#__PURE__*/ (function (_ContentObject19) {
         function Rename(attributes) {
            _classCallCheck(this, Rename);
            return _callSuper(this, Rename, [CONFIG_NS_ID, "rename"]);
         }
         _inherits(Rename, _ContentObject19);
         return _createClass(Rename, [
            {
               key: $finalize,
               value: function value() {
                  this[$content] = this[$content].trim();
                  if (
                     this[$content].toLowerCase().startsWith("xml") ||
                     new RegExp("[\\p{L}_][\\p{L}\\d._\\p{M}-]*", "u").test(
                        this[$content],
                     )
                  ) {
                     warn("XFA - Rename: invalid XFA name");
                  }
               },
            },
         ]);
      })(ContentObject);
      var RenderPolicy = /*#__PURE__*/ (function (_OptionObject22) {
         function RenderPolicy(attributes) {
            _classCallCheck(this, RenderPolicy);
            return _callSuper(this, RenderPolicy, [
               CONFIG_NS_ID,
               "renderPolicy",
               ["server", "client"],
            ]);
         }
         _inherits(RenderPolicy, _OptionObject22);
         return _createClass(RenderPolicy);
      })(OptionObject);
      var RunScripts = /*#__PURE__*/ (function (_OptionObject23) {
         function RunScripts(attributes) {
            _classCallCheck(this, RunScripts);
            return _callSuper(this, RunScripts, [
               CONFIG_NS_ID,
               "runScripts",
               ["both", "client", "none", "server"],
            ]);
         }
         _inherits(RunScripts, _OptionObject23);
         return _createClass(RunScripts);
      })(OptionObject);
      var config_Script = /*#__PURE__*/ (function (_XFAObject122) {
         function config_Script(attributes) {
            var _this214;
            _classCallCheck(this, config_Script);
            _this214 = _callSuper(this, config_Script, [
               CONFIG_NS_ID,
               "script",
               true,
            ]);
            _this214.currentPage = null;
            _this214.exclude = null;
            _this214.runScripts = null;
            return _this214;
         }
         _inherits(config_Script, _XFAObject122);
         return _createClass(config_Script);
      })(XFAObject);
      var ScriptModel = /*#__PURE__*/ (function (_OptionObject24) {
         function ScriptModel(attributes) {
            _classCallCheck(this, ScriptModel);
            return _callSuper(this, ScriptModel, [
               CONFIG_NS_ID,
               "scriptModel",
               ["XFA", "none"],
            ]);
         }
         _inherits(ScriptModel, _OptionObject24);
         return _createClass(ScriptModel);
      })(OptionObject);
      var Severity = /*#__PURE__*/ (function (_OptionObject25) {
         function Severity(attributes) {
            _classCallCheck(this, Severity);
            return _callSuper(this, Severity, [
               CONFIG_NS_ID,
               "severity",
               ["ignore", "error", "information", "trace", "warning"],
            ]);
         }
         _inherits(Severity, _OptionObject25);
         return _createClass(Severity);
      })(OptionObject);
      var SilentPrint = /*#__PURE__*/ (function (_XFAObject123) {
         function SilentPrint(attributes) {
            var _this215;
            _classCallCheck(this, SilentPrint);
            _this215 = _callSuper(this, SilentPrint, [
               CONFIG_NS_ID,
               "silentPrint",
               true,
            ]);
            _this215.addSilentPrint = null;
            _this215.printerName = null;
            return _this215;
         }
         _inherits(SilentPrint, _XFAObject123);
         return _createClass(SilentPrint);
      })(XFAObject);
      var Staple = /*#__PURE__*/ (function (_XFAObject124) {
         function Staple(attributes) {
            var _this216;
            _classCallCheck(this, Staple);
            _this216 = _callSuper(this, Staple, [CONFIG_NS_ID, "staple"]);
            _this216.mode = getStringOption(attributes.mode, [
               "usePrinterSetting",
               "on",
               "off",
            ]);
            return _this216;
         }
         _inherits(Staple, _XFAObject124);
         return _createClass(Staple);
      })(XFAObject);
      var StartNode = /*#__PURE__*/ (function (_StringObject27) {
         function StartNode(attributes) {
            _classCallCheck(this, StartNode);
            return _callSuper(this, StartNode, [CONFIG_NS_ID, "startNode"]);
         }
         _inherits(StartNode, _StringObject27);
         return _createClass(StartNode);
      })(StringObject);
      var StartPage = /*#__PURE__*/ (function (_IntegerObject0) {
         function StartPage(attributes) {
            _classCallCheck(this, StartPage);
            return _callSuper(this, StartPage, [
               CONFIG_NS_ID,
               "startPage",
               0,
               function (n) {
                  return true;
               },
            ]);
         }
         _inherits(StartPage, _IntegerObject0);
         return _createClass(StartPage);
      })(IntegerObject);
      var SubmitFormat = /*#__PURE__*/ (function (_OptionObject26) {
         function SubmitFormat(attributes) {
            _classCallCheck(this, SubmitFormat);
            return _callSuper(this, SubmitFormat, [
               CONFIG_NS_ID,
               "submitFormat",
               ["html", "delegate", "fdf", "xml", "pdf"],
            ]);
         }
         _inherits(SubmitFormat, _OptionObject26);
         return _createClass(SubmitFormat);
      })(OptionObject);
      var SubmitUrl = /*#__PURE__*/ (function (_StringObject28) {
         function SubmitUrl(attributes) {
            _classCallCheck(this, SubmitUrl);
            return _callSuper(this, SubmitUrl, [CONFIG_NS_ID, "submitUrl"]);
         }
         _inherits(SubmitUrl, _StringObject28);
         return _createClass(SubmitUrl);
      })(StringObject);
      var SubsetBelow = /*#__PURE__*/ (function (_IntegerObject1) {
         function SubsetBelow(attributes) {
            _classCallCheck(this, SubsetBelow);
            return _callSuper(this, SubsetBelow, [
               CONFIG_NS_ID,
               "subsetBelow",
               100,
               function (n) {
                  return n >= 0 && n <= 100;
               },
            ]);
         }
         _inherits(SubsetBelow, _IntegerObject1);
         return _createClass(SubsetBelow);
      })(IntegerObject);
      var SuppressBanner = /*#__PURE__*/ (function (_Option19) {
         function SuppressBanner(attributes) {
            _classCallCheck(this, SuppressBanner);
            return _callSuper(this, SuppressBanner, [
               CONFIG_NS_ID,
               "suppressBanner",
            ]);
         }
         _inherits(SuppressBanner, _Option19);
         return _createClass(SuppressBanner);
      })(Option01);
      var Tagged = /*#__PURE__*/ (function (_Option20) {
         function Tagged(attributes) {
            _classCallCheck(this, Tagged);
            return _callSuper(this, Tagged, [CONFIG_NS_ID, "tagged"]);
         }
         _inherits(Tagged, _Option20);
         return _createClass(Tagged);
      })(Option01);
      var config_Template = /*#__PURE__*/ (function (_XFAObject125) {
         function config_Template(attributes) {
            var _this217;
            _classCallCheck(this, config_Template);
            _this217 = _callSuper(this, config_Template, [
               CONFIG_NS_ID,
               "template",
               true,
            ]);
            _this217.base = null;
            _this217.relevant = null;
            _this217.startPage = null;
            _this217.uri = null;
            _this217.xsl = null;
            return _this217;
         }
         _inherits(config_Template, _XFAObject125);
         return _createClass(config_Template);
      })(XFAObject);
      var Threshold = /*#__PURE__*/ (function (_OptionObject27) {
         function Threshold(attributes) {
            _classCallCheck(this, Threshold);
            return _callSuper(this, Threshold, [
               CONFIG_NS_ID,
               "threshold",
               ["trace", "error", "information", "warning"],
            ]);
         }
         _inherits(Threshold, _OptionObject27);
         return _createClass(Threshold);
      })(OptionObject);
      var To = /*#__PURE__*/ (function (_OptionObject28) {
         function To(attributes) {
            _classCallCheck(this, To);
            return _callSuper(this, To, [
               CONFIG_NS_ID,
               "to",
               ["null", "memory", "stderr", "stdout", "system", "uri"],
            ]);
         }
         _inherits(To, _OptionObject28);
         return _createClass(To);
      })(OptionObject);
      var TemplateCache = /*#__PURE__*/ (function (_XFAObject126) {
         function TemplateCache(attributes) {
            var _this218;
            _classCallCheck(this, TemplateCache);
            _this218 = _callSuper(this, TemplateCache, [
               CONFIG_NS_ID,
               "templateCache",
            ]);
            _this218.maxEntries = getInteger({
               data: attributes.maxEntries,
               defaultValue: 5,
               validate: function validate(n) {
                  return n >= 0;
               },
            });
            return _this218;
         }
         _inherits(TemplateCache, _XFAObject126);
         return _createClass(TemplateCache);
      })(XFAObject);
      var Trace = /*#__PURE__*/ (function (_XFAObject127) {
         function Trace(attributes) {
            var _this219;
            _classCallCheck(this, Trace);
            _this219 = _callSuper(this, Trace, [CONFIG_NS_ID, "trace", true]);
            _this219.area = new XFAObjectArray();
            return _this219;
         }
         _inherits(Trace, _XFAObject127);
         return _createClass(Trace);
      })(XFAObject);
      var Transform = /*#__PURE__*/ (function (_XFAObject128) {
         function Transform(attributes) {
            var _this220;
            _classCallCheck(this, Transform);
            _this220 = _callSuper(this, Transform, [
               CONFIG_NS_ID,
               "transform",
               true,
            ]);
            _this220.groupParent = null;
            _this220.ifEmpty = null;
            _this220.nameAttr = null;
            _this220.picture = null;
            _this220.presence = null;
            _this220.rename = null;
            _this220.whitespace = null;
            return _this220;
         }
         _inherits(Transform, _XFAObject128);
         return _createClass(Transform);
      })(XFAObject);
      var Type = /*#__PURE__*/ (function (_OptionObject29) {
         function Type(attributes) {
            _classCallCheck(this, Type);
            return _callSuper(this, Type, [
               CONFIG_NS_ID,
               "type",
               [
                  "none",
                  "ascii85",
                  "asciiHex",
                  "ccittfax",
                  "flate",
                  "lzw",
                  "runLength",
                  "native",
                  "xdp",
                  "mergedXDP",
               ],
            ]);
         }
         _inherits(Type, _OptionObject29);
         return _createClass(Type);
      })(OptionObject);
      var Uri = /*#__PURE__*/ (function (_StringObject29) {
         function Uri(attributes) {
            _classCallCheck(this, Uri);
            return _callSuper(this, Uri, [CONFIG_NS_ID, "uri"]);
         }
         _inherits(Uri, _StringObject29);
         return _createClass(Uri);
      })(StringObject);
      var config_Validate = /*#__PURE__*/ (function (_OptionObject30) {
         function config_Validate(attributes) {
            _classCallCheck(this, config_Validate);
            return _callSuper(this, config_Validate, [
               CONFIG_NS_ID,
               "validate",
               ["preSubmit", "prePrint", "preExecute", "preSave"],
            ]);
         }
         _inherits(config_Validate, _OptionObject30);
         return _createClass(config_Validate);
      })(OptionObject);
      var ValidateApprovalSignatures = /*#__PURE__*/ (function (
         _ContentObject20,
      ) {
         function ValidateApprovalSignatures(attributes) {
            _classCallCheck(this, ValidateApprovalSignatures);
            return _callSuper(this, ValidateApprovalSignatures, [
               CONFIG_NS_ID,
               "validateApprovalSignatures",
            ]);
         }
         _inherits(ValidateApprovalSignatures, _ContentObject20);
         return _createClass(ValidateApprovalSignatures, [
            {
               key: $finalize,
               value: function value() {
                  this[$content] = this[$content]
                     .trim()
                     .split(/\s+/)
                     .filter(function (x) {
                        return ["docReady", "postSign"].includes(x);
                     });
               },
            },
         ]);
      })(ContentObject);
      var ValidationMessaging = /*#__PURE__*/ (function (_OptionObject31) {
         function ValidationMessaging(attributes) {
            _classCallCheck(this, ValidationMessaging);
            return _callSuper(this, ValidationMessaging, [
               CONFIG_NS_ID,
               "validationMessaging",
               [
                  "allMessagesIndividually",
                  "allMessagesTogether",
                  "firstMessageOnly",
                  "noMessages",
               ],
            ]);
         }
         _inherits(ValidationMessaging, _OptionObject31);
         return _createClass(ValidationMessaging);
      })(OptionObject);
      var Version = /*#__PURE__*/ (function (_OptionObject32) {
         function Version(attributes) {
            _classCallCheck(this, Version);
            return _callSuper(this, Version, [
               CONFIG_NS_ID,
               "version",
               ["1.7", "1.6", "1.5", "1.4", "1.3", "1.2"],
            ]);
         }
         _inherits(Version, _OptionObject32);
         return _createClass(Version);
      })(OptionObject);
      var VersionControl = /*#__PURE__*/ (function (_XFAObject129) {
         function VersionControl(attributes) {
            var _this221;
            _classCallCheck(this, VersionControl);
            _this221 = _callSuper(this, VersionControl, [
               CONFIG_NS_ID,
               "VersionControl",
            ]);
            _this221.outputBelow = getStringOption(attributes.outputBelow, [
               "warn",
               "error",
               "update",
            ]);
            _this221.sourceAbove = getStringOption(attributes.sourceAbove, [
               "warn",
               "error",
            ]);
            _this221.sourceBelow = getStringOption(attributes.sourceBelow, [
               "update",
               "maintain",
            ]);
            return _this221;
         }
         _inherits(VersionControl, _XFAObject129);
         return _createClass(VersionControl);
      })(XFAObject);
      var ViewerPreferences = /*#__PURE__*/ (function (_XFAObject130) {
         function ViewerPreferences(attributes) {
            var _this222;
            _classCallCheck(this, ViewerPreferences);
            _this222 = _callSuper(this, ViewerPreferences, [
               CONFIG_NS_ID,
               "viewerPreferences",
               true,
            ]);
            _this222.ADBE_JSConsole = null;
            _this222.ADBE_JSDebugger = null;
            _this222.addViewerPreferences = null;
            _this222.duplexOption = null;
            _this222.enforce = null;
            _this222.numberOfCopies = null;
            _this222.pageRange = null;
            _this222.pickTrayByPDFSize = null;
            _this222.printScaling = null;
            return _this222;
         }
         _inherits(ViewerPreferences, _XFAObject130);
         return _createClass(ViewerPreferences);
      })(XFAObject);
      var WebClient = /*#__PURE__*/ (function (_XFAObject131) {
         function WebClient(attributes) {
            var _this223;
            _classCallCheck(this, WebClient);
            _this223 = _callSuper(this, WebClient, [
               CONFIG_NS_ID,
               "webClient",
               true,
            ]);
            _this223.name = attributes.name ? attributes.name.trim() : "";
            _this223.fontInfo = null;
            _this223.xdc = null;
            return _this223;
         }
         _inherits(WebClient, _XFAObject131);
         return _createClass(WebClient);
      })(XFAObject);
      var Whitespace = /*#__PURE__*/ (function (_OptionObject33) {
         function Whitespace(attributes) {
            _classCallCheck(this, Whitespace);
            return _callSuper(this, Whitespace, [
               CONFIG_NS_ID,
               "whitespace",
               ["preserve", "ltrim", "normalize", "rtrim", "trim"],
            ]);
         }
         _inherits(Whitespace, _OptionObject33);
         return _createClass(Whitespace);
      })(OptionObject);
      var Window = /*#__PURE__*/ (function (_ContentObject21) {
         function Window(attributes) {
            _classCallCheck(this, Window);
            return _callSuper(this, Window, [CONFIG_NS_ID, "window"]);
         }
         _inherits(Window, _ContentObject21);
         return _createClass(Window, [
            {
               key: $finalize,
               value: function value() {
                  var pair = this[$content]
                     .trim()
                     .split(/\s*,\s*/, 2)
                     .map(function (x) {
                        return parseInt(x, 10);
                     });
                  if (
                     pair.some(function (x) {
                        return isNaN(x);
                     })
                  ) {
                     this[$content] = [0, 0];
                     return;
                  }
                  if (pair.length === 1) {
                     pair.push(pair[0]);
                  }
                  this[$content] = pair;
               },
            },
         ]);
      })(ContentObject);
      var Xdc = /*#__PURE__*/ (function (_XFAObject132) {
         function Xdc(attributes) {
            var _this224;
            _classCallCheck(this, Xdc);
            _this224 = _callSuper(this, Xdc, [CONFIG_NS_ID, "xdc", true]);
            _this224.uri = new XFAObjectArray();
            _this224.xsl = new XFAObjectArray();
            return _this224;
         }
         _inherits(Xdc, _XFAObject132);
         return _createClass(Xdc);
      })(XFAObject);
      var Xdp = /*#__PURE__*/ (function (_XFAObject133) {
         function Xdp(attributes) {
            var _this225;
            _classCallCheck(this, Xdp);
            _this225 = _callSuper(this, Xdp, [CONFIG_NS_ID, "xdp", true]);
            _this225.packets = null;
            return _this225;
         }
         _inherits(Xdp, _XFAObject133);
         return _createClass(Xdp);
      })(XFAObject);
      var Xsl = /*#__PURE__*/ (function (_XFAObject134) {
         function Xsl(attributes) {
            var _this226;
            _classCallCheck(this, Xsl);
            _this226 = _callSuper(this, Xsl, [CONFIG_NS_ID, "xsl", true]);
            _this226.debug = null;
            _this226.uri = null;
            return _this226;
         }
         _inherits(Xsl, _XFAObject134);
         return _createClass(Xsl);
      })(XFAObject);
      var Zpl = /*#__PURE__*/ (function (_XFAObject135) {
         function Zpl(attributes) {
            var _this227;
            _classCallCheck(this, Zpl);
            _this227 = _callSuper(this, Zpl, [CONFIG_NS_ID, "zpl", true]);
            _this227.name = attributes.name ? attributes.name.trim() : "";
            _this227.batchOutput = null;
            _this227.flipLabel = null;
            _this227.fontInfo = null;
            _this227.xdc = null;
            return _this227;
         }
         _inherits(Zpl, _XFAObject135);
         return _createClass(Zpl);
      })(XFAObject);
      var ConfigNamespace = /*#__PURE__*/ (function () {
         function ConfigNamespace() {
            _classCallCheck(this, ConfigNamespace);
         }
         return _createClass(ConfigNamespace, null, [
            {
               key: $buildXFAObject,
               value: function value(name, attributes) {
                  if (ConfigNamespace.hasOwnProperty(name)) {
                     return ConfigNamespace[name](attributes);
                  }
                  return undefined;
               },
            },
            {
               key: "acrobat",
               value: function acrobat(attrs) {
                  return new Acrobat(attrs);
               },
            },
            {
               key: "acrobat7",
               value: function acrobat7(attrs) {
                  return new Acrobat7(attrs);
               },
            },
            {
               key: "ADBE_JSConsole",
               value: function ADBE_JSConsole(attrs) {
                  return new _ADBE_JSConsole(attrs);
               },
            },
            {
               key: "ADBE_JSDebugger",
               value: function ADBE_JSDebugger(attrs) {
                  return new _ADBE_JSDebugger(attrs);
               },
            },
            {
               key: "addSilentPrint",
               value: function addSilentPrint(attrs) {
                  return new AddSilentPrint(attrs);
               },
            },
            {
               key: "addViewerPreferences",
               value: function addViewerPreferences(attrs) {
                  return new AddViewerPreferences(attrs);
               },
            },
            {
               key: "adjustData",
               value: function adjustData(attrs) {
                  return new AdjustData(attrs);
               },
            },
            {
               key: "adobeExtensionLevel",
               value: function adobeExtensionLevel(attrs) {
                  return new AdobeExtensionLevel(attrs);
               },
            },
            {
               key: "agent",
               value: function agent(attrs) {
                  return new Agent(attrs);
               },
            },
            {
               key: "alwaysEmbed",
               value: function alwaysEmbed(attrs) {
                  return new AlwaysEmbed(attrs);
               },
            },
            {
               key: "amd",
               value: function amd(attrs) {
                  return new Amd(attrs);
               },
            },
            {
               key: "area",
               value: function area(attrs) {
                  return new config_Area(attrs);
               },
            },
            {
               key: "attributes",
               value: function attributes(attrs) {
                  return new Attributes(attrs);
               },
            },
            {
               key: "autoSave",
               value: function autoSave(attrs) {
                  return new AutoSave(attrs);
               },
            },
            {
               key: "base",
               value: function base(attrs) {
                  return new Base(attrs);
               },
            },
            {
               key: "batchOutput",
               value: function batchOutput(attrs) {
                  return new BatchOutput(attrs);
               },
            },
            {
               key: "behaviorOverride",
               value: function behaviorOverride(attrs) {
                  return new BehaviorOverride(attrs);
               },
            },
            {
               key: "cache",
               value: function cache(attrs) {
                  return new Cache(attrs);
               },
            },
            {
               key: "change",
               value: function change(attrs) {
                  return new Change(attrs);
               },
            },
            {
               key: "common",
               value: function common(attrs) {
                  return new Common(attrs);
               },
            },
            {
               key: "compress",
               value: function compress(attrs) {
                  return new Compress(attrs);
               },
            },
            {
               key: "compressLogicalStructure",
               value: function compressLogicalStructure(attrs) {
                  return new CompressLogicalStructure(attrs);
               },
            },
            {
               key: "compressObjectStream",
               value: function compressObjectStream(attrs) {
                  return new CompressObjectStream(attrs);
               },
            },
            {
               key: "compression",
               value: function compression(attrs) {
                  return new Compression(attrs);
               },
            },
            {
               key: "config",
               value: function config(attrs) {
                  return new Config(attrs);
               },
            },
            {
               key: "conformance",
               value: function conformance(attrs) {
                  return new Conformance(attrs);
               },
            },
            {
               key: "contentCopy",
               value: function contentCopy(attrs) {
                  return new ContentCopy(attrs);
               },
            },
            {
               key: "copies",
               value: function copies(attrs) {
                  return new Copies(attrs);
               },
            },
            {
               key: "creator",
               value: function creator(attrs) {
                  return new Creator(attrs);
               },
            },
            {
               key: "currentPage",
               value: function currentPage(attrs) {
                  return new CurrentPage(attrs);
               },
            },
            {
               key: "data",
               value: function data(attrs) {
                  return new Data(attrs);
               },
            },
            {
               key: "debug",
               value: function debug(attrs) {
                  return new Debug(attrs);
               },
            },
            {
               key: "defaultTypeface",
               value: function defaultTypeface(attrs) {
                  return new DefaultTypeface(attrs);
               },
            },
            {
               key: "destination",
               value: function destination(attrs) {
                  return new Destination(attrs);
               },
            },
            {
               key: "documentAssembly",
               value: function documentAssembly(attrs) {
                  return new DocumentAssembly(attrs);
               },
            },
            {
               key: "driver",
               value: function driver(attrs) {
                  return new Driver(attrs);
               },
            },
            {
               key: "duplexOption",
               value: function duplexOption(attrs) {
                  return new DuplexOption(attrs);
               },
            },
            {
               key: "dynamicRender",
               value: function dynamicRender(attrs) {
                  return new DynamicRender(attrs);
               },
            },
            {
               key: "embed",
               value: function embed(attrs) {
                  return new Embed(attrs);
               },
            },
            {
               key: "encrypt",
               value: function encrypt(attrs) {
                  return new config_Encrypt(attrs);
               },
            },
            {
               key: "encryption",
               value: function encryption(attrs) {
                  return new config_Encryption(attrs);
               },
            },
            {
               key: "encryptionLevel",
               value: function encryptionLevel(attrs) {
                  return new EncryptionLevel(attrs);
               },
            },
            {
               key: "enforce",
               value: function enforce(attrs) {
                  return new Enforce(attrs);
               },
            },
            {
               key: "equate",
               value: function equate(attrs) {
                  return new Equate(attrs);
               },
            },
            {
               key: "equateRange",
               value: function equateRange(attrs) {
                  return new EquateRange(attrs);
               },
            },
            {
               key: "exclude",
               value: function exclude(attrs) {
                  return new Exclude(attrs);
               },
            },
            {
               key: "excludeNS",
               value: function excludeNS(attrs) {
                  return new ExcludeNS(attrs);
               },
            },
            {
               key: "flipLabel",
               value: function flipLabel(attrs) {
                  return new FlipLabel(attrs);
               },
            },
            {
               key: "fontInfo",
               value: function fontInfo(attrs) {
                  return new config_FontInfo(attrs);
               },
            },
            {
               key: "formFieldFilling",
               value: function formFieldFilling(attrs) {
                  return new FormFieldFilling(attrs);
               },
            },
            {
               key: "groupParent",
               value: function groupParent(attrs) {
                  return new GroupParent(attrs);
               },
            },
            {
               key: "ifEmpty",
               value: function ifEmpty(attrs) {
                  return new IfEmpty(attrs);
               },
            },
            {
               key: "includeXDPContent",
               value: function includeXDPContent(attrs) {
                  return new IncludeXDPContent(attrs);
               },
            },
            {
               key: "incrementalLoad",
               value: function incrementalLoad(attrs) {
                  return new IncrementalLoad(attrs);
               },
            },
            {
               key: "incrementalMerge",
               value: function incrementalMerge(attrs) {
                  return new IncrementalMerge(attrs);
               },
            },
            {
               key: "interactive",
               value: function interactive(attrs) {
                  return new Interactive(attrs);
               },
            },
            {
               key: "jog",
               value: function jog(attrs) {
                  return new Jog(attrs);
               },
            },
            {
               key: "labelPrinter",
               value: function labelPrinter(attrs) {
                  return new LabelPrinter(attrs);
               },
            },
            {
               key: "layout",
               value: function layout(attrs) {
                  return new Layout(attrs);
               },
            },
            {
               key: "level",
               value: function level(attrs) {
                  return new Level(attrs);
               },
            },
            {
               key: "linearized",
               value: function linearized(attrs) {
                  return new Linearized(attrs);
               },
            },
            {
               key: "locale",
               value: function locale(attrs) {
                  return new Locale(attrs);
               },
            },
            {
               key: "localeSet",
               value: function localeSet(attrs) {
                  return new LocaleSet(attrs);
               },
            },
            {
               key: "log",
               value: function log(attrs) {
                  return new Log(attrs);
               },
            },
            {
               key: "map",
               value: function map(attrs) {
                  return new MapElement(attrs);
               },
            },
            {
               key: "mediumInfo",
               value: function mediumInfo(attrs) {
                  return new MediumInfo(attrs);
               },
            },
            {
               key: "message",
               value: function message(attrs) {
                  return new config_Message(attrs);
               },
            },
            {
               key: "messaging",
               value: function messaging(attrs) {
                  return new Messaging(attrs);
               },
            },
            {
               key: "mode",
               value: function mode(attrs) {
                  return new Mode(attrs);
               },
            },
            {
               key: "modifyAnnots",
               value: function modifyAnnots(attrs) {
                  return new ModifyAnnots(attrs);
               },
            },
            {
               key: "msgId",
               value: function msgId(attrs) {
                  return new MsgId(attrs);
               },
            },
            {
               key: "nameAttr",
               value: function nameAttr(attrs) {
                  return new NameAttr(attrs);
               },
            },
            {
               key: "neverEmbed",
               value: function neverEmbed(attrs) {
                  return new NeverEmbed(attrs);
               },
            },
            {
               key: "numberOfCopies",
               value: function numberOfCopies(attrs) {
                  return new NumberOfCopies(attrs);
               },
            },
            {
               key: "openAction",
               value: function openAction(attrs) {
                  return new OpenAction(attrs);
               },
            },
            {
               key: "output",
               value: function output(attrs) {
                  return new Output(attrs);
               },
            },
            {
               key: "outputBin",
               value: function outputBin(attrs) {
                  return new OutputBin(attrs);
               },
            },
            {
               key: "outputXSL",
               value: function outputXSL(attrs) {
                  return new OutputXSL(attrs);
               },
            },
            {
               key: "overprint",
               value: function overprint(attrs) {
                  return new Overprint(attrs);
               },
            },
            {
               key: "packets",
               value: function packets(attrs) {
                  return new Packets(attrs);
               },
            },
            {
               key: "pageOffset",
               value: function pageOffset(attrs) {
                  return new PageOffset(attrs);
               },
            },
            {
               key: "pageRange",
               value: function pageRange(attrs) {
                  return new PageRange(attrs);
               },
            },
            {
               key: "pagination",
               value: function pagination(attrs) {
                  return new Pagination(attrs);
               },
            },
            {
               key: "paginationOverride",
               value: function paginationOverride(attrs) {
                  return new PaginationOverride(attrs);
               },
            },
            {
               key: "part",
               value: function part(attrs) {
                  return new Part(attrs);
               },
            },
            {
               key: "pcl",
               value: function pcl(attrs) {
                  return new Pcl(attrs);
               },
            },
            {
               key: "pdf",
               value: function pdf(attrs) {
                  return new Pdf(attrs);
               },
            },
            {
               key: "pdfa",
               value: function pdfa(attrs) {
                  return new Pdfa(attrs);
               },
            },
            {
               key: "permissions",
               value: function permissions(attrs) {
                  return new Permissions(attrs);
               },
            },
            {
               key: "pickTrayByPDFSize",
               value: function pickTrayByPDFSize(attrs) {
                  return new PickTrayByPDFSize(attrs);
               },
            },
            {
               key: "picture",
               value: function picture(attrs) {
                  return new config_Picture(attrs);
               },
            },
            {
               key: "plaintextMetadata",
               value: function plaintextMetadata(attrs) {
                  return new PlaintextMetadata(attrs);
               },
            },
            {
               key: "presence",
               value: function presence(attrs) {
                  return new Presence(attrs);
               },
            },
            {
               key: "present",
               value: function present(attrs) {
                  return new Present(attrs);
               },
            },
            {
               key: "print",
               value: function print(attrs) {
                  return new Print(attrs);
               },
            },
            {
               key: "printHighQuality",
               value: function printHighQuality(attrs) {
                  return new PrintHighQuality(attrs);
               },
            },
            {
               key: "printScaling",
               value: function printScaling(attrs) {
                  return new PrintScaling(attrs);
               },
            },
            {
               key: "printerName",
               value: function printerName(attrs) {
                  return new PrinterName(attrs);
               },
            },
            {
               key: "producer",
               value: function producer(attrs) {
                  return new Producer(attrs);
               },
            },
            {
               key: "ps",
               value: function ps(attrs) {
                  return new Ps(attrs);
               },
            },
            {
               key: "range",
               value: function range(attrs) {
                  return new Range(attrs);
               },
            },
            {
               key: "record",
               value: function record(attrs) {
                  return new Record(attrs);
               },
            },
            {
               key: "relevant",
               value: function relevant(attrs) {
                  return new Relevant(attrs);
               },
            },
            {
               key: "rename",
               value: function rename(attrs) {
                  return new Rename(attrs);
               },
            },
            {
               key: "renderPolicy",
               value: function renderPolicy(attrs) {
                  return new RenderPolicy(attrs);
               },
            },
            {
               key: "runScripts",
               value: function runScripts(attrs) {
                  return new RunScripts(attrs);
               },
            },
            {
               key: "script",
               value: function script(attrs) {
                  return new config_Script(attrs);
               },
            },
            {
               key: "scriptModel",
               value: function scriptModel(attrs) {
                  return new ScriptModel(attrs);
               },
            },
            {
               key: "severity",
               value: function severity(attrs) {
                  return new Severity(attrs);
               },
            },
            {
               key: "silentPrint",
               value: function silentPrint(attrs) {
                  return new SilentPrint(attrs);
               },
            },
            {
               key: "staple",
               value: function staple(attrs) {
                  return new Staple(attrs);
               },
            },
            {
               key: "startNode",
               value: function startNode(attrs) {
                  return new StartNode(attrs);
               },
            },
            {
               key: "startPage",
               value: function startPage(attrs) {
                  return new StartPage(attrs);
               },
            },
            {
               key: "submitFormat",
               value: function submitFormat(attrs) {
                  return new SubmitFormat(attrs);
               },
            },
            {
               key: "submitUrl",
               value: function submitUrl(attrs) {
                  return new SubmitUrl(attrs);
               },
            },
            {
               key: "subsetBelow",
               value: function subsetBelow(attrs) {
                  return new SubsetBelow(attrs);
               },
            },
            {
               key: "suppressBanner",
               value: function suppressBanner(attrs) {
                  return new SuppressBanner(attrs);
               },
            },
            {
               key: "tagged",
               value: function tagged(attrs) {
                  return new Tagged(attrs);
               },
            },
            {
               key: "template",
               value: function template(attrs) {
                  return new config_Template(attrs);
               },
            },
            {
               key: "templateCache",
               value: function templateCache(attrs) {
                  return new TemplateCache(attrs);
               },
            },
            {
               key: "threshold",
               value: function threshold(attrs) {
                  return new Threshold(attrs);
               },
            },
            {
               key: "to",
               value: function to(attrs) {
                  return new To(attrs);
               },
            },
            {
               key: "trace",
               value: function trace(attrs) {
                  return new Trace(attrs);
               },
            },
            {
               key: "transform",
               value: function transform(attrs) {
                  return new Transform(attrs);
               },
            },
            {
               key: "type",
               value: function type(attrs) {
                  return new Type(attrs);
               },
            },
            {
               key: "uri",
               value: function uri(attrs) {
                  return new Uri(attrs);
               },
            },
            {
               key: "validate",
               value: function validate(attrs) {
                  return new config_Validate(attrs);
               },
            },
            {
               key: "validateApprovalSignatures",
               value: function validateApprovalSignatures(attrs) {
                  return new ValidateApprovalSignatures(attrs);
               },
            },
            {
               key: "validationMessaging",
               value: function validationMessaging(attrs) {
                  return new ValidationMessaging(attrs);
               },
            },
            {
               key: "version",
               value: function version(attrs) {
                  return new Version(attrs);
               },
            },
            {
               key: "versionControl",
               value: function versionControl(attrs) {
                  return new VersionControl(attrs);
               },
            },
            {
               key: "viewerPreferences",
               value: function viewerPreferences(attrs) {
                  return new ViewerPreferences(attrs);
               },
            },
            {
               key: "webClient",
               value: function webClient(attrs) {
                  return new WebClient(attrs);
               },
            },
            {
               key: "whitespace",
               value: function whitespace(attrs) {
                  return new Whitespace(attrs);
               },
            },
            {
               key: "window",
               value: function window(attrs) {
                  return new Window(attrs);
               },
            },
            {
               key: "xdc",
               value: function xdc(attrs) {
                  return new Xdc(attrs);
               },
            },
            {
               key: "xdp",
               value: function xdp(attrs) {
                  return new Xdp(attrs);
               },
            },
            {
               key: "xsl",
               value: function xsl(attrs) {
                  return new Xsl(attrs);
               },
            },
            {
               key: "zpl",
               value: function zpl(attrs) {
                  return new Zpl(attrs);
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xfa/connection_set.js
      var CONNECTION_SET_NS_ID = NamespaceIds.connectionSet.id;
      var ConnectionSet = /*#__PURE__*/ (function (_XFAObject136) {
         function ConnectionSet(attributes) {
            var _this228;
            _classCallCheck(this, ConnectionSet);
            _this228 = _callSuper(this, ConnectionSet, [
               CONNECTION_SET_NS_ID,
               "connectionSet",
               true,
            ]);
            _this228.wsdlConnection = new XFAObjectArray();
            _this228.xmlConnection = new XFAObjectArray();
            _this228.xsdConnection = new XFAObjectArray();
            return _this228;
         }
         _inherits(ConnectionSet, _XFAObject136);
         return _createClass(ConnectionSet);
      })(XFAObject);
      var EffectiveInputPolicy = /*#__PURE__*/ (function (_XFAObject137) {
         function EffectiveInputPolicy(attributes) {
            var _this229;
            _classCallCheck(this, EffectiveInputPolicy);
            _this229 = _callSuper(this, EffectiveInputPolicy, [
               CONNECTION_SET_NS_ID,
               "effectiveInputPolicy",
            ]);
            _this229.id = attributes.id || "";
            _this229.name = attributes.name || "";
            _this229.use = attributes.use || "";
            _this229.usehref = attributes.usehref || "";
            return _this229;
         }
         _inherits(EffectiveInputPolicy, _XFAObject137);
         return _createClass(EffectiveInputPolicy);
      })(XFAObject);
      var EffectiveOutputPolicy = /*#__PURE__*/ (function (_XFAObject138) {
         function EffectiveOutputPolicy(attributes) {
            var _this230;
            _classCallCheck(this, EffectiveOutputPolicy);
            _this230 = _callSuper(this, EffectiveOutputPolicy, [
               CONNECTION_SET_NS_ID,
               "effectiveOutputPolicy",
            ]);
            _this230.id = attributes.id || "";
            _this230.name = attributes.name || "";
            _this230.use = attributes.use || "";
            _this230.usehref = attributes.usehref || "";
            return _this230;
         }
         _inherits(EffectiveOutputPolicy, _XFAObject138);
         return _createClass(EffectiveOutputPolicy);
      })(XFAObject);
      var Operation = /*#__PURE__*/ (function (_StringObject30) {
         function Operation(attributes) {
            var _this231;
            _classCallCheck(this, Operation);
            _this231 = _callSuper(this, Operation, [
               CONNECTION_SET_NS_ID,
               "operation",
            ]);
            _this231.id = attributes.id || "";
            _this231.input = attributes.input || "";
            _this231.name = attributes.name || "";
            _this231.output = attributes.output || "";
            _this231.use = attributes.use || "";
            _this231.usehref = attributes.usehref || "";
            return _this231;
         }
         _inherits(Operation, _StringObject30);
         return _createClass(Operation);
      })(StringObject);
      var RootElement = /*#__PURE__*/ (function (_StringObject31) {
         function RootElement(attributes) {
            var _this232;
            _classCallCheck(this, RootElement);
            _this232 = _callSuper(this, RootElement, [
               CONNECTION_SET_NS_ID,
               "rootElement",
            ]);
            _this232.id = attributes.id || "";
            _this232.name = attributes.name || "";
            _this232.use = attributes.use || "";
            _this232.usehref = attributes.usehref || "";
            return _this232;
         }
         _inherits(RootElement, _StringObject31);
         return _createClass(RootElement);
      })(StringObject);
      var SoapAction = /*#__PURE__*/ (function (_StringObject32) {
         function SoapAction(attributes) {
            var _this233;
            _classCallCheck(this, SoapAction);
            _this233 = _callSuper(this, SoapAction, [
               CONNECTION_SET_NS_ID,
               "soapAction",
            ]);
            _this233.id = attributes.id || "";
            _this233.name = attributes.name || "";
            _this233.use = attributes.use || "";
            _this233.usehref = attributes.usehref || "";
            return _this233;
         }
         _inherits(SoapAction, _StringObject32);
         return _createClass(SoapAction);
      })(StringObject);
      var SoapAddress = /*#__PURE__*/ (function (_StringObject33) {
         function SoapAddress(attributes) {
            var _this234;
            _classCallCheck(this, SoapAddress);
            _this234 = _callSuper(this, SoapAddress, [
               CONNECTION_SET_NS_ID,
               "soapAddress",
            ]);
            _this234.id = attributes.id || "";
            _this234.name = attributes.name || "";
            _this234.use = attributes.use || "";
            _this234.usehref = attributes.usehref || "";
            return _this234;
         }
         _inherits(SoapAddress, _StringObject33);
         return _createClass(SoapAddress);
      })(StringObject);
      var connection_set_Uri = /*#__PURE__*/ (function (_StringObject34) {
         function connection_set_Uri(attributes) {
            var _this235;
            _classCallCheck(this, connection_set_Uri);
            _this235 = _callSuper(this, connection_set_Uri, [
               CONNECTION_SET_NS_ID,
               "uri",
            ]);
            _this235.id = attributes.id || "";
            _this235.name = attributes.name || "";
            _this235.use = attributes.use || "";
            _this235.usehref = attributes.usehref || "";
            return _this235;
         }
         _inherits(connection_set_Uri, _StringObject34);
         return _createClass(connection_set_Uri);
      })(StringObject);
      var WsdlAddress = /*#__PURE__*/ (function (_StringObject35) {
         function WsdlAddress(attributes) {
            var _this236;
            _classCallCheck(this, WsdlAddress);
            _this236 = _callSuper(this, WsdlAddress, [
               CONNECTION_SET_NS_ID,
               "wsdlAddress",
            ]);
            _this236.id = attributes.id || "";
            _this236.name = attributes.name || "";
            _this236.use = attributes.use || "";
            _this236.usehref = attributes.usehref || "";
            return _this236;
         }
         _inherits(WsdlAddress, _StringObject35);
         return _createClass(WsdlAddress);
      })(StringObject);
      var WsdlConnection = /*#__PURE__*/ (function (_XFAObject139) {
         function WsdlConnection(attributes) {
            var _this237;
            _classCallCheck(this, WsdlConnection);
            _this237 = _callSuper(this, WsdlConnection, [
               CONNECTION_SET_NS_ID,
               "wsdlConnection",
               true,
            ]);
            _this237.dataDescription = attributes.dataDescription || "";
            _this237.name = attributes.name || "";
            _this237.effectiveInputPolicy = null;
            _this237.effectiveOutputPolicy = null;
            _this237.operation = null;
            _this237.soapAction = null;
            _this237.soapAddress = null;
            _this237.wsdlAddress = null;
            return _this237;
         }
         _inherits(WsdlConnection, _XFAObject139);
         return _createClass(WsdlConnection);
      })(XFAObject);
      var XmlConnection = /*#__PURE__*/ (function (_XFAObject140) {
         function XmlConnection(attributes) {
            var _this238;
            _classCallCheck(this, XmlConnection);
            _this238 = _callSuper(this, XmlConnection, [
               CONNECTION_SET_NS_ID,
               "xmlConnection",
               true,
            ]);
            _this238.dataDescription = attributes.dataDescription || "";
            _this238.name = attributes.name || "";
            _this238.uri = null;
            return _this238;
         }
         _inherits(XmlConnection, _XFAObject140);
         return _createClass(XmlConnection);
      })(XFAObject);
      var XsdConnection = /*#__PURE__*/ (function (_XFAObject141) {
         function XsdConnection(attributes) {
            var _this239;
            _classCallCheck(this, XsdConnection);
            _this239 = _callSuper(this, XsdConnection, [
               CONNECTION_SET_NS_ID,
               "xsdConnection",
               true,
            ]);
            _this239.dataDescription = attributes.dataDescription || "";
            _this239.name = attributes.name || "";
            _this239.rootElement = null;
            _this239.uri = null;
            return _this239;
         }
         _inherits(XsdConnection, _XFAObject141);
         return _createClass(XsdConnection);
      })(XFAObject);
      var ConnectionSetNamespace = /*#__PURE__*/ (function () {
         function ConnectionSetNamespace() {
            _classCallCheck(this, ConnectionSetNamespace);
         }
         return _createClass(ConnectionSetNamespace, null, [
            {
               key: $buildXFAObject,
               value: function value(name, attributes) {
                  if (ConnectionSetNamespace.hasOwnProperty(name)) {
                     return ConnectionSetNamespace[name](attributes);
                  }
                  return undefined;
               },
            },
            {
               key: "connectionSet",
               value: function connectionSet(attrs) {
                  return new ConnectionSet(attrs);
               },
            },
            {
               key: "effectiveInputPolicy",
               value: function effectiveInputPolicy(attrs) {
                  return new EffectiveInputPolicy(attrs);
               },
            },
            {
               key: "effectiveOutputPolicy",
               value: function effectiveOutputPolicy(attrs) {
                  return new EffectiveOutputPolicy(attrs);
               },
            },
            {
               key: "operation",
               value: function operation(attrs) {
                  return new Operation(attrs);
               },
            },
            {
               key: "rootElement",
               value: function rootElement(attrs) {
                  return new RootElement(attrs);
               },
            },
            {
               key: "soapAction",
               value: function soapAction(attrs) {
                  return new SoapAction(attrs);
               },
            },
            {
               key: "soapAddress",
               value: function soapAddress(attrs) {
                  return new SoapAddress(attrs);
               },
            },
            {
               key: "uri",
               value: function uri(attrs) {
                  return new connection_set_Uri(attrs);
               },
            },
            {
               key: "wsdlAddress",
               value: function wsdlAddress(attrs) {
                  return new WsdlAddress(attrs);
               },
            },
            {
               key: "wsdlConnection",
               value: function wsdlConnection(attrs) {
                  return new WsdlConnection(attrs);
               },
            },
            {
               key: "xmlConnection",
               value: function xmlConnection(attrs) {
                  return new XmlConnection(attrs);
               },
            },
            {
               key: "xsdConnection",
               value: function xsdConnection(attrs) {
                  return new XsdConnection(attrs);
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xfa/datasets.js
      var DATASETS_NS_ID = NamespaceIds.datasets.id;
      var datasets_Data = /*#__PURE__*/ (function (_XmlObject) {
         function datasets_Data(attributes) {
            _classCallCheck(this, datasets_Data);
            return _callSuper(this, datasets_Data, [
               DATASETS_NS_ID,
               "data",
               attributes,
            ]);
         }
         _inherits(datasets_Data, _XmlObject);
         return _createClass(datasets_Data, [
            {
               key: $isNsAgnostic,
               value: function value() {
                  return true;
               },
            },
         ]);
      })(XmlObject);
      var Datasets = /*#__PURE__*/ (function (_XFAObject142) {
         function Datasets(attributes) {
            var _this240;
            _classCallCheck(this, Datasets);
            _this240 = _callSuper(this, Datasets, [
               DATASETS_NS_ID,
               "datasets",
               true,
            ]);
            _this240.data = null;
            _this240.Signature = null;
            return _this240;
         }
         _inherits(Datasets, _XFAObject142);
         return _createClass(Datasets, [
            {
               key: $onChild,
               value: function value(child) {
                  var name = child[$nodeName];
                  if (
                     (name === "data" && child[$namespaceId] === DATASETS_NS_ID) ||
                     (name === "Signature" &&
                        child[$namespaceId] === NamespaceIds.signature.id)
                  ) {
                     this[name] = child;
                  }
                  this[$appendChild](child);
               },
            },
         ]);
      })(XFAObject);
      var DatasetsNamespace = /*#__PURE__*/ (function () {
         function DatasetsNamespace() {
            _classCallCheck(this, DatasetsNamespace);
         }
         return _createClass(DatasetsNamespace, null, [
            {
               key: $buildXFAObject,
               value: function value(name, attributes) {
                  if (DatasetsNamespace.hasOwnProperty(name)) {
                     return DatasetsNamespace[name](attributes);
                  }
                  return undefined;
               },
            },
            {
               key: "datasets",
               value: function datasets(attributes) {
                  return new Datasets(attributes);
               },
            },
            {
               key: "data",
               value: function data(attributes) {
                  return new datasets_Data(attributes);
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xfa/locale_set.js
      var LOCALE_SET_NS_ID = NamespaceIds.localeSet.id;
      var CalendarSymbols = /*#__PURE__*/ (function (_XFAObject143) {
         function CalendarSymbols(attributes) {
            var _this241;
            _classCallCheck(this, CalendarSymbols);
            _this241 = _callSuper(this, CalendarSymbols, [
               LOCALE_SET_NS_ID,
               "calendarSymbols",
               true,
            ]);
            _this241.name = "gregorian";
            _this241.dayNames = new XFAObjectArray(2);
            _this241.eraNames = null;
            _this241.meridiemNames = null;
            _this241.monthNames = new XFAObjectArray(2);
            return _this241;
         }
         _inherits(CalendarSymbols, _XFAObject143);
         return _createClass(CalendarSymbols);
      })(XFAObject);
      var CurrencySymbol = /*#__PURE__*/ (function (_StringObject36) {
         function CurrencySymbol(attributes) {
            var _this242;
            _classCallCheck(this, CurrencySymbol);
            _this242 = _callSuper(this, CurrencySymbol, [
               LOCALE_SET_NS_ID,
               "currencySymbol",
            ]);
            _this242.name = getStringOption(attributes.name, [
               "symbol",
               "isoname",
               "decimal",
            ]);
            return _this242;
         }
         _inherits(CurrencySymbol, _StringObject36);
         return _createClass(CurrencySymbol);
      })(StringObject);
      var CurrencySymbols = /*#__PURE__*/ (function (_XFAObject144) {
         function CurrencySymbols(attributes) {
            var _this243;
            _classCallCheck(this, CurrencySymbols);
            _this243 = _callSuper(this, CurrencySymbols, [
               LOCALE_SET_NS_ID,
               "currencySymbols",
               true,
            ]);
            _this243.currencySymbol = new XFAObjectArray(3);
            return _this243;
         }
         _inherits(CurrencySymbols, _XFAObject144);
         return _createClass(CurrencySymbols);
      })(XFAObject);
      var DatePattern = /*#__PURE__*/ (function (_StringObject37) {
         function DatePattern(attributes) {
            var _this244;
            _classCallCheck(this, DatePattern);
            _this244 = _callSuper(this, DatePattern, [
               LOCALE_SET_NS_ID,
               "datePattern",
            ]);
            _this244.name = getStringOption(attributes.name, [
               "full",
               "long",
               "med",
               "short",
            ]);
            return _this244;
         }
         _inherits(DatePattern, _StringObject37);
         return _createClass(DatePattern);
      })(StringObject);
      var DatePatterns = /*#__PURE__*/ (function (_XFAObject145) {
         function DatePatterns(attributes) {
            var _this245;
            _classCallCheck(this, DatePatterns);
            _this245 = _callSuper(this, DatePatterns, [
               LOCALE_SET_NS_ID,
               "datePatterns",
               true,
            ]);
            _this245.datePattern = new XFAObjectArray(4);
            return _this245;
         }
         _inherits(DatePatterns, _XFAObject145);
         return _createClass(DatePatterns);
      })(XFAObject);
      var DateTimeSymbols = /*#__PURE__*/ (function (_ContentObject22) {
         function DateTimeSymbols(attributes) {
            _classCallCheck(this, DateTimeSymbols);
            return _callSuper(this, DateTimeSymbols, [
               LOCALE_SET_NS_ID,
               "dateTimeSymbols",
            ]);
         }
         _inherits(DateTimeSymbols, _ContentObject22);
         return _createClass(DateTimeSymbols);
      })(ContentObject);
      var Day = /*#__PURE__*/ (function (_StringObject38) {
         function Day(attributes) {
            _classCallCheck(this, Day);
            return _callSuper(this, Day, [LOCALE_SET_NS_ID, "day"]);
         }
         _inherits(Day, _StringObject38);
         return _createClass(Day);
      })(StringObject);
      var DayNames = /*#__PURE__*/ (function (_XFAObject146) {
         function DayNames(attributes) {
            var _this246;
            _classCallCheck(this, DayNames);
            _this246 = _callSuper(this, DayNames, [
               LOCALE_SET_NS_ID,
               "dayNames",
               true,
            ]);
            _this246.abbr = getInteger({
               data: attributes.abbr,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this246.day = new XFAObjectArray(7);
            return _this246;
         }
         _inherits(DayNames, _XFAObject146);
         return _createClass(DayNames);
      })(XFAObject);
      var Era = /*#__PURE__*/ (function (_StringObject39) {
         function Era(attributes) {
            _classCallCheck(this, Era);
            return _callSuper(this, Era, [LOCALE_SET_NS_ID, "era"]);
         }
         _inherits(Era, _StringObject39);
         return _createClass(Era);
      })(StringObject);
      var EraNames = /*#__PURE__*/ (function (_XFAObject147) {
         function EraNames(attributes) {
            var _this247;
            _classCallCheck(this, EraNames);
            _this247 = _callSuper(this, EraNames, [
               LOCALE_SET_NS_ID,
               "eraNames",
               true,
            ]);
            _this247.era = new XFAObjectArray(2);
            return _this247;
         }
         _inherits(EraNames, _XFAObject147);
         return _createClass(EraNames);
      })(XFAObject);
      var locale_set_Locale = /*#__PURE__*/ (function (_XFAObject148) {
         function locale_set_Locale(attributes) {
            var _this248;
            _classCallCheck(this, locale_set_Locale);
            _this248 = _callSuper(this, locale_set_Locale, [
               LOCALE_SET_NS_ID,
               "locale",
               true,
            ]);
            _this248.desc = attributes.desc || "";
            _this248.name = "isoname";
            _this248.calendarSymbols = null;
            _this248.currencySymbols = null;
            _this248.datePatterns = null;
            _this248.dateTimeSymbols = null;
            _this248.numberPatterns = null;
            _this248.numberSymbols = null;
            _this248.timePatterns = null;
            _this248.typeFaces = null;
            return _this248;
         }
         _inherits(locale_set_Locale, _XFAObject148);
         return _createClass(locale_set_Locale);
      })(XFAObject);
      var locale_set_LocaleSet = /*#__PURE__*/ (function (_XFAObject149) {
         function locale_set_LocaleSet(attributes) {
            var _this249;
            _classCallCheck(this, locale_set_LocaleSet);
            _this249 = _callSuper(this, locale_set_LocaleSet, [
               LOCALE_SET_NS_ID,
               "localeSet",
               true,
            ]);
            _this249.locale = new XFAObjectArray();
            return _this249;
         }
         _inherits(locale_set_LocaleSet, _XFAObject149);
         return _createClass(locale_set_LocaleSet);
      })(XFAObject);
      var Meridiem = /*#__PURE__*/ (function (_StringObject40) {
         function Meridiem(attributes) {
            _classCallCheck(this, Meridiem);
            return _callSuper(this, Meridiem, [LOCALE_SET_NS_ID, "meridiem"]);
         }
         _inherits(Meridiem, _StringObject40);
         return _createClass(Meridiem);
      })(StringObject);
      var MeridiemNames = /*#__PURE__*/ (function (_XFAObject150) {
         function MeridiemNames(attributes) {
            var _this250;
            _classCallCheck(this, MeridiemNames);
            _this250 = _callSuper(this, MeridiemNames, [
               LOCALE_SET_NS_ID,
               "meridiemNames",
               true,
            ]);
            _this250.meridiem = new XFAObjectArray(2);
            return _this250;
         }
         _inherits(MeridiemNames, _XFAObject150);
         return _createClass(MeridiemNames);
      })(XFAObject);
      var Month = /*#__PURE__*/ (function (_StringObject41) {
         function Month(attributes) {
            _classCallCheck(this, Month);
            return _callSuper(this, Month, [LOCALE_SET_NS_ID, "month"]);
         }
         _inherits(Month, _StringObject41);
         return _createClass(Month);
      })(StringObject);
      var MonthNames = /*#__PURE__*/ (function (_XFAObject151) {
         function MonthNames(attributes) {
            var _this251;
            _classCallCheck(this, MonthNames);
            _this251 = _callSuper(this, MonthNames, [
               LOCALE_SET_NS_ID,
               "monthNames",
               true,
            ]);
            _this251.abbr = getInteger({
               data: attributes.abbr,
               defaultValue: 0,
               validate: function validate(x) {
                  return x === 1;
               },
            });
            _this251.month = new XFAObjectArray(12);
            return _this251;
         }
         _inherits(MonthNames, _XFAObject151);
         return _createClass(MonthNames);
      })(XFAObject);
      var NumberPattern = /*#__PURE__*/ (function (_StringObject42) {
         function NumberPattern(attributes) {
            var _this252;
            _classCallCheck(this, NumberPattern);
            _this252 = _callSuper(this, NumberPattern, [
               LOCALE_SET_NS_ID,
               "numberPattern",
            ]);
            _this252.name = getStringOption(attributes.name, [
               "full",
               "long",
               "med",
               "short",
            ]);
            return _this252;
         }
         _inherits(NumberPattern, _StringObject42);
         return _createClass(NumberPattern);
      })(StringObject);
      var NumberPatterns = /*#__PURE__*/ (function (_XFAObject152) {
         function NumberPatterns(attributes) {
            var _this253;
            _classCallCheck(this, NumberPatterns);
            _this253 = _callSuper(this, NumberPatterns, [
               LOCALE_SET_NS_ID,
               "numberPatterns",
               true,
            ]);
            _this253.numberPattern = new XFAObjectArray(4);
            return _this253;
         }
         _inherits(NumberPatterns, _XFAObject152);
         return _createClass(NumberPatterns);
      })(XFAObject);
      var NumberSymbol = /*#__PURE__*/ (function (_StringObject43) {
         function NumberSymbol(attributes) {
            var _this254;
            _classCallCheck(this, NumberSymbol);
            _this254 = _callSuper(this, NumberSymbol, [
               LOCALE_SET_NS_ID,
               "numberSymbol",
            ]);
            _this254.name = getStringOption(attributes.name, [
               "decimal",
               "grouping",
               "percent",
               "minus",
               "zero",
            ]);
            return _this254;
         }
         _inherits(NumberSymbol, _StringObject43);
         return _createClass(NumberSymbol);
      })(StringObject);
      var NumberSymbols = /*#__PURE__*/ (function (_XFAObject153) {
         function NumberSymbols(attributes) {
            var _this255;
            _classCallCheck(this, NumberSymbols);
            _this255 = _callSuper(this, NumberSymbols, [
               LOCALE_SET_NS_ID,
               "numberSymbols",
               true,
            ]);
            _this255.numberSymbol = new XFAObjectArray(5);
            return _this255;
         }
         _inherits(NumberSymbols, _XFAObject153);
         return _createClass(NumberSymbols);
      })(XFAObject);
      var TimePattern = /*#__PURE__*/ (function (_StringObject44) {
         function TimePattern(attributes) {
            var _this256;
            _classCallCheck(this, TimePattern);
            _this256 = _callSuper(this, TimePattern, [
               LOCALE_SET_NS_ID,
               "timePattern",
            ]);
            _this256.name = getStringOption(attributes.name, [
               "full",
               "long",
               "med",
               "short",
            ]);
            return _this256;
         }
         _inherits(TimePattern, _StringObject44);
         return _createClass(TimePattern);
      })(StringObject);
      var TimePatterns = /*#__PURE__*/ (function (_XFAObject154) {
         function TimePatterns(attributes) {
            var _this257;
            _classCallCheck(this, TimePatterns);
            _this257 = _callSuper(this, TimePatterns, [
               LOCALE_SET_NS_ID,
               "timePatterns",
               true,
            ]);
            _this257.timePattern = new XFAObjectArray(4);
            return _this257;
         }
         _inherits(TimePatterns, _XFAObject154);
         return _createClass(TimePatterns);
      })(XFAObject);
      var TypeFace = /*#__PURE__*/ (function (_XFAObject155) {
         function TypeFace(attributes) {
            var _this258;
            _classCallCheck(this, TypeFace);
            _this258 = _callSuper(this, TypeFace, [
               LOCALE_SET_NS_ID,
               "typeFace",
               true,
            ]);
            _this258.name = attributes.name | "";
            return _this258;
         }
         _inherits(TypeFace, _XFAObject155);
         return _createClass(TypeFace);
      })(XFAObject);
      var TypeFaces = /*#__PURE__*/ (function (_XFAObject156) {
         function TypeFaces(attributes) {
            var _this259;
            _classCallCheck(this, TypeFaces);
            _this259 = _callSuper(this, TypeFaces, [
               LOCALE_SET_NS_ID,
               "typeFaces",
               true,
            ]);
            _this259.typeFace = new XFAObjectArray();
            return _this259;
         }
         _inherits(TypeFaces, _XFAObject156);
         return _createClass(TypeFaces);
      })(XFAObject);
      var LocaleSetNamespace = /*#__PURE__*/ (function () {
         function LocaleSetNamespace() {
            _classCallCheck(this, LocaleSetNamespace);
         }
         return _createClass(LocaleSetNamespace, null, [
            {
               key: $buildXFAObject,
               value: function value(name, attributes) {
                  if (LocaleSetNamespace.hasOwnProperty(name)) {
                     return LocaleSetNamespace[name](attributes);
                  }
                  return undefined;
               },
            },
            {
               key: "calendarSymbols",
               value: function calendarSymbols(attrs) {
                  return new CalendarSymbols(attrs);
               },
            },
            {
               key: "currencySymbol",
               value: function currencySymbol(attrs) {
                  return new CurrencySymbol(attrs);
               },
            },
            {
               key: "currencySymbols",
               value: function currencySymbols(attrs) {
                  return new CurrencySymbols(attrs);
               },
            },
            {
               key: "datePattern",
               value: function datePattern(attrs) {
                  return new DatePattern(attrs);
               },
            },
            {
               key: "datePatterns",
               value: function datePatterns(attrs) {
                  return new DatePatterns(attrs);
               },
            },
            {
               key: "dateTimeSymbols",
               value: function dateTimeSymbols(attrs) {
                  return new DateTimeSymbols(attrs);
               },
            },
            {
               key: "day",
               value: function day(attrs) {
                  return new Day(attrs);
               },
            },
            {
               key: "dayNames",
               value: function dayNames(attrs) {
                  return new DayNames(attrs);
               },
            },
            {
               key: "era",
               value: function era(attrs) {
                  return new Era(attrs);
               },
            },
            {
               key: "eraNames",
               value: function eraNames(attrs) {
                  return new EraNames(attrs);
               },
            },
            {
               key: "locale",
               value: function locale(attrs) {
                  return new locale_set_Locale(attrs);
               },
            },
            {
               key: "localeSet",
               value: function localeSet(attrs) {
                  return new locale_set_LocaleSet(attrs);
               },
            },
            {
               key: "meridiem",
               value: function meridiem(attrs) {
                  return new Meridiem(attrs);
               },
            },
            {
               key: "meridiemNames",
               value: function meridiemNames(attrs) {
                  return new MeridiemNames(attrs);
               },
            },
            {
               key: "month",
               value: function month(attrs) {
                  return new Month(attrs);
               },
            },
            {
               key: "monthNames",
               value: function monthNames(attrs) {
                  return new MonthNames(attrs);
               },
            },
            {
               key: "numberPattern",
               value: function numberPattern(attrs) {
                  return new NumberPattern(attrs);
               },
            },
            {
               key: "numberPatterns",
               value: function numberPatterns(attrs) {
                  return new NumberPatterns(attrs);
               },
            },
            {
               key: "numberSymbol",
               value: function numberSymbol(attrs) {
                  return new NumberSymbol(attrs);
               },
            },
            {
               key: "numberSymbols",
               value: function numberSymbols(attrs) {
                  return new NumberSymbols(attrs);
               },
            },
            {
               key: "timePattern",
               value: function timePattern(attrs) {
                  return new TimePattern(attrs);
               },
            },
            {
               key: "timePatterns",
               value: function timePatterns(attrs) {
                  return new TimePatterns(attrs);
               },
            },
            {
               key: "typeFace",
               value: function typeFace(attrs) {
                  return new TypeFace(attrs);
               },
            },
            {
               key: "typeFaces",
               value: function typeFaces(attrs) {
                  return new TypeFaces(attrs);
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xfa/signature.js
      var SIGNATURE_NS_ID = NamespaceIds.signature.id;
      var signature_Signature = /*#__PURE__*/ (function (_XFAObject157) {
         function signature_Signature(attributes) {
            _classCallCheck(this, signature_Signature);
            return _callSuper(this, signature_Signature, [
               SIGNATURE_NS_ID,
               "signature",
               true,
            ]);
         }
         _inherits(signature_Signature, _XFAObject157);
         return _createClass(signature_Signature);
      })(XFAObject);
      var SignatureNamespace = /*#__PURE__*/ (function () {
         function SignatureNamespace() {
            _classCallCheck(this, SignatureNamespace);
         }
         return _createClass(SignatureNamespace, null, [
            {
               key: $buildXFAObject,
               value: function value(name, attributes) {
                  if (SignatureNamespace.hasOwnProperty(name)) {
                     return SignatureNamespace[name](attributes);
                  }
                  return undefined;
               },
            },
            {
               key: "signature",
               value: function signature(attributes) {
                  return new signature_Signature(attributes);
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xfa/stylesheet.js
      var STYLESHEET_NS_ID = NamespaceIds.stylesheet.id;
      var Stylesheet = /*#__PURE__*/ (function (_XFAObject158) {
         function Stylesheet(attributes) {
            _classCallCheck(this, Stylesheet);
            return _callSuper(this, Stylesheet, [
               STYLESHEET_NS_ID,
               "stylesheet",
               true,
            ]);
         }
         _inherits(Stylesheet, _XFAObject158);
         return _createClass(Stylesheet);
      })(XFAObject);
      var StylesheetNamespace = /*#__PURE__*/ (function () {
         function StylesheetNamespace() {
            _classCallCheck(this, StylesheetNamespace);
         }
         return _createClass(StylesheetNamespace, null, [
            {
               key: $buildXFAObject,
               value: function value(name, attributes) {
                  if (StylesheetNamespace.hasOwnProperty(name)) {
                     return StylesheetNamespace[name](attributes);
                  }
                  return undefined;
               },
            },
            {
               key: "stylesheet",
               value: function stylesheet(attributes) {
                  return new Stylesheet(attributes);
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xfa/xdp.js
      var XDP_NS_ID = NamespaceIds.xdp.id;
      var xdp_Xdp = /*#__PURE__*/ (function (_XFAObject159) {
         function xdp_Xdp(attributes) {
            var _this260;
            _classCallCheck(this, xdp_Xdp);
            _this260 = _callSuper(this, xdp_Xdp, [XDP_NS_ID, "xdp", true]);
            _this260.uuid = attributes.uuid || "";
            _this260.timeStamp = attributes.timeStamp || "";
            _this260.config = null;
            _this260.connectionSet = null;
            _this260.datasets = null;
            _this260.localeSet = null;
            _this260.stylesheet = new XFAObjectArray();
            _this260.template = null;
            return _this260;
         }
         _inherits(xdp_Xdp, _XFAObject159);
         return _createClass(xdp_Xdp, [
            {
               key: $onChildCheck,
               value: function value(child) {
                  var ns = NamespaceIds[child[$nodeName]];
                  return ns && child[$namespaceId] === ns.id;
               },
            },
         ]);
      })(XFAObject);
      var XdpNamespace = /*#__PURE__*/ (function () {
         function XdpNamespace() {
            _classCallCheck(this, XdpNamespace);
         }
         return _createClass(XdpNamespace, null, [
            {
               key: $buildXFAObject,
               value: function value(name, attributes) {
                  if (XdpNamespace.hasOwnProperty(name)) {
                     return XdpNamespace[name](attributes);
                  }
                  return undefined;
               },
            },
            {
               key: "xdp",
               value: function xdp(attributes) {
                  return new xdp_Xdp(attributes);
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xfa/xhtml.js
      var XHTML_NS_ID = NamespaceIds.xhtml.id;
      var $richText = Symbol();
      var VALID_STYLES = new Set([
         "color",
         "font",
         "font-family",
         "font-size",
         "font-stretch",
         "font-style",
         "font-weight",
         "margin",
         "margin-bottom",
         "margin-left",
         "margin-right",
         "margin-top",
         "letter-spacing",
         "line-height",
         "orphans",
         "page-break-after",
         "page-break-before",
         "page-break-inside",
         "tab-interval",
         "tab-stop",
         "text-align",
         "text-decoration",
         "text-indent",
         "vertical-align",
         "widows",
         "kerning-mode",
         "xfa-font-horizontal-scale",
         "xfa-font-vertical-scale",
         "xfa-spacerun",
         "xfa-tab-stops",
      ]);
      var StyleMapping = new Map([
         ["page-break-after", "breakAfter"],
         ["page-break-before", "breakBefore"],
         ["page-break-inside", "breakInside"],
         [
            "kerning-mode",
            function (value) {
               return value === "none" ? "none" : "normal";
            },
         ],
         [
            "xfa-font-horizontal-scale",
            function (value) {
               return "scaleX(".concat(
                  Math.max(0, Math.min(parseInt(value) / 100)).toFixed(2),
                  ")",
               );
            },
         ],
         [
            "xfa-font-vertical-scale",
            function (value) {
               return "scaleY(".concat(
                  Math.max(0, Math.min(parseInt(value) / 100)).toFixed(2),
                  ")",
               );
            },
         ],
         ["xfa-spacerun", ""],
         ["xfa-tab-stops", ""],
         [
            "font-size",
            function (value, original) {
               value = original.fontSize = getMeasurement(value);
               return measureToString(0.99 * value);
            },
         ],
         [
            "letter-spacing",
            function (value) {
               return measureToString(getMeasurement(value));
            },
         ],
         [
            "line-height",
            function (value) {
               return measureToString(getMeasurement(value));
            },
         ],
         [
            "margin",
            function (value) {
               return measureToString(getMeasurement(value));
            },
         ],
         [
            "margin-bottom",
            function (value) {
               return measureToString(getMeasurement(value));
            },
         ],
         [
            "margin-left",
            function (value) {
               return measureToString(getMeasurement(value));
            },
         ],
         [
            "margin-right",
            function (value) {
               return measureToString(getMeasurement(value));
            },
         ],
         [
            "margin-top",
            function (value) {
               return measureToString(getMeasurement(value));
            },
         ],
         [
            "text-indent",
            function (value) {
               return measureToString(getMeasurement(value));
            },
         ],
         [
            "font-family",
            function (value) {
               return value;
            },
         ],
         [
            "vertical-align",
            function (value) {
               return measureToString(getMeasurement(value));
            },
         ],
      ]);
      var spacesRegExp = /\s+/g;
      var crlfRegExp = /[\r\n]+/g;
      var crlfForRichTextRegExp = /\r\n?/g;
      function mapStyle(styleStr, node, richText) {
         var style = Object.create(null);
         if (!styleStr) {
            return style;
         }
         var original = Object.create(null);
         var _iterator180 = _createForOfIteratorHelper(
               styleStr.split(";").map(function (s) {
                  return s.split(":", 2);
               }),
            ),
            _step180;
         try {
            for (_iterator180.s(); !(_step180 = _iterator180.n()).done; ) {
               var _step180$value = _slicedToArray(_step180.value, 2),
                  key = _step180$value[0],
                  value = _step180$value[1];
               var mapping = StyleMapping.get(key);
               if (mapping === "") {
                  continue;
               }
               var newValue = value;
               if (mapping) {
                  newValue =
                     typeof mapping === "string" ? mapping : mapping(value, original);
               }
               if (key.endsWith("scale")) {
                  style.transform = style.transform
                     ? "".concat(style[key], " ").concat(newValue)
                     : newValue;
               } else {
                  style[
                     key.replaceAll(/-([a-zA-Z])/g, function (_, x) {
                        return x.toUpperCase();
                     })
                     ] = newValue;
               }
            }
         } catch (err) {
            _iterator180.e(err);
         } finally {
            _iterator180.f();
         }
         if (style.fontFamily) {
            setFontFamily(
               {
                  typeface: style.fontFamily,
                  weight: style.fontWeight || "normal",
                  posture: style.fontStyle || "normal",
                  size: original.fontSize || 0,
               },
               node,
               node[$globalData].fontFinder,
               style,
            );
         }
         if (
            richText &&
            style.verticalAlign &&
            style.verticalAlign !== "0px" &&
            style.fontSize
         ) {
            var SUB_SUPER_SCRIPT_FACTOR = 0.583;
            var VERTICAL_FACTOR = 0.333;
            var fontSize = getMeasurement(style.fontSize);
            style.fontSize = measureToString(fontSize * SUB_SUPER_SCRIPT_FACTOR);
            style.verticalAlign = measureToString(
               Math.sign(getMeasurement(style.verticalAlign)) *
               fontSize *
               VERTICAL_FACTOR,
            );
         }
         if (richText && style.fontSize) {
            style.fontSize = "calc(".concat(
               style.fontSize,
               " * var(--scale-factor))",
            );
         }
         fixTextIndent(style);
         return style;
      }
      function checkStyle(node) {
         if (!node.style) {
            return "";
         }
         return node.style
            .trim()
            .split(/\s*;\s*/)
            .filter(function (s) {
               return !!s;
            })
            .map(function (s) {
               return s.split(/\s*:\s*/, 2);
            })
            .filter(function (_ref87) {
               var _ref88 = _slicedToArray(_ref87, 2),
                  key = _ref88[0],
                  value = _ref88[1];
               if (key === "font-family") {
                  node[$globalData].usedTypefaces.add(value);
               }
               return VALID_STYLES.has(key);
            })
            .map(function (kv) {
               return kv.join(":");
            })
            .join(";");
      }
      var NoWhites = new Set(["body", "html"]);
      var XhtmlObject = /*#__PURE__*/ (function (_XmlObject2) {
         function XhtmlObject(attributes, name) {
            var _this261;
            _classCallCheck(this, XhtmlObject);
            _this261 = _callSuper(this, XhtmlObject, [XHTML_NS_ID, name]);
            _this261[$richText] = false;
            _this261.style = attributes.style || "";
            return _this261;
         }
         _inherits(XhtmlObject, _XmlObject2);
         return _createClass(XhtmlObject, [
            {
               key: $clean,
               value: function value(builder) {
                  _superPropGet(XhtmlObject, $clean, this, 3)([builder]);
                  this.style = checkStyle(this);
               },
            },
            {
               key: $acceptWhitespace,
               value: function value() {
                  return !NoWhites.has(this[$nodeName]);
               },
            },
            {
               key: $onText,
               value: function value(str) {
                  var richText =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : false;
                  if (!richText) {
                     str = str.replaceAll(crlfRegExp, "");
                     if (!this.style.includes("xfa-spacerun:yes")) {
                        str = str.replaceAll(spacesRegExp, " ");
                     }
                  } else {
                     this[$richText] = true;
                  }
                  if (str) {
                     this[$content] += str;
                  }
               },
            },
            {
               key: $pushGlyphs,
               value: function value(measure) {
                  var mustPop =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : true;
                  var xfaFont = Object.create(null);
                  var margin = { top: NaN, bottom: NaN, left: NaN, right: NaN };
                  var lineHeight = null;
                  var _iterator181 = _createForOfIteratorHelper(
                        this.style.split(";").map(function (s) {
                           return s.split(":", 2);
                        }),
                     ),
                     _step181;
                  try {
                     for (_iterator181.s(); !(_step181 = _iterator181.n()).done; ) {
                        var _step181$value = _slicedToArray(_step181.value, 2),
                           key = _step181$value[0],
                           _value1 = _step181$value[1];
                        switch (key) {
                           case "font-family":
                              xfaFont.typeface = stripQuotes(_value1);
                              break;
                           case "font-size":
                              xfaFont.size = getMeasurement(_value1);
                              break;
                           case "font-weight":
                              xfaFont.weight = _value1;
                              break;
                           case "font-style":
                              xfaFont.posture = _value1;
                              break;
                           case "letter-spacing":
                              xfaFont.letterSpacing = getMeasurement(_value1);
                              break;
                           case "margin":
                              var values = _value1.split(/ \t/).map(function (x) {
                                 return getMeasurement(x);
                              });
                              switch (values.length) {
                                 case 1:
                                    margin.top =
                                       margin.bottom =
                                          margin.left =
                                             margin.right =
                                                values[0];
                                    break;
                                 case 2:
                                    margin.top = margin.bottom = values[0];
                                    margin.left = margin.right = values[1];
                                    break;
                                 case 3:
                                    margin.top = values[0];
                                    margin.bottom = values[2];
                                    margin.left = margin.right = values[1];
                                    break;
                                 case 4:
                                    margin.top = values[0];
                                    margin.left = values[1];
                                    margin.bottom = values[2];
                                    margin.right = values[3];
                                    break;
                              }
                              break;
                           case "margin-top":
                              margin.top = getMeasurement(_value1);
                              break;
                           case "margin-bottom":
                              margin.bottom = getMeasurement(_value1);
                              break;
                           case "margin-left":
                              margin.left = getMeasurement(_value1);
                              break;
                           case "margin-right":
                              margin.right = getMeasurement(_value1);
                              break;
                           case "line-height":
                              lineHeight = getMeasurement(_value1);
                              break;
                        }
                     }
                  } catch (err) {
                     _iterator181.e(err);
                  } finally {
                     _iterator181.f();
                  }
                  measure.pushData(xfaFont, margin, lineHeight);
                  if (this[$content]) {
                     measure.addString(this[$content]);
                  } else {
                     var _iterator182 = _createForOfIteratorHelper(
                           this[$getChildren](),
                        ),
                        _step182;
                     try {
                        for (_iterator182.s(); !(_step182 = _iterator182.n()).done; ) {
                           var child = _step182.value;
                           if (child[$nodeName] === "#text") {
                              measure.addString(child[$content]);
                              continue;
                           }
                           child[$pushGlyphs](measure);
                        }
                     } catch (err) {
                        _iterator182.e(err);
                     } finally {
                        _iterator182.f();
                     }
                  }
                  if (mustPop) {
                     measure.popFont();
                  }
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  var children = [];
                  this[$extra] = { children: children };
                  this[$childrenToHTML]({});
                  if (children.length === 0 && !this[$content]) {
                     return HTMLResult.EMPTY;
                  }
                  var value;
                  if (this[$richText]) {
                     value = this[$content]
                        ? this[$content].replaceAll(crlfForRichTextRegExp, "\n")
                        : undefined;
                  } else {
                     value = this[$content] || undefined;
                  }
                  return HTMLResult.success({
                     name: this[$nodeName],
                     attributes: {
                        href: this.href,
                        style: mapStyle(this.style, this, this[$richText]),
                     },
                     children: children,
                     value: value,
                  });
               },
            },
         ]);
      })(XmlObject);
      var A = /*#__PURE__*/ (function (_XhtmlObject) {
         function A(attributes) {
            var _this262;
            _classCallCheck(this, A);
            _this262 = _callSuper(this, A, [attributes, "a"]);
            _this262.href = fixURL(attributes.href) || "";
            return _this262;
         }
         _inherits(A, _XhtmlObject);
         return _createClass(A);
      })(XhtmlObject);
      var B = /*#__PURE__*/ (function (_XhtmlObject2) {
         function B(attributes) {
            _classCallCheck(this, B);
            return _callSuper(this, B, [attributes, "b"]);
         }
         _inherits(B, _XhtmlObject2);
         return _createClass(B, [
            {
               key: $pushGlyphs,
               value: function value(measure) {
                  measure.pushFont({ weight: "bold" });
                  _superPropGet(B, $pushGlyphs, this, 3)([measure]);
                  measure.popFont();
               },
            },
         ]);
      })(XhtmlObject);
      var Body = /*#__PURE__*/ (function (_XhtmlObject3) {
         function Body(attributes) {
            _classCallCheck(this, Body);
            return _callSuper(this, Body, [attributes, "body"]);
         }
         _inherits(Body, _XhtmlObject3);
         return _createClass(Body, [
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  var res = _superPropGet(Body, $toHTML, this, 3)([availableSpace]);
                  var html = res.html;
                  if (!html) {
                     return HTMLResult.EMPTY;
                  }
                  html.name = "div";
                  html.attributes["class"] = ["xfaRich"];
                  return res;
               },
            },
         ]);
      })(XhtmlObject);
      var Br = /*#__PURE__*/ (function (_XhtmlObject4) {
         function Br(attributes) {
            _classCallCheck(this, Br);
            return _callSuper(this, Br, [attributes, "br"]);
         }
         _inherits(Br, _XhtmlObject4);
         return _createClass(Br, [
            {
               key: $text,
               value: function value() {
                  return "\n";
               },
            },
            {
               key: $pushGlyphs,
               value: function value(measure) {
                  measure.addString("\n");
               },
            },
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  return HTMLResult.success({ name: "br" });
               },
            },
         ]);
      })(XhtmlObject);
      var Html = /*#__PURE__*/ (function (_XhtmlObject5) {
         function Html(attributes) {
            _classCallCheck(this, Html);
            return _callSuper(this, Html, [attributes, "html"]);
         }
         _inherits(Html, _XhtmlObject5);
         return _createClass(Html, [
            {
               key: $toHTML,
               value: function value(availableSpace) {
                  var children = [];
                  this[$extra] = { children: children };
                  this[$childrenToHTML]({});
                  if (children.length === 0) {
                     return HTMLResult.success({
                        name: "div",
                        attributes: { class: ["xfaRich"], style: {} },
                        value: this[$content] || "",
                     });
                  }
                  if (children.length === 1) {
                     var _child$attributes;
                     var child = children[0];
                     if (
                        (_child$attributes = child.attributes) !== null &&
                        _child$attributes !== void 0 &&
                        _child$attributes["class"].includes("xfaRich")
                     ) {
                        return HTMLResult.success(child);
                     }
                  }
                  return HTMLResult.success({
                     name: "div",
                     attributes: { class: ["xfaRich"], style: {} },
                     children: children,
                  });
               },
            },
         ]);
      })(XhtmlObject);
      var I = /*#__PURE__*/ (function (_XhtmlObject6) {
         function I(attributes) {
            _classCallCheck(this, I);
            return _callSuper(this, I, [attributes, "i"]);
         }
         _inherits(I, _XhtmlObject6);
         return _createClass(I, [
            {
               key: $pushGlyphs,
               value: function value(measure) {
                  measure.pushFont({ posture: "italic" });
                  _superPropGet(I, $pushGlyphs, this, 3)([measure]);
                  measure.popFont();
               },
            },
         ]);
      })(XhtmlObject);
      var Li = /*#__PURE__*/ (function (_XhtmlObject7) {
         function Li(attributes) {
            _classCallCheck(this, Li);
            return _callSuper(this, Li, [attributes, "li"]);
         }
         _inherits(Li, _XhtmlObject7);
         return _createClass(Li);
      })(XhtmlObject);
      var Ol = /*#__PURE__*/ (function (_XhtmlObject8) {
         function Ol(attributes) {
            _classCallCheck(this, Ol);
            return _callSuper(this, Ol, [attributes, "ol"]);
         }
         _inherits(Ol, _XhtmlObject8);
         return _createClass(Ol);
      })(XhtmlObject);
      var P = /*#__PURE__*/ (function (_XhtmlObject9) {
         function P(attributes) {
            _classCallCheck(this, P);
            return _callSuper(this, P, [attributes, "p"]);
         }
         _inherits(P, _XhtmlObject9);
         return _createClass(P, [
            {
               key: $pushGlyphs,
               value: function value(measure) {
                  _superPropGet(P, $pushGlyphs, this, 3)([measure, false]);
                  measure.addString("\n");
                  measure.addPara();
                  measure.popFont();
               },
            },
            {
               key: $text,
               value: function value() {
                  var siblings = this[$getParent]()[$getChildren]();
                  if (siblings.at(-1) === this) {
                     return _superPropGet(P, $text, this, 3)([]);
                  }
                  return _superPropGet(P, $text, this, 3)([]) + "\n";
               },
            },
         ]);
      })(XhtmlObject);
      var Span = /*#__PURE__*/ (function (_XhtmlObject0) {
         function Span(attributes) {
            _classCallCheck(this, Span);
            return _callSuper(this, Span, [attributes, "span"]);
         }
         _inherits(Span, _XhtmlObject0);
         return _createClass(Span);
      })(XhtmlObject);
      var Sub = /*#__PURE__*/ (function (_XhtmlObject1) {
         function Sub(attributes) {
            _classCallCheck(this, Sub);
            return _callSuper(this, Sub, [attributes, "sub"]);
         }
         _inherits(Sub, _XhtmlObject1);
         return _createClass(Sub);
      })(XhtmlObject);
      var Sup = /*#__PURE__*/ (function (_XhtmlObject10) {
         function Sup(attributes) {
            _classCallCheck(this, Sup);
            return _callSuper(this, Sup, [attributes, "sup"]);
         }
         _inherits(Sup, _XhtmlObject10);
         return _createClass(Sup);
      })(XhtmlObject);
      var Ul = /*#__PURE__*/ (function (_XhtmlObject11) {
         function Ul(attributes) {
            _classCallCheck(this, Ul);
            return _callSuper(this, Ul, [attributes, "ul"]);
         }
         _inherits(Ul, _XhtmlObject11);
         return _createClass(Ul);
      })(XhtmlObject);
      var XhtmlNamespace = /*#__PURE__*/ (function () {
         function XhtmlNamespace() {
            _classCallCheck(this, XhtmlNamespace);
         }
         return _createClass(XhtmlNamespace, null, [
            {
               key: $buildXFAObject,
               value: function value(name, attributes) {
                  if (XhtmlNamespace.hasOwnProperty(name)) {
                     return XhtmlNamespace[name](attributes);
                  }
                  return undefined;
               },
            },
            {
               key: "a",
               value: function a(attributes) {
                  return new A(attributes);
               },
            },
            {
               key: "b",
               value: function b(attributes) {
                  return new B(attributes);
               },
            },
            {
               key: "body",
               value: function body(attributes) {
                  return new Body(attributes);
               },
            },
            {
               key: "br",
               value: function br(attributes) {
                  return new Br(attributes);
               },
            },
            {
               key: "html",
               value: function html(attributes) {
                  return new Html(attributes);
               },
            },
            {
               key: "i",
               value: function i(attributes) {
                  return new I(attributes);
               },
            },
            {
               key: "li",
               value: function li(attributes) {
                  return new Li(attributes);
               },
            },
            {
               key: "ol",
               value: function ol(attributes) {
                  return new Ol(attributes);
               },
            },
            {
               key: "p",
               value: function p(attributes) {
                  return new P(attributes);
               },
            },
            {
               key: "span",
               value: function span(attributes) {
                  return new Span(attributes);
               },
            },
            {
               key: "sub",
               value: function sub(attributes) {
                  return new Sub(attributes);
               },
            },
            {
               key: "sup",
               value: function sup(attributes) {
                  return new Sup(attributes);
               },
            },
            {
               key: "ul",
               value: function ul(attributes) {
                  return new Ul(attributes);
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xfa/setup.js
      var NamespaceSetUp = {
         config: ConfigNamespace,
         connection: ConnectionSetNamespace,
         datasets: DatasetsNamespace,
         localeSet: LocaleSetNamespace,
         signature: SignatureNamespace,
         stylesheet: StylesheetNamespace,
         template: TemplateNamespace,
         xdp: XdpNamespace,
         xhtml: XhtmlNamespace,
      }; // CONCATENATED MODULE: ./src/core/xfa/unknown.js
      var UnknownNamespace = /*#__PURE__*/ (function () {
         function UnknownNamespace(nsId) {
            _classCallCheck(this, UnknownNamespace);
            this.namespaceId = nsId;
         }
         return _createClass(UnknownNamespace, [
            {
               key: $buildXFAObject,
               value: function value(name, attributes) {
                  return new XmlObject(this.namespaceId, name, attributes);
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xfa/builder.js
      var Root = /*#__PURE__*/ (function (_XFAObject160) {
         function Root(ids) {
            var _this263;
            _classCallCheck(this, Root);
            _this263 = _callSuper(this, Root, [-1, "root", Object.create(null)]);
            _this263.element = null;
            _this263[$ids] = ids;
            return _this263;
         }
         _inherits(Root, _XFAObject160);
         return _createClass(Root, [
            {
               key: $onChild,
               value: function value(child) {
                  this.element = child;
                  return true;
               },
            },
            {
               key: $finalize,
               value: function value() {
                  _superPropGet(Root, $finalize, this, 3)([]);
                  if (this.element.template instanceof Template) {
                     this[$ids].set($root, this.element);
                     this.element.template[$resolvePrototypes](this[$ids]);
                     this.element.template[$ids] = this[$ids];
                  }
               },
            },
         ]);
      })(XFAObject);
      var Empty = /*#__PURE__*/ (function (_XFAObject161) {
         function Empty() {
            _classCallCheck(this, Empty);
            return _callSuper(this, Empty, [-1, "", Object.create(null)]);
         }
         _inherits(Empty, _XFAObject161);
         return _createClass(Empty, [
            {
               key: $onChild,
               value: function value(_) {
                  return false;
               },
            },
         ]);
      })(XFAObject);
      var Builder = /*#__PURE__*/ (function () {
         function Builder() {
            var rootNameSpace =
               arguments.length > 0 && arguments[0] !== undefined
                  ? arguments[0]
                  : null;
            _classCallCheck(this, Builder);
            this._namespaceStack = [];
            this._nsAgnosticLevel = 0;
            this._namespacePrefixes = new Map();
            this._namespaces = new Map();
            this._nextNsId = Math.max.apply(
               Math,
               _toConsumableArray(
                  Object.values(NamespaceIds).map(function (_ref89) {
                     var id = _ref89.id;
                     return id;
                  }),
               ),
            );
            this._currentNamespace =
               rootNameSpace || new UnknownNamespace(++this._nextNsId);
         }
         return _createClass(Builder, [
            {
               key: "buildRoot",
               value: function buildRoot(ids) {
                  return new Root(ids);
               },
            },
            {
               key: "build",
               value: function build(_ref90) {
                  var nsPrefix = _ref90.nsPrefix,
                     name = _ref90.name,
                     attributes = _ref90.attributes,
                     namespace = _ref90.namespace,
                     prefixes = _ref90.prefixes;
                  var hasNamespaceDef = namespace !== null;
                  if (hasNamespaceDef) {
                     this._namespaceStack.push(this._currentNamespace);
                     this._currentNamespace = this._searchNamespace(namespace);
                  }
                  if (prefixes) {
                     this._addNamespacePrefix(prefixes);
                  }
                  if (attributes.hasOwnProperty($nsAttributes)) {
                     var dataTemplate = NamespaceSetUp.datasets;
                     var nsAttrs = attributes[$nsAttributes];
                     var xfaAttrs = null;
                     for (
                        var _i60 = 0, _Object$entries5 = Object.entries(nsAttrs);
                        _i60 < _Object$entries5.length;
                        _i60++
                     ) {
                        var _Object$entries5$_i = _slicedToArray(
                              _Object$entries5[_i60],
                              2,
                           ),
                           ns = _Object$entries5$_i[0],
                           attrs = _Object$entries5$_i[1];
                        var nsToUse = this._getNamespaceToUse(ns);
                        if (nsToUse === dataTemplate) {
                           xfaAttrs = { xfa: attrs };
                           break;
                        }
                     }
                     if (xfaAttrs) {
                        attributes[$nsAttributes] = xfaAttrs;
                     } else {
                        delete attributes[$nsAttributes];
                     }
                  }
                  var namespaceToUse = this._getNamespaceToUse(nsPrefix);
                  var node =
                     (namespaceToUse === null || namespaceToUse === void 0
                        ? void 0
                        : namespaceToUse[$buildXFAObject](name, attributes)) ||
                     new Empty();
                  if (node[$isNsAgnostic]()) {
                     this._nsAgnosticLevel++;
                  }
                  if (hasNamespaceDef || prefixes || node[$isNsAgnostic]()) {
                     node[$cleanup] = {
                        hasNamespace: hasNamespaceDef,
                        prefixes: prefixes,
                        nsAgnostic: node[$isNsAgnostic](),
                     };
                  }
                  return node;
               },
            },
            {
               key: "isNsAgnostic",
               value: function isNsAgnostic() {
                  return this._nsAgnosticLevel > 0;
               },
            },
            {
               key: "_searchNamespace",
               value: function _searchNamespace(nsName) {
                  var ns = this._namespaces.get(nsName);
                  if (ns) {
                     return ns;
                  }
                  for (
                     var _i61 = 0, _Object$entries6 = Object.entries(NamespaceIds);
                     _i61 < _Object$entries6.length;
                     _i61++
                  ) {
                     var _Object$entries6$_i = _slicedToArray(
                           _Object$entries6[_i61],
                           2,
                        ),
                        name = _Object$entries6$_i[0],
                        check = _Object$entries6$_i[1].check;
                     if (check(nsName)) {
                        ns = NamespaceSetUp[name];
                        if (ns) {
                           this._namespaces.set(nsName, ns);
                           return ns;
                        }
                        break;
                     }
                  }
                  ns = new UnknownNamespace(++this._nextNsId);
                  this._namespaces.set(nsName, ns);
                  return ns;
               },
            },
            {
               key: "_addNamespacePrefix",
               value: function _addNamespacePrefix(prefixes) {
                  var _iterator183 = _createForOfIteratorHelper(prefixes),
                     _step183;
                  try {
                     for (_iterator183.s(); !(_step183 = _iterator183.n()).done; ) {
                        var _step183$value = _step183.value,
                           prefix = _step183$value.prefix,
                           value = _step183$value.value;
                        var namespace = this._searchNamespace(value);
                        var prefixStack = this._namespacePrefixes.get(prefix);
                        if (!prefixStack) {
                           prefixStack = [];
                           this._namespacePrefixes.set(prefix, prefixStack);
                        }
                        prefixStack.push(namespace);
                     }
                  } catch (err) {
                     _iterator183.e(err);
                  } finally {
                     _iterator183.f();
                  }
               },
            },
            {
               key: "_getNamespaceToUse",
               value: function _getNamespaceToUse(prefix) {
                  if (!prefix) {
                     return this._currentNamespace;
                  }
                  var prefixStack = this._namespacePrefixes.get(prefix);
                  if (
                     (prefixStack === null || prefixStack === void 0
                        ? void 0
                        : prefixStack.length) > 0
                  ) {
                     return prefixStack.at(-1);
                  }
                  warn("Unknown namespace prefix: ".concat(prefix, "."));
                  return null;
               },
            },
            {
               key: "clean",
               value: function clean(data) {
                  var _this264 = this;
                  var hasNamespace = data.hasNamespace,
                     prefixes = data.prefixes,
                     nsAgnostic = data.nsAgnostic;
                  if (hasNamespace) {
                     this._currentNamespace = this._namespaceStack.pop();
                  }
                  if (prefixes) {
                     prefixes.forEach(function (_ref91) {
                        var prefix = _ref91.prefix;
                        _this264._namespacePrefixes.get(prefix).pop();
                     });
                  }
                  if (nsAgnostic) {
                     this._nsAgnosticLevel--;
                  }
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xfa/parser.js
      var XFAParser = /*#__PURE__*/ (function (_XMLParserBase2) {
         function XFAParser() {
            var _this265;
            var rootNameSpace =
               arguments.length > 0 && arguments[0] !== undefined
                  ? arguments[0]
                  : null;
            var richText =
               arguments.length > 1 && arguments[1] !== undefined
                  ? arguments[1]
                  : false;
            _classCallCheck(this, XFAParser);
            _this265 = _callSuper(this, XFAParser);
            _this265._builder = new Builder(rootNameSpace);
            _this265._stack = [];
            _this265._globalData = { usedTypefaces: new Set() };
            _this265._ids = new Map();
            _this265._current = _this265._builder.buildRoot(_this265._ids);
            _this265._errorCode = XMLParserErrorCode.NoError;
            _this265._whiteRegex = /^\s+$/;
            _this265._nbsps = /\xa0+/g;
            _this265._richText = richText;
            return _this265;
         }
         _inherits(XFAParser, _XMLParserBase2);
         return _createClass(XFAParser, [
            {
               key: "parse",
               value: function parse(data) {
                  this.parseXml(data);
                  if (this._errorCode !== XMLParserErrorCode.NoError) {
                     return undefined;
                  }
                  this._current[$finalize]();
                  return this._current.element;
               },
            },
            {
               key: "onText",
               value: function onText(text) {
                  text = text.replace(this._nbsps, function (match) {
                     return match.slice(1) + " ";
                  });
                  if (this._richText || this._current[$acceptWhitespace]()) {
                     this._current[$onText](text, this._richText);
                     return;
                  }
                  if (this._whiteRegex.test(text)) {
                     return;
                  }
                  this._current[$onText](text.trim());
               },
            },
            {
               key: "onCdata",
               value: function onCdata(text) {
                  this._current[$onText](text);
               },
            },
            {
               key: "_mkAttributes",
               value: function _mkAttributes(attributes, tagName) {
                  var namespace = null;
                  var prefixes = null;
                  var attributeObj = Object.create({});
                  var _iterator184 = _createForOfIteratorHelper(attributes),
                     _step184;
                  try {
                     for (_iterator184.s(); !(_step184 = _iterator184.n()).done; ) {
                        var _step184$value = _step184.value,
                           name = _step184$value.name,
                           value = _step184$value.value;
                        if (name === "xmlns") {
                           if (!namespace) {
                              namespace = value;
                           } else {
                              warn(
                                 "XFA - multiple namespace definition in <".concat(
                                    tagName,
                                    ">",
                                 ),
                              );
                           }
                        } else if (name.startsWith("xmlns:")) {
                           var prefix = name.substring("xmlns:".length);
                           if (!prefixes) {
                              prefixes = [];
                           }
                           prefixes.push({ prefix: prefix, value: value });
                        } else {
                           var i = name.indexOf(":");
                           if (i === -1) {
                              attributeObj[name] = value;
                           } else {
                              var _nsAttrs;
                              var nsAttrs = attributeObj[$nsAttributes];
                              if (!nsAttrs) {
                                 nsAttrs = attributeObj[$nsAttributes] =
                                    Object.create(null);
                              }
                              var _ref92 = [name.slice(0, i), name.slice(i + 1)],
                                 ns = _ref92[0],
                                 attrName = _ref92[1];
                              var attrs =
                                 (_nsAttrs = nsAttrs)[ns] ||
                                 (_nsAttrs[ns] = Object.create(null));
                              attrs[attrName] = value;
                           }
                        }
                     }
                  } catch (err) {
                     _iterator184.e(err);
                  } finally {
                     _iterator184.f();
                  }
                  return [namespace, prefixes, attributeObj];
               },
            },
            {
               key: "_getNameAndPrefix",
               value: function _getNameAndPrefix(name, nsAgnostic) {
                  var i = name.indexOf(":");
                  if (i === -1) {
                     return [name, null];
                  }
                  return [
                     name.substring(i + 1),
                     nsAgnostic ? "" : name.substring(0, i),
                  ];
               },
            },
            {
               key: "onBeginElement",
               value: function onBeginElement(tagName, attributes, isEmpty) {
                  var _this$_mkAttributes = this._mkAttributes(attributes, tagName),
                     _this$_mkAttributes2 = _slicedToArray(_this$_mkAttributes, 3),
                     namespace = _this$_mkAttributes2[0],
                     prefixes = _this$_mkAttributes2[1],
                     attributesObj = _this$_mkAttributes2[2];
                  var _this$_getNameAndPref = this._getNameAndPrefix(
                        tagName,
                        this._builder.isNsAgnostic(),
                     ),
                     _this$_getNameAndPref2 = _slicedToArray(_this$_getNameAndPref, 2),
                     name = _this$_getNameAndPref2[0],
                     nsPrefix = _this$_getNameAndPref2[1];
                  var node = this._builder.build({
                     nsPrefix: nsPrefix,
                     name: name,
                     attributes: attributesObj,
                     namespace: namespace,
                     prefixes: prefixes,
                  });
                  node[$globalData] = this._globalData;
                  if (isEmpty) {
                     node[$finalize]();
                     if (this._current[$onChild](node)) {
                        node[$setId](this._ids);
                     }
                     node[$clean](this._builder);
                     return;
                  }
                  this._stack.push(this._current);
                  this._current = node;
               },
            },
            {
               key: "onEndElement",
               value: function onEndElement(name) {
                  var node = this._current;
                  if (node[$isCDATAXml]() && typeof node[$content] === "string") {
                     var parser = new XFAParser();
                     parser._globalData = this._globalData;
                     var root = parser.parse(node[$content]);
                     node[$content] = null;
                     node[$onChild](root);
                  }
                  node[$finalize]();
                  this._current = this._stack.pop();
                  if (this._current[$onChild](node)) {
                     node[$setId](this._ids);
                  }
                  node[$clean](this._builder);
               },
            },
            {
               key: "onError",
               value: function onError(code) {
                  this._errorCode = code;
               },
            },
         ]);
      })(XMLParserBase); // CONCATENATED MODULE: ./src/core/xfa/factory.js
      var XFAFactory = /*#__PURE__*/ (function () {
         function XFAFactory(data) {
            _classCallCheck(this, XFAFactory);
            try {
               this.root = new XFAParser().parse(XFAFactory._createDocument(data));
               var binder = new Binder(this.root);
               this.form = binder.bind();
               this.dataHandler = new DataHandler(this.root, binder.getData());
               this.form[$globalData].template = this.form;
            } catch (e) {
               warn(
                  "XFA - an error occurred during parsing and binding: ".concat(e),
               );
            }
         }
         return _createClass(
            XFAFactory,
            [
               {
                  key: "isValid",
                  value: function isValid() {
                     return this.root && this.form;
                  },
               },
               {
                  key: "_createPagesHelper",
                  value: function _createPagesHelper() {
                     var iterator = this.form[$toPages]();
                     return new Promise(function (resolve, reject) {
                        var _nextIteration = function nextIteration() {
                           try {
                              var value = iterator.next();
                              if (value.done) {
                                 resolve(value.value);
                              } else {
                                 setTimeout(_nextIteration, 0);
                              }
                           } catch (e) {
                              reject(e);
                           }
                        };
                        setTimeout(_nextIteration, 0);
                     });
                  },
               },
               {
                  key: "_createPages",
                  value: (function () {
                     var _createPages2 = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee33() {
                           var _t40;
                           return _regenerator().w(
                              function (_context47) {
                                 while (1)
                                    switch ((_context47.p = _context47.n)) {
                                       case 0:
                                          _context47.p = 0;
                                          _context47.n = 1;
                                          return this._createPagesHelper();
                                       case 1:
                                          this.pages = _context47.v;
                                          this.dims = this.pages.children.map(function (c) {
                                             var _c$attributes$style = c.attributes.style,
                                                width = _c$attributes$style.width,
                                                height = _c$attributes$style.height;
                                             return [0, 0, parseInt(width), parseInt(height)];
                                          });
                                          _context47.n = 3;
                                          break;
                                       case 2:
                                          _context47.p = 2;
                                          _t40 = _context47.v;
                                          warn(
                                             "XFA - an error occurred during layout: ".concat(
                                                _t40,
                                             ),
                                          );
                                       case 3:
                                          return _context47.a(2);
                                    }
                              },
                              _callee33,
                              this,
                              [[0, 2]],
                           );
                        }),
                     );
                     function _createPages() {
                        return _createPages2.apply(this, arguments);
                     }
                     return _createPages;
                  })(),
               },
               {
                  key: "getBoundingBox",
                  value: function getBoundingBox(pageIndex) {
                     return this.dims[pageIndex];
                  },
               },
               {
                  key: "getNumPages",
                  value: (function () {
                     var _getNumPages = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee34() {
                           return _regenerator().w(
                              function (_context48) {
                                 while (1)
                                    switch (_context48.n) {
                                       case 0:
                                          if (this.pages) {
                                             _context48.n = 1;
                                             break;
                                          }
                                          _context48.n = 1;
                                          return this._createPages();
                                       case 1:
                                          return _context48.a(2, this.dims.length);
                                    }
                              },
                              _callee34,
                              this,
                           );
                        }),
                     );
                     function getNumPages() {
                        return _getNumPages.apply(this, arguments);
                     }
                     return getNumPages;
                  })(),
               },
               {
                  key: "setImages",
                  value: function setImages(images) {
                     this.form[$globalData].images = images;
                  },
               },
               {
                  key: "setFonts",
                  value: function setFonts(fonts) {
                     this.form[$globalData].fontFinder = new FontFinder(fonts);
                     var missingFonts = [];
                     var _iterator185 = _createForOfIteratorHelper(
                           this.form[$globalData].usedTypefaces,
                        ),
                        _step185;
                     try {
                        for (_iterator185.s(); !(_step185 = _iterator185.n()).done; ) {
                           var typeface = _step185.value;
                           typeface = stripQuotes(typeface);
                           var font = this.form[$globalData].fontFinder.find(typeface);
                           if (!font) {
                              missingFonts.push(typeface);
                           }
                        }
                     } catch (err) {
                        _iterator185.e(err);
                     } finally {
                        _iterator185.f();
                     }
                     if (missingFonts.length > 0) {
                        return missingFonts;
                     }
                     return null;
                  },
               },
               {
                  key: "appendFonts",
                  value: function appendFonts(fonts, reallyMissingFonts) {
                     this.form[$globalData].fontFinder.add(fonts, reallyMissingFonts);
                  },
               },
               {
                  key: "getPages",
                  value: (function () {
                     var _getPages = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(function _callee35() {
                           var pages;
                           return _regenerator().w(
                              function (_context49) {
                                 while (1)
                                    switch (_context49.n) {
                                       case 0:
                                          if (this.pages) {
                                             _context49.n = 1;
                                             break;
                                          }
                                          _context49.n = 1;
                                          return this._createPages();
                                       case 1:
                                          pages = this.pages;
                                          this.pages = null;
                                          return _context49.a(2, pages);
                                    }
                              },
                              _callee35,
                              this,
                           );
                        }),
                     );
                     function getPages() {
                        return _getPages.apply(this, arguments);
                     }
                     return getPages;
                  })(),
               },
               {
                  key: "serializeData",
                  value: function serializeData(storage) {
                     return this.dataHandler.serialize(storage);
                  },
               },
            ],
            [
               {
                  key: "_createDocument",
                  value: function _createDocument(data) {
                     if (!data["/xdp:xdp"]) {
                        return data["xdp:xdp"];
                     }
                     return Object.values(data).join("");
                  },
               },
               {
                  key: "getRichTextAsHtml",
                  value: function getRichTextAsHtml(rc) {
                     if (!rc || typeof rc !== "string") {
                        return null;
                     }
                     try {
                        var root = new XFAParser(XhtmlNamespace, true).parse(rc);
                        if (!["body", "xhtml"].includes(root[$nodeName])) {
                           var newRoot = XhtmlNamespace.body({});
                           newRoot[$appendChild](root);
                           root = newRoot;
                        }
                        var result = root[$toHTML]();
                        if (!result.success) {
                           return null;
                        }
                        var html = result.html;
                        var attributes = html.attributes;
                        if (attributes) {
                           if (attributes["class"]) {
                              attributes["class"] = attributes["class"].filter(
                                 function (attr) {
                                    return !attr.startsWith("xfa");
                                 },
                              );
                           }
                           attributes.dir = "auto";
                        }
                        return { html: html, str: root[$text]() };
                     } catch (e) {
                        warn(
                           "XFA - an error occurred during parsing of rich text: ".concat(
                              e,
                           ),
                        );
                     }
                     return null;
                  },
               },
            ],
         );
      })(); // CONCATENATED MODULE: ./src/core/annotation.js
      var AnnotationFactory = /*#__PURE__*/ (function () {
         function AnnotationFactory() {
            _classCallCheck(this, AnnotationFactory);
         }
         return _createClass(AnnotationFactory, null, [
            {
               key: "createGlobals",
               value: function createGlobals(pdfManager) {
                  return Promise.all([
                     pdfManager.ensureCatalog("acroForm"),
                     pdfManager.ensureDoc("xfaDatasets"),
                     pdfManager.ensureCatalog("structTreeRoot"),
                     pdfManager.ensureCatalog("baseUrl"),
                     pdfManager.ensureCatalog("attachments"),
                  ]).then(
                     function (_ref93) {
                        var _ref94 = _slicedToArray(_ref93, 5),
                           acroForm = _ref94[0],
                           xfaDatasets = _ref94[1],
                           structTreeRoot = _ref94[2],
                           baseUrl = _ref94[3],
                           attachments = _ref94[4];
                        return {
                           pdfManager: pdfManager,
                           acroForm: acroForm instanceof Dict ? acroForm : Dict.empty,
                           xfaDatasets: xfaDatasets,
                           structTreeRoot: structTreeRoot,
                           baseUrl: baseUrl,
                           attachments: attachments,
                        };
                     },
                     function (reason) {
                        warn('createGlobals: "'.concat(reason, '".'));
                        return null;
                     },
                  );
               },
            },
            {
               key: "create",
               value: (function () {
                  var _create2 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee36(
                           xref,
                           ref,
                           annotationGlobals,
                           idFactory,
                           collectFields,
                           pageRef,
                        ) {
                           var pageIndex, _t41;
                           return _regenerator().w(
                              function (_context50) {
                                 while (1)
                                    switch (_context50.n) {
                                       case 0:
                                          if (!collectFields) {
                                             _context50.n = 2;
                                             break;
                                          }
                                          _context50.n = 1;
                                          return this._getPageIndex(
                                             xref,
                                             ref,
                                             annotationGlobals.pdfManager,
                                          );
                                       case 1:
                                          _t41 = _context50.v;
                                          _context50.n = 3;
                                          break;
                                       case 2:
                                          _t41 = null;
                                       case 3:
                                          pageIndex = _t41;
                                          return _context50.a(
                                             2,
                                             annotationGlobals.pdfManager.ensure(
                                                this,
                                                "_create",
                                                [
                                                   xref,
                                                   ref,
                                                   annotationGlobals,
                                                   idFactory,
                                                   collectFields,
                                                   pageIndex,
                                                   pageRef,
                                                ],
                                             ),
                                          );
                                    }
                              },
                              _callee36,
                              this,
                           );
                        },
                     ),
                  );
                  function create(_x84, _x85, _x86, _x87, _x88, _x89) {
                     return _create2.apply(this, arguments);
                  }
                  return create;
               })(),
            },
            {
               key: "_create",
               value: function _create(xref, ref, annotationGlobals, idFactory) {
                  var collectFields =
                     arguments.length > 4 && arguments[4] !== undefined
                        ? arguments[4]
                        : false;
                  var pageIndex =
                     arguments.length > 5 && arguments[5] !== undefined
                        ? arguments[5]
                        : null;
                  var pageRef =
                     arguments.length > 6 && arguments[6] !== undefined
                        ? arguments[6]
                        : null;
                  var dict = xref.fetchIfRef(ref);
                  if (!(dict instanceof Dict)) {
                     return undefined;
                  }
                  var acroForm = annotationGlobals.acroForm,
                     pdfManager = annotationGlobals.pdfManager;
                  var id =
                     ref instanceof Ref
                        ? ref.toString()
                        : "annot_".concat(idFactory.createObjId());
                  var subtype = dict.get("Subtype");
                  subtype = subtype instanceof Name ? subtype.name : null;
                  var parameters = {
                     xref: xref,
                     ref: ref,
                     dict: dict,
                     subtype: subtype,
                     id: id,
                     annotationGlobals: annotationGlobals,
                     collectFields: collectFields,
                     needAppearances:
                        !collectFields && acroForm.get("NeedAppearances") === true,
                     pageIndex: pageIndex,
                     evaluatorOptions: pdfManager.evaluatorOptions,
                     pageRef: pageRef,
                  };
                  switch (subtype) {
                     case "Link":
                        return new LinkAnnotation(parameters);
                     case "Text":
                        return new TextAnnotation(parameters);
                     case "Widget":
                        var fieldType = getInheritableProperty({
                           dict: dict,
                           key: "FT",
                        });
                        fieldType = fieldType instanceof Name ? fieldType.name : null;
                        switch (fieldType) {
                           case "Tx":
                              return new TextWidgetAnnotation(parameters);
                           case "Btn":
                              return new ButtonWidgetAnnotation(parameters);
                           case "Ch":
                              return new ChoiceWidgetAnnotation(parameters);
                           case "Sig":
                              return new SignatureWidgetAnnotation(parameters);
                        }
                        warn(
                           'Unimplemented widget field type "'.concat(fieldType, '", ') +
                           "falling back to base field type.",
                        );
                        return new WidgetAnnotation(parameters);
                     case "Popup":
                        return new PopupAnnotation(parameters);
                     case "FreeText":
                        return new FreeTextAnnotation(parameters);
                     case "Line":
                        return new LineAnnotation(parameters);
                     case "Square":
                        return new SquareAnnotation(parameters);
                     case "Circle":
                        return new CircleAnnotation(parameters);
                     case "PolyLine":
                        return new PolylineAnnotation(parameters);
                     case "Polygon":
                        return new PolygonAnnotation(parameters);
                     case "Caret":
                        return new CaretAnnotation(parameters);
                     case "Ink":
                        return new InkAnnotation(parameters);
                     case "Highlight":
                        return new HighlightAnnotation(parameters);
                     case "Underline":
                        return new UnderlineAnnotation(parameters);
                     case "Squiggly":
                        return new SquigglyAnnotation(parameters);
                     case "StrikeOut":
                        return new StrikeOutAnnotation(parameters);
                     case "Stamp":
                        return new StampAnnotation(parameters);
                     case "FileAttachment":
                        return new FileAttachmentAnnotation(parameters);
                     default:
                        if (!collectFields) {
                           if (!subtype) {
                              warn("Annotation is missing the required /Subtype.");
                           } else {
                              warn(
                                 'Unimplemented annotation type "'.concat(subtype, '", ') +
                                 "falling back to base annotation.",
                              );
                           }
                        }
                        return new Annotation(parameters);
                  }
               },
            },
            {
               key: "_getPageIndex",
               value: (function () {
                  var _getPageIndex2 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee37(xref, ref, pdfManager) {
                           var annotDict,
                              pageRef,
                              _pageIndex2,
                              numPages,
                              _pageIndex3,
                              page,
                              annotations,
                              _iterator186,
                              _step186,
                              annotRef,
                              _t42,
                              _t43,
                              _t44;
                           return _regenerator().w(
                              function (_context51) {
                                 while (1)
                                    switch ((_context51.p = _context51.n)) {
                                       case 0:
                                          _context51.p = 0;
                                          _context51.n = 1;
                                          return xref.fetchIfRefAsync(ref);
                                       case 1:
                                          annotDict = _context51.v;
                                          if (annotDict instanceof Dict) {
                                             _context51.n = 2;
                                             break;
                                          }
                                          return _context51.a(2, -1);
                                       case 2:
                                          pageRef = annotDict.getRaw("P");
                                          if (!(pageRef instanceof Ref)) {
                                             _context51.n = 6;
                                             break;
                                          }
                                          _context51.p = 3;
                                          _context51.n = 4;
                                          return pdfManager.ensureCatalog("getPageIndex", [
                                             pageRef,
                                          ]);
                                       case 4:
                                          _pageIndex2 = _context51.v;
                                          return _context51.a(2, _pageIndex2);
                                       case 5:
                                          _context51.p = 5;
                                          _t42 = _context51.v;
                                          info(
                                             '_getPageIndex -- not a valid page reference: "'.concat(
                                                _t42,
                                                '".',
                                             ),
                                          );
                                       case 6:
                                          if (!annotDict.has("Kids")) {
                                             _context51.n = 7;
                                             break;
                                          }
                                          return _context51.a(2, -1);
                                       case 7:
                                          _context51.n = 8;
                                          return pdfManager.ensureDoc("numPages");
                                       case 8:
                                          numPages = _context51.v;
                                          _pageIndex3 = 0;
                                       case 9:
                                          if (!(_pageIndex3 < numPages)) {
                                             _context51.n = 19;
                                             break;
                                          }
                                          _context51.n = 10;
                                          return pdfManager.getPage(_pageIndex3);
                                       case 10:
                                          page = _context51.v;
                                          _context51.n = 11;
                                          return pdfManager.ensure(page, "annotations");
                                       case 11:
                                          annotations = _context51.v;
                                          _iterator186 =
                                             _createForOfIteratorHelper(annotations);
                                          _context51.p = 12;
                                          _iterator186.s();
                                       case 13:
                                          if ((_step186 = _iterator186.n()).done) {
                                             _context51.n = 15;
                                             break;
                                          }
                                          annotRef = _step186.value;
                                          if (
                                             !(
                                                annotRef instanceof Ref &&
                                                isRefsEqual(annotRef, ref)
                                             )
                                          ) {
                                             _context51.n = 14;
                                             break;
                                          }
                                          return _context51.a(2, _pageIndex3);
                                       case 14:
                                          _context51.n = 13;
                                          break;
                                       case 15:
                                          _context51.n = 17;
                                          break;
                                       case 16:
                                          _context51.p = 16;
                                          _t43 = _context51.v;
                                          _iterator186.e(_t43);
                                       case 17:
                                          _context51.p = 17;
                                          _iterator186.f();
                                          return _context51.f(17);
                                       case 18:
                                          _pageIndex3++;
                                          _context51.n = 9;
                                          break;
                                       case 19:
                                          _context51.n = 21;
                                          break;
                                       case 20:
                                          _context51.p = 20;
                                          _t44 = _context51.v;
                                          warn('_getPageIndex: "'.concat(_t44, '".'));
                                       case 21:
                                          return _context51.a(2, -1);
                                    }
                              },
                              _callee37,
                              null,
                              [
                                 [12, 16, 17, 18],
                                 [3, 5],
                                 [0, 20],
                              ],
                           );
                        },
                     ),
                  );
                  function _getPageIndex(_x90, _x91, _x92) {
                     return _getPageIndex2.apply(this, arguments);
                  }
                  return _getPageIndex;
               })(),
            },
            {
               key: "generateImages",
               value: function generateImages(
                  annotations,
                  xref,
                  isOffscreenCanvasSupported,
               ) {
                  if (!isOffscreenCanvasSupported) {
                     warn(
                        "generateImages: OffscreenCanvas is not supported, cannot save or print some annotations with images.",
                     );
                     return null;
                  }
                  var imagePromises;
                  var _iterator187 = _createForOfIteratorHelper(annotations),
                     _step187;
                  try {
                     for (_iterator187.s(); !(_step187 = _iterator187.n()).done; ) {
                        var _step187$value = _step187.value,
                           bitmapId = _step187$value.bitmapId,
                           bitmap = _step187$value.bitmap;
                        if (!bitmap) {
                           continue;
                        }
                        imagePromises || (imagePromises = new Map());
                        imagePromises.set(
                           bitmapId,
                           StampAnnotation.createImage(bitmap, xref),
                        );
                     }
                  } catch (err) {
                     _iterator187.e(err);
                  } finally {
                     _iterator187.f();
                  }
                  return imagePromises;
               },
            },
            {
               key: "saveNewAnnotations",
               value: (function () {
                  var _saveNewAnnotations = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee38(
                           evaluator,
                           task,
                           annotations,
                           imagePromises,
                        ) {
                           var xref,
                              baseFontRef,
                              dependencies,
                              promises,
                              isOffscreenCanvasSupported,
                              _iterator188,
                              _step188,
                              annotation,
                              baseFont,
                              buffer,
                              image,
                              imageStream,
                              smaskStream,
                              _buffer,
                              smaskRef,
                              imageRef,
                              _t45,
                              _t46,
                              _t47,
                              _t48;
                           return _regenerator().w(
                              function (_context52) {
                                 while (1)
                                    switch ((_context52.p = _context52.n)) {
                                       case 0:
                                          xref = evaluator.xref;
                                          dependencies = [];
                                          promises = [];
                                          isOffscreenCanvasSupported =
                                             evaluator.options.isOffscreenCanvasSupported;
                                          _iterator188 =
                                             _createForOfIteratorHelper(annotations);
                                          _context52.p = 1;
                                          _iterator188.s();
                                       case 2:
                                          if ((_step188 = _iterator188.n()).done) {
                                             _context52.n = 17;
                                             break;
                                          }
                                          annotation = _step188.value;
                                          if (!annotation.deleted) {
                                             _context52.n = 3;
                                             break;
                                          }
                                          return _context52.a(3, 16);
                                       case 3:
                                          _t45 = annotation.annotationType;
                                          _context52.n =
                                             _t45 === AnnotationEditorType.FREETEXT
                                                ? 4
                                                : _t45 === AnnotationEditorType.HIGHLIGHT
                                                   ? 7
                                                   : _t45 === AnnotationEditorType.INK
                                                      ? 8
                                                      : _t45 === AnnotationEditorType.STAMP
                                                         ? 9
                                                         : 16;
                                          break;
                                       case 4:
                                          if (baseFontRef) {
                                             _context52.n = 6;
                                             break;
                                          }
                                          baseFont = new Dict(xref);
                                          baseFont.set("BaseFont", Name.get("Helvetica"));
                                          baseFont.set("Type", Name.get("Font"));
                                          baseFont.set("Subtype", Name.get("Type1"));
                                          baseFont.set(
                                             "Encoding",
                                             Name.get("WinAnsiEncoding"),
                                          );
                                          buffer = [];
                                          baseFontRef = xref.getNewTemporaryRef();
                                          _context52.n = 5;
                                          return writeObject(
                                             baseFontRef,
                                             baseFont,
                                             buffer,
                                             xref,
                                          );
                                       case 5:
                                          dependencies.push({
                                             ref: baseFontRef,
                                             data: buffer.join(""),
                                          });
                                       case 6:
                                          promises.push(
                                             FreeTextAnnotation.createNewAnnotation(
                                                xref,
                                                annotation,
                                                dependencies,
                                                {
                                                   evaluator: evaluator,
                                                   task: task,
                                                   baseFontRef: baseFontRef,
                                                },
                                             ),
                                          );
                                          return _context52.a(3, 16);
                                       case 7:
                                          if (annotation.quadPoints) {
                                             promises.push(
                                                HighlightAnnotation.createNewAnnotation(
                                                   xref,
                                                   annotation,
                                                   dependencies,
                                                ),
                                             );
                                          } else {
                                             promises.push(
                                                InkAnnotation.createNewAnnotation(
                                                   xref,
                                                   annotation,
                                                   dependencies,
                                                ),
                                             );
                                          }
                                          return _context52.a(3, 16);
                                       case 8:
                                          promises.push(
                                             InkAnnotation.createNewAnnotation(
                                                xref,
                                                annotation,
                                                dependencies,
                                             ),
                                          );
                                          return _context52.a(3, 16);
                                       case 9:
                                          if (isOffscreenCanvasSupported) {
                                             _context52.n = 10;
                                             break;
                                          }
                                          return _context52.a(3, 16);
                                       case 10:
                                          _context52.n = 11;
                                          return imagePromises.get(annotation.bitmapId);
                                       case 11:
                                          image = _context52.v;
                                          if (!image.imageStream) {
                                             _context52.n = 15;
                                             break;
                                          }
                                          ((imageStream = image.imageStream),
                                             (smaskStream = image.smaskStream));
                                          _buffer = [];
                                          if (!smaskStream) {
                                             _context52.n = 13;
                                             break;
                                          }
                                          smaskRef = xref.getNewTemporaryRef();
                                          _context52.n = 12;
                                          return writeObject(
                                             smaskRef,
                                             smaskStream,
                                             _buffer,
                                             xref,
                                          );
                                       case 12:
                                          dependencies.push({
                                             ref: smaskRef,
                                             data: _buffer.join(""),
                                          });
                                          imageStream.dict.set("SMask", smaskRef);
                                          _buffer.length = 0;
                                       case 13:
                                          imageRef = image.imageRef =
                                             xref.getNewTemporaryRef();
                                          _context52.n = 14;
                                          return writeObject(
                                             imageRef,
                                             imageStream,
                                             _buffer,
                                             xref,
                                          );
                                       case 14:
                                          dependencies.push({
                                             ref: imageRef,
                                             data: _buffer.join(""),
                                          });
                                          image.imageStream = image.smaskStream = null;
                                       case 15:
                                          promises.push(
                                             StampAnnotation.createNewAnnotation(
                                                xref,
                                                annotation,
                                                dependencies,
                                                { image: image },
                                             ),
                                          );
                                          return _context52.a(3, 16);
                                       case 16:
                                          _context52.n = 2;
                                          break;
                                       case 17:
                                          _context52.n = 19;
                                          break;
                                       case 18:
                                          _context52.p = 18;
                                          _t46 = _context52.v;
                                          _iterator188.e(_t46);
                                       case 19:
                                          _context52.p = 19;
                                          _iterator188.f();
                                          return _context52.f(19);
                                       case 20:
                                          _context52.n = 21;
                                          return Promise.all(promises);
                                       case 21:
                                          _t47 = _context52.v;
                                          _t48 = dependencies;
                                          return _context52.a(2, {
                                             annotations: _t47,
                                             dependencies: _t48,
                                          });
                                    }
                              },
                              _callee38,
                              null,
                              [[1, 18, 19, 20]],
                           );
                        },
                     ),
                  );
                  function saveNewAnnotations(_x93, _x94, _x95, _x96) {
                     return _saveNewAnnotations.apply(this, arguments);
                  }
                  return saveNewAnnotations;
               })(),
            },
            {
               key: "printNewAnnotations",
               value: (function () {
                  var _printNewAnnotations = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee39(
                           annotationGlobals,
                           evaluator,
                           task,
                           annotations,
                           imagePromises,
                        ) {
                           var options,
                              xref,
                              promises,
                              _iterator189,
                              _step189,
                              annotation,
                              image,
                              imageStream,
                              smaskStream,
                              _t49,
                              _t50;
                           return _regenerator().w(
                              function (_context53) {
                                 while (1)
                                    switch ((_context53.p = _context53.n)) {
                                       case 0:
                                          if (annotations) {
                                             _context53.n = 1;
                                             break;
                                          }
                                          return _context53.a(2, null);
                                       case 1:
                                          ((options = evaluator.options),
                                             (xref = evaluator.xref));
                                          promises = [];
                                          _iterator189 =
                                             _createForOfIteratorHelper(annotations);
                                          _context53.p = 2;
                                          _iterator189.s();
                                       case 3:
                                          if ((_step189 = _iterator189.n()).done) {
                                             _context53.n = 12;
                                             break;
                                          }
                                          annotation = _step189.value;
                                          if (!annotation.deleted) {
                                             _context53.n = 4;
                                             break;
                                          }
                                          return _context53.a(3, 11);
                                       case 4:
                                          _t49 = annotation.annotationType;
                                          _context53.n =
                                             _t49 === AnnotationEditorType.FREETEXT
                                                ? 5
                                                : _t49 === AnnotationEditorType.HIGHLIGHT
                                                   ? 6
                                                   : _t49 === AnnotationEditorType.INK
                                                      ? 7
                                                      : _t49 === AnnotationEditorType.STAMP
                                                         ? 8
                                                         : 11;
                                          break;
                                       case 5:
                                          promises.push(
                                             FreeTextAnnotation.createNewPrintAnnotation(
                                                annotationGlobals,
                                                xref,
                                                annotation,
                                                {
                                                   evaluator: evaluator,
                                                   task: task,
                                                   evaluatorOptions: options,
                                                },
                                             ),
                                          );
                                          return _context53.a(3, 11);
                                       case 6:
                                          if (annotation.quadPoints) {
                                             promises.push(
                                                HighlightAnnotation.createNewPrintAnnotation(
                                                   annotationGlobals,
                                                   xref,
                                                   annotation,
                                                   { evaluatorOptions: options },
                                                ),
                                             );
                                          } else {
                                             promises.push(
                                                InkAnnotation.createNewPrintAnnotation(
                                                   annotationGlobals,
                                                   xref,
                                                   annotation,
                                                   { evaluatorOptions: options },
                                                ),
                                             );
                                          }
                                          return _context53.a(3, 11);
                                       case 7:
                                          promises.push(
                                             InkAnnotation.createNewPrintAnnotation(
                                                annotationGlobals,
                                                xref,
                                                annotation,
                                                { evaluatorOptions: options },
                                             ),
                                          );
                                          return _context53.a(3, 11);
                                       case 8:
                                          if (options.isOffscreenCanvasSupported) {
                                             _context53.n = 9;
                                             break;
                                          }
                                          return _context53.a(3, 11);
                                       case 9:
                                          _context53.n = 10;
                                          return imagePromises.get(annotation.bitmapId);
                                       case 10:
                                          image = _context53.v;
                                          if (image.imageStream) {
                                             ((imageStream = image.imageStream),
                                                (smaskStream = image.smaskStream));
                                             if (smaskStream) {
                                                imageStream.dict.set("SMask", smaskStream);
                                             }
                                             image.imageRef = new JpegStream(
                                                imageStream,
                                                imageStream.length,
                                             );
                                             image.imageStream = image.smaskStream = null;
                                          }
                                          promises.push(
                                             StampAnnotation.createNewPrintAnnotation(
                                                annotationGlobals,
                                                xref,
                                                annotation,
                                                { image: image, evaluatorOptions: options },
                                             ),
                                          );
                                          return _context53.a(3, 11);
                                       case 11:
                                          _context53.n = 3;
                                          break;
                                       case 12:
                                          _context53.n = 14;
                                          break;
                                       case 13:
                                          _context53.p = 13;
                                          _t50 = _context53.v;
                                          _iterator189.e(_t50);
                                       case 14:
                                          _context53.p = 14;
                                          _iterator189.f();
                                          return _context53.f(14);
                                       case 15:
                                          return _context53.a(2, Promise.all(promises));
                                    }
                              },
                              _callee39,
                              null,
                              [[2, 13, 14, 15]],
                           );
                        },
                     ),
                  );
                  function printNewAnnotations(_x97, _x98, _x99, _x100, _x101) {
                     return _printNewAnnotations.apply(this, arguments);
                  }
                  return printNewAnnotations;
               })(),
            },
         ]);
      })();
      function getRgbColor(color) {
         var defaultColor =
            arguments.length > 1 && arguments[1] !== undefined
               ? arguments[1]
               : new Uint8ClampedArray(3);
         if (!Array.isArray(color)) {
            return defaultColor;
         }
         var rgbColor = defaultColor || new Uint8ClampedArray(3);
         switch (color.length) {
            case 0:
               return null;
            case 1:
               ColorSpace.singletons.gray.getRgbItem(color, 0, rgbColor, 0);
               return rgbColor;
            case 3:
               ColorSpace.singletons.rgb.getRgbItem(color, 0, rgbColor, 0);
               return rgbColor;
            case 4:
               ColorSpace.singletons.cmyk.getRgbItem(color, 0, rgbColor, 0);
               return rgbColor;
            default:
               return defaultColor;
         }
      }
      function getPdfColorArray(color) {
         return Array.from(color, function (c) {
            return c / 255;
         });
      }
      function getQuadPoints(dict, rect) {
         var quadPoints = dict.getArray("QuadPoints");
         if (
            !Array.isArray(quadPoints) ||
            quadPoints.length === 0 ||
            quadPoints.length % 8 > 0
         ) {
            return null;
         }
         var quadPointsLists = [];
         for (var i = 0, ii = quadPoints.length / 8; i < ii; i++) {
            var minX = Infinity,
               maxX = -Infinity,
               minY = Infinity,
               maxY = -Infinity;
            for (var j = i * 8, jj = i * 8 + 8; j < jj; j += 2) {
               var x = quadPoints[j];
               var y = quadPoints[j + 1];
               minX = Math.min(x, minX);
               maxX = Math.max(x, maxX);
               minY = Math.min(y, minY);
               maxY = Math.max(y, maxY);
            }
            if (
               rect !== null &&
               (minX < rect[0] || maxX > rect[2] || minY < rect[1] || maxY > rect[3])
            ) {
               return null;
            }
            quadPointsLists.push([
               { x: minX, y: maxY },
               { x: maxX, y: maxY },
               { x: minX, y: minY },
               { x: maxX, y: minY },
            ]);
         }
         return quadPointsLists;
      }
      function getTransformMatrix(rect, bbox, matrix) {
         var _Util$getAxialAligned = Util.getAxialAlignedBoundingBox(bbox, matrix),
            _Util$getAxialAligned2 = _slicedToArray(_Util$getAxialAligned, 4),
            minX = _Util$getAxialAligned2[0],
            minY = _Util$getAxialAligned2[1],
            maxX = _Util$getAxialAligned2[2],
            maxY = _Util$getAxialAligned2[3];
         if (minX === maxX || minY === maxY) {
            return [1, 0, 0, 1, rect[0], rect[1]];
         }
         var xRatio = (rect[2] - rect[0]) / (maxX - minX);
         var yRatio = (rect[3] - rect[1]) / (maxY - minY);
         return [
            xRatio,
            0,
            0,
            yRatio,
            rect[0] - minX * xRatio,
            rect[1] - minY * yRatio,
         ];
      }
      var Annotation = /*#__PURE__*/ (function () {
         function Annotation(params) {
            _classCallCheck(this, Annotation);
            var dict = params.dict,
               xref = params.xref,
               annotationGlobals = params.annotationGlobals;
            this.setTitle(dict.get("T"));
            this.setContents(dict.get("Contents"));
            this.setModificationDate(dict.get("M"));
            this.setFlags(dict.get("F"));
            this.setRectangle(dict.getArray("Rect"));
            this.setColor(dict.getArray("C"));
            this.setBorderStyle(dict);
            this.setAppearance(dict);
            this.setOptionalContent(dict);
            var MK = dict.get("MK");
            this.setBorderAndBackgroundColors(MK);
            this.setRotation(MK, dict);
            this.ref = params.ref instanceof Ref ? params.ref : null;
            this._streams = [];
            if (this.appearance) {
               this._streams.push(this.appearance);
            }
            var isLocked = !!(this.flags & AnnotationFlag.LOCKED);
            var isContentLocked = !!(this.flags & AnnotationFlag.LOCKEDCONTENTS);
            if (annotationGlobals.structTreeRoot) {
               var structParent = dict.get("StructParent");
               structParent =
                  Number.isInteger(structParent) && structParent >= 0
                     ? structParent
                     : -1;
               annotationGlobals.structTreeRoot.addAnnotationIdToPage(
                  params.pageRef,
                  structParent,
               );
            }
            this.data = {
               annotationFlags: this.flags,
               borderStyle: this.borderStyle,
               color: this.color,
               backgroundColor: this.backgroundColor,
               borderColor: this.borderColor,
               rotation: this.rotation,
               contentsObj: this._contents,
               hasAppearance: !!this.appearance,
               id: params.id,
               modificationDate: this.modificationDate,
               rect: this.rectangle,
               subtype: params.subtype,
               hasOwnCanvas: false,
               noRotate: !!(this.flags & AnnotationFlag.NOROTATE),
               noHTML: isLocked && isContentLocked,
            };
            if (params.collectFields) {
               var kids = dict.get("Kids");
               if (Array.isArray(kids)) {
                  var kidIds = [];
                  var _iterator190 = _createForOfIteratorHelper(kids),
                     _step190;
                  try {
                     for (_iterator190.s(); !(_step190 = _iterator190.n()).done; ) {
                        var kid = _step190.value;
                        if (kid instanceof Ref) {
                           kidIds.push(kid.toString());
                        }
                     }
                  } catch (err) {
                     _iterator190.e(err);
                  } finally {
                     _iterator190.f();
                  }
                  if (kidIds.length !== 0) {
                     this.data.kidIds = kidIds;
                  }
               }
               this.data.actions = collectActions(
                  xref,
                  dict,
                  AnnotationActionEventType,
               );
               this.data.fieldName = this._constructFieldName(dict);
               this.data.pageIndex = params.pageIndex;
            }
            this._isOffscreenCanvasSupported =
               params.evaluatorOptions.isOffscreenCanvasSupported;
            this._fallbackFontDict = null;
            this._needAppearances = false;
         }
         return _createClass(Annotation, [
            {
               key: "_hasFlag",
               value: function _hasFlag(flags, flag) {
                  return !!(flags & flag);
               },
            },
            {
               key: "_isViewable",
               value: function _isViewable(flags) {
                  return (
                     !this._hasFlag(flags, AnnotationFlag.INVISIBLE) &&
                     !this._hasFlag(flags, AnnotationFlag.NOVIEW)
                  );
               },
            },
            {
               key: "_isPrintable",
               value: function _isPrintable(flags) {
                  return (
                     this._hasFlag(flags, AnnotationFlag.PRINT) &&
                     !this._hasFlag(flags, AnnotationFlag.HIDDEN) &&
                     !this._hasFlag(flags, AnnotationFlag.INVISIBLE)
                  );
               },
            },
            {
               key: "mustBeViewed",
               value: function mustBeViewed(annotationStorage, _renderForms) {
                  var _annotationStorage$ge;
                  var noView =
                     annotationStorage === null ||
                     annotationStorage === void 0 ||
                     (_annotationStorage$ge = annotationStorage.get(this.data.id)) ===
                     null ||
                     _annotationStorage$ge === void 0
                        ? void 0
                        : _annotationStorage$ge.noView;
                  if (noView !== undefined) {
                     return !noView;
                  }
                  return (
                     this.viewable && !this._hasFlag(this.flags, AnnotationFlag.HIDDEN)
                  );
               },
            },
            {
               key: "mustBePrinted",
               value: function mustBePrinted(annotationStorage) {
                  var _annotationStorage$ge2;
                  var noPrint =
                     annotationStorage === null ||
                     annotationStorage === void 0 ||
                     (_annotationStorage$ge2 = annotationStorage.get(this.data.id)) ===
                     null ||
                     _annotationStorage$ge2 === void 0
                        ? void 0
                        : _annotationStorage$ge2.noPrint;
                  if (noPrint !== undefined) {
                     return !noPrint;
                  }
                  return this.printable;
               },
            },
            {
               key: "viewable",
               get: function get() {
                  if (this.data.quadPoints === null) {
                     return false;
                  }
                  if (this.flags === 0) {
                     return true;
                  }
                  return this._isViewable(this.flags);
               },
            },
            {
               key: "printable",
               get: function get() {
                  if (this.data.quadPoints === null) {
                     return false;
                  }
                  if (this.flags === 0) {
                     return false;
                  }
                  return this._isPrintable(this.flags);
               },
            },
            {
               key: "_parseStringHelper",
               value: function _parseStringHelper(data) {
                  var str = typeof data === "string" ? stringToPDFString(data) : "";
                  var dir = str && bidi(str).dir === "rtl" ? "rtl" : "ltr";
                  return { str: str, dir: dir };
               },
            },
            {
               key: "setDefaultAppearance",
               value: function setDefaultAppearance(params) {
                  var dict = params.dict,
                     annotationGlobals = params.annotationGlobals;
                  var defaultAppearance =
                     getInheritableProperty({ dict: dict, key: "DA" }) ||
                     annotationGlobals.acroForm.get("DA");
                  this._defaultAppearance =
                     typeof defaultAppearance === "string" ? defaultAppearance : "";
                  this.data.defaultAppearanceData = parseDefaultAppearance(
                     this._defaultAppearance,
                  );
               },
            },
            {
               key: "setTitle",
               value: function setTitle(title) {
                  this._title = this._parseStringHelper(title);
               },
            },
            {
               key: "setContents",
               value: function setContents(contents) {
                  this._contents = this._parseStringHelper(contents);
               },
            },
            {
               key: "setModificationDate",
               value: function setModificationDate(modificationDate) {
                  this.modificationDate =
                     typeof modificationDate === "string" ? modificationDate : null;
               },
            },
            {
               key: "setFlags",
               value: function setFlags(flags) {
                  this.flags = Number.isInteger(flags) && flags > 0 ? flags : 0;
                  if (
                     this.flags & AnnotationFlag.INVISIBLE &&
                     this.constructor.name !== "Annotation"
                  ) {
                     this.flags ^= AnnotationFlag.INVISIBLE;
                  }
               },
            },
            {
               key: "hasFlag",
               value: function hasFlag(flag) {
                  return this._hasFlag(this.flags, flag);
               },
            },
            {
               key: "setRectangle",
               value: function setRectangle(rectangle) {
                  this.rectangle =
                     Array.isArray(rectangle) && rectangle.length === 4
                        ? Util.normalizeRect(rectangle)
                        : [0, 0, 0, 0];
               },
            },
            {
               key: "setColor",
               value: function setColor(color) {
                  this.color = getRgbColor(color);
               },
            },
            {
               key: "setLineEndings",
               value: function setLineEndings(lineEndings) {
                  this.lineEndings = ["None", "None"];
                  if (Array.isArray(lineEndings) && lineEndings.length === 2) {
                     for (var i = 0; i < 2; i++) {
                        var obj = lineEndings[i];
                        if (obj instanceof Name) {
                           switch (obj.name) {
                              case "None":
                                 continue;
                              case "Square":
                              case "Circle":
                              case "Diamond":
                              case "OpenArrow":
                              case "ClosedArrow":
                              case "Butt":
                              case "ROpenArrow":
                              case "RClosedArrow":
                              case "Slash":
                                 this.lineEndings[i] = obj.name;
                                 continue;
                           }
                        }
                        warn("Ignoring invalid lineEnding: ".concat(obj));
                     }
                  }
               },
            },
            {
               key: "setRotation",
               value: function setRotation(mk, dict) {
                  this.rotation = 0;
                  var angle =
                     mk instanceof Dict ? mk.get("R") || 0 : dict.get("Rotate") || 0;
                  if (Number.isInteger(angle) && angle !== 0) {
                     angle %= 360;
                     if (angle < 0) {
                        angle += 360;
                     }
                     if (angle % 90 === 0) {
                        this.rotation = angle;
                     }
                  }
               },
            },
            {
               key: "setBorderAndBackgroundColors",
               value: function setBorderAndBackgroundColors(mk) {
                  if (mk instanceof Dict) {
                     this.borderColor = getRgbColor(mk.getArray("BC"), null);
                     this.backgroundColor = getRgbColor(mk.getArray("BG"), null);
                  } else {
                     this.borderColor = this.backgroundColor = null;
                  }
               },
            },
            {
               key: "setBorderStyle",
               value: function setBorderStyle(borderStyle) {
                  this.borderStyle = new AnnotationBorderStyle();
                  if (!(borderStyle instanceof Dict)) {
                     return;
                  }
                  if (borderStyle.has("BS")) {
                     var dict = borderStyle.get("BS");
                     if (dict instanceof Dict) {
                        var dictType = dict.get("Type");
                        if (!dictType || isName(dictType, "Border")) {
                           this.borderStyle.setWidth(dict.get("W"), this.rectangle);
                           this.borderStyle.setStyle(dict.get("S"));
                           this.borderStyle.setDashArray(dict.getArray("D"));
                        }
                     }
                  } else if (borderStyle.has("Border")) {
                     var array = borderStyle.getArray("Border");
                     if (Array.isArray(array) && array.length >= 3) {
                        this.borderStyle.setHorizontalCornerRadius(array[0]);
                        this.borderStyle.setVerticalCornerRadius(array[1]);
                        this.borderStyle.setWidth(array[2], this.rectangle);
                        if (array.length === 4) {
                           this.borderStyle.setDashArray(array[3], true);
                        }
                     }
                  } else {
                     this.borderStyle.setWidth(0);
                  }
               },
            },
            {
               key: "setAppearance",
               value: function setAppearance(dict) {
                  this.appearance = null;
                  var appearanceStates = dict.get("AP");
                  if (!(appearanceStates instanceof Dict)) {
                     return;
                  }
                  var normalAppearanceState = appearanceStates.get("N");
                  if (normalAppearanceState instanceof BaseStream) {
                     this.appearance = normalAppearanceState;
                     return;
                  }
                  if (!(normalAppearanceState instanceof Dict)) {
                     return;
                  }
                  var as = dict.get("AS");
                  if (!(as instanceof Name) || !normalAppearanceState.has(as.name)) {
                     return;
                  }
                  var appearance = normalAppearanceState.get(as.name);
                  if (appearance instanceof BaseStream) {
                     this.appearance = appearance;
                  }
               },
            },
            {
               key: "setOptionalContent",
               value: function setOptionalContent(dict) {
                  this.oc = null;
                  var oc = dict.get("OC");
                  if (oc instanceof Name) {
                     warn(
                        "setOptionalContent: Support for /Name-entry is not implemented.",
                     );
                  } else if (oc instanceof Dict) {
                     this.oc = oc;
                  }
               },
            },
            {
               key: "loadResources",
               value: function loadResources(keys, appearance) {
                  return appearance.dict
                     .getAsync("Resources")
                     .then(function (resources) {
                        if (!resources) {
                           return undefined;
                        }
                        var objectLoader = new ObjectLoader(
                           resources,
                           keys,
                           resources.xref,
                        );
                        return objectLoader.load().then(function () {
                           return resources;
                        });
                     });
               },
            },
            {
               key: "getOperatorList",
               value: (function () {
                  var _getOperatorList = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee40(
                           evaluator,
                           task,
                           intent,
                           renderForms,
                           annotationStorage,
                        ) {
                           var _this$data2,
                              hasOwnCanvas,
                              id,
                              rect,
                              appearance,
                              isUsingOwnCanvas,
                              appearanceDict,
                              resources,
                              bbox,
                              matrix,
                              transform,
                              opList,
                              optionalContent;
                           return _regenerator().w(
                              function (_context54) {
                                 while (1)
                                    switch (_context54.n) {
                                       case 0:
                                          ((_this$data2 = this.data),
                                             (hasOwnCanvas = _this$data2.hasOwnCanvas),
                                             (id = _this$data2.id),
                                             (rect = _this$data2.rect));
                                          appearance = this.appearance;
                                          isUsingOwnCanvas = !!(
                                             hasOwnCanvas &&
                                             intent & RenderingIntentFlag.DISPLAY
                                          );
                                          if (
                                             !(
                                                isUsingOwnCanvas &&
                                                (rect[0] === rect[2] || rect[1] === rect[3])
                                             )
                                          ) {
                                             _context54.n = 1;
                                             break;
                                          }
                                          this.data.hasOwnCanvas = false;
                                          return _context54.a(2, {
                                             opList: new OperatorList(),
                                             separateForm: false,
                                             separateCanvas: false,
                                          });
                                       case 1:
                                          if (appearance) {
                                             _context54.n = 3;
                                             break;
                                          }
                                          if (isUsingOwnCanvas) {
                                             _context54.n = 2;
                                             break;
                                          }
                                          return _context54.a(2, {
                                             opList: new OperatorList(),
                                             separateForm: false,
                                             separateCanvas: false,
                                          });
                                       case 2:
                                          appearance = new StringStream("");
                                          appearance.dict = new Dict();
                                       case 3:
                                          appearanceDict = appearance.dict;
                                          _context54.n = 4;
                                          return this.loadResources(
                                             [
                                                "ExtGState",
                                                "ColorSpace",
                                                "Pattern",
                                                "Shading",
                                                "XObject",
                                                "Font",
                                             ],
                                             appearance,
                                          );
                                       case 4:
                                          resources = _context54.v;
                                          bbox = appearanceDict.getArray("BBox") || [
                                             0, 0, 1, 1,
                                          ];
                                          matrix = appearanceDict.getArray("Matrix") || [
                                             1, 0, 0, 1, 0, 0,
                                          ];
                                          transform = getTransformMatrix(rect, bbox, matrix);
                                          opList = new OperatorList();
                                          if (!this.oc) {
                                             _context54.n = 6;
                                             break;
                                          }
                                          _context54.n = 5;
                                          return evaluator.parseMarkedContentProps(
                                             this.oc,
                                             null,
                                          );
                                       case 5:
                                          optionalContent = _context54.v;
                                       case 6:
                                          if (optionalContent !== undefined) {
                                             opList.addOp(OPS.beginMarkedContentProps, [
                                                "OC",
                                                optionalContent,
                                             ]);
                                          }
                                          opList.addOp(OPS.beginAnnotation, [
                                             id,
                                             rect,
                                             transform,
                                             matrix,
                                             isUsingOwnCanvas,
                                          ]);
                                          _context54.n = 7;
                                          return evaluator.getOperatorList({
                                             stream: appearance,
                                             task: task,
                                             resources: resources,
                                             operatorList: opList,
                                             fallbackFontDict: this._fallbackFontDict,
                                          });
                                       case 7:
                                          opList.addOp(OPS.endAnnotation, []);
                                          if (optionalContent !== undefined) {
                                             opList.addOp(OPS.endMarkedContent, []);
                                          }
                                          this.reset();
                                          return _context54.a(2, {
                                             opList: opList,
                                             separateForm: false,
                                             separateCanvas: isUsingOwnCanvas,
                                          });
                                    }
                              },
                              _callee40,
                              this,
                           );
                        },
                     ),
                  );
                  function getOperatorList(_x102, _x103, _x104, _x105, _x106) {
                     return _getOperatorList.apply(this, arguments);
                  }
                  return getOperatorList;
               })(),
            },
            {
               key: "save",
               value: (function () {
                  var _save = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee41(evaluator, task, annotationStorage) {
                           return _regenerator().w(function (_context55) {
                              while (1)
                                 switch (_context55.n) {
                                    case 0:
                                       return _context55.a(2, null);
                                 }
                           }, _callee41);
                        },
                     ),
                  );
                  function save(_x107, _x108, _x109) {
                     return _save.apply(this, arguments);
                  }
                  return save;
               })(),
            },
            {
               key: "hasTextContent",
               get: function get() {
                  return false;
               },
            },
            {
               key: "extractTextContent",
               value: (function () {
                  var _extractTextContent = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee42(evaluator, task, viewBox) {
                           var resources,
                              text,
                              buffer,
                              firstPosition,
                              sink,
                              appearanceDict;
                           return _regenerator().w(
                              function (_context56) {
                                 while (1)
                                    switch (_context56.n) {
                                       case 0:
                                          if (this.appearance) {
                                             _context56.n = 1;
                                             break;
                                          }
                                          return _context56.a(2);
                                       case 1:
                                          _context56.n = 2;
                                          return this.loadResources(
                                             ["ExtGState", "Font", "Properties", "XObject"],
                                             this.appearance,
                                          );
                                       case 2:
                                          resources = _context56.v;
                                          text = [];
                                          buffer = [];
                                          firstPosition = null;
                                          sink = {
                                             desiredSize: Math.Infinity,
                                             ready: true,
                                             enqueue: function enqueue(chunk, size) {
                                                var _iterator191 = _createForOfIteratorHelper(
                                                      chunk.items,
                                                   ),
                                                   _step191;
                                                try {
                                                   for (
                                                      _iterator191.s();
                                                      !(_step191 = _iterator191.n()).done;

                                                   ) {
                                                      var item = _step191.value;
                                                      if (item.str === undefined) {
                                                         continue;
                                                      }
                                                      firstPosition ||
                                                      (firstPosition =
                                                         item.transform.slice(-2));
                                                      buffer.push(item.str);
                                                      if (item.hasEOL) {
                                                         text.push(buffer.join("").trimEnd());
                                                         buffer.length = 0;
                                                      }
                                                   }
                                                } catch (err) {
                                                   _iterator191.e(err);
                                                } finally {
                                                   _iterator191.f();
                                                }
                                             },
                                          };
                                          _context56.n = 3;
                                          return evaluator.getTextContent({
                                             stream: this.appearance,
                                             task: task,
                                             resources: resources,
                                             includeMarkedContent: true,
                                             keepWhiteSpace: true,
                                             sink: sink,
                                             viewBox: viewBox,
                                          });
                                       case 3:
                                          this.reset();
                                          if (buffer.length) {
                                             text.push(buffer.join("").trimEnd());
                                          }
                                          if (text.length > 1 || text[0]) {
                                             appearanceDict = this.appearance.dict;
                                             this.data.textPosition = this._transformPoint(
                                                firstPosition,
                                                appearanceDict.getArray("BBox"),
                                                appearanceDict.getArray("Matrix"),
                                             );
                                             this.data.textContent = text;
                                          }
                                       case 4:
                                          return _context56.a(2);
                                    }
                              },
                              _callee42,
                              this,
                           );
                        },
                     ),
                  );
                  function extractTextContent(_x110, _x111, _x112) {
                     return _extractTextContent.apply(this, arguments);
                  }
                  return extractTextContent;
               })(),
            },
            {
               key: "_transformPoint",
               value: function _transformPoint(coords, bbox, matrix) {
                  var rect = this.data.rect;
                  bbox || (bbox = [0, 0, 1, 1]);
                  matrix || (matrix = [1, 0, 0, 1, 0, 0]);
                  var transform = getTransformMatrix(rect, bbox, matrix);
                  transform[4] -= rect[0];
                  transform[5] -= rect[1];
                  coords = Util.applyTransform(coords, transform);
                  return Util.applyTransform(coords, matrix);
               },
            },
            {
               key: "getFieldObject",
               value: function getFieldObject() {
                  if (this.data.kidIds) {
                     return {
                        id: this.data.id,
                        actions: this.data.actions,
                        name: this.data.fieldName,
                        strokeColor: this.data.borderColor,
                        fillColor: this.data.backgroundColor,
                        type: "",
                        kidIds: this.data.kidIds,
                        page: this.data.pageIndex,
                        rotation: this.rotation,
                     };
                  }
                  return null;
               },
            },
            {
               key: "reset",
               value: function reset() {
                  var _iterator192 = _createForOfIteratorHelper(this._streams),
                     _step192;
                  try {
                     for (_iterator192.s(); !(_step192 = _iterator192.n()).done; ) {
                        var stream = _step192.value;
                        stream.reset();
                     }
                  } catch (err) {
                     _iterator192.e(err);
                  } finally {
                     _iterator192.f();
                  }
               },
            },
            {
               key: "_constructFieldName",
               value: function _constructFieldName(dict) {
                  if (!dict.has("T") && !dict.has("Parent")) {
                     warn("Unknown field name, falling back to empty field name.");
                     return "";
                  }
                  if (!dict.has("Parent")) {
                     return stringToPDFString(dict.get("T"));
                  }
                  var fieldName = [];
                  if (dict.has("T")) {
                     fieldName.unshift(stringToPDFString(dict.get("T")));
                  }
                  var loopDict = dict;
                  var visited = new RefSet();
                  if (dict.objId) {
                     visited.put(dict.objId);
                  }
                  while (loopDict.has("Parent")) {
                     loopDict = loopDict.get("Parent");
                     if (
                        !(loopDict instanceof Dict) ||
                        (loopDict.objId && visited.has(loopDict.objId))
                     ) {
                        break;
                     }
                     if (loopDict.objId) {
                        visited.put(loopDict.objId);
                     }
                     if (loopDict.has("T")) {
                        fieldName.unshift(stringToPDFString(loopDict.get("T")));
                     }
                  }
                  return fieldName.join(".");
               },
            },
         ]);
      })();
      var AnnotationBorderStyle = /*#__PURE__*/ (function () {
         function AnnotationBorderStyle() {
            _classCallCheck(this, AnnotationBorderStyle);
            this.width = 1;
            this.style = AnnotationBorderStyleType.SOLID;
            this.dashArray = [3];
            this.horizontalCornerRadius = 0;
            this.verticalCornerRadius = 0;
         }
         return _createClass(AnnotationBorderStyle, [
            {
               key: "setWidth",
               value: function setWidth(width) {
                  var rect =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : [0, 0, 0, 0];
                  if (width instanceof Name) {
                     this.width = 0;
                     return;
                  }
                  if (typeof width === "number") {
                     if (width > 0) {
                        var maxWidth = (rect[2] - rect[0]) / 2;
                        var maxHeight = (rect[3] - rect[1]) / 2;
                        if (
                           maxWidth > 0 &&
                           maxHeight > 0 &&
                           (width > maxWidth || width > maxHeight)
                        ) {
                           warn(
                              "AnnotationBorderStyle.setWidth - ignoring width: ".concat(
                                 width,
                              ),
                           );
                           width = 1;
                        }
                     }
                     this.width = width;
                  }
               },
            },
            {
               key: "setStyle",
               value: function setStyle(style) {
                  if (!(style instanceof Name)) {
                     return;
                  }
                  switch (style.name) {
                     case "S":
                        this.style = AnnotationBorderStyleType.SOLID;
                        break;
                     case "D":
                        this.style = AnnotationBorderStyleType.DASHED;
                        break;
                     case "B":
                        this.style = AnnotationBorderStyleType.BEVELED;
                        break;
                     case "I":
                        this.style = AnnotationBorderStyleType.INSET;
                        break;
                     case "U":
                        this.style = AnnotationBorderStyleType.UNDERLINE;
                        break;
                     default:
                        break;
                  }
               },
            },
            {
               key: "setDashArray",
               value: function setDashArray(dashArray) {
                  var forceStyle =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : false;
                  if (Array.isArray(dashArray)) {
                     var isValid = true;
                     var allZeros = true;
                     var _iterator193 = _createForOfIteratorHelper(dashArray),
                        _step193;
                     try {
                        for (_iterator193.s(); !(_step193 = _iterator193.n()).done; ) {
                           var element = _step193.value;
                           var validNumber = +element >= 0;
                           if (!validNumber) {
                              isValid = false;
                              break;
                           } else if (element > 0) {
                              allZeros = false;
                           }
                        }
                     } catch (err) {
                        _iterator193.e(err);
                     } finally {
                        _iterator193.f();
                     }
                     if (dashArray.length === 0 || (isValid && !allZeros)) {
                        this.dashArray = dashArray;
                        if (forceStyle) {
                           this.setStyle(Name.get("D"));
                        }
                     } else {
                        this.width = 0;
                     }
                  } else if (dashArray) {
                     this.width = 0;
                  }
               },
            },
            {
               key: "setHorizontalCornerRadius",
               value: function setHorizontalCornerRadius(radius) {
                  if (Number.isInteger(radius)) {
                     this.horizontalCornerRadius = radius;
                  }
               },
            },
            {
               key: "setVerticalCornerRadius",
               value: function setVerticalCornerRadius(radius) {
                  if (Number.isInteger(radius)) {
                     this.verticalCornerRadius = radius;
                  }
               },
            },
         ]);
      })();
      var MarkupAnnotation = /*#__PURE__*/ (function (_Annotation) {
         function MarkupAnnotation(params) {
            var _this266;
            _classCallCheck(this, MarkupAnnotation);
            _this266 = _callSuper(this, MarkupAnnotation, [params]);
            var dict = params.dict;
            if (dict.has("IRT")) {
               var rawIRT = dict.getRaw("IRT");
               _this266.data.inReplyTo =
                  rawIRT instanceof Ref ? rawIRT.toString() : null;
               var rt = dict.get("RT");
               _this266.data.replyType =
                  rt instanceof Name ? rt.name : AnnotationReplyType.REPLY;
            }
            var popupRef = null;
            if (_this266.data.replyType === AnnotationReplyType.GROUP) {
               var parent = dict.get("IRT");
               _this266.setTitle(parent.get("T"));
               _this266.data.titleObj = _this266._title;
               _this266.setContents(parent.get("Contents"));
               _this266.data.contentsObj = _this266._contents;
               if (!parent.has("CreationDate")) {
                  _this266.data.creationDate = null;
               } else {
                  _this266.setCreationDate(parent.get("CreationDate"));
                  _this266.data.creationDate = _this266.creationDate;
               }
               if (!parent.has("M")) {
                  _this266.data.modificationDate = null;
               } else {
                  _this266.setModificationDate(parent.get("M"));
                  _this266.data.modificationDate = _this266.modificationDate;
               }
               popupRef = parent.getRaw("Popup");
               if (!parent.has("C")) {
                  _this266.data.color = null;
               } else {
                  _this266.setColor(parent.getArray("C"));
                  _this266.data.color = _this266.color;
               }
            } else {
               _this266.data.titleObj = _this266._title;
               _this266.setCreationDate(dict.get("CreationDate"));
               _this266.data.creationDate = _this266.creationDate;
               popupRef = dict.getRaw("Popup");
               if (!dict.has("C")) {
                  _this266.data.color = null;
               }
            }
            _this266.data.popupRef =
               popupRef instanceof Ref ? popupRef.toString() : null;
            if (dict.has("RC")) {
               _this266.data.richText = XFAFactory.getRichTextAsHtml(dict.get("RC"));
            }
            return _this266;
         }
         _inherits(MarkupAnnotation, _Annotation);
         return _createClass(
            MarkupAnnotation,
            [
               {
                  key: "setCreationDate",
                  value: function setCreationDate(creationDate) {
                     this.creationDate =
                        typeof creationDate === "string" ? creationDate : null;
                  },
               },
               {
                  key: "_setDefaultAppearance",
                  value: function _setDefaultAppearance(_ref95) {
                     var xref = _ref95.xref,
                        extra = _ref95.extra,
                        strokeColor = _ref95.strokeColor,
                        fillColor = _ref95.fillColor,
                        blendMode = _ref95.blendMode,
                        strokeAlpha = _ref95.strokeAlpha,
                        fillAlpha = _ref95.fillAlpha,
                        pointsCallback = _ref95.pointsCallback;
                     var minX = Number.MAX_VALUE;
                     var minY = Number.MAX_VALUE;
                     var maxX = Number.MIN_VALUE;
                     var maxY = Number.MIN_VALUE;
                     var buffer = ["q"];
                     if (extra) {
                        buffer.push(extra);
                     }
                     if (strokeColor) {
                        buffer.push(
                           ""
                              .concat(strokeColor[0], " ")
                              .concat(strokeColor[1], " ")
                              .concat(strokeColor[2], " RG"),
                        );
                     }
                     if (fillColor) {
                        buffer.push(
                           ""
                              .concat(fillColor[0], " ")
                              .concat(fillColor[1], " ")
                              .concat(fillColor[2], " rg"),
                        );
                     }
                     var pointsArray = this.data.quadPoints;
                     if (!pointsArray) {
                        pointsArray = [
                           [
                              { x: this.rectangle[0], y: this.rectangle[3] },
                              { x: this.rectangle[2], y: this.rectangle[3] },
                              { x: this.rectangle[0], y: this.rectangle[1] },
                              { x: this.rectangle[2], y: this.rectangle[1] },
                           ],
                        ];
                     }
                     var _iterator194 = _createForOfIteratorHelper(pointsArray),
                        _step194;
                     try {
                        for (_iterator194.s(); !(_step194 = _iterator194.n()).done; ) {
                           var points = _step194.value;
                           var _pointsCallback = pointsCallback(buffer, points),
                              _pointsCallback2 = _slicedToArray(_pointsCallback, 4),
                              mX = _pointsCallback2[0],
                              MX = _pointsCallback2[1],
                              mY = _pointsCallback2[2],
                              MY = _pointsCallback2[3];
                           minX = Math.min(minX, mX);
                           maxX = Math.max(maxX, MX);
                           minY = Math.min(minY, mY);
                           maxY = Math.max(maxY, MY);
                        }
                     } catch (err) {
                        _iterator194.e(err);
                     } finally {
                        _iterator194.f();
                     }
                     buffer.push("Q");
                     var formDict = new Dict(xref);
                     var appearanceStreamDict = new Dict(xref);
                     appearanceStreamDict.set("Subtype", Name.get("Form"));
                     var appearanceStream = new StringStream(buffer.join(" "));
                     appearanceStream.dict = appearanceStreamDict;
                     formDict.set("Fm0", appearanceStream);
                     var gsDict = new Dict(xref);
                     if (blendMode) {
                        gsDict.set("BM", Name.get(blendMode));
                     }
                     if (typeof strokeAlpha === "number") {
                        gsDict.set("CA", strokeAlpha);
                     }
                     if (typeof fillAlpha === "number") {
                        gsDict.set("ca", fillAlpha);
                     }
                     var stateDict = new Dict(xref);
                     stateDict.set("GS0", gsDict);
                     var resources = new Dict(xref);
                     resources.set("ExtGState", stateDict);
                     resources.set("XObject", formDict);
                     var appearanceDict = new Dict(xref);
                     appearanceDict.set("Resources", resources);
                     var bbox = (this.data.rect = [minX, minY, maxX, maxY]);
                     appearanceDict.set("BBox", bbox);
                     this.appearance = new StringStream("/GS0 gs /Fm0 Do");
                     this.appearance.dict = appearanceDict;
                     this._streams.push(this.appearance, appearanceStream);
                  },
               },
            ],
            [
               {
                  key: "createNewAnnotation",
                  value: (function () {
                     var _createNewAnnotation = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(
                           function _callee43(xref, annotation, dependencies, params) {
                              var annotationRef, ap, buffer, annotationDict, apRef;
                              return _regenerator().w(
                                 function (_context57) {
                                    while (1)
                                       switch (_context57.n) {
                                          case 0:
                                             annotationRef =
                                                annotation.ref ||
                                                (annotation.ref = xref.getNewTemporaryRef());
                                             _context57.n = 1;
                                             return this.createNewAppearanceStream(
                                                annotation,
                                                xref,
                                                params,
                                             );
                                          case 1:
                                             ap = _context57.v;
                                             buffer = [];
                                             if (!ap) {
                                                _context57.n = 3;
                                                break;
                                             }
                                             apRef = xref.getNewTemporaryRef();
                                             annotationDict = this.createNewDict(
                                                annotation,
                                                xref,
                                                { apRef: apRef },
                                             );
                                             _context57.n = 2;
                                             return writeObject(apRef, ap, buffer, xref);
                                          case 2:
                                             dependencies.push({
                                                ref: apRef,
                                                data: buffer.join(""),
                                             });
                                             _context57.n = 4;
                                             break;
                                          case 3:
                                             annotationDict = this.createNewDict(
                                                annotation,
                                                xref,
                                                {},
                                             );
                                          case 4:
                                             if (Number.isInteger(annotation.parentTreeId)) {
                                                annotationDict.set(
                                                   "StructParent",
                                                   annotation.parentTreeId,
                                                );
                                             }
                                             buffer.length = 0;
                                             _context57.n = 5;
                                             return writeObject(
                                                annotationRef,
                                                annotationDict,
                                                buffer,
                                                xref,
                                             );
                                          case 5:
                                             return _context57.a(2, {
                                                ref: annotationRef,
                                                data: buffer.join(""),
                                             });
                                       }
                                 },
                                 _callee43,
                                 this,
                              );
                           },
                        ),
                     );
                     function createNewAnnotation(_x113, _x114, _x115, _x116) {
                        return _createNewAnnotation.apply(this, arguments);
                     }
                     return createNewAnnotation;
                  })(),
               },
               {
                  key: "createNewPrintAnnotation",
                  value: (function () {
                     var _createNewPrintAnnotation = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(
                           function _callee44(
                              annotationGlobals,
                              xref,
                              annotation,
                              params,
                           ) {
                              var ap, annotationDict, newAnnotation;
                              return _regenerator().w(
                                 function (_context58) {
                                    while (1)
                                       switch (_context58.n) {
                                          case 0:
                                             _context58.n = 1;
                                             return this.createNewAppearanceStream(
                                                annotation,
                                                xref,
                                                params,
                                             );
                                          case 1:
                                             ap = _context58.v;
                                             annotationDict = this.createNewDict(
                                                annotation,
                                                xref,
                                                { ap: ap },
                                             );
                                             newAnnotation = new this.prototype.constructor({
                                                dict: annotationDict,
                                                xref: xref,
                                                annotationGlobals: annotationGlobals,
                                                evaluatorOptions: params.evaluatorOptions,
                                             });
                                             if (annotation.ref) {
                                                newAnnotation.ref = newAnnotation.refToReplace =
                                                   annotation.ref;
                                             }
                                             return _context58.a(2, newAnnotation);
                                       }
                                 },
                                 _callee44,
                                 this,
                              );
                           },
                        ),
                     );
                     function createNewPrintAnnotation(_x117, _x118, _x119, _x120) {
                        return _createNewPrintAnnotation.apply(this, arguments);
                     }
                     return createNewPrintAnnotation;
                  })(),
               },
            ],
         );
      })(Annotation);
      var WidgetAnnotation = /*#__PURE__*/ (function (_Annotation2) {
         function WidgetAnnotation(params) {
            var _this267$appearance;
            var _this267;
            _classCallCheck(this, WidgetAnnotation);
            _this267 = _callSuper(this, WidgetAnnotation, [params]);
            var dict = params.dict,
               xref = params.xref,
               annotationGlobals = params.annotationGlobals;
            var data = _this267.data;
            _this267._needAppearances = params.needAppearances;
            data.annotationType = AnnotationType.WIDGET;
            if (data.fieldName === undefined) {
               data.fieldName = _this267._constructFieldName(dict);
            }
            if (data.actions === undefined) {
               data.actions = collectActions(xref, dict, AnnotationActionEventType);
            }
            var fieldValue = getInheritableProperty({
               dict: dict,
               key: "V",
               getArray: true,
            });
            data.fieldValue = _this267._decodeFormValue(fieldValue);
            var defaultFieldValue = getInheritableProperty({
               dict: dict,
               key: "DV",
               getArray: true,
            });
            data.defaultFieldValue = _this267._decodeFormValue(defaultFieldValue);
            if (fieldValue === undefined && annotationGlobals.xfaDatasets) {
               var path = _this267._title.str;
               if (path) {
                  _this267._hasValueFromXFA = true;
                  data.fieldValue = fieldValue =
                     annotationGlobals.xfaDatasets.getValue(path);
               }
            }
            if (fieldValue === undefined && data.defaultFieldValue !== null) {
               data.fieldValue = data.defaultFieldValue;
            }
            data.alternativeText = stringToPDFString(dict.get("TU") || "");
            _this267.setDefaultAppearance(params);
            data.hasAppearance ||
            (data.hasAppearance =
               _this267._needAppearances &&
               data.fieldValue !== undefined &&
               data.fieldValue !== null);
            var fieldType = getInheritableProperty({ dict: dict, key: "FT" });
            data.fieldType = fieldType instanceof Name ? fieldType.name : null;
            var localResources = getInheritableProperty({ dict: dict, key: "DR" });
            var acroFormResources = annotationGlobals.acroForm.get("DR");
            var appearanceResources =
               (_this267$appearance = _this267.appearance) === null ||
               _this267$appearance === void 0
                  ? void 0
                  : _this267$appearance.dict.get("Resources");
            _this267._fieldResources = {
               localResources: localResources,
               acroFormResources: acroFormResources,
               appearanceResources: appearanceResources,
               mergedResources: Dict.merge({
                  xref: xref,
                  dictArray: [localResources, appearanceResources, acroFormResources],
                  mergeSubDicts: true,
               }),
            };
            data.fieldFlags = getInheritableProperty({ dict: dict, key: "Ff" });
            if (!Number.isInteger(data.fieldFlags) || data.fieldFlags < 0) {
               data.fieldFlags = 0;
            }
            data.readOnly = _this267.hasFieldFlag(AnnotationFieldFlag.READONLY);
            data.required = _this267.hasFieldFlag(AnnotationFieldFlag.REQUIRED);
            data.hidden =
               _this267._hasFlag(data.annotationFlags, AnnotationFlag.HIDDEN) ||
               _this267._hasFlag(data.annotationFlags, AnnotationFlag.NOVIEW);
            return _this267;
         }
         _inherits(WidgetAnnotation, _Annotation2);
         return _createClass(
            WidgetAnnotation,
            [
               {
                  key: "_decodeFormValue",
                  value: function _decodeFormValue(formValue) {
                     if (Array.isArray(formValue)) {
                        return formValue
                           .filter(function (item) {
                              return typeof item === "string";
                           })
                           .map(function (item) {
                              return stringToPDFString(item);
                           });
                     } else if (formValue instanceof Name) {
                        return stringToPDFString(formValue.name);
                     } else if (typeof formValue === "string") {
                        return stringToPDFString(formValue);
                     }
                     return null;
                  },
               },
               {
                  key: "hasFieldFlag",
                  value: function hasFieldFlag(flag) {
                     return !!(this.data.fieldFlags & flag);
                  },
               },
               {
                  key: "_isViewable",
                  value: function _isViewable(flags) {
                     return true;
                  },
               },
               {
                  key: "mustBeViewed",
                  value: function mustBeViewed(annotationStorage, renderForms) {
                     if (renderForms) {
                        return this.viewable;
                     }
                     return (
                        _superPropGet(
                           WidgetAnnotation,
                           "mustBeViewed",
                           this,
                           3,
                        )([annotationStorage, renderForms]) &&
                        !this._hasFlag(this.flags, AnnotationFlag.NOVIEW)
                     );
                  },
               },
               {
                  key: "getRotationMatrix",
                  value: function getRotationMatrix(annotationStorage) {
                     var _annotationStorage$ge3;
                     var rotation =
                        annotationStorage === null ||
                        annotationStorage === void 0 ||
                        (_annotationStorage$ge3 = annotationStorage.get(
                           this.data.id,
                        )) === null ||
                        _annotationStorage$ge3 === void 0
                           ? void 0
                           : _annotationStorage$ge3.rotation;
                     if (rotation === undefined) {
                        rotation = this.rotation;
                     }
                     if (rotation === 0) {
                        return IDENTITY_MATRIX;
                     }
                     var width = this.data.rect[2] - this.data.rect[0];
                     var height = this.data.rect[3] - this.data.rect[1];
                     return _getRotationMatrix(rotation, width, height);
                  },
               },
               {
                  key: "getBorderAndBackgroundAppearances",
                  value: function getBorderAndBackgroundAppearances(
                     annotationStorage,
                  ) {
                     var _annotationStorage$ge4;
                     var rotation =
                        annotationStorage === null ||
                        annotationStorage === void 0 ||
                        (_annotationStorage$ge4 = annotationStorage.get(
                           this.data.id,
                        )) === null ||
                        _annotationStorage$ge4 === void 0
                           ? void 0
                           : _annotationStorage$ge4.rotation;
                     if (rotation === undefined) {
                        rotation = this.rotation;
                     }
                     if (!this.backgroundColor && !this.borderColor) {
                        return "";
                     }
                     var width = this.data.rect[2] - this.data.rect[0];
                     var height = this.data.rect[3] - this.data.rect[1];
                     var rect =
                        rotation === 0 || rotation === 180
                           ? "0 0 ".concat(width, " ").concat(height, " re")
                           : "0 0 ".concat(height, " ").concat(width, " re");
                     var str = "";
                     if (this.backgroundColor) {
                        str = ""
                           .concat(getPdfColor(this.backgroundColor, true), " ")
                           .concat(rect, " f ");
                     }
                     if (this.borderColor) {
                        var borderWidth = this.borderStyle.width || 1;
                        str += ""
                           .concat(borderWidth, " w ")
                           .concat(getPdfColor(this.borderColor, false), " ")
                           .concat(rect, " S ");
                     }
                     return str;
                  },
               },
               {
                  key: "getOperatorList",
                  value: (function () {
                     var _getOperatorList2 = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(
                           function _callee45(
                              evaluator,
                              task,
                              intent,
                              renderForms,
                              annotationStorage,
                           ) {
                              var content,
                                 opList,
                                 isUsingOwnCanvas,
                                 matrix,
                                 bbox,
                                 transform,
                                 optionalContent,
                                 stream;
                              return _regenerator().w(
                                 function (_context59) {
                                    while (1)
                                       switch (_context59.n) {
                                          case 0:
                                             if (
                                                !(
                                                   renderForms &&
                                                   !(
                                                      this instanceof SignatureWidgetAnnotation
                                                   ) &&
                                                   !this.data.noHTML &&
                                                   !this.data.hasOwnCanvas
                                                )
                                             ) {
                                                _context59.n = 1;
                                                break;
                                             }
                                             return _context59.a(2, {
                                                opList: new OperatorList(),
                                                separateForm: true,
                                                separateCanvas: false,
                                             });
                                          case 1:
                                             if (this._hasText) {
                                                _context59.n = 2;
                                                break;
                                             }
                                             return _context59.a(
                                                2,
                                                _superPropGet(
                                                   WidgetAnnotation,
                                                   "getOperatorList",
                                                   this,
                                                   3,
                                                )([
                                                   evaluator,
                                                   task,
                                                   intent,
                                                   renderForms,
                                                   annotationStorage,
                                                ]),
                                             );
                                          case 2:
                                             _context59.n = 3;
                                             return this._getAppearance(
                                                evaluator,
                                                task,
                                                intent,
                                                annotationStorage,
                                             );
                                          case 3:
                                             content = _context59.v;
                                             if (!(this.appearance && content === null)) {
                                                _context59.n = 4;
                                                break;
                                             }
                                             return _context59.a(
                                                2,
                                                _superPropGet(
                                                   WidgetAnnotation,
                                                   "getOperatorList",
                                                   this,
                                                   3,
                                                )([
                                                   evaluator,
                                                   task,
                                                   intent,
                                                   renderForms,
                                                   annotationStorage,
                                                ]),
                                             );
                                          case 4:
                                             opList = new OperatorList();
                                             if (
                                                !(!this._defaultAppearance || content === null)
                                             ) {
                                                _context59.n = 5;
                                                break;
                                             }
                                             return _context59.a(2, {
                                                opList: opList,
                                                separateForm: false,
                                                separateCanvas: false,
                                             });
                                          case 5:
                                             isUsingOwnCanvas = !!(
                                                this.data.hasOwnCanvas &&
                                                intent & RenderingIntentFlag.DISPLAY
                                             );
                                             matrix = [1, 0, 0, 1, 0, 0];
                                             bbox = [
                                                0,
                                                0,
                                                this.data.rect[2] - this.data.rect[0],
                                                this.data.rect[3] - this.data.rect[1],
                                             ];
                                             transform = getTransformMatrix(
                                                this.data.rect,
                                                bbox,
                                                matrix,
                                             );
                                             if (!this.oc) {
                                                _context59.n = 7;
                                                break;
                                             }
                                             _context59.n = 6;
                                             return evaluator.parseMarkedContentProps(
                                                this.oc,
                                                null,
                                             );
                                          case 6:
                                             optionalContent = _context59.v;
                                          case 7:
                                             if (optionalContent !== undefined) {
                                                opList.addOp(OPS.beginMarkedContentProps, [
                                                   "OC",
                                                   optionalContent,
                                                ]);
                                             }
                                             opList.addOp(OPS.beginAnnotation, [
                                                this.data.id,
                                                this.data.rect,
                                                transform,
                                                this.getRotationMatrix(annotationStorage),
                                                isUsingOwnCanvas,
                                             ]);
                                             stream = new StringStream(content);
                                             _context59.n = 8;
                                             return evaluator.getOperatorList({
                                                stream: stream,
                                                task: task,
                                                resources: this._fieldResources.mergedResources,
                                                operatorList: opList,
                                             });
                                          case 8:
                                             opList.addOp(OPS.endAnnotation, []);
                                             if (optionalContent !== undefined) {
                                                opList.addOp(OPS.endMarkedContent, []);
                                             }
                                             return _context59.a(2, {
                                                opList: opList,
                                                separateForm: false,
                                                separateCanvas: isUsingOwnCanvas,
                                             });
                                       }
                                 },
                                 _callee45,
                                 this,
                              );
                           },
                        ),
                     );
                     function getOperatorList(_x121, _x122, _x123, _x124, _x125) {
                        return _getOperatorList2.apply(this, arguments);
                     }
                     return getOperatorList;
                  })(),
               },
               {
                  key: "_getMKDict",
                  value: function _getMKDict(rotation) {
                     var mk = new Dict(null);
                     if (rotation) {
                        mk.set("R", rotation);
                     }
                     if (this.borderColor) {
                        mk.set("BC", getPdfColorArray(this.borderColor));
                     }
                     if (this.backgroundColor) {
                        mk.set("BG", getPdfColorArray(this.backgroundColor));
                     }
                     return mk.size > 0 ? mk : null;
                  },
               },
               {
                  key: "amendSavedDict",
                  value: function amendSavedDict(annotationStorage, dict) {},
               },
               {
                  key: "save",
                  value: (function () {
                     var _save2 = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(
                           function _callee46(evaluator, task, annotationStorage) {
                              var _this268 = this,
                                 _appearance;
                              var storageEntry,
                                 value,
                                 rotation,
                                 appearance,
                                 needAppearances,
                                 xref,
                                 originalDict,
                                 dict,
                                 _iterator195,
                                 _step195,
                                 key,
                                 xfa,
                                 encoder,
                                 maybeMK,
                                 buffer,
                                 changes,
                                 newRef,
                                 AP,
                                 resources,
                                 appearanceStream,
                                 appearanceDict,
                                 rotationMatrix;
                              return _regenerator().w(
                                 function (_context60) {
                                    while (1)
                                       switch (_context60.n) {
                                          case 0:
                                             storageEntry =
                                                annotationStorage === null ||
                                                annotationStorage === void 0
                                                   ? void 0
                                                   : annotationStorage.get(this.data.id);
                                             ((value =
                                                storageEntry === null || storageEntry === void 0
                                                   ? void 0
                                                   : storageEntry.value),
                                                (rotation =
                                                   storageEntry === null ||
                                                   storageEntry === void 0
                                                      ? void 0
                                                      : storageEntry.rotation));
                                             if (
                                                !(
                                                   value === this.data.fieldValue ||
                                                   value === undefined
                                                )
                                             ) {
                                                _context60.n = 2;
                                                break;
                                             }
                                             if (
                                                !(
                                                   !this._hasValueFromXFA &&
                                                   rotation === undefined
                                                )
                                             ) {
                                                _context60.n = 1;
                                                break;
                                             }
                                             return _context60.a(2, null);
                                          case 1:
                                             value || (value = this.data.fieldValue);
                                          case 2:
                                             if (
                                                !(
                                                   rotation === undefined &&
                                                   !this._hasValueFromXFA &&
                                                   Array.isArray(value) &&
                                                   Array.isArray(this.data.fieldValue) &&
                                                   value.length ===
                                                   this.data.fieldValue.length &&
                                                   value.every(function (x, i) {
                                                      return x === _this268.data.fieldValue[i];
                                                   })
                                                )
                                             ) {
                                                _context60.n = 3;
                                                break;
                                             }
                                             return _context60.a(2, null);
                                          case 3:
                                             if (rotation === undefined) {
                                                rotation = this.rotation;
                                             }
                                             appearance = null;
                                             if (this._needAppearances) {
                                                _context60.n = 6;
                                                break;
                                             }
                                             _context60.n = 4;
                                             return this._getAppearance(
                                                evaluator,
                                                task,
                                                RenderingIntentFlag.SAVE,
                                                annotationStorage,
                                             );
                                          case 4:
                                             appearance = _context60.v;
                                             if (!(appearance === null)) {
                                                _context60.n = 5;
                                                break;
                                             }
                                             return _context60.a(2, null);
                                          case 5:
                                             _context60.n = 6;
                                             break;
                                          case 6:
                                             needAppearances = false;
                                             if (
                                                (_appearance = appearance) !== null &&
                                                _appearance !== void 0 &&
                                                _appearance.needAppearances
                                             ) {
                                                needAppearances = true;
                                                appearance = null;
                                             }
                                             xref = evaluator.xref;
                                             originalDict = xref.fetchIfRef(this.ref);
                                             if (originalDict instanceof Dict) {
                                                _context60.n = 7;
                                                break;
                                             }
                                             return _context60.a(2, null);
                                          case 7:
                                             dict = new Dict(xref);
                                             _iterator195 = _createForOfIteratorHelper(
                                                originalDict.getKeys(),
                                             );
                                             try {
                                                for (
                                                   _iterator195.s();
                                                   !(_step195 = _iterator195.n()).done;

                                                ) {
                                                   key = _step195.value;
                                                   if (key !== "AP") {
                                                      dict.set(key, originalDict.getRaw(key));
                                                   }
                                                }
                                             } catch (err) {
                                                _iterator195.e(err);
                                             } finally {
                                                _iterator195.f();
                                             }
                                             xfa = { path: this.data.fieldName, value: value };
                                             encoder = function encoder(val) {
                                                return isAscii(val)
                                                   ? val
                                                   : stringToUTF16String(val, true);
                                             };
                                             dict.set(
                                                "V",
                                                Array.isArray(value)
                                                   ? value.map(encoder)
                                                   : encoder(value),
                                             );
                                             this.amendSavedDict(annotationStorage, dict);
                                             maybeMK = this._getMKDict(rotation);
                                             if (maybeMK) {
                                                dict.set("MK", maybeMK);
                                             }
                                             buffer = [];
                                             changes = [
                                                {
                                                   ref: this.ref,
                                                   data: "",
                                                   xfa: xfa,
                                                   needAppearances: needAppearances,
                                                },
                                             ];
                                             if (!(appearance !== null)) {
                                                _context60.n = 9;
                                                break;
                                             }
                                             newRef = xref.getNewTemporaryRef();
                                             AP = new Dict(xref);
                                             dict.set("AP", AP);
                                             AP.set("N", newRef);
                                             resources = this._getSaveFieldResources(xref);
                                             appearanceStream = new StringStream(appearance);
                                             appearanceDict = appearanceStream.dict = new Dict(
                                                xref,
                                             );
                                             appearanceDict.set("Subtype", Name.get("Form"));
                                             appearanceDict.set("Resources", resources);
                                             appearanceDict.set("BBox", [
                                                0,
                                                0,
                                                this.data.rect[2] - this.data.rect[0],
                                                this.data.rect[3] - this.data.rect[1],
                                             ]);
                                             rotationMatrix =
                                                this.getRotationMatrix(annotationStorage);
                                             if (rotationMatrix !== IDENTITY_MATRIX) {
                                                appearanceDict.set("Matrix", rotationMatrix);
                                             }
                                             _context60.n = 8;
                                             return writeObject(
                                                newRef,
                                                appearanceStream,
                                                buffer,
                                                xref,
                                             );
                                          case 8:
                                             changes.push({
                                                ref: newRef,
                                                data: buffer.join(""),
                                                xfa: null,
                                                needAppearances: false,
                                             });
                                             buffer.length = 0;
                                          case 9:
                                             dict.set("M", "D:".concat(getModificationDate()));
                                             _context60.n = 10;
                                             return writeObject(this.ref, dict, buffer, xref);
                                          case 10:
                                             changes[0].data = buffer.join("");
                                             return _context60.a(2, changes);
                                       }
                                 },
                                 _callee46,
                                 this,
                              );
                           },
                        ),
                     );
                     function save(_x126, _x127, _x128) {
                        return _save2.apply(this, arguments);
                     }
                     return save;
                  })(),
               },
               {
                  key: "_getAppearance",
                  value: (function () {
                     var _getAppearance2 = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(
                           function _callee47(
                              evaluator,
                              task,
                              intent,
                              annotationStorage,
                           ) {
                              var isPassword,
                                 storageEntry,
                                 value,
                                 rotation,
                                 colors,
                                 option,
                                 lineCount,
                                 lines,
                                 defaultPadding,
                                 defaultHPadding,
                                 totalHeight,
                                 totalWidth,
                                 _ref97,
                                 font,
                                 defaultAppearance,
                                 fontSize,
                                 lineHeight,
                                 encodedLines,
                                 encodingError,
                                 _iterator196,
                                 _step196,
                                 line,
                                 encodedString,
                                 fontFamily,
                                 fakeUnicodeFont,
                                 resources,
                                 newFont,
                                 oldFont,
                                 _iterator197,
                                 _step197,
                                 key,
                                 fontName,
                                 i,
                                 ii,
                                 savedDefaultAppearance,
                                 _this$_computeFontSiz,
                                 _this$_computeFontSiz2,
                                 _this$_computeFontSiz3,
                                 _this$_computeFontSiz4,
                                 descent,
                                 defaultVPadding,
                                 alignment,
                                 bottomPadding,
                                 prevInfo,
                                 renderedText;
                              return _regenerator().w(
                                 function (_context61) {
                                    while (1)
                                       switch (_context61.n) {
                                          case 0:
                                             isPassword = this.hasFieldFlag(
                                                AnnotationFieldFlag.PASSWORD,
                                             );
                                             if (!isPassword) {
                                                _context61.n = 1;
                                                break;
                                             }
                                             return _context61.a(2, null);
                                          case 1:
                                             storageEntry =
                                                annotationStorage === null ||
                                                annotationStorage === void 0
                                                   ? void 0
                                                   : annotationStorage.get(this.data.id);
                                             if (storageEntry) {
                                                value =
                                                   storageEntry.formattedValue ||
                                                   storageEntry.value;
                                                rotation = storageEntry.rotation;
                                             }
                                             if (
                                                !(
                                                   rotation === undefined &&
                                                   value === undefined &&
                                                   !this._needAppearances
                                                )
                                             ) {
                                                _context61.n = 2;
                                                break;
                                             }
                                             if (
                                                !(!this._hasValueFromXFA || this.appearance)
                                             ) {
                                                _context61.n = 2;
                                                break;
                                             }
                                             return _context61.a(2, null);
                                          case 2:
                                             colors =
                                                this.getBorderAndBackgroundAppearances(
                                                   annotationStorage,
                                                );
                                             if (!(value === undefined)) {
                                                _context61.n = 3;
                                                break;
                                             }
                                             value = this.data.fieldValue;
                                             if (value) {
                                                _context61.n = 3;
                                                break;
                                             }
                                             return _context61.a(
                                                2,
                                                "/Tx BMC q ".concat(colors, "Q EMC"),
                                             );
                                          case 3:
                                             if (Array.isArray(value) && value.length === 1) {
                                                value = value[0];
                                             }
                                             assert(
                                                typeof value === "string",
                                                "Expected `value` to be a string.",
                                             );
                                             value = value.trim();
                                             if (this.data.combo) {
                                                option = this.data.options.find(
                                                   function (_ref96) {
                                                      var exportValue = _ref96.exportValue;
                                                      return value === exportValue;
                                                   },
                                                );
                                                value =
                                                   (option === null || option === void 0
                                                      ? void 0
                                                      : option.displayValue) || value;
                                             }
                                             if (!(value === "")) {
                                                _context61.n = 4;
                                                break;
                                             }
                                             return _context61.a(
                                                2,
                                                "/Tx BMC q ".concat(colors, "Q EMC"),
                                             );
                                          case 4:
                                             if (rotation === undefined) {
                                                rotation = this.rotation;
                                             }
                                             lineCount = -1;
                                             if (this.data.multiLine) {
                                                lines = value
                                                   .split(/\r\n?|\n/)
                                                   .map(function (line) {
                                                      return line.normalize("NFC");
                                                   });
                                                lineCount = lines.length;
                                             } else {
                                                lines = [
                                                   value
                                                      .replace(/\r\n?|\n/, "")
                                                      .normalize("NFC"),
                                                ];
                                             }
                                             defaultPadding = 1;
                                             defaultHPadding = 2;
                                             totalHeight =
                                                this.data.rect[3] - this.data.rect[1];
                                             totalWidth =
                                                this.data.rect[2] - this.data.rect[0];
                                             if (rotation === 90 || rotation === 270) {
                                                _ref97 = [totalHeight, totalWidth];
                                                totalWidth = _ref97[0];
                                                totalHeight = _ref97[1];
                                             }
                                             if (!this._defaultAppearance) {
                                                this.data.defaultAppearanceData =
                                                   parseDefaultAppearance(
                                                      (this._defaultAppearance =
                                                         "/Helvetica 0 Tf 0 g"),
                                                   );
                                             }
                                             _context61.n = 5;
                                             return WidgetAnnotation._getFontData(
                                                evaluator,
                                                task,
                                                this.data.defaultAppearanceData,
                                                this._fieldResources.mergedResources,
                                             );
                                          case 5:
                                             font = _context61.v;
                                             encodedLines = [];
                                             encodingError = false;
                                             _iterator196 = _createForOfIteratorHelper(lines);
                                             try {
                                                for (
                                                   _iterator196.s();
                                                   !(_step196 = _iterator196.n()).done;

                                                ) {
                                                   line = _step196.value;
                                                   encodedString = font.encodeString(line);
                                                   if (encodedString.length > 1) {
                                                      encodingError = true;
                                                   }
                                                   encodedLines.push(encodedString.join(""));
                                                }
                                             } catch (err) {
                                                _iterator196.e(err);
                                             } finally {
                                                _iterator196.f();
                                             }
                                             if (
                                                !(
                                                   encodingError &&
                                                   intent & RenderingIntentFlag.SAVE
                                                )
                                             ) {
                                                _context61.n = 6;
                                                break;
                                             }
                                             return _context61.a(2, { needAppearances: true });
                                          case 6:
                                             if (
                                                !(
                                                   encodingError &&
                                                   this._isOffscreenCanvasSupported
                                                )
                                             ) {
                                                _context61.n = 8;
                                                break;
                                             }
                                             fontFamily = this.data.comb
                                                ? "monospace"
                                                : "sans-serif";
                                             fakeUnicodeFont = new FakeUnicodeFont(
                                                evaluator.xref,
                                                fontFamily,
                                             );
                                             resources = fakeUnicodeFont.createFontResources(
                                                lines.join(""),
                                             );
                                             newFont = resources.getRaw("Font");
                                             if (
                                                this._fieldResources.mergedResources.has("Font")
                                             ) {
                                                oldFont =
                                                   this._fieldResources.mergedResources.get(
                                                      "Font",
                                                   );
                                                _iterator197 = _createForOfIteratorHelper(
                                                   newFont.getKeys(),
                                                );
                                                try {
                                                   for (
                                                      _iterator197.s();
                                                      !(_step197 = _iterator197.n()).done;

                                                   ) {
                                                      key = _step197.value;
                                                      oldFont.set(key, newFont.getRaw(key));
                                                   }
                                                } catch (err) {
                                                   _iterator197.e(err);
                                                } finally {
                                                   _iterator197.f();
                                                }
                                             } else {
                                                this._fieldResources.mergedResources.set(
                                                   "Font",
                                                   newFont,
                                                );
                                             }
                                             fontName = fakeUnicodeFont.fontName.name;
                                             _context61.n = 7;
                                             return WidgetAnnotation._getFontData(
                                                evaluator,
                                                task,
                                                { fontName: fontName, fontSize: 0 },
                                                resources,
                                             );
                                          case 7:
                                             font = _context61.v;
                                             for (
                                                i = 0, ii = encodedLines.length;
                                                i < ii;
                                                i++
                                             ) {
                                                encodedLines[i] = stringToUTF16String(lines[i]);
                                             }
                                             savedDefaultAppearance = Object.assign(
                                                Object.create(null),
                                                this.data.defaultAppearanceData,
                                             );
                                             this.data.defaultAppearanceData.fontSize = 0;
                                             this.data.defaultAppearanceData.fontName =
                                                fontName;
                                             _this$_computeFontSiz = this._computeFontSize(
                                                totalHeight - 2 * defaultPadding,
                                                totalWidth - 2 * defaultHPadding,
                                                value,
                                                font,
                                                lineCount,
                                             );
                                             _this$_computeFontSiz2 = _slicedToArray(
                                                _this$_computeFontSiz,
                                                3,
                                             );
                                             defaultAppearance = _this$_computeFontSiz2[0];
                                             fontSize = _this$_computeFontSiz2[1];
                                             lineHeight = _this$_computeFontSiz2[2];
                                             this.data.defaultAppearanceData =
                                                savedDefaultAppearance;
                                             _context61.n = 9;
                                             break;
                                          case 8:
                                             if (!this._isOffscreenCanvasSupported) {
                                                warn(
                                                   "_getAppearance: OffscreenCanvas is not supported, annotation may not render correctly.",
                                                );
                                             }
                                             _this$_computeFontSiz3 = this._computeFontSize(
                                                totalHeight - 2 * defaultPadding,
                                                totalWidth - 2 * defaultHPadding,
                                                value,
                                                font,
                                                lineCount,
                                             );
                                             _this$_computeFontSiz4 = _slicedToArray(
                                                _this$_computeFontSiz3,
                                                3,
                                             );
                                             defaultAppearance = _this$_computeFontSiz4[0];
                                             fontSize = _this$_computeFontSiz4[1];
                                             lineHeight = _this$_computeFontSiz4[2];
                                          case 9:
                                             descent = font.descent;
                                             if (isNaN(descent)) {
                                                descent = BASELINE_FACTOR * lineHeight;
                                             } else {
                                                descent = Math.max(
                                                   BASELINE_FACTOR * lineHeight,
                                                   Math.abs(descent) * fontSize,
                                                );
                                             }
                                             defaultVPadding = Math.min(
                                                Math.floor((totalHeight - fontSize) / 2),
                                                defaultPadding,
                                             );
                                             alignment = this.data.textAlignment;
                                             if (!this.data.multiLine) {
                                                _context61.n = 10;
                                                break;
                                             }
                                             return _context61.a(
                                                2,
                                                this._getMultilineAppearance(
                                                   defaultAppearance,
                                                   encodedLines,
                                                   font,
                                                   fontSize,
                                                   totalWidth,
                                                   totalHeight,
                                                   alignment,
                                                   defaultHPadding,
                                                   defaultVPadding,
                                                   descent,
                                                   lineHeight,
                                                   annotationStorage,
                                                ),
                                             );
                                          case 10:
                                             if (!this.data.comb) {
                                                _context61.n = 11;
                                                break;
                                             }
                                             return _context61.a(
                                                2,
                                                this._getCombAppearance(
                                                   defaultAppearance,
                                                   font,
                                                   encodedLines[0],
                                                   fontSize,
                                                   totalWidth,
                                                   totalHeight,
                                                   defaultHPadding,
                                                   defaultVPadding,
                                                   descent,
                                                   lineHeight,
                                                   annotationStorage,
                                                ),
                                             );
                                          case 11:
                                             bottomPadding = defaultVPadding + descent;
                                             if (!(alignment === 0 || alignment > 2)) {
                                                _context61.n = 12;
                                                break;
                                             }
                                             return _context61.a(
                                                2,
                                                "/Tx BMC q ".concat(colors, "BT ") +
                                                defaultAppearance +
                                                " 1 0 0 1 "
                                                   .concat(
                                                      numberToString(defaultHPadding),
                                                      " ",
                                                   )
                                                   .concat(
                                                      numberToString(bottomPadding),
                                                      " Tm (",
                                                   )
                                                   .concat(
                                                      escapeString(encodedLines[0]),
                                                      ") Tj",
                                                   ) +
                                                " ET Q EMC",
                                             );
                                          case 12:
                                             prevInfo = { shift: 0 };
                                             renderedText = this._renderText(
                                                encodedLines[0],
                                                font,
                                                fontSize,
                                                totalWidth,
                                                alignment,
                                                prevInfo,
                                                defaultHPadding,
                                                bottomPadding,
                                             );
                                             return _context61.a(
                                                2,
                                                "/Tx BMC q ".concat(colors, "BT ") +
                                                defaultAppearance +
                                                " 1 0 0 1 0 0 Tm ".concat(renderedText) +
                                                " ET Q EMC",
                                             );
                                       }
                                 },
                                 _callee47,
                                 this,
                              );
                           },
                        ),
                     );
                     function _getAppearance(_x129, _x130, _x131, _x132) {
                        return _getAppearance2.apply(this, arguments);
                     }
                     return _getAppearance;
                  })(),
               },
               {
                  key: "_getTextWidth",
                  value: function _getTextWidth(text, font) {
                     return (
                        font.charsToGlyphs(text).reduce(function (width, glyph) {
                           return width + glyph.width;
                        }, 0) / 1000
                     );
                  },
               },
               {
                  key: "_computeFontSize",
                  value: function _computeFontSize(
                     height,
                     width,
                     text,
                     font,
                     lineCount,
                  ) {
                     var _this269 = this;
                     var fontSize = this.data.defaultAppearanceData.fontSize;
                     var lineHeight = (fontSize || 12) * LINE_FACTOR,
                        numberOfLines = Math.round(height / lineHeight);
                     if (!fontSize) {
                        var roundWithTwoDigits = function roundWithTwoDigits(x) {
                           return Math.floor(x * 100) / 100;
                        };
                        if (lineCount === -1) {
                           var textWidth = this._getTextWidth(text, font);
                           fontSize = roundWithTwoDigits(
                              Math.min(
                                 height / LINE_FACTOR,
                                 textWidth > width ? width / textWidth : Infinity,
                              ),
                           );
                           numberOfLines = 1;
                        } else {
                           var lines = text.split(/\r\n?|\n/);
                           var cachedLines = [];
                           var _iterator198 = _createForOfIteratorHelper(lines),
                              _step198;
                           try {
                              for (
                                 _iterator198.s();
                                 !(_step198 = _iterator198.n()).done;

                              ) {
                                 var line = _step198.value;
                                 var encoded = font.encodeString(line).join("");
                                 var glyphs = font.charsToGlyphs(encoded);
                                 var positions = font.getCharPositions(encoded);
                                 cachedLines.push({
                                    line: encoded,
                                    glyphs: glyphs,
                                    positions: positions,
                                 });
                              }
                           } catch (err) {
                              _iterator198.e(err);
                           } finally {
                              _iterator198.f();
                           }
                           var isTooBig = function isTooBig(fsize) {
                              var totalHeight = 0;
                              for (
                                 var _i62 = 0, _cachedLines = cachedLines;
                                 _i62 < _cachedLines.length;
                                 _i62++
                              ) {
                                 var cache = _cachedLines[_i62];
                                 var chunks = _this269._splitLine(
                                    null,
                                    font,
                                    fsize,
                                    width,
                                    cache,
                                 );
                                 totalHeight += chunks.length * fsize;
                                 if (totalHeight > height) {
                                    return true;
                                 }
                              }
                              return false;
                           };
                           numberOfLines = Math.max(numberOfLines, lineCount);
                           while (true) {
                              lineHeight = height / numberOfLines;
                              fontSize = roundWithTwoDigits(lineHeight / LINE_FACTOR);
                              if (isTooBig(fontSize)) {
                                 numberOfLines++;
                                 continue;
                              }
                              break;
                           }
                        }
                        var _this$data$defaultApp = this.data.defaultAppearanceData,
                           fontName = _this$data$defaultApp.fontName,
                           fontColor = _this$data$defaultApp.fontColor;
                        this._defaultAppearance = createDefaultAppearance({
                           fontSize: fontSize,
                           fontName: fontName,
                           fontColor: fontColor,
                        });
                     }
                     return [
                        this._defaultAppearance,
                        fontSize,
                        height / numberOfLines,
                     ];
                  },
               },
               {
                  key: "_renderText",
                  value: function _renderText(
                     text,
                     font,
                     fontSize,
                     totalWidth,
                     alignment,
                     prevInfo,
                     hPadding,
                     vPadding,
                  ) {
                     var shift;
                     if (alignment === 1) {
                        var width = this._getTextWidth(text, font) * fontSize;
                        shift = (totalWidth - width) / 2;
                     } else if (alignment === 2) {
                        var _width3 = this._getTextWidth(text, font) * fontSize;
                        shift = totalWidth - _width3 - hPadding;
                     } else {
                        shift = hPadding;
                     }
                     var shiftStr = numberToString(shift - prevInfo.shift);
                     prevInfo.shift = shift;
                     vPadding = numberToString(vPadding);
                     return ""
                        .concat(shiftStr, " ")
                        .concat(vPadding, " Td (")
                        .concat(escapeString(text), ") Tj");
                  },
               },
               {
                  key: "_getSaveFieldResources",
                  value: function _getSaveFieldResources(xref) {
                     var _this$data$defaultApp2;
                     var _this$_fieldResources = this._fieldResources,
                        localResources = _this$_fieldResources.localResources,
                        appearanceResources = _this$_fieldResources.appearanceResources,
                        acroFormResources = _this$_fieldResources.acroFormResources;
                     var fontName =
                        (_this$data$defaultApp2 = this.data.defaultAppearanceData) ===
                        null || _this$data$defaultApp2 === void 0
                           ? void 0
                           : _this$data$defaultApp2.fontName;
                     if (!fontName) {
                        return localResources || Dict.empty;
                     }
                     for (
                        var _i63 = 0, _arr5 = [localResources, appearanceResources];
                        _i63 < _arr5.length;
                        _i63++
                     ) {
                        var resources = _arr5[_i63];
                        if (resources instanceof Dict) {
                           var localFont = resources.get("Font");
                           if (localFont instanceof Dict && localFont.has(fontName)) {
                              return resources;
                           }
                        }
                     }
                     if (acroFormResources instanceof Dict) {
                        var acroFormFont = acroFormResources.get("Font");
                        if (
                           acroFormFont instanceof Dict &&
                           acroFormFont.has(fontName)
                        ) {
                           var subFontDict = new Dict(xref);
                           subFontDict.set(fontName, acroFormFont.getRaw(fontName));
                           var subResourcesDict = new Dict(xref);
                           subResourcesDict.set("Font", subFontDict);
                           return Dict.merge({
                              xref: xref,
                              dictArray: [subResourcesDict, localResources],
                              mergeSubDicts: true,
                           });
                        }
                     }
                     return localResources || Dict.empty;
                  },
               },
               {
                  key: "getFieldObject",
                  value: function getFieldObject() {
                     return null;
                  },
               },
            ],
            [
               {
                  key: "_getFontData",
                  value: (function () {
                     var _getFontData2 = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(
                           function _callee48(
                              evaluator,
                              task,
                              appearanceData,
                              resources,
                           ) {
                              var operatorList, initialState, fontName, fontSize;
                              return _regenerator().w(function (_context62) {
                                 while (1)
                                    switch (_context62.n) {
                                       case 0:
                                          operatorList = new OperatorList();
                                          initialState = {
                                             font: null,
                                             clone: function clone() {
                                                return this;
                                             },
                                          };
                                          ((fontName = appearanceData.fontName),
                                             (fontSize = appearanceData.fontSize));
                                          _context62.n = 1;
                                          return evaluator.handleSetFont(
                                             resources,
                                             [fontName && Name.get(fontName), fontSize],
                                             null,
                                             operatorList,
                                             task,
                                             initialState,
                                             null,
                                          );
                                       case 1:
                                          return _context62.a(2, initialState.font);
                                    }
                              }, _callee48);
                           },
                        ),
                     );
                     function _getFontData(_x133, _x134, _x135, _x136) {
                        return _getFontData2.apply(this, arguments);
                     }
                     return _getFontData;
                  })(),
               },
            ],
         );
      })(Annotation);
      var TextWidgetAnnotation = /*#__PURE__*/ (function (_WidgetAnnotation) {
         function TextWidgetAnnotation(params) {
            var _this270;
            _classCallCheck(this, TextWidgetAnnotation);
            _this270 = _callSuper(this, TextWidgetAnnotation, [params]);
            _this270.data.hasOwnCanvas =
               _this270.data.readOnly && !_this270.data.noHTML;
            _this270._hasText = true;
            var dict = params.dict;
            if (typeof _this270.data.fieldValue !== "string") {
               _this270.data.fieldValue = "";
            }
            var alignment = getInheritableProperty({ dict: dict, key: "Q" });
            if (!Number.isInteger(alignment) || alignment < 0 || alignment > 2) {
               alignment = null;
            }
            _this270.data.textAlignment = alignment;
            var maximumLength = getInheritableProperty({
               dict: dict,
               key: "MaxLen",
            });
            if (!Number.isInteger(maximumLength) || maximumLength < 0) {
               maximumLength = 0;
            }
            _this270.data.maxLen = maximumLength;
            _this270.data.multiLine = _this270.hasFieldFlag(
               AnnotationFieldFlag.MULTILINE,
            );
            _this270.data.comb =
               _this270.hasFieldFlag(AnnotationFieldFlag.COMB) &&
               !_this270.hasFieldFlag(AnnotationFieldFlag.MULTILINE) &&
               !_this270.hasFieldFlag(AnnotationFieldFlag.PASSWORD) &&
               !_this270.hasFieldFlag(AnnotationFieldFlag.FILESELECT) &&
               _this270.data.maxLen !== 0;
            _this270.data.doNotScroll = _this270.hasFieldFlag(
               AnnotationFieldFlag.DONOTSCROLL,
            );
            return _this270;
         }
         _inherits(TextWidgetAnnotation, _WidgetAnnotation);
         return _createClass(TextWidgetAnnotation, [
            {
               key: "hasTextContent",
               get: function get() {
                  return !!this.appearance && !this._needAppearances;
               },
            },
            {
               key: "_getCombAppearance",
               value: function _getCombAppearance(
                  defaultAppearance,
                  font,
                  text,
                  fontSize,
                  width,
                  height,
                  hPadding,
                  vPadding,
                  descent,
                  lineHeight,
                  annotationStorage,
               ) {
                  var combWidth = width / this.data.maxLen;
                  var colors =
                     this.getBorderAndBackgroundAppearances(annotationStorage);
                  var buf = [];
                  var positions = font.getCharPositions(text);
                  var _iterator199 = _createForOfIteratorHelper(positions),
                     _step199;
                  try {
                     for (_iterator199.s(); !(_step199 = _iterator199.n()).done; ) {
                        var _step199$value = _slicedToArray(_step199.value, 2),
                           start = _step199$value[0],
                           end = _step199$value[1];
                        buf.push(
                           "(".concat(escapeString(text.substring(start, end)), ") Tj"),
                        );
                     }
                  } catch (err) {
                     _iterator199.e(err);
                  } finally {
                     _iterator199.f();
                  }
                  var renderedComb = buf.join(
                     " ".concat(numberToString(combWidth), " 0 Td "),
                  );
                  return (
                     "/Tx BMC q ".concat(colors, "BT ") +
                     defaultAppearance +
                     " 1 0 0 1 "
                        .concat(numberToString(hPadding), " ")
                        .concat(numberToString(vPadding + descent), " Tm ")
                        .concat(renderedComb) +
                     " ET Q EMC"
                  );
               },
            },
            {
               key: "_getMultilineAppearance",
               value: function _getMultilineAppearance(
                  defaultAppearance,
                  lines,
                  font,
                  fontSize,
                  width,
                  height,
                  alignment,
                  hPadding,
                  vPadding,
                  descent,
                  lineHeight,
                  annotationStorage,
               ) {
                  var buf = [];
                  var totalWidth = width - 2 * hPadding;
                  var prevInfo = { shift: 0 };
                  for (var i = 0, ii = lines.length; i < ii; i++) {
                     var line = lines[i];
                     var chunks = this._splitLine(line, font, fontSize, totalWidth);
                     for (var j = 0, jj = chunks.length; j < jj; j++) {
                        var chunk = chunks[j];
                        var vShift =
                           i === 0 && j === 0
                              ? -vPadding - (lineHeight - descent)
                              : -lineHeight;
                        buf.push(
                           this._renderText(
                              chunk,
                              font,
                              fontSize,
                              width,
                              alignment,
                              prevInfo,
                              hPadding,
                              vShift,
                           ),
                        );
                     }
                  }
                  var colors =
                     this.getBorderAndBackgroundAppearances(annotationStorage);
                  var renderedText = buf.join("\n");
                  return (
                     "/Tx BMC q ".concat(colors, "BT ") +
                     defaultAppearance +
                     " 1 0 0 1 0 "
                        .concat(numberToString(height), " Tm ")
                        .concat(renderedText) +
                     " ET Q EMC"
                  );
               },
            },
            {
               key: "_splitLine",
               value: function _splitLine(line, font, fontSize, width) {
                  var cache =
                     arguments.length > 4 && arguments[4] !== undefined
                        ? arguments[4]
                        : {};
                  line = cache.line || line;
                  var glyphs = cache.glyphs || font.charsToGlyphs(line);
                  if (glyphs.length <= 1) {
                     return [line];
                  }
                  var positions = cache.positions || font.getCharPositions(line);
                  var scale = fontSize / 1000;
                  var chunks = [];
                  var lastSpacePosInStringStart = -1,
                     lastSpacePosInStringEnd = -1,
                     lastSpacePos = -1,
                     startChunk = 0,
                     currentWidth = 0;
                  for (var i = 0, ii = glyphs.length; i < ii; i++) {
                     var _positions$i = _slicedToArray(positions[i], 2),
                        start = _positions$i[0],
                        end = _positions$i[1];
                     var glyph = glyphs[i];
                     var glyphWidth = glyph.width * scale;
                     if (glyph.unicode === " ") {
                        if (currentWidth + glyphWidth > width) {
                           chunks.push(line.substring(startChunk, start));
                           startChunk = start;
                           currentWidth = glyphWidth;
                           lastSpacePosInStringStart = -1;
                           lastSpacePos = -1;
                        } else {
                           currentWidth += glyphWidth;
                           lastSpacePosInStringStart = start;
                           lastSpacePosInStringEnd = end;
                           lastSpacePos = i;
                        }
                     } else if (currentWidth + glyphWidth > width) {
                        if (lastSpacePosInStringStart !== -1) {
                           chunks.push(
                              line.substring(startChunk, lastSpacePosInStringEnd),
                           );
                           startChunk = lastSpacePosInStringEnd;
                           i = lastSpacePos + 1;
                           lastSpacePosInStringStart = -1;
                           currentWidth = 0;
                        } else {
                           chunks.push(line.substring(startChunk, start));
                           startChunk = start;
                           currentWidth = glyphWidth;
                        }
                     } else {
                        currentWidth += glyphWidth;
                     }
                  }
                  if (startChunk < line.length) {
                     chunks.push(line.substring(startChunk, line.length));
                  }
                  return chunks;
               },
            },
            {
               key: "getFieldObject",
               value: function getFieldObject() {
                  return {
                     id: this.data.id,
                     value: this.data.fieldValue,
                     defaultValue: this.data.defaultFieldValue || "",
                     multiline: this.data.multiLine,
                     password: this.hasFieldFlag(AnnotationFieldFlag.PASSWORD),
                     charLimit: this.data.maxLen,
                     comb: this.data.comb,
                     editable: !this.data.readOnly,
                     hidden: this.data.hidden,
                     name: this.data.fieldName,
                     rect: this.data.rect,
                     actions: this.data.actions,
                     page: this.data.pageIndex,
                     strokeColor: this.data.borderColor,
                     fillColor: this.data.backgroundColor,
                     rotation: this.rotation,
                     type: "text",
                  };
               },
            },
         ]);
      })(WidgetAnnotation);
      var ButtonWidgetAnnotation = /*#__PURE__*/ (function (_WidgetAnnotation2) {
         function ButtonWidgetAnnotation(params) {
            var _this271;
            _classCallCheck(this, ButtonWidgetAnnotation);
            _this271 = _callSuper(this, ButtonWidgetAnnotation, [params]);
            _this271.checkedAppearance = null;
            _this271.uncheckedAppearance = null;
            _this271.data.checkBox =
               !_this271.hasFieldFlag(AnnotationFieldFlag.RADIO) &&
               !_this271.hasFieldFlag(AnnotationFieldFlag.PUSHBUTTON);
            _this271.data.radioButton =
               _this271.hasFieldFlag(AnnotationFieldFlag.RADIO) &&
               !_this271.hasFieldFlag(AnnotationFieldFlag.PUSHBUTTON);
            _this271.data.pushButton = _this271.hasFieldFlag(
               AnnotationFieldFlag.PUSHBUTTON,
            );
            _this271.data.isTooltipOnly = false;
            if (_this271.data.checkBox) {
               _this271._processCheckBox(params);
            } else if (_this271.data.radioButton) {
               _this271._processRadioButton(params);
            } else if (_this271.data.pushButton) {
               _this271.data.hasOwnCanvas = true;
               _this271.data.noHTML = false;
               _this271._processPushButton(params);
            } else {
               warn("Invalid field flags for button widget annotation");
            }
            return _this271;
         }
         _inherits(ButtonWidgetAnnotation, _WidgetAnnotation2);
         return _createClass(ButtonWidgetAnnotation, [
            {
               key: "getOperatorList",
               value: (function () {
                  var _getOperatorList3 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee49(
                           evaluator,
                           task,
                           intent,
                           renderForms,
                           annotationStorage,
                        ) {
                           var value,
                              rotation,
                              storageEntry,
                              appearance,
                              savedAppearance,
                              savedMatrix,
                              operatorList;
                           return _regenerator().w(
                              function (_context63) {
                                 while (1)
                                    switch (_context63.n) {
                                       case 0:
                                          if (!this.data.pushButton) {
                                             _context63.n = 1;
                                             break;
                                          }
                                          return _context63.a(
                                             2,
                                             _superPropGet(
                                                ButtonWidgetAnnotation,
                                                "getOperatorList",
                                                this,
                                                3,
                                             )([
                                                evaluator,
                                                task,
                                                intent,
                                                false,
                                                annotationStorage,
                                             ]),
                                          );
                                       case 1:
                                          value = null;
                                          rotation = null;
                                          if (annotationStorage) {
                                             storageEntry = annotationStorage.get(
                                                this.data.id,
                                             );
                                             value = storageEntry ? storageEntry.value : null;
                                             rotation = storageEntry
                                                ? storageEntry.rotation
                                                : null;
                                          }
                                          if (!(value === null && this.appearance)) {
                                             _context63.n = 2;
                                             break;
                                          }
                                          return _context63.a(
                                             2,
                                             _superPropGet(
                                                ButtonWidgetAnnotation,
                                                "getOperatorList",
                                                this,
                                                3,
                                             )([
                                                evaluator,
                                                task,
                                                intent,
                                                renderForms,
                                                annotationStorage,
                                             ]),
                                          );
                                       case 2:
                                          if (value === null || value === undefined) {
                                             value = this.data.checkBox
                                                ? this.data.fieldValue === this.data.exportValue
                                                : this.data.fieldValue ===
                                                this.data.buttonValue;
                                          }
                                          appearance = value
                                             ? this.checkedAppearance
                                             : this.uncheckedAppearance;
                                          if (!appearance) {
                                             _context63.n = 3;
                                             break;
                                          }
                                          savedAppearance = this.appearance;
                                          savedMatrix =
                                             appearance.dict.getArray("Matrix") ||
                                             IDENTITY_MATRIX;
                                          if (rotation) {
                                             appearance.dict.set(
                                                "Matrix",
                                                this.getRotationMatrix(annotationStorage),
                                             );
                                          }
                                          this.appearance = appearance;
                                          operatorList = _superPropGet(
                                             ButtonWidgetAnnotation,
                                             "getOperatorList",
                                             this,
                                             3,
                                          )([
                                             evaluator,
                                             task,
                                             intent,
                                             renderForms,
                                             annotationStorage,
                                          ]);
                                          this.appearance = savedAppearance;
                                          appearance.dict.set("Matrix", savedMatrix);
                                          return _context63.a(2, operatorList);
                                       case 3:
                                          return _context63.a(2, {
                                             opList: new OperatorList(),
                                             separateForm: false,
                                             separateCanvas: false,
                                          });
                                    }
                              },
                              _callee49,
                              this,
                           );
                        },
                     ),
                  );
                  function getOperatorList(_x137, _x138, _x139, _x140, _x141) {
                     return _getOperatorList3.apply(this, arguments);
                  }
                  return getOperatorList;
               })(),
            },
            {
               key: "save",
               value: (function () {
                  var _save3 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee50(evaluator, task, annotationStorage) {
                           return _regenerator().w(
                              function (_context64) {
                                 while (1)
                                    switch (_context64.n) {
                                       case 0:
                                          if (!this.data.checkBox) {
                                             _context64.n = 1;
                                             break;
                                          }
                                          return _context64.a(
                                             2,
                                             this._saveCheckbox(
                                                evaluator,
                                                task,
                                                annotationStorage,
                                             ),
                                          );
                                       case 1:
                                          if (!this.data.radioButton) {
                                             _context64.n = 2;
                                             break;
                                          }
                                          return _context64.a(
                                             2,
                                             this._saveRadioButton(
                                                evaluator,
                                                task,
                                                annotationStorage,
                                             ),
                                          );
                                       case 2:
                                          return _context64.a(2, null);
                                    }
                              },
                              _callee50,
                              this,
                           );
                        },
                     ),
                  );
                  function save(_x142, _x143, _x144) {
                     return _save3.apply(this, arguments);
                  }
                  return save;
               })(),
            },
            {
               key: "_saveCheckbox",
               value: (function () {
                  var _saveCheckbox2 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee51(evaluator, task, annotationStorage) {
                           var storageEntry,
                              rotation,
                              value,
                              defaultValue,
                              dict,
                              xfa,
                              name,
                              maybeMK,
                              buffer;
                           return _regenerator().w(
                              function (_context65) {
                                 while (1)
                                    switch (_context65.n) {
                                       case 0:
                                          if (annotationStorage) {
                                             _context65.n = 1;
                                             break;
                                          }
                                          return _context65.a(2, null);
                                       case 1:
                                          storageEntry = annotationStorage.get(this.data.id);
                                          ((rotation =
                                             storageEntry === null || storageEntry === void 0
                                                ? void 0
                                                : storageEntry.rotation),
                                             (value =
                                                storageEntry === null || storageEntry === void 0
                                                   ? void 0
                                                   : storageEntry.value));
                                          if (!(rotation === undefined)) {
                                             _context65.n = 3;
                                             break;
                                          }
                                          if (!(value === undefined)) {
                                             _context65.n = 2;
                                             break;
                                          }
                                          return _context65.a(2, null);
                                       case 2:
                                          defaultValue =
                                             this.data.fieldValue === this.data.exportValue;
                                          if (!(defaultValue === value)) {
                                             _context65.n = 3;
                                             break;
                                          }
                                          return _context65.a(2, null);
                                       case 3:
                                          dict = evaluator.xref.fetchIfRef(this.ref);
                                          if (dict instanceof Dict) {
                                             _context65.n = 4;
                                             break;
                                          }
                                          return _context65.a(2, null);
                                       case 4:
                                          if (rotation === undefined) {
                                             rotation = this.rotation;
                                          }
                                          if (value === undefined) {
                                             value =
                                                this.data.fieldValue === this.data.exportValue;
                                          }
                                          xfa = {
                                             path: this.data.fieldName,
                                             value: value ? this.data.exportValue : "",
                                          };
                                          name = Name.get(
                                             value ? this.data.exportValue : "Off",
                                          );
                                          dict.set("V", name);
                                          dict.set("AS", name);
                                          dict.set("M", "D:".concat(getModificationDate()));
                                          maybeMK = this._getMKDict(rotation);
                                          if (maybeMK) {
                                             dict.set("MK", maybeMK);
                                          }
                                          buffer = [];
                                          _context65.n = 5;
                                          return writeObject(
                                             this.ref,
                                             dict,
                                             buffer,
                                             evaluator.xref,
                                          );
                                       case 5:
                                          return _context65.a(2, [
                                             {
                                                ref: this.ref,
                                                data: buffer.join(""),
                                                xfa: xfa,
                                             },
                                          ]);
                                    }
                              },
                              _callee51,
                              this,
                           );
                        },
                     ),
                  );
                  function _saveCheckbox(_x145, _x146, _x147) {
                     return _saveCheckbox2.apply(this, arguments);
                  }
                  return _saveCheckbox;
               })(),
            },
            {
               key: "_saveRadioButton",
               value: (function () {
                  var _saveRadioButton2 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee52(evaluator, task, annotationStorage) {
                           var storageEntry,
                              rotation,
                              value,
                              defaultValue,
                              dict,
                              xfa,
                              name,
                              buffer,
                              parentData,
                              parent,
                              maybeMK,
                              newRefs;
                           return _regenerator().w(
                              function (_context66) {
                                 while (1)
                                    switch (_context66.n) {
                                       case 0:
                                          if (annotationStorage) {
                                             _context66.n = 1;
                                             break;
                                          }
                                          return _context66.a(2, null);
                                       case 1:
                                          storageEntry = annotationStorage.get(this.data.id);
                                          ((rotation =
                                             storageEntry === null || storageEntry === void 0
                                                ? void 0
                                                : storageEntry.rotation),
                                             (value =
                                                storageEntry === null || storageEntry === void 0
                                                   ? void 0
                                                   : storageEntry.value));
                                          if (!(rotation === undefined)) {
                                             _context66.n = 3;
                                             break;
                                          }
                                          if (!(value === undefined)) {
                                             _context66.n = 2;
                                             break;
                                          }
                                          return _context66.a(2, null);
                                       case 2:
                                          defaultValue =
                                             this.data.fieldValue === this.data.buttonValue;
                                          if (!(defaultValue === value)) {
                                             _context66.n = 3;
                                             break;
                                          }
                                          return _context66.a(2, null);
                                       case 3:
                                          dict = evaluator.xref.fetchIfRef(this.ref);
                                          if (dict instanceof Dict) {
                                             _context66.n = 4;
                                             break;
                                          }
                                          return _context66.a(2, null);
                                       case 4:
                                          if (value === undefined) {
                                             value =
                                                this.data.fieldValue === this.data.buttonValue;
                                          }
                                          if (rotation === undefined) {
                                             rotation = this.rotation;
                                          }
                                          xfa = {
                                             path: this.data.fieldName,
                                             value: value ? this.data.buttonValue : "",
                                          };
                                          name = Name.get(
                                             value ? this.data.buttonValue : "Off",
                                          );
                                          buffer = [];
                                          parentData = null;
                                          if (!value) {
                                             _context66.n = 7;
                                             break;
                                          }
                                          if (!(this.parent instanceof Ref)) {
                                             _context66.n = 6;
                                             break;
                                          }
                                          parent = evaluator.xref.fetch(this.parent);
                                          parent.set("V", name);
                                          _context66.n = 5;
                                          return writeObject(
                                             this.parent,
                                             parent,
                                             buffer,
                                             evaluator.xref,
                                          );
                                       case 5:
                                          parentData = buffer.join("");
                                          buffer.length = 0;
                                          _context66.n = 7;
                                          break;
                                       case 6:
                                          if (this.parent instanceof Dict) {
                                             this.parent.set("V", name);
                                          }
                                       case 7:
                                          dict.set("AS", name);
                                          dict.set("M", "D:".concat(getModificationDate()));
                                          maybeMK = this._getMKDict(rotation);
                                          if (maybeMK) {
                                             dict.set("MK", maybeMK);
                                          }
                                          _context66.n = 8;
                                          return writeObject(
                                             this.ref,
                                             dict,
                                             buffer,
                                             evaluator.xref,
                                          );
                                       case 8:
                                          newRefs = [
                                             {
                                                ref: this.ref,
                                                data: buffer.join(""),
                                                xfa: xfa,
                                             },
                                          ];
                                          if (parentData) {
                                             newRefs.push({
                                                ref: this.parent,
                                                data: parentData,
                                                xfa: null,
                                             });
                                          }
                                          return _context66.a(2, newRefs);
                                    }
                              },
                              _callee52,
                              this,
                           );
                        },
                     ),
                  );
                  function _saveRadioButton(_x148, _x149, _x150) {
                     return _saveRadioButton2.apply(this, arguments);
                  }
                  return _saveRadioButton;
               })(),
            },
            {
               key: "_getDefaultCheckedAppearance",
               value: function _getDefaultCheckedAppearance(params, type) {
                  var width = this.data.rect[2] - this.data.rect[0];
                  var height = this.data.rect[3] - this.data.rect[1];
                  var bbox = [0, 0, width, height];
                  var FONT_RATIO = 0.8;
                  var fontSize = Math.min(width, height) * FONT_RATIO;
                  var metrics, _char14;
                  if (type === "check") {
                     metrics = { width: 0.755 * fontSize, height: 0.705 * fontSize };
                     _char14 = "\x33";
                  } else if (type === "disc") {
                     metrics = { width: 0.791 * fontSize, height: 0.705 * fontSize };
                     _char14 = "\x6C";
                  } else {
                     unreachable(
                        "_getDefaultCheckedAppearance - unsupported type: ".concat(
                           type,
                        ),
                     );
                  }
                  var xShift = numberToString((width - metrics.width) / 2);
                  var yShift = numberToString((height - metrics.height) / 2);
                  var appearance = "q BT /PdfJsZaDb "
                     .concat(fontSize, " Tf 0 g ")
                     .concat(xShift, " ")
                     .concat(yShift, " Td (")
                     .concat(_char14, ") Tj ET Q");
                  var appearanceStreamDict = new Dict(params.xref);
                  appearanceStreamDict.set("FormType", 1);
                  appearanceStreamDict.set("Subtype", Name.get("Form"));
                  appearanceStreamDict.set("Type", Name.get("XObject"));
                  appearanceStreamDict.set("BBox", bbox);
                  appearanceStreamDict.set("Matrix", [1, 0, 0, 1, 0, 0]);
                  appearanceStreamDict.set("Length", appearance.length);
                  var resources = new Dict(params.xref);
                  var font = new Dict(params.xref);
                  font.set("PdfJsZaDb", this.fallbackFontDict);
                  resources.set("Font", font);
                  appearanceStreamDict.set("Resources", resources);
                  this.checkedAppearance = new StringStream(appearance);
                  this.checkedAppearance.dict = appearanceStreamDict;
                  this._streams.push(this.checkedAppearance);
               },
            },
            {
               key: "_processCheckBox",
               value: function _processCheckBox(params) {
                  var customAppearance = params.dict.get("AP");
                  if (!(customAppearance instanceof Dict)) {
                     return;
                  }
                  var normalAppearance = customAppearance.get("N");
                  if (!(normalAppearance instanceof Dict)) {
                     return;
                  }
                  var asValue = this._decodeFormValue(params.dict.get("AS"));
                  if (typeof asValue === "string") {
                     this.data.fieldValue = asValue;
                  }
                  var yes =
                     this.data.fieldValue !== null && this.data.fieldValue !== "Off"
                        ? this.data.fieldValue
                        : "Yes";
                  var exportValues = normalAppearance.getKeys();
                  if (exportValues.length === 0) {
                     exportValues.push("Off", yes);
                  } else if (exportValues.length === 1) {
                     if (exportValues[0] === "Off") {
                        exportValues.push(yes);
                     } else {
                        exportValues.unshift("Off");
                     }
                  } else if (exportValues.includes(yes)) {
                     exportValues.length = 0;
                     exportValues.push("Off", yes);
                  } else {
                     var otherYes = exportValues.find(function (v) {
                        return v !== "Off";
                     });
                     exportValues.length = 0;
                     exportValues.push("Off", otherYes);
                  }
                  if (!exportValues.includes(this.data.fieldValue)) {
                     this.data.fieldValue = "Off";
                  }
                  this.data.exportValue = exportValues[1];
                  var checkedAppearance = normalAppearance.get(this.data.exportValue);
                  this.checkedAppearance =
                     checkedAppearance instanceof BaseStream
                        ? checkedAppearance
                        : null;
                  var uncheckedAppearance = normalAppearance.get("Off");
                  this.uncheckedAppearance =
                     uncheckedAppearance instanceof BaseStream
                        ? uncheckedAppearance
                        : null;
                  if (this.checkedAppearance) {
                     this._streams.push(this.checkedAppearance);
                  } else {
                     this._getDefaultCheckedAppearance(params, "check");
                  }
                  if (this.uncheckedAppearance) {
                     this._streams.push(this.uncheckedAppearance);
                  }
                  this._fallbackFontDict = this.fallbackFontDict;
                  if (this.data.defaultFieldValue === null) {
                     this.data.defaultFieldValue = "Off";
                  }
               },
            },
            {
               key: "_processRadioButton",
               value: function _processRadioButton(params) {
                  this.data.buttonValue = null;
                  var fieldParent = params.dict.get("Parent");
                  if (fieldParent instanceof Dict) {
                     this.parent = params.dict.getRaw("Parent");
                     var fieldParentValue = fieldParent.get("V");
                     if (fieldParentValue instanceof Name) {
                        this.data.fieldValue = this._decodeFormValue(fieldParentValue);
                     }
                  }
                  var appearanceStates = params.dict.get("AP");
                  if (!(appearanceStates instanceof Dict)) {
                     return;
                  }
                  var normalAppearance = appearanceStates.get("N");
                  if (!(normalAppearance instanceof Dict)) {
                     return;
                  }
                  var _iterator200 = _createForOfIteratorHelper(
                        normalAppearance.getKeys(),
                     ),
                     _step200;
                  try {
                     for (_iterator200.s(); !(_step200 = _iterator200.n()).done; ) {
                        var key = _step200.value;
                        if (key !== "Off") {
                           this.data.buttonValue = this._decodeFormValue(key);
                           break;
                        }
                     }
                  } catch (err) {
                     _iterator200.e(err);
                  } finally {
                     _iterator200.f();
                  }
                  var checkedAppearance = normalAppearance.get(this.data.buttonValue);
                  this.checkedAppearance =
                     checkedAppearance instanceof BaseStream
                        ? checkedAppearance
                        : null;
                  var uncheckedAppearance = normalAppearance.get("Off");
                  this.uncheckedAppearance =
                     uncheckedAppearance instanceof BaseStream
                        ? uncheckedAppearance
                        : null;
                  if (this.checkedAppearance) {
                     this._streams.push(this.checkedAppearance);
                  } else {
                     this._getDefaultCheckedAppearance(params, "disc");
                  }
                  if (this.uncheckedAppearance) {
                     this._streams.push(this.uncheckedAppearance);
                  }
                  this._fallbackFontDict = this.fallbackFontDict;
                  if (this.data.defaultFieldValue === null) {
                     this.data.defaultFieldValue = "Off";
                  }
               },
            },
            {
               key: "_processPushButton",
               value: function _processPushButton(params) {
                  var dict = params.dict,
                     annotationGlobals = params.annotationGlobals;
                  if (
                     !dict.has("A") &&
                     !dict.has("AA") &&
                     !this.data.alternativeText
                  ) {
                     warn(
                        "Push buttons without action dictionaries are not supported",
                     );
                     return;
                  }
                  this.data.isTooltipOnly = !dict.has("A") && !dict.has("AA");
                  Catalog.parseDestDictionary({
                     destDict: dict,
                     resultObj: this.data,
                     docBaseUrl: annotationGlobals.baseUrl,
                     docAttachments: annotationGlobals.attachments,
                  });
               },
            },
            {
               key: "getFieldObject",
               value: function getFieldObject() {
                  var type = "button";
                  var exportValues;
                  if (this.data.checkBox) {
                     type = "checkbox";
                     exportValues = this.data.exportValue;
                  } else if (this.data.radioButton) {
                     type = "radiobutton";
                     exportValues = this.data.buttonValue;
                  }
                  return {
                     id: this.data.id,
                     value: this.data.fieldValue || "Off",
                     defaultValue: this.data.defaultFieldValue,
                     exportValues: exportValues,
                     editable: !this.data.readOnly,
                     name: this.data.fieldName,
                     rect: this.data.rect,
                     hidden: this.data.hidden,
                     actions: this.data.actions,
                     page: this.data.pageIndex,
                     strokeColor: this.data.borderColor,
                     fillColor: this.data.backgroundColor,
                     rotation: this.rotation,
                     type: type,
                  };
               },
            },
            {
               key: "fallbackFontDict",
               get: function get() {
                  var dict = new Dict();
                  dict.set("BaseFont", Name.get("ZapfDingbats"));
                  dict.set("Type", Name.get("FallbackType"));
                  dict.set("Subtype", Name.get("FallbackType"));
                  dict.set("Encoding", Name.get("ZapfDingbatsEncoding"));
                  return shadow(this, "fallbackFontDict", dict);
               },
            },
         ]);
      })(WidgetAnnotation);
      var ChoiceWidgetAnnotation = /*#__PURE__*/ (function (_WidgetAnnotation3) {
         function ChoiceWidgetAnnotation(params) {
            var _this272;
            _classCallCheck(this, ChoiceWidgetAnnotation);
            _this272 = _callSuper(this, ChoiceWidgetAnnotation, [params]);
            var dict = params.dict,
               xref = params.xref;
            _this272.indices = dict.getArray("I");
            _this272.hasIndices =
               Array.isArray(_this272.indices) && _this272.indices.length > 0;
            _this272.data.options = [];
            var options = getInheritableProperty({ dict: dict, key: "Opt" });
            if (Array.isArray(options)) {
               for (var i = 0, ii = options.length; i < ii; i++) {
                  var option = xref.fetchIfRef(options[i]);
                  var isOptionArray = Array.isArray(option);
                  _this272.data.options[i] = {
                     exportValue: _this272._decodeFormValue(
                        isOptionArray ? xref.fetchIfRef(option[0]) : option,
                     ),
                     displayValue: _this272._decodeFormValue(
                        isOptionArray ? xref.fetchIfRef(option[1]) : option,
                     ),
                  };
               }
            }
            if (!_this272.hasIndices) {
               if (typeof _this272.data.fieldValue === "string") {
                  _this272.data.fieldValue = [_this272.data.fieldValue];
               } else if (!_this272.data.fieldValue) {
                  _this272.data.fieldValue = [];
               }
            } else {
               _this272.data.fieldValue = [];
               var _ii11 = _this272.data.options.length;
               var _iterator201 = _createForOfIteratorHelper(_this272.indices),
                  _step201;
               try {
                  for (_iterator201.s(); !(_step201 = _iterator201.n()).done; ) {
                     var _i64 = _step201.value;
                     if (Number.isInteger(_i64) && _i64 >= 0 && _i64 < _ii11) {
                        _this272.data.fieldValue.push(
                           _this272.data.options[_i64].exportValue,
                        );
                     }
                  }
               } catch (err) {
                  _iterator201.e(err);
               } finally {
                  _iterator201.f();
               }
            }
            _this272.data.combo = _this272.hasFieldFlag(AnnotationFieldFlag.COMBO);
            _this272.data.multiSelect = _this272.hasFieldFlag(
               AnnotationFieldFlag.MULTISELECT,
            );
            _this272._hasText = true;
            return _this272;
         }
         _inherits(ChoiceWidgetAnnotation, _WidgetAnnotation3);
         return _createClass(ChoiceWidgetAnnotation, [
            {
               key: "getFieldObject",
               value: function getFieldObject() {
                  var type = this.data.combo ? "combobox" : "listbox";
                  var value =
                     this.data.fieldValue.length > 0 ? this.data.fieldValue[0] : null;
                  return {
                     id: this.data.id,
                     value: value,
                     defaultValue: this.data.defaultFieldValue,
                     editable: !this.data.readOnly,
                     name: this.data.fieldName,
                     rect: this.data.rect,
                     numItems: this.data.fieldValue.length,
                     multipleSelection: this.data.multiSelect,
                     hidden: this.data.hidden,
                     actions: this.data.actions,
                     items: this.data.options,
                     page: this.data.pageIndex,
                     strokeColor: this.data.borderColor,
                     fillColor: this.data.backgroundColor,
                     rotation: this.rotation,
                     type: type,
                  };
               },
            },
            {
               key: "amendSavedDict",
               value: function amendSavedDict(annotationStorage, dict) {
                  var _annotationStorage$ge5;
                  if (!this.hasIndices) {
                     return;
                  }
                  var values =
                     annotationStorage === null ||
                     annotationStorage === void 0 ||
                     (_annotationStorage$ge5 = annotationStorage.get(this.data.id)) ===
                     null ||
                     _annotationStorage$ge5 === void 0
                        ? void 0
                        : _annotationStorage$ge5.value;
                  if (!Array.isArray(values)) {
                     values = [values];
                  }
                  var indices = [];
                  var options = this.data.options;
                  for (var i = 0, j = 0, ii = options.length; i < ii; i++) {
                     if (options[i].exportValue === values[j]) {
                        indices.push(i);
                        j += 1;
                     }
                  }
                  dict.set("I", indices);
               },
            },
            {
               key: "_getAppearance",
               value: (function () {
                  var _getAppearance3 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee53(evaluator, task, intent, annotationStorage) {
                           var exportedValue,
                              rotation,
                              storageEntry,
                              defaultPadding,
                              defaultHPadding,
                              totalHeight,
                              totalWidth,
                              _ref98,
                              lineCount,
                              valueIndices,
                              i,
                              exportValue,
                              font,
                              defaultAppearance,
                              fontSize,
                              _lineHeight,
                              lineWidth,
                              value,
                              _iterator202,
                              _step202,
                              displayValue,
                              width,
                              _this$_computeFontSiz5,
                              _this$_computeFontSiz6,
                              lineHeight,
                              vPadding,
                              numberOfVisibleLines,
                              firstIndex,
                              minIndex,
                              maxIndex,
                              end,
                              buf,
                              _iterator203,
                              _step203,
                              index,
                              prevInfo,
                              _i65,
                              _displayValue,
                              vpadding;
                           return _regenerator().w(
                              function (_context67) {
                                 while (1)
                                    switch (_context67.n) {
                                       case 0:
                                          if (!this.data.combo) {
                                             _context67.n = 1;
                                             break;
                                          }
                                          return _context67.a(
                                             2,
                                             _superPropGet(
                                                ChoiceWidgetAnnotation,
                                                "_getAppearance",
                                                this,
                                                3,
                                             )([evaluator, task, intent, annotationStorage]),
                                          );
                                       case 1:
                                          storageEntry =
                                             annotationStorage === null ||
                                             annotationStorage === void 0
                                                ? void 0
                                                : annotationStorage.get(this.data.id);
                                          if (storageEntry) {
                                             rotation = storageEntry.rotation;
                                             exportedValue = storageEntry.value;
                                          }
                                          if (
                                             !(
                                                rotation === undefined &&
                                                exportedValue === undefined &&
                                                !this._needAppearances
                                             )
                                          ) {
                                             _context67.n = 2;
                                             break;
                                          }
                                          return _context67.a(2, null);
                                       case 2:
                                          if (exportedValue === undefined) {
                                             exportedValue = this.data.fieldValue;
                                          } else if (!Array.isArray(exportedValue)) {
                                             exportedValue = [exportedValue];
                                          }
                                          defaultPadding = 1;
                                          defaultHPadding = 2;
                                          totalHeight = this.data.rect[3] - this.data.rect[1];
                                          totalWidth = this.data.rect[2] - this.data.rect[0];
                                          if (rotation === 90 || rotation === 270) {
                                             _ref98 = [totalHeight, totalWidth];
                                             totalWidth = _ref98[0];
                                             totalHeight = _ref98[1];
                                          }
                                          lineCount = this.data.options.length;
                                          valueIndices = [];
                                          for (i = 0; i < lineCount; i++) {
                                             exportValue = this.data.options[i].exportValue;
                                             if (exportedValue.includes(exportValue)) {
                                                valueIndices.push(i);
                                             }
                                          }
                                          if (!this._defaultAppearance) {
                                             this.data.defaultAppearanceData =
                                                parseDefaultAppearance(
                                                   (this._defaultAppearance =
                                                      "/Helvetica 0 Tf 0 g"),
                                                );
                                          }
                                          _context67.n = 3;
                                          return WidgetAnnotation._getFontData(
                                             evaluator,
                                             task,
                                             this.data.defaultAppearanceData,
                                             this._fieldResources.mergedResources,
                                          );
                                       case 3:
                                          font = _context67.v;
                                          fontSize = this.data.defaultAppearanceData.fontSize;
                                          if (!fontSize) {
                                             _lineHeight =
                                                (totalHeight - defaultPadding) / lineCount;
                                             lineWidth = -1;
                                             _iterator202 = _createForOfIteratorHelper(
                                                this.data.options,
                                             );
                                             try {
                                                for (
                                                   _iterator202.s();
                                                   !(_step202 = _iterator202.n()).done;

                                                ) {
                                                   displayValue = _step202.value.displayValue;
                                                   width = this._getTextWidth(
                                                      displayValue,
                                                      font,
                                                   );
                                                   if (width > lineWidth) {
                                                      lineWidth = width;
                                                      value = displayValue;
                                                   }
                                                }
                                             } catch (err) {
                                                _iterator202.e(err);
                                             } finally {
                                                _iterator202.f();
                                             }
                                             _this$_computeFontSiz5 = this._computeFontSize(
                                                _lineHeight,
                                                totalWidth - 2 * defaultHPadding,
                                                value,
                                                font,
                                                -1,
                                             );
                                             _this$_computeFontSiz6 = _slicedToArray(
                                                _this$_computeFontSiz5,
                                                2,
                                             );
                                             defaultAppearance = _this$_computeFontSiz6[0];
                                             fontSize = _this$_computeFontSiz6[1];
                                          } else {
                                             defaultAppearance = this._defaultAppearance;
                                          }
                                          lineHeight = fontSize * LINE_FACTOR;
                                          vPadding = (lineHeight - fontSize) / 2;
                                          numberOfVisibleLines = Math.floor(
                                             totalHeight / lineHeight,
                                          );
                                          firstIndex = 0;
                                          if (valueIndices.length > 0) {
                                             minIndex = Math.min.apply(Math, valueIndices);
                                             maxIndex = Math.max.apply(Math, valueIndices);
                                             firstIndex = Math.max(
                                                0,
                                                maxIndex - numberOfVisibleLines + 1,
                                             );
                                             if (firstIndex > minIndex) {
                                                firstIndex = minIndex;
                                             }
                                          }
                                          end = Math.min(
                                             firstIndex + numberOfVisibleLines + 1,
                                             lineCount,
                                          );
                                          buf = [
                                             "/Tx BMC q",
                                             "1 1 "
                                                .concat(totalWidth, " ")
                                                .concat(totalHeight, " re W n"),
                                          ];
                                          if (valueIndices.length) {
                                             buf.push("0.600006 0.756866 0.854904 rg");
                                             _iterator203 =
                                                _createForOfIteratorHelper(valueIndices);
                                             try {
                                                for (
                                                   _iterator203.s();
                                                   !(_step203 = _iterator203.n()).done;

                                                ) {
                                                   index = _step203.value;
                                                   if (firstIndex <= index && index < end) {
                                                      buf.push(
                                                         "1 "
                                                            .concat(
                                                               totalHeight -
                                                               (index - firstIndex + 1) *
                                                               lineHeight,
                                                               " ",
                                                            )
                                                            .concat(totalWidth, " ")
                                                            .concat(lineHeight, " re f"),
                                                      );
                                                   }
                                                }
                                             } catch (err) {
                                                _iterator203.e(err);
                                             } finally {
                                                _iterator203.f();
                                             }
                                          }
                                          buf.push(
                                             "BT",
                                             defaultAppearance,
                                             "1 0 0 1 0 ".concat(totalHeight, " Tm"),
                                          );
                                          prevInfo = { shift: 0 };
                                          for (_i65 = firstIndex; _i65 < end; _i65++) {
                                             _displayValue =
                                                this.data.options[_i65].displayValue;
                                             vpadding = _i65 === firstIndex ? vPadding : 0;
                                             buf.push(
                                                this._renderText(
                                                   _displayValue,
                                                   font,
                                                   fontSize,
                                                   totalWidth,
                                                   0,
                                                   prevInfo,
                                                   defaultHPadding,
                                                   -lineHeight + vpadding,
                                                ),
                                             );
                                          }
                                          buf.push("ET Q EMC");
                                          return _context67.a(2, buf.join("\n"));
                                    }
                              },
                              _callee53,
                              this,
                           );
                        },
                     ),
                  );
                  function _getAppearance(_x151, _x152, _x153, _x154) {
                     return _getAppearance3.apply(this, arguments);
                  }
                  return _getAppearance;
               })(),
            },
         ]);
      })(WidgetAnnotation);
      var SignatureWidgetAnnotation = /*#__PURE__*/ (function (
         _WidgetAnnotation4,
      ) {
         function SignatureWidgetAnnotation(params) {
            var _this273;
            _classCallCheck(this, SignatureWidgetAnnotation);
            _this273 = _callSuper(this, SignatureWidgetAnnotation, [params]);
            _this273.data.fieldValue = null;
            _this273.data.hasOwnCanvas = _this273.data.noRotate;
            _this273.data.noHTML = !_this273.data.hasOwnCanvas;
            return _this273;
         }
         _inherits(SignatureWidgetAnnotation, _WidgetAnnotation4);
         return _createClass(SignatureWidgetAnnotation, [
            {
               key: "getFieldObject",
               value: function getFieldObject() {
                  return {
                     id: this.data.id,
                     value: null,
                     page: this.data.pageIndex,
                     type: "signature",
                  };
               },
            },
         ]);
      })(WidgetAnnotation);
      var TextAnnotation = /*#__PURE__*/ (function (_MarkupAnnotation) {
         function TextAnnotation(params) {
            var _this274;
            _classCallCheck(this, TextAnnotation);
            var DEFAULT_ICON_SIZE = 22;
            _this274 = _callSuper(this, TextAnnotation, [params]);
            _this274.data.noRotate = true;
            _this274.data.hasOwnCanvas = _this274.data.noRotate;
            _this274.data.noHTML = false;
            var dict = params.dict;
            _this274.data.annotationType = AnnotationType.TEXT;
            if (_this274.data.hasAppearance) {
               _this274.data.name = "NoIcon";
            } else {
               _this274.data.rect[1] = _this274.data.rect[3] - DEFAULT_ICON_SIZE;
               _this274.data.rect[2] = _this274.data.rect[0] + DEFAULT_ICON_SIZE;
               _this274.data.name = dict.has("Name")
                  ? dict.get("Name").name
                  : "Note";
            }
            if (dict.has("State")) {
               _this274.data.state = dict.get("State") || null;
               _this274.data.stateModel = dict.get("StateModel") || null;
            } else {
               _this274.data.state = null;
               _this274.data.stateModel = null;
            }
            return _this274;
         }
         _inherits(TextAnnotation, _MarkupAnnotation);
         return _createClass(TextAnnotation);
      })(MarkupAnnotation);
      var LinkAnnotation = /*#__PURE__*/ (function (_Annotation3) {
         function LinkAnnotation(params) {
            var _this275$data;
            var _this275;
            _classCallCheck(this, LinkAnnotation);
            _this275 = _callSuper(this, LinkAnnotation, [params]);
            var dict = params.dict,
               annotationGlobals = params.annotationGlobals;
            _this275.data.annotationType = AnnotationType.LINK;
            _this275.data.noHTML = false;
            var quadPoints = getQuadPoints(dict, _this275.rectangle);
            if (quadPoints) {
               _this275.data.quadPoints = quadPoints;
            }
            (_this275$data = _this275.data).borderColor ||
            (_this275$data.borderColor = _this275.data.color);
            Catalog.parseDestDictionary({
               destDict: dict,
               resultObj: _this275.data,
               docBaseUrl: annotationGlobals.baseUrl,
               docAttachments: annotationGlobals.attachments,
            });
            return _this275;
         }
         _inherits(LinkAnnotation, _Annotation3);
         return _createClass(LinkAnnotation);
      })(Annotation);
      var PopupAnnotation = /*#__PURE__*/ (function (_Annotation4) {
         function PopupAnnotation(params) {
            var _this276;
            _classCallCheck(this, PopupAnnotation);
            _this276 = _callSuper(this, PopupAnnotation, [params]);
            var dict = params.dict;
            _this276.data.annotationType = AnnotationType.POPUP;
            _this276.data.noHTML = false;
            if (
               _this276.data.rect[0] === _this276.data.rect[2] ||
               _this276.data.rect[1] === _this276.data.rect[3]
            ) {
               _this276.data.rect = null;
            }
            var parentItem = dict.get("Parent");
            if (!parentItem) {
               warn("Popup annotation has a missing or invalid parent annotation.");
               return _possibleConstructorReturn(_this276);
            }
            var parentRect = parentItem.getArray("Rect");
            _this276.data.parentRect =
               Array.isArray(parentRect) && parentRect.length === 4
                  ? Util.normalizeRect(parentRect)
                  : null;
            var rt = parentItem.get("RT");
            if (isName(rt, AnnotationReplyType.GROUP)) {
               parentItem = parentItem.get("IRT");
            }
            if (!parentItem.has("M")) {
               _this276.data.modificationDate = null;
            } else {
               _this276.setModificationDate(parentItem.get("M"));
               _this276.data.modificationDate = _this276.modificationDate;
            }
            if (!parentItem.has("C")) {
               _this276.data.color = null;
            } else {
               _this276.setColor(parentItem.getArray("C"));
               _this276.data.color = _this276.color;
            }
            if (!_this276.viewable) {
               var parentFlags = parentItem.get("F");
               if (_this276._isViewable(parentFlags)) {
                  _this276.setFlags(parentFlags);
               }
            }
            _this276.setTitle(parentItem.get("T"));
            _this276.data.titleObj = _this276._title;
            _this276.setContents(parentItem.get("Contents"));
            _this276.data.contentsObj = _this276._contents;
            if (parentItem.has("RC")) {
               _this276.data.richText = XFAFactory.getRichTextAsHtml(
                  parentItem.get("RC"),
               );
            }
            _this276.data.open = !!dict.get("Open");
            return _this276;
         }
         _inherits(PopupAnnotation, _Annotation4);
         return _createClass(PopupAnnotation);
      })(Annotation);
      var FreeTextAnnotation = /*#__PURE__*/ (function (_MarkupAnnotation2) {
         function FreeTextAnnotation(params) {
            var _this277;
            _classCallCheck(this, FreeTextAnnotation);
            _this277 = _callSuper(this, FreeTextAnnotation, [params]);
            _this277.data.hasOwnCanvas = !_this277.data.noHTML;
            _this277.data.noHTML = false;
            var evaluatorOptions = params.evaluatorOptions,
               xref = params.xref;
            _this277.data.annotationType = AnnotationType.FREETEXT;
            _this277.setDefaultAppearance(params);
            _this277._hasAppearance = !!_this277.appearance;
            if (_this277._hasAppearance) {
               var _parseAppearanceStrea = parseAppearanceStream(
                     _this277.appearance,
                     evaluatorOptions,
                     xref,
                  ),
                  fontColor = _parseAppearanceStrea.fontColor,
                  fontSize = _parseAppearanceStrea.fontSize;
               _this277.data.defaultAppearanceData.fontColor = fontColor;
               _this277.data.defaultAppearanceData.fontSize = fontSize || 10;
            } else {
               var _this277$data$default;
               (_this277$data$default = _this277.data.defaultAppearanceData)
                  .fontSize || (_this277$data$default.fontSize = 10);
               var _this277$data$default2 = _this277.data.defaultAppearanceData,
                  _fontColor = _this277$data$default2.fontColor,
                  _fontSize = _this277$data$default2.fontSize;
               if (_this277._contents.str) {
                  _this277.data.textContent = _this277._contents.str
                     .split(/\r\n?|\n/)
                     .map(function (line) {
                        return line.trimEnd();
                     });
                  var _FakeUnicodeFont$getF = FakeUnicodeFont.getFirstPositionInfo(
                        _this277.rectangle,
                        _this277.rotation,
                        _fontSize,
                     ),
                     coords = _FakeUnicodeFont$getF.coords,
                     bbox = _FakeUnicodeFont$getF.bbox,
                     matrix = _FakeUnicodeFont$getF.matrix;
                  _this277.data.textPosition = _this277._transformPoint(
                     coords,
                     bbox,
                     matrix,
                  );
               }
               if (_this277._isOffscreenCanvasSupported) {
                  var strokeAlpha = params.dict.get("CA");
                  var fakeUnicodeFont = new FakeUnicodeFont(xref, "sans-serif");
                  _this277.appearance = fakeUnicodeFont.createAppearance(
                     _this277._contents.str,
                     _this277.rectangle,
                     _this277.rotation,
                     _fontSize,
                     _fontColor,
                     strokeAlpha,
                  );
                  _this277._streams.push(_this277.appearance);
               } else {
                  warn(
                     "FreeTextAnnotation: OffscreenCanvas is not supported, annotation may not render correctly.",
                  );
               }
            }
            return _this277;
         }
         _inherits(FreeTextAnnotation, _MarkupAnnotation2);
         return _createClass(
            FreeTextAnnotation,
            [
               {
                  key: "hasTextContent",
                  get: function get() {
                     return this._hasAppearance;
                  },
               },
            ],
            [
               {
                  key: "createNewDict",
                  value: function createNewDict(annotation, xref, _ref99) {
                     var apRef = _ref99.apRef,
                        ap = _ref99.ap;
                     var color = annotation.color,
                        fontSize = annotation.fontSize,
                        rect = annotation.rect,
                        rotation = annotation.rotation,
                        user = annotation.user,
                        value = annotation.value;
                     var freetext = new Dict(xref);
                     freetext.set("Type", Name.get("Annot"));
                     freetext.set("Subtype", Name.get("FreeText"));
                     freetext.set("CreationDate", "D:".concat(getModificationDate()));
                     freetext.set("Rect", rect);
                     var da = "/Helv "
                        .concat(fontSize, " Tf ")
                        .concat(getPdfColor(color, true));
                     freetext.set("DA", da);
                     freetext.set(
                        "Contents",
                        isAscii(value) ? value : stringToUTF16String(value, true),
                     );
                     freetext.set("F", 4);
                     freetext.set("Border", [0, 0, 0]);
                     freetext.set("Rotate", rotation);
                     if (user) {
                        freetext.set(
                           "T",
                           isAscii(user) ? user : stringToUTF16String(user, true),
                        );
                     }
                     if (apRef || ap) {
                        var n = new Dict(xref);
                        freetext.set("AP", n);
                        if (apRef) {
                           n.set("N", apRef);
                        } else {
                           n.set("N", ap);
                        }
                     }
                     return freetext;
                  },
               },
               {
                  key: "createNewAppearanceStream",
                  value: (function () {
                     var _createNewAppearanceStream = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(
                           function _callee54(annotation, xref, params) {
                              var baseFontRef,
                                 evaluator,
                                 task,
                                 color,
                                 fontSize,
                                 rect,
                                 rotation,
                                 value,
                                 resources,
                                 font,
                                 baseFont,
                                 helv,
                                 _rect3,
                                 x1,
                                 y1,
                                 x2,
                                 y2,
                                 w,
                                 h,
                                 _ref100,
                                 lines,
                                 scale,
                                 totalWidth,
                                 encodedLines,
                                 _iterator204,
                                 _step204,
                                 _line3,
                                 encoded,
                                 lineWidth,
                                 glyphs,
                                 _iterator205,
                                 _step205,
                                 glyph,
                                 hscale,
                                 vscale,
                                 lineHeight,
                                 lineAscent,
                                 totalHeight,
                                 fscale,
                                 newFontSize,
                                 firstPoint,
                                 clipBox,
                                 matrix,
                                 buffer,
                                 vShift,
                                 i,
                                 ii,
                                 line,
                                 appearance,
                                 appearanceStreamDict,
                                 ap,
                                 _t51,
                                 _t52;
                              return _regenerator().w(
                                 function (_context68) {
                                    while (1)
                                       switch ((_context68.p = _context68.n)) {
                                          case 0:
                                             ((baseFontRef = params.baseFontRef),
                                                (evaluator = params.evaluator),
                                                (task = params.task));
                                             ((color = annotation.color),
                                                (fontSize = annotation.fontSize),
                                                (rect = annotation.rect),
                                                (rotation = annotation.rotation),
                                                (value = annotation.value));
                                             resources = new Dict(xref);
                                             font = new Dict(xref);
                                             if (baseFontRef) {
                                                font.set("Helv", baseFontRef);
                                             } else {
                                                baseFont = new Dict(xref);
                                                baseFont.set("BaseFont", Name.get("Helvetica"));
                                                baseFont.set("Type", Name.get("Font"));
                                                baseFont.set("Subtype", Name.get("Type1"));
                                                baseFont.set(
                                                   "Encoding",
                                                   Name.get("WinAnsiEncoding"),
                                                );
                                                font.set("Helv", baseFont);
                                             }
                                             resources.set("Font", font);
                                             _context68.n = 1;
                                             return WidgetAnnotation._getFontData(
                                                evaluator,
                                                task,
                                                { fontName: "Helv", fontSize: fontSize },
                                                resources,
                                             );
                                          case 1:
                                             helv = _context68.v;
                                             ((_rect3 = _slicedToArray(rect, 4)),
                                                (x1 = _rect3[0]),
                                                (y1 = _rect3[1]),
                                                (x2 = _rect3[2]),
                                                (y2 = _rect3[3]));
                                             w = x2 - x1;
                                             h = y2 - y1;
                                             if (rotation % 180 !== 0) {
                                                _ref100 = [h, w];
                                                w = _ref100[0];
                                                h = _ref100[1];
                                             }
                                             lines = value.split("\n");
                                             scale = fontSize / 1000;
                                             totalWidth = -Infinity;
                                             encodedLines = [];
                                             _iterator204 = _createForOfIteratorHelper(lines);
                                             _context68.p = 2;
                                             _iterator204.s();
                                          case 3:
                                             if ((_step204 = _iterator204.n()).done) {
                                                _context68.n = 6;
                                                break;
                                             }
                                             _line3 = _step204.value;
                                             encoded = helv.encodeString(_line3);
                                             if (!(encoded.length > 1)) {
                                                _context68.n = 4;
                                                break;
                                             }
                                             return _context68.a(2, null);
                                          case 4:
                                             _line3 = encoded.join("");
                                             encodedLines.push(_line3);
                                             lineWidth = 0;
                                             glyphs = helv.charsToGlyphs(_line3);
                                             _iterator205 = _createForOfIteratorHelper(glyphs);
                                             try {
                                                for (
                                                   _iterator205.s();
                                                   !(_step205 = _iterator205.n()).done;

                                                ) {
                                                   glyph = _step205.value;
                                                   lineWidth += glyph.width * scale;
                                                }
                                             } catch (err) {
                                                _iterator205.e(err);
                                             } finally {
                                                _iterator205.f();
                                             }
                                             totalWidth = Math.max(totalWidth, lineWidth);
                                          case 5:
                                             _context68.n = 3;
                                             break;
                                          case 6:
                                             _context68.n = 8;
                                             break;
                                          case 7:
                                             _context68.p = 7;
                                             _t51 = _context68.v;
                                             _iterator204.e(_t51);
                                          case 8:
                                             _context68.p = 8;
                                             _iterator204.f();
                                             return _context68.f(8);
                                          case 9:
                                             hscale = 1;
                                             if (totalWidth > w) {
                                                hscale = w / totalWidth;
                                             }
                                             vscale = 1;
                                             lineHeight = LINE_FACTOR * fontSize;
                                             lineAscent =
                                                (LINE_FACTOR - LINE_DESCENT_FACTOR) * fontSize;
                                             totalHeight = lineHeight * lines.length;
                                             if (totalHeight > h) {
                                                vscale = h / totalHeight;
                                             }
                                             fscale = Math.min(hscale, vscale);
                                             newFontSize = fontSize * fscale;
                                             _t52 = rotation;
                                             _context68.n =
                                                _t52 === 0
                                                   ? 10
                                                   : _t52 === 90
                                                      ? 11
                                                      : _t52 === 180
                                                         ? 12
                                                         : _t52 === 270
                                                            ? 13
                                                            : 14;
                                             break;
                                          case 10:
                                             matrix = [1, 0, 0, 1];
                                             clipBox = [rect[0], rect[1], w, h];
                                             firstPoint = [rect[0], rect[3] - lineAscent];
                                             return _context68.a(3, 14);
                                          case 11:
                                             matrix = [0, 1, -1, 0];
                                             clipBox = [rect[1], -rect[2], w, h];
                                             firstPoint = [rect[1], -rect[0] - lineAscent];
                                             return _context68.a(3, 14);
                                          case 12:
                                             matrix = [-1, 0, 0, -1];
                                             clipBox = [-rect[2], -rect[3], w, h];
                                             firstPoint = [-rect[2], -rect[1] - lineAscent];
                                             return _context68.a(3, 14);
                                          case 13:
                                             matrix = [0, -1, 1, 0];
                                             clipBox = [-rect[3], rect[0], w, h];
                                             firstPoint = [-rect[3], rect[2] - lineAscent];
                                             return _context68.a(3, 14);
                                          case 14:
                                             buffer = [
                                                "q",
                                                "".concat(matrix.join(" "), " 0 0 cm"),
                                                "".concat(clipBox.join(" "), " re W n"),
                                                "BT",
                                                "".concat(getPdfColor(color, true)),
                                                "0 Tc /Helv ".concat(
                                                   numberToString(newFontSize),
                                                   " Tf",
                                                ),
                                             ];
                                             buffer.push(
                                                ""
                                                   .concat(firstPoint.join(" "), " Td (")
                                                   .concat(
                                                      escapeString(encodedLines[0]),
                                                      ") Tj",
                                                   ),
                                             );
                                             vShift = numberToString(lineHeight);
                                             for (
                                                i = 1, ii = encodedLines.length;
                                                i < ii;
                                                i++
                                             ) {
                                                line = encodedLines[i];
                                                buffer.push(
                                                   "0 -"
                                                      .concat(vShift, " Td (")
                                                      .concat(escapeString(line), ") Tj"),
                                                );
                                             }
                                             buffer.push("ET", "Q");
                                             appearance = buffer.join("\n");
                                             appearanceStreamDict = new Dict(xref);
                                             appearanceStreamDict.set("FormType", 1);
                                             appearanceStreamDict.set(
                                                "Subtype",
                                                Name.get("Form"),
                                             );
                                             appearanceStreamDict.set(
                                                "Type",
                                                Name.get("XObject"),
                                             );
                                             appearanceStreamDict.set("BBox", rect);
                                             appearanceStreamDict.set("Resources", resources);
                                             appearanceStreamDict.set("Matrix", [
                                                1,
                                                0,
                                                0,
                                                1,
                                                -rect[0],
                                                -rect[1],
                                             ]);
                                             ap = new StringStream(appearance);
                                             ap.dict = appearanceStreamDict;
                                             return _context68.a(2, ap);
                                       }
                                 },
                                 _callee54,
                                 null,
                                 [[2, 7, 8, 9]],
                              );
                           },
                        ),
                     );
                     function createNewAppearanceStream(_x155, _x156, _x157) {
                        return _createNewAppearanceStream.apply(this, arguments);
                     }
                     return createNewAppearanceStream;
                  })(),
               },
            ],
         );
      })(MarkupAnnotation);
      var LineAnnotation = /*#__PURE__*/ (function (_MarkupAnnotation3) {
         function LineAnnotation(params) {
            var _this278;
            _classCallCheck(this, LineAnnotation);
            _this278 = _callSuper(this, LineAnnotation, [params]);
            var dict = params.dict,
               xref = params.xref;
            _this278.data.annotationType = AnnotationType.LINE;
            _this278.data.hasOwnCanvas = _this278.data.noRotate;
            _this278.data.noHTML = false;
            var lineCoordinates = dict.getArray("L");
            _this278.data.lineCoordinates = Util.normalizeRect(lineCoordinates);
            _this278.setLineEndings(dict.getArray("LE"));
            _this278.data.lineEndings = _this278.lineEndings;
            if (!_this278.appearance) {
               var strokeColor = _this278.color
                  ? getPdfColorArray(_this278.color)
                  : [0, 0, 0];
               var strokeAlpha = dict.get("CA");
               var interiorColor = getRgbColor(dict.getArray("IC"), null);
               var fillColor = interiorColor
                  ? getPdfColorArray(interiorColor)
                  : null;
               var fillAlpha = fillColor ? strokeAlpha : null;
               var borderWidth = _this278.borderStyle.width || 1,
                  borderAdjust = 2 * borderWidth;
               var bbox = [
                  _this278.data.lineCoordinates[0] - borderAdjust,
                  _this278.data.lineCoordinates[1] - borderAdjust,
                  _this278.data.lineCoordinates[2] + borderAdjust,
                  _this278.data.lineCoordinates[3] + borderAdjust,
               ];
               if (!Util.intersect(_this278.rectangle, bbox)) {
                  _this278.rectangle = bbox;
               }
               _this278._setDefaultAppearance({
                  xref: xref,
                  extra: "".concat(borderWidth, " w"),
                  strokeColor: strokeColor,
                  fillColor: fillColor,
                  strokeAlpha: strokeAlpha,
                  fillAlpha: fillAlpha,
                  pointsCallback: function pointsCallback(buffer, points) {
                     buffer.push(
                        ""
                           .concat(lineCoordinates[0], " ")
                           .concat(lineCoordinates[1], " m"),
                        ""
                           .concat(lineCoordinates[2], " ")
                           .concat(lineCoordinates[3], " l"),
                        "S",
                     );
                     return [
                        points[0].x - borderWidth,
                        points[1].x + borderWidth,
                        points[3].y - borderWidth,
                        points[1].y + borderWidth,
                     ];
                  },
               });
            }
            return _this278;
         }
         _inherits(LineAnnotation, _MarkupAnnotation3);
         return _createClass(LineAnnotation);
      })(MarkupAnnotation);
      var SquareAnnotation = /*#__PURE__*/ (function (_MarkupAnnotation4) {
         function SquareAnnotation(params) {
            var _this279;
            _classCallCheck(this, SquareAnnotation);
            _this279 = _callSuper(this, SquareAnnotation, [params]);
            var dict = params.dict,
               xref = params.xref;
            _this279.data.annotationType = AnnotationType.SQUARE;
            _this279.data.hasOwnCanvas = _this279.data.noRotate;
            _this279.data.noHTML = false;
            if (!_this279.appearance) {
               var strokeColor = _this279.color
                  ? getPdfColorArray(_this279.color)
                  : [0, 0, 0];
               var strokeAlpha = dict.get("CA");
               var interiorColor = getRgbColor(dict.getArray("IC"), null);
               var fillColor = interiorColor
                  ? getPdfColorArray(interiorColor)
                  : null;
               var fillAlpha = fillColor ? strokeAlpha : null;
               if (_this279.borderStyle.width === 0 && !fillColor) {
                  return _possibleConstructorReturn(_this279);
               }
               _this279._setDefaultAppearance({
                  xref: xref,
                  extra: "".concat(_this279.borderStyle.width, " w"),
                  strokeColor: strokeColor,
                  fillColor: fillColor,
                  strokeAlpha: strokeAlpha,
                  fillAlpha: fillAlpha,
                  pointsCallback: function pointsCallback(buffer, points) {
                     var x = points[2].x + _this279.borderStyle.width / 2;
                     var y = points[2].y + _this279.borderStyle.width / 2;
                     var width =
                        points[3].x - points[2].x - _this279.borderStyle.width;
                     var height =
                        points[1].y - points[3].y - _this279.borderStyle.width;
                     buffer.push(
                        ""
                           .concat(x, " ")
                           .concat(y, " ")
                           .concat(width, " ")
                           .concat(height, " re"),
                     );
                     if (fillColor) {
                        buffer.push("B");
                     } else {
                        buffer.push("S");
                     }
                     return [points[0].x, points[1].x, points[3].y, points[1].y];
                  },
               });
            }
            return _this279;
         }
         _inherits(SquareAnnotation, _MarkupAnnotation4);
         return _createClass(SquareAnnotation);
      })(MarkupAnnotation);
      var CircleAnnotation = /*#__PURE__*/ (function (_MarkupAnnotation5) {
         function CircleAnnotation(params) {
            var _this280;
            _classCallCheck(this, CircleAnnotation);
            _this280 = _callSuper(this, CircleAnnotation, [params]);
            var dict = params.dict,
               xref = params.xref;
            _this280.data.annotationType = AnnotationType.CIRCLE;
            if (!_this280.appearance) {
               var strokeColor = _this280.color
                  ? getPdfColorArray(_this280.color)
                  : [0, 0, 0];
               var strokeAlpha = dict.get("CA");
               var interiorColor = getRgbColor(dict.getArray("IC"), null);
               var fillColor = interiorColor
                  ? getPdfColorArray(interiorColor)
                  : null;
               var fillAlpha = fillColor ? strokeAlpha : null;
               if (_this280.borderStyle.width === 0 && !fillColor) {
                  return _possibleConstructorReturn(_this280);
               }
               var controlPointsDistance = (4 / 3) * Math.tan(Math.PI / (2 * 4));
               _this280._setDefaultAppearance({
                  xref: xref,
                  extra: "".concat(_this280.borderStyle.width, " w"),
                  strokeColor: strokeColor,
                  fillColor: fillColor,
                  strokeAlpha: strokeAlpha,
                  fillAlpha: fillAlpha,
                  pointsCallback: function pointsCallback(buffer, points) {
                     var x0 = points[0].x + _this280.borderStyle.width / 2;
                     var y0 = points[0].y - _this280.borderStyle.width / 2;
                     var x1 = points[3].x - _this280.borderStyle.width / 2;
                     var y1 = points[3].y + _this280.borderStyle.width / 2;
                     var xMid = x0 + (x1 - x0) / 2;
                     var yMid = y0 + (y1 - y0) / 2;
                     var xOffset = ((x1 - x0) / 2) * controlPointsDistance;
                     var yOffset = ((y1 - y0) / 2) * controlPointsDistance;
                     buffer.push(
                        "".concat(xMid, " ").concat(y1, " m"),
                        ""
                           .concat(xMid + xOffset, " ")
                           .concat(y1, " ")
                           .concat(x1, " ")
                           .concat(yMid + yOffset, " ")
                           .concat(x1, " ")
                           .concat(yMid, " c"),
                        ""
                           .concat(x1, " ")
                           .concat(yMid - yOffset, " ")
                           .concat(xMid + xOffset, " ")
                           .concat(y0, " ")
                           .concat(xMid, " ")
                           .concat(y0, " c"),
                        ""
                           .concat(xMid - xOffset, " ")
                           .concat(y0, " ")
                           .concat(x0, " ")
                           .concat(yMid - yOffset, " ")
                           .concat(x0, " ")
                           .concat(yMid, " c"),
                        ""
                           .concat(x0, " ")
                           .concat(yMid + yOffset, " ")
                           .concat(xMid - xOffset, " ")
                           .concat(y1, " ")
                           .concat(xMid, " ")
                           .concat(y1, " c"),
                        "h",
                     );
                     if (fillColor) {
                        buffer.push("B");
                     } else {
                        buffer.push("S");
                     }
                     return [points[0].x, points[1].x, points[3].y, points[1].y];
                  },
               });
            }
            return _this280;
         }
         _inherits(CircleAnnotation, _MarkupAnnotation5);
         return _createClass(CircleAnnotation);
      })(MarkupAnnotation);
      var PolylineAnnotation = /*#__PURE__*/ (function (_MarkupAnnotation6) {
         function PolylineAnnotation(params) {
            var _this281;
            _classCallCheck(this, PolylineAnnotation);
            _this281 = _callSuper(this, PolylineAnnotation, [params]);
            var dict = params.dict,
               xref = params.xref;
            _this281.data.annotationType = AnnotationType.POLYLINE;
            _this281.data.hasOwnCanvas = _this281.data.noRotate;
            _this281.data.noHTML = false;
            _this281.data.vertices = [];
            if (!(_this281 instanceof PolygonAnnotation)) {
               _this281.setLineEndings(dict.getArray("LE"));
               _this281.data.lineEndings = _this281.lineEndings;
            }
            var rawVertices = dict.getArray("Vertices");
            if (!Array.isArray(rawVertices)) {
               return _possibleConstructorReturn(_this281);
            }
            for (var i = 0, ii = rawVertices.length; i < ii; i += 2) {
               _this281.data.vertices.push({
                  x: rawVertices[i],
                  y: rawVertices[i + 1],
               });
            }
            if (!_this281.appearance) {
               var strokeColor = _this281.color
                  ? getPdfColorArray(_this281.color)
                  : [0, 0, 0];
               var strokeAlpha = dict.get("CA");
               var borderWidth = _this281.borderStyle.width || 1,
                  borderAdjust = 2 * borderWidth;
               var bbox = [Infinity, Infinity, -Infinity, -Infinity];
               var _iterator206 = _createForOfIteratorHelper(_this281.data.vertices),
                  _step206;
               try {
                  for (_iterator206.s(); !(_step206 = _iterator206.n()).done; ) {
                     var vertex = _step206.value;
                     bbox[0] = Math.min(bbox[0], vertex.x - borderAdjust);
                     bbox[1] = Math.min(bbox[1], vertex.y - borderAdjust);
                     bbox[2] = Math.max(bbox[2], vertex.x + borderAdjust);
                     bbox[3] = Math.max(bbox[3], vertex.y + borderAdjust);
                  }
               } catch (err) {
                  _iterator206.e(err);
               } finally {
                  _iterator206.f();
               }
               if (!Util.intersect(_this281.rectangle, bbox)) {
                  _this281.rectangle = bbox;
               }
               _this281._setDefaultAppearance({
                  xref: xref,
                  extra: "".concat(borderWidth, " w"),
                  strokeColor: strokeColor,
                  strokeAlpha: strokeAlpha,
                  pointsCallback: function pointsCallback(buffer, points) {
                     var vertices = _this281.data.vertices;
                     for (
                        var _i66 = 0, _ii12 = vertices.length;
                        _i66 < _ii12;
                        _i66++
                     ) {
                        buffer.push(
                           ""
                              .concat(vertices[_i66].x, " ")
                              .concat(vertices[_i66].y, " ")
                              .concat(_i66 === 0 ? "m" : "l"),
                        );
                     }
                     buffer.push("S");
                     return [points[0].x, points[1].x, points[3].y, points[1].y];
                  },
               });
            }
            return _this281;
         }
         _inherits(PolylineAnnotation, _MarkupAnnotation6);
         return _createClass(PolylineAnnotation);
      })(MarkupAnnotation);
      var PolygonAnnotation = /*#__PURE__*/ (function (_PolylineAnnotation) {
         function PolygonAnnotation(params) {
            var _this282;
            _classCallCheck(this, PolygonAnnotation);
            _this282 = _callSuper(this, PolygonAnnotation, [params]);
            _this282.data.annotationType = AnnotationType.POLYGON;
            return _this282;
         }
         _inherits(PolygonAnnotation, _PolylineAnnotation);
         return _createClass(PolygonAnnotation);
      })(PolylineAnnotation);
      var CaretAnnotation = /*#__PURE__*/ (function (_MarkupAnnotation7) {
         function CaretAnnotation(params) {
            var _this283;
            _classCallCheck(this, CaretAnnotation);
            _this283 = _callSuper(this, CaretAnnotation, [params]);
            _this283.data.annotationType = AnnotationType.CARET;
            return _this283;
         }
         _inherits(CaretAnnotation, _MarkupAnnotation7);
         return _createClass(CaretAnnotation);
      })(MarkupAnnotation);
      var InkAnnotation = /*#__PURE__*/ (function (_MarkupAnnotation8) {
         function InkAnnotation(params) {
            var _this284;
            _classCallCheck(this, InkAnnotation);
            _this284 = _callSuper(this, InkAnnotation, [params]);
            _this284.data.hasOwnCanvas = _this284.data.noRotate;
            _this284.data.noHTML = false;
            var dict = params.dict,
               xref = params.xref;
            _this284.data.annotationType = AnnotationType.INK;
            _this284.data.inkLists = [];
            var rawInkLists = dict.getArray("InkList");
            if (!Array.isArray(rawInkLists)) {
               return _possibleConstructorReturn(_this284);
            }
            for (var i = 0, ii = rawInkLists.length; i < ii; ++i) {
               _this284.data.inkLists.push([]);
               for (var j = 0, jj = rawInkLists[i].length; j < jj; j += 2) {
                  _this284.data.inkLists[i].push({
                     x: xref.fetchIfRef(rawInkLists[i][j]),
                     y: xref.fetchIfRef(rawInkLists[i][j + 1]),
                  });
               }
            }
            if (!_this284.appearance) {
               var strokeColor = _this284.color
                  ? getPdfColorArray(_this284.color)
                  : [0, 0, 0];
               var strokeAlpha = dict.get("CA");
               var borderWidth = _this284.borderStyle.width || 1,
                  borderAdjust = 2 * borderWidth;
               var bbox = [Infinity, Infinity, -Infinity, -Infinity];
               var _iterator207 = _createForOfIteratorHelper(_this284.data.inkLists),
                  _step207;
               try {
                  for (_iterator207.s(); !(_step207 = _iterator207.n()).done; ) {
                     var inkLists = _step207.value;
                     var _iterator209 = _createForOfIteratorHelper(inkLists),
                        _step209;
                     try {
                        for (_iterator209.s(); !(_step209 = _iterator209.n()).done; ) {
                           var vertex = _step209.value;
                           bbox[0] = Math.min(bbox[0], vertex.x - borderAdjust);
                           bbox[1] = Math.min(bbox[1], vertex.y - borderAdjust);
                           bbox[2] = Math.max(bbox[2], vertex.x + borderAdjust);
                           bbox[3] = Math.max(bbox[3], vertex.y + borderAdjust);
                        }
                     } catch (err) {
                        _iterator209.e(err);
                     } finally {
                        _iterator209.f();
                     }
                  }
               } catch (err) {
                  _iterator207.e(err);
               } finally {
                  _iterator207.f();
               }
               if (!Util.intersect(_this284.rectangle, bbox)) {
                  _this284.rectangle = bbox;
               }
               _this284._setDefaultAppearance({
                  xref: xref,
                  extra: "".concat(borderWidth, " w"),
                  strokeColor: strokeColor,
                  strokeAlpha: strokeAlpha,
                  pointsCallback: function pointsCallback(buffer, points) {
                     var _iterator208 = _createForOfIteratorHelper(
                           _this284.data.inkLists,
                        ),
                        _step208;
                     try {
                        for (_iterator208.s(); !(_step208 = _iterator208.n()).done; ) {
                           var inkList = _step208.value;
                           for (
                              var _i67 = 0, _ii13 = inkList.length;
                              _i67 < _ii13;
                              _i67++
                           ) {
                              buffer.push(
                                 ""
                                    .concat(inkList[_i67].x, " ")
                                    .concat(inkList[_i67].y, " ")
                                    .concat(_i67 === 0 ? "m" : "l"),
                              );
                           }
                           buffer.push("S");
                        }
                     } catch (err) {
                        _iterator208.e(err);
                     } finally {
                        _iterator208.f();
                     }
                     return [points[0].x, points[1].x, points[3].y, points[1].y];
                  },
               });
            }
            return _this284;
         }
         _inherits(InkAnnotation, _MarkupAnnotation8);
         return _createClass(InkAnnotation, null, [
            {
               key: "createNewDict",
               value: function createNewDict(annotation, xref, _ref101) {
                  var apRef = _ref101.apRef,
                     ap = _ref101.ap;
                  var color = annotation.color,
                     opacity = annotation.opacity,
                     paths = annotation.paths,
                     outlines = annotation.outlines,
                     rect = annotation.rect,
                     rotation = annotation.rotation,
                     thickness = annotation.thickness;
                  var ink = new Dict(xref);
                  ink.set("Type", Name.get("Annot"));
                  ink.set("Subtype", Name.get("Ink"));
                  ink.set("CreationDate", "D:".concat(getModificationDate()));
                  ink.set("Rect", rect);
                  ink.set(
                     "InkList",
                     (outlines === null || outlines === void 0
                        ? void 0
                        : outlines.points) ||
                     paths.map(function (p) {
                        return p.points;
                     }),
                  );
                  ink.set("F", 4);
                  ink.set("Rotate", rotation);
                  if (outlines) {
                     ink.set("IT", Name.get("InkHighlight"));
                  }
                  var bs = new Dict(xref);
                  ink.set("BS", bs);
                  bs.set("W", thickness);
                  ink.set(
                     "C",
                     Array.from(color, function (c) {
                        return c / 255;
                     }),
                  );
                  ink.set("CA", opacity);
                  var n = new Dict(xref);
                  ink.set("AP", n);
                  if (apRef) {
                     n.set("N", apRef);
                  } else {
                     n.set("N", ap);
                  }
                  return ink;
               },
            },
            {
               key: "createNewAppearanceStream",
               value: (function () {
                  var _createNewAppearanceStream2 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee55(annotation, xref, params) {
                           var color,
                              rect,
                              paths,
                              thickness,
                              opacity,
                              appearanceBuffer,
                              buffer,
                              _iterator210,
                              _step210,
                              bezier,
                              i,
                              ii,
                              curve,
                              appearance,
                              appearanceStreamDict,
                              resources,
                              extGState,
                              r0,
                              ap;
                           return _regenerator().w(
                              function (_context69) {
                                 while (1)
                                    switch (_context69.n) {
                                       case 0:
                                          if (!annotation.outlines) {
                                             _context69.n = 1;
                                             break;
                                          }
                                          return _context69.a(
                                             2,
                                             this.createNewAppearanceStreamForHighlight(
                                                annotation,
                                                xref,
                                                params,
                                             ),
                                          );
                                       case 1:
                                          ((color = annotation.color),
                                             (rect = annotation.rect),
                                             (paths = annotation.paths),
                                             (thickness = annotation.thickness),
                                             (opacity = annotation.opacity));
                                          appearanceBuffer = [
                                             "".concat(thickness, " w 1 J 1 j"),
                                             "".concat(getPdfColor(color, false)),
                                          ];
                                          if (opacity !== 1) {
                                             appearanceBuffer.push("/R0 gs");
                                          }
                                          buffer = [];
                                          _iterator210 = _createForOfIteratorHelper(paths);
                                          try {
                                             for (
                                                _iterator210.s();
                                                !(_step210 = _iterator210.n()).done;

                                             ) {
                                                bezier = _step210.value.bezier;
                                                buffer.length = 0;
                                                buffer.push(
                                                   ""
                                                      .concat(numberToString(bezier[0]), " ")
                                                      .concat(numberToString(bezier[1]), " m"),
                                                );
                                                if (bezier.length === 2) {
                                                   buffer.push(
                                                      ""
                                                         .concat(numberToString(bezier[0]), " ")
                                                         .concat(
                                                            numberToString(bezier[1]),
                                                            " l S",
                                                         ),
                                                   );
                                                } else {
                                                   for (
                                                      i = 2, ii = bezier.length;
                                                      i < ii;
                                                      i += 6
                                                   ) {
                                                      curve = bezier
                                                         .slice(i, i + 6)
                                                         .map(numberToString)
                                                         .join(" ");
                                                      buffer.push("".concat(curve, " c"));
                                                   }
                                                   buffer.push("S");
                                                }
                                                appearanceBuffer.push(buffer.join("\n"));
                                             }
                                          } catch (err) {
                                             _iterator210.e(err);
                                          } finally {
                                             _iterator210.f();
                                          }
                                          appearance = appearanceBuffer.join("\n");
                                          appearanceStreamDict = new Dict(xref);
                                          appearanceStreamDict.set("FormType", 1);
                                          appearanceStreamDict.set(
                                             "Subtype",
                                             Name.get("Form"),
                                          );
                                          appearanceStreamDict.set(
                                             "Type",
                                             Name.get("XObject"),
                                          );
                                          appearanceStreamDict.set("BBox", rect);
                                          appearanceStreamDict.set(
                                             "Length",
                                             appearance.length,
                                          );
                                          if (opacity !== 1) {
                                             resources = new Dict(xref);
                                             extGState = new Dict(xref);
                                             r0 = new Dict(xref);
                                             r0.set("CA", opacity);
                                             r0.set("Type", Name.get("ExtGState"));
                                             extGState.set("R0", r0);
                                             resources.set("ExtGState", extGState);
                                             appearanceStreamDict.set("Resources", resources);
                                          }
                                          ap = new StringStream(appearance);
                                          ap.dict = appearanceStreamDict;
                                          return _context69.a(2, ap);
                                    }
                              },
                              _callee55,
                              this,
                           );
                        },
                     ),
                  );
                  function createNewAppearanceStream(_x158, _x159, _x160) {
                     return _createNewAppearanceStream2.apply(this, arguments);
                  }
                  return createNewAppearanceStream;
               })(),
            },
            {
               key: "createNewAppearanceStreamForHighlight",
               value: (function () {
                  var _createNewAppearanceStreamForHighlight = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee56(annotation, xref, params) {
                           var color,
                              rect,
                              outline,
                              opacity,
                              appearanceBuffer,
                              i,
                              ii,
                              curve,
                              appearance,
                              appearanceStreamDict,
                              resources,
                              extGState,
                              r0,
                              ap;
                           return _regenerator().w(function (_context70) {
                              while (1)
                                 switch (_context70.n) {
                                    case 0:
                                       ((color = annotation.color),
                                          (rect = annotation.rect),
                                          (outline = annotation.outlines.outline),
                                          (opacity = annotation.opacity));
                                       appearanceBuffer = [
                                          "".concat(getPdfColor(color, true)),
                                          "/R0 gs",
                                       ];
                                       appearanceBuffer.push(
                                          ""
                                             .concat(numberToString(outline[4]), " ")
                                             .concat(numberToString(outline[5]), " m"),
                                       );
                                       for (i = 6, ii = outline.length; i < ii; i += 6) {
                                          if (isNaN(outline[i]) || outline[i] === null) {
                                             appearanceBuffer.push(
                                                ""
                                                   .concat(numberToString(outline[i + 4]), " ")
                                                   .concat(numberToString(outline[i + 5]), " l"),
                                             );
                                          } else {
                                             curve = outline
                                                .slice(i, i + 6)
                                                .map(numberToString)
                                                .join(" ");
                                             appearanceBuffer.push("".concat(curve, " c"));
                                          }
                                       }
                                       appearanceBuffer.push("h f");
                                       appearance = appearanceBuffer.join("\n");
                                       appearanceStreamDict = new Dict(xref);
                                       appearanceStreamDict.set("FormType", 1);
                                       appearanceStreamDict.set("Subtype", Name.get("Form"));
                                       appearanceStreamDict.set("Type", Name.get("XObject"));
                                       appearanceStreamDict.set("BBox", rect);
                                       appearanceStreamDict.set("Length", appearance.length);
                                       resources = new Dict(xref);
                                       extGState = new Dict(xref);
                                       resources.set("ExtGState", extGState);
                                       appearanceStreamDict.set("Resources", resources);
                                       r0 = new Dict(xref);
                                       extGState.set("R0", r0);
                                       r0.set("BM", Name.get("Multiply"));
                                       if (opacity !== 1) {
                                          r0.set("ca", opacity);
                                          r0.set("Type", Name.get("ExtGState"));
                                       }
                                       ap = new StringStream(appearance);
                                       ap.dict = appearanceStreamDict;
                                       return _context70.a(2, ap);
                                 }
                           }, _callee56);
                        },
                     ),
                  );
                  function createNewAppearanceStreamForHighlight(
                     _x161,
                     _x162,
                     _x163,
                  ) {
                     return _createNewAppearanceStreamForHighlight.apply(
                        this,
                        arguments,
                     );
                  }
                  return createNewAppearanceStreamForHighlight;
               })(),
            },
         ]);
      })(MarkupAnnotation);
      var HighlightAnnotation = /*#__PURE__*/ (function (_MarkupAnnotation9) {
         function HighlightAnnotation(params) {
            var _this285;
            _classCallCheck(this, HighlightAnnotation);
            _this285 = _callSuper(this, HighlightAnnotation, [params]);
            var dict = params.dict,
               xref = params.xref;
            _this285.data.annotationType = AnnotationType.HIGHLIGHT;
            var quadPoints = (_this285.data.quadPoints = getQuadPoints(dict, null));
            if (quadPoints) {
               var _this285$appearance;
               var resources =
                  (_this285$appearance = _this285.appearance) === null ||
                  _this285$appearance === void 0
                     ? void 0
                     : _this285$appearance.dict.get("Resources");
               if (
                  !_this285.appearance ||
                  !(
                     resources !== null &&
                     resources !== void 0 &&
                     resources.has("ExtGState")
                  )
               ) {
                  if (_this285.appearance) {
                     warn(
                        "HighlightAnnotation - ignoring built-in appearance stream.",
                     );
                  }
                  var fillColor = _this285.color
                     ? getPdfColorArray(_this285.color)
                     : [1, 1, 0];
                  var fillAlpha = dict.get("CA");
                  _this285._setDefaultAppearance({
                     xref: xref,
                     fillColor: fillColor,
                     blendMode: "Multiply",
                     fillAlpha: fillAlpha,
                     pointsCallback: function pointsCallback(buffer, points) {
                        buffer.push(
                           "".concat(points[0].x, " ").concat(points[0].y, " m"),
                           "".concat(points[1].x, " ").concat(points[1].y, " l"),
                           "".concat(points[3].x, " ").concat(points[3].y, " l"),
                           "".concat(points[2].x, " ").concat(points[2].y, " l"),
                           "f",
                        );
                        return [points[0].x, points[1].x, points[3].y, points[1].y];
                     },
                  });
               }
            } else {
               _this285.data.popupRef = null;
            }
            return _this285;
         }
         _inherits(HighlightAnnotation, _MarkupAnnotation9);
         return _createClass(HighlightAnnotation, null, [
            {
               key: "createNewDict",
               value: function createNewDict(annotation, xref, _ref102) {
                  var apRef = _ref102.apRef,
                     ap = _ref102.ap;
                  var color = annotation.color,
                     opacity = annotation.opacity,
                     rect = annotation.rect,
                     rotation = annotation.rotation,
                     user = annotation.user,
                     quadPoints = annotation.quadPoints;
                  var highlight = new Dict(xref);
                  highlight.set("Type", Name.get("Annot"));
                  highlight.set("Subtype", Name.get("Highlight"));
                  highlight.set("CreationDate", "D:".concat(getModificationDate()));
                  highlight.set("Rect", rect);
                  highlight.set("F", 4);
                  highlight.set("Border", [0, 0, 0]);
                  highlight.set("Rotate", rotation);
                  highlight.set("QuadPoints", quadPoints);
                  highlight.set(
                     "C",
                     Array.from(color, function (c) {
                        return c / 255;
                     }),
                  );
                  highlight.set("CA", opacity);
                  if (user) {
                     highlight.set(
                        "T",
                        isAscii(user) ? user : stringToUTF16String(user, true),
                     );
                  }
                  if (apRef || ap) {
                     var n = new Dict(xref);
                     highlight.set("AP", n);
                     n.set("N", apRef || ap);
                  }
                  return highlight;
               },
            },
            {
               key: "createNewAppearanceStream",
               value: (function () {
                  var _createNewAppearanceStream3 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee57(annotation, xref, params) {
                           var color,
                              rect,
                              outlines,
                              opacity,
                              appearanceBuffer,
                              buffer,
                              _iterator211,
                              _step211,
                              outline,
                              i,
                              ii,
                              appearance,
                              appearanceStreamDict,
                              resources,
                              extGState,
                              r0,
                              ap;
                           return _regenerator().w(function (_context71) {
                              while (1)
                                 switch (_context71.n) {
                                    case 0:
                                       ((color = annotation.color),
                                          (rect = annotation.rect),
                                          (outlines = annotation.outlines),
                                          (opacity = annotation.opacity));
                                       appearanceBuffer = [
                                          "".concat(getPdfColor(color, true)),
                                          "/R0 gs",
                                       ];
                                       buffer = [];
                                       _iterator211 = _createForOfIteratorHelper(outlines);
                                       try {
                                          for (
                                             _iterator211.s();
                                             !(_step211 = _iterator211.n()).done;

                                          ) {
                                             outline = _step211.value;
                                             buffer.length = 0;
                                             buffer.push(
                                                ""
                                                   .concat(numberToString(outline[0]), " ")
                                                   .concat(numberToString(outline[1]), " m"),
                                             );
                                             for (i = 2, ii = outline.length; i < ii; i += 2) {
                                                buffer.push(
                                                   ""
                                                      .concat(numberToString(outline[i]), " ")
                                                      .concat(
                                                         numberToString(outline[i + 1]),
                                                         " l",
                                                      ),
                                                );
                                             }
                                             buffer.push("h");
                                             appearanceBuffer.push(buffer.join("\n"));
                                          }
                                       } catch (err) {
                                          _iterator211.e(err);
                                       } finally {
                                          _iterator211.f();
                                       }
                                       appearanceBuffer.push("f*");
                                       appearance = appearanceBuffer.join("\n");
                                       appearanceStreamDict = new Dict(xref);
                                       appearanceStreamDict.set("FormType", 1);
                                       appearanceStreamDict.set("Subtype", Name.get("Form"));
                                       appearanceStreamDict.set("Type", Name.get("XObject"));
                                       appearanceStreamDict.set("BBox", rect);
                                       appearanceStreamDict.set("Length", appearance.length);
                                       resources = new Dict(xref);
                                       extGState = new Dict(xref);
                                       resources.set("ExtGState", extGState);
                                       appearanceStreamDict.set("Resources", resources);
                                       r0 = new Dict(xref);
                                       extGState.set("R0", r0);
                                       r0.set("BM", Name.get("Multiply"));
                                       if (opacity !== 1) {
                                          r0.set("ca", opacity);
                                          r0.set("Type", Name.get("ExtGState"));
                                       }
                                       ap = new StringStream(appearance);
                                       ap.dict = appearanceStreamDict;
                                       return _context71.a(2, ap);
                                 }
                           }, _callee57);
                        },
                     ),
                  );
                  function createNewAppearanceStream(_x164, _x165, _x166) {
                     return _createNewAppearanceStream3.apply(this, arguments);
                  }
                  return createNewAppearanceStream;
               })(),
            },
         ]);
      })(MarkupAnnotation);
      var UnderlineAnnotation = /*#__PURE__*/ (function (_MarkupAnnotation0) {
         function UnderlineAnnotation(params) {
            var _this286;
            _classCallCheck(this, UnderlineAnnotation);
            _this286 = _callSuper(this, UnderlineAnnotation, [params]);
            var dict = params.dict,
               xref = params.xref;
            _this286.data.annotationType = AnnotationType.UNDERLINE;
            var quadPoints = (_this286.data.quadPoints = getQuadPoints(dict, null));
            if (quadPoints) {
               if (!_this286.appearance) {
                  var strokeColor = _this286.color
                     ? getPdfColorArray(_this286.color)
                     : [0, 0, 0];
                  var strokeAlpha = dict.get("CA");
                  _this286._setDefaultAppearance({
                     xref: xref,
                     extra: "[] 0 d 0.571 w",
                     strokeColor: strokeColor,
                     strokeAlpha: strokeAlpha,
                     pointsCallback: function pointsCallback(buffer, points) {
                        buffer.push(
                           "".concat(points[2].x, " ").concat(points[2].y + 1.3, " m"),
                           "".concat(points[3].x, " ").concat(points[3].y + 1.3, " l"),
                           "S",
                        );
                        return [points[0].x, points[1].x, points[3].y, points[1].y];
                     },
                  });
               }
            } else {
               _this286.data.popupRef = null;
            }
            return _this286;
         }
         _inherits(UnderlineAnnotation, _MarkupAnnotation0);
         return _createClass(UnderlineAnnotation);
      })(MarkupAnnotation);
      var SquigglyAnnotation = /*#__PURE__*/ (function (_MarkupAnnotation1) {
         function SquigglyAnnotation(params) {
            var _this287;
            _classCallCheck(this, SquigglyAnnotation);
            _this287 = _callSuper(this, SquigglyAnnotation, [params]);
            var dict = params.dict,
               xref = params.xref;
            _this287.data.annotationType = AnnotationType.SQUIGGLY;
            var quadPoints = (_this287.data.quadPoints = getQuadPoints(dict, null));
            if (quadPoints) {
               if (!_this287.appearance) {
                  var strokeColor = _this287.color
                     ? getPdfColorArray(_this287.color)
                     : [0, 0, 0];
                  var strokeAlpha = dict.get("CA");
                  _this287._setDefaultAppearance({
                     xref: xref,
                     extra: "[] 0 d 1 w",
                     strokeColor: strokeColor,
                     strokeAlpha: strokeAlpha,
                     pointsCallback: function pointsCallback(buffer, points) {
                        var dy = (points[0].y - points[2].y) / 6;
                        var shift = dy;
                        var x = points[2].x;
                        var y = points[2].y;
                        var xEnd = points[3].x;
                        buffer.push("".concat(x, " ").concat(y + shift, " m"));
                        do {
                           x += 2;
                           shift = shift === 0 ? dy : 0;
                           buffer.push("".concat(x, " ").concat(y + shift, " l"));
                        } while (x < xEnd);
                        buffer.push("S");
                        return [points[2].x, xEnd, y - 2 * dy, y + 2 * dy];
                     },
                  });
               }
            } else {
               _this287.data.popupRef = null;
            }
            return _this287;
         }
         _inherits(SquigglyAnnotation, _MarkupAnnotation1);
         return _createClass(SquigglyAnnotation);
      })(MarkupAnnotation);
      var StrikeOutAnnotation = /*#__PURE__*/ (function (_MarkupAnnotation10) {
         function StrikeOutAnnotation(params) {
            var _this288;
            _classCallCheck(this, StrikeOutAnnotation);
            _this288 = _callSuper(this, StrikeOutAnnotation, [params]);
            var dict = params.dict,
               xref = params.xref;
            _this288.data.annotationType = AnnotationType.STRIKEOUT;
            var quadPoints = (_this288.data.quadPoints = getQuadPoints(dict, null));
            if (quadPoints) {
               if (!_this288.appearance) {
                  var strokeColor = _this288.color
                     ? getPdfColorArray(_this288.color)
                     : [0, 0, 0];
                  var strokeAlpha = dict.get("CA");
                  _this288._setDefaultAppearance({
                     xref: xref,
                     extra: "[] 0 d 1 w",
                     strokeColor: strokeColor,
                     strokeAlpha: strokeAlpha,
                     pointsCallback: function pointsCallback(buffer, points) {
                        buffer.push(
                           "".concat((points[0].x + points[2].x) / 2, " ") +
                           "".concat((points[0].y + points[2].y) / 2, " m"),
                           "".concat((points[1].x + points[3].x) / 2, " ") +
                           "".concat((points[1].y + points[3].y) / 2, " l"),
                           "S",
                        );
                        return [points[0].x, points[1].x, points[3].y, points[1].y];
                     },
                  });
               }
            } else {
               _this288.data.popupRef = null;
            }
            return _this288;
         }
         _inherits(StrikeOutAnnotation, _MarkupAnnotation10);
         return _createClass(StrikeOutAnnotation);
      })(MarkupAnnotation);
      var StampAnnotation = /*#__PURE__*/ (function (_MarkupAnnotation11) {
         function StampAnnotation(params) {
            var _this289;
            _classCallCheck(this, StampAnnotation);
            _this289 = _callSuper(this, StampAnnotation, [params]);
            _this289.data.annotationType = AnnotationType.STAMP;
            _this289.data.hasOwnCanvas = _this289.data.noRotate;
            _this289.data.noHTML = false;
            return _this289;
         }
         _inherits(StampAnnotation, _MarkupAnnotation11);
         return _createClass(StampAnnotation, null, [
            {
               key: "createImage",
               value: (function () {
                  var _createImage4 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(function _callee58(bitmap, xref) {
                        var width,
                           height,
                           canvas,
                           ctx,
                           data,
                           buf32,
                           hasAlpha,
                           jpegBufferPromise,
                           xobjectName,
                           imageName,
                           image,
                           smaskStream,
                           alphaBuffer,
                           i,
                           ii,
                           _i68,
                           _ii14,
                           smask,
                           imageStream,
                           _t53,
                           _t54,
                           _t55;
                        return _regenerator().w(function (_context72) {
                           while (1)
                              switch (_context72.n) {
                                 case 0:
                                    ((width = bitmap.width), (height = bitmap.height));
                                    canvas = new OffscreenCanvas(width, height);
                                    ctx = canvas.getContext("2d", { alpha: true });
                                    ctx.drawImage(bitmap, 0, 0);
                                    data = ctx.getImageData(0, 0, width, height).data;
                                    buf32 = new Uint32Array(data.buffer);
                                    hasAlpha = buf32.some(
                                       FeatureTest.isLittleEndian
                                          ? function (x) {
                                             return x >>> 24 !== 0xff;
                                          }
                                          : function (x) {
                                             return (x & 0xff) !== 0xff;
                                          },
                                    );
                                    if (hasAlpha) {
                                       ctx.fillStyle = "white";
                                       ctx.fillRect(0, 0, width, height);
                                       ctx.drawImage(bitmap, 0, 0);
                                    }
                                    jpegBufferPromise = canvas
                                       .convertToBlob({ type: "image/jpeg", quality: 1 })
                                       .then(function (blob) {
                                          return blob.arrayBuffer();
                                       });
                                    xobjectName = Name.get("XObject");
                                    imageName = Name.get("Image");
                                    image = new Dict(xref);
                                    image.set("Type", xobjectName);
                                    image.set("Subtype", imageName);
                                    image.set("BitsPerComponent", 8);
                                    image.set("ColorSpace", Name.get("DeviceRGB"));
                                    image.set("Filter", Name.get("DCTDecode"));
                                    image.set("BBox", [0, 0, width, height]);
                                    image.set("Width", width);
                                    image.set("Height", height);
                                    smaskStream = null;
                                    if (hasAlpha) {
                                       alphaBuffer = new Uint8Array(buf32.length);
                                       if (FeatureTest.isLittleEndian) {
                                          for (i = 0, ii = buf32.length; i < ii; i++) {
                                             alphaBuffer[i] = buf32[i] >>> 24;
                                          }
                                       } else {
                                          for (
                                             _i68 = 0, _ii14 = buf32.length;
                                             _i68 < _ii14;
                                             _i68++
                                          ) {
                                             alphaBuffer[_i68] = buf32[_i68] & 0xff;
                                          }
                                       }
                                       smask = new Dict(xref);
                                       smask.set("Type", xobjectName);
                                       smask.set("Subtype", imageName);
                                       smask.set("BitsPerComponent", 8);
                                       smask.set("ColorSpace", Name.get("DeviceGray"));
                                       smask.set("Width", width);
                                       smask.set("Height", height);
                                       smaskStream = new Stream(alphaBuffer, 0, 0, smask);
                                    }
                                    _t53 = Stream;
                                    _context72.n = 1;
                                    return jpegBufferPromise;
                                 case 1:
                                    _t54 = _context72.v;
                                    _t55 = image;
                                    imageStream = new _t53(_t54, 0, 0, _t55);
                                    return _context72.a(2, {
                                       imageStream: imageStream,
                                       smaskStream: smaskStream,
                                       width: width,
                                       height: height,
                                    });
                              }
                        }, _callee58);
                     }),
                  );
                  function createImage(_x167, _x168) {
                     return _createImage4.apply(this, arguments);
                  }
                  return createImage;
               })(),
            },
            {
               key: "createNewDict",
               value: function createNewDict(annotation, xref, _ref103) {
                  var apRef = _ref103.apRef,
                     ap = _ref103.ap;
                  var rect = annotation.rect,
                     rotation = annotation.rotation,
                     user = annotation.user;
                  var stamp = new Dict(xref);
                  stamp.set("Type", Name.get("Annot"));
                  stamp.set("Subtype", Name.get("Stamp"));
                  stamp.set("CreationDate", "D:".concat(getModificationDate()));
                  stamp.set("Rect", rect);
                  stamp.set("F", 4);
                  stamp.set("Border", [0, 0, 0]);
                  stamp.set("Rotate", rotation);
                  if (user) {
                     stamp.set(
                        "T",
                        isAscii(user) ? user : stringToUTF16String(user, true),
                     );
                  }
                  if (apRef || ap) {
                     var n = new Dict(xref);
                     stamp.set("AP", n);
                     if (apRef) {
                        n.set("N", apRef);
                     } else {
                        n.set("N", ap);
                     }
                  }
                  return stamp;
               },
            },
            {
               key: "createNewAppearanceStream",
               value: (function () {
                  var _createNewAppearanceStream4 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee59(annotation, xref, params) {
                           var rotation,
                              _params$image,
                              imageRef,
                              width,
                              height,
                              resources,
                              xobject,
                              appearance,
                              appearanceStreamDict,
                              matrix,
                              ap;
                           return _regenerator().w(function (_context73) {
                              while (1)
                                 switch (_context73.n) {
                                    case 0:
                                       rotation = annotation.rotation;
                                       ((_params$image = params.image),
                                          (imageRef = _params$image.imageRef),
                                          (width = _params$image.width),
                                          (height = _params$image.height));
                                       resources = new Dict(xref);
                                       xobject = new Dict(xref);
                                       resources.set("XObject", xobject);
                                       xobject.set("Im0", imageRef);
                                       appearance = "q "
                                          .concat(width, " 0 0 ")
                                          .concat(height, " 0 0 cm /Im0 Do Q");
                                       appearanceStreamDict = new Dict(xref);
                                       appearanceStreamDict.set("FormType", 1);
                                       appearanceStreamDict.set("Subtype", Name.get("Form"));
                                       appearanceStreamDict.set("Type", Name.get("XObject"));
                                       appearanceStreamDict.set("BBox", [
                                          0,
                                          0,
                                          width,
                                          height,
                                       ]);
                                       appearanceStreamDict.set("Resources", resources);
                                       if (rotation) {
                                          matrix = _getRotationMatrix(
                                             rotation,
                                             width,
                                             height,
                                          );
                                          appearanceStreamDict.set("Matrix", matrix);
                                       }
                                       ap = new StringStream(appearance);
                                       ap.dict = appearanceStreamDict;
                                       return _context73.a(2, ap);
                                 }
                           }, _callee59);
                        },
                     ),
                  );
                  function createNewAppearanceStream(_x169, _x170, _x171) {
                     return _createNewAppearanceStream4.apply(this, arguments);
                  }
                  return createNewAppearanceStream;
               })(),
            },
         ]);
      })(MarkupAnnotation);
      var FileAttachmentAnnotation = /*#__PURE__*/ (function (
         _MarkupAnnotation12,
      ) {
         function FileAttachmentAnnotation(params) {
            var _this290;
            _classCallCheck(this, FileAttachmentAnnotation);
            _this290 = _callSuper(this, FileAttachmentAnnotation, [params]);
            var dict = params.dict,
               xref = params.xref;
            var file = new FileSpec(dict.get("FS"), xref);
            _this290.data.annotationType = AnnotationType.FILEATTACHMENT;
            _this290.data.hasOwnCanvas = _this290.data.noRotate;
            _this290.data.noHTML = false;
            _this290.data.file = file.serializable;
            var name = dict.get("Name");
            _this290.data.name =
               name instanceof Name ? stringToPDFString(name.name) : "PushPin";
            var fillAlpha = dict.get("ca");
            _this290.data.fillAlpha =
               typeof fillAlpha === "number" && fillAlpha >= 0 && fillAlpha <= 1
                  ? fillAlpha
                  : null;
            return _this290;
         }
         _inherits(FileAttachmentAnnotation, _MarkupAnnotation12);
         return _createClass(FileAttachmentAnnotation);
      })(MarkupAnnotation); // CONCATENATED MODULE: ./src/core/dataset_reader.js
      function decodeString(str) {
         try {
            return stringToUTF8String(str);
         } catch (ex) {
            warn('UTF-8 decoding failed: "'.concat(ex, '".'));
            return str;
         }
      }
      var DatasetXMLParser = /*#__PURE__*/ (function (_SimpleXMLParser) {
         function DatasetXMLParser(options) {
            var _this291;
            _classCallCheck(this, DatasetXMLParser);
            _this291 = _callSuper(this, DatasetXMLParser, [options]);
            _this291.node = null;
            return _this291;
         }
         _inherits(DatasetXMLParser, _SimpleXMLParser);
         return _createClass(DatasetXMLParser, [
            {
               key: "onEndElement",
               value: function onEndElement(name) {
                  var node = _superPropGet(
                     DatasetXMLParser,
                     "onEndElement",
                     this,
                     3,
                  )([name]);
                  if (node && name === "xfa:datasets") {
                     this.node = node;
                     throw new Error("Aborting DatasetXMLParser.");
                  }
               },
            },
         ]);
      })(SimpleXMLParser);
      var DatasetReader = /*#__PURE__*/ (function () {
         function DatasetReader(data) {
            _classCallCheck(this, DatasetReader);
            if (data.datasets) {
               this.node = new SimpleXMLParser({
                  hasAttributes: true,
               }).parseFromString(data.datasets).documentElement;
            } else {
               var parser = new DatasetXMLParser({ hasAttributes: true });
               try {
                  parser.parseFromString(data["xdp:xdp"]);
               } catch (_unused11) {}
               this.node = parser.node;
            }
         }
         return _createClass(DatasetReader, [
            {
               key: "getValue",
               value: function getValue(path) {
                  if (!this.node || !path) {
                     return "";
                  }
                  var node = this.node.searchNode(parseXFAPath(path), 0);
                  if (!node) {
                     return "";
                  }
                  var first = node.firstChild;
                  if (
                     (first === null || first === void 0 ? void 0 : first.nodeName) ===
                     "value"
                  ) {
                     return node.children.map(function (child) {
                        return decodeString(child.textContent);
                     });
                  }
                  return decodeString(node.textContent);
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/xref.js
      var _firstXRefStmPos = /*#__PURE__*/ new WeakMap();
      var XRef = /*#__PURE__*/ (function () {
         function XRef(stream, pdfManager) {
            _classCallCheck(this, XRef);
            _classPrivateFieldInitSpec(this, _firstXRefStmPos, null);
            this.stream = stream;
            this.pdfManager = pdfManager;
            this.entries = [];
            this._xrefStms = new Set();
            this._cacheMap = new Map();
            this._pendingRefs = new RefSet();
            this._newPersistentRefNum = null;
            this._newTemporaryRefNum = null;
            this._persistentRefsCache = null;
         }
         return _createClass(XRef, [
            {
               key: "getNewPersistentRef",
               value: function getNewPersistentRef(obj) {
                  if (this._newPersistentRefNum === null) {
                     this._newPersistentRefNum = this.entries.length || 1;
                  }
                  var num = this._newPersistentRefNum++;
                  this._cacheMap.set(num, obj);
                  return Ref.get(num, 0);
               },
            },
            {
               key: "getNewTemporaryRef",
               value: function getNewTemporaryRef() {
                  if (this._newTemporaryRefNum === null) {
                     this._newTemporaryRefNum = this.entries.length || 1;
                     if (this._newPersistentRefNum) {
                        this._persistentRefsCache = new Map();
                        for (
                           var i = this._newTemporaryRefNum;
                           i < this._newPersistentRefNum;
                           i++
                        ) {
                           this._persistentRefsCache.set(i, this._cacheMap.get(i));
                           this._cacheMap["delete"](i);
                        }
                     }
                  }
                  return Ref.get(this._newTemporaryRefNum++, 0);
               },
            },
            {
               key: "resetNewTemporaryRef",
               value: function resetNewTemporaryRef() {
                  this._newTemporaryRefNum = null;
                  if (this._persistentRefsCache) {
                     var _iterator212 = _createForOfIteratorHelper(
                           this._persistentRefsCache,
                        ),
                        _step212;
                     try {
                        for (_iterator212.s(); !(_step212 = _iterator212.n()).done; ) {
                           var _step212$value = _slicedToArray(_step212.value, 2),
                              num = _step212$value[0],
                              obj = _step212$value[1];
                           this._cacheMap.set(num, obj);
                        }
                     } catch (err) {
                        _iterator212.e(err);
                     } finally {
                        _iterator212.f();
                     }
                  }
                  this._persistentRefsCache = null;
               },
            },
            {
               key: "setStartXRef",
               value: function setStartXRef(startXRef) {
                  this.startXRefQueue = [startXRef];
               },
            },
            {
               key: "parse",
               value: function parse() {
                  var recoveryMode =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : false;
                  var trailerDict;
                  if (!recoveryMode) {
                     trailerDict = this.readXRef();
                  } else {
                     warn("Indexing all PDF objects");
                     trailerDict = this.indexObjects();
                  }
                  trailerDict.assignXref(this);
                  this.trailer = trailerDict;
                  var encrypt;
                  try {
                     encrypt = trailerDict.get("Encrypt");
                  } catch (ex) {
                     if (ex instanceof MissingDataException) {
                        throw ex;
                     }
                     warn(
                        'XRef.parse - Invalid "Encrypt" reference: "'.concat(ex, '".'),
                     );
                  }
                  if (encrypt instanceof Dict) {
                     var ids = trailerDict.get("ID");
                     var fileId =
                        ids !== null && ids !== void 0 && ids.length ? ids[0] : "";
                     encrypt.suppressEncryption = true;
                     this.encrypt = new CipherTransformFactory(
                        encrypt,
                        fileId,
                        this.pdfManager.password,
                     );
                  }
                  var root;
                  try {
                     root = trailerDict.get("Root");
                  } catch (ex) {
                     if (ex instanceof MissingDataException) {
                        throw ex;
                     }
                     warn('XRef.parse - Invalid "Root" reference: "'.concat(ex, '".'));
                  }
                  if (root instanceof Dict) {
                     try {
                        var pages = root.get("Pages");
                        if (pages instanceof Dict) {
                           this.root = root;
                           return;
                        }
                     } catch (ex) {
                        if (ex instanceof MissingDataException) {
                           throw ex;
                        }
                        warn(
                           'XRef.parse - Invalid "Pages" reference: "'.concat(ex, '".'),
                        );
                     }
                  }
                  if (!recoveryMode) {
                     throw new XRefParseException();
                  }
                  throw new InvalidPDFException("Invalid Root reference.");
               },
            },
            {
               key: "processXRefTable",
               value: function processXRefTable(parser) {
                  if (!("tableState" in this)) {
                     this.tableState = {
                        entryNum: 0,
                        streamPos: parser.lexer.stream.pos,
                        parserBuf1: parser.buf1,
                        parserBuf2: parser.buf2,
                     };
                  }
                  var obj = this.readXRefTable(parser);
                  if (!isCmd(obj, "trailer")) {
                     throw new FormatError(
                        "Invalid XRef table: could not find trailer dictionary",
                     );
                  }
                  var dict = parser.getObj();
                  if (!(dict instanceof Dict) && dict.dict) {
                     dict = dict.dict;
                  }
                  if (!(dict instanceof Dict)) {
                     throw new FormatError(
                        "Invalid XRef table: could not parse trailer dictionary",
                     );
                  }
                  delete this.tableState;
                  return dict;
               },
            },
            {
               key: "readXRefTable",
               value: function readXRefTable(parser) {
                  var stream = parser.lexer.stream;
                  var tableState = this.tableState;
                  stream.pos = tableState.streamPos;
                  parser.buf1 = tableState.parserBuf1;
                  parser.buf2 = tableState.parserBuf2;
                  var obj;
                  while (true) {
                     if (
                        !("firstEntryNum" in tableState) ||
                        !("entryCount" in tableState)
                     ) {
                        if (isCmd((obj = parser.getObj()), "trailer")) {
                           break;
                        }
                        tableState.firstEntryNum = obj;
                        tableState.entryCount = parser.getObj();
                     }
                     var first = tableState.firstEntryNum;
                     var count = tableState.entryCount;
                     if (!Number.isInteger(first) || !Number.isInteger(count)) {
                        throw new FormatError(
                           "Invalid XRef table: wrong types in subsection header",
                        );
                     }
                     for (var i = tableState.entryNum; i < count; i++) {
                        tableState.streamPos = stream.pos;
                        tableState.entryNum = i;
                        tableState.parserBuf1 = parser.buf1;
                        tableState.parserBuf2 = parser.buf2;
                        var entry = {};
                        entry.offset = parser.getObj();
                        entry.gen = parser.getObj();
                        var type = parser.getObj();
                        if (type instanceof Cmd) {
                           switch (type.cmd) {
                              case "f":
                                 entry.free = true;
                                 break;
                              case "n":
                                 entry.uncompressed = true;
                                 break;
                           }
                        }
                        if (
                           !Number.isInteger(entry.offset) ||
                           !Number.isInteger(entry.gen) ||
                           !(entry.free || entry.uncompressed)
                        ) {
                           throw new FormatError(
                              "Invalid entry in XRef subsection: "
                                 .concat(first, ", ")
                                 .concat(count),
                           );
                        }
                        if (i === 0 && entry.free && first === 1) {
                           first = 0;
                        }
                        if (!this.entries[i + first]) {
                           this.entries[i + first] = entry;
                        }
                     }
                     tableState.entryNum = 0;
                     tableState.streamPos = stream.pos;
                     tableState.parserBuf1 = parser.buf1;
                     tableState.parserBuf2 = parser.buf2;
                     delete tableState.firstEntryNum;
                     delete tableState.entryCount;
                  }
                  if (this.entries[0] && !this.entries[0].free) {
                     throw new FormatError(
                        "Invalid XRef table: unexpected first object",
                     );
                  }
                  return obj;
               },
            },
            {
               key: "processXRefStream",
               value: function processXRefStream(stream) {
                  if (!("streamState" in this)) {
                     var streamParameters = stream.dict;
                     var byteWidths = streamParameters.get("W");
                     var range = streamParameters.get("Index");
                     if (!range) {
                        range = [0, streamParameters.get("Size")];
                     }
                     this.streamState = {
                        entryRanges: range,
                        byteWidths: byteWidths,
                        entryNum: 0,
                        streamPos: stream.pos,
                     };
                  }
                  this.readXRefStream(stream);
                  delete this.streamState;
                  return stream.dict;
               },
            },
            {
               key: "readXRefStream",
               value: function readXRefStream(stream) {
                  var streamState = this.streamState;
                  stream.pos = streamState.streamPos;
                  var _streamState$byteWidt = _slicedToArray(
                        streamState.byteWidths,
                        3,
                     ),
                     typeFieldWidth = _streamState$byteWidt[0],
                     offsetFieldWidth = _streamState$byteWidt[1],
                     generationFieldWidth = _streamState$byteWidt[2];
                  var entryRanges = streamState.entryRanges;
                  while (entryRanges.length > 0) {
                     var _entryRanges = _slicedToArray(entryRanges, 2),
                        first = _entryRanges[0],
                        n = _entryRanges[1];
                     if (!Number.isInteger(first) || !Number.isInteger(n)) {
                        throw new FormatError(
                           "Invalid XRef range fields: ".concat(first, ", ").concat(n),
                        );
                     }
                     if (
                        !Number.isInteger(typeFieldWidth) ||
                        !Number.isInteger(offsetFieldWidth) ||
                        !Number.isInteger(generationFieldWidth)
                     ) {
                        throw new FormatError(
                           "Invalid XRef entry fields length: "
                              .concat(first, ", ")
                              .concat(n),
                        );
                     }
                     for (var i = streamState.entryNum; i < n; ++i) {
                        streamState.entryNum = i;
                        streamState.streamPos = stream.pos;
                        var type = 0,
                           offset = 0,
                           generation = 0;
                        for (var j = 0; j < typeFieldWidth; ++j) {
                           var typeByte = stream.getByte();
                           if (typeByte === -1) {
                              throw new FormatError("Invalid XRef byteWidths 'type'.");
                           }
                           type = (type << 8) | typeByte;
                        }
                        if (typeFieldWidth === 0) {
                           type = 1;
                        }
                        for (var _j17 = 0; _j17 < offsetFieldWidth; ++_j17) {
                           var offsetByte = stream.getByte();
                           if (offsetByte === -1) {
                              throw new FormatError("Invalid XRef byteWidths 'offset'.");
                           }
                           offset = (offset << 8) | offsetByte;
                        }
                        for (var _j18 = 0; _j18 < generationFieldWidth; ++_j18) {
                           var generationByte = stream.getByte();
                           if (generationByte === -1) {
                              throw new FormatError(
                                 "Invalid XRef byteWidths 'generation'.",
                              );
                           }
                           generation = (generation << 8) | generationByte;
                        }
                        var entry = {};
                        entry.offset = offset;
                        entry.gen = generation;
                        switch (type) {
                           case 0:
                              entry.free = true;
                              break;
                           case 1:
                              entry.uncompressed = true;
                              break;
                           case 2:
                              break;
                           default:
                              throw new FormatError(
                                 "Invalid XRef entry type: ".concat(type),
                              );
                        }
                        if (!this.entries[first + i]) {
                           this.entries[first + i] = entry;
                        }
                     }
                     streamState.entryNum = 0;
                     streamState.streamPos = stream.pos;
                     entryRanges.splice(0, 2);
                  }
               },
            },
            {
               key: "indexObjects",
               value: function indexObjects() {
                  var TAB = 0x9,
                     LF = 0xa,
                     CR = 0xd,
                     SPACE = 0x20;
                  var PERCENT = 0x25,
                     LT = 0x3c;
                  function readToken(data, offset) {
                     var token = "",
                        ch = data[offset];
                     while (ch !== LF && ch !== CR && ch !== LT) {
                        if (++offset >= data.length) {
                           break;
                        }
                        token += String.fromCharCode(ch);
                        ch = data[offset];
                     }
                     return token;
                  }
                  function skipUntil(data, offset, what) {
                     var length = what.length,
                        dataLength = data.length;
                     var skipped = 0;
                     while (offset < dataLength) {
                        var i = 0;
                        while (i < length && data[offset + i] === what[i]) {
                           ++i;
                        }
                        if (i >= length) {
                           break;
                        }
                        offset++;
                        skipped++;
                     }
                     return skipped;
                  }
                  var gEndobjRegExp =
                     /\b(endobj|\d+\s+\d+\s+obj|xref|trailer\s*<<)\b/g;
                  var gStartxrefRegExp = /\b(startxref|\d+\s+\d+\s+obj)\b/g;
                  var objRegExp = /^(\d+)\s+(\d+)\s+obj\b/;
                  var trailerBytes = new Uint8Array([
                     116, 114, 97, 105, 108, 101, 114,
                  ]);
                  var startxrefBytes = new Uint8Array([
                     115, 116, 97, 114, 116, 120, 114, 101, 102,
                  ]);
                  var xrefBytes = new Uint8Array([47, 88, 82, 101, 102]);
                  this.entries.length = 0;
                  this._cacheMap.clear();
                  var stream = this.stream;
                  stream.pos = 0;
                  var buffer = stream.getBytes(),
                     bufferStr = bytesToString(buffer),
                     length = buffer.length;
                  var position = stream.start;
                  var trailers = [],
                     xrefStms = [];
                  while (position < length) {
                     var ch = buffer[position];
                     if (ch === TAB || ch === LF || ch === CR || ch === SPACE) {
                        ++position;
                        continue;
                     }
                     if (ch === PERCENT) {
                        do {
                           ++position;
                           if (position >= length) {
                              break;
                           }
                           ch = buffer[position];
                        } while (ch !== LF && ch !== CR);
                        continue;
                     }
                     var token = readToken(buffer, position);
                     var m = void 0;
                     if (
                        token.startsWith("xref") &&
                        (token.length === 4 || /\s/.test(token[4]))
                     ) {
                        position += skipUntil(buffer, position, trailerBytes);
                        trailers.push(position);
                        position += skipUntil(buffer, position, startxrefBytes);
                     } else if ((m = objRegExp.exec(token))) {
                        var num = m[1] | 0,
                           gen = m[2] | 0;
                        var startPos = position + token.length;
                        var contentLength = void 0,
                           updateEntries = false;
                        if (!this.entries[num]) {
                           updateEntries = true;
                        } else if (this.entries[num].gen === gen) {
                           try {
                              var parser = new Parser({
                                 lexer: new Lexer(stream.makeSubStream(startPos)),
                              });
                              parser.getObj();
                              updateEntries = true;
                           } catch (ex) {
                              if (ex instanceof ParserEOFException) {
                                 warn(
                                    "indexObjects -- checking object ("
                                       .concat(token, '): "')
                                       .concat(ex, '".'),
                                 );
                              } else {
                                 updateEntries = true;
                              }
                           }
                        }
                        if (updateEntries) {
                           this.entries[num] = {
                              offset: position - stream.start,
                              gen: gen,
                              uncompressed: true,
                           };
                        }
                        gEndobjRegExp.lastIndex = startPos;
                        var match = gEndobjRegExp.exec(bufferStr);
                        if (match) {
                           var endPos = gEndobjRegExp.lastIndex + 1;
                           contentLength = endPos - position;
                           if (match[1] !== "endobj") {
                              warn(
                                 'indexObjects: Found "'.concat(
                                    match[1],
                                    '" inside of another "obj", ',
                                 ) + 'caused by missing "endobj" -- trying to recover.',
                              );
                              contentLength -= match[1].length + 1;
                           }
                        } else {
                           contentLength = length - position;
                        }
                        var content = buffer.subarray(
                           position,
                           position + contentLength,
                        );
                        var xrefTagOffset = skipUntil(content, 0, xrefBytes);
                        if (
                           xrefTagOffset < contentLength &&
                           content[xrefTagOffset + 5] < 64
                        ) {
                           xrefStms.push(position - stream.start);
                           this._xrefStms.add(position - stream.start);
                        }
                        position += contentLength;
                     } else if (
                        token.startsWith("trailer") &&
                        (token.length === 7 || /\s/.test(token[7]))
                     ) {
                        trailers.push(position);
                        var _startPos = position + token.length;
                        var _contentLength = void 0;
                        gStartxrefRegExp.lastIndex = _startPos;
                        var _match7 = gStartxrefRegExp.exec(bufferStr);
                        if (_match7) {
                           var _endPos = gStartxrefRegExp.lastIndex + 1;
                           _contentLength = _endPos - position;
                           if (_match7[1] !== "startxref") {
                              warn(
                                 'indexObjects: Found "'.concat(
                                    _match7[1],
                                    '" after "trailer", ',
                                 ) + 'caused by missing "startxref" -- trying to recover.',
                              );
                              _contentLength -= _match7[1].length + 1;
                           }
                        } else {
                           _contentLength = length - position;
                        }
                        position += _contentLength;
                     } else {
                        position += token.length + 1;
                     }
                  }
                  for (
                     var _i69 = 0, _xrefStms = xrefStms;
                     _i69 < _xrefStms.length;
                     _i69++
                  ) {
                     var xrefStm = _xrefStms[_i69];
                     this.startXRefQueue.push(xrefStm);
                     this.readXRef(true);
                  }
                  var trailerDicts = [];
                  var isEncrypted = false;
                  for (
                     var _i70 = 0, _trailers = trailers;
                     _i70 < _trailers.length;
                     _i70++
                  ) {
                     var trailer = _trailers[_i70];
                     stream.pos = trailer;
                     var _parser = new Parser({
                        lexer: new Lexer(stream),
                        xref: this,
                        allowStreams: true,
                        recoveryMode: true,
                     });
                     var obj = _parser.getObj();
                     if (!isCmd(obj, "trailer")) {
                        continue;
                     }
                     var dict = _parser.getObj();
                     if (!(dict instanceof Dict)) {
                        continue;
                     }
                     trailerDicts.push(dict);
                     if (dict.has("Encrypt")) {
                        isEncrypted = true;
                     }
                  }
                  var trailerDict, trailerError;
                  for (
                     var _i71 = 0,
                        _arr6 = [].concat(trailerDicts, ["genFallback"], trailerDicts);
                     _i71 < _arr6.length;
                     _i71++
                  ) {
                     var _dict2 = _arr6[_i71];
                     if (_dict2 === "genFallback") {
                        if (!trailerError) {
                           break;
                        }
                        this._generationFallback = true;
                        continue;
                     }
                     var validPagesDict = false;
                     try {
                        var rootDict = _dict2.get("Root");
                        if (!(rootDict instanceof Dict)) {
                           continue;
                        }
                        var pagesDict = rootDict.get("Pages");
                        if (!(pagesDict instanceof Dict)) {
                           continue;
                        }
                        var pagesCount = pagesDict.get("Count");
                        if (Number.isInteger(pagesCount)) {
                           validPagesDict = true;
                        }
                     } catch (ex) {
                        trailerError = ex;
                        continue;
                     }
                     if (
                        validPagesDict &&
                        (!isEncrypted || _dict2.has("Encrypt")) &&
                        _dict2.has("ID")
                     ) {
                        return _dict2;
                     }
                     trailerDict = _dict2;
                  }
                  if (trailerDict) {
                     return trailerDict;
                  }
                  if (this.topDict) {
                     return this.topDict;
                  }
                  throw new InvalidPDFException("Invalid PDF structure.");
               },
            },
            {
               key: "readXRef",
               value: function readXRef() {
                  var recoveryMode =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : false;
                  var stream = this.stream;
                  var startXRefParsedCache = new Set();
                  while (this.startXRefQueue.length) {
                     try {
                        var startXRef = this.startXRefQueue[0];
                        if (startXRefParsedCache.has(startXRef)) {
                           warn(
                              "readXRef - skipping XRef table since it was already parsed.",
                           );
                           this.startXRefQueue.shift();
                           continue;
                        }
                        startXRefParsedCache.add(startXRef);
                        stream.pos = startXRef + stream.start;
                        var parser = new Parser({
                           lexer: new Lexer(stream),
                           xref: this,
                           allowStreams: true,
                        });
                        var obj = parser.getObj();
                        var dict = void 0;
                        if (isCmd(obj, "xref")) {
                           dict = this.processXRefTable(parser);
                           if (!this.topDict) {
                              this.topDict = dict;
                           }
                           obj = dict.get("XRefStm");
                           if (Number.isInteger(obj) && !this._xrefStms.has(obj)) {
                              var _classPrivateFieldGet2;
                              this._xrefStms.add(obj);
                              this.startXRefQueue.push(obj);
                              (_classPrivateFieldGet2 = _classPrivateFieldGet(
                                 _firstXRefStmPos,
                                 this,
                              )) !== null && _classPrivateFieldGet2 !== void 0
                                 ? _classPrivateFieldGet2
                                 : _classPrivateFieldSet(_firstXRefStmPos, this, obj);
                           }
                        } else if (Number.isInteger(obj)) {
                           if (
                              !Number.isInteger(parser.getObj()) ||
                              !isCmd(parser.getObj(), "obj") ||
                              !((obj = parser.getObj()) instanceof BaseStream)
                           ) {
                              throw new FormatError("Invalid XRef stream");
                           }
                           dict = this.processXRefStream(obj);
                           if (!this.topDict) {
                              this.topDict = dict;
                           }
                           if (!dict) {
                              throw new FormatError("Failed to read XRef stream");
                           }
                        } else {
                           throw new FormatError("Invalid XRef stream header");
                        }
                        obj = dict.get("Prev");
                        if (Number.isInteger(obj)) {
                           this.startXRefQueue.push(obj);
                        } else if (obj instanceof Ref) {
                           this.startXRefQueue.push(obj.num);
                        }
                     } catch (e) {
                        if (e instanceof MissingDataException) {
                           throw e;
                        }
                        info("(while reading XRef): " + e);
                     }
                     this.startXRefQueue.shift();
                  }
                  if (this.topDict) {
                     return this.topDict;
                  }
                  if (recoveryMode) {
                     return undefined;
                  }
                  throw new XRefParseException();
               },
            },
            {
               key: "lastXRefStreamPos",
               get: function get() {
                  var _classPrivateFieldGet3;
                  return (_classPrivateFieldGet3 = _classPrivateFieldGet(
                     _firstXRefStmPos,
                     this,
                  )) !== null && _classPrivateFieldGet3 !== void 0
                     ? _classPrivateFieldGet3
                     : this._xrefStms.size > 0
                        ? Math.max.apply(Math, _toConsumableArray(this._xrefStms))
                        : null;
               },
            },
            {
               key: "getEntry",
               value: function getEntry(i) {
                  var xrefEntry = this.entries[i];
                  if (xrefEntry && !xrefEntry.free && xrefEntry.offset) {
                     return xrefEntry;
                  }
                  return null;
               },
            },
            {
               key: "fetchIfRef",
               value: function fetchIfRef(obj) {
                  var suppressEncryption =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : false;
                  if (obj instanceof Ref) {
                     return this.fetch(obj, suppressEncryption);
                  }
                  return obj;
               },
            },
            {
               key: "fetch",
               value: function fetch(ref) {
                  var suppressEncryption =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : false;
                  if (!(ref instanceof Ref)) {
                     throw new Error("ref object is not a reference");
                  }
                  var num = ref.num;
                  var cacheEntry = this._cacheMap.get(num);
                  if (cacheEntry !== undefined) {
                     if (cacheEntry instanceof Dict && !cacheEntry.objId) {
                        cacheEntry.objId = ref.toString();
                     }
                     return cacheEntry;
                  }
                  var xrefEntry = this.getEntry(num);
                  if (xrefEntry === null) {
                     this._cacheMap.set(num, xrefEntry);
                     return xrefEntry;
                  }
                  if (this._pendingRefs.has(ref)) {
                     this._pendingRefs.remove(ref);
                     warn("Ignoring circular reference: ".concat(ref, "."));
                     return CIRCULAR_REF;
                  }
                  this._pendingRefs.put(ref);
                  try {
                     xrefEntry = xrefEntry.uncompressed
                        ? this.fetchUncompressed(ref, xrefEntry, suppressEncryption)
                        : this.fetchCompressed(ref, xrefEntry, suppressEncryption);
                     this._pendingRefs.remove(ref);
                  } catch (ex) {
                     this._pendingRefs.remove(ref);
                     throw ex;
                  }
                  if (xrefEntry instanceof Dict) {
                     xrefEntry.objId = ref.toString();
                  } else if (xrefEntry instanceof BaseStream) {
                     xrefEntry.dict.objId = ref.toString();
                  }
                  return xrefEntry;
               },
            },
            {
               key: "fetchUncompressed",
               value: function fetchUncompressed(ref, xrefEntry) {
                  var suppressEncryption =
                     arguments.length > 2 && arguments[2] !== undefined
                        ? arguments[2]
                        : false;
                  var gen = ref.gen;
                  var num = ref.num;
                  if (xrefEntry.gen !== gen) {
                     var msg = "Inconsistent generation in XRef: ".concat(ref);
                     if (this._generationFallback && xrefEntry.gen < gen) {
                        warn(msg);
                        return this.fetchUncompressed(
                           Ref.get(num, xrefEntry.gen),
                           xrefEntry,
                           suppressEncryption,
                        );
                     }
                     throw new XRefEntryException(msg);
                  }
                  var stream = this.stream.makeSubStream(
                     xrefEntry.offset + this.stream.start,
                  );
                  var parser = new Parser({
                     lexer: new Lexer(stream),
                     xref: this,
                     allowStreams: true,
                  });
                  var obj1 = parser.getObj();
                  var obj2 = parser.getObj();
                  var obj3 = parser.getObj();
                  if (obj1 !== num || obj2 !== gen || !(obj3 instanceof Cmd)) {
                     throw new XRefEntryException(
                        "Bad (uncompressed) XRef entry: ".concat(ref),
                     );
                  }
                  if (obj3.cmd !== "obj") {
                     if (obj3.cmd.startsWith("obj")) {
                        num = parseInt(obj3.cmd.substring(3), 10);
                        if (!Number.isNaN(num)) {
                           return num;
                        }
                     }
                     throw new XRefEntryException(
                        "Bad (uncompressed) XRef entry: ".concat(ref),
                     );
                  }
                  xrefEntry =
                     this.encrypt && !suppressEncryption
                        ? parser.getObj(this.encrypt.createCipherTransform(num, gen))
                        : parser.getObj();
                  if (!(xrefEntry instanceof BaseStream)) {
                     this._cacheMap.set(num, xrefEntry);
                  }
                  return xrefEntry;
               },
            },
            {
               key: "fetchCompressed",
               value: function fetchCompressed(ref, xrefEntry) {
                  var suppressEncryption =
                     arguments.length > 2 && arguments[2] !== undefined
                        ? arguments[2]
                        : false;
                  var tableOffset = xrefEntry.offset;
                  var stream = this.fetch(Ref.get(tableOffset, 0));
                  if (!(stream instanceof BaseStream)) {
                     throw new FormatError("bad ObjStm stream");
                  }
                  var first = stream.dict.get("First");
                  var n = stream.dict.get("N");
                  if (!Number.isInteger(first) || !Number.isInteger(n)) {
                     throw new FormatError(
                        "invalid first and n parameters for ObjStm stream",
                     );
                  }
                  var parser = new Parser({
                     lexer: new Lexer(stream),
                     xref: this,
                     allowStreams: true,
                  });
                  var nums = new Array(n);
                  var offsets = new Array(n);
                  for (var i = 0; i < n; ++i) {
                     var num = parser.getObj();
                     if (!Number.isInteger(num)) {
                        throw new FormatError(
                           "invalid object number in the ObjStm stream: ".concat(num),
                        );
                     }
                     var offset = parser.getObj();
                     if (!Number.isInteger(offset)) {
                        throw new FormatError(
                           "invalid object offset in the ObjStm stream: ".concat(offset),
                        );
                     }
                     nums[i] = num;
                     offsets[i] = offset;
                  }
                  var start = (stream.start || 0) + first;
                  var entries = new Array(n);
                  for (var _i72 = 0; _i72 < n; ++_i72) {
                     var length =
                        _i72 < n - 1 ? offsets[_i72 + 1] - offsets[_i72] : undefined;
                     if (length < 0) {
                        throw new FormatError("Invalid offset in the ObjStm stream.");
                     }
                     parser = new Parser({
                        lexer: new Lexer(
                           stream.makeSubStream(
                              start + offsets[_i72],
                              length,
                              stream.dict,
                           ),
                        ),
                        xref: this,
                        allowStreams: true,
                     });
                     var obj = parser.getObj();
                     entries[_i72] = obj;
                     if (obj instanceof BaseStream) {
                        continue;
                     }
                     var _num = nums[_i72],
                        entry = this.entries[_num];
                     if (entry && entry.offset === tableOffset && entry.gen === _i72) {
                        this._cacheMap.set(_num, obj);
                     }
                  }
                  xrefEntry = entries[xrefEntry.gen];
                  if (xrefEntry === undefined) {
                     throw new XRefEntryException(
                        "Bad (compressed) XRef entry: ".concat(ref),
                     );
                  }
                  return xrefEntry;
               },
            },
            {
               key: "fetchIfRefAsync",
               value: (function () {
                  var _fetchIfRefAsync = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee60(obj, suppressEncryption) {
                           return _regenerator().w(
                              function (_context74) {
                                 while (1)
                                    switch (_context74.n) {
                                       case 0:
                                          if (!(obj instanceof Ref)) {
                                             _context74.n = 1;
                                             break;
                                          }
                                          return _context74.a(
                                             2,
                                             this.fetchAsync(obj, suppressEncryption),
                                          );
                                       case 1:
                                          return _context74.a(2, obj);
                                    }
                              },
                              _callee60,
                              this,
                           );
                        },
                     ),
                  );
                  function fetchIfRefAsync(_x172, _x173) {
                     return _fetchIfRefAsync.apply(this, arguments);
                  }
                  return fetchIfRefAsync;
               })(),
            },
            {
               key: "fetchAsync",
               value: (function () {
                  var _fetchAsync = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee61(ref, suppressEncryption) {
                           var _t56;
                           return _regenerator().w(
                              function (_context75) {
                                 while (1)
                                    switch ((_context75.p = _context75.n)) {
                                       case 0:
                                          _context75.p = 0;
                                          return _context75.a(
                                             2,
                                             this.fetch(ref, suppressEncryption),
                                          );
                                       case 1:
                                          _context75.p = 1;
                                          _t56 = _context75.v;
                                          if (_t56 instanceof MissingDataException) {
                                             _context75.n = 2;
                                             break;
                                          }
                                          throw _t56;
                                       case 2:
                                          _context75.n = 3;
                                          return this.pdfManager.requestRange(
                                             _t56.begin,
                                             _t56.end,
                                          );
                                       case 3:
                                          return _context75.a(
                                             2,
                                             this.fetchAsync(ref, suppressEncryption),
                                          );
                                    }
                              },
                              _callee61,
                              this,
                              [[0, 1]],
                           );
                        },
                     ),
                  );
                  function fetchAsync(_x174, _x175) {
                     return _fetchAsync.apply(this, arguments);
                  }
                  return fetchAsync;
               })(),
            },
            {
               key: "getCatalogObj",
               value: function getCatalogObj() {
                  return this.root;
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/document.js
      var DEFAULT_USER_UNIT = 1.0;
      var LETTER_SIZE_MEDIABOX = [0, 0, 612, 792];
      var _Page_brand = /*#__PURE__*/ new WeakSet();
      var Page = /*#__PURE__*/ (function () {
         function Page(_ref105) {
            var pdfManager = _ref105.pdfManager,
               xref = _ref105.xref,
               pageIndex = _ref105.pageIndex,
               pageDict = _ref105.pageDict,
               _ref104 = _ref105.ref,
               globalIdFactory = _ref105.globalIdFactory,
               fontCache = _ref105.fontCache,
               builtInCMapCache = _ref105.builtInCMapCache,
               standardFontDataCache = _ref105.standardFontDataCache,
               globalImageCache = _ref105.globalImageCache,
               systemFontCache = _ref105.systemFontCache,
               nonBlendModesSet = _ref105.nonBlendModesSet,
               xfaFactory = _ref105.xfaFactory;
            _classCallCheck(this, Page);
            _classPrivateMethodInitSpec(this, _Page_brand);
            this.pdfManager = pdfManager;
            this.pageIndex = pageIndex;
            this.pageDict = pageDict;
            this.xref = xref;
            this.ref = _ref104;
            this.fontCache = fontCache;
            this.builtInCMapCache = builtInCMapCache;
            this.standardFontDataCache = standardFontDataCache;
            this.globalImageCache = globalImageCache;
            this.systemFontCache = systemFontCache;
            this.nonBlendModesSet = nonBlendModesSet;
            this.evaluatorOptions = pdfManager.evaluatorOptions;
            this.resourcesPromise = null;
            this.xfaFactory = xfaFactory;
            var idCounters = { obj: 0 };
            this._localIdFactory = /*#__PURE__*/ (function (_globalIdFactory) {
               function _class() {
                  _classCallCheck(this, _class);
                  return _callSuper(this, _class, arguments);
               }
               _inherits(_class, _globalIdFactory);
               return _createClass(_class, null, [
                  {
                     key: "createObjId",
                     value: function createObjId() {
                        return "p".concat(pageIndex, "_").concat(++idCounters.obj);
                     },
                  },
                  {
                     key: "getPageObjId",
                     value: function getPageObjId() {
                        return "p".concat(_ref104.toString());
                     },
                  },
               ]);
            })(globalIdFactory);
         }
         return _createClass(Page, [
            {
               key: "_getInheritableProperty",
               value: function _getInheritableProperty(key) {
                  var getArray =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : false;
                  var value = getInheritableProperty({
                     dict: this.pageDict,
                     key: key,
                     getArray: getArray,
                     stopWhenFound: false,
                  });
                  if (!Array.isArray(value)) {
                     return value;
                  }
                  if (value.length === 1 || !(value[0] instanceof Dict)) {
                     return value[0];
                  }
                  return Dict.merge({ xref: this.xref, dictArray: value });
               },
            },
            {
               key: "content",
               get: function get() {
                  return this.pageDict.getArray("Contents");
               },
            },
            {
               key: "resources",
               get: function get() {
                  var resources = this._getInheritableProperty("Resources");
                  return shadow(
                     this,
                     "resources",
                     resources instanceof Dict ? resources : Dict.empty,
                  );
               },
            },
            {
               key: "_getBoundingBox",
               value: function _getBoundingBox(name) {
                  if (this.xfaData) {
                     return this.xfaData.bbox;
                  }
                  var box = this._getInheritableProperty(name, true);
                  if (Array.isArray(box) && box.length === 4) {
                     box = Util.normalizeRect(box);
                     if (box[2] - box[0] > 0 && box[3] - box[1] > 0) {
                        return box;
                     }
                     warn("Empty, or invalid, /".concat(name, " entry."));
                  }
                  return null;
               },
            },
            {
               key: "mediaBox",
               get: function get() {
                  return shadow(
                     this,
                     "mediaBox",
                     this._getBoundingBox("MediaBox") || LETTER_SIZE_MEDIABOX,
                  );
               },
            },
            {
               key: "cropBox",
               get: function get() {
                  return shadow(
                     this,
                     "cropBox",
                     this._getBoundingBox("CropBox") || this.mediaBox,
                  );
               },
            },
            {
               key: "userUnit",
               get: function get() {
                  var obj = this.pageDict.get("UserUnit");
                  if (typeof obj !== "number" || obj <= 0) {
                     obj = DEFAULT_USER_UNIT;
                  }
                  return shadow(this, "userUnit", obj);
               },
            },
            {
               key: "view",
               get: function get() {
                  var cropBox = this.cropBox,
                     mediaBox = this.mediaBox;
                  if (cropBox !== mediaBox && !isArrayEqual(cropBox, mediaBox)) {
                     var box = Util.intersect(cropBox, mediaBox);
                     if (box && box[2] - box[0] > 0 && box[3] - box[1] > 0) {
                        return shadow(this, "view", box);
                     }
                     warn("Empty /CropBox and /MediaBox intersection.");
                  }
                  return shadow(this, "view", mediaBox);
               },
            },
            {
               key: "rotate",
               get: function get() {
                  var rotate = this._getInheritableProperty("Rotate") || 0;
                  if (rotate % 90 !== 0) {
                     rotate = 0;
                  } else if (rotate >= 360) {
                     rotate %= 360;
                  } else if (rotate < 0) {
                     rotate = ((rotate % 360) + 360) % 360;
                  }
                  return shadow(this, "rotate", rotate);
               },
            },
            {
               key: "_onSubStreamError",
               value: function _onSubStreamError(reason, objId) {
                  if (this.evaluatorOptions.ignoreErrors) {
                     warn(
                        "getContentStream - ignoring sub-stream ("
                           .concat(objId, '): "')
                           .concat(reason, '".'),
                     );
                     return;
                  }
                  throw reason;
               },
            },
            {
               key: "getContentStream",
               value: function getContentStream() {
                  var _this292 = this;
                  return this.pdfManager
                     .ensure(this, "content")
                     .then(function (content) {
                        if (content instanceof BaseStream) {
                           return content;
                        }
                        if (Array.isArray(content)) {
                           return new StreamsSequenceStream(
                              content,
                              _this292._onSubStreamError.bind(_this292),
                           );
                        }
                        return new NullStream();
                     });
               },
            },
            {
               key: "xfaData",
               get: function get() {
                  return shadow(
                     this,
                     "xfaData",
                     this.xfaFactory
                        ? { bbox: this.xfaFactory.getBoundingBox(this.pageIndex) }
                        : null,
                  );
               },
            },
            {
               key: "saveNewAnnotations",
               value: (function () {
                  var _saveNewAnnotations2 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee62(handler, task, annotations, imagePromises) {
                           var partialEvaluator,
                              deletedAnnotations,
                              existingAnnotations,
                              pageDict,
                              annotationsArray,
                              newData,
                              _iterator213,
                              _step213,
                              ref,
                              savedDict,
                              buffer,
                              objects,
                              _iterator214,
                              _step214,
                              deletedRef;
                           return _regenerator().w(
                              function (_context76) {
                                 while (1)
                                    switch (_context76.n) {
                                       case 0:
                                          if (!this.xfaFactory) {
                                             _context76.n = 1;
                                             break;
                                          }
                                          throw new Error(
                                             "XFA: Cannot save new annotations.",
                                          );
                                       case 1:
                                          partialEvaluator = new PartialEvaluator({
                                             xref: this.xref,
                                             handler: handler,
                                             pageIndex: this.pageIndex,
                                             idFactory: this._localIdFactory,
                                             fontCache: this.fontCache,
                                             builtInCMapCache: this.builtInCMapCache,
                                             standardFontDataCache: this.standardFontDataCache,
                                             globalImageCache: this.globalImageCache,
                                             systemFontCache: this.systemFontCache,
                                             options: this.evaluatorOptions,
                                          });
                                          deletedAnnotations = new RefSetCache();
                                          existingAnnotations = new RefSet();
                                          _assertClassBrand(
                                             _Page_brand,
                                             this,
                                             _replaceIdByRef,
                                          ).call(
                                             this,
                                             annotations,
                                             deletedAnnotations,
                                             existingAnnotations,
                                          );
                                          pageDict = this.pageDict;
                                          annotationsArray = this.annotations.filter(
                                             function (a) {
                                                return !(
                                                   a instanceof Ref && deletedAnnotations.has(a)
                                                );
                                             },
                                          );
                                          _context76.n = 2;
                                          return AnnotationFactory.saveNewAnnotations(
                                             partialEvaluator,
                                             task,
                                             annotations,
                                             imagePromises,
                                          );
                                       case 2:
                                          newData = _context76.v;
                                          _iterator213 = _createForOfIteratorHelper(
                                             newData.annotations,
                                          );
                                          try {
                                             for (
                                                _iterator213.s();
                                                !(_step213 = _iterator213.n()).done;

                                             ) {
                                                ref = _step213.value.ref;
                                                if (
                                                   ref instanceof Ref &&
                                                   !existingAnnotations.has(ref)
                                                ) {
                                                   annotationsArray.push(ref);
                                                }
                                             }
                                          } catch (err) {
                                             _iterator213.e(err);
                                          } finally {
                                             _iterator213.f();
                                          }
                                          savedDict = pageDict.get("Annots");
                                          pageDict.set("Annots", annotationsArray);
                                          buffer = [];
                                          _context76.n = 3;
                                          return writeObject(
                                             this.ref,
                                             pageDict,
                                             buffer,
                                             this.xref,
                                          );
                                       case 3:
                                          if (savedDict) {
                                             pageDict.set("Annots", savedDict);
                                          }
                                          objects = newData.dependencies;
                                          objects.push.apply(
                                             objects,
                                             [{ ref: this.ref, data: buffer.join("") }].concat(
                                                _toConsumableArray(newData.annotations),
                                             ),
                                          );
                                          _iterator214 =
                                             _createForOfIteratorHelper(deletedAnnotations);
                                          try {
                                             for (
                                                _iterator214.s();
                                                !(_step214 = _iterator214.n()).done;

                                             ) {
                                                deletedRef = _step214.value;
                                                objects.push({ ref: deletedRef, data: null });
                                             }
                                          } catch (err) {
                                             _iterator214.e(err);
                                          } finally {
                                             _iterator214.f();
                                          }
                                          return _context76.a(2, objects);
                                    }
                              },
                              _callee62,
                              this,
                           );
                        },
                     ),
                  );
                  function saveNewAnnotations(_x176, _x177, _x178, _x179) {
                     return _saveNewAnnotations2.apply(this, arguments);
                  }
                  return saveNewAnnotations;
               })(),
            },
            {
               key: "save",
               value: function save(handler, task, annotationStorage) {
                  var partialEvaluator = new PartialEvaluator({
                     xref: this.xref,
                     handler: handler,
                     pageIndex: this.pageIndex,
                     idFactory: this._localIdFactory,
                     fontCache: this.fontCache,
                     builtInCMapCache: this.builtInCMapCache,
                     standardFontDataCache: this.standardFontDataCache,
                     globalImageCache: this.globalImageCache,
                     systemFontCache: this.systemFontCache,
                     options: this.evaluatorOptions,
                  });
                  return this._parsedAnnotations.then(function (annotations) {
                     var newRefsPromises = [];
                     var _iterator215 = _createForOfIteratorHelper(annotations),
                        _step215;
                     try {
                        for (_iterator215.s(); !(_step215 = _iterator215.n()).done; ) {
                           var annotation = _step215.value;
                           if (!annotation.mustBePrinted(annotationStorage)) {
                              continue;
                           }
                           newRefsPromises.push(
                              annotation
                                 .save(partialEvaluator, task, annotationStorage)
                                 ["catch"](function (reason) {
                                 warn(
                                    "save - ignoring annotation data during " +
                                    '"'
                                       .concat(task.name, '" task: "')
                                       .concat(reason, '".'),
                                 );
                                 return null;
                              }),
                           );
                        }
                     } catch (err) {
                        _iterator215.e(err);
                     } finally {
                        _iterator215.f();
                     }
                     return Promise.all(newRefsPromises).then(function (newRefs) {
                        return newRefs.filter(function (newRef) {
                           return !!newRef;
                        });
                     });
                  });
               },
            },
            {
               key: "loadResources",
               value: function loadResources(keys) {
                  var _this293 = this;
                  if (!this.resourcesPromise) {
                     this.resourcesPromise = this.pdfManager.ensure(this, "resources");
                  }
                  return this.resourcesPromise.then(function () {
                     var objectLoader = new ObjectLoader(
                        _this293.resources,
                        keys,
                        _this293.xref,
                     );
                     return objectLoader.load();
                  });
               },
            },
            {
               key: "getOperatorList",
               value: function getOperatorList(_ref106) {
                  var _this294 = this;
                  var handler = _ref106.handler,
                     sink = _ref106.sink,
                     task = _ref106.task,
                     intent = _ref106.intent,
                     cacheKey = _ref106.cacheKey,
                     _ref106$annotationSto = _ref106.annotationStorage,
                     annotationStorage =
                        _ref106$annotationSto === void 0 ? null : _ref106$annotationSto;
                  var contentStreamPromise = this.getContentStream();
                  var resourcesPromise = this.loadResources([
                     "ColorSpace",
                     "ExtGState",
                     "Font",
                     "Pattern",
                     "Properties",
                     "Shading",
                     "XObject",
                  ]);
                  var partialEvaluator = new PartialEvaluator({
                     xref: this.xref,
                     handler: handler,
                     pageIndex: this.pageIndex,
                     idFactory: this._localIdFactory,
                     fontCache: this.fontCache,
                     builtInCMapCache: this.builtInCMapCache,
                     standardFontDataCache: this.standardFontDataCache,
                     globalImageCache: this.globalImageCache,
                     systemFontCache: this.systemFontCache,
                     options: this.evaluatorOptions,
                  });
                  var newAnnotationsByPage = !this.xfaFactory
                     ? getNewAnnotationsMap(annotationStorage)
                     : null;
                  var deletedAnnotations = null;
                  var newAnnotationsPromise = Promise.resolve(null);
                  if (newAnnotationsByPage) {
                     var newAnnotations = newAnnotationsByPage.get(this.pageIndex);
                     if (newAnnotations) {
                        var annotationGlobalsPromise =
                           this.pdfManager.ensureDoc("annotationGlobals");
                        var imagePromises;
                        var missingBitmaps = new Set();
                        var _iterator216 = _createForOfIteratorHelper(newAnnotations),
                           _step216;
                        try {
                           for (
                              _iterator216.s();
                              !(_step216 = _iterator216.n()).done;

                           ) {
                              var _step216$value = _step216.value,
                                 bitmapId = _step216$value.bitmapId,
                                 bitmap = _step216$value.bitmap;
                              if (bitmapId && !bitmap && !missingBitmaps.has(bitmapId)) {
                                 missingBitmaps.add(bitmapId);
                              }
                           }
                        } catch (err) {
                           _iterator216.e(err);
                        } finally {
                           _iterator216.f();
                        }
                        var isOffscreenCanvasSupported =
                           this.evaluatorOptions.isOffscreenCanvasSupported;
                        if (missingBitmaps.size > 0) {
                           var annotationWithBitmaps = newAnnotations.slice();
                           var _iterator217 =
                                 _createForOfIteratorHelper(annotationStorage),
                              _step217;
                           try {
                              for (
                                 _iterator217.s();
                                 !(_step217 = _iterator217.n()).done;

                              ) {
                                 var _step217$value = _slicedToArray(_step217.value, 2),
                                    key = _step217$value[0],
                                    annotation = _step217$value[1];
                                 if (!key.startsWith(AnnotationEditorPrefix)) {
                                    continue;
                                 }
                                 if (
                                    annotation.bitmap &&
                                    missingBitmaps.has(annotation.bitmapId)
                                 ) {
                                    annotationWithBitmaps.push(annotation);
                                 }
                              }
                           } catch (err) {
                              _iterator217.e(err);
                           } finally {
                              _iterator217.f();
                           }
                           imagePromises = AnnotationFactory.generateImages(
                              annotationWithBitmaps,
                              this.xref,
                              isOffscreenCanvasSupported,
                           );
                        } else {
                           imagePromises = AnnotationFactory.generateImages(
                              newAnnotations,
                              this.xref,
                              isOffscreenCanvasSupported,
                           );
                        }
                        deletedAnnotations = new RefSet();
                        _assertClassBrand(_Page_brand, this, _replaceIdByRef).call(
                           this,
                           newAnnotations,
                           deletedAnnotations,
                           null,
                        );
                        newAnnotationsPromise = annotationGlobalsPromise.then(
                           function (annotationGlobals) {
                              if (!annotationGlobals) {
                                 return null;
                              }
                              return AnnotationFactory.printNewAnnotations(
                                 annotationGlobals,
                                 partialEvaluator,
                                 task,
                                 newAnnotations,
                                 imagePromises,
                              );
                           },
                        );
                     }
                  }
                  var dataPromises = Promise.all([
                     contentStreamPromise,
                     resourcesPromise,
                  ]);
                  var pageListPromise = dataPromises.then(function (_ref107) {
                     var _ref108 = _slicedToArray(_ref107, 1),
                        contentStream = _ref108[0];
                     var opList = new OperatorList(intent, sink);
                     handler.send("StartRenderPage", {
                        transparency: partialEvaluator.hasBlendModes(
                           _this294.resources,
                           _this294.nonBlendModesSet,
                        ),
                        pageIndex: _this294.pageIndex,
                        cacheKey: cacheKey,
                     });
                     return partialEvaluator
                        .getOperatorList({
                           stream: contentStream,
                           task: task,
                           resources: _this294.resources,
                           operatorList: opList,
                        })
                        .then(function () {
                           return opList;
                        });
                  });
                  return Promise.all([
                     pageListPromise,
                     this._parsedAnnotations,
                     newAnnotationsPromise,
                  ]).then(function (_ref109) {
                     var _ref110 = _slicedToArray(_ref109, 3),
                        pageOpList = _ref110[0],
                        annotations = _ref110[1],
                        newAnnotations = _ref110[2];
                     if (newAnnotations) {
                        annotations = annotations.filter(function (a) {
                           return !(a.ref && deletedAnnotations.has(a.ref));
                        });
                        var _loop5 = function _loop5(_i73, _ii15) {
                           var newAnnotation = newAnnotations[_i73];
                           if (newAnnotation.refToReplace) {
                              var j = annotations.findIndex(function (a) {
                                 return (
                                    a.ref && isRefsEqual(a.ref, newAnnotation.refToReplace)
                                 );
                              });
                              if (j >= 0) {
                                 annotations.splice(j, 1, newAnnotation);
                                 newAnnotations.splice(_i73--, 1);
                                 _ii15--;
                              }
                           }
                           ((i = _i73), (ii = _ii15));
                        };
                        for (var i = 0, ii = newAnnotations.length; i < ii; i++) {
                           _loop5(i, ii);
                        }
                        annotations = annotations.concat(newAnnotations);
                     }
                     if (
                        annotations.length === 0 ||
                        intent & RenderingIntentFlag.ANNOTATIONS_DISABLE
                     ) {
                        pageOpList.flush(true);
                        return { length: pageOpList.totalLength };
                     }
                     var renderForms = !!(
                           intent & RenderingIntentFlag.ANNOTATIONS_FORMS
                        ),
                        intentAny = !!(intent & RenderingIntentFlag.ANY),
                        intentDisplay = !!(intent & RenderingIntentFlag.DISPLAY),
                        intentPrint = !!(intent & RenderingIntentFlag.PRINT);
                     var opListPromises = [];
                     var _iterator218 = _createForOfIteratorHelper(annotations),
                        _step218;
                     try {
                        for (_iterator218.s(); !(_step218 = _iterator218.n()).done; ) {
                           var _annotation = _step218.value;
                           if (
                              intentAny ||
                              (intentDisplay &&
                                 _annotation.mustBeViewed(
                                    annotationStorage,
                                    renderForms,
                                 )) ||
                              (intentPrint &&
                                 _annotation.mustBePrinted(annotationStorage))
                           ) {
                              opListPromises.push(
                                 _annotation
                                    .getOperatorList(
                                       partialEvaluator,
                                       task,
                                       intent,
                                       renderForms,
                                       annotationStorage,
                                    )
                                    ["catch"](function (reason) {
                                    warn(
                                       "getOperatorList - ignoring annotation data during " +
                                       '"'
                                          .concat(task.name, '" task: "')
                                          .concat(reason, '".'),
                                    );
                                    return {
                                       opList: null,
                                       separateForm: false,
                                       separateCanvas: false,
                                    };
                                 }),
                              );
                           }
                        }
                     } catch (err) {
                        _iterator218.e(err);
                     } finally {
                        _iterator218.f();
                     }
                     return Promise.all(opListPromises).then(function (opLists) {
                        var form = false,
                           canvas = false;
                        var _iterator219 = _createForOfIteratorHelper(opLists),
                           _step219;
                        try {
                           for (
                              _iterator219.s();
                              !(_step219 = _iterator219.n()).done;

                           ) {
                              var _step219$value = _step219.value,
                                 opList = _step219$value.opList,
                                 separateForm = _step219$value.separateForm,
                                 separateCanvas = _step219$value.separateCanvas;
                              pageOpList.addOpList(opList);
                              form || (form = separateForm);
                              canvas || (canvas = separateCanvas);
                           }
                        } catch (err) {
                           _iterator219.e(err);
                        } finally {
                           _iterator219.f();
                        }
                        pageOpList.flush(true, { form: form, canvas: canvas });
                        return { length: pageOpList.totalLength };
                     });
                  });
               },
            },
            {
               key: "extractTextContent",
               value: function extractTextContent(_ref111) {
                  var _this295 = this;
                  var handler = _ref111.handler,
                     task = _ref111.task,
                     includeMarkedContent = _ref111.includeMarkedContent,
                     disableNormalization = _ref111.disableNormalization,
                     sink = _ref111.sink;
                  var contentStreamPromise = this.getContentStream();
                  var resourcesPromise = this.loadResources([
                     "ExtGState",
                     "Font",
                     "Properties",
                     "XObject",
                  ]);
                  var dataPromises = Promise.all([
                     contentStreamPromise,
                     resourcesPromise,
                  ]);
                  return dataPromises.then(function (_ref112) {
                     var _ref113 = _slicedToArray(_ref112, 1),
                        contentStream = _ref113[0];
                     var partialEvaluator = new PartialEvaluator({
                        xref: _this295.xref,
                        handler: handler,
                        pageIndex: _this295.pageIndex,
                        idFactory: _this295._localIdFactory,
                        fontCache: _this295.fontCache,
                        builtInCMapCache: _this295.builtInCMapCache,
                        standardFontDataCache: _this295.standardFontDataCache,
                        globalImageCache: _this295.globalImageCache,
                        systemFontCache: _this295.systemFontCache,
                        options: _this295.evaluatorOptions,
                     });
                     return partialEvaluator.getTextContent({
                        stream: contentStream,
                        task: task,
                        resources: _this295.resources,
                        includeMarkedContent: includeMarkedContent,
                        disableNormalization: disableNormalization,
                        sink: sink,
                        viewBox: _this295.view,
                     });
                  });
               },
            },
            {
               key: "getStructTree",
               value: (function () {
                  var _getStructTree = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(function _callee63() {
                        var structTreeRoot, structTree;
                        return _regenerator().w(
                           function (_context77) {
                              while (1)
                                 switch (_context77.n) {
                                    case 0:
                                       _context77.n = 1;
                                       return this.pdfManager.ensureCatalog(
                                          "structTreeRoot",
                                       );
                                    case 1:
                                       structTreeRoot = _context77.v;
                                       if (structTreeRoot) {
                                          _context77.n = 2;
                                          break;
                                       }
                                       return _context77.a(2, null);
                                    case 2:
                                       _context77.n = 3;
                                       return this._parsedAnnotations;
                                    case 3:
                                       _context77.n = 4;
                                       return this.pdfManager.ensure(
                                          this,
                                          "_parseStructTree",
                                          [structTreeRoot],
                                       );
                                    case 4:
                                       structTree = _context77.v;
                                       return _context77.a(2, structTree.serializable);
                                 }
                           },
                           _callee63,
                           this,
                        );
                     }),
                  );
                  function getStructTree() {
                     return _getStructTree.apply(this, arguments);
                  }
                  return getStructTree;
               })(),
            },
            {
               key: "_parseStructTree",
               value: function _parseStructTree(structTreeRoot) {
                  var tree = new StructTreePage(structTreeRoot, this.pageDict);
                  tree.parse(this.ref);
                  return tree;
               },
            },
            {
               key: "getAnnotationsData",
               value: (function () {
                  var _getAnnotationsData = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee64(handler, task, intent) {
                           var annotations,
                              annotationsData,
                              textContentPromises,
                              partialEvaluator,
                              intentAny,
                              intentDisplay,
                              intentPrint,
                              _iterator220,
                              _step220,
                              annotation,
                              isVisible;
                           return _regenerator().w(
                              function (_context78) {
                                 while (1)
                                    switch (_context78.n) {
                                       case 0:
                                          _context78.n = 1;
                                          return this._parsedAnnotations;
                                       case 1:
                                          annotations = _context78.v;
                                          if (!(annotations.length === 0)) {
                                             _context78.n = 2;
                                             break;
                                          }
                                          return _context78.a(2, annotations);
                                       case 2:
                                          ((annotationsData = []),
                                             (textContentPromises = []));
                                          ((intentAny = !!(intent & RenderingIntentFlag.ANY)),
                                             (intentDisplay = !!(
                                                intent & RenderingIntentFlag.DISPLAY
                                             )),
                                             (intentPrint = !!(
                                                intent & RenderingIntentFlag.PRINT
                                             )));
                                          _iterator220 =
                                             _createForOfIteratorHelper(annotations);
                                          try {
                                             for (
                                                _iterator220.s();
                                                !(_step220 = _iterator220.n()).done;

                                             ) {
                                                annotation = _step220.value;
                                                isVisible =
                                                   intentAny ||
                                                   (intentDisplay && annotation.viewable);
                                                if (
                                                   isVisible ||
                                                   (intentPrint && annotation.printable)
                                                ) {
                                                   annotationsData.push(annotation.data);
                                                }
                                                if (annotation.hasTextContent && isVisible) {
                                                   partialEvaluator ||
                                                   (partialEvaluator = new PartialEvaluator({
                                                      xref: this.xref,
                                                      handler: handler,
                                                      pageIndex: this.pageIndex,
                                                      idFactory: this._localIdFactory,
                                                      fontCache: this.fontCache,
                                                      builtInCMapCache: this.builtInCMapCache,
                                                      standardFontDataCache:
                                                      this.standardFontDataCache,
                                                      globalImageCache: this.globalImageCache,
                                                      systemFontCache: this.systemFontCache,
                                                      options: this.evaluatorOptions,
                                                   }));
                                                   textContentPromises.push(
                                                      annotation
                                                         .extractTextContent(
                                                            partialEvaluator,
                                                            task,
                                                            [
                                                               -Infinity,
                                                               -Infinity,
                                                               Infinity,
                                                               Infinity,
                                                            ],
                                                         )
                                                         ["catch"](function (reason) {
                                                         warn(
                                                            'getAnnotationsData - ignoring textContent during "'
                                                               .concat(task.name, '" task: "')
                                                               .concat(reason, '".'),
                                                         );
                                                      }),
                                                   );
                                                }
                                             }
                                          } catch (err) {
                                             _iterator220.e(err);
                                          } finally {
                                             _iterator220.f();
                                          }
                                          _context78.n = 3;
                                          return Promise.all(textContentPromises);
                                       case 3:
                                          return _context78.a(2, annotationsData);
                                    }
                              },
                              _callee64,
                              this,
                           );
                        },
                     ),
                  );
                  function getAnnotationsData(_x180, _x181, _x182) {
                     return _getAnnotationsData.apply(this, arguments);
                  }
                  return getAnnotationsData;
               })(),
            },
            {
               key: "annotations",
               get: function get() {
                  var annots = this._getInheritableProperty("Annots");
                  return shadow(
                     this,
                     "annotations",
                     Array.isArray(annots) ? annots : [],
                  );
               },
            },
            {
               key: "_parsedAnnotations",
               get: function get() {
                  var _this296 = this;
                  var promise = this.pdfManager.ensure(this, "annotations").then(
                     /*#__PURE__*/ (function () {
                        var _ref114 = _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(function _callee65(annots) {
                              var annotationGlobals,
                                 annotationPromises,
                                 _iterator221,
                                 _step221,
                                 annotationRef,
                                 sortedAnnotations,
                                 popupAnnotations,
                                 widgetAnnotations,
                                 _iterator222,
                                 _step222,
                                 annotation,
                                 _t57,
                                 _t58,
                                 _t59;
                              return _regenerator().w(
                                 function (_context79) {
                                    while (1)
                                       switch ((_context79.p = _context79.n)) {
                                          case 0:
                                             if (!(annots.length === 0)) {
                                                _context79.n = 1;
                                                break;
                                             }
                                             return _context79.a(2, annots);
                                          case 1:
                                             _context79.n = 2;
                                             return _this296.pdfManager.ensureDoc(
                                                "annotationGlobals",
                                             );
                                          case 2:
                                             annotationGlobals = _context79.v;
                                             if (annotationGlobals) {
                                                _context79.n = 3;
                                                break;
                                             }
                                             return _context79.a(2, []);
                                          case 3:
                                             annotationPromises = [];
                                             _iterator221 = _createForOfIteratorHelper(annots);
                                             try {
                                                for (
                                                   _iterator221.s();
                                                   !(_step221 = _iterator221.n()).done;

                                                ) {
                                                   annotationRef = _step221.value;
                                                   annotationPromises.push(
                                                      AnnotationFactory.create(
                                                         _this296.xref,
                                                         annotationRef,
                                                         annotationGlobals,
                                                         _this296._localIdFactory,
                                                         false,
                                                         _this296.ref,
                                                      )["catch"](function (reason) {
                                                         warn(
                                                            '_parsedAnnotations: "'.concat(
                                                               reason,
                                                               '".',
                                                            ),
                                                         );
                                                         return null;
                                                      }),
                                                   );
                                                }
                                             } catch (err) {
                                                _iterator221.e(err);
                                             } finally {
                                                _iterator221.f();
                                             }
                                             sortedAnnotations = [];
                                             _t57 = _createForOfIteratorHelper;
                                             _context79.n = 4;
                                             return Promise.all(annotationPromises);
                                          case 4:
                                             _t58 = _context79.v;
                                             _iterator222 = _t57(_t58);
                                             _context79.p = 5;
                                             _iterator222.s();
                                          case 6:
                                             if ((_step222 = _iterator222.n()).done) {
                                                _context79.n = 11;
                                                break;
                                             }
                                             annotation = _step222.value;
                                             if (annotation) {
                                                _context79.n = 7;
                                                break;
                                             }
                                             return _context79.a(3, 10);
                                          case 7:
                                             if (!(annotation instanceof WidgetAnnotation)) {
                                                _context79.n = 8;
                                                break;
                                             }
                                             (
                                                widgetAnnotations || (widgetAnnotations = [])
                                             ).push(annotation);
                                             return _context79.a(3, 10);
                                          case 8:
                                             if (!(annotation instanceof PopupAnnotation)) {
                                                _context79.n = 9;
                                                break;
                                             }
                                             (
                                                popupAnnotations || (popupAnnotations = [])
                                             ).push(annotation);
                                             return _context79.a(3, 10);
                                          case 9:
                                             sortedAnnotations.push(annotation);
                                          case 10:
                                             _context79.n = 6;
                                             break;
                                          case 11:
                                             _context79.n = 13;
                                             break;
                                          case 12:
                                             _context79.p = 12;
                                             _t59 = _context79.v;
                                             _iterator222.e(_t59);
                                          case 13:
                                             _context79.p = 13;
                                             _iterator222.f();
                                             return _context79.f(13);
                                          case 14:
                                             if (widgetAnnotations) {
                                                sortedAnnotations.push.apply(
                                                   sortedAnnotations,
                                                   _toConsumableArray(widgetAnnotations),
                                                );
                                             }
                                             if (popupAnnotations) {
                                                sortedAnnotations.push.apply(
                                                   sortedAnnotations,
                                                   _toConsumableArray(popupAnnotations),
                                                );
                                             }
                                             return _context79.a(2, sortedAnnotations);
                                       }
                                 },
                                 _callee65,
                                 null,
                                 [[5, 12, 13, 14]],
                              );
                           }),
                        );
                        return function (_x183) {
                           return _ref114.apply(this, arguments);
                        };
                     })(),
                  );
                  return shadow(this, "_parsedAnnotations", promise);
               },
            },
            {
               key: "jsActions",
               get: function get() {
                  var actions = collectActions(
                     this.xref,
                     this.pageDict,
                     PageActionEventType,
                  );
                  return shadow(this, "jsActions", actions);
               },
            },
         ]);
      })();
      function _replaceIdByRef(
         annotations,
         deletedAnnotations,
         existingAnnotations,
      ) {
         var _iterator248 = _createForOfIteratorHelper(annotations),
            _step248;
         try {
            for (_iterator248.s(); !(_step248 = _iterator248.n()).done; ) {
               var annotation = _step248.value;
               if (annotation.id) {
                  var ref = Ref.fromString(annotation.id);
                  if (!ref) {
                     warn(
                        "A non-linked annotation cannot be modified: ".concat(
                           annotation.id,
                        ),
                     );
                     continue;
                  }
                  if (annotation.deleted) {
                     deletedAnnotations.put(ref, ref);
                     continue;
                  }
                  existingAnnotations === null ||
                  existingAnnotations === void 0 ||
                  existingAnnotations.put(ref);
                  annotation.ref = ref;
                  delete annotation.id;
               }
            }
         } catch (err) {
            _iterator248.e(err);
         } finally {
            _iterator248.f();
         }
      }
      var PDF_HEADER_SIGNATURE = new Uint8Array([0x25, 0x50, 0x44, 0x46, 0x2d]);
      var STARTXREF_SIGNATURE = new Uint8Array([
         0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x72, 0x65, 0x66,
      ]);
      var ENDOBJ_SIGNATURE = new Uint8Array([0x65, 0x6e, 0x64, 0x6f, 0x62, 0x6a]);
      var FINGERPRINT_FIRST_BYTES = 1024;
      var EMPTY_FINGERPRINT =
         "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";
      function find(stream, signature) {
         var limit =
            arguments.length > 2 && arguments[2] !== undefined
               ? arguments[2]
               : 1024;
         var backwards =
            arguments.length > 3 && arguments[3] !== undefined
               ? arguments[3]
               : false;
         var signatureLength = signature.length;
         var scanBytes = stream.peekBytes(limit);
         var scanLength = scanBytes.length - signatureLength;
         if (scanLength <= 0) {
            return false;
         }
         if (backwards) {
            var signatureEnd = signatureLength - 1;
            var pos = scanBytes.length - 1;
            while (pos >= signatureEnd) {
               var j = 0;
               while (
                  j < signatureLength &&
                  scanBytes[pos - j] === signature[signatureEnd - j]
                  ) {
                  j++;
               }
               if (j >= signatureLength) {
                  stream.pos += pos - signatureEnd;
                  return true;
               }
               pos--;
            }
         } else {
            var _pos = 0;
            while (_pos <= scanLength) {
               var _j19 = 0;
               while (
                  _j19 < signatureLength &&
                  scanBytes[_pos + _j19] === signature[_j19]
                  ) {
                  _j19++;
               }
               if (_j19 >= signatureLength) {
                  stream.pos += _pos;
                  return true;
               }
               _pos++;
            }
         }
         return false;
      }
      var _PDFDocument_brand = /*#__PURE__*/ new WeakSet();
      var PDFDocument = /*#__PURE__*/ (function () {
         function PDFDocument(pdfManager, stream) {
            _classCallCheck(this, PDFDocument);
            _classPrivateMethodInitSpec(this, _PDFDocument_brand);
            if (stream.length <= 0) {
               throw new InvalidPDFException(
                  "The PDF file is empty, i.e. its size is zero bytes.",
               );
            }
            this.pdfManager = pdfManager;
            this.stream = stream;
            this.xref = new XRef(stream, pdfManager);
            this._pagePromises = new Map();
            this._version = null;
            var idCounters = { font: 0 };
            this._globalIdFactory = /*#__PURE__*/ (function () {
               function _class2() {
                  _classCallCheck(this, _class2);
               }
               return _createClass(_class2, null, [
                  {
                     key: "getDocId",
                     value: function getDocId() {
                        return "g_".concat(pdfManager.docId);
                     },
                  },
                  {
                     key: "createFontId",
                     value: function createFontId() {
                        return "f".concat(++idCounters.font);
                     },
                  },
                  {
                     key: "createObjId",
                     value: function createObjId() {
                        unreachable("Abstract method `createObjId` called.");
                     },
                  },
                  {
                     key: "getPageObjId",
                     value: function getPageObjId() {
                        unreachable("Abstract method `getPageObjId` called.");
                     },
                  },
               ]);
            })();
         }
         return _createClass(PDFDocument, [
            {
               key: "parse",
               value: function parse(recoveryMode) {
                  this.xref.parse(recoveryMode);
                  this.catalog = new Catalog(this.pdfManager, this.xref);
               },
            },
            {
               key: "linearization",
               get: function get() {
                  var linearization = null;
                  try {
                     linearization = Linearization.create(this.stream);
                  } catch (err) {
                     if (err instanceof MissingDataException) {
                        throw err;
                     }
                     info(err);
                  }
                  return shadow(this, "linearization", linearization);
               },
            },
            {
               key: "startXRef",
               get: function get() {
                  var stream = this.stream;
                  var startXRef = 0;
                  if (this.linearization) {
                     stream.reset();
                     if (find(stream, ENDOBJ_SIGNATURE)) {
                        stream.skip(6);
                        var ch = stream.peekByte();
                        while (isWhiteSpace(ch)) {
                           stream.pos++;
                           ch = stream.peekByte();
                        }
                        startXRef = stream.pos - stream.start;
                     }
                  } else {
                     var step = 1024;
                     var startXRefLength = STARTXREF_SIGNATURE.length;
                     var found = false,
                        pos = stream.end;
                     while (!found && pos > 0) {
                        pos -= step - startXRefLength;
                        if (pos < 0) {
                           pos = 0;
                        }
                        stream.pos = pos;
                        found = find(stream, STARTXREF_SIGNATURE, step, true);
                     }
                     if (found) {
                        stream.skip(9);
                        var _ch;
                        do {
                           _ch = stream.getByte();
                        } while (isWhiteSpace(_ch));
                        var str = "";
                        while (_ch >= 0x20 && _ch <= 0x39) {
                           str += String.fromCharCode(_ch);
                           _ch = stream.getByte();
                        }
                        startXRef = parseInt(str, 10);
                        if (isNaN(startXRef)) {
                           startXRef = 0;
                        }
                     }
                  }
                  return shadow(this, "startXRef", startXRef);
               },
            },
            {
               key: "checkHeader",
               value: function checkHeader() {
                  var stream = this.stream;
                  stream.reset();
                  if (!find(stream, PDF_HEADER_SIGNATURE)) {
                     return;
                  }
                  stream.moveStart();
                  stream.skip(PDF_HEADER_SIGNATURE.length);
                  var version = "",
                     ch;
                  while ((ch = stream.getByte()) > 0x20 && version.length < 7) {
                     version += String.fromCharCode(ch);
                  }
                  if (PDF_VERSION_REGEXP.test(version)) {
                     this._version = version;
                  } else {
                     warn("Invalid PDF header version: ".concat(version));
                  }
               },
            },
            {
               key: "parseStartXRef",
               value: function parseStartXRef() {
                  this.xref.setStartXRef(this.startXRef);
               },
            },
            {
               key: "numPages",
               get: function get() {
                  var num = 0;
                  if (this.catalog.hasActualNumPages) {
                     num = this.catalog.numPages;
                  } else if (this.xfaFactory) {
                     num = this.xfaFactory.getNumPages();
                  } else if (this.linearization) {
                     num = this.linearization.numPages;
                  } else {
                     num = this.catalog.numPages;
                  }
                  return shadow(this, "numPages", num);
               },
            },
            {
               key: "_hasOnlyDocumentSignatures",
               value: function _hasOnlyDocumentSignatures(fields) {
                  var _this297 = this;
                  var recursionDepth =
                     arguments.length > 1 && arguments[1] !== undefined
                        ? arguments[1]
                        : 0;
                  var RECURSION_LIMIT = 10;
                  if (!Array.isArray(fields)) {
                     return false;
                  }
                  return fields.every(function (field) {
                     field = _this297.xref.fetchIfRef(field);
                     if (!(field instanceof Dict)) {
                        return false;
                     }
                     if (field.has("Kids")) {
                        if (++recursionDepth > RECURSION_LIMIT) {
                           warn(
                              "_hasOnlyDocumentSignatures: maximum recursion depth reached",
                           );
                           return false;
                        }
                        return _this297._hasOnlyDocumentSignatures(
                           field.get("Kids"),
                           recursionDepth,
                        );
                     }
                     var isSignature = isName(field.get("FT"), "Sig");
                     var rectangle = field.get("Rect");
                     var isInvisible =
                        Array.isArray(rectangle) &&
                        rectangle.every(function (value) {
                           return value === 0;
                        });
                     return isSignature && isInvisible;
                  });
               },
            },
            {
               key: "_xfaStreams",
               get: function get() {
                  var acroForm = this.catalog.acroForm;
                  if (!acroForm) {
                     return null;
                  }
                  var xfa = acroForm.get("XFA");
                  var entries = {
                     "xdp:xdp": "",
                     template: "",
                     datasets: "",
                     config: "",
                     connectionSet: "",
                     localeSet: "",
                     stylesheet: "",
                     "/xdp:xdp": "",
                  };
                  if (xfa instanceof BaseStream && !xfa.isEmpty) {
                     entries["xdp:xdp"] = xfa;
                     return entries;
                  }
                  if (!Array.isArray(xfa) || xfa.length === 0) {
                     return null;
                  }
                  for (var i = 0, ii = xfa.length; i < ii; i += 2) {
                     var name = void 0;
                     if (i === 0) {
                        name = "xdp:xdp";
                     } else if (i === ii - 2) {
                        name = "/xdp:xdp";
                     } else {
                        name = xfa[i];
                     }
                     if (!entries.hasOwnProperty(name)) {
                        continue;
                     }
                     var data = this.xref.fetchIfRef(xfa[i + 1]);
                     if (!(data instanceof BaseStream) || data.isEmpty) {
                        continue;
                     }
                     entries[name] = data;
                  }
                  return entries;
               },
            },
            {
               key: "xfaDatasets",
               get: function get() {
                  var streams = this._xfaStreams;
                  if (!streams) {
                     return shadow(this, "xfaDatasets", null);
                  }
                  for (
                     var _i74 = 0, _arr7 = ["datasets", "xdp:xdp"];
                     _i74 < _arr7.length;
                     _i74++
                  ) {
                     var key = _arr7[_i74];
                     var stream = streams[key];
                     if (!stream) {
                        continue;
                     }
                     try {
                        var str = stringToUTF8String(stream.getString());
                        var data = _defineProperty({}, key, str);
                        return shadow(this, "xfaDatasets", new DatasetReader(data));
                     } catch (_unused12) {
                        warn("XFA - Invalid utf-8 string.");
                        break;
                     }
                  }
                  return shadow(this, "xfaDatasets", null);
               },
            },
            {
               key: "xfaData",
               get: function get() {
                  var streams = this._xfaStreams;
                  if (!streams) {
                     return null;
                  }
                  var data = Object.create(null);
                  for (
                     var _i75 = 0, _Object$entries7 = Object.entries(streams);
                     _i75 < _Object$entries7.length;
                     _i75++
                  ) {
                     var _Object$entries7$_i = _slicedToArray(
                           _Object$entries7[_i75],
                           2,
                        ),
                        key = _Object$entries7$_i[0],
                        stream = _Object$entries7$_i[1];
                     if (!stream) {
                        continue;
                     }
                     try {
                        data[key] = stringToUTF8String(stream.getString());
                     } catch (_unused13) {
                        warn("XFA - Invalid utf-8 string.");
                        return null;
                     }
                  }
                  return data;
               },
            },
            {
               key: "xfaFactory",
               get: function get() {
                  var data;
                  if (
                     this.pdfManager.enableXfa &&
                     this.catalog.needsRendering &&
                     this.formInfo.hasXfa &&
                     !this.formInfo.hasAcroForm
                  ) {
                     data = this.xfaData;
                  }
                  return shadow(
                     this,
                     "xfaFactory",
                     data ? new XFAFactory(data) : null,
                  );
               },
            },
            {
               key: "isPureXfa",
               get: function get() {
                  return this.xfaFactory ? this.xfaFactory.isValid() : false;
               },
            },
            {
               key: "htmlForXfa",
               get: function get() {
                  return this.xfaFactory ? this.xfaFactory.getPages() : null;
               },
            },
            {
               key: "loadXfaImages",
               value: (function () {
                  var _loadXfaImages = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(function _callee66() {
                        var xfaImagesDict,
                           keys,
                           objectLoader,
                           xfaImages,
                           _iterator223,
                           _step223,
                           key,
                           stream;
                        return _regenerator().w(
                           function (_context80) {
                              while (1)
                                 switch (_context80.n) {
                                    case 0:
                                       _context80.n = 1;
                                       return this.pdfManager.ensureCatalog("xfaImages");
                                    case 1:
                                       xfaImagesDict = _context80.v;
                                       if (xfaImagesDict) {
                                          _context80.n = 2;
                                          break;
                                       }
                                       return _context80.a(2);
                                    case 2:
                                       keys = xfaImagesDict.getKeys();
                                       objectLoader = new ObjectLoader(
                                          xfaImagesDict,
                                          keys,
                                          this.xref,
                                       );
                                       _context80.n = 3;
                                       return objectLoader.load();
                                    case 3:
                                       xfaImages = new Map();
                                       _iterator223 = _createForOfIteratorHelper(keys);
                                       try {
                                          for (
                                             _iterator223.s();
                                             !(_step223 = _iterator223.n()).done;

                                          ) {
                                             key = _step223.value;
                                             stream = xfaImagesDict.get(key);
                                             if (stream instanceof BaseStream) {
                                                xfaImages.set(key, stream.getBytes());
                                             }
                                          }
                                       } catch (err) {
                                          _iterator223.e(err);
                                       } finally {
                                          _iterator223.f();
                                       }
                                       this.xfaFactory.setImages(xfaImages);
                                    case 4:
                                       return _context80.a(2);
                                 }
                           },
                           _callee66,
                           this,
                        );
                     }),
                  );
                  function loadXfaImages() {
                     return _loadXfaImages.apply(this, arguments);
                  }
                  return loadXfaImages;
               })(),
            },
            {
               key: "loadXfaFonts",
               value: (function () {
                  var _loadXfaFonts = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(function _callee67(handler, task) {
                        var acroForm,
                           resources,
                           objectLoader,
                           fontRes,
                           options,
                           partialEvaluator,
                           operatorList,
                           pdfFonts,
                           initialState,
                           fonts,
                           promises,
                           _iterator224,
                           _step224,
                           _step224$value,
                           fontName,
                           font,
                           descriptor,
                           fontFamily,
                           fontWeight,
                           italicAngle,
                           cssFontInfo,
                           missingFonts,
                           reallyMissingFonts,
                           _iterator225,
                           _step225,
                           missing,
                           _iterator226,
                           _step226,
                           _missing,
                           _i76,
                           _arr8,
                           fontInfo,
                           name,
                           dict,
                           _t60,
                           _t61,
                           _t62;
                        return _regenerator().w(
                           function (_context81) {
                              while (1)
                                 switch ((_context81.p = _context81.n)) {
                                    case 0:
                                       _context81.n = 1;
                                       return this.pdfManager.ensureCatalog("acroForm");
                                    case 1:
                                       acroForm = _context81.v;
                                       if (acroForm) {
                                          _context81.n = 2;
                                          break;
                                       }
                                       return _context81.a(2);
                                    case 2:
                                       _context81.n = 3;
                                       return acroForm.getAsync("DR");
                                    case 3:
                                       resources = _context81.v;
                                       if (resources instanceof Dict) {
                                          _context81.n = 4;
                                          break;
                                       }
                                       return _context81.a(2);
                                    case 4:
                                       objectLoader = new ObjectLoader(
                                          resources,
                                          ["Font"],
                                          this.xref,
                                       );
                                       _context81.n = 5;
                                       return objectLoader.load();
                                    case 5:
                                       fontRes = resources.get("Font");
                                       if (fontRes instanceof Dict) {
                                          _context81.n = 6;
                                          break;
                                       }
                                       return _context81.a(2);
                                    case 6:
                                       options = Object.assign(
                                          Object.create(null),
                                          this.pdfManager.evaluatorOptions,
                                       );
                                       options.useSystemFonts = false;
                                       partialEvaluator = new PartialEvaluator({
                                          xref: this.xref,
                                          handler: handler,
                                          pageIndex: -1,
                                          idFactory: this._globalIdFactory,
                                          fontCache: this.catalog.fontCache,
                                          builtInCMapCache: this.catalog.builtInCMapCache,
                                          standardFontDataCache:
                                          this.catalog.standardFontDataCache,
                                          options: options,
                                       });
                                       operatorList = new OperatorList();
                                       pdfFonts = [];
                                       _t60 = function clone() {
                                          return this;
                                       };
                                       initialState = {
                                          get font() {
                                             return pdfFonts.at(-1);
                                          },
                                          set font(font) {
                                             pdfFonts.push(font);
                                          },
                                          clone: _t60,
                                       };
                                       fonts = new Map();
                                       fontRes.forEach(function (fontName, font) {
                                          fonts.set(fontName, font);
                                       });
                                       promises = [];
                                       _iterator224 = _createForOfIteratorHelper(fonts);
                                       _context81.p = 7;
                                       _iterator224.s();
                                    case 8:
                                       if ((_step224 = _iterator224.n()).done) {
                                          _context81.n = 12;
                                          break;
                                       }
                                       ((_step224$value = _slicedToArray(_step224.value, 2)),
                                          (fontName = _step224$value[0]),
                                          (font = _step224$value[1]));
                                       descriptor = font.get("FontDescriptor");
                                       if (descriptor instanceof Dict) {
                                          _context81.n = 9;
                                          break;
                                       }
                                       return _context81.a(3, 11);
                                    case 9:
                                       fontFamily = descriptor.get("FontFamily");
                                       fontFamily = fontFamily.replaceAll(/[ ]+(\d)/g, "$1");
                                       fontWeight = descriptor.get("FontWeight");
                                       italicAngle = -descriptor.get("ItalicAngle");
                                       cssFontInfo = {
                                          fontFamily: fontFamily,
                                          fontWeight: fontWeight,
                                          italicAngle: italicAngle,
                                       };
                                       if (validateCSSFont(cssFontInfo)) {
                                          _context81.n = 10;
                                          break;
                                       }
                                       return _context81.a(3, 11);
                                    case 10:
                                       promises.push(
                                          partialEvaluator
                                             .handleSetFont(
                                                resources,
                                                [Name.get(fontName), 1],
                                                null,
                                                operatorList,
                                                task,
                                                initialState,
                                                null,
                                                cssFontInfo,
                                             )
                                             ["catch"](function (reason) {
                                             warn('loadXfaFonts: "'.concat(reason, '".'));
                                             return null;
                                          }),
                                       );
                                    case 11:
                                       _context81.n = 8;
                                       break;
                                    case 12:
                                       _context81.n = 14;
                                       break;
                                    case 13:
                                       _context81.p = 13;
                                       _t61 = _context81.v;
                                       _iterator224.e(_t61);
                                    case 14:
                                       _context81.p = 14;
                                       _iterator224.f();
                                       return _context81.f(14);
                                    case 15:
                                       _context81.n = 16;
                                       return Promise.all(promises);
                                    case 16:
                                       missingFonts = this.xfaFactory.setFonts(pdfFonts);
                                       if (missingFonts) {
                                          _context81.n = 17;
                                          break;
                                       }
                                       return _context81.a(2);
                                    case 17:
                                       options.ignoreErrors = true;
                                       promises.length = 0;
                                       pdfFonts.length = 0;
                                       reallyMissingFonts = new Set();
                                       _iterator225 =
                                          _createForOfIteratorHelper(missingFonts);
                                       try {
                                          for (
                                             _iterator225.s();
                                             !(_step225 = _iterator225.n()).done;

                                          ) {
                                             missing = _step225.value;
                                             if (
                                                !getXfaFontName("".concat(missing, "-Regular"))
                                             ) {
                                                reallyMissingFonts.add(missing);
                                             }
                                          }
                                       } catch (err) {
                                          _iterator225.e(err);
                                       } finally {
                                          _iterator225.f();
                                       }
                                       if (reallyMissingFonts.size) {
                                          missingFonts.push("PdfJS-Fallback");
                                       }
                                       _iterator226 =
                                          _createForOfIteratorHelper(missingFonts);
                                       _context81.p = 18;
                                       _iterator226.s();
                                    case 19:
                                       if ((_step226 = _iterator226.n()).done) {
                                          _context81.n = 22;
                                          break;
                                       }
                                       _missing = _step226.value;
                                       if (!reallyMissingFonts.has(_missing)) {
                                          _context81.n = 20;
                                          break;
                                       }
                                       return _context81.a(3, 21);
                                    case 20:
                                       for (
                                          _i76 = 0,
                                             _arr8 = [
                                                {
                                                   name: "Regular",
                                                   fontWeight: 400,
                                                   italicAngle: 0,
                                                },
                                                {
                                                   name: "Bold",
                                                   fontWeight: 700,
                                                   italicAngle: 0,
                                                },
                                                {
                                                   name: "Italic",
                                                   fontWeight: 400,
                                                   italicAngle: 12,
                                                },
                                                {
                                                   name: "BoldItalic",
                                                   fontWeight: 700,
                                                   italicAngle: 12,
                                                },
                                             ];
                                          _i76 < _arr8.length;
                                          _i76++
                                       ) {
                                          fontInfo = _arr8[_i76];
                                          name = ""
                                             .concat(_missing, "-")
                                             .concat(fontInfo.name);
                                          dict = getXfaFontDict(name);
                                          promises.push(
                                             partialEvaluator
                                                .handleSetFont(
                                                   resources,
                                                   [Name.get(name), 1],
                                                   null,
                                                   operatorList,
                                                   task,
                                                   initialState,
                                                   dict,
                                                   {
                                                      fontFamily: _missing,
                                                      fontWeight: fontInfo.fontWeight,
                                                      italicAngle: fontInfo.italicAngle,
                                                   },
                                                )
                                                ["catch"](function (reason) {
                                                warn('loadXfaFonts: "'.concat(reason, '".'));
                                                return null;
                                             }),
                                          );
                                       }
                                    case 21:
                                       _context81.n = 19;
                                       break;
                                    case 22:
                                       _context81.n = 24;
                                       break;
                                    case 23:
                                       _context81.p = 23;
                                       _t62 = _context81.v;
                                       _iterator226.e(_t62);
                                    case 24:
                                       _context81.p = 24;
                                       _iterator226.f();
                                       return _context81.f(24);
                                    case 25:
                                       _context81.n = 26;
                                       return Promise.all(promises);
                                    case 26:
                                       this.xfaFactory.appendFonts(
                                          pdfFonts,
                                          reallyMissingFonts,
                                       );
                                    case 27:
                                       return _context81.a(2);
                                 }
                           },
                           _callee67,
                           this,
                           [
                              [18, 23, 24, 25],
                              [7, 13, 14, 15],
                           ],
                        );
                     }),
                  );
                  function loadXfaFonts(_x184, _x185) {
                     return _loadXfaFonts.apply(this, arguments);
                  }
                  return loadXfaFonts;
               })(),
            },
            {
               key: "serializeXfaData",
               value: (function () {
                  var _serializeXfaData = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee68(annotationStorage) {
                           return _regenerator().w(
                              function (_context82) {
                                 while (1)
                                    switch (_context82.n) {
                                       case 0:
                                          return _context82.a(
                                             2,
                                             this.xfaFactory
                                                ? this.xfaFactory.serializeData(
                                                   annotationStorage,
                                                )
                                                : null,
                                          );
                                    }
                              },
                              _callee68,
                              this,
                           );
                        },
                     ),
                  );
                  function serializeXfaData(_x186) {
                     return _serializeXfaData.apply(this, arguments);
                  }
                  return serializeXfaData;
               })(),
            },
            {
               key: "version",
               get: function get() {
                  return this.catalog.version || this._version;
               },
            },
            {
               key: "formInfo",
               get: function get() {
                  var formInfo = {
                     hasFields: false,
                     hasAcroForm: false,
                     hasXfa: false,
                     hasSignatures: false,
                  };
                  var acroForm = this.catalog.acroForm;
                  if (!acroForm) {
                     return shadow(this, "formInfo", formInfo);
                  }
                  try {
                     var fields = acroForm.get("Fields");
                     var hasFields = Array.isArray(fields) && fields.length > 0;
                     formInfo.hasFields = hasFields;
                     var xfa = acroForm.get("XFA");
                     formInfo.hasXfa =
                        (Array.isArray(xfa) && xfa.length > 0) ||
                        (xfa instanceof BaseStream && !xfa.isEmpty);
                     var sigFlags = acroForm.get("SigFlags");
                     var hasSignatures = !!(sigFlags & 0x1);
                     var hasOnlyDocumentSignatures =
                        hasSignatures && this._hasOnlyDocumentSignatures(fields);
                     formInfo.hasAcroForm = hasFields && !hasOnlyDocumentSignatures;
                     formInfo.hasSignatures = hasSignatures;
                  } catch (ex) {
                     if (ex instanceof MissingDataException) {
                        throw ex;
                     }
                     warn('Cannot fetch form information: "'.concat(ex, '".'));
                  }
                  return shadow(this, "formInfo", formInfo);
               },
            },
            {
               key: "documentInfo",
               get: function get() {
                  var docInfo = {
                     PDFFormatVersion: this.version,
                     Language: this.catalog.lang,
                     EncryptFilterName: this.xref.encrypt
                        ? this.xref.encrypt.filterName
                        : null,
                     IsLinearized: !!this.linearization,
                     IsAcroFormPresent: this.formInfo.hasAcroForm,
                     IsXFAPresent: this.formInfo.hasXfa,
                     IsCollectionPresent: !!this.catalog.collection,
                     IsSignaturesPresent: this.formInfo.hasSignatures,
                  };
                  var infoDict;
                  try {
                     infoDict = this.xref.trailer.get("Info");
                  } catch (err) {
                     if (err instanceof MissingDataException) {
                        throw err;
                     }
                     info("The document information dictionary is invalid.");
                  }
                  if (!(infoDict instanceof Dict)) {
                     return shadow(this, "documentInfo", docInfo);
                  }
                  var _iterator227 = _createForOfIteratorHelper(infoDict.getKeys()),
                     _step227;
                  try {
                     for (_iterator227.s(); !(_step227 = _iterator227.n()).done; ) {
                        var key = _step227.value;
                        var value = infoDict.get(key);
                        switch (key) {
                           case "Title":
                           case "Author":
                           case "Subject":
                           case "Keywords":
                           case "Creator":
                           case "Producer":
                           case "CreationDate":
                           case "ModDate":
                              if (typeof value === "string") {
                                 docInfo[key] = stringToPDFString(value);
                                 continue;
                              }
                              break;
                           case "Trapped":
                              if (value instanceof Name) {
                                 docInfo[key] = value;
                                 continue;
                              }
                              break;
                           default:
                              var customValue = void 0;
                              switch (_typeof(value)) {
                                 case "string":
                                    customValue = stringToPDFString(value);
                                    break;
                                 case "number":
                                 case "boolean":
                                    customValue = value;
                                    break;
                                 default:
                                    if (value instanceof Name) {
                                       customValue = value;
                                    }
                                    break;
                              }
                              if (customValue === undefined) {
                                 warn(
                                    'Bad value, for custom key "'
                                       .concat(key, '", in Info: ')
                                       .concat(value, "."),
                                 );
                                 continue;
                              }
                              if (!docInfo.Custom) {
                                 docInfo.Custom = Object.create(null);
                              }
                              docInfo.Custom[key] = customValue;
                              continue;
                        }
                        warn(
                           'Bad value, for key "'
                              .concat(key, '", in Info: ')
                              .concat(value, "."),
                        );
                     }
                  } catch (err) {
                     _iterator227.e(err);
                  } finally {
                     _iterator227.f();
                  }
                  return shadow(this, "documentInfo", docInfo);
               },
            },
            {
               key: "fingerprints",
               get: function get() {
                  function validate(data) {
                     return (
                        typeof data === "string" &&
                        data.length > 0 &&
                        data !== EMPTY_FINGERPRINT
                     );
                  }
                  function hexString(hash) {
                     var buf = [];
                     var _iterator228 = _createForOfIteratorHelper(hash),
                        _step228;
                     try {
                        for (_iterator228.s(); !(_step228 = _iterator228.n()).done; ) {
                           var num = _step228.value;
                           var hex = num.toString(16);
                           buf.push(hex.padStart(2, "0"));
                        }
                     } catch (err) {
                        _iterator228.e(err);
                     } finally {
                        _iterator228.f();
                     }
                     return buf.join("");
                  }
                  var idArray = this.xref.trailer.get("ID");
                  var hashOriginal, hashModified;
                  if (Array.isArray(idArray) && validate(idArray[0])) {
                     hashOriginal = stringToBytes(idArray[0]);
                     if (idArray[1] !== idArray[0] && validate(idArray[1])) {
                        hashModified = stringToBytes(idArray[1]);
                     }
                  } else {
                     hashOriginal = calculateMD5(
                        this.stream.getByteRange(0, FINGERPRINT_FIRST_BYTES),
                        0,
                        FINGERPRINT_FIRST_BYTES,
                     );
                  }
                  return shadow(this, "fingerprints", [
                     hexString(hashOriginal),
                     hashModified ? hexString(hashModified) : null,
                  ]);
               },
            },
            {
               key: "_getLinearizationPage",
               value: (function () {
                  var _getLinearizationPage2 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(function _callee69(pageIndex) {
                        var catalog, linearization, xref, ref, obj, type, _t63;
                        return _regenerator().w(
                           function (_context83) {
                              while (1)
                                 switch ((_context83.p = _context83.n)) {
                                    case 0:
                                       ((catalog = this.catalog),
                                          (linearization = this.linearization),
                                          (xref = this.xref));
                                       ref = Ref.get(linearization.objectNumberFirst, 0);
                                       _context83.p = 1;
                                       _context83.n = 2;
                                       return xref.fetchAsync(ref);
                                    case 2:
                                       obj = _context83.v;
                                       if (!(obj instanceof Dict)) {
                                          _context83.n = 5;
                                          break;
                                       }
                                       type = obj.getRaw("Type");
                                       if (!(type instanceof Ref)) {
                                          _context83.n = 4;
                                          break;
                                       }
                                       _context83.n = 3;
                                       return xref.fetchAsync(type);
                                    case 3:
                                       type = _context83.v;
                                    case 4:
                                       if (
                                          !(
                                             isName(type, "Page") ||
                                             (!obj.has("Type") && !obj.has("Kids"))
                                          )
                                       ) {
                                          _context83.n = 5;
                                          break;
                                       }
                                       if (!catalog.pageKidsCountCache.has(ref)) {
                                          catalog.pageKidsCountCache.put(ref, 1);
                                       }
                                       if (!catalog.pageIndexCache.has(ref)) {
                                          catalog.pageIndexCache.put(ref, 0);
                                       }
                                       return _context83.a(2, [obj, ref]);
                                    case 5:
                                       throw new FormatError(
                                          "The Linearization dictionary doesn't point to a valid Page dictionary.",
                                       );
                                    case 6:
                                       _context83.p = 6;
                                       _t63 = _context83.v;
                                       warn(
                                          '_getLinearizationPage: "'.concat(
                                             _t63.message,
                                             '".',
                                          ),
                                       );
                                       return _context83.a(
                                          2,
                                          catalog.getPageDict(pageIndex),
                                       );
                                    case 7:
                                       return _context83.a(2);
                                 }
                           },
                           _callee69,
                           this,
                           [[1, 6]],
                        );
                     }),
                  );
                  function _getLinearizationPage(_x187) {
                     return _getLinearizationPage2.apply(this, arguments);
                  }
                  return _getLinearizationPage;
               })(),
            },
            {
               key: "getPage",
               value: function getPage(pageIndex) {
                  var _this298 = this;
                  var cachedPromise = this._pagePromises.get(pageIndex);
                  if (cachedPromise) {
                     return cachedPromise;
                  }
                  var catalog = this.catalog,
                     linearization = this.linearization,
                     xfaFactory = this.xfaFactory;
                  var promise;
                  if (xfaFactory) {
                     promise = Promise.resolve([Dict.empty, null]);
                  } else if (
                     (linearization === null || linearization === void 0
                        ? void 0
                        : linearization.pageFirst) === pageIndex
                  ) {
                     promise = this._getLinearizationPage(pageIndex);
                  } else {
                     promise = catalog.getPageDict(pageIndex);
                  }
                  promise = promise.then(function (_ref115) {
                     var _ref116 = _slicedToArray(_ref115, 2),
                        pageDict = _ref116[0],
                        ref = _ref116[1];
                     return new Page({
                        pdfManager: _this298.pdfManager,
                        xref: _this298.xref,
                        pageIndex: pageIndex,
                        pageDict: pageDict,
                        ref: ref,
                        globalIdFactory: _this298._globalIdFactory,
                        fontCache: catalog.fontCache,
                        builtInCMapCache: catalog.builtInCMapCache,
                        standardFontDataCache: catalog.standardFontDataCache,
                        globalImageCache: catalog.globalImageCache,
                        systemFontCache: catalog.systemFontCache,
                        nonBlendModesSet: catalog.nonBlendModesSet,
                        xfaFactory: xfaFactory,
                     });
                  });
                  this._pagePromises.set(pageIndex, promise);
                  return promise;
               },
            },
            {
               key: "checkFirstPage",
               value: (function () {
                  var _checkFirstPage = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(function _callee70() {
                        var recoveryMode,
                           _args87 = arguments,
                           _t64;
                        return _regenerator().w(
                           function (_context84) {
                              while (1)
                                 switch ((_context84.p = _context84.n)) {
                                    case 0:
                                       recoveryMode =
                                          _args87.length > 0 && _args87[0] !== undefined
                                             ? _args87[0]
                                             : false;
                                       if (!recoveryMode) {
                                          _context84.n = 1;
                                          break;
                                       }
                                       return _context84.a(2);
                                    case 1:
                                       _context84.p = 1;
                                       _context84.n = 2;
                                       return this.getPage(0);
                                    case 2:
                                       _context84.n = 5;
                                       break;
                                    case 3:
                                       _context84.p = 3;
                                       _t64 = _context84.v;
                                       if (!(_t64 instanceof XRefEntryException)) {
                                          _context84.n = 5;
                                          break;
                                       }
                                       this._pagePromises["delete"](0);
                                       _context84.n = 4;
                                       return this.cleanup();
                                    case 4:
                                       throw new XRefParseException();
                                    case 5:
                                       return _context84.a(2);
                                 }
                           },
                           _callee70,
                           this,
                           [[1, 3]],
                        );
                     }),
                  );
                  function checkFirstPage() {
                     return _checkFirstPage.apply(this, arguments);
                  }
                  return checkFirstPage;
               })(),
            },
            {
               key: "checkLastPage",
               value: (function () {
                  var _checkLastPage = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(function _callee71() {
                        var recoveryMode,
                           catalog,
                           pdfManager,
                           numPages,
                           pagesTree,
                           _iterator229,
                           _step229,
                           _step229$value,
                           _pageIndex4,
                           _step229$value$,
                           pageDict,
                           ref,
                           promise,
                           _args88 = arguments,
                           _t65,
                           _t66;
                        return _regenerator().w(
                           function (_context85) {
                              while (1)
                                 switch ((_context85.p = _context85.n)) {
                                    case 0:
                                       recoveryMode =
                                          _args88.length > 0 && _args88[0] !== undefined
                                             ? _args88[0]
                                             : false;
                                       ((catalog = this.catalog),
                                          (pdfManager = this.pdfManager));
                                       catalog.setActualNumPages();
                                       _context85.p = 1;
                                       _context85.n = 2;
                                       return Promise.all([
                                          pdfManager.ensureDoc("xfaFactory"),
                                          pdfManager.ensureDoc("linearization"),
                                          pdfManager.ensureCatalog("numPages"),
                                       ]);
                                    case 2:
                                       if (!this.xfaFactory) {
                                          _context85.n = 3;
                                          break;
                                       }
                                       return _context85.a(2);
                                    case 3:
                                       if (this.linearization) {
                                          numPages = this.linearization.numPages;
                                       } else {
                                          numPages = catalog.numPages;
                                       }
                                    case 4:
                                       if (Number.isInteger(numPages)) {
                                          _context85.n = 5;
                                          break;
                                       }
                                       throw new FormatError(
                                          "Page count is not an integer.",
                                       );
                                    case 5:
                                       if (!(numPages <= 1)) {
                                          _context85.n = 6;
                                          break;
                                       }
                                       return _context85.a(2);
                                    case 6:
                                       _context85.n = 7;
                                       return this.getPage(numPages - 1);
                                    case 7:
                                       _context85.n = 16;
                                       break;
                                    case 8:
                                       _context85.p = 8;
                                       _t65 = _context85.v;
                                       this._pagePromises["delete"](numPages - 1);
                                       _context85.n = 9;
                                       return this.cleanup();
                                    case 9:
                                       if (
                                          !(
                                             _t65 instanceof XRefEntryException &&
                                             !recoveryMode
                                          )
                                       ) {
                                          _context85.n = 10;
                                          break;
                                       }
                                       throw new XRefParseException();
                                    case 10:
                                       warn(
                                          "checkLastPage - invalid /Pages tree /Count: ".concat(
                                             numPages,
                                             ".",
                                          ),
                                       );
                                       _context85.p = 11;
                                       _context85.n = 12;
                                       return catalog.getAllPageDicts(recoveryMode);
                                    case 12:
                                       pagesTree = _context85.v;
                                       _context85.n = 15;
                                       break;
                                    case 13:
                                       _context85.p = 13;
                                       _t66 = _context85.v;
                                       if (
                                          !(
                                             _t66 instanceof XRefEntryException &&
                                             !recoveryMode
                                          )
                                       ) {
                                          _context85.n = 14;
                                          break;
                                       }
                                       throw new XRefParseException();
                                    case 14:
                                       catalog.setActualNumPages(1);
                                       return _context85.a(2);
                                    case 15:
                                       _iterator229 = _createForOfIteratorHelper(pagesTree);
                                       try {
                                          for (
                                             _iterator229.s();
                                             !(_step229 = _iterator229.n()).done;

                                          ) {
                                             ((_step229$value = _slicedToArray(
                                                _step229.value,
                                                2,
                                             )),
                                                (_pageIndex4 = _step229$value[0]),
                                                (_step229$value$ = _slicedToArray(
                                                   _step229$value[1],
                                                   2,
                                                )),
                                                (pageDict = _step229$value$[0]),
                                                (ref = _step229$value$[1]));
                                             promise = void 0;
                                             if (pageDict instanceof Error) {
                                                promise = Promise.reject(pageDict);
                                                promise["catch"](function () {});
                                             } else {
                                                promise = Promise.resolve(
                                                   new Page({
                                                      pdfManager: pdfManager,
                                                      xref: this.xref,
                                                      pageIndex: _pageIndex4,
                                                      pageDict: pageDict,
                                                      ref: ref,
                                                      globalIdFactory: this._globalIdFactory,
                                                      fontCache: catalog.fontCache,
                                                      builtInCMapCache: catalog.builtInCMapCache,
                                                      standardFontDataCache:
                                                      catalog.standardFontDataCache,
                                                      globalImageCache: catalog.globalImageCache,
                                                      systemFontCache: catalog.systemFontCache,
                                                      nonBlendModesSet: catalog.nonBlendModesSet,
                                                      xfaFactory: null,
                                                   }),
                                                );
                                             }
                                             this._pagePromises.set(_pageIndex4, promise);
                                          }
                                       } catch (err) {
                                          _iterator229.e(err);
                                       } finally {
                                          _iterator229.f();
                                       }
                                       catalog.setActualNumPages(pagesTree.size);
                                    case 16:
                                       return _context85.a(2);
                                 }
                           },
                           _callee71,
                           this,
                           [
                              [11, 13],
                              [1, 8],
                           ],
                        );
                     }),
                  );
                  function checkLastPage() {
                     return _checkLastPage.apply(this, arguments);
                  }
                  return checkLastPage;
               })(),
            },
            {
               key: "fontFallback",
               value: function fontFallback(id, handler) {
                  return this.catalog.fontFallback(id, handler);
               },
            },
            {
               key: "cleanup",
               value: (function () {
                  var _cleanup2 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(function _callee72() {
                        var manuallyTriggered,
                           _args89 = arguments;
                        return _regenerator().w(
                           function (_context86) {
                              while (1)
                                 switch (_context86.n) {
                                    case 0:
                                       manuallyTriggered =
                                          _args89.length > 0 && _args89[0] !== undefined
                                             ? _args89[0]
                                             : false;
                                       return _context86.a(
                                          2,
                                          this.catalog
                                             ? this.catalog.cleanup(manuallyTriggered)
                                             : clearGlobalCaches(),
                                       );
                                 }
                           },
                           _callee72,
                           this,
                        );
                     }),
                  );
                  function cleanup() {
                     return _cleanup2.apply(this, arguments);
                  }
                  return cleanup;
               })(),
            },
            {
               key: "fieldObjects",
               get: function get() {
                  var _this299 = this;
                  if (!this.formInfo.hasFields) {
                     return shadow(this, "fieldObjects", Promise.resolve(null));
                  }
                  var promise = Promise.all([
                     this.pdfManager.ensureDoc("annotationGlobals"),
                     this.pdfManager.ensureCatalog("acroForm"),
                  ]).then(
                     /*#__PURE__*/ (function () {
                        var _ref118 = _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(function _callee73(_ref117) {
                              var _ref119,
                                 annotationGlobals,
                                 acroForm,
                                 visitedRefs,
                                 allFields,
                                 fieldPromises,
                                 _iterator230,
                                 _step230,
                                 fieldRef,
                                 allPromises,
                                 _iterator231,
                                 _step231,
                                 _loop6,
                                 _t67,
                                 _t68,
                                 _t69,
                                 _t70;
                              return _regenerator().w(
                                 function (_context88) {
                                    while (1)
                                       switch ((_context88.p = _context88.n)) {
                                          case 0:
                                             ((_ref119 = _slicedToArray(_ref117, 2)),
                                                (annotationGlobals = _ref119[0]),
                                                (acroForm = _ref119[1]));
                                             if (annotationGlobals) {
                                                _context88.n = 1;
                                                break;
                                             }
                                             return _context88.a(2, null);
                                          case 1:
                                             visitedRefs = new RefSet();
                                             allFields = Object.create(null);
                                             fieldPromises = new Map();
                                             _t67 = _createForOfIteratorHelper;
                                             _context88.n = 2;
                                             return acroForm.getAsync("Fields");
                                          case 2:
                                             _t68 = _context88.v;
                                             _iterator230 = _t67(_t68);
                                             _context88.p = 3;
                                             _iterator230.s();
                                          case 4:
                                             if ((_step230 = _iterator230.n()).done) {
                                                _context88.n = 6;
                                                break;
                                             }
                                             fieldRef = _step230.value;
                                             _context88.n = 5;
                                             return _assertClassBrand(
                                                _PDFDocument_brand,
                                                _this299,
                                                _collectFieldObjects,
                                             ).call(
                                                _this299,
                                                "",
                                                fieldRef,
                                                fieldPromises,
                                                annotationGlobals,
                                                visitedRefs,
                                             );
                                          case 5:
                                             _context88.n = 4;
                                             break;
                                          case 6:
                                             _context88.n = 8;
                                             break;
                                          case 7:
                                             _context88.p = 7;
                                             _t69 = _context88.v;
                                             _iterator230.e(_t69);
                                          case 8:
                                             _context88.p = 8;
                                             _iterator230.f();
                                             return _context88.f(8);
                                          case 9:
                                             allPromises = [];
                                             _iterator231 =
                                                _createForOfIteratorHelper(fieldPromises);
                                             _context88.p = 10;
                                             _loop6 = /*#__PURE__*/ _regenerator().m(
                                                function _loop6() {
                                                   var _step231$value, name, promises;
                                                   return _regenerator().w(function (
                                                      _context87,
                                                   ) {
                                                      while (1)
                                                         switch (_context87.n) {
                                                            case 0:
                                                               ((_step231$value = _slicedToArray(
                                                                  _step231.value,
                                                                  2,
                                                               )),
                                                                  (name = _step231$value[0]),
                                                                  (promises = _step231$value[1]));
                                                               allPromises.push(
                                                                  Promise.all(promises).then(
                                                                     function (fields) {
                                                                        fields = fields.filter(
                                                                           function (field) {
                                                                              return !!field;
                                                                           },
                                                                        );
                                                                        if (fields.length > 0) {
                                                                           allFields[name] = fields;
                                                                        }
                                                                     },
                                                                  ),
                                                               );
                                                            case 1:
                                                               return _context87.a(2);
                                                         }
                                                   }, _loop6);
                                                },
                                             );
                                             _iterator231.s();
                                          case 11:
                                             if ((_step231 = _iterator231.n()).done) {
                                                _context88.n = 13;
                                                break;
                                             }
                                             return _context88.d(
                                                _regeneratorValues(_loop6()),
                                                12,
                                             );
                                          case 12:
                                             _context88.n = 11;
                                             break;
                                          case 13:
                                             _context88.n = 15;
                                             break;
                                          case 14:
                                             _context88.p = 14;
                                             _t70 = _context88.v;
                                             _iterator231.e(_t70);
                                          case 15:
                                             _context88.p = 15;
                                             _iterator231.f();
                                             return _context88.f(15);
                                          case 16:
                                             _context88.n = 17;
                                             return Promise.all(allPromises);
                                          case 17:
                                             return _context88.a(2, allFields);
                                       }
                                 },
                                 _callee73,
                                 null,
                                 [
                                    [10, 14, 15, 16],
                                    [3, 7, 8, 9],
                                 ],
                              );
                           }),
                        );
                        return function (_x188) {
                           return _ref118.apply(this, arguments);
                        };
                     })(),
                  );
                  return shadow(this, "fieldObjects", promise);
               },
            },
            {
               key: "hasJSActions",
               get: function get() {
                  var promise = this.pdfManager.ensureDoc("_parseHasJSActions");
                  return shadow(this, "hasJSActions", promise);
               },
            },
            {
               key: "_parseHasJSActions",
               value: (function () {
                  var _parseHasJSActions2 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(function _callee74() {
                        var _yield$Promise$all,
                           _yield$Promise$all2,
                           catalogJsActions,
                           fieldObjects;
                        return _regenerator().w(
                           function (_context89) {
                              while (1)
                                 switch (_context89.n) {
                                    case 0:
                                       _context89.n = 1;
                                       return Promise.all([
                                          this.pdfManager.ensureCatalog("jsActions"),
                                          this.pdfManager.ensureDoc("fieldObjects"),
                                       ]);
                                    case 1:
                                       _yield$Promise$all = _context89.v;
                                       _yield$Promise$all2 = _slicedToArray(
                                          _yield$Promise$all,
                                          2,
                                       );
                                       catalogJsActions = _yield$Promise$all2[0];
                                       fieldObjects = _yield$Promise$all2[1];
                                       if (!catalogJsActions) {
                                          _context89.n = 2;
                                          break;
                                       }
                                       return _context89.a(2, true);
                                    case 2:
                                       if (!fieldObjects) {
                                          _context89.n = 3;
                                          break;
                                       }
                                       return _context89.a(
                                          2,
                                          Object.values(fieldObjects).some(
                                             function (fieldObject) {
                                                return fieldObject.some(function (object) {
                                                   return object.actions !== null;
                                                });
                                             },
                                          ),
                                       );
                                    case 3:
                                       return _context89.a(2, false);
                                 }
                           },
                           _callee74,
                           this,
                        );
                     }),
                  );
                  function _parseHasJSActions() {
                     return _parseHasJSActions2.apply(this, arguments);
                  }
                  return _parseHasJSActions;
               })(),
            },
            {
               key: "calculationOrderIds",
               get: function get() {
                  var acroForm = this.catalog.acroForm;
                  if (
                     !(acroForm !== null && acroForm !== void 0 && acroForm.has("CO"))
                  ) {
                     return shadow(this, "calculationOrderIds", null);
                  }
                  var calculationOrder = acroForm.get("CO");
                  if (
                     !Array.isArray(calculationOrder) ||
                     calculationOrder.length === 0
                  ) {
                     return shadow(this, "calculationOrderIds", null);
                  }
                  var ids = [];
                  var _iterator232 = _createForOfIteratorHelper(calculationOrder),
                     _step232;
                  try {
                     for (_iterator232.s(); !(_step232 = _iterator232.n()).done; ) {
                        var id = _step232.value;
                        if (id instanceof Ref) {
                           ids.push(id.toString());
                        }
                     }
                  } catch (err) {
                     _iterator232.e(err);
                  } finally {
                     _iterator232.f();
                  }
                  if (ids.length === 0) {
                     return shadow(this, "calculationOrderIds", null);
                  }
                  return shadow(this, "calculationOrderIds", ids);
               },
            },
            {
               key: "annotationGlobals",
               get: function get() {
                  return shadow(
                     this,
                     "annotationGlobals",
                     AnnotationFactory.createGlobals(this.pdfManager),
                  );
               },
            },
         ]);
      })();
      function _collectFieldObjects(_x204, _x205, _x206, _x207, _x208) {
         return _collectFieldObjects2.apply(this, arguments);
      }
      function _collectFieldObjects2() {
         _collectFieldObjects2 = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(
               function _callee98(
                  name,
                  fieldRef,
                  promises,
                  annotationGlobals,
                  visitedRefs,
               ) {
                  var xref,
                     field,
                     partName,
                     obj,
                     _partName,
                     kids,
                     _iterator251,
                     _step251,
                     kid,
                     _t82,
                     _t83,
                     _t84,
                     _t85,
                     _t86;
                  return _regenerator().w(
                     function (_context115) {
                        while (1)
                           switch ((_context115.p = _context115.n)) {
                              case 0:
                                 xref = this.xref;
                                 if (
                                    !(
                                       !(fieldRef instanceof Ref) ||
                                       visitedRefs.has(fieldRef)
                                    )
                                 ) {
                                    _context115.n = 1;
                                    break;
                                 }
                                 return _context115.a(2);
                              case 1:
                                 visitedRefs.put(fieldRef);
                                 _context115.n = 2;
                                 return xref.fetchAsync(fieldRef);
                              case 2:
                                 field = _context115.v;
                                 if (field instanceof Dict) {
                                    _context115.n = 3;
                                    break;
                                 }
                                 return _context115.a(2);
                              case 3:
                                 if (!field.has("T")) {
                                    _context115.n = 5;
                                    break;
                                 }
                                 _t82 = stringToPDFString;
                                 _context115.n = 4;
                                 return field.getAsync("T");
                              case 4:
                                 _t83 = _context115.v;
                                 partName = _t82(_t83);
                                 name =
                                    name === ""
                                       ? partName
                                       : "".concat(name, ".").concat(partName);
                                 _context115.n = 13;
                                 break;
                              case 5:
                                 obj = field;
                              case 6:
                                 if (!true) {
                                    _context115.n = 13;
                                    break;
                                 }
                                 obj = obj.getRaw("Parent");
                                 if (!(obj instanceof Ref)) {
                                    _context115.n = 9;
                                    break;
                                 }
                                 if (!visitedRefs.has(obj)) {
                                    _context115.n = 7;
                                    break;
                                 }
                                 return _context115.a(3, 13);
                              case 7:
                                 _context115.n = 8;
                                 return xref.fetchAsync(obj);
                              case 8:
                                 obj = _context115.v;
                              case 9:
                                 if (obj instanceof Dict) {
                                    _context115.n = 10;
                                    break;
                                 }
                                 return _context115.a(3, 13);
                              case 10:
                                 if (!obj.has("T")) {
                                    _context115.n = 12;
                                    break;
                                 }
                                 _t84 = stringToPDFString;
                                 _context115.n = 11;
                                 return obj.getAsync("T");
                              case 11:
                                 _t85 = _context115.v;
                                 _partName = _t84(_t85);
                                 name =
                                    name === ""
                                       ? _partName
                                       : "".concat(name, ".").concat(_partName);
                                 return _context115.a(3, 13);
                              case 12:
                                 _context115.n = 6;
                                 break;
                              case 13:
                                 if (!promises.has(name)) {
                                    promises.set(name, []);
                                 }
                                 promises.get(name).push(
                                    AnnotationFactory.create(
                                       xref,
                                       fieldRef,
                                       annotationGlobals,
                                       null,
                                       true,
                                       null,
                                    )
                                       .then(function (annotation) {
                                          return annotation === null || annotation === void 0
                                             ? void 0
                                             : annotation.getFieldObject();
                                       })
                                       ["catch"](function (reason) {
                                       warn(
                                          '#collectFieldObjects: "'.concat(reason, '".'),
                                       );
                                       return null;
                                    }),
                                 );
                                 if (field.has("Kids")) {
                                    _context115.n = 14;
                                    break;
                                 }
                                 return _context115.a(2);
                              case 14:
                                 _context115.n = 15;
                                 return field.getAsync("Kids");
                              case 15:
                                 kids = _context115.v;
                                 if (!Array.isArray(kids)) {
                                    _context115.n = 22;
                                    break;
                                 }
                                 _iterator251 = _createForOfIteratorHelper(kids);
                                 _context115.p = 16;
                                 _iterator251.s();
                              case 17:
                                 if ((_step251 = _iterator251.n()).done) {
                                    _context115.n = 19;
                                    break;
                                 }
                                 kid = _step251.value;
                                 _context115.n = 18;
                                 return _assertClassBrand(
                                    _PDFDocument_brand,
                                    this,
                                    _collectFieldObjects,
                                 ).call(
                                    this,
                                    name,
                                    kid,
                                    promises,
                                    annotationGlobals,
                                    visitedRefs,
                                 );
                              case 18:
                                 _context115.n = 17;
                                 break;
                              case 19:
                                 _context115.n = 21;
                                 break;
                              case 20:
                                 _context115.p = 20;
                                 _t86 = _context115.v;
                                 _iterator251.e(_t86);
                              case 21:
                                 _context115.p = 21;
                                 _iterator251.f();
                                 return _context115.f(21);
                              case 22:
                                 return _context115.a(2);
                           }
                     },
                     _callee98,
                     this,
                     [[16, 20, 21, 22]],
                  );
               },
            ),
         );
         return _collectFieldObjects2.apply(this, arguments);
      } // CONCATENATED MODULE: ./src/core/pdf_manager.js
      function parseDocBaseUrl(url) {
         if (url) {
            var absoluteUrl = createValidAbsoluteUrl(url);
            if (absoluteUrl) {
               return absoluteUrl.href;
            }
            warn('Invalid absolute docBaseUrl: "'.concat(url, '".'));
         }
         return null;
      }
      var BasePdfManager = /*#__PURE__*/ (function () {
         function BasePdfManager(args) {
            var _args$evaluatorOption;
            _classCallCheck(this, BasePdfManager);
            if (this.constructor === BasePdfManager) {
               unreachable("Cannot initialize BasePdfManager.");
            }
            this._docBaseUrl = parseDocBaseUrl(args.docBaseUrl);
            this._docId = args.docId;
            this._password = args.password;
            this.enableXfa = args.enableXfa;
            (_args$evaluatorOption = args.evaluatorOptions)
               .isOffscreenCanvasSupported &&
            (_args$evaluatorOption.isOffscreenCanvasSupported =
               FeatureTest.isOffscreenCanvasSupported);
            this.evaluatorOptions = args.evaluatorOptions;
         }
         return _createClass(BasePdfManager, [
            {
               key: "docId",
               get: function get() {
                  return this._docId;
               },
            },
            {
               key: "password",
               get: function get() {
                  return this._password;
               },
            },
            {
               key: "docBaseUrl",
               get: function get() {
                  return this._docBaseUrl;
               },
            },
            {
               key: "catalog",
               get: function get() {
                  return this.pdfDocument.catalog;
               },
            },
            {
               key: "ensureDoc",
               value: function ensureDoc(prop, args) {
                  return this.ensure(this.pdfDocument, prop, args);
               },
            },
            {
               key: "ensureXRef",
               value: function ensureXRef(prop, args) {
                  return this.ensure(this.pdfDocument.xref, prop, args);
               },
            },
            {
               key: "ensureCatalog",
               value: function ensureCatalog(prop, args) {
                  return this.ensure(this.pdfDocument.catalog, prop, args);
               },
            },
            {
               key: "getPage",
               value: function getPage(pageIndex) {
                  return this.pdfDocument.getPage(pageIndex);
               },
            },
            {
               key: "fontFallback",
               value: function fontFallback(id, handler) {
                  return this.pdfDocument.fontFallback(id, handler);
               },
            },
            {
               key: "loadXfaFonts",
               value: function loadXfaFonts(handler, task) {
                  return this.pdfDocument.loadXfaFonts(handler, task);
               },
            },
            {
               key: "loadXfaImages",
               value: function loadXfaImages() {
                  return this.pdfDocument.loadXfaImages();
               },
            },
            {
               key: "serializeXfaData",
               value: function serializeXfaData(annotationStorage) {
                  return this.pdfDocument.serializeXfaData(annotationStorage);
               },
            },
            {
               key: "cleanup",
               value: function cleanup() {
                  var manuallyTriggered =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : false;
                  return this.pdfDocument.cleanup(manuallyTriggered);
               },
            },
            {
               key: "ensure",
               value: (function () {
                  var _ensure = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee75(obj, prop, args) {
                           return _regenerator().w(function (_context90) {
                              while (1)
                                 switch (_context90.n) {
                                    case 0:
                                       unreachable("Abstract method `ensure` called");
                                    case 1:
                                       return _context90.a(2);
                                 }
                           }, _callee75);
                        },
                     ),
                  );
                  function ensure(_x189, _x190, _x191) {
                     return _ensure.apply(this, arguments);
                  }
                  return ensure;
               })(),
            },
            {
               key: "requestRange",
               value: function requestRange(begin, end) {
                  unreachable("Abstract method `requestRange` called");
               },
            },
            {
               key: "requestLoadedStream",
               value: function requestLoadedStream() {
                  var noFetch =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : false;
                  unreachable("Abstract method `requestLoadedStream` called");
               },
            },
            {
               key: "sendProgressiveData",
               value: function sendProgressiveData(chunk) {
                  unreachable("Abstract method `sendProgressiveData` called");
               },
            },
            {
               key: "updatePassword",
               value: function updatePassword(password) {
                  this._password = password;
               },
            },
            {
               key: "terminate",
               value: function terminate(reason) {
                  unreachable("Abstract method `terminate` called");
               },
            },
         ]);
      })();
      var LocalPdfManager = /*#__PURE__*/ (function (_BasePdfManager) {
         function LocalPdfManager(args) {
            var _this300;
            _classCallCheck(this, LocalPdfManager);
            _this300 = _callSuper(this, LocalPdfManager, [args]);
            var stream = new Stream(args.source);
            _this300.pdfDocument = new PDFDocument(_this300, stream);
            _this300._loadedStreamPromise = Promise.resolve(stream);
            return _this300;
         }
         _inherits(LocalPdfManager, _BasePdfManager);
         return _createClass(LocalPdfManager, [
            {
               key: "ensure",
               value: (function () {
                  var _ensure2 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee76(obj, prop, args) {
                           var value;
                           return _regenerator().w(function (_context91) {
                              while (1)
                                 switch (_context91.n) {
                                    case 0:
                                       value = obj[prop];
                                       if (!(typeof value === "function")) {
                                          _context91.n = 1;
                                          break;
                                       }
                                       return _context91.a(2, value.apply(obj, args));
                                    case 1:
                                       return _context91.a(2, value);
                                 }
                           }, _callee76);
                        },
                     ),
                  );
                  function ensure(_x192, _x193, _x194) {
                     return _ensure2.apply(this, arguments);
                  }
                  return ensure;
               })(),
            },
            {
               key: "requestRange",
               value: function requestRange(begin, end) {
                  return Promise.resolve();
               },
            },
            {
               key: "requestLoadedStream",
               value: function requestLoadedStream() {
                  var noFetch =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : false;
                  return this._loadedStreamPromise;
               },
            },
            { key: "terminate", value: function terminate(reason) {} },
         ]);
      })(BasePdfManager);
      var NetworkPdfManager = /*#__PURE__*/ (function (_BasePdfManager2) {
         function NetworkPdfManager(args) {
            var _this301;
            _classCallCheck(this, NetworkPdfManager);
            _this301 = _callSuper(this, NetworkPdfManager, [args]);
            _this301.streamManager = new ChunkedStreamManager(args.source, {
               msgHandler: args.handler,
               length: args.length,
               disableAutoFetch: args.disableAutoFetch,
               rangeChunkSize: args.rangeChunkSize,
            });
            _this301.pdfDocument = new PDFDocument(
               _this301,
               _this301.streamManager.getStream(),
            );
            return _this301;
         }
         _inherits(NetworkPdfManager, _BasePdfManager2);
         return _createClass(NetworkPdfManager, [
            {
               key: "ensure",
               value: (function () {
                  var _ensure3 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(
                        function _callee77(obj, prop, args) {
                           var value, _t71;
                           return _regenerator().w(
                              function (_context92) {
                                 while (1)
                                    switch ((_context92.p = _context92.n)) {
                                       case 0:
                                          _context92.p = 0;
                                          value = obj[prop];
                                          if (!(typeof value === "function")) {
                                             _context92.n = 1;
                                             break;
                                          }
                                          return _context92.a(2, value.apply(obj, args));
                                       case 1:
                                          return _context92.a(2, value);
                                       case 2:
                                          _context92.p = 2;
                                          _t71 = _context92.v;
                                          if (_t71 instanceof MissingDataException) {
                                             _context92.n = 3;
                                             break;
                                          }
                                          throw _t71;
                                       case 3:
                                          _context92.n = 4;
                                          return this.requestRange(_t71.begin, _t71.end);
                                       case 4:
                                          return _context92.a(
                                             2,
                                             this.ensure(obj, prop, args),
                                          );
                                    }
                              },
                              _callee77,
                              this,
                              [[0, 2]],
                           );
                        },
                     ),
                  );
                  function ensure(_x195, _x196, _x197) {
                     return _ensure3.apply(this, arguments);
                  }
                  return ensure;
               })(),
            },
            {
               key: "requestRange",
               value: function requestRange(begin, end) {
                  return this.streamManager.requestRange(begin, end);
               },
            },
            {
               key: "requestLoadedStream",
               value: function requestLoadedStream() {
                  var noFetch =
                     arguments.length > 0 && arguments[0] !== undefined
                        ? arguments[0]
                        : false;
                  return this.streamManager.requestAllChunks(noFetch);
               },
            },
            {
               key: "sendProgressiveData",
               value: function sendProgressiveData(chunk) {
                  this.streamManager.onReceiveData({ chunk: chunk });
               },
            },
            {
               key: "terminate",
               value: function terminate(reason) {
                  this.streamManager.abort(reason);
               },
            },
         ]);
      })(BasePdfManager); // CONCATENATED MODULE: ./src/shared/message_handler.js
      var CallbackKind = { UNKNOWN: 0, DATA: 1, ERROR: 2 };
      var StreamKind = {
         UNKNOWN: 0,
         CANCEL: 1,
         CANCEL_COMPLETE: 2,
         CLOSE: 3,
         ENQUEUE: 4,
         ERROR: 5,
         PULL: 6,
         PULL_COMPLETE: 7,
         START_COMPLETE: 8,
      };
      function wrapReason(reason) {
         if (
            !(
               reason instanceof Error ||
               (_typeof(reason) === "object" && reason !== null)
            )
         ) {
            unreachable(
               'wrapReason: Expected "reason" to be a (possibly cloned) Error.',
            );
         }
         switch (reason.name) {
            case "AbortException":
               return new AbortException(reason.message);
            case "MissingPDFException":
               return new MissingPDFException(reason.message);
            case "PasswordException":
               return new PasswordException(reason.message, reason.code);
            case "UnexpectedResponseException":
               return new UnexpectedResponseException(reason.message, reason.status);
            case "UnknownErrorException":
               return new UnknownErrorException(reason.message, reason.details);
            default:
               return new UnknownErrorException(reason.message, reason.toString());
         }
      }
      var _MessageHandler_brand = /*#__PURE__*/ new WeakSet();
      var MessageHandler = /*#__PURE__*/ (function () {
         function MessageHandler(_sourceName, _targetName, _comObj) {
            var _this302 = this;
            _classCallCheck(this, MessageHandler);
            _classPrivateMethodInitSpec(this, _MessageHandler_brand);
            this.sourceName = _sourceName;
            this.targetName = _targetName;
            this.comObj = _comObj;
            this.callbackId = 1;
            this.streamId = 1;
            this.streamSinks = Object.create(null);
            this.streamControllers = Object.create(null);
            this.callbackCapabilities = Object.create(null);
            this.actionHandler = Object.create(null);
            this._onComObjOnMessage = function (event) {
               var data = event.data;
               if (data.targetName !== _this302.sourceName) {
                  return;
               }
               if (data.stream) {
                  _assertClassBrand(
                     _MessageHandler_brand,
                     _this302,
                     _processStreamMessage,
                  ).call(_this302, data);
                  return;
               }
               if (data.callback) {
                  var callbackId = data.callbackId;
                  var capability = _this302.callbackCapabilities[callbackId];
                  if (!capability) {
                     throw new Error("Cannot resolve callback ".concat(callbackId));
                  }
                  delete _this302.callbackCapabilities[callbackId];
                  if (data.callback === CallbackKind.DATA) {
                     capability.resolve(data.data);
                  } else if (data.callback === CallbackKind.ERROR) {
                     capability.reject(wrapReason(data.reason));
                  } else {
                     throw new Error("Unexpected callback case");
                  }
                  return;
               }
               var action = _this302.actionHandler[data.action];
               if (!action) {
                  throw new Error("Unknown action from worker: ".concat(data.action));
               }
               if (data.callbackId) {
                  var cbSourceName = _this302.sourceName;
                  var cbTargetName = data.sourceName;
                  new Promise(function (resolve) {
                     resolve(action(data.data));
                  }).then(
                     function (result) {
                        _comObj.postMessage({
                           sourceName: cbSourceName,
                           targetName: cbTargetName,
                           callback: CallbackKind.DATA,
                           callbackId: data.callbackId,
                           data: result,
                        });
                     },
                     function (reason) {
                        _comObj.postMessage({
                           sourceName: cbSourceName,
                           targetName: cbTargetName,
                           callback: CallbackKind.ERROR,
                           callbackId: data.callbackId,
                           reason: wrapReason(reason),
                        });
                     },
                  );
                  return;
               }
               if (data.streamId) {
                  _assertClassBrand(
                     _MessageHandler_brand,
                     _this302,
                     _createStreamSink,
                  ).call(_this302, data);
                  return;
               }
               action(data.data);
            };
            _comObj.addEventListener("message", this._onComObjOnMessage);
         }
         return _createClass(MessageHandler, [
            {
               key: "on",
               value: function on(actionName, handler) {
                  var ah = this.actionHandler;
                  if (ah[actionName]) {
                     throw new Error(
                        'There is already an actionName called "'.concat(
                           actionName,
                           '"',
                        ),
                     );
                  }
                  ah[actionName] = handler;
               },
            },
            {
               key: "send",
               value: function send(actionName, data, transfers) {
                  this.comObj.postMessage(
                     {
                        sourceName: this.sourceName,
                        targetName: this.targetName,
                        action: actionName,
                        data: data,
                     },
                     transfers,
                  );
               },
            },
            {
               key: "sendWithPromise",
               value: function sendWithPromise(actionName, data, transfers) {
                  var callbackId = this.callbackId++;
                  var capability = Promise.withResolvers();
                  this.callbackCapabilities[callbackId] = capability;
                  try {
                     this.comObj.postMessage(
                        {
                           sourceName: this.sourceName,
                           targetName: this.targetName,
                           action: actionName,
                           callbackId: callbackId,
                           data: data,
                        },
                        transfers,
                     );
                  } catch (ex) {
                     capability.reject(ex);
                  }
                  return capability.promise;
               },
            },
            {
               key: "sendWithStream",
               value: function sendWithStream(
                  actionName,
                  data,
                  queueingStrategy,
                  transfers,
               ) {
                  var _this303 = this;
                  var streamId = this.streamId++,
                     sourceName = this.sourceName,
                     targetName = this.targetName,
                     comObj = this.comObj;
                  return new ReadableStream(
                     {
                        start: function start(controller) {
                           var startCapability = Promise.withResolvers();
                           _this303.streamControllers[streamId] = {
                              controller: controller,
                              startCall: startCapability,
                              pullCall: null,
                              cancelCall: null,
                              isClosed: false,
                           };
                           comObj.postMessage(
                              {
                                 sourceName: sourceName,
                                 targetName: targetName,
                                 action: actionName,
                                 streamId: streamId,
                                 data: data,
                                 desiredSize: controller.desiredSize,
                              },
                              transfers,
                           );
                           return startCapability.promise;
                        },
                        pull: function pull(controller) {
                           var pullCapability = Promise.withResolvers();
                           _this303.streamControllers[streamId].pullCall =
                              pullCapability;
                           comObj.postMessage({
                              sourceName: sourceName,
                              targetName: targetName,
                              stream: StreamKind.PULL,
                              streamId: streamId,
                              desiredSize: controller.desiredSize,
                           });
                           return pullCapability.promise;
                        },
                        cancel: function cancel(reason) {
                           assert(
                              reason instanceof Error,
                              "cancel must have a valid reason",
                           );
                           var cancelCapability = Promise.withResolvers();
                           _this303.streamControllers[streamId].cancelCall =
                              cancelCapability;
                           _this303.streamControllers[streamId].isClosed = true;
                           comObj.postMessage({
                              sourceName: sourceName,
                              targetName: targetName,
                              stream: StreamKind.CANCEL,
                              streamId: streamId,
                              reason: wrapReason(reason),
                           });
                           return cancelCapability.promise;
                        },
                     },
                     queueingStrategy,
                  );
               },
            },
            {
               key: "destroy",
               value: function destroy() {
                  this.comObj.removeEventListener("message", this._onComObjOnMessage);
               },
            },
         ]);
      })();
      function _createStreamSink(data) {
         var streamId = data.streamId,
            sourceName = this.sourceName,
            targetName = data.sourceName,
            comObj = this.comObj;
         var self = this,
            action = this.actionHandler[data.action];
         var streamSink = {
            enqueue: function enqueue(chunk) {
               var size =
                  arguments.length > 1 && arguments[1] !== undefined
                     ? arguments[1]
                     : 1;
               var transfers = arguments.length > 2 ? arguments[2] : undefined;
               if (this.isCancelled) {
                  return;
               }
               var lastDesiredSize = this.desiredSize;
               this.desiredSize -= size;
               if (lastDesiredSize > 0 && this.desiredSize <= 0) {
                  this.sinkCapability = Promise.withResolvers();
                  this.ready = this.sinkCapability.promise;
               }
               comObj.postMessage(
                  {
                     sourceName: sourceName,
                     targetName: targetName,
                     stream: StreamKind.ENQUEUE,
                     streamId: streamId,
                     chunk: chunk,
                  },
                  transfers,
               );
            },
            close: function close() {
               if (this.isCancelled) {
                  return;
               }
               this.isCancelled = true;
               comObj.postMessage({
                  sourceName: sourceName,
                  targetName: targetName,
                  stream: StreamKind.CLOSE,
                  streamId: streamId,
               });
               delete self.streamSinks[streamId];
            },
            error: function error(reason) {
               assert(reason instanceof Error, "error must have a valid reason");
               if (this.isCancelled) {
                  return;
               }
               this.isCancelled = true;
               comObj.postMessage({
                  sourceName: sourceName,
                  targetName: targetName,
                  stream: StreamKind.ERROR,
                  streamId: streamId,
                  reason: wrapReason(reason),
               });
            },
            sinkCapability: Promise.withResolvers(),
            onPull: null,
            onCancel: null,
            isCancelled: false,
            desiredSize: data.desiredSize,
            ready: null,
         };
         streamSink.sinkCapability.resolve();
         streamSink.ready = streamSink.sinkCapability.promise;
         this.streamSinks[streamId] = streamSink;
         new Promise(function (resolve) {
            resolve(action(data.data, streamSink));
         }).then(
            function () {
               comObj.postMessage({
                  sourceName: sourceName,
                  targetName: targetName,
                  stream: StreamKind.START_COMPLETE,
                  streamId: streamId,
                  success: true,
               });
            },
            function (reason) {
               comObj.postMessage({
                  sourceName: sourceName,
                  targetName: targetName,
                  stream: StreamKind.START_COMPLETE,
                  streamId: streamId,
                  reason: wrapReason(reason),
               });
            },
         );
      }
      function _processStreamMessage(data) {
         var streamId = data.streamId,
            sourceName = this.sourceName,
            targetName = data.sourceName,
            comObj = this.comObj;
         var streamController = this.streamControllers[streamId],
            streamSink = this.streamSinks[streamId];
         switch (data.stream) {
            case StreamKind.START_COMPLETE:
               if (data.success) {
                  streamController.startCall.resolve();
               } else {
                  streamController.startCall.reject(wrapReason(data.reason));
               }
               break;
            case StreamKind.PULL_COMPLETE:
               if (data.success) {
                  streamController.pullCall.resolve();
               } else {
                  streamController.pullCall.reject(wrapReason(data.reason));
               }
               break;
            case StreamKind.PULL:
               if (!streamSink) {
                  comObj.postMessage({
                     sourceName: sourceName,
                     targetName: targetName,
                     stream: StreamKind.PULL_COMPLETE,
                     streamId: streamId,
                     success: true,
                  });
                  break;
               }
               if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {
                  streamSink.sinkCapability.resolve();
               }
               streamSink.desiredSize = data.desiredSize;
               new Promise(function (resolve) {
                  var _streamSink$onPull;
                  resolve(
                     (_streamSink$onPull = streamSink.onPull) === null ||
                     _streamSink$onPull === void 0
                        ? void 0
                        : _streamSink$onPull.call(streamSink),
                  );
               }).then(
                  function () {
                     comObj.postMessage({
                        sourceName: sourceName,
                        targetName: targetName,
                        stream: StreamKind.PULL_COMPLETE,
                        streamId: streamId,
                        success: true,
                     });
                  },
                  function (reason) {
                     comObj.postMessage({
                        sourceName: sourceName,
                        targetName: targetName,
                        stream: StreamKind.PULL_COMPLETE,
                        streamId: streamId,
                        reason: wrapReason(reason),
                     });
                  },
               );
               break;
            case StreamKind.ENQUEUE:
               assert(streamController, "enqueue should have stream controller");
               if (streamController.isClosed) {
                  break;
               }
               streamController.controller.enqueue(data.chunk);
               break;
            case StreamKind.CLOSE:
               assert(streamController, "close should have stream controller");
               if (streamController.isClosed) {
                  break;
               }
               streamController.isClosed = true;
               streamController.controller.close();
               _assertClassBrand(
                  _MessageHandler_brand,
                  this,
                  _deleteStreamController,
               ).call(this, streamController, streamId);
               break;
            case StreamKind.ERROR:
               assert(streamController, "error should have stream controller");
               streamController.controller.error(wrapReason(data.reason));
               _assertClassBrand(
                  _MessageHandler_brand,
                  this,
                  _deleteStreamController,
               ).call(this, streamController, streamId);
               break;
            case StreamKind.CANCEL_COMPLETE:
               if (data.success) {
                  streamController.cancelCall.resolve();
               } else {
                  streamController.cancelCall.reject(wrapReason(data.reason));
               }
               _assertClassBrand(
                  _MessageHandler_brand,
                  this,
                  _deleteStreamController,
               ).call(this, streamController, streamId);
               break;
            case StreamKind.CANCEL:
               if (!streamSink) {
                  break;
               }
               new Promise(function (resolve) {
                  var _streamSink$onCancel;
                  resolve(
                     (_streamSink$onCancel = streamSink.onCancel) === null ||
                     _streamSink$onCancel === void 0
                        ? void 0
                        : _streamSink$onCancel.call(
                           streamSink,
                           wrapReason(data.reason),
                        ),
                  );
               }).then(
                  function () {
                     comObj.postMessage({
                        sourceName: sourceName,
                        targetName: targetName,
                        stream: StreamKind.CANCEL_COMPLETE,
                        streamId: streamId,
                        success: true,
                     });
                  },
                  function (reason) {
                     comObj.postMessage({
                        sourceName: sourceName,
                        targetName: targetName,
                        stream: StreamKind.CANCEL_COMPLETE,
                        streamId: streamId,
                        reason: wrapReason(reason),
                     });
                  },
               );
               streamSink.sinkCapability.reject(wrapReason(data.reason));
               streamSink.isCancelled = true;
               delete this.streamSinks[streamId];
               break;
            default:
               throw new Error("Unexpected stream case");
         }
      }
      function _deleteStreamController(_x209, _x210) {
         return _deleteStreamController2.apply(this, arguments);
      }
      function _deleteStreamController2() {
         _deleteStreamController2 = _asyncToGenerator(
            /*#__PURE__*/ _regenerator().m(
               function _callee99(streamController, streamId) {
                  var _streamController$sta,
                     _streamController$pul,
                     _streamController$can;
                  return _regenerator().w(
                     function (_context116) {
                        while (1)
                           switch (_context116.n) {
                              case 0:
                                 _context116.n = 1;
                                 return Promise.allSettled([
                                    (_streamController$sta = streamController.startCall) ===
                                    null || _streamController$sta === void 0
                                       ? void 0
                                       : _streamController$sta.promise,
                                    (_streamController$pul = streamController.pullCall) ===
                                    null || _streamController$pul === void 0
                                       ? void 0
                                       : _streamController$pul.promise,
                                    (_streamController$can =
                                       streamController.cancelCall) === null ||
                                    _streamController$can === void 0
                                       ? void 0
                                       : _streamController$can.promise,
                                 ]);
                              case 1:
                                 delete this.streamControllers[streamId];
                              case 2:
                                 return _context116.a(2);
                           }
                     },
                     _callee99,
                     this,
                  );
               },
            ),
         );
         return _deleteStreamController2.apply(this, arguments);
      } // CONCATENATED MODULE: ./src/core/worker_stream.js
      var PDFWorkerStream = /*#__PURE__*/ (function () {
         function PDFWorkerStream(msgHandler) {
            _classCallCheck(this, PDFWorkerStream);
            this._msgHandler = msgHandler;
            this._contentLength = null;
            this._fullRequestReader = null;
            this._rangeRequestReaders = [];
         }
         return _createClass(PDFWorkerStream, [
            {
               key: "getFullReader",
               value: function getFullReader() {
                  assert(
                     !this._fullRequestReader,
                     "PDFWorkerStream.getFullReader can only be called once.",
                  );
                  this._fullRequestReader = new PDFWorkerStreamReader(
                     this._msgHandler,
                  );
                  return this._fullRequestReader;
               },
            },
            {
               key: "getRangeReader",
               value: function getRangeReader(begin, end) {
                  var reader = new PDFWorkerStreamRangeReader(
                     begin,
                     end,
                     this._msgHandler,
                  );
                  this._rangeRequestReaders.push(reader);
                  return reader;
               },
            },
            {
               key: "cancelAllRequests",
               value: function cancelAllRequests(reason) {
                  var _this$_fullRequestRea;
                  (_this$_fullRequestRea = this._fullRequestReader) === null ||
                  _this$_fullRequestRea === void 0 ||
                  _this$_fullRequestRea.cancel(reason);
                  var _iterator233 = _createForOfIteratorHelper(
                        this._rangeRequestReaders.slice(0),
                     ),
                     _step233;
                  try {
                     for (_iterator233.s(); !(_step233 = _iterator233.n()).done; ) {
                        var reader = _step233.value;
                        reader.cancel(reason);
                     }
                  } catch (err) {
                     _iterator233.e(err);
                  } finally {
                     _iterator233.f();
                  }
               },
            },
         ]);
      })();
      var PDFWorkerStreamReader = /*#__PURE__*/ (function () {
         function PDFWorkerStreamReader(msgHandler) {
            var _this304 = this;
            _classCallCheck(this, PDFWorkerStreamReader);
            this._msgHandler = msgHandler;
            this.onProgress = null;
            this._contentLength = null;
            this._isRangeSupported = false;
            this._isStreamingSupported = false;
            var readableStream = this._msgHandler.sendWithStream("GetReader");
            this._reader = readableStream.getReader();
            this._headersReady = this._msgHandler
               .sendWithPromise("ReaderHeadersReady")
               .then(function (data) {
                  _this304._isStreamingSupported = data.isStreamingSupported;
                  _this304._isRangeSupported = data.isRangeSupported;
                  _this304._contentLength = data.contentLength;
               });
         }
         return _createClass(PDFWorkerStreamReader, [
            {
               key: "headersReady",
               get: function get() {
                  return this._headersReady;
               },
            },
            {
               key: "contentLength",
               get: function get() {
                  return this._contentLength;
               },
            },
            {
               key: "isStreamingSupported",
               get: function get() {
                  return this._isStreamingSupported;
               },
            },
            {
               key: "isRangeSupported",
               get: function get() {
                  return this._isRangeSupported;
               },
            },
            {
               key: "read",
               value: (function () {
                  var _read = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(function _callee78() {
                        var _yield$this$_reader$r, value, done;
                        return _regenerator().w(
                           function (_context93) {
                              while (1)
                                 switch (_context93.n) {
                                    case 0:
                                       _context93.n = 1;
                                       return this._reader.read();
                                    case 1:
                                       _yield$this$_reader$r = _context93.v;
                                       value = _yield$this$_reader$r.value;
                                       done = _yield$this$_reader$r.done;
                                       if (!done) {
                                          _context93.n = 2;
                                          break;
                                       }
                                       return _context93.a(2, {
                                          value: undefined,
                                          done: true,
                                       });
                                    case 2:
                                       return _context93.a(2, {
                                          value: value.buffer,
                                          done: false,
                                       });
                                 }
                           },
                           _callee78,
                           this,
                        );
                     }),
                  );
                  function read() {
                     return _read.apply(this, arguments);
                  }
                  return read;
               })(),
            },
            {
               key: "cancel",
               value: function cancel(reason) {
                  this._reader.cancel(reason);
               },
            },
         ]);
      })();
      var PDFWorkerStreamRangeReader = /*#__PURE__*/ (function () {
         function PDFWorkerStreamRangeReader(begin, end, msgHandler) {
            _classCallCheck(this, PDFWorkerStreamRangeReader);
            this._msgHandler = msgHandler;
            this.onProgress = null;
            var readableStream = this._msgHandler.sendWithStream("GetRangeReader", {
               begin: begin,
               end: end,
            });
            this._reader = readableStream.getReader();
         }
         return _createClass(PDFWorkerStreamRangeReader, [
            {
               key: "isStreamingSupported",
               get: function get() {
                  return false;
               },
            },
            {
               key: "read",
               value: (function () {
                  var _read2 = _asyncToGenerator(
                     /*#__PURE__*/ _regenerator().m(function _callee79() {
                        var _yield$this$_reader$r2, value, done;
                        return _regenerator().w(
                           function (_context94) {
                              while (1)
                                 switch (_context94.n) {
                                    case 0:
                                       _context94.n = 1;
                                       return this._reader.read();
                                    case 1:
                                       _yield$this$_reader$r2 = _context94.v;
                                       value = _yield$this$_reader$r2.value;
                                       done = _yield$this$_reader$r2.done;
                                       if (!done) {
                                          _context94.n = 2;
                                          break;
                                       }
                                       return _context94.a(2, {
                                          value: undefined,
                                          done: true,
                                       });
                                    case 2:
                                       return _context94.a(2, {
                                          value: value.buffer,
                                          done: false,
                                       });
                                 }
                           },
                           _callee79,
                           this,
                        );
                     }),
                  );
                  function read() {
                     return _read2.apply(this, arguments);
                  }
                  return read;
               })(),
            },
            {
               key: "cancel",
               value: function cancel(reason) {
                  this._reader.cancel(reason);
               },
            },
         ]);
      })(); // CONCATENATED MODULE: ./src/core/worker.js
      var WorkerTask = /*#__PURE__*/ (function () {
         function WorkerTask(name) {
            _classCallCheck(this, WorkerTask);
            this.name = name;
            this.terminated = false;
            this._capability = Promise.withResolvers();
         }
         return _createClass(WorkerTask, [
            {
               key: "finished",
               get: function get() {
                  return this._capability.promise;
               },
            },
            {
               key: "finish",
               value: function finish() {
                  this._capability.resolve();
               },
            },
            {
               key: "terminate",
               value: function terminate() {
                  this.terminated = true;
               },
            },
            {
               key: "ensureNotTerminated",
               value: function ensureNotTerminated() {
                  if (this.terminated) {
                     throw new Error("Worker task was terminated");
                  }
               },
            },
         ]);
      })();
      var _WorkerMessageHandler = /*#__PURE__*/ (function () {
         function _WorkerMessageHandler() {
            _classCallCheck(this, _WorkerMessageHandler);
         }
         return _createClass(_WorkerMessageHandler, null, [
            {
               key: "setup",
               value: function setup(handler, port) {
                  var testMessageProcessed = false;
                  handler.on("test", function (data) {
                     if (testMessageProcessed) {
                        return;
                     }
                     testMessageProcessed = true;
                     handler.send("test", data instanceof Uint8Array);
                  });
                  handler.on("configure", function (data) {
                     setVerbosityLevel(data.verbosity);
                  });
                  handler.on("GetDocRequest", function (data) {
                     return _WorkerMessageHandler.createDocumentHandler(data, port);
                  });
               },
            },
            {
               key: "createDocumentHandler",
               value: function createDocumentHandler(docParams, port) {
                  var pdfManager;
                  var terminated = false;
                  var cancelXHRs = null;
                  var WorkerTasks = new Set();
                  var verbosity = getVerbosityLevel();
                  var _docParams = docParams,
                     docId = _docParams.docId,
                     apiVersion = _docParams.apiVersion;
                  var workerVersion = "4.2.67";
                  if (apiVersion !== workerVersion) {
                     throw new Error(
                        'The API version "'.concat(apiVersion, '" does not match ') +
                        'the Worker version "'.concat(workerVersion, '".'),
                     );
                  }
                  var enumerableProperties = [];
                  for (var property in []) {
                     enumerableProperties.push(property);
                  }
                  if (enumerableProperties.length) {
                     throw new Error(
                        "The `Array.prototype` contains unexpected enumerable properties: " +
                        enumerableProperties.join(", ") +
                        "; thus breaking e.g. `for...in` iteration of `Array`s.",
                     );
                  }
                  var workerHandlerName = docId + "_worker";
                  var handler = new MessageHandler(workerHandlerName, docId, port);
                  function ensureNotTerminated() {
                     if (terminated) {
                        throw new Error("Worker was terminated");
                     }
                  }
                  function startWorkerTask(task) {
                     WorkerTasks.add(task);
                  }
                  function finishWorkerTask(task) {
                     task.finish();
                     WorkerTasks["delete"](task);
                  }
                  function loadDocument(_x198) {
                     return _loadDocument.apply(this, arguments);
                  }
                  function _loadDocument() {
                     _loadDocument = _asyncToGenerator(
                        /*#__PURE__*/ _regenerator().m(
                           function _callee83(recoveryMode) {
                              var isPureXfa,
                                 task,
                                 _yield$Promise$all5,
                                 _yield$Promise$all6,
                                 numPages,
                                 fingerprints,
                                 htmlForXfa,
                                 _t73;
                              return _regenerator().w(function (_context100) {
                                 while (1)
                                    switch (_context100.n) {
                                       case 0:
                                          _context100.n = 1;
                                          return pdfManager.ensureDoc("checkHeader");
                                       case 1:
                                          _context100.n = 2;
                                          return pdfManager.ensureDoc("parseStartXRef");
                                       case 2:
                                          _context100.n = 3;
                                          return pdfManager.ensureDoc("parse", [
                                             recoveryMode,
                                          ]);
                                       case 3:
                                          _context100.n = 4;
                                          return pdfManager.ensureDoc("checkFirstPage", [
                                             recoveryMode,
                                          ]);
                                       case 4:
                                          _context100.n = 5;
                                          return pdfManager.ensureDoc("checkLastPage", [
                                             recoveryMode,
                                          ]);
                                       case 5:
                                          _context100.n = 6;
                                          return pdfManager.ensureDoc("isPureXfa");
                                       case 6:
                                          isPureXfa = _context100.v;
                                          if (!isPureXfa) {
                                             _context100.n = 7;
                                             break;
                                          }
                                          task = new WorkerTask("loadXfaFonts");
                                          startWorkerTask(task);
                                          _context100.n = 7;
                                          return Promise.all([
                                             pdfManager
                                                .loadXfaFonts(handler, task)
                                                ["catch"](function (reason) {})
                                                .then(function () {
                                                   return finishWorkerTask(task);
                                                }),
                                             pdfManager.loadXfaImages(),
                                          ]);
                                       case 7:
                                          _context100.n = 8;
                                          return Promise.all([
                                             pdfManager.ensureDoc("numPages"),
                                             pdfManager.ensureDoc("fingerprints"),
                                          ]);
                                       case 8:
                                          _yield$Promise$all5 = _context100.v;
                                          _yield$Promise$all6 = _slicedToArray(
                                             _yield$Promise$all5,
                                             2,
                                          );
                                          numPages = _yield$Promise$all6[0];
                                          fingerprints = _yield$Promise$all6[1];
                                          if (!isPureXfa) {
                                             _context100.n = 10;
                                             break;
                                          }
                                          _context100.n = 9;
                                          return pdfManager.ensureDoc("htmlForXfa");
                                       case 9:
                                          _t73 = _context100.v;
                                          _context100.n = 11;
                                          break;
                                       case 10:
                                          _t73 = null;
                                       case 11:
                                          htmlForXfa = _t73;
                                          return _context100.a(2, {
                                             numPages: numPages,
                                             fingerprints: fingerprints,
                                             htmlForXfa: htmlForXfa,
                                          });
                                    }
                              }, _callee83);
                           },
                        ),
                     );
                     return _loadDocument.apply(this, arguments);
                  }
                  function getPdfManager(_ref120) {
                     var data = _ref120.data,
                        password = _ref120.password,
                        disableAutoFetch = _ref120.disableAutoFetch,
                        rangeChunkSize = _ref120.rangeChunkSize,
                        length = _ref120.length,
                        docBaseUrl = _ref120.docBaseUrl,
                        enableXfa = _ref120.enableXfa,
                        evaluatorOptions = _ref120.evaluatorOptions;
                     var pdfManagerArgs = {
                        source: null,
                        disableAutoFetch: disableAutoFetch,
                        docBaseUrl: docBaseUrl,
                        docId: docId,
                        enableXfa: enableXfa,
                        evaluatorOptions: evaluatorOptions,
                        handler: handler,
                        length: length,
                        password: password,
                        rangeChunkSize: rangeChunkSize,
                     };
                     var pdfManagerCapability = Promise.withResolvers();
                     var newPdfManager;
                     if (data) {
                        try {
                           pdfManagerArgs.source = data;
                           newPdfManager = new LocalPdfManager(pdfManagerArgs);
                           pdfManagerCapability.resolve(newPdfManager);
                        } catch (ex) {
                           pdfManagerCapability.reject(ex);
                        }
                        return pdfManagerCapability.promise;
                     }
                     var pdfStream,
                        cachedChunks = [];
                     try {
                        pdfStream = new PDFWorkerStream(handler);
                     } catch (ex) {
                        pdfManagerCapability.reject(ex);
                        return pdfManagerCapability.promise;
                     }
                     var fullRequest = pdfStream.getFullReader();
                     fullRequest.headersReady
                        .then(function () {
                           if (!fullRequest.isRangeSupported) {
                              return;
                           }
                           pdfManagerArgs.source = pdfStream;
                           pdfManagerArgs.length = fullRequest.contentLength;
                           pdfManagerArgs.disableAutoFetch ||
                           (pdfManagerArgs.disableAutoFetch =
                              fullRequest.isStreamingSupported);
                           newPdfManager = new NetworkPdfManager(pdfManagerArgs);
                           for (
                              var _i77 = 0, _cachedChunks = cachedChunks;
                              _i77 < _cachedChunks.length;
                              _i77++
                           ) {
                              var chunk = _cachedChunks[_i77];
                              newPdfManager.sendProgressiveData(chunk);
                           }
                           cachedChunks = [];
                           pdfManagerCapability.resolve(newPdfManager);
                           cancelXHRs = null;
                        })
                        ["catch"](function (reason) {
                        pdfManagerCapability.reject(reason);
                        cancelXHRs = null;
                     });
                     var loaded = 0;
                     var flushChunks = function flushChunks() {
                        var pdfFile = arrayBuffersToBytes(cachedChunks);
                        if (length && pdfFile.length !== length) {
                           warn("reported HTTP length is different from actual");
                        }
                        try {
                           pdfManagerArgs.source = pdfFile;
                           newPdfManager = new LocalPdfManager(pdfManagerArgs);
                           pdfManagerCapability.resolve(newPdfManager);
                        } catch (ex) {
                           pdfManagerCapability.reject(ex);
                        }
                        cachedChunks = [];
                     };
                     new Promise(function (resolve, reject) {
                        var _readChunk2 = function readChunk(_ref121) {
                           var value = _ref121.value,
                              done = _ref121.done;
                           try {
                              ensureNotTerminated();
                              if (done) {
                                 if (!newPdfManager) {
                                    flushChunks();
                                 }
                                 cancelXHRs = null;
                                 return;
                              }
                              loaded += value.byteLength;
                              if (!fullRequest.isStreamingSupported) {
                                 handler.send("DocProgress", {
                                    loaded: loaded,
                                    total: Math.max(loaded, fullRequest.contentLength || 0),
                                 });
                              }
                              if (newPdfManager) {
                                 newPdfManager.sendProgressiveData(value);
                              } else {
                                 cachedChunks.push(value);
                              }
                              fullRequest.read().then(_readChunk2, reject);
                           } catch (e) {
                              reject(e);
                           }
                        };
                        fullRequest.read().then(_readChunk2, reject);
                     })["catch"](function (e) {
                        pdfManagerCapability.reject(e);
                        cancelXHRs = null;
                     });
                     cancelXHRs = function cancelXHRs(reason) {
                        pdfStream.cancelAllRequests(reason);
                     };
                     return pdfManagerCapability.promise;
                  }
                  function setupDoc(data) {
                     function onSuccess(doc) {
                        ensureNotTerminated();
                        handler.send("GetDoc", { pdfInfo: doc });
                     }
                     function onFailure(ex) {
                        ensureNotTerminated();
                        if (ex instanceof PasswordException) {
                           var task = new WorkerTask(
                              "PasswordException: response ".concat(ex.code),
                           );
                           startWorkerTask(task);
                           handler
                              .sendWithPromise("PasswordRequest", ex)
                              .then(function (_ref122) {
                                 var password = _ref122.password;
                                 finishWorkerTask(task);
                                 pdfManager.updatePassword(password);
                                 pdfManagerReady();
                              })
                              ["catch"](function () {
                              finishWorkerTask(task);
                              handler.send("DocException", ex);
                           });
                        } else if (
                           ex instanceof InvalidPDFException ||
                           ex instanceof MissingPDFException ||
                           ex instanceof UnexpectedResponseException ||
                           ex instanceof UnknownErrorException
                        ) {
                           handler.send("DocException", ex);
                        } else {
                           handler.send(
                              "DocException",
                              new UnknownErrorException(ex.message, ex.toString()),
                           );
                        }
                     }
                     function pdfManagerReady() {
                        ensureNotTerminated();
                        loadDocument(false).then(onSuccess, function (reason) {
                           ensureNotTerminated();
                           if (!(reason instanceof XRefParseException)) {
                              onFailure(reason);
                              return;
                           }
                           pdfManager.requestLoadedStream().then(function () {
                              ensureNotTerminated();
                              loadDocument(true).then(onSuccess, onFailure);
                           });
                        });
                     }
                     ensureNotTerminated();
                     getPdfManager(data)
                        .then(function (newPdfManager) {
                           if (terminated) {
                              newPdfManager.terminate(
                                 new AbortException("Worker was terminated."),
                              );
                              throw new Error("Worker was terminated");
                           }
                           pdfManager = newPdfManager;
                           pdfManager.requestLoadedStream(true).then(function (stream) {
                              handler.send("DataLoaded", {
                                 length: stream.bytes.byteLength,
                              });
                           });
                        })
                        .then(pdfManagerReady, onFailure);
                  }
                  handler.on("GetPage", function (data) {
                     return pdfManager.getPage(data.pageIndex).then(function (page) {
                        return Promise.all([
                           pdfManager.ensure(page, "rotate"),
                           pdfManager.ensure(page, "ref"),
                           pdfManager.ensure(page, "userUnit"),
                           pdfManager.ensure(page, "view"),
                        ]).then(function (_ref123) {
                           var _ref$toString;
                           var _ref124 = _slicedToArray(_ref123, 4),
                              rotate = _ref124[0],
                              ref = _ref124[1],
                              userUnit = _ref124[2],
                              view = _ref124[3];
                           return {
                              rotate: rotate,
                              ref: ref,
                              refStr:
                                 (_ref$toString =
                                    ref === null || ref === void 0
                                       ? void 0
                                       : ref.toString()) !== null && _ref$toString !== void 0
                                    ? _ref$toString
                                    : null,
                              userUnit: userUnit,
                              view: view,
                           };
                        });
                     });
                  });
                  handler.on("GetPageIndex", function (data) {
                     var pageRef = Ref.get(data.num, data.gen);
                     return pdfManager.ensureCatalog("getPageIndex", [pageRef]);
                  });
                  handler.on("GetDestinations", function (data) {
                     return pdfManager.ensureCatalog("destinations");
                  });
                  handler.on("GetDestination", function (data) {
                     return pdfManager.ensureCatalog("getDestination", [data.id]);
                  });
                  handler.on("GetPageLabels", function (data) {
                     return pdfManager.ensureCatalog("pageLabels");
                  });
                  handler.on("GetPageLayout", function (data) {
                     return pdfManager.ensureCatalog("pageLayout");
                  });
                  handler.on("GetPageMode", function (data) {
                     return pdfManager.ensureCatalog("pageMode");
                  });
                  handler.on("GetViewerPreferences", function (data) {
                     return pdfManager.ensureCatalog("viewerPreferences");
                  });
                  handler.on("GetOpenAction", function (data) {
                     return pdfManager.ensureCatalog("openAction");
                  });
                  handler.on("GetAttachments", function (data) {
                     return pdfManager.ensureCatalog("attachments");
                  });
                  handler.on("GetDocJSActions", function (data) {
                     return pdfManager.ensureCatalog("jsActions");
                  });
                  handler.on("GetPageJSActions", function (_ref125) {
                     var pageIndex = _ref125.pageIndex;
                     return pdfManager.getPage(pageIndex).then(function (page) {
                        return pdfManager.ensure(page, "jsActions");
                     });
                  });
                  handler.on("GetOutline", function (data) {
                     return pdfManager.ensureCatalog("documentOutline");
                  });
                  handler.on("GetOptionalContentConfig", function (data) {
                     return pdfManager.ensureCatalog("optionalContentConfig");
                  });
                  handler.on("GetPermissions", function (data) {
                     return pdfManager.ensureCatalog("permissions");
                  });
                  handler.on("GetMetadata", function (data) {
                     return Promise.all([
                        pdfManager.ensureDoc("documentInfo"),
                        pdfManager.ensureCatalog("metadata"),
                     ]);
                  });
                  handler.on("GetMarkInfo", function (data) {
                     return pdfManager.ensureCatalog("markInfo");
                  });
                  handler.on("GetData", function (data) {
                     return pdfManager.requestLoadedStream().then(function (stream) {
                        return stream.bytes;
                     });
                  });
                  handler.on("GetAnnotations", function (_ref126) {
                     var pageIndex = _ref126.pageIndex,
                        intent = _ref126.intent;
                     return pdfManager.getPage(pageIndex).then(function (page) {
                        var task = new WorkerTask(
                           "GetAnnotations: page ".concat(pageIndex),
                        );
                        startWorkerTask(task);
                        return page.getAnnotationsData(handler, task, intent).then(
                           function (data) {
                              finishWorkerTask(task);
                              return data;
                           },
                           function (reason) {
                              finishWorkerTask(task);
                              throw reason;
                           },
                        );
                     });
                  });
                  handler.on("GetFieldObjects", function (data) {
                     return pdfManager.ensureDoc("fieldObjects");
                  });
                  handler.on("HasJSActions", function (data) {
                     return pdfManager.ensureDoc("hasJSActions");
                  });
                  handler.on("GetCalculationOrderIds", function (data) {
                     return pdfManager.ensureDoc("calculationOrderIds");
                  });
                  handler.on(
                     "SaveDocument",
                     /*#__PURE__*/ (function () {
                        var _ref128 = _asyncToGenerator(
                           /*#__PURE__*/ _regenerator().m(function _callee82(_ref127) {
                              var isPureXfa,
                                 numPages,
                                 annotationStorage,
                                 filename,
                                 globalPromises,
                                 promises,
                                 newAnnotationsByPage,
                                 _yield$Promise$all3,
                                 _yield$Promise$all4,
                                 stream,
                                 acroForm,
                                 acroFormRef,
                                 startXRef,
                                 xref,
                                 linearization,
                                 _structTreeRoot,
                                 catalogRef,
                                 structTreeRoot,
                                 imagePromises,
                                 newAnnotationPromises,
                                 _iterator234,
                                 _step234,
                                 _loop7,
                                 _loop8,
                                 _pageIndex5,
                                 refs,
                                 newRefs,
                                 xfaData,
                                 needAppearances,
                                 xfa,
                                 xfaDatasetsRef,
                                 hasXfaDatasetsEntry,
                                 i,
                                 ii,
                                 newXrefInfo,
                                 _xref$lastXRefStreamP,
                                 infoObj,
                                 xrefInfo,
                                 _t72;
                              return _regenerator().w(
                                 function (_context99) {
                                    while (1)
                                       switch ((_context99.p = _context99.n)) {
                                          case 0:
                                             ((isPureXfa = _ref127.isPureXfa),
                                                (numPages = _ref127.numPages),
                                                (annotationStorage = _ref127.annotationStorage),
                                                (filename = _ref127.filename));
                                             globalPromises = [
                                                pdfManager.requestLoadedStream(),
                                                pdfManager.ensureCatalog("acroForm"),
                                                pdfManager.ensureCatalog("acroFormRef"),
                                                pdfManager.ensureDoc("startXRef"),
                                                pdfManager.ensureDoc("xref"),
                                                pdfManager.ensureDoc("linearization"),
                                                pdfManager.ensureCatalog("structTreeRoot"),
                                             ];
                                             promises = [];
                                             newAnnotationsByPage = !isPureXfa
                                                ? getNewAnnotationsMap(annotationStorage)
                                                : null;
                                             _context99.n = 1;
                                             return Promise.all(globalPromises);
                                          case 1:
                                             _yield$Promise$all3 = _context99.v;
                                             _yield$Promise$all4 = _slicedToArray(
                                                _yield$Promise$all3,
                                                7,
                                             );
                                             stream = _yield$Promise$all4[0];
                                             acroForm = _yield$Promise$all4[1];
                                             acroFormRef = _yield$Promise$all4[2];
                                             startXRef = _yield$Promise$all4[3];
                                             xref = _yield$Promise$all4[4];
                                             linearization = _yield$Promise$all4[5];
                                             _structTreeRoot = _yield$Promise$all4[6];
                                             catalogRef = xref.trailer.getRaw("Root") || null;
                                             if (!newAnnotationsByPage) {
                                                _context99.n = 14;
                                                break;
                                             }
                                             if (_structTreeRoot) {
                                                _context99.n = 4;
                                                break;
                                             }
                                             _context99.n = 2;
                                             return StructTreeRoot.canCreateStructureTree({
                                                catalogRef: catalogRef,
                                                pdfManager: pdfManager,
                                                newAnnotationsByPage: newAnnotationsByPage,
                                             });
                                          case 2:
                                             if (!_context99.v) {
                                                _context99.n = 3;
                                                break;
                                             }
                                             structTreeRoot = null;
                                          case 3:
                                             _context99.n = 6;
                                             break;
                                          case 4:
                                             _context99.n = 5;
                                             return _structTreeRoot.canUpdateStructTree({
                                                pdfManager: pdfManager,
                                                xref: xref,
                                                newAnnotationsByPage: newAnnotationsByPage,
                                             });
                                          case 5:
                                             if (!_context99.v) {
                                                _context99.n = 6;
                                                break;
                                             }
                                             structTreeRoot = _structTreeRoot;
                                          case 6:
                                             imagePromises = AnnotationFactory.generateImages(
                                                annotationStorage.values(),
                                                xref,
                                                pdfManager.evaluatorOptions
                                                   .isOffscreenCanvasSupported,
                                             );
                                             newAnnotationPromises =
                                                structTreeRoot === undefined ? promises : [];
                                             _iterator234 =
                                                _createForOfIteratorHelper(
                                                   newAnnotationsByPage,
                                                );
                                             _context99.p = 7;
                                             _loop7 = /*#__PURE__*/ _regenerator().m(
                                                function _loop7() {
                                                   var _step234$value, pageIndex, annotations;
                                                   return _regenerator().w(function (
                                                      _context97,
                                                   ) {
                                                      while (1)
                                                         switch (_context97.n) {
                                                            case 0:
                                                               ((_step234$value = _slicedToArray(
                                                                  _step234.value,
                                                                  2,
                                                               )),
                                                                  (pageIndex = _step234$value[0]),
                                                                  (annotations = _step234$value[1]));
                                                               newAnnotationPromises.push(
                                                                  pdfManager
                                                                     .getPage(pageIndex)
                                                                     .then(function (page) {
                                                                        var task = new WorkerTask(
                                                                           "Save (editor): page ".concat(
                                                                              pageIndex,
                                                                           ),
                                                                        );
                                                                        return page
                                                                           .saveNewAnnotations(
                                                                              handler,
                                                                              task,
                                                                              annotations,
                                                                              imagePromises,
                                                                           )
                                                                           ["finally"](function () {
                                                                           finishWorkerTask(task);
                                                                        });
                                                                     }),
                                                               );
                                                            case 1:
                                                               return _context97.a(2);
                                                         }
                                                   }, _loop7);
                                                },
                                             );
                                             _iterator234.s();
                                          case 8:
                                             if ((_step234 = _iterator234.n()).done) {
                                                _context99.n = 10;
                                                break;
                                             }
                                             return _context99.d(
                                                _regeneratorValues(_loop7()),
                                                9,
                                             );
                                          case 9:
                                             _context99.n = 8;
                                             break;
                                          case 10:
                                             _context99.n = 12;
                                             break;
                                          case 11:
                                             _context99.p = 11;
                                             _t72 = _context99.v;
                                             _iterator234.e(_t72);
                                          case 12:
                                             _context99.p = 12;
                                             _iterator234.f();
                                             return _context99.f(12);
                                          case 13:
                                             if (structTreeRoot === null) {
                                                promises.push(
                                                   Promise.all(newAnnotationPromises).then(
                                                      /*#__PURE__*/ (function () {
                                                         var _ref129 = _asyncToGenerator(
                                                            /*#__PURE__*/ _regenerator().m(
                                                               function _callee80(newRefs) {
                                                                  return _regenerator().w(function (
                                                                     _context95,
                                                                  ) {
                                                                     while (1)
                                                                        switch (_context95.n) {
                                                                           case 0:
                                                                              _context95.n = 1;
                                                                              return StructTreeRoot.createStructureTree(
                                                                                 {
                                                                                    newAnnotationsByPage:
                                                                                    newAnnotationsByPage,
                                                                                    xref: xref,
                                                                                    catalogRef: catalogRef,
                                                                                    pdfManager: pdfManager,
                                                                                    newRefs: newRefs,
                                                                                 },
                                                                              );
                                                                           case 1:
                                                                              return _context95.a(
                                                                                 2,
                                                                                 newRefs,
                                                                              );
                                                                        }
                                                                  }, _callee80);
                                                               },
                                                            ),
                                                         );
                                                         return function (_x200) {
                                                            return _ref129.apply(this, arguments);
                                                         };
                                                      })(),
                                                   ),
                                                );
                                             } else if (structTreeRoot) {
                                                promises.push(
                                                   Promise.all(newAnnotationPromises).then(
                                                      /*#__PURE__*/ (function () {
                                                         var _ref130 = _asyncToGenerator(
                                                            /*#__PURE__*/ _regenerator().m(
                                                               function _callee81(newRefs) {
                                                                  return _regenerator().w(function (
                                                                     _context96,
                                                                  ) {
                                                                     while (1)
                                                                        switch (_context96.n) {
                                                                           case 0:
                                                                              _context96.n = 1;
                                                                              return structTreeRoot.updateStructureTree(
                                                                                 {
                                                                                    newAnnotationsByPage:
                                                                                    newAnnotationsByPage,
                                                                                    pdfManager: pdfManager,
                                                                                    newRefs: newRefs,
                                                                                 },
                                                                              );
                                                                           case 1:
                                                                              return _context96.a(
                                                                                 2,
                                                                                 newRefs,
                                                                              );
                                                                        }
                                                                  }, _callee81);
                                                               },
                                                            ),
                                                         );
                                                         return function (_x201) {
                                                            return _ref130.apply(this, arguments);
                                                         };
                                                      })(),
                                                   ),
                                                );
                                             }
                                          case 14:
                                             if (!isPureXfa) {
                                                _context99.n = 15;
                                                break;
                                             }
                                             promises.push(
                                                pdfManager.serializeXfaData(annotationStorage),
                                             );
                                             _context99.n = 18;
                                             break;
                                          case 15:
                                             _loop8 = /*#__PURE__*/ _regenerator().m(
                                                function _loop8(_pageIndex5) {
                                                   return _regenerator().w(function (
                                                      _context98,
                                                   ) {
                                                      while (1)
                                                         switch (_context98.n) {
                                                            case 0:
                                                               promises.push(
                                                                  pdfManager
                                                                     .getPage(_pageIndex5)
                                                                     .then(function (page) {
                                                                        var task = new WorkerTask(
                                                                           "Save: page ".concat(
                                                                              _pageIndex5,
                                                                           ),
                                                                        );
                                                                        return page
                                                                           .save(
                                                                              handler,
                                                                              task,
                                                                              annotationStorage,
                                                                           )
                                                                           ["finally"](function () {
                                                                           finishWorkerTask(task);
                                                                        });
                                                                     }),
                                                               );
                                                            case 1:
                                                               return _context98.a(2);
                                                         }
                                                   }, _loop8);
                                                },
                                             );
                                             _pageIndex5 = 0;
                                          case 16:
                                             if (!(_pageIndex5 < numPages)) {
                                                _context99.n = 18;
                                                break;
                                             }
                                             return _context99.d(
                                                _regeneratorValues(_loop8(_pageIndex5)),
                                                17,
                                             );
                                          case 17:
                                             _pageIndex5++;
                                             _context99.n = 16;
                                             break;
                                          case 18:
                                             _context99.n = 19;
                                             return Promise.all(promises);
                                          case 19:
                                             refs = _context99.v;
                                             newRefs = [];
                                             xfaData = null;
                                             if (!isPureXfa) {
                                                _context99.n = 21;
                                                break;
                                             }
                                             xfaData = refs[0];
                                             if (xfaData) {
                                                _context99.n = 20;
                                                break;
                                             }
                                             return _context99.a(2, stream.bytes);
                                          case 20:
                                             _context99.n = 22;
                                             break;
                                          case 21:
                                             newRefs = refs.flat(2);
                                             if (!(newRefs.length === 0)) {
                                                _context99.n = 22;
                                                break;
                                             }
                                             return _context99.a(2, stream.bytes);
                                          case 22:
                                             needAppearances =
                                                acroFormRef &&
                                                acroForm instanceof Dict &&
                                                newRefs.some(function (ref) {
                                                   return ref.needAppearances;
                                                });
                                             xfa =
                                                (acroForm instanceof Dict &&
                                                   acroForm.get("XFA")) ||
                                                null;
                                             xfaDatasetsRef = null;
                                             hasXfaDatasetsEntry = false;
                                             if (Array.isArray(xfa)) {
                                                for (i = 0, ii = xfa.length; i < ii; i += 2) {
                                                   if (xfa[i] === "datasets") {
                                                      xfaDatasetsRef = xfa[i + 1];
                                                      hasXfaDatasetsEntry = true;
                                                   }
                                                }
                                                if (xfaDatasetsRef === null) {
                                                   xfaDatasetsRef = xref.getNewTemporaryRef();
                                                }
                                             } else if (xfa) {
                                                warn("Unsupported XFA type.");
                                             }
                                             newXrefInfo = Object.create(null);
                                             if (xref.trailer) {
                                                infoObj = Object.create(null);
                                                xrefInfo = xref.trailer.get("Info") || null;
                                                if (xrefInfo instanceof Dict) {
                                                   xrefInfo.forEach(function (key, value) {
                                                      if (typeof value === "string") {
                                                         infoObj[key] = stringToPDFString(value);
                                                      }
                                                   });
                                                }
                                                newXrefInfo = {
                                                   rootRef: catalogRef,
                                                   encryptRef:
                                                      xref.trailer.getRaw("Encrypt") || null,
                                                   newRef: xref.getNewTemporaryRef(),
                                                   infoRef: xref.trailer.getRaw("Info") || null,
                                                   info: infoObj,
                                                   fileIds: xref.trailer.get("ID") || null,
                                                   startXRef: linearization
                                                      ? startXRef
                                                      : (_xref$lastXRefStreamP =
                                                         xref.lastXRefStreamPos) !== null &&
                                                      _xref$lastXRefStreamP !== void 0
                                                         ? _xref$lastXRefStreamP
                                                         : startXRef,
                                                   filename: filename,
                                                };
                                             }
                                             return _context99.a(
                                                2,
                                                incrementalUpdate({
                                                   originalData: stream.bytes,
                                                   xrefInfo: newXrefInfo,
                                                   newRefs: newRefs,
                                                   xref: xref,
                                                   hasXfa: !!xfa,
                                                   xfaDatasetsRef: xfaDatasetsRef,
                                                   hasXfaDatasetsEntry: hasXfaDatasetsEntry,
                                                   needAppearances: needAppearances,
                                                   acroFormRef: acroFormRef,
                                                   acroForm: acroForm,
                                                   xfaData: xfaData,
                                                   useXrefStream: isDict(xref.topDict, "XRef"),
                                                })["finally"](function () {
                                                   xref.resetNewTemporaryRef();
                                                }),
                                             );
                                       }
                                 },
                                 _callee82,
                                 null,
                                 [[7, 11, 12, 13]],
                              );
                           }),
                        );
                        return function (_x199) {
                           return _ref128.apply(this, arguments);
                        };
                     })(),
                  );
                  handler.on("GetOperatorList", function (data, sink) {
                     var pageIndex = data.pageIndex;
                     pdfManager.getPage(pageIndex).then(function (page) {
                        var task = new WorkerTask(
                           "GetOperatorList: page ".concat(pageIndex),
                        );
                        startWorkerTask(task);
                        var start = verbosity >= VerbosityLevel.INFOS ? Date.now() : 0;
                        page
                           .getOperatorList({
                              handler: handler,
                              sink: sink,
                              task: task,
                              intent: data.intent,
                              cacheKey: data.cacheKey,
                              annotationStorage: data.annotationStorage,
                           })
                           .then(
                              function (operatorListInfo) {
                                 finishWorkerTask(task);
                                 if (start) {
                                    info(
                                       "page=".concat(
                                          pageIndex + 1,
                                          " - getOperatorList: time=",
                                       ) +
                                       ""
                                          .concat(Date.now() - start, "ms, len=")
                                          .concat(operatorListInfo.length),
                                    );
                                 }
                                 sink.close();
                              },
                              function (reason) {
                                 finishWorkerTask(task);
                                 if (task.terminated) {
                                    return;
                                 }
                                 sink.error(reason);
                              },
                           );
                     });
                  });
                  handler.on("GetTextContent", function (data, sink) {
                     var pageIndex = data.pageIndex,
                        includeMarkedContent = data.includeMarkedContent,
                        disableNormalization = data.disableNormalization;
                     pdfManager.getPage(pageIndex).then(function (page) {
                        var task = new WorkerTask("GetTextContent: page " + pageIndex);
                        startWorkerTask(task);
                        var start = verbosity >= VerbosityLevel.INFOS ? Date.now() : 0;
                        page
                           .extractTextContent({
                              handler: handler,
                              task: task,
                              sink: sink,
                              includeMarkedContent: includeMarkedContent,
                              disableNormalization: disableNormalization,
                           })
                           .then(
                              function () {
                                 finishWorkerTask(task);
                                 if (start) {
                                    info(
                                       "page=".concat(
                                          pageIndex + 1,
                                          " - getTextContent: time=",
                                       ) + "".concat(Date.now() - start, "ms"),
                                    );
                                 }
                                 sink.close();
                              },
                              function (reason) {
                                 finishWorkerTask(task);
                                 if (task.terminated) {
                                    return;
                                 }
                                 sink.error(reason);
                              },
                           );
                     });
                  });
                  handler.on("GetStructTree", function (data) {
                     return pdfManager.getPage(data.pageIndex).then(function (page) {
                        return pdfManager.ensure(page, "getStructTree");
                     });
                  });
                  handler.on("FontFallback", function (data) {
                     return pdfManager.fontFallback(data.id, handler);
                  });
                  handler.on("Cleanup", function (data) {
                     return pdfManager.cleanup(true);
                  });
                  handler.on("Terminate", function (data) {
                     terminated = true;
                     var waitOn = [];
                     if (pdfManager) {
                        pdfManager.terminate(
                           new AbortException("Worker was terminated."),
                        );
                        var cleanupPromise = pdfManager.cleanup();
                        waitOn.push(cleanupPromise);
                        pdfManager = null;
                     } else {
                        clearGlobalCaches();
                     }
                     if (cancelXHRs) {
                        cancelXHRs(new AbortException("Worker was terminated."));
                     }
                     var _iterator235 = _createForOfIteratorHelper(WorkerTasks),
                        _step235;
                     try {
                        for (_iterator235.s(); !(_step235 = _iterator235.n()).done; ) {
                           var task = _step235.value;
                           waitOn.push(task.finished);
                           task.terminate();
                        }
                     } catch (err) {
                        _iterator235.e(err);
                     } finally {
                        _iterator235.f();
                     }
                     return Promise.all(waitOn).then(function () {
                        handler.destroy();
                        handler = null;
                     });
                  });
                  handler.on("Ready", function (data) {
                     setupDoc(docParams);
                     docParams = null;
                  });
                  return workerHandlerName;
               },
            },
            {
               key: "initializeFromPort",
               value: function initializeFromPort(port) {
                  var handler = new MessageHandler("worker", "main", port);
                  _WorkerMessageHandler.setup(handler, port);
                  handler.send("ready", null);
               },
            },
         ]);
      })();
      function isMessagePort(maybePort) {
         return (
            typeof maybePort.postMessage === "function" && "onmessage" in maybePort
         );
      }
      if (
         typeof window === "undefined" &&
         !isNodeJS &&
         typeof self !== "undefined" &&
         isMessagePort(self)
      ) {
         _WorkerMessageHandler.initializeFromPort(self);
      } // CONCATENATED MODULE: ./src/pdf.worker.js
      var pdfjsVersion = "4.2.67";
      var pdfjsBuild = "49b388101";
      var __webpack_exports__WorkerMessageHandler =
         (_exports.WorkerMessageHandler =
            __webpack_exports__.WorkerMessageHandler);
   },
);

window.pdfjsWorker = module.exports;
